-- 20240931_1.10.0_rollback_system.sql
-- Migration file to add a formal rollback system for reversing migrations

-- Add rollback tracking to migration_meta schema
ALTER TABLE IF EXISTS migration_meta.migrations
ADD COLUMN IF NOT EXISTS has_rollback BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS rolled_back_at TIMESTAMPTZ,
ADD COLUMN IF NOT EXISTS rolled_back_by TEXT;

-- Create rollback_scripts table to store rollback SQL
CREATE TABLE IF NOT EXISTS migration_meta.rollback_scripts (
    id SERIAL PRIMARY KEY,
    migration_id INTEGER REFERENCES migration_meta.migrations(id) ON DELETE CASCADE,
    rollback_sql TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (migration_id)
);

-- Create function to register a rollback script
CREATE OR REPLACE FUNCTION migration_meta.register_rollback(
    p_version TEXT,
    p_migration_name TEXT,
    p_rollback_sql TEXT
) RETURNS INTEGER AS $$
DECLARE
    v_migration_id INTEGER;
    v_rollback_id INTEGER;
BEGIN
    -- Get the migration ID
    SELECT id INTO v_migration_id
    FROM migration_meta.migrations
    WHERE version = p_version AND migration_name = p_migration_name;
    
    -- If migration not found, insert it first
    IF v_migration_id IS NULL THEN
        INSERT INTO migration_meta.migrations(
            version,
            migration_name,
            description,
            success,
            has_rollback
        ) VALUES (
            p_version,
            p_migration_name,
            'Migration registered during rollback script creation',
            TRUE,
            TRUE
        )
        RETURNING id INTO v_migration_id;
    ELSE
        -- Update existing migration to indicate it has a rollback
        UPDATE migration_meta.migrations
        SET has_rollback = TRUE
        WHERE id = v_migration_id;
    END IF;
    
    -- Insert or update the rollback script
    INSERT INTO migration_meta.rollback_scripts(
        migration_id,
        rollback_sql
    ) VALUES (
        v_migration_id,
        p_rollback_sql
    )
    ON CONFLICT (migration_id) 
    DO UPDATE SET
        rollback_sql = p_rollback_sql,
        created_at = now()
    RETURNING id INTO v_rollback_id;
    
    RETURN v_rollback_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to execute a rollback for a specific migration
CREATE OR REPLACE FUNCTION migration_meta.rollback_migration(
    p_version TEXT,
    p_migration_name TEXT
) RETURNS BOOLEAN AS $$
DECLARE
    v_migration_id INTEGER;
    v_rollback_sql TEXT;
    v_success BOOLEAN := FALSE;
BEGIN
    -- Get the migration ID and rollback SQL
    SELECT m.id, r.rollback_sql
    INTO v_migration_id, v_rollback_sql
    FROM migration_meta.migrations m
    JOIN migration_meta.rollback_scripts r ON r.migration_id = m.id
    WHERE m.version = p_version AND m.migration_name = p_migration_name;
    
    -- If no rollback script found, return false
    IF v_rollback_sql IS NULL THEN
        PERFORM migration_meta.log_migration(
            v_migration_id,
            'ERROR',
            'No rollback script found for migration ' || p_version || '_' || p_migration_name
        );
        RETURN FALSE;
    END IF;
    
    -- Execute the rollback SQL
    BEGIN
        EXECUTE v_rollback_sql;
        v_success := TRUE;
        
        -- Update the migration record
        UPDATE migration_meta.migrations
        SET rolled_back_at = now(),
            rolled_back_by = CURRENT_USER
        WHERE id = v_migration_id;
        
        PERFORM migration_meta.log_migration(
            v_migration_id,
            'INFO',
            'Successfully rolled back migration ' || p_version || '_' || p_migration_name
        );
    EXCEPTION WHEN OTHERS THEN
        PERFORM migration_meta.log_migration(
            v_migration_id,
            'ERROR',
            'Failed to roll back migration ' || p_version || '_' || p_migration_name || ': ' || SQLERRM,
            jsonb_build_object('error_detail', SQLSTATE, 'rollback_sql', v_rollback_sql)
        );
        RETURN FALSE;
    END;
    
    RETURN v_success;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to roll back to a specific version
CREATE OR REPLACE FUNCTION migration_meta.rollback_to_version(
    p_target_version TEXT
) RETURNS TABLE (
    version TEXT,
    migration_name TEXT,
    rolled_back BOOLEAN
) AS $$
DECLARE
    v_current_migration RECORD;
BEGIN
    -- Get all migrations that need to be rolled back (newer than target)
    FOR v_current_migration IN
        SELECT m.version, m.migration_name
        FROM migration_meta.migrations m
        WHERE m.success = TRUE
          AND m.has_rollback = TRUE
          AND m.rolled_back_at IS NULL
          AND (
                -- Compare version numbers correctly
                string_to_array(m.version, '.')::int[] >
                string_to_array(p_target_version, '.')::int[]
              )
        ORDER BY string_to_array(m.version, '.')::int[] DESC
    LOOP
        -- Roll back each migration
        version := v_current_migration.version;
        migration_name := v_current_migration.migration_name;
        rolled_back := migration_meta.rollback_migration(version, migration_name);
        
        RETURN NEXT;
    END LOOP;
    
    RETURN;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Register this migration
SELECT migration_meta.register_migration(
    '1.10.0',
    'rollback_system',
    'Add formal rollback system for migrations'
);

-- Register a rollback for this migration (self-rollback)
SELECT migration_meta.register_rollback(
    '1.10.0',
    'rollback_system',
    $ROLLBACK$
    -- Drop the rollback functions
    DROP FUNCTION IF EXISTS migration_meta.rollback_to_version;
    DROP FUNCTION IF EXISTS migration_meta.rollback_migration;
    DROP FUNCTION IF EXISTS migration_meta.register_rollback;
    
    -- Drop the rollback_scripts table
    DROP TABLE IF EXISTS migration_meta.rollback_scripts;
    
    -- Remove rollback columns from migrations table
    ALTER TABLE migration_meta.migrations
    DROP COLUMN IF EXISTS has_rollback,
    DROP COLUMN IF EXISTS rolled_back_at,
    DROP COLUMN IF EXISTS rolled_back_by;
    $ROLLBACK$
);

COMMENT ON TABLE migration_meta.rollback_scripts IS 'Stores SQL scripts for rolling back migrations';
COMMENT ON FUNCTION migration_meta.register_rollback IS 'Registers a rollback script for a migration';
COMMENT ON FUNCTION migration_meta.rollback_migration IS 'Executes a rollback for a specific migration';
COMMENT ON FUNCTION migration_meta.rollback_to_version IS 'Rolls back all migrations to reach a target version'; 