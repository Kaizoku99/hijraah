{"version":3,"file":"4508.js","mappings":"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","sources":["webpack://@hijraah/web/../../../src/client/components/not-found.ts","webpack://@hijraah/web/../../../src/client/components/forbidden.ts","webpack://@hijraah/web/./src/services/chat-service-consolidated.ts","webpack://@hijraah/web/../../../src/client/components/unstable-rethrow.server.ts","webpack://@hijraah/web/../../node_modules/.pnpm/next@15.3.0-canary.31_@babe_be67f368de2727c847f3a61f5e6cf4fa/node_modules/next/dist/api/navigation.react-server.js","webpack://@hijraah/web/../../../src/client/components/unstable-rethrow.ts","webpack://@hijraah/web/../../../src/client/components/unauthorized.ts","webpack://@hijraah/web/../../../src/client/components/redirect.ts","webpack://@hijraah/web/../../../src/client/components/navigation.react-server.ts"],"sourcesContent":["import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n/**\n * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\n * within a route segment as well as inject a tag.\n *\n * `notFound()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a `<meta name=\"robots\" content=\"noindex\" />` meta tag and set the status code to 404.\n * - In a Route Handler or Server Action, it will serve a 404 to the caller.\n *\n * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};404`\n\nexport function notFound(): never {\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n\n  throw error\n}\n","import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `forbidden` docs\n/**\n * @experimental\n * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)\n * within a route segment as well as inject a tag.\n *\n * `forbidden()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};403`\n\nexport function forbidden(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`forbidden()\\` is experimental and only allowed to be enabled when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n","/**\r\n * Consolidated Chat Service\r\n *\r\n * Based on Vercel AI SDK patterns:\r\n * - Direct database queries (no service layer abstraction)\r\n * - Simple query functions\r\n * - Proper TypeScript typing\r\n * - onFinish callbacks for persistence\r\n *\r\n * Replaces:\r\n * - chat-service.ts\r\n * - chat-legacy-service.ts\r\n * - lib/contexts/chat-context.tsx ChatService\r\n * - lib/ai/chat-service.ts\r\n * - _core/chat/services/chat-service.ts\r\n */\r\n\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { streamText, generateText } from \"ai\";\r\nimport { openai } from \"@ai-sdk/openai\";\r\nimport { z } from \"zod\";\r\nimport type { Database } from \"@/types/database.types\";\r\n\r\n// Types based on actual database schema\r\nexport type ChatRow = Database[\"public\"][\"Tables\"][\"Chat\"][\"Row\"];\r\nexport type ChatInsert = Database[\"public\"][\"Tables\"][\"Chat\"][\"Insert\"];\r\nexport type ChatMessageRow =\r\n  Database[\"public\"][\"Tables\"][\"chat_messages\"][\"Row\"];\r\nexport type ChatMessageInsert =\r\n  Database[\"public\"][\"Tables\"][\"chat_messages\"][\"Insert\"];\r\nexport type ChatAttachmentRow =\r\n  Database[\"public\"][\"Tables\"][\"chat_attachments\"][\"Row\"];\r\nexport type ChatAttachmentInsert =\r\n  Database[\"public\"][\"Tables\"][\"chat_attachments\"][\"Insert\"];\r\n\r\n// Initialize typed Supabase client (Vercel pattern)\r\nconst supabase = createClient<Database>(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n);\r\n\r\n// ============================================================================\r\n// DIRECT DATABASE QUERIES (Vercel AI Chatbot Pattern)\r\n// ============================================================================\r\n\r\n/**\r\n * Save chat with messages - Used in onFinish callback\r\n */\r\nexport async function saveChat({\r\n  id,\r\n  title,\r\n  userId,\r\n  messages,\r\n}: {\r\n  id: string;\r\n  title: string;\r\n  userId: string;\r\n  messages: Array<{\r\n    role: \"user\" | \"assistant\" | \"system\";\r\n    content: string;\r\n    attachments?: Array<{ name: string; url: string; contentType: string }>;\r\n  }>;\r\n}) {\r\n  try {\r\n    // Insert or update chat\r\n    const { error: chatError } = await supabase.from(\"Chat\").upsert({\r\n      id,\r\n      title,\r\n      userId,\r\n      createdAt: new Date().toISOString(),\r\n    });\r\n\r\n    if (chatError) throw chatError;\r\n\r\n    // Insert messages\r\n    const messageInserts: ChatMessageInsert[] = messages.map((msg, index) => ({\r\n      id: `${id}-msg-${index}`,\r\n      session_id: id,\r\n      role: msg.role,\r\n      content: msg.content,\r\n      user_id: userId,\r\n      created_at: new Date().toISOString(),\r\n    }));\r\n\r\n    const { error: messagesError } = await supabase\r\n      .from(\"chat_messages\")\r\n      .upsert(messageInserts);\r\n\r\n    if (messagesError) throw messagesError;\r\n\r\n    // Insert attachments if any\r\n    for (const [msgIndex, msg] of messages.entries()) {\r\n      if (msg.attachments?.length) {\r\n        const attachmentInserts: ChatAttachmentInsert[] = msg.attachments.map(\r\n          (att, attIndex) => ({\r\n            id: `${id}-msg-${msgIndex}-att-${attIndex}`,\r\n            message_id: `${id}-msg-${msgIndex}`,\r\n            chat_id: id,\r\n            user_id: userId,\r\n            file_name: att.name,\r\n            file_path: att.url,\r\n            file_type: att.contentType,\r\n            file_size: 0, // Default size, should be provided in actual implementation\r\n            created_at: new Date().toISOString(),\r\n          })\r\n        );\r\n\r\n        const { error: attachmentsError } = await supabase\r\n          .from(\"chat_attachments\")\r\n          .insert(attachmentInserts);\r\n\r\n        if (attachmentsError) throw attachmentsError;\r\n      }\r\n    }\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Failed to save chat:\", error);\r\n    return { success: false, error };\r\n  }\r\n}\r\n\r\n/**\r\n * Get chat by ID with messages and attachments\r\n * Note: The Chat table and chat_messages/chat_sessions have different relationships\r\n */\r\nexport async function getChatById(id: string) {\r\n  const { data: chat, error: chatError } = await supabase\r\n    .from(\"Chat\")\r\n    .select(\"*\")\r\n    .eq(\"id\", id)\r\n    .single();\r\n\r\n  if (chatError) throw chatError;\r\n\r\n  // Get associated messages from chat_sessions\r\n  const { data: messages, error: messagesError } = await supabase\r\n    .from(\"chat_messages\")\r\n    .select(\r\n      `\r\n      *,\r\n      chat_attachments (*)\r\n    `\r\n    )\r\n    .eq(\"session_id\", id)\r\n    .order(\"created_at\", { ascending: true });\r\n\r\n  if (messagesError) throw messagesError;\r\n\r\n  return {\r\n    ...chat,\r\n    messages: messages || [],\r\n  };\r\n}\r\n\r\n/**\r\n * Get user's chat history\r\n */\r\nexport async function getUserChats(userId: string) {\r\n  const { data, error } = await supabase\r\n    .from(\"Chat\")\r\n    .select(\"id, title, createdAt\")\r\n    .eq(\"userId\", userId)\r\n    .order(\"createdAt\", { ascending: false });\r\n\r\n  if (error) throw error;\r\n  return data;\r\n}\r\n\r\n/**\r\n * Delete chat and all related data\r\n */\r\nexport async function deleteChat(id: string) {\r\n  // Cascade delete will handle messages and attachments\r\n  const { error } = await supabase.from(\"Chat\").delete().eq(\"id\", id);\r\n\r\n  if (error) throw error;\r\n  return { success: true };\r\n}\r\n\r\n// ============================================================================\r\n// AI CHAT FUNCTIONALITY (Vercel AI SDK Pattern)\r\n// ============================================================================\r\n\r\n/**\r\n * Stream chat response with automatic persistence\r\n * This follows the Vercel AI SDK pattern exactly\r\n */\r\nexport async function streamChatResponse({\r\n  chatId,\r\n  messages,\r\n  userId,\r\n  title,\r\n}: {\r\n  chatId: string;\r\n  messages: Array<{ role: \"user\" | \"assistant\" | \"system\"; content: string }>;\r\n  userId: string;\r\n  title?: string;\r\n}) {\r\n  const result = streamText({\r\n    model: openai(\"gpt-4o\"),\r\n    messages,\r\n    system: \"You are a helpful immigration assistant for Canada.\",\r\n    // Vercel pattern: Use onFinish to save complete conversation\r\n    onFinish: async ({ text, response }) => {\r\n      try {\r\n        // Create assistant message from the text response\r\n        const assistantMessage = {\r\n          role: \"assistant\" as const,\r\n          content: text,\r\n        };\r\n\r\n        await saveChat({\r\n          id: chatId,\r\n          title: title || messages[0]?.content.slice(0, 50) || \"New Chat\",\r\n          userId,\r\n          messages: [...messages, assistantMessage],\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Failed to save chat:\", error);\r\n      }\r\n    },\r\n  });\r\n\r\n  return result.toDataStreamResponse();\r\n}\r\n\r\n/**\r\n * Generate chat response (non-streaming)\r\n */\r\nexport async function generateChatResponse({\r\n  chatId,\r\n  messages,\r\n  userId,\r\n  title,\r\n}: {\r\n  chatId: string;\r\n  messages: Array<{ role: \"user\" | \"assistant\" | \"system\"; content: string }>;\r\n  userId: string;\r\n  title?: string;\r\n}) {\r\n  const result = await generateText({\r\n    model: openai(\"gpt-4o\"),\r\n    messages,\r\n    system: \"You are a helpful immigration assistant for Canada.\",\r\n  });\r\n\r\n  // Save the complete conversation\r\n  await saveChat({\r\n    id: chatId,\r\n    title: title || messages[0]?.content.slice(0, 50) || \"New Chat\",\r\n    userId,\r\n    messages: [...messages, { role: \"assistant\", content: result.text }],\r\n  });\r\n\r\n  return {\r\n    text: result.text,\r\n    usage: result.usage,\r\n    finishReason: result.finishReason,\r\n  };\r\n}\r\n\r\n// ============================================================================\r\n// UTILITY FUNCTIONS\r\n// ============================================================================\r\n\r\n/**\r\n * Convert database messages to AI SDK format\r\n */\r\nexport function convertToAIMessages(dbMessages: ChatMessageRow[]) {\r\n  return dbMessages\r\n    .sort(\r\n      (a, b) =>\r\n        new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\r\n    )\r\n    .map((msg) => ({\r\n      role: msg.role as \"user\" | \"assistant\" | \"system\",\r\n      content: msg.content,\r\n    }));\r\n}\r\n\r\n/**\r\n * Search user's chats\r\n */\r\nexport async function searchUserChats(userId: string, query: string) {\r\n  const { data, error } = await supabase\r\n    .from(\"Chat\")\r\n    .select(\"id, title, createdAt\")\r\n    .eq(\"userId\", userId)\r\n    .textSearch(\"title\", query)\r\n    .order(\"createdAt\", { ascending: false });\r\n\r\n  if (error) throw error;\r\n  return data;\r\n}\r\n\r\n/**\r\n * Update chat title\r\n */\r\nexport async function updateChatTitle(chatId: string, title: string) {\r\n  const { error } = await supabase\r\n    .from(\"Chat\")\r\n    .update({ title })\r\n    .eq(\"id\", chatId);\r\n\r\n  if (error) throw error;\r\n  return { success: true };\r\n}\r\n\r\n// ============================================================================\r\n// EXPORT DEFAULT (for compatibility)\r\n// ============================================================================\r\n\r\nexport default {\r\n  saveChat,\r\n  getChatById,\r\n  getUserChats,\r\n  deleteChat,\r\n  streamChatResponse,\r\n  generateChatResponse,\r\n  convertToAIMessages,\r\n  searchUserChats,\r\n  updateChatTitle,\r\n};\r\n","import { isHangingPromiseRejectionError } from '../../server/dynamic-rendering-utils'\nimport { isPostpone } from '../../server/lib/router-utils/is-postpone'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNextRouterError } from './is-next-router-error'\nimport { isDynamicPostpone } from '../../server/app-render/dynamic-rendering'\nimport { isDynamicServerError } from './hooks-server-context'\n\nexport function unstable_rethrow(error: unknown): void {\n  if (\n    isNextRouterError(error) ||\n    isBailoutToCSRError(error) ||\n    isDynamicServerError(error) ||\n    isDynamicPostpone(error) ||\n    isPostpone(error) ||\n    isHangingPromiseRejectionError(error)\n  ) {\n    throw error\n  }\n\n  if (error instanceof Error && 'cause' in error) {\n    unstable_rethrow(error.cause)\n  }\n}\n","export * from '../client/components/navigation.react-server';\n\n//# sourceMappingURL=navigation.react-server.js.map","/**\n * This function should be used to rethrow internal Next.js errors so that they can be handled by the framework.\n * When wrapping an API that uses errors to interrupt control flow, you should use this function before you do any error handling.\n * This function will rethrow the error if it is a Next.js error so it can be handled, otherwise it will do nothing.\n *\n * Read more: [Next.js Docs: `unstable_rethrow`](https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow)\n */\nexport const unstable_rethrow =\n  typeof window === 'undefined'\n    ? (\n        require('./unstable-rethrow.server') as typeof import('./unstable-rethrow.server')\n      ).unstable_rethrow\n    : (\n        require('./unstable-rethrow.browser') as typeof import('./unstable-rethrow.browser')\n      ).unstable_rethrow\n","import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `unauthorized` docs\n/**\n * @experimental\n * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)\n * within a route segment as well as inject a tag.\n *\n * `unauthorized()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n *\n * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};401`\n\nexport function unauthorized(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`unauthorized()\\` is experimental and only allowed to be used when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n","import { RedirectStatusCode } from './redirect-status-code'\nimport {\n  RedirectType,\n  type RedirectError,\n  isRedirectError,\n  REDIRECT_ERROR_CODE,\n} from './redirect-error'\n\nconst actionAsyncStorage =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/action-async-storage.external') as typeof import('../../server/app-render/action-async-storage.external')\n      ).actionAsyncStorage\n    : undefined\n\nexport function getRedirectError(\n  url: string,\n  type: RedirectType,\n  statusCode: RedirectStatusCode = RedirectStatusCode.TemporaryRedirect\n): RedirectError {\n  const error = new Error(REDIRECT_ERROR_CODE) as RedirectError\n  error.digest = `${REDIRECT_ERROR_CODE};${type};${url};${statusCode};`\n  return error\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 307/303 to the caller.\n * - In a Server Action, type defaults to 'push' and 'replace' elsewhere.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function redirect(\n  /** The URL to redirect to */\n  url: string,\n  type?: RedirectType\n): never {\n  type ??= actionAsyncStorage?.getStore()?.isAction\n    ? RedirectType.push\n    : RedirectType.replace\n\n  throw getRedirectError(url, type, RedirectStatusCode.TemporaryRedirect)\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 308/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function permanentRedirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  throw getRedirectError(url, type, RedirectStatusCode.PermanentRedirect)\n}\n\n/**\n * Returns the encoded URL from the error if it's a RedirectError, null\n * otherwise. Note that this does not validate the URL returned.\n *\n * @param error the error that may be a redirect error\n * @return the url if the error was a redirect error\n */\nexport function getURLFromRedirectError(error: RedirectError): string\nexport function getURLFromRedirectError(error: unknown): string | null {\n  if (!isRedirectError(error)) return null\n\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';')\n}\n\nexport function getRedirectTypeFromError(error: RedirectError): RedirectType {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return error.digest.split(';', 2)[1] as RedirectType\n}\n\nexport function getRedirectStatusCodeFromError(error: RedirectError): number {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return Number(error.digest.split(';').at(-2))\n}\n","/** @internal */\nclass ReadonlyURLSearchParamsError extends Error {\n  constructor() {\n    super(\n      'Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams'\n    )\n  }\n}\n\nclass ReadonlyURLSearchParams extends URLSearchParams {\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  append() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  delete() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  set() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  sort() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n}\n\nexport { redirect, permanentRedirect } from './redirect'\nexport { RedirectType } from './redirect-error'\nexport { notFound } from './not-found'\nexport { forbidden } from './forbidden'\nexport { unauthorized } from './unauthorized'\nexport { unstable_rethrow } from './unstable-rethrow'\nexport { ReadonlyURLSearchParams }\n"],"names":["notFound","DIGEST","HTTP_ERROR_FALLBACK_ERROR_CODE","error","digest","forbidden","supabase","createClient","process","saveChat","id","title","userId","messages","chatError","from","upsert","createdAt","Date","toISOString","messageInserts","map","msg","index","session_id","role","content","user_id","created_at","messagesError","msgIndex","entries","attachments","length","attachmentInserts","att","attIndex","message_id","chat_id","file_name","name","file_path","url","file_type","contentType","file_size","attachmentsError","insert","success","console","getUserChats","data","select","eq","order","ascending","unstable_rethrow","isNextRouterError","isBailoutToCSRError","isDynamicServerError","isDynamicPostpone","isPostpone","isHangingPromiseRejectionError","Error","require","unauthorized","getRedirectError","getRedirectStatusCodeFromError","getRedirectTypeFromError","getURLFromRedirectError","permanentRedirect","redirect","actionAsyncStorage","undefined","type","statusCode","RedirectStatusCode","TemporaryRedirect","REDIRECT_ERROR_CODE","getStore","isAction","RedirectType","push","replace","PermanentRedirect","isRedirectError","split","slice","join","Number","at","ReadonlyURLSearchParams","ReadonlyURLSearchParamsError","constructor","URLSearchParams","append","delete","set","sort"],"sourceRoot":""}