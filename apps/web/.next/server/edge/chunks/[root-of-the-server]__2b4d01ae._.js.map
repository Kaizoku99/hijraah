{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/sentry.edge.config.ts"],"sourcesContent":["// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).\r\n// The config you add here will be used whenever one of the edge features is loaded.\r\n// Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.\r\n// https://docs.sentry.io/platforms/javascript/guides/nextjs/\r\n\r\nimport * as Sentry from \"@sentry/nextjs\";\r\n\r\nSentry.init({\r\n  dsn: process.env.SENTRY_DSN,\r\n\r\n  // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\r\n  tracesSampleRate: 1,\r\n\r\n  // Setting this option to true will print useful information to the console while you're setting up Sentry.\r\n  debug: false,\r\n});\r\n"],"names":[],"mappings":"AAAA,4GAA4G;AAC5G,oFAAoF;AACpF,2GAA2G;AAC3G,6DAA6D;;AAE7D;;AAEA,CAAA,GAAA,kSAAA,CAAA,OAAW,AAAD,EAAE;IACV,KAAK,QAAQ,GAAG,CAAC,UAAU;IAE3B,mHAAmH;IACnH,kBAAkB;IAElB,2GAA2G;IAC3G,OAAO;AACT"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/web/src/instrumentation.ts"],"sourcesContent":["/**\n * Root instrumentation re-export\n */\n\nimport * as Sentry from \"@sentry/nextjs\";\n\n// Your existing instrumentation logic (or parts of it)\nfunction registerLegacyInstrumentation() {\n  // This was originally in src/_infrastructure/monitoring/instrumentation.ts\n  console.log(\"Legacy Instrumentation registered\");\n  // Add any other critical logic from your original register function here if needed\n}\n\nexport async function register() {\n  // Call your legacy instrumentation\n  registerLegacyInstrumentation();\n\n  // Sentry wizard's registration logic\n  if (process.env.NEXT_RUNTIME === \"nodejs\") {\n    // Dynamically import server config to avoid bundling it in edge runtime\n    await import(\"../../../sentry.server.config\"); // Path to root directory\n  }\n\n  if (process.env.NEXT_RUNTIME === \"edge\") {\n    // Dynamically import edge config to avoid bundling it in nodejs runtime\n    await import(\"../../../sentry.edge.config\"); // Path to root directory\n  }\n}\n\n// The Sentry wizard also suggested this for capturing errors during Next.js request handling\n// This might be useful if you have custom error handling in `NextResponse` or similar.\n// However, global-error.tsx and Sentry's general error capturing should catch most things.\n// You can uncomment if you find it necessary or if Sentry support recommends it for specific scenarios.\n// export const onRequestError = Sentry.captureRequestError;\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAID,uDAAuD;AACvD,SAAS;IACP,2EAA2E;IAC3E,QAAQ,GAAG,CAAC;AACZ,mFAAmF;AACrF;AAEO,eAAe;IACpB,mCAAmC;IACnC;IAEA,qCAAqC;IACrC,uCAA2C;;IAG3C;IAEA,wCAAyC;QACvC,wEAAwE;QACxE,6HAA6C,yBAAyB;IACxE;AACF,EAEA,6FAA6F;CAC7F,uFAAuF;CACvF,2FAA2F;CAC3F,wGAAwG;CACxG,4DAA4D"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/web/edge-wrapper.js"],"sourcesContent":["self._ENTRIES ||= {};\nconst modProm = import('MODULE');\nmodProm.catch(() => {});\nself._ENTRIES[\"middleware_instrumentation\"] = new Proxy(modProm, {\n    get(modProm, name) {\n        if (name === \"then\") {\n            return (res, rej) => modProm.then(res, rej);\n        }\n        let result = (...args) => modProm.then((mod) => (0, mod[name])(...args));\n        result.then = (res, rej) => modProm.then((mod) => mod[name]).then(res, rej);\n        return result;\n    },\n});\n"],"names":[],"mappings":"AAAA,KAAK,QAAQ,KAAK,CAAC;AACnB,MAAM;AACN,QAAQ,KAAK,CAAC,KAAO;AACrB,KAAK,QAAQ,CAAC,6BAA6B,GAAG,IAAI,MAAM,SAAS;IAC7D,KAAI,OAAO,EAAE,IAAI;QACb,IAAI,SAAS,QAAQ;YACjB,OAAO,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,KAAK;QAC3C;QACA,IAAI,SAAS,CAAC,GAAG,OAAS,QAAQ,IAAI,CAAC,CAAC,MAAQ,CAAC,GAAG,GAAG,CAAC,KAAK,KAAK;QAClE,OAAO,IAAI,GAAG,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,CAAC,MAAQ,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK;QACvE,OAAO;IACX;AACJ"}}]
}