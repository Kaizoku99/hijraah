try {
  let e =
      "undefined" != typeof window
        ? window
        : "undefined" != typeof global
          ? global
          : "undefined" != typeof globalThis
            ? globalThis
            : "undefined" != typeof self
              ? self
              : {},
    t = new e.Error().stack;
  t &&
    ((e._sentryDebugIds = e._sentryDebugIds || {}),
    (e._sentryDebugIds[t] = "270525e2-0d08-418f-81ae-0a5d50a18e1b"),
    (e._sentryDebugIdIdentifier =
      "sentry-dbid-270525e2-0d08-418f-81ae-0a5d50a18e1b"));
} catch (e) {}
(() => {
  var e = {};
  (e.id = 38),
    (e.ids = [38, 4256, 4630, 8945]),
    (e.modules = {
      251: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { default: () => l });
            var i = n(61268),
              s = n(55359),
              o = n(63575),
              a = e([s, o]);
            [s, o] = a.then ? (await a)() : a;
            let l = ({ session: e, id: t, initialChatModel: n }) =>
              (0, i.jsxs)(i.Fragment, {
                children: [
                  (0, i.jsx)(
                    s.r,
                    {
                      id: t,
                      initialMessages: [],
                      initialChatModel: n,
                      initialVisibility: "private",
                      isReadonly: !1,
                      session: e,
                      autoResume: !1,
                    },
                    t,
                  ),
                  (0, i.jsx)(o.r, { id: t }),
                ],
              });
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      537: (e, t, n) => {
        "use strict";
        n.d(t, { J: () => s, n: () => i });
        var r = n(92858);
        class i {
          static [r.i] = "Subquery";
          constructor(e, t, n, r = !1) {
            this._ = {
              brand: "Subquery",
              sql: e,
              selectedFields: t,
              alias: n,
              isWith: r,
            };
          }
        }
        class s extends i {
          static [r.i] = "WithSubquery";
        }
      },
      1306: (e) => {
        "use strict";
        e.exports = function e(t, n) {
          if (t === n) return !0;
          if (t && n && "object" == typeof t && "object" == typeof n) {
            if (t.constructor !== n.constructor) return !1;
            if (Array.isArray(t)) {
              if ((r = t.length) != n.length) return !1;
              for (i = r; 0 != i--; ) if (!e(t[i], n[i])) return !1;
              return !0;
            }
            if (t.constructor === RegExp)
              return t.source === n.source && t.flags === n.flags;
            if (t.valueOf !== Object.prototype.valueOf)
              return t.valueOf() === n.valueOf();
            if (t.toString !== Object.prototype.toString)
              return t.toString() === n.toString();
            if ((r = (s = Object.keys(t)).length) !== Object.keys(n).length)
              return !1;
            for (i = r; 0 != i--; )
              if (!Object.prototype.hasOwnProperty.call(n, s[i])) return !1;
            for (i = r; 0 != i--; ) {
              var r,
                i,
                s,
                o = s[i];
              if (!e(t[o], n[o])) return !1;
            }
            return !0;
          }
          return t != t && n != n;
        };
      },
      1523: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          !(function (e, t) {
            for (var n in t)
              Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
          })(t, {
            cancelIdleCallback: function () {
              return r;
            },
            requestIdleCallback: function () {
              return n;
            },
          });
        let n =
            ("undefined" != typeof self &&
              self.requestIdleCallback &&
              self.requestIdleCallback.bind(window)) ||
            function (e) {
              let t = Date.now();
              return self.setTimeout(function () {
                e({
                  didTimeout: !1,
                  timeRemaining: function () {
                    return Math.max(0, 50 - (Date.now() - t));
                  },
                });
              }, 1);
            },
          r =
            ("undefined" != typeof self &&
              self.cancelIdleCallback &&
              self.cancelIdleCallback.bind(window)) ||
            function (e) {
              return clearTimeout(e);
            };
        ("function" == typeof t.default ||
          ("object" == typeof t.default && null !== t.default)) &&
          void 0 === t.default.__esModule &&
          (Object.defineProperty(t.default, "__esModule", { value: !0 }),
          Object.assign(t.default, t),
          (e.exports = t.default));
      },
      1596: (e, t, n) => {
        "use strict";
        n.d(t, { BU: () => l, rL: () => d });
        var r = n(92858),
          i = n(43758);
        class s extends i.pe {
          static [r.i] = "PgEnumObjectColumnBuilder";
          constructor(e, t) {
            super(e, "string", "PgEnumObjectColumn"), (this.config.enum = t);
          }
          build(e) {
            return new o(e, this.config);
          }
        }
        class o extends i.Kl {
          static [r.i] = "PgEnumObjectColumn";
          enum;
          enumValues = this.config.enum.enumValues;
          constructor(e, t) {
            super(e, t), (this.enum = t.enum);
          }
          getSQLType() {
            return this.enum.enumName;
          }
        }
        let a = Symbol.for("drizzle:isPgEnum");
        function l(e) {
          return !!e && "function" == typeof e && a in e && !0 === e[a];
        }
        class c extends i.pe {
          static [r.i] = "PgEnumColumnBuilder";
          constructor(e, t) {
            super(e, "string", "PgEnumColumn"), (this.config.enum = t);
          }
          build(e) {
            return new u(e, this.config);
          }
        }
        class u extends i.Kl {
          static [r.i] = "PgEnumColumn";
          enum = this.config.enum;
          enumValues = this.config.enum.enumValues;
          constructor(e, t) {
            super(e, t), (this.enum = t.enum);
          }
          getSQLType() {
            return this.enum.enumName;
          }
        }
        function d(e, t) {
          return Array.isArray(t)
            ? (function (e, t, n) {
                let r = Object.assign((e) => new c(e ?? "", r), {
                  enumName: e,
                  enumValues: t,
                  schema: n,
                  [a]: !0,
                });
                return r;
              })(e, [...t], void 0)
            : (function (e, t, n) {
                let r = Object.assign((e) => new s(e ?? "", r), {
                  enumName: e,
                  enumValues: Object.values(t),
                  schema: n,
                  [a]: !0,
                });
                return r;
              })(e, t, void 0);
        }
      },
      1708: (e) => {
        "use strict";
        e.exports = require("node:process");
      },
      2424: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { K: () => u });
            var i = n(61268);
            n(69409), n(14230), n(34088), n(76503);
            var s = n(84205),
              o = n(59483),
              a = n(74824),
              l = n(60684),
              c = e([o, a, l]);
            [o, a, l] = c.then ? (await c)() : c;
            let u = (0, s.memo)(
              function ({
                content: e,
                onSaveContent: t,
                suggestions: n,
                status: r,
              }) {
                let o = (0, s.useRef)(null);
                return (
                  (0, s.useRef)(null),
                  (0, i.jsx)("div", {
                    className: "relative prose dark:prose-invert",
                    ref: o,
                  })
                );
              },
              function (e, t) {
                return (
                  e.suggestions === t.suggestions &&
                  e.currentVersionIndex === t.currentVersionIndex &&
                  e.isCurrentVersion === t.isCurrentVersion &&
                  ("streaming" !== e.status || "streaming" !== t.status) &&
                  e.content === t.content &&
                  e.onSaveContent === t.onSaveContent
                );
              },
            );
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      3021: (e, t, n) => {
        "use strict";
        n.d(t, {
          HE: () => u,
          Io: () => f,
          Lf: () => m,
          XI: () => p,
          e: () => o,
        });
        var r = n(92858),
          i = n(17059);
        let s = Symbol.for("drizzle:Schema"),
          o = Symbol.for("drizzle:Columns"),
          a = Symbol.for("drizzle:ExtraConfigColumns"),
          l = Symbol.for("drizzle:OriginalName"),
          c = Symbol.for("drizzle:BaseName"),
          u = Symbol.for("drizzle:IsAlias"),
          d = Symbol.for("drizzle:ExtraConfigBuilder"),
          h = Symbol.for("drizzle:IsDrizzleTable");
        class p {
          static [r.i] = "Table";
          static Symbol = {
            Name: i.E,
            Schema: s,
            OriginalName: l,
            Columns: o,
            ExtraConfigColumns: a,
            BaseName: c,
            IsAlias: u,
            ExtraConfigBuilder: d,
          };
          [i.E];
          [l];
          [s];
          [o];
          [a];
          [c];
          [u] = !1;
          [h] = !0;
          [d] = void 0;
          constructor(e, t, n) {
            (this[i.E] = this[l] = e), (this[s] = t), (this[c] = n);
          }
        }
        function f(e) {
          return e[i.E];
        }
        function m(e) {
          return `${e[s] ?? "public"}.${e[i.E]}`;
        }
      },
      3220: (e, t, n) => {
        "use strict";
        var r = Object.defineProperty,
          i = Object.getOwnPropertyDescriptor,
          s = Object.getOwnPropertyNames,
          o = Object.prototype.hasOwnProperty,
          a = {};
        ((e, t) => {
          for (var n in t) r(e, n, { get: t[n], enumerable: !0 });
        })(a, { Ctx: () => l }),
          (e.exports = ((e, t, n, a) => {
            if ((t && "object" == typeof t) || "function" == typeof t)
              for (let l of s(t))
                o.call(e, l) ||
                  l === n ||
                  r(e, l, {
                    get: () => t[l],
                    enumerable: !(a = i(t, l)) || a.enumerable,
                  });
            return e;
          })(r({}, "__esModule", { value: !0 }), a));
        let l = (0, n(84205).createContext)(null);
      },
      3295: (e) => {
        "use strict";
        e.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");
      },
      3647: (e, t, n) => {
        "use strict";
        n.d(t, {
          $B: () => y,
          Sd: () => f,
          T2: () => g,
          ZW: () => p,
          wn: () => m,
        });
        var r = n(64680),
          i = n(14077),
          s = n(34088);
        let o = ["ol", 0],
          a = ["ul", 0],
          l = ["li", 0],
          c = {
            attrs: { order: { default: 1, validate: "number" } },
            parseDOM: [
              {
                tag: "ol",
                getAttrs: (e) => ({
                  order: e.hasAttribute("start") ? +e.getAttribute("start") : 1,
                }),
              },
            ],
            toDOM: (e) =>
              1 == e.attrs.order ? o : ["ol", { start: e.attrs.order }, 0],
          },
          u = { parseDOM: [{ tag: "ul" }], toDOM: () => a },
          d = { parseDOM: [{ tag: "li" }], toDOM: () => l, defining: !0 };
        function h(e, t) {
          let n = {};
          for (let t in e) n[t] = e[t];
          for (let e in t) n[e] = t[e];
          return n;
        }
        function p(e, t, n) {
          return e.append({
            ordered_list: h(c, { content: "list_item+", group: n }),
            bullet_list: h(u, { content: "list_item+", group: n }),
            list_item: h(d, { content: t }),
          });
        }
        function f(e, t = null) {
          return function (n, s) {
            let { $from: o, $to: a } = n.selection,
              l = o.blockRange(a);
            if (!l) return !1;
            let c = s ? n.tr : null;
            return (
              !!(function (e, t, n, s = null) {
                let o = !1,
                  a = t,
                  l = t.$from.doc;
                if (
                  t.depth >= 2 &&
                  t.$from.node(t.depth - 1).type.compatibleContent(n) &&
                  0 == t.startIndex
                ) {
                  if (0 == t.$from.index(t.depth - 1)) return !1;
                  let e = l.resolve(t.start - 2);
                  (a = new i.u$(e, e, t.depth)),
                    t.endIndex < t.parent.childCount &&
                      (t = new i.u$(
                        t.$from,
                        l.resolve(t.$to.end(t.depth)),
                        t.depth,
                      )),
                    (o = !0);
                }
                let c = (0, r.oM)(a, n, s, t);
                return (
                  !!c &&
                  (e &&
                    (function (e, t, n, s, o) {
                      let a = i.FK.empty;
                      for (let e = n.length - 1; e >= 0; e--)
                        a = i.FK.from(n[e].type.create(n[e].attrs, a));
                      e.step(
                        new r.Wg(
                          t.start - 2 * !!s,
                          t.end,
                          t.start,
                          t.end,
                          new i.Ji(a, 0, 0),
                          n.length,
                          !0,
                        ),
                      );
                      let l = 0;
                      for (let e = 0; e < n.length; e++)
                        n[e].type == o && (l = e + 1);
                      let c = n.length - l,
                        u = t.start + n.length - 2 * !!s,
                        d = t.parent;
                      for (
                        let n = t.startIndex, i = t.endIndex, s = !0;
                        n < i;
                        n++, s = !1
                      )
                        !s &&
                          (0, r.zy)(e.doc, u, c) &&
                          (e.split(u, c), (u += 2 * c)),
                          (u += d.child(n).nodeSize);
                    })(e, t, c, o, n),
                  !0)
                );
              })(c, l, e, t) && (s && s(c.scrollIntoView()), !0)
            );
          };
        }
        function m(e, t) {
          return function (n, o) {
            let { $from: a, $to: l, node: c } = n.selection;
            if ((c && c.isBlock) || a.depth < 2 || !a.sameParent(l)) return !1;
            let u = a.node(-1);
            if (u.type != e) return !1;
            if (
              0 == a.parent.content.size &&
              a.node(-1).childCount == a.indexAfter(-1)
            ) {
              if (
                3 == a.depth ||
                a.node(-3).type != e ||
                a.index(-2) != a.node(-2).childCount - 1
              )
                return !1;
              if (o) {
                let t = i.FK.empty,
                  r = a.index(-1) ? 1 : a.index(-2) ? 2 : 3;
                for (let e = a.depth - r; e >= a.depth - 3; e--)
                  t = i.FK.from(a.node(e).copy(t));
                let l =
                  a.indexAfter(-1) < a.node(-2).childCount
                    ? 1
                    : a.indexAfter(-2) < a.node(-3).childCount
                      ? 2
                      : 3;
                t = t.append(i.FK.from(e.createAndFill()));
                let c = a.before(a.depth - (r - 1)),
                  u = n.tr.replace(c, a.after(-l), new i.Ji(t, 4 - r, 0)),
                  d = -1;
                u.doc.nodesBetween(c, u.doc.content.size, (e, t) => {
                  if (d > -1) return !1;
                  e.isTextblock && 0 == e.content.size && (d = t + 1);
                }),
                  d > -1 && u.setSelection(s.LN.near(u.doc.resolve(d))),
                  o(u.scrollIntoView());
              }
              return !0;
            }
            let d = l.pos == a.end() ? u.contentMatchAt(0).defaultType : null,
              h = n.tr.delete(a.pos, l.pos),
              p = d ? [t ? { type: e, attrs: t } : null, { type: d }] : void 0;
            return (
              !!(0, r.zy)(h.doc, a.pos, 2, p) &&
              (o && o(h.split(a.pos, 2, p).scrollIntoView()), !0)
            );
          };
        }
        function g(e) {
          return function (t, n) {
            let { $from: s, $to: o } = t.selection,
              a = s.blockRange(
                o,
                (t) => t.childCount > 0 && t.firstChild.type == e,
              );
            return (
              !!a &&
              (!n ||
                (s.node(a.depth - 1).type == e
                  ? (function (e, t, n, s) {
                      let o = e.tr,
                        a = s.end,
                        l = s.$to.end(s.depth);
                      a < l &&
                        (o.step(
                          new r.Wg(
                            a - 1,
                            l,
                            a,
                            l,
                            new i.Ji(
                              i.FK.from(n.create(null, s.parent.copy())),
                              1,
                              0,
                            ),
                            1,
                            !0,
                          ),
                        ),
                        (s = new i.u$(
                          o.doc.resolve(s.$from.pos),
                          o.doc.resolve(l),
                          s.depth,
                        )));
                      let c = (0, r.jP)(s);
                      if (null == c) return !1;
                      o.lift(s, c);
                      let u = o.doc.resolve(o.mapping.map(a, -1) - 1);
                      return (
                        (0, r.n9)(o.doc, u.pos) &&
                          u.nodeBefore.type == u.nodeAfter.type &&
                          o.join(u.pos),
                        t(o.scrollIntoView()),
                        !0
                      );
                    })(t, n, e, a)
                  : (function (e, t, n) {
                      let s = e.tr,
                        o = n.parent;
                      for (
                        let e = n.end, t = n.endIndex - 1, r = n.startIndex;
                        t > r;
                        t--
                      )
                        (e -= o.child(t).nodeSize), s.delete(e - 1, e + 1);
                      let a = s.doc.resolve(n.start),
                        l = a.nodeAfter;
                      if (
                        s.mapping.map(n.end) !=
                        n.start + a.nodeAfter.nodeSize
                      )
                        return !1;
                      let c = 0 == n.startIndex,
                        u = n.endIndex == o.childCount,
                        d = a.node(-1),
                        h = a.index(-1);
                      if (
                        !d.canReplace(
                          h + +!c,
                          h + 1,
                          l.content.append(u ? i.FK.empty : i.FK.from(o)),
                        )
                      )
                        return !1;
                      let p = a.pos,
                        f = p + l.nodeSize;
                      return (
                        s.step(
                          new r.Wg(
                            p - +!!c,
                            f + +!!u,
                            p + 1,
                            f - 1,
                            new i.Ji(
                              (c
                                ? i.FK.empty
                                : i.FK.from(o.copy(i.FK.empty))
                              ).append(
                                u ? i.FK.empty : i.FK.from(o.copy(i.FK.empty)),
                              ),
                              +!c,
                              +!u,
                            ),
                            +!c,
                          ),
                        ),
                        t(s.scrollIntoView()),
                        !0
                      );
                    })(t, n, a)))
            );
          };
        }
        function y(e) {
          return function (t, n) {
            let { $from: s, $to: o } = t.selection,
              a = s.blockRange(
                o,
                (t) => t.childCount > 0 && t.firstChild.type == e,
              );
            if (!a) return !1;
            let l = a.startIndex;
            if (0 == l) return !1;
            let c = a.parent,
              u = c.child(l - 1);
            if (u.type != e) return !1;
            if (n) {
              let s = u.lastChild && u.lastChild.type == c.type,
                o = i.FK.from(s ? e.create() : null),
                l = new i.Ji(
                  i.FK.from(e.create(null, i.FK.from(c.type.create(null, o)))),
                  s ? 3 : 1,
                  0,
                ),
                d = a.start,
                h = a.end;
              n(
                t.tr
                  .step(new r.Wg(d - (s ? 3 : 1), h, d, h, l, 1, !0))
                  .scrollIntoView(),
              );
            }
            return !0;
          };
        }
      },
      5109: function (e, t, n) {
        var r, i;
        void 0 ===
          (i =
            "function" ==
            typeof (r = function e() {
              "use strict";
              var t =
                  "undefined" != typeof self
                    ? self
                    : "undefined" != typeof window
                      ? window
                      : void 0 !== t
                        ? t
                        : {},
                r = !t.document && !!t.postMessage,
                i = t.IS_PAPA_WORKER || !1,
                s = {},
                o = 0,
                a = {};
              if (
                ((a.parse = function (n, r) {
                  var i,
                    l = (r = r || {}).dynamicTyping || !1;
                  if (
                    (_(l) && ((r.dynamicTypingFunction = l), (l = {})),
                    (r.dynamicTyping = l),
                    (r.transform = !!_(r.transform) && r.transform),
                    r.worker && a.WORKERS_SUPPORTED)
                  ) {
                    var c = (function () {
                      if (!a.WORKERS_SUPPORTED) return !1;
                      var n,
                        r,
                        i =
                          ((n = t.URL || t.webkitURL || null),
                          (r = e.toString()),
                          a.BLOB_URL ||
                            (a.BLOB_URL = n.createObjectURL(
                              new Blob(
                                [
                                  "var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ",
                                  "(",
                                  r,
                                  ")();",
                                ],
                                { type: "text/javascript" },
                              ),
                            ))),
                        l = new t.Worker(i);
                      return (l.onmessage = v), (l.id = o++), (s[l.id] = l), l;
                    })();
                    (c.userStep = r.step),
                      (c.userChunk = r.chunk),
                      (c.userComplete = r.complete),
                      (c.userError = r.error),
                      (r.step = _(r.step)),
                      (r.chunk = _(r.chunk)),
                      (r.complete = _(r.complete)),
                      (r.error = _(r.error)),
                      delete r.worker,
                      c.postMessage({ input: n, config: r, workerId: c.id });
                    return;
                  }
                  var m = null;
                  return n === a.NODE_STREAM_INPUT &&
                    "undefined" == typeof PAPA_BROWSER_CONTEXT
                    ? (m = new f(r)).getStream()
                    : ("string" == typeof n
                        ? ((n =
                            65279 === (i = n).charCodeAt(0) ? i.slice(1) : i),
                          (m = r.download ? new u(r) : new h(r)))
                        : !0 === n.readable && _(n.read) && _(n.on)
                          ? (m = new p(r))
                          : ((t.File && n instanceof File) ||
                              n instanceof Object) &&
                            (m = new d(r)),
                      m.stream(n));
                }),
                (a.unparse = function (e, t) {
                  var n = !1,
                    r = !0,
                    i = ",",
                    s = "\r\n",
                    o = '"',
                    l = o + o,
                    c = !1,
                    u = null,
                    d = !1;
                  if ("object" == typeof t) {
                    if (
                      ("string" != typeof t.delimiter ||
                        a.BAD_DELIMITERS.filter(function (e) {
                          return -1 !== t.delimiter.indexOf(e);
                        }).length ||
                        (i = t.delimiter),
                      ("boolean" == typeof t.quotes ||
                        "function" == typeof t.quotes ||
                        Array.isArray(t.quotes)) &&
                        (n = t.quotes),
                      ("boolean" == typeof t.skipEmptyLines ||
                        "string" == typeof t.skipEmptyLines) &&
                        (c = t.skipEmptyLines),
                      "string" == typeof t.newline && (s = t.newline),
                      "string" == typeof t.quoteChar && (o = t.quoteChar),
                      "boolean" == typeof t.header && (r = t.header),
                      Array.isArray(t.columns))
                    ) {
                      if (0 === t.columns.length)
                        throw Error("Option columns is empty");
                      u = t.columns;
                    }
                    void 0 !== t.escapeChar && (l = t.escapeChar + o),
                      t.escapeFormulae instanceof RegExp
                        ? (d = t.escapeFormulae)
                        : "boolean" == typeof t.escapeFormulae &&
                          t.escapeFormulae &&
                          (d = /^[=+\-@\t\r].*$/);
                  }
                  var h = RegExp(g(o), "g");
                  if (
                    ("string" == typeof e && (e = JSON.parse(e)),
                    Array.isArray(e))
                  ) {
                    if (!e.length || Array.isArray(e[0])) return p(null, e, c);
                    else if ("object" == typeof e[0])
                      return p(u || Object.keys(e[0]), e, c);
                  } else if ("object" == typeof e)
                    return (
                      "string" == typeof e.data &&
                        (e.data = JSON.parse(e.data)),
                      Array.isArray(e.data) &&
                        (e.fields ||
                          (e.fields = (e.meta && e.meta.fields) || u),
                        e.fields ||
                          (e.fields = Array.isArray(e.data[0])
                            ? e.fields
                            : "object" == typeof e.data[0]
                              ? Object.keys(e.data[0])
                              : []),
                        Array.isArray(e.data[0]) ||
                          "object" == typeof e.data[0] ||
                          (e.data = [e.data])),
                      p(e.fields || [], e.data || [], c)
                    );
                  throw Error("Unable to serialize unrecognized input");
                  function p(e, t, n) {
                    var o = "";
                    "string" == typeof e && (e = JSON.parse(e)),
                      "string" == typeof t && (t = JSON.parse(t));
                    var a = Array.isArray(e) && e.length > 0,
                      l = !Array.isArray(t[0]);
                    if (a && r) {
                      for (var c = 0; c < e.length; c++)
                        c > 0 && (o += i), (o += f(e[c], c));
                      t.length > 0 && (o += s);
                    }
                    for (var u = 0; u < t.length; u++) {
                      var d = a ? e.length : t[u].length,
                        h = !1,
                        p = a
                          ? 0 === Object.keys(t[u]).length
                          : 0 === t[u].length;
                      if (
                        (n &&
                          !a &&
                          (h =
                            "greedy" === n
                              ? "" === t[u].join("").trim()
                              : 1 === t[u].length && 0 === t[u][0].length),
                        "greedy" === n && a)
                      ) {
                        for (var m = [], g = 0; g < d; g++) {
                          var y = l ? e[g] : g;
                          m.push(t[u][y]);
                        }
                        h = "" === m.join("").trim();
                      }
                      if (!h) {
                        for (var v = 0; v < d; v++) {
                          v > 0 && !p && (o += i);
                          var b = a && l ? e[v] : v;
                          o += f(t[u][b], v);
                        }
                        u < t.length - 1 && (!n || (d > 0 && !p)) && (o += s);
                      }
                    }
                    return o;
                  }
                  function f(e, t) {
                    if (null == e) return "";
                    if (e.constructor === Date)
                      return JSON.stringify(e).slice(1, 25);
                    var r = !1;
                    d &&
                      "string" == typeof e &&
                      d.test(e) &&
                      ((e = "'" + e), (r = !0));
                    var s = e.toString().replace(h, l);
                    return (r =
                      r ||
                      !0 === n ||
                      ("function" == typeof n && n(e, t)) ||
                      (Array.isArray(n) && n[t]) ||
                      (function (e, t) {
                        for (var n = 0; n < t.length; n++)
                          if (e.indexOf(t[n]) > -1) return !0;
                        return !1;
                      })(s, a.BAD_DELIMITERS) ||
                      s.indexOf(i) > -1 ||
                      " " === s.charAt(0) ||
                      " " === s.charAt(s.length - 1))
                      ? o + s + o
                      : s;
                  }
                }),
                (a.RECORD_SEP = "\x1e"),
                (a.UNIT_SEP = "\x1f"),
                (a.BYTE_ORDER_MARK = "\uFEFF"),
                (a.BAD_DELIMITERS = ["\r", "\n", '"', a.BYTE_ORDER_MARK]),
                (a.WORKERS_SUPPORTED = !r && !!t.Worker),
                (a.NODE_STREAM_INPUT = 1),
                (a.LocalChunkSize = 0xa00000),
                (a.RemoteChunkSize = 5242880),
                (a.DefaultDelimiter = ","),
                (a.Parser = y),
                (a.ParserHandle = m),
                (a.NetworkStreamer = u),
                (a.FileStreamer = d),
                (a.StringStreamer = h),
                (a.ReadableStreamStreamer = p),
                "undefined" == typeof PAPA_BROWSER_CONTEXT &&
                  (a.DuplexStreamStreamer = f),
                t.jQuery)
              ) {
                var l = t.jQuery;
                l.fn.parse = function (e) {
                  var n = e.config || {},
                    r = [];
                  return (
                    this.each(function (e) {
                      if (
                        !(
                          "INPUT" === l(this).prop("tagName").toUpperCase() &&
                          "file" === l(this).attr("type").toLowerCase() &&
                          t.FileReader
                        ) ||
                        !this.files ||
                        0 === this.files.length
                      )
                        return !0;
                      for (var i = 0; i < this.files.length; i++)
                        r.push({
                          file: this.files[i],
                          inputElem: this,
                          instanceConfig: l.extend({}, n),
                        });
                    }),
                    i(),
                    this
                  );
                  function i() {
                    if (0 === r.length) {
                      _(e.complete) && e.complete();
                      return;
                    }
                    var t = r[0];
                    if (_(e.before)) {
                      var n,
                        i,
                        o,
                        c,
                        u = e.before(t.file, t.inputElem);
                      if ("object" == typeof u)
                        if ("abort" === u.action) {
                          return void ((n = "AbortError"),
                          (i = t.file),
                          (o = t.inputElem),
                          (c = u.reason),
                          _(e.error) && e.error({ name: n }, i, o, c));
                        } else {
                          if ("skip" === u.action) return void s();
                          "object" == typeof u.config &&
                            (t.instanceConfig = l.extend(
                              t.instanceConfig,
                              u.config,
                            ));
                        }
                      else if ("skip" === u) return void s();
                    }
                    var d = t.instanceConfig.complete;
                    (t.instanceConfig.complete = function (e) {
                      _(d) && d(e, t.file, t.inputElem), s();
                    }),
                      a.parse(t.file, t.instanceConfig);
                  }
                  function s() {
                    r.splice(0, 1), i();
                  }
                };
              }
              function c(e) {
                (this._handle = null),
                  (this._finished = !1),
                  (this._completed = !1),
                  (this._halted = !1),
                  (this._input = null),
                  (this._baseIndex = 0),
                  (this._partialLine = ""),
                  (this._rowCount = 0),
                  (this._start = 0),
                  (this._nextChunk = null),
                  (this.isFirstChunk = !0),
                  (this._completeResults = { data: [], errors: [], meta: {} }),
                  function (e) {
                    var t = k(e);
                    (t.chunkSize = parseInt(t.chunkSize)),
                      e.step || e.chunk || (t.chunkSize = null),
                      (this._handle = new m(t)),
                      (this._handle.streamer = this),
                      (this._config = t);
                  }.call(this, e),
                  (this.parseChunk = function (e, n) {
                    let r = parseInt(this._config.skipFirstNLines) || 0;
                    if (this.isFirstChunk && r > 0) {
                      let t = this._config.newline;
                      if (!t) {
                        let n = this._config.quoteChar || '"';
                        t = this._handle.guessLineEndings(e, n);
                      }
                      e = [...e.split(t).slice(r)].join(t);
                    }
                    if (this.isFirstChunk && _(this._config.beforeFirstChunk)) {
                      var s = this._config.beforeFirstChunk(e);
                      void 0 !== s && (e = s);
                    }
                    (this.isFirstChunk = !1), (this._halted = !1);
                    var o = this._partialLine + e;
                    this._partialLine = "";
                    var l = this._handle.parse(
                      o,
                      this._baseIndex,
                      !this._finished,
                    );
                    if (this._handle.paused() || this._handle.aborted()) {
                      this._halted = !0;
                      return;
                    }
                    var c = l.meta.cursor;
                    this._finished ||
                      ((this._partialLine = o.substring(c - this._baseIndex)),
                      (this._baseIndex = c)),
                      l && l.data && (this._rowCount += l.data.length);
                    var u =
                      this._finished ||
                      (this._config.preview &&
                        this._rowCount >= this._config.preview);
                    if (i)
                      t.postMessage({
                        results: l,
                        workerId: a.WORKER_ID,
                        finished: u,
                      });
                    else if (_(this._config.chunk) && !n) {
                      if (
                        (this._config.chunk(l, this._handle),
                        this._handle.paused() || this._handle.aborted())
                      ) {
                        this._halted = !0;
                        return;
                      }
                      (l = void 0), (this._completeResults = void 0);
                    }
                    return (
                      this._config.step ||
                        this._config.chunk ||
                        ((this._completeResults.data =
                          this._completeResults.data.concat(l.data)),
                        (this._completeResults.errors =
                          this._completeResults.errors.concat(l.errors)),
                        (this._completeResults.meta = l.meta)),
                      !this._completed &&
                        u &&
                        _(this._config.complete) &&
                        (!l || !l.meta.aborted) &&
                        (this._config.complete(
                          this._completeResults,
                          this._input,
                        ),
                        (this._completed = !0)),
                      u || (l && l.meta.paused) || this._nextChunk(),
                      l
                    );
                  }),
                  (this._sendError = function (e) {
                    _(this._config.error)
                      ? this._config.error(e)
                      : i &&
                        this._config.error &&
                        t.postMessage({
                          workerId: a.WORKER_ID,
                          error: e,
                          finished: !1,
                        });
                  });
              }
              function u(e) {
                var t;
                (e = e || {}).chunkSize || (e.chunkSize = a.RemoteChunkSize),
                  c.call(this, e),
                  r
                    ? (this._nextChunk = function () {
                        this._readChunk(), this._chunkLoaded();
                      })
                    : (this._nextChunk = function () {
                        this._readChunk();
                      }),
                  (this.stream = function (e) {
                    (this._input = e), this._nextChunk();
                  }),
                  (this._readChunk = function () {
                    if (this._finished) return void this._chunkLoaded();
                    if (
                      ((t = new XMLHttpRequest()),
                      this._config.withCredentials &&
                        (t.withCredentials = this._config.withCredentials),
                      r ||
                        ((t.onload = w(this._chunkLoaded, this)),
                        (t.onerror = w(this._chunkError, this))),
                      t.open(
                        this._config.downloadRequestBody ? "POST" : "GET",
                        this._input,
                        !r,
                      ),
                      this._config.downloadRequestHeaders)
                    ) {
                      var e = this._config.downloadRequestHeaders;
                      for (var n in e) t.setRequestHeader(n, e[n]);
                    }
                    if (this._config.chunkSize) {
                      var i = this._start + this._config.chunkSize - 1;
                      t.setRequestHeader(
                        "Range",
                        "bytes=" + this._start + "-" + i,
                      );
                    }
                    try {
                      t.send(this._config.downloadRequestBody);
                    } catch (e) {
                      this._chunkError(e.message);
                    }
                    r && 0 === t.status && this._chunkError();
                  }),
                  (this._chunkLoaded = function () {
                    if (4 === t.readyState) {
                      var e;
                      if (t.status < 200 || t.status >= 400)
                        return void this._chunkError();
                      (this._start += this._config.chunkSize
                        ? this._config.chunkSize
                        : t.responseText.length),
                        (this._finished =
                          !this._config.chunkSize ||
                          this._start >=
                            (null === (e = t.getResponseHeader("Content-Range"))
                              ? -1
                              : parseInt(e.substring(e.lastIndexOf("/") + 1)))),
                        this.parseChunk(t.responseText);
                    }
                  }),
                  (this._chunkError = function (e) {
                    var n = t.statusText || e;
                    this._sendError(Error(n));
                  });
              }
              function d(e) {
                (e = e || {}).chunkSize || (e.chunkSize = a.LocalChunkSize),
                  c.call(this, e);
                var t,
                  n,
                  r = "undefined" != typeof FileReader;
                (this.stream = function (e) {
                  (this._input = e),
                    (n = e.slice || e.webkitSlice || e.mozSlice),
                    r
                      ? (((t = new FileReader()).onload = w(
                          this._chunkLoaded,
                          this,
                        )),
                        (t.onerror = w(this._chunkError, this)))
                      : (t = new FileReaderSync()),
                    this._nextChunk();
                }),
                  (this._nextChunk = function () {
                    this._finished ||
                      (this._config.preview &&
                        !(this._rowCount < this._config.preview)) ||
                      this._readChunk();
                  }),
                  (this._readChunk = function () {
                    var e = this._input;
                    if (this._config.chunkSize) {
                      var i = Math.min(
                        this._start + this._config.chunkSize,
                        this._input.size,
                      );
                      e = n.call(e, this._start, i);
                    }
                    var s = t.readAsText(e, this._config.encoding);
                    r || this._chunkLoaded({ target: { result: s } });
                  }),
                  (this._chunkLoaded = function (e) {
                    (this._start += this._config.chunkSize),
                      (this._finished =
                        !this._config.chunkSize ||
                        this._start >= this._input.size),
                      this.parseChunk(e.target.result);
                  }),
                  (this._chunkError = function () {
                    this._sendError(t.error);
                  });
              }
              function h(e) {
                var t;
                (e = e || {}),
                  c.call(this, e),
                  (this.stream = function (e) {
                    return (t = e), this._nextChunk();
                  }),
                  (this._nextChunk = function () {
                    if (!this._finished) {
                      var e,
                        n = this._config.chunkSize;
                      return (
                        n
                          ? ((e = t.substring(0, n)), (t = t.substring(n)))
                          : ((e = t), (t = "")),
                        (this._finished = !t),
                        this.parseChunk(e)
                      );
                    }
                  });
              }
              function p(e) {
                (e = e || {}), c.call(this, e);
                var t = [],
                  n = !0,
                  r = !1;
                (this.pause = function () {
                  c.prototype.pause.apply(this, arguments), this._input.pause();
                }),
                  (this.resume = function () {
                    c.prototype.resume.apply(this, arguments),
                      this._input.resume();
                  }),
                  (this.stream = function (e) {
                    (this._input = e),
                      this._input.on("data", this._streamData),
                      this._input.on("end", this._streamEnd),
                      this._input.on("error", this._streamError);
                  }),
                  (this._checkIsFinished = function () {
                    r && 1 === t.length && (this._finished = !0);
                  }),
                  (this._nextChunk = function () {
                    this._checkIsFinished(),
                      t.length ? this.parseChunk(t.shift()) : (n = !0);
                  }),
                  (this._streamData = w(function (e) {
                    try {
                      t.push(
                        "string" == typeof e
                          ? e
                          : e.toString(this._config.encoding),
                      ),
                        n &&
                          ((n = !1),
                          this._checkIsFinished(),
                          this.parseChunk(t.shift()));
                    } catch (e) {
                      this._streamError(e);
                    }
                  }, this)),
                  (this._streamError = w(function (e) {
                    this._streamCleanUp(), this._sendError(e);
                  }, this)),
                  (this._streamEnd = w(function () {
                    this._streamCleanUp(), (r = !0), this._streamData("");
                  }, this)),
                  (this._streamCleanUp = w(function () {
                    this._input.removeListener("data", this._streamData),
                      this._input.removeListener("end", this._streamEnd),
                      this._input.removeListener("error", this._streamError);
                  }, this));
              }
              function f(e) {
                var t = n(27910).Duplex,
                  r = k(e),
                  i = !0,
                  s = !1,
                  o = [],
                  a = null;
                (this._onCsvData = function (e) {
                  var t = e.data;
                  a.push(t) || this._handle.paused() || this._handle.pause();
                }),
                  (this._onCsvComplete = function () {
                    a.push(null);
                  }),
                  (r.step = w(this._onCsvData, this)),
                  (r.complete = w(this._onCsvComplete, this)),
                  c.call(this, r),
                  (this._nextChunk = function () {
                    s && 1 === o.length && (this._finished = !0),
                      o.length ? o.shift()() : (i = !0);
                  }),
                  (this._addToParseQueue = function (e, t) {
                    o.push(
                      w(function () {
                        if (
                          (this.parseChunk(
                            "string" == typeof e ? e : e.toString(r.encoding),
                          ),
                          _(t))
                        )
                          return t();
                      }, this),
                    ),
                      i && ((i = !1), this._nextChunk());
                  }),
                  (this._onRead = function () {
                    this._handle.paused() && this._handle.resume();
                  }),
                  (this._onWrite = function (e, t, n) {
                    this._addToParseQueue(e, n);
                  }),
                  (this._onWriteComplete = function () {
                    (s = !0), this._addToParseQueue("");
                  }),
                  (this.getStream = function () {
                    return a;
                  }),
                  (a = new t({
                    readableObjectMode: !0,
                    decodeStrings: !1,
                    read: w(this._onRead, this),
                    write: w(this._onWrite, this),
                  })).once("finish", w(this._onWriteComplete, this));
              }
              function m(e) {
                var t,
                  n,
                  r,
                  i = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,
                  s =
                    /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/,
                  o = this,
                  l = 0,
                  c = 0,
                  u = !1,
                  d = !1,
                  h = [],
                  p = { data: [], errors: [], meta: {} };
                if (_(e.step)) {
                  var f = e.step;
                  e.step = function (t) {
                    if (((p = t), b())) v();
                    else {
                      if ((v(), 0 === p.data.length)) return;
                      (l += t.data.length),
                        e.preview && l > e.preview
                          ? n.abort()
                          : ((p.data = p.data[0]), f(p, o));
                    }
                  };
                }
                function m(t) {
                  return "greedy" === e.skipEmptyLines
                    ? "" === t.join("").trim()
                    : 1 === t.length && 0 === t[0].length;
                }
                function v() {
                  return (
                    p &&
                      r &&
                      (x(
                        "Delimiter",
                        "UndetectableDelimiter",
                        "Unable to auto-detect delimiting character; defaulted to '" +
                          a.DefaultDelimiter +
                          "'",
                      ),
                      (r = !1)),
                    e.skipEmptyLines &&
                      (p.data = p.data.filter(function (e) {
                        return !m(e);
                      })),
                    b() &&
                      (function () {
                        if (p)
                          if (Array.isArray(p.data[0])) {
                            for (var t = 0; b() && t < p.data.length; t++)
                              p.data[t].forEach(n);
                            p.data.splice(0, 1);
                          } else p.data.forEach(n);
                        function n(t, n) {
                          _(e.transformHeader) && (t = e.transformHeader(t, n)),
                            h.push(t);
                        }
                      })(),
                    (function () {
                      if (!p || (!e.header && !e.dynamicTyping && !e.transform))
                        return p;
                      function t(t, n) {
                        var r,
                          o = e.header ? {} : [];
                        for (r = 0; r < t.length; r++) {
                          var a = r,
                            l = t[r];
                          e.header &&
                            (a = r >= h.length ? "__parsed_extra" : h[r]),
                            e.transform && (l = e.transform(l, a)),
                            (l = (function (t, n) {
                              if (
                                (e.dynamicTypingFunction &&
                                  void 0 === e.dynamicTyping[t] &&
                                  (e.dynamicTyping[t] =
                                    e.dynamicTypingFunction(t)),
                                !0 === (e.dynamicTyping[t] || e.dynamicTyping))
                              )
                                if ("true" === n || "TRUE" === n) return !0;
                                else if ("false" === n || "FALSE" === n)
                                  return !1;
                                else if (
                                  (function (e) {
                                    if (i.test(e)) {
                                      var t = parseFloat(e);
                                      if (
                                        t > -0x20000000000000 &&
                                        t < 0x20000000000000
                                      )
                                        return !0;
                                    }
                                    return !1;
                                  })(n)
                                )
                                  return parseFloat(n);
                                else if (s.test(n)) return new Date(n);
                                else return "" === n ? null : n;
                              return n;
                            })(a, l)),
                            "__parsed_extra" === a
                              ? ((o[a] = o[a] || []), o[a].push(l))
                              : (o[a] = l);
                        }
                        return (
                          e.header &&
                            (r > h.length
                              ? x(
                                  "FieldMismatch",
                                  "TooManyFields",
                                  "Too many fields: expected " +
                                    h.length +
                                    " fields but parsed " +
                                    r,
                                  c + n,
                                )
                              : r < h.length &&
                                x(
                                  "FieldMismatch",
                                  "TooFewFields",
                                  "Too few fields: expected " +
                                    h.length +
                                    " fields but parsed " +
                                    r,
                                  c + n,
                                )),
                          o
                        );
                      }
                      var n = 1;
                      return (
                        !p.data.length || Array.isArray(p.data[0])
                          ? ((p.data = p.data.map(t)), (n = p.data.length))
                          : (p.data = t(p.data, 0)),
                        e.header && p.meta && (p.meta.fields = h),
                        (c += n),
                        p
                      );
                    })()
                  );
                }
                function b() {
                  return e.header && 0 === h.length;
                }
                function x(e, t, n, r) {
                  var i = { type: e, code: t, message: n };
                  void 0 !== r && (i.row = r), p.errors.push(i);
                }
                (this.parse = function (i, s, o) {
                  var l = e.quoteChar || '"';
                  if (
                    (e.newline || (e.newline = this.guessLineEndings(i, l)),
                    (r = !1),
                    e.delimiter)
                  )
                    _(e.delimiter) &&
                      ((e.delimiter = e.delimiter(i)),
                      (p.meta.delimiter = e.delimiter));
                  else {
                    var c = (function (t, n, r, i, s) {
                      var o, l, c, u;
                      s = s || [",", "	", "|", ";", a.RECORD_SEP, a.UNIT_SEP];
                      for (var d = 0; d < s.length; d++) {
                        var h = s[d],
                          p = 0,
                          f = 0,
                          g = 0;
                        c = void 0;
                        for (
                          var v = new y({
                              comments: i,
                              delimiter: h,
                              newline: n,
                              preview: 10,
                            }).parse(t),
                            b = 0;
                          b < v.data.length;
                          b++
                        ) {
                          if (r && m(v.data[b])) {
                            g++;
                            continue;
                          }
                          var x = v.data[b].length;
                          if (((f += x), void 0 === c)) {
                            c = x;
                            continue;
                          }
                          x > 0 && ((p += Math.abs(x - c)), (c = x));
                        }
                        v.data.length > 0 && (f /= v.data.length - g),
                          (void 0 === l || p <= l) &&
                            (void 0 === u || f > u) &&
                            f > 1.99 &&
                            ((l = p), (o = h), (u = f));
                      }
                      return (
                        (e.delimiter = o), { successful: !!o, bestDelimiter: o }
                      );
                    })(
                      i,
                      e.newline,
                      e.skipEmptyLines,
                      e.comments,
                      e.delimitersToGuess,
                    );
                    c.successful
                      ? (e.delimiter = c.bestDelimiter)
                      : ((r = !0), (e.delimiter = a.DefaultDelimiter)),
                      (p.meta.delimiter = e.delimiter);
                  }
                  var d = k(e);
                  return (
                    e.preview && e.header && d.preview++,
                    (t = i),
                    (p = (n = new y(d)).parse(t, s, o)),
                    v(),
                    u ? { meta: { paused: !0 } } : p || { meta: { paused: !1 } }
                  );
                }),
                  (this.paused = function () {
                    return u;
                  }),
                  (this.pause = function () {
                    (u = !0),
                      n.abort(),
                      (t = _(e.chunk) ? "" : t.substring(n.getCharIndex()));
                  }),
                  (this.resume = function () {
                    o.streamer._halted
                      ? ((u = !1), o.streamer.parseChunk(t, !0))
                      : setTimeout(o.resume, 3);
                  }),
                  (this.aborted = function () {
                    return d;
                  }),
                  (this.abort = function () {
                    (d = !0),
                      n.abort(),
                      (p.meta.aborted = !0),
                      _(e.complete) && e.complete(p),
                      (t = "");
                  }),
                  (this.guessLineEndings = function (e, t) {
                    e = e.substring(0, 1048576);
                    var n = RegExp(g(t) + "([^]*?)" + g(t), "gm"),
                      r = (e = e.replace(n, "")).split("\r"),
                      i = e.split("\n"),
                      s = i.length > 1 && i[0].length < r[0].length;
                    if (1 === r.length || s) return "\n";
                    for (var o = 0, a = 0; a < r.length; a++)
                      "\n" === r[a][0] && o++;
                    return o >= r.length / 2 ? "\r\n" : "\r";
                  });
              }
              function g(e) {
                return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
              }
              function y(e) {
                var t,
                  n = (e = e || {}).delimiter,
                  r = e.newline,
                  i = e.comments,
                  s = e.step,
                  o = e.preview,
                  l = e.fastMode,
                  c = null,
                  u = !1,
                  d = (t =
                    void 0 === e.quoteChar || null === e.quoteChar
                      ? '"'
                      : e.quoteChar);
                if (
                  (void 0 !== e.escapeChar && (d = e.escapeChar),
                  ("string" != typeof n || a.BAD_DELIMITERS.indexOf(n) > -1) &&
                    (n = ","),
                  i === n)
                )
                  throw Error("Comment character same as delimiter");
                !0 === i
                  ? (i = "#")
                  : ("string" != typeof i ||
                      a.BAD_DELIMITERS.indexOf(i) > -1) &&
                    (i = !1),
                  "\n" !== r && "\r" !== r && "\r\n" !== r && (r = "\n");
                var h = 0,
                  p = !1;
                (this.parse = function (a, f, m) {
                  if ("string" != typeof a)
                    throw Error("Input must be a string");
                  var y = a.length,
                    v = n.length,
                    b = r.length,
                    x = i.length,
                    k = _(s);
                  h = 0;
                  var w = [],
                    O = [],
                    T = [],
                    S = 0;
                  if (!a) return B();
                  if (l || (!1 !== l && -1 === a.indexOf(t))) {
                    for (var E = a.split(r), C = 0; C < E.length; C++) {
                      if (((T = E[C]), (h += T.length), C !== E.length - 1))
                        h += r.length;
                      else if (m) break;
                      if (!i || T.substring(0, x) !== i) {
                        if (k) {
                          if (((w = []), M(T.split(n)), z(), p)) return B();
                        } else M(T.split(n));
                        if (o && C >= o) return (w = w.slice(0, o)), B(!0);
                      }
                    }
                    return B();
                  }
                  for (
                    var A = a.indexOf(n, h),
                      N = a.indexOf(r, h),
                      I = RegExp(g(d) + g(t), "g"),
                      D = a.indexOf(t, h);
                    ;

                  ) {
                    if (a[h] === t) {
                      for (D = h, h++; ; ) {
                        if (-1 === (D = a.indexOf(t, D + 1)))
                          return (
                            m ||
                              O.push({
                                type: "Quotes",
                                code: "MissingQuotes",
                                message: "Quoted field unterminated",
                                row: w.length,
                                index: h,
                              }),
                            j()
                          );
                        if (D === y - 1)
                          return j(a.substring(h, D).replace(I, t));
                        if (t === d && a[D + 1] === d) {
                          D++;
                          continue;
                        }
                        if (t === d || 0 === D || a[D - 1] !== d) {
                          -1 !== A && A < D + 1 && (A = a.indexOf(n, D + 1)),
                            -1 !== N && N < D + 1 && (N = a.indexOf(r, D + 1));
                          var P = L(-1 === N ? A : Math.min(A, N));
                          if (a.substr(D + 1 + P, v) === n) {
                            T.push(a.substring(h, D).replace(I, t)),
                              (h = D + 1 + P + v),
                              a[D + 1 + P + v] !== t && (D = a.indexOf(t, h)),
                              (A = a.indexOf(n, h)),
                              (N = a.indexOf(r, h));
                            break;
                          }
                          var R = L(N);
                          if (a.substring(D + 1 + R, D + 1 + R + b) === r) {
                            if (
                              (T.push(a.substring(h, D).replace(I, t)),
                              F(D + 1 + R + b),
                              (A = a.indexOf(n, h)),
                              (D = a.indexOf(t, h)),
                              k && (z(), p))
                            )
                              return B();
                            if (o && w.length >= o) return B(!0);
                            break;
                          }
                          O.push({
                            type: "Quotes",
                            code: "InvalidQuotes",
                            message:
                              "Trailing quote on quoted field is malformed",
                            row: w.length,
                            index: h,
                          }),
                            D++;
                          continue;
                        }
                      }
                      continue;
                    }
                    if (i && 0 === T.length && a.substring(h, h + x) === i) {
                      if (-1 === N) return B();
                      (h = N + b), (N = a.indexOf(r, h)), (A = a.indexOf(n, h));
                      continue;
                    }
                    if (-1 !== A && (A < N || -1 === N)) {
                      T.push(a.substring(h, A)),
                        (h = A + v),
                        (A = a.indexOf(n, h));
                      continue;
                    }
                    if (-1 !== N) {
                      if ((T.push(a.substring(h, N)), F(N + b), k && (z(), p)))
                        return B();
                      if (o && w.length >= o) return B(!0);
                      continue;
                    }
                    break;
                  }
                  return j();
                  function M(e) {
                    w.push(e), (S = h);
                  }
                  function L(e) {
                    var t = 0;
                    if (-1 !== e) {
                      var n = a.substring(D + 1, e);
                      n && "" === n.trim() && (t = n.length);
                    }
                    return t;
                  }
                  function j(e) {
                    return (
                      m ||
                        (void 0 === e && (e = a.substring(h)),
                        T.push(e),
                        (h = y),
                        M(T),
                        k && z()),
                      B()
                    );
                  }
                  function F(e) {
                    (h = e), M(T), (T = []), (N = a.indexOf(r, h));
                  }
                  function B(t) {
                    if (e.header && !f && w.length && !u) {
                      let t = w[0],
                        n = Object.create(null),
                        r = new Set(t),
                        i = !1;
                      for (let s = 0; s < t.length; s++) {
                        let o = t[s];
                        if (
                          (_(e.transformHeader) &&
                            (o = e.transformHeader(o, s)),
                          n[o])
                        ) {
                          let e,
                            a = n[o];
                          do (e = `${o}_${a}`), a++;
                          while (r.has(e));
                          r.add(e),
                            (t[s] = e),
                            n[o]++,
                            (i = !0),
                            null === c && (c = {}),
                            (c[e] = o);
                        } else (n[o] = 1), (t[s] = o);
                        r.add(o);
                      }
                      i && console.warn("Duplicate headers found and renamed."),
                        (u = !0);
                    }
                    return {
                      data: w,
                      errors: O,
                      meta: {
                        delimiter: n,
                        linebreak: r,
                        aborted: p,
                        truncated: !!t,
                        cursor: S + (f || 0),
                        renamedHeaders: c,
                      },
                    };
                  }
                  function z() {
                    s(B()), (w = []), (O = []);
                  }
                }),
                  (this.abort = function () {
                    p = !0;
                  }),
                  (this.getCharIndex = function () {
                    return h;
                  });
              }
              function v(e) {
                var t = e.data,
                  n = s[t.workerId],
                  r = !1;
                if (t.error) n.userError(t.error, t.file);
                else if (t.results && t.results.data) {
                  var i = {
                    abort: function () {
                      (r = !0),
                        b(t.workerId, {
                          data: [],
                          errors: [],
                          meta: { aborted: !0 },
                        });
                    },
                    pause: x,
                    resume: x,
                  };
                  if (_(n.userStep)) {
                    for (
                      var o = 0;
                      o < t.results.data.length &&
                      (n.userStep(
                        {
                          data: t.results.data[o],
                          errors: t.results.errors,
                          meta: t.results.meta,
                        },
                        i,
                      ),
                      !r);
                      o++
                    );
                    delete t.results;
                  } else
                    _(n.userChunk) &&
                      (n.userChunk(t.results, i, t.file), delete t.results);
                }
                t.finished && !r && b(t.workerId, t.results);
              }
              function b(e, t) {
                var n = s[e];
                _(n.userComplete) && n.userComplete(t),
                  n.terminate(),
                  delete s[e];
              }
              function x() {
                throw Error("Not implemented.");
              }
              function k(e) {
                if ("object" != typeof e || null === e) return e;
                var t = Array.isArray(e) ? [] : {};
                for (var n in e) t[n] = k(e[n]);
                return t;
              }
              function w(e, t) {
                return function () {
                  e.apply(t, arguments);
                };
              }
              function _(e) {
                return "function" == typeof e;
              }
              return (
                i &&
                  (t.onmessage = function (e) {
                    var n = e.data;
                    if (
                      (void 0 === a.WORKER_ID &&
                        n &&
                        (a.WORKER_ID = n.workerId),
                      "string" == typeof n.input)
                    )
                      t.postMessage({
                        workerId: a.WORKER_ID,
                        results: a.parse(n.input, n.config),
                        finished: !0,
                      });
                    else if (
                      (t.File && n.input instanceof File) ||
                      n.input instanceof Object
                    ) {
                      var r = a.parse(n.input, n.config);
                      r &&
                        t.postMessage({
                          workerId: a.WORKER_ID,
                          results: r,
                          finished: !0,
                        });
                    }
                  }),
                (u.prototype = Object.create(c.prototype)),
                (u.prototype.constructor = u),
                (d.prototype = Object.create(c.prototype)),
                (d.prototype.constructor = d),
                (h.prototype = Object.create(h.prototype)),
                (h.prototype.constructor = h),
                (p.prototype = Object.create(c.prototype)),
                (p.prototype.constructor = p),
                "undefined" == typeof PAPA_BROWSER_CONTEXT &&
                  ((f.prototype = Object.create(c.prototype)),
                  (f.prototype.constructor = f)),
                a
              );
            })
              ? r.apply(t, [])
              : r) || (e.exports = i);
      },
      5451: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, {
              BT: () => h,
              Wu: () => p,
              ZB: () => d,
              Zp: () => c,
              aR: () => u,
              wL: () => f,
            });
            var i = n(61268),
              s = n(55728),
              o = n(84205),
              a = n(15942),
              l = e([a]);
            a = (l.then ? (await l)() : l)[0];
            let c = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.P.div, {
                ref: n,
                className: (0, a.cn)(
                  "rounded-lg border bg-card text-card-foreground shadow-sm",
                  e,
                ),
                whileHover: {
                  scale: 1.03,
                  boxShadow:
                    "0px 7px 25px rgba(0,0,0,0.08), 0px 3px 10px rgba(0,0,0,0.04)",
                },
                transition: { type: "spring", stiffness: 300, damping: 20 },
                ...t,
              }),
            );
            c.displayName = "Card";
            let u = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("div", {
                ref: n,
                className: (0, a.cn)("flex flex-col space-y-1.5 p-6", e),
                ...t,
              }),
            );
            u.displayName = "CardHeader";
            let d = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("h3", {
                ref: n,
                className: (0, a.cn)(
                  "text-2xl font-semibold leading-none tracking-tight",
                  e,
                ),
                ...t,
              }),
            );
            d.displayName = "CardTitle";
            let h = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("p", {
                ref: n,
                className: (0, a.cn)("text-sm text-muted-foreground", e),
                ...t,
              }),
            );
            h.displayName = "CardDescription";
            let p = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("div", {
                ref: n,
                className: (0, a.cn)("p-6 pt-0", e),
                ...t,
              }),
            );
            p.displayName = "CardContent";
            let f = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("div", {
                ref: n,
                className: (0, a.cn)("flex items-center p-6 pt-0", e),
                ...t,
              }),
            );
            (f.displayName = "CardFooter"), r();
          } catch (e) {
            r(e);
          }
        });
      },
      7746: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { P: () => m });
            var i = n(61268),
              s = n(1306),
              o = n.n(s),
              a = n(84205),
              l = n(98654),
              c = n(16235),
              u = n(48958),
              d = n(28909),
              h = n(12253),
              p = n(89284),
              f = e([d, p]);
            [d, p] = f.then ? (await f)() : f;
            let m = (0, a.memo)(
              function ({
                sessionId: e,
                message: t,
                vote: n,
                isLoading: r,
                currentUserId: s,
              }) {
                let { mutate: o } = (0, c.iX)(),
                  [a, f] = (0, u.Cj)();
                return r ||
                  "user" === t.role ||
                  (t.toolInvocations && t.toolInvocations.length > 0)
                  ? null
                  : (0, i.jsx)(p.Bc, {
                      delayDuration: 0,
                      children: (0, i.jsxs)("div", {
                        className: "flex flex-row gap-2",
                        children: [
                          (0, i.jsxs)(p.m_, {
                            children: [
                              (0, i.jsx)(p.k$, {
                                asChild: !0,
                                children: (0, i.jsx)(d.$, {
                                  className:
                                    "py-1 px-2 h-fit text-muted-foreground",
                                  variant: "outline",
                                  onClick: async () => {
                                    await f(t.content),
                                      l.oR.success("Copied to clipboard!");
                                  },
                                  children: (0, i.jsx)(h.Td, {}),
                                }),
                              }),
                              (0, i.jsx)(p.ZI, { children: "Copy" }),
                            ],
                          }),
                          (0, i.jsxs)(p.m_, {
                            children: [
                              (0, i.jsx)(p.k$, {
                                asChild: !0,
                                children: (0, i.jsx)(d.$, {
                                  "data-testid": "message-upvote",
                                  className:
                                    "py-1 px-2 h-fit text-muted-foreground !pointer-events-auto",
                                  disabled: !s || n?.isUpvoted === !0,
                                  variant: "outline",
                                  onClick: async () => {
                                    if (!s)
                                      return void l.oR.error(
                                        "You must be logged in to vote.",
                                      );
                                    let n = fetch("/api/vote", {
                                      method: "PATCH",
                                      body: JSON.stringify({
                                        messageId: t.id,
                                        type: "up",
                                      }),
                                    });
                                    l.oR.promise(n, {
                                      loading: "Upvoting Response...",
                                      success: () => (
                                        o(
                                          `/api/vote?sessionId=${e}`,
                                          (e) => {
                                            let n = {
                                              messageId: t.id,
                                              userId: s,
                                              isUpvoted: !0,
                                              createdAt: new Date(),
                                            };
                                            if (!e) return [n];
                                            let r = e.findIndex(
                                              (e) =>
                                                e.messageId === t.id &&
                                                e.userId === s,
                                            );
                                            if (-1 !== r) {
                                              let t = [...e];
                                              return (
                                                (t[r] = {
                                                  ...t[r],
                                                  isUpvoted: !0,
                                                  createdAt: new Date(),
                                                }),
                                                t
                                              );
                                            }
                                            return [...e, n];
                                          },
                                          { revalidate: !1 },
                                        ),
                                        "Upvoted Response!"
                                      ),
                                      error: "Failed to upvote response.",
                                    });
                                  },
                                  children: (0, i.jsx)(h.$U, {}),
                                }),
                              }),
                              (0, i.jsx)(p.ZI, { children: "Upvote Response" }),
                            ],
                          }),
                          (0, i.jsxs)(p.m_, {
                            children: [
                              (0, i.jsx)(p.k$, {
                                asChild: !0,
                                children: (0, i.jsx)(d.$, {
                                  "data-testid": "message-downvote",
                                  className:
                                    "py-1 px-2 h-fit text-muted-foreground !pointer-events-auto",
                                  variant: "outline",
                                  disabled: !s || (n && !1 === n.isUpvoted),
                                  onClick: async () => {
                                    if (!s)
                                      return void l.oR.error(
                                        "You must be logged in to vote.",
                                      );
                                    let n = fetch("/api/vote", {
                                      method: "PATCH",
                                      body: JSON.stringify({
                                        messageId: t.id,
                                        type: "down",
                                      }),
                                    });
                                    l.oR.promise(n, {
                                      loading: "Downvoting Response...",
                                      success: () => (
                                        o(
                                          `/api/vote?sessionId=${e}`,
                                          (e) => {
                                            let n = {
                                              messageId: t.id,
                                              userId: s,
                                              isUpvoted: !1,
                                              createdAt: new Date(),
                                            };
                                            if (!e) return [n];
                                            let r = e.findIndex(
                                              (e) =>
                                                e.messageId === t.id &&
                                                e.userId === s,
                                            );
                                            if (-1 !== r) {
                                              let t = [...e];
                                              return (
                                                (t[r] = {
                                                  ...t[r],
                                                  isUpvoted: !1,
                                                  createdAt: new Date(),
                                                }),
                                                t
                                              );
                                            }
                                            return [...e, n];
                                          },
                                          { revalidate: !1 },
                                        ),
                                        "Downvoted Response!"
                                      ),
                                      error: "Failed to downvote response.",
                                    });
                                  },
                                  children: (0, i.jsx)(h.EA, {}),
                                }),
                              }),
                              (0, i.jsx)(p.ZI, {
                                children: "Downvote Response",
                              }),
                            ],
                          }),
                        ],
                      }),
                    });
              },
              (e, t) =>
                e.currentUserId === t.currentUserId &&
                !!o()(e.vote, t.vote) &&
                e.isLoading === t.isLoading,
            );
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      8086: (e) => {
        "use strict";
        e.exports = require("module");
      },
      8325: (e, t, n) => {
        "use strict";
        n.d(t, { mu: () => eq, cJ: () => eU });
        var r = n(92858),
          i = n(3021),
          s = n(43326),
          o = n(43758),
          a = n(99427);
        class l extends a.p {
          static [r.i] = "PgBigInt53Builder";
          constructor(e) {
            super(e, "number", "PgBigInt53");
          }
          build(e) {
            return new c(e, this.config);
          }
        }
        class c extends o.Kl {
          static [r.i] = "PgBigInt53";
          getSQLType() {
            return "bigint";
          }
          mapFromDriverValue(e) {
            return "number" == typeof e ? e : Number(e);
          }
        }
        class u extends a.p {
          static [r.i] = "PgBigInt64Builder";
          constructor(e) {
            super(e, "bigint", "PgBigInt64");
          }
          build(e) {
            return new d(e, this.config);
          }
        }
        class d extends o.Kl {
          static [r.i] = "PgBigInt64";
          getSQLType() {
            return "bigint";
          }
          mapFromDriverValue(e) {
            return BigInt(e);
          }
        }
        function h(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return "number" === r.mode ? new l(n) : new u(n);
        }
        class p extends o.pe {
          static [r.i] = "PgBigSerial53Builder";
          constructor(e) {
            super(e, "number", "PgBigSerial53"),
              (this.config.hasDefault = !0),
              (this.config.notNull = !0);
          }
          build(e) {
            return new f(e, this.config);
          }
        }
        class f extends o.Kl {
          static [r.i] = "PgBigSerial53";
          getSQLType() {
            return "bigserial";
          }
          mapFromDriverValue(e) {
            return "number" == typeof e ? e : Number(e);
          }
        }
        class m extends o.pe {
          static [r.i] = "PgBigSerial64Builder";
          constructor(e) {
            super(e, "bigint", "PgBigSerial64"), (this.config.hasDefault = !0);
          }
          build(e) {
            return new g(e, this.config);
          }
        }
        class g extends o.Kl {
          static [r.i] = "PgBigSerial64";
          getSQLType() {
            return "bigserial";
          }
          mapFromDriverValue(e) {
            return BigInt(e);
          }
        }
        function y(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return "number" === r.mode ? new p(n) : new m(n);
        }
        var v = n(80629);
        class b extends o.pe {
          static [r.i] = "PgCharBuilder";
          constructor(e, t) {
            super(e, "string", "PgChar"),
              (this.config.length = t.length),
              (this.config.enumValues = t.enum);
          }
          build(e) {
            return new x(e, this.config);
          }
        }
        class x extends o.Kl {
          static [r.i] = "PgChar";
          length = this.config.length;
          enumValues = this.config.enumValues;
          getSQLType() {
            return void 0 === this.length ? "char" : `char(${this.length})`;
          }
        }
        function k(e, t = {}) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return new b(n, r);
        }
        class w extends o.pe {
          static [r.i] = "PgCidrBuilder";
          constructor(e) {
            super(e, "string", "PgCidr");
          }
          build(e) {
            return new _(e, this.config);
          }
        }
        class _ extends o.Kl {
          static [r.i] = "PgCidr";
          getSQLType() {
            return "cidr";
          }
        }
        function O(e) {
          return new w(e ?? "");
        }
        class T extends o.pe {
          static [r.i] = "PgCustomColumnBuilder";
          constructor(e, t, n) {
            super(e, "custom", "PgCustomColumn"),
              (this.config.fieldConfig = t),
              (this.config.customTypeParams = n);
          }
          build(e) {
            return new S(e, this.config);
          }
        }
        class S extends o.Kl {
          static [r.i] = "PgCustomColumn";
          sqlName;
          mapTo;
          mapFrom;
          constructor(e, t) {
            super(e, t),
              (this.sqlName = t.customTypeParams.dataType(t.fieldConfig)),
              (this.mapTo = t.customTypeParams.toDriver),
              (this.mapFrom = t.customTypeParams.fromDriver);
          }
          getSQLType() {
            return this.sqlName;
          }
          mapFromDriverValue(e) {
            return "function" == typeof this.mapFrom ? this.mapFrom(e) : e;
          }
          mapToDriverValue(e) {
            return "function" == typeof this.mapTo ? this.mapTo(e) : e;
          }
        }
        function E(e) {
          return (t, n) => {
            let { name: r, config: i } = (0, s.Ll)(t, n);
            return new T(r, i, e);
          };
        }
        var C = n(14555);
        class A extends o.pe {
          static [r.i] = "PgDoublePrecisionBuilder";
          constructor(e) {
            super(e, "number", "PgDoublePrecision");
          }
          build(e) {
            return new N(e, this.config);
          }
        }
        class N extends o.Kl {
          static [r.i] = "PgDoublePrecision";
          getSQLType() {
            return "double precision";
          }
          mapFromDriverValue(e) {
            return "string" == typeof e ? Number.parseFloat(e) : e;
          }
        }
        function I(e) {
          return new A(e ?? "");
        }
        class D extends o.pe {
          static [r.i] = "PgInetBuilder";
          constructor(e) {
            super(e, "string", "PgInet");
          }
          build(e) {
            return new P(e, this.config);
          }
        }
        class P extends o.Kl {
          static [r.i] = "PgInet";
          getSQLType() {
            return "inet";
          }
        }
        function R(e) {
          return new D(e ?? "");
        }
        var M = n(42447);
        class L extends o.pe {
          static [r.i] = "PgIntervalBuilder";
          constructor(e, t) {
            super(e, "string", "PgInterval"), (this.config.intervalConfig = t);
          }
          build(e) {
            return new j(e, this.config);
          }
        }
        class j extends o.Kl {
          static [r.i] = "PgInterval";
          fields = this.config.intervalConfig.fields;
          precision = this.config.intervalConfig.precision;
          getSQLType() {
            let e = this.fields ? ` ${this.fields}` : "",
              t = this.precision ? `(${this.precision})` : "";
            return `interval${e}${t}`;
          }
        }
        function F(e, t = {}) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return new L(n, r);
        }
        var B = n(90377),
          z = n(50305);
        class $ extends o.pe {
          static [r.i] = "PgLineBuilder";
          constructor(e) {
            super(e, "array", "PgLine");
          }
          build(e) {
            return new q(e, this.config);
          }
        }
        class q extends o.Kl {
          static [r.i] = "PgLine";
          getSQLType() {
            return "line";
          }
          mapFromDriverValue(e) {
            let [t, n, r] = e.slice(1, -1).split(",");
            return [
              Number.parseFloat(t),
              Number.parseFloat(n),
              Number.parseFloat(r),
            ];
          }
          mapToDriverValue(e) {
            return `{${e[0]},${e[1]},${e[2]}}`;
          }
        }
        class U extends o.pe {
          static [r.i] = "PgLineABCBuilder";
          constructor(e) {
            super(e, "json", "PgLineABC");
          }
          build(e) {
            return new H(e, this.config);
          }
        }
        class H extends o.Kl {
          static [r.i] = "PgLineABC";
          getSQLType() {
            return "line";
          }
          mapFromDriverValue(e) {
            let [t, n, r] = e.slice(1, -1).split(",");
            return {
              a: Number.parseFloat(t),
              b: Number.parseFloat(n),
              c: Number.parseFloat(r),
            };
          }
          mapToDriverValue(e) {
            return `{${e.a},${e.b},${e.c}}`;
          }
        }
        function Q(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return r?.mode && "tuple" !== r.mode ? new U(n) : new $(n);
        }
        class V extends o.pe {
          static [r.i] = "PgMacaddrBuilder";
          constructor(e) {
            super(e, "string", "PgMacaddr");
          }
          build(e) {
            return new W(e, this.config);
          }
        }
        class W extends o.Kl {
          static [r.i] = "PgMacaddr";
          getSQLType() {
            return "macaddr";
          }
        }
        function Z(e) {
          return new V(e ?? "");
        }
        class G extends o.pe {
          static [r.i] = "PgMacaddr8Builder";
          constructor(e) {
            super(e, "string", "PgMacaddr8");
          }
          build(e) {
            return new Y(e, this.config);
          }
        }
        class Y extends o.Kl {
          static [r.i] = "PgMacaddr8";
          getSQLType() {
            return "macaddr8";
          }
        }
        function K(e) {
          return new G(e ?? "");
        }
        var X = n(82655);
        class J extends o.pe {
          static [r.i] = "PgPointTupleBuilder";
          constructor(e) {
            super(e, "array", "PgPointTuple");
          }
          build(e) {
            return new ee(e, this.config);
          }
        }
        class ee extends o.Kl {
          static [r.i] = "PgPointTuple";
          getSQLType() {
            return "point";
          }
          mapFromDriverValue(e) {
            if ("string" == typeof e) {
              let [t, n] = e.slice(1, -1).split(",");
              return [Number.parseFloat(t), Number.parseFloat(n)];
            }
            return [e.x, e.y];
          }
          mapToDriverValue(e) {
            return `(${e[0]},${e[1]})`;
          }
        }
        class et extends o.pe {
          static [r.i] = "PgPointObjectBuilder";
          constructor(e) {
            super(e, "json", "PgPointObject");
          }
          build(e) {
            return new en(e, this.config);
          }
        }
        class en extends o.Kl {
          static [r.i] = "PgPointObject";
          getSQLType() {
            return "point";
          }
          mapFromDriverValue(e) {
            if ("string" == typeof e) {
              let [t, n] = e.slice(1, -1).split(",");
              return { x: Number.parseFloat(t), y: Number.parseFloat(n) };
            }
            return e;
          }
          mapToDriverValue(e) {
            return `(${e.x},${e.y})`;
          }
        }
        function er(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return r?.mode && "tuple" !== r.mode ? new et(n) : new J(n);
        }
        function ei(e, t) {
          let n = new DataView(new ArrayBuffer(8));
          for (let r = 0; r < 8; r++) n.setUint8(r, e[t + r]);
          return n.getFloat64(0, !0);
        }
        function es(e) {
          let t = (function (e) {
              let t = [];
              for (let n = 0; n < e.length; n += 2)
                t.push(Number.parseInt(e.slice(n, n + 2), 16));
              return new Uint8Array(t);
            })(e),
            n = 0,
            r = t[0];
          n += 1;
          let i = new DataView(t.buffer),
            s = i.getUint32(n, 1 === r);
          if (
            ((n += 4),
            0x20000000 & s && (i.getUint32(n, 1 === r), (n += 4)),
            (65535 & s) == 1)
          ) {
            let e = ei(t, n),
              r = ei(t, (n += 8));
            return (n += 8), [e, r];
          }
          throw Error("Unsupported geometry type");
        }
        class eo extends o.pe {
          static [r.i] = "PgGeometryBuilder";
          constructor(e) {
            super(e, "array", "PgGeometry");
          }
          build(e) {
            return new ea(e, this.config);
          }
        }
        class ea extends o.Kl {
          static [r.i] = "PgGeometry";
          getSQLType() {
            return "geometry(point)";
          }
          mapFromDriverValue(e) {
            return es(e);
          }
          mapToDriverValue(e) {
            return `point(${e[0]} ${e[1]})`;
          }
        }
        class el extends o.pe {
          static [r.i] = "PgGeometryObjectBuilder";
          constructor(e) {
            super(e, "json", "PgGeometryObject");
          }
          build(e) {
            return new ec(e, this.config);
          }
        }
        class ec extends o.Kl {
          static [r.i] = "PgGeometryObject";
          getSQLType() {
            return "geometry(point)";
          }
          mapFromDriverValue(e) {
            let t = es(e);
            return { x: t[0], y: t[1] };
          }
          mapToDriverValue(e) {
            return `point(${e.x} ${e.y})`;
          }
        }
        function eu(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return r?.mode && "tuple" !== r.mode ? new el(n) : new eo(n);
        }
        class ed extends o.pe {
          static [r.i] = "PgRealBuilder";
          constructor(e, t) {
            super(e, "number", "PgReal"), (this.config.length = t);
          }
          build(e) {
            return new eh(e, this.config);
          }
        }
        class eh extends o.Kl {
          static [r.i] = "PgReal";
          constructor(e, t) {
            super(e, t);
          }
          getSQLType() {
            return "real";
          }
          mapFromDriverValue = (e) =>
            "string" == typeof e ? Number.parseFloat(e) : e;
        }
        function ep(e) {
          return new ed(e ?? "");
        }
        class ef extends o.pe {
          static [r.i] = "PgSerialBuilder";
          constructor(e) {
            super(e, "number", "PgSerial"),
              (this.config.hasDefault = !0),
              (this.config.notNull = !0);
          }
          build(e) {
            return new em(e, this.config);
          }
        }
        class em extends o.Kl {
          static [r.i] = "PgSerial";
          getSQLType() {
            return "serial";
          }
        }
        function eg(e) {
          return new ef(e ?? "");
        }
        class ey extends a.p {
          static [r.i] = "PgSmallIntBuilder";
          constructor(e) {
            super(e, "number", "PgSmallInt");
          }
          build(e) {
            return new ev(e, this.config);
          }
        }
        class ev extends o.Kl {
          static [r.i] = "PgSmallInt";
          getSQLType() {
            return "smallint";
          }
          mapFromDriverValue = (e) => ("string" == typeof e ? Number(e) : e);
        }
        function eb(e) {
          return new ey(e ?? "");
        }
        class ex extends o.pe {
          static [r.i] = "PgSmallSerialBuilder";
          constructor(e) {
            super(e, "number", "PgSmallSerial"),
              (this.config.hasDefault = !0),
              (this.config.notNull = !0);
          }
          build(e) {
            return new ek(e, this.config);
          }
        }
        class ek extends o.Kl {
          static [r.i] = "PgSmallSerial";
          getSQLType() {
            return "smallserial";
          }
        }
        function ew(e) {
          return new ex(e ?? "");
        }
        var e_ = n(32110),
          eO = n(50840),
          eT = n(71721),
          eS = n(89138),
          eE = n(61469);
        class eC extends o.pe {
          static [r.i] = "PgBinaryVectorBuilder";
          constructor(e, t) {
            super(e, "string", "PgBinaryVector"),
              (this.config.dimensions = t.dimensions);
          }
          build(e) {
            return new eA(e, this.config);
          }
        }
        class eA extends o.Kl {
          static [r.i] = "PgBinaryVector";
          dimensions = this.config.dimensions;
          getSQLType() {
            return `bit(${this.dimensions})`;
          }
        }
        function eN(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return new eC(n, r);
        }
        class eI extends o.pe {
          static [r.i] = "PgHalfVectorBuilder";
          constructor(e, t) {
            super(e, "array", "PgHalfVector"),
              (this.config.dimensions = t.dimensions);
          }
          build(e) {
            return new eD(e, this.config);
          }
        }
        class eD extends o.Kl {
          static [r.i] = "PgHalfVector";
          dimensions = this.config.dimensions;
          getSQLType() {
            return `halfvec(${this.dimensions})`;
          }
          mapToDriverValue(e) {
            return JSON.stringify(e);
          }
          mapFromDriverValue(e) {
            return e
              .slice(1, -1)
              .split(",")
              .map((e) => Number.parseFloat(e));
          }
        }
        function eP(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return new eI(n, r);
        }
        class eR extends o.pe {
          static [r.i] = "PgSparseVectorBuilder";
          constructor(e, t) {
            super(e, "string", "PgSparseVector"),
              (this.config.dimensions = t.dimensions);
          }
          build(e) {
            return new eM(e, this.config);
          }
        }
        class eM extends o.Kl {
          static [r.i] = "PgSparseVector";
          dimensions = this.config.dimensions;
          getSQLType() {
            return `sparsevec(${this.dimensions})`;
          }
        }
        function eL(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return new eR(n, r);
        }
        class ej extends o.pe {
          static [r.i] = "PgVectorBuilder";
          constructor(e, t) {
            super(e, "array", "PgVector"),
              (this.config.dimensions = t.dimensions);
          }
          build(e) {
            return new eF(e, this.config);
          }
        }
        class eF extends o.Kl {
          static [r.i] = "PgVector";
          dimensions = this.config.dimensions;
          getSQLType() {
            return `vector(${this.dimensions})`;
          }
          mapToDriverValue(e) {
            return JSON.stringify(e);
          }
          mapFromDriverValue(e) {
            return e
              .slice(1, -1)
              .split(",")
              .map((e) => Number.parseFloat(e));
          }
        }
        function eB(e, t) {
          let { name: n, config: r } = (0, s.Ll)(e, t);
          return new ej(n, r);
        }
        let ez = Symbol.for("drizzle:PgInlineForeignKeys"),
          e$ = Symbol.for("drizzle:EnableRLS");
        class eq extends i.XI {
          static [r.i] = "PgTable";
          static Symbol = Object.assign({}, i.XI.Symbol, {
            InlineForeignKeys: ez,
            EnableRLS: e$,
          });
          [ez] = [];
          [e$] = !1;
          [i.XI.Symbol.ExtraConfigBuilder] = void 0;
          [i.XI.Symbol.ExtraConfigColumns] = {};
        }
        let eU = (e, t, n) =>
          (function (e, t, n, r, s = e) {
            let o = new eq(e, r, s),
              a =
                "function" == typeof t
                  ? t({
                      bigint: h,
                      bigserial: y,
                      boolean: v.zM,
                      char: k,
                      cidr: O,
                      customType: E,
                      date: C.p6,
                      doublePrecision: I,
                      inet: R,
                      integer: M.nd,
                      interval: F,
                      json: B.Pq,
                      jsonb: z.Fx,
                      line: Q,
                      macaddr: Z,
                      macaddr8: K,
                      numeric: X.sH,
                      point: er,
                      geometry: eu,
                      real: ep,
                      serial: eg,
                      smallint: eb,
                      smallserial: ew,
                      text: e_.Qq,
                      time: eO.kB,
                      timestamp: eT.vE,
                      uuid: eS.uR,
                      varchar: eE.yf,
                      bit: eN,
                      halfvec: eP,
                      sparsevec: eL,
                      vector: eB,
                    })
                  : t,
              l = Object.fromEntries(
                Object.entries(a).map(([e, t]) => {
                  t.setName(e);
                  let n = t.build(o);
                  return o[ez].push(...t.buildForeignKeys(n, o)), [e, n];
                }),
              ),
              c = Object.fromEntries(
                Object.entries(a).map(
                  ([e, t]) => (t.setName(e), [e, t.buildExtraConfigColumn(o)]),
                ),
              ),
              u = Object.assign(o, l);
            return (
              (u[i.XI.Symbol.Columns] = l),
              (u[i.XI.Symbol.ExtraConfigColumns] = c),
              n && (u[eq.Symbol.ExtraConfigBuilder] = n),
              Object.assign(u, {
                enableRLS: () => ((u[eq.Symbol.EnableRLS] = !0), u),
              })
            );
          })(e, t, n, void 0);
      },
      8716: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { R: () => u });
            var i = n(61268),
              s = n(28909),
              o = n(33713),
              a = n(89284),
              l = n(12253),
              c = e([s, o, a]);
            function u({ className: e }) {
              let { toggleSidebar: t } = (0, o.cL)();
              return (0, i.jsxs)(a.m_, {
                children: [
                  (0, i.jsx)(a.k$, {
                    asChild: !0,
                    children: (0, i.jsx)(s.$, {
                      onClick: t,
                      variant: "outline",
                      className: "md:px-2 md:h-fit",
                      children: (0, i.jsx)(l.j0, { size: 16 }),
                    }),
                  }),
                  (0, i.jsx)(a.ZI, {
                    align: "start",
                    children: "Toggle Sidebar",
                  }),
                ],
              });
            }
            ([s, o, a] = c.then ? (await c)() : c), r();
          } catch (e) {
            r(e);
          }
        });
      },
      8963: (e) => {
        function t(e) {
          var t = Error("Cannot find module '" + e + "'");
          throw ((t.code = "MODULE_NOT_FOUND"), t);
        }
        (t.keys = () => []), (t.resolve = t), (t.id = 8963), (e.exports = t);
      },
      9581: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          Object.defineProperty(t, "ReflectAdapter", {
            enumerable: !0,
            get: function () {
              return n;
            },
          });
        class n {
          static get(e, t, n) {
            let r = Reflect.get(e, t, n);
            return "function" == typeof r ? r.bind(e) : r;
          }
          static set(e, t, n, r) {
            return Reflect.set(e, t, n, r);
          }
          static has(e, t) {
            return Reflect.has(e, t);
          }
          static deleteProperty(e, t) {
            return Reflect.deleteProperty(e, t);
          }
        }
      },
      10265: (e, t, n) => {
        "use strict";
        n.d(t, { q: () => E });
        var r = n(14256),
          i = n(58342),
          s = n(68098);
        function o(e) {
          var t;
          if (
            null != (t = e) &&
            "object" == typeof t &&
            "object" === t.type &&
            (null == t.properties || 0 === Object.keys(t.properties).length) &&
            !t.additionalProperties
          )
            return;
          if ("boolean" == typeof e) return { type: "boolean", properties: {} };
          let {
              type: n,
              description: r,
              required: i,
              properties: s,
              items: a,
              allOf: l,
              anyOf: c,
              oneOf: u,
              format: d,
              const: h,
              minLength: p,
              enum: f,
            } = e,
            m = {};
          if (
            (r && (m.description = r),
            i && (m.required = i),
            d && (m.format = d),
            void 0 !== h && (m.enum = [h]),
            n &&
              (Array.isArray(n)
                ? n.includes("null")
                  ? ((m.type = n.filter((e) => "null" !== e)[0]),
                    (m.nullable = !0))
                  : (m.type = n)
                : "null" === n
                  ? (m.type = "null")
                  : (m.type = n)),
            void 0 !== f && (m.enum = f),
            null != s &&
              (m.properties = Object.entries(s).reduce(
                (e, [t, n]) => ((e[t] = o(n)), e),
                {},
              )),
            a && (m.items = Array.isArray(a) ? a.map(o) : o(a)),
            l && (m.allOf = l.map(o)),
            c)
          )
            if (
              c.some(
                (e) =>
                  "object" == typeof e &&
                  (null == e ? void 0 : e.type) === "null",
              )
            ) {
              let e = c.filter(
                (e) =>
                  "object" != typeof e ||
                  (null == e ? void 0 : e.type) !== "null",
              );
              if (1 === e.length) {
                let t = o(e[0]);
                "object" == typeof t &&
                  ((m.nullable = !0), Object.assign(m, t));
              } else (m.anyOf = e.map(o)), (m.nullable = !0);
            } else m.anyOf = c.map(o);
          return (
            u && (m.oneOf = u.map(o)), void 0 !== p && (m.minLength = p), m
          );
        }
        function a(e) {
          return e.includes("/") ? e : `models/${e}`;
        }
        var l = i.Ik({
            error: i.Ik({
              code: i.ai().nullable(),
              message: i.Yj(),
              status: i.Yj(),
            }),
          }),
          c = (0, r.sl)({
            errorSchema: l,
            errorToMessage: (e) => e.error.message,
          });
        function u({ finishReason: e, hasToolCalls: t }) {
          switch (e) {
            case "STOP":
              return t ? "tool-calls" : "stop";
            case "MAX_TOKENS":
              return "length";
            case "IMAGE_SAFETY":
            case "RECITATION":
            case "SAFETY":
            case "BLOCKLIST":
            case "PROHIBITED_CONTENT":
            case "SPII":
              return "content-filter";
            case "FINISH_REASON_UNSPECIFIED":
            case "OTHER":
              return "other";
            case "MALFORMED_FUNCTION_CALL":
              return "error";
            default:
              return "unknown";
          }
        }
        var d = class {
          constructor(e, t, n) {
            (this.specificationVersion = "v1"),
              (this.defaultObjectGenerationMode = "json"),
              (this.supportsImageUrls = !1),
              (this.modelId = e),
              (this.settings = t),
              (this.config = n);
          }
          get supportsStructuredOutputs() {
            var e;
            return null == (e = this.settings.structuredOutputs) || e;
          }
          get provider() {
            return this.config.provider;
          }
          async getArgs({
            mode: e,
            prompt: t,
            maxTokens: n,
            temperature: i,
            topP: a,
            topK: l,
            frequencyPenalty: c,
            presencePenalty: u,
            stopSequences: d,
            responseFormat: h,
            seed: p,
            providerMetadata: f,
          }) {
            var m, g, y;
            let v = e.type,
              b = [],
              x = (0, r.xI)({
                provider: "google",
                providerOptions: f,
                schema: _,
              });
            (null == (m = null == x ? void 0 : x.thinkingConfig)
              ? void 0
              : m.includeThoughts) !== !0 ||
              this.config.provider.startsWith("google.vertex.") ||
              b.push({
                type: "other",
                message: `The 'includeThoughts' option is only supported with the Google Vertex provider and might not be supported or could behave unexpectedly with the current Google provider (${this.config.provider}).`,
              });
            let k = {
                maxOutputTokens: n,
                temperature: i,
                topK: l,
                topP: a,
                frequencyPenalty: c,
                presencePenalty: u,
                stopSequences: d,
                seed: p,
                responseMimeType:
                  (null == h ? void 0 : h.type) === "json"
                    ? "application/json"
                    : void 0,
                responseSchema:
                  (null == h ? void 0 : h.type) === "json" &&
                  null != h.schema &&
                  this.supportsStructuredOutputs
                    ? o(h.schema)
                    : void 0,
                ...(this.settings.audioTimestamp && {
                  audioTimestamp: this.settings.audioTimestamp,
                }),
                responseModalities: null == x ? void 0 : x.responseModalities,
                thinkingConfig: null == x ? void 0 : x.thinkingConfig,
              },
              { contents: w, systemInstruction: O } = (function (e) {
                var t, n;
                let i = [],
                  o = [],
                  a = !0;
                for (let { role: l, content: c } of e)
                  switch (l) {
                    case "system":
                      if (!a)
                        throw new s.b8({
                          functionality:
                            "system messages are only supported at the beginning of the conversation",
                        });
                      i.push({ text: c });
                      break;
                    case "user": {
                      a = !1;
                      let e = [];
                      for (let i of c)
                        switch (i.type) {
                          case "text":
                            e.push({ text: i.text });
                            break;
                          case "image":
                            e.push(
                              i.image instanceof URL
                                ? {
                                    fileData: {
                                      mimeType:
                                        null != (t = i.mimeType)
                                          ? t
                                          : "image/jpeg",
                                      fileUri: i.image.toString(),
                                    },
                                  }
                                : {
                                    inlineData: {
                                      mimeType:
                                        null != (n = i.mimeType)
                                          ? n
                                          : "image/jpeg",
                                      data: (0, r.n_)(i.image),
                                    },
                                  },
                            );
                            break;
                          case "file":
                            e.push(
                              i.data instanceof URL
                                ? {
                                    fileData: {
                                      mimeType: i.mimeType,
                                      fileUri: i.data.toString(),
                                    },
                                  }
                                : {
                                    inlineData: {
                                      mimeType: i.mimeType,
                                      data: i.data,
                                    },
                                  },
                            );
                        }
                      o.push({ role: "user", parts: e });
                      break;
                    }
                    case "assistant":
                      (a = !1),
                        o.push({
                          role: "model",
                          parts: c
                            .map((e) => {
                              switch (e.type) {
                                case "text":
                                  return 0 === e.text.length
                                    ? void 0
                                    : { text: e.text };
                                case "file":
                                  if ("image/png" !== e.mimeType)
                                    throw new s.b8({
                                      functionality:
                                        "Only PNG images are supported in assistant messages",
                                    });
                                  if (e.data instanceof URL)
                                    throw new s.b8({
                                      functionality:
                                        "File data URLs in assistant messages are not supported",
                                    });
                                  return {
                                    inlineData: {
                                      mimeType: e.mimeType,
                                      data: e.data,
                                    },
                                  };
                                case "tool-call":
                                  return {
                                    functionCall: {
                                      name: e.toolName,
                                      args: e.args,
                                    },
                                  };
                              }
                            })
                            .filter((e) => void 0 !== e),
                        });
                      break;
                    case "tool":
                      (a = !1),
                        o.push({
                          role: "user",
                          parts: c.map((e) => ({
                            functionResponse: {
                              name: e.toolName,
                              response: { name: e.toolName, content: e.result },
                            },
                          })),
                        });
                  }
                return {
                  systemInstruction: i.length > 0 ? { parts: i } : void 0,
                  contents: o,
                };
              })(t);
            switch (v) {
              case "regular": {
                let {
                  tools: t,
                  toolConfig: n,
                  toolWarnings: r,
                } = (function (e, t, n, r) {
                  var i, a;
                  let l = (null == (i = e.tools) ? void 0 : i.length)
                      ? e.tools
                      : void 0,
                    c = [],
                    u = r.includes("gemini-2"),
                    d = r.includes("gemini-1.5-flash") && !r.includes("-8b");
                  if (t)
                    return {
                      tools: u
                        ? { googleSearch: {} }
                        : {
                            googleSearchRetrieval:
                              d && n ? { dynamicRetrievalConfig: n } : {},
                          },
                      toolConfig: void 0,
                      toolWarnings: c,
                    };
                  if (null == l)
                    return {
                      tools: void 0,
                      toolConfig: void 0,
                      toolWarnings: c,
                    };
                  let h = [];
                  for (let e of l)
                    "provider-defined" === e.type
                      ? c.push({ type: "unsupported-tool", tool: e })
                      : h.push({
                          name: e.name,
                          description: null != (a = e.description) ? a : "",
                          parameters: o(e.parameters),
                        });
                  let p = e.toolChoice;
                  if (null == p)
                    return {
                      tools: { functionDeclarations: h },
                      toolConfig: void 0,
                      toolWarnings: c,
                    };
                  let f = p.type;
                  switch (f) {
                    case "auto":
                      return {
                        tools: { functionDeclarations: h },
                        toolConfig: { functionCallingConfig: { mode: "AUTO" } },
                        toolWarnings: c,
                      };
                    case "none":
                      return {
                        tools: { functionDeclarations: h },
                        toolConfig: { functionCallingConfig: { mode: "NONE" } },
                        toolWarnings: c,
                      };
                    case "required":
                      return {
                        tools: { functionDeclarations: h },
                        toolConfig: { functionCallingConfig: { mode: "ANY" } },
                        toolWarnings: c,
                      };
                    case "tool":
                      return {
                        tools: { functionDeclarations: h },
                        toolConfig: {
                          functionCallingConfig: {
                            mode: "ANY",
                            allowedFunctionNames: [p.toolName],
                          },
                        },
                        toolWarnings: c,
                      };
                    default:
                      throw new s.b8({
                        functionality: `Unsupported tool choice type: ${f}`,
                      });
                  }
                })(
                  e,
                  null != (g = this.settings.useSearchGrounding) && g,
                  this.settings.dynamicRetrievalConfig,
                  this.modelId,
                );
                return {
                  args: {
                    generationConfig: k,
                    contents: w,
                    systemInstruction: O,
                    safetySettings: this.settings.safetySettings,
                    tools: t,
                    toolConfig: n,
                    cachedContent: this.settings.cachedContent,
                  },
                  warnings: [...b, ...r],
                };
              }
              case "object-json":
                return {
                  args: {
                    generationConfig: {
                      ...k,
                      responseMimeType: "application/json",
                      responseSchema:
                        null != e.schema && this.supportsStructuredOutputs
                          ? o(e.schema)
                          : void 0,
                    },
                    contents: w,
                    systemInstruction: O,
                    safetySettings: this.settings.safetySettings,
                    cachedContent: this.settings.cachedContent,
                  },
                  warnings: b,
                };
              case "object-tool":
                return {
                  args: {
                    generationConfig: k,
                    contents: w,
                    systemInstruction: O,
                    tools: {
                      functionDeclarations: [
                        {
                          name: e.tool.name,
                          description:
                            null != (y = e.tool.description) ? y : "",
                          parameters: o(e.tool.parameters),
                        },
                      ],
                    },
                    toolConfig: { functionCallingConfig: { mode: "ANY" } },
                    safetySettings: this.settings.safetySettings,
                    cachedContent: this.settings.cachedContent,
                  },
                  warnings: b,
                };
              default:
                throw Error(`Unsupported type: ${v}`);
            }
          }
          supportsUrl(e) {
            return this.config.isSupportedUrl(e);
          }
          async doGenerate(e) {
            var t, n, i, s, o;
            let { args: l, warnings: d } = await this.getArgs(e),
              y = JSON.stringify(l),
              v = (0, r.m2)(await (0, r.hd)(this.config.headers), e.headers),
              {
                responseHeaders: b,
                value: x,
                rawValue: w,
              } = await (0, r.GU)({
                url: `${this.config.baseURL}/${a(this.modelId)}:generateContent`,
                headers: v,
                body: l,
                failedResponseHandler: c,
                successfulResponseHandler: (0, r.cV)(k),
                abortSignal: e.abortSignal,
                fetch: this.config.fetch,
              }),
              { contents: _, ...O } = l,
              T = x.candidates[0],
              S =
                null != T.content &&
                "object" == typeof T.content &&
                "parts" in T.content
                  ? T.content.parts
                  : [],
              E = h({ parts: S, generateId: this.config.generateId }),
              C = x.usageMetadata;
            return {
              text: p(S),
              reasoning: f(S),
              files:
                null == (t = m(S))
                  ? void 0
                  : t.map((e) => ({
                      data: e.inlineData.data,
                      mimeType: e.inlineData.mimeType,
                    })),
              toolCalls: E,
              finishReason: u({
                finishReason: T.finishReason,
                hasToolCalls: null != E && E.length > 0,
              }),
              usage: {
                promptTokens:
                  null != (n = null == C ? void 0 : C.promptTokenCount)
                    ? n
                    : NaN,
                completionTokens:
                  null != (i = null == C ? void 0 : C.candidatesTokenCount)
                    ? i
                    : NaN,
              },
              rawCall: { rawPrompt: _, rawSettings: O },
              rawResponse: { headers: b, body: w },
              warnings: d,
              providerMetadata: {
                google: {
                  groundingMetadata:
                    null != (s = T.groundingMetadata) ? s : null,
                  safetyRatings: null != (o = T.safetyRatings) ? o : null,
                },
              },
              sources: g({
                groundingMetadata: T.groundingMetadata,
                generateId: this.config.generateId,
              }),
              request: { body: y },
            };
          }
          async doStream(e) {
            let t,
              { args: n, warnings: i } = await this.getArgs(e),
              s = JSON.stringify(n),
              o = (0, r.m2)(await (0, r.hd)(this.config.headers), e.headers),
              { responseHeaders: l, value: d } = await (0, r.GU)({
                url: `${this.config.baseURL}/${a(this.modelId)}:streamGenerateContent?alt=sse`,
                headers: o,
                body: n,
                failedResponseHandler: c,
                successfulResponseHandler: (0, r.Ds)(w),
                abortSignal: e.abortSignal,
                fetch: this.config.fetch,
              }),
              { contents: y, ...v } = n,
              b = "unknown",
              x = { promptTokens: Number.NaN, completionTokens: Number.NaN },
              k = this.config.generateId,
              _ = !1;
            return {
              stream: d.pipeThrough(
                new TransformStream({
                  transform(e, n) {
                    var r, i, s, o, a, l;
                    if (!e.success)
                      return void n.enqueue({ type: "error", error: e.error });
                    let c = e.value,
                      d = c.usageMetadata;
                    null != d &&
                      (x = {
                        promptTokens:
                          null != (r = d.promptTokenCount) ? r : NaN,
                        completionTokens:
                          null != (i = d.candidatesTokenCount) ? i : NaN,
                      });
                    let y = null == (s = c.candidates) ? void 0 : s[0];
                    if (null == y) return;
                    let v = y.content;
                    if (null != v) {
                      let e = p(v.parts);
                      null != e &&
                        n.enqueue({ type: "text-delta", textDelta: e });
                      let t = f(v.parts);
                      if (null != t)
                        for (let e of t)
                          n.enqueue({ type: "reasoning", textDelta: e.text });
                      let r = m(v.parts);
                      if (null != r)
                        for (let e of r)
                          n.enqueue({
                            type: "file",
                            mimeType: e.inlineData.mimeType,
                            data: e.inlineData.data,
                          });
                      let i = h({ parts: v.parts, generateId: k });
                      if (null != i)
                        for (let e of i)
                          n.enqueue({
                            type: "tool-call-delta",
                            toolCallType: "function",
                            toolCallId: e.toolCallId,
                            toolName: e.toolName,
                            argsTextDelta: e.args,
                          }),
                            n.enqueue({
                              type: "tool-call",
                              toolCallType: "function",
                              toolCallId: e.toolCallId,
                              toolName: e.toolName,
                              args: e.args,
                            }),
                            (_ = !0);
                    }
                    if (null != y.finishReason) {
                      for (let e of ((b = u({
                        finishReason: y.finishReason,
                        hasToolCalls: _,
                      })),
                      null !=
                      (o = g({
                        groundingMetadata: y.groundingMetadata,
                        generateId: k,
                      }))
                        ? o
                        : []))
                        n.enqueue({ type: "source", source: e });
                      t = {
                        google: {
                          groundingMetadata:
                            null != (a = y.groundingMetadata) ? a : null,
                          safetyRatings:
                            null != (l = y.safetyRatings) ? l : null,
                        },
                      };
                    }
                  },
                  flush(e) {
                    e.enqueue({
                      type: "finish",
                      finishReason: b,
                      usage: x,
                      providerMetadata: t,
                    });
                  },
                }),
              ),
              rawCall: { rawPrompt: y, rawSettings: v },
              rawResponse: { headers: l },
              warnings: i,
              request: { body: s },
            };
          }
        };
        function h({ parts: e, generateId: t }) {
          let n = null == e ? void 0 : e.filter((e) => "functionCall" in e);
          return null == n || 0 === n.length
            ? void 0
            : n.map((e) => ({
                toolCallType: "function",
                toolCallId: t(),
                toolName: e.functionCall.name,
                args: JSON.stringify(e.functionCall.args),
              }));
        }
        function p(e) {
          let t =
            null == e
              ? void 0
              : e.filter((e) => "text" in e && !0 !== e.thought);
          return null == t || 0 === t.length
            ? void 0
            : t.map((e) => e.text).join("");
        }
        function f(e) {
          let t =
            null == e
              ? void 0
              : e.filter(
                  (e) => "text" in e && !0 === e.thought && null != e.text,
                );
          return null == t || 0 === t.length
            ? void 0
            : t.map((e) => ({ type: "text", text: e.text }));
        }
        function m(e) {
          return null == e ? void 0 : e.filter((e) => "inlineData" in e);
        }
        function g({ groundingMetadata: e, generateId: t }) {
          var n;
          return null == (n = null == e ? void 0 : e.groundingChunks)
            ? void 0
            : n
                .filter((e) => null != e.web)
                .map((e) => ({
                  sourceType: "url",
                  id: t(),
                  url: e.web.uri,
                  title: e.web.title,
                }));
        }
        var y = i.Ik({
            parts: i
              .YO(
                i.KC([
                  i.Ik({ functionCall: i.Ik({ name: i.Yj(), args: i.L5() }) }),
                  i.Ik({
                    inlineData: i.Ik({ mimeType: i.Yj(), data: i.Yj() }),
                  }),
                  i.Ik({ text: i.Yj().nullish(), thought: i.zM().nullish() }),
                ]),
              )
              .nullish(),
          }),
          v = i.Ik({
            web: i.Ik({ uri: i.Yj(), title: i.Yj() }).nullish(),
            retrievedContext: i.Ik({ uri: i.Yj(), title: i.Yj() }).nullish(),
          }),
          b = i.Ik({
            webSearchQueries: i.YO(i.Yj()).nullish(),
            retrievalQueries: i.YO(i.Yj()).nullish(),
            searchEntryPoint: i.Ik({ renderedContent: i.Yj() }).nullish(),
            groundingChunks: i.YO(v).nullish(),
            groundingSupports: i
              .YO(
                i.Ik({
                  segment: i.Ik({
                    startIndex: i.ai().nullish(),
                    endIndex: i.ai().nullish(),
                    text: i.Yj().nullish(),
                  }),
                  segment_text: i.Yj().nullish(),
                  groundingChunkIndices: i.YO(i.ai()).nullish(),
                  supportChunkIndices: i.YO(i.ai()).nullish(),
                  confidenceScores: i.YO(i.ai()).nullish(),
                  confidenceScore: i.YO(i.ai()).nullish(),
                }),
              )
              .nullish(),
            retrievalMetadata: i
              .KC([i.Ik({ webDynamicRetrievalScore: i.ai() }), i.Ik({})])
              .nullish(),
          }),
          x = i.Ik({
            category: i.Yj().nullish(),
            probability: i.Yj().nullish(),
            probabilityScore: i.ai().nullish(),
            severity: i.Yj().nullish(),
            severityScore: i.ai().nullish(),
            blocked: i.zM().nullish(),
          }),
          k = i.Ik({
            candidates: i.YO(
              i.Ik({
                content: y.nullish().or(i.Ik({}).strict()),
                finishReason: i.Yj().nullish(),
                safetyRatings: i.YO(x).nullish(),
                groundingMetadata: b.nullish(),
              }),
            ),
            usageMetadata: i
              .Ik({
                promptTokenCount: i.ai().nullish(),
                candidatesTokenCount: i.ai().nullish(),
                totalTokenCount: i.ai().nullish(),
              })
              .nullish(),
          }),
          w = i.Ik({
            candidates: i
              .YO(
                i.Ik({
                  content: y.nullish(),
                  finishReason: i.Yj().nullish(),
                  safetyRatings: i.YO(x).nullish(),
                  groundingMetadata: b.nullish(),
                }),
              )
              .nullish(),
            usageMetadata: i
              .Ik({
                promptTokenCount: i.ai().nullish(),
                candidatesTokenCount: i.ai().nullish(),
                totalTokenCount: i.ai().nullish(),
              })
              .nullish(),
          }),
          _ = i.Ik({
            responseModalities: i.YO(i.k5(["TEXT", "IMAGE"])).nullish(),
            thinkingConfig: i
              .Ik({
                thinkingBudget: i.ai().nullish(),
                includeThoughts: i.zM().nullish(),
              })
              .nullish(),
          }),
          O = class {
            constructor(e, t, n) {
              (this.specificationVersion = "v1"),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
            }
            get provider() {
              return this.config.provider;
            }
            get maxEmbeddingsPerCall() {
              return 2048;
            }
            get supportsParallelCalls() {
              return !0;
            }
            async doEmbed({ values: e, headers: t, abortSignal: n }) {
              if (e.length > this.maxEmbeddingsPerCall)
                throw new s.Ch({
                  provider: this.provider,
                  modelId: this.modelId,
                  maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
                  values: e,
                });
              let i = (0, r.m2)(await (0, r.hd)(this.config.headers), t),
                { responseHeaders: o, value: a } = await (0, r.GU)({
                  url: `${this.config.baseURL}/models/${this.modelId}:batchEmbedContents`,
                  headers: i,
                  body: {
                    requests: e.map((e) => ({
                      model: `models/${this.modelId}`,
                      content: { role: "user", parts: [{ text: e }] },
                      outputDimensionality: this.settings.outputDimensionality,
                      taskType: this.settings.taskType,
                    })),
                  },
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.cV)(T),
                  abortSignal: n,
                  fetch: this.config.fetch,
                });
              return {
                embeddings: a.embeddings.map((e) => e.values),
                usage: void 0,
                rawResponse: { headers: o },
              };
            }
          },
          T = i.Ik({ embeddings: i.YO(i.Ik({ values: i.YO(i.ai()) })) });
        function S(e) {
          return e
            .toString()
            .startsWith(
              "https://generativelanguage.googleapis.com/v1beta/files/",
            );
        }
        var E = (function (e = {}) {
          var t;
          let n =
              null != (t = (0, r.ae)(e.baseURL))
                ? t
                : "https://generativelanguage.googleapis.com/v1beta",
            i = () => ({
              "x-goog-api-key": (0, r.WL)({
                apiKey: e.apiKey,
                environmentVariableName: "GOOGLE_GENERATIVE_AI_API_KEY",
                description: "Google Generative AI",
              }),
              ...e.headers,
            }),
            s = (t, s = {}) => {
              var o;
              return new d(t, s, {
                provider: "google.generative-ai",
                baseURL: n,
                headers: i,
                generateId: null != (o = e.generateId) ? o : r.$C,
                isSupportedUrl: S,
                fetch: e.fetch,
              });
            },
            o = (t, r = {}) =>
              new O(t, r, {
                provider: "google.generative-ai",
                baseURL: n,
                headers: i,
                fetch: e.fetch,
              }),
            a = function (e, t) {
              if (new.target)
                throw Error(
                  "The Google Generative AI model function cannot be called with the new keyword.",
                );
              return s(e, t);
            };
          return (
            (a.languageModel = s),
            (a.chat = s),
            (a.generativeAI = s),
            (a.embedding = o),
            (a.textEmbedding = o),
            (a.textEmbeddingModel = o),
            a
          );
        })();
      },
      10846: (e) => {
        "use strict";
        e.exports = require("next/dist/compiled/next-server/app-page.runtime.prod.js");
      },
      11743: () => {},
      11997: (e) => {
        "use strict";
        e.exports = require("punycode");
      },
      12126: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { AM: () => l, Wv: () => c, hl: () => u });
            var i = n(61268),
              s = n(96229);
            n(84205);
            var o = n(15942),
              a = e([o]);
            function l({ ...e }) {
              return (0, i.jsx)(s.bL, { "data-slot": "popover", ...e });
            }
            function c({ ...e }) {
              return (0, i.jsx)(s.l9, { "data-slot": "popover-trigger", ...e });
            }
            function u({
              className: e,
              align: t = "center",
              sideOffset: n = 4,
              ...r
            }) {
              return (0, i.jsx)(s.ZL, {
                children: (0, i.jsx)(s.UC, {
                  "data-slot": "popover-content",
                  align: t,
                  sideOffset: n,
                  className: (0, o.cn)(
                    "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-hidden",
                    e,
                  ),
                  ...r,
                }),
              });
            }
            (o = (a.then ? (await a)() : a)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      12253: (e, t, n) => {
        "use strict";
        n.d(t, {
          $U: () => g,
          Au: () => u,
          BZ: () => b,
          D3: () => v,
          EA: () => y,
          Kp: () => l,
          P7: () => O,
          PW: () => x,
          PY: () => i,
          Td: () => m,
          XA: () => w,
          b1: () => d,
          c1: () => f,
          fC: () => k,
          hz: () => o,
          j0: () => p,
          oS: () => s,
          vL: () => a,
          w0: () => h,
          wF: () => c,
          xf: () => _,
        });
        var r = n(61268);
        let i = ({ size: e = 17 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M8 1L16 15H0L8 1Z",
                fill: "currentColor",
              }),
            }),
          s = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M14.5 13.5V6.5V5.41421C14.5 5.149 14.3946 4.89464 14.2071 4.70711L9.79289 0.292893C9.60536 0.105357 9.351 0 9.08579 0H8H3H1.5V1.5V13.5C1.5 14.8807 2.61929 16 4 16H12C13.3807 16 14.5 14.8807 14.5 13.5ZM13 13.5V6.5H9.5H8V5V1.5H3V13.5C3 14.0523 3.44772 14.5 4 14.5H12C12.5523 14.5 13 14.0523 13 13.5ZM9.5 5V2.12132L12.3787 5H9.5ZM5.13 5.00062H4.505V6.25062H5.13H6H6.625V5.00062H6H5.13ZM4.505 8H5.13H11H11.625V9.25H11H5.13H4.505V8ZM5.13 11H4.505V12.25H5.13H11H11.625V11H11H5.13Z",
                fill: "currentColor",
              }),
            }),
          o = ({ size: e = 16 }) =>
            (0, r.jsxs)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: [
                (0, r.jsxs)("g", {
                  clipPath: "url(#clip0_2393_1490)",
                  children: [
                    (0, r.jsx)("path", {
                      d: "M8 0V4",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.5",
                      d: "M8 16V12",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.9",
                      d: "M3.29773 1.52783L5.64887 4.7639",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.1",
                      d: "M12.7023 1.52783L10.3511 4.7639",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.4",
                      d: "M12.7023 14.472L10.3511 11.236",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.6",
                      d: "M3.29773 14.472L5.64887 11.236",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.2",
                      d: "M15.6085 5.52783L11.8043 6.7639",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.7",
                      d: "M0.391602 10.472L4.19583 9.23598",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.3",
                      d: "M15.6085 10.4722L11.8043 9.2361",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                    (0, r.jsx)("path", {
                      opacity: "0.8",
                      d: "M0.391602 5.52783L4.19583 6.7639",
                      stroke: "currentColor",
                      strokeWidth: "1.5",
                    }),
                  ],
                }),
                (0, r.jsx)("defs", {
                  children: (0, r.jsx)("clipPath", {
                    id: "clip0_2393_1490",
                    children: (0, r.jsx)("rect", {
                      width: "16",
                      height: "16",
                      fill: "white",
                    }),
                  }),
                }),
              ],
            }),
          a = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M11.75 0.189331L12.2803 0.719661L15.2803 3.71966L15.8107 4.24999L15.2803 4.78032L5.15901 14.9016C4.45575 15.6049 3.50192 16 2.50736 16H0.75H0V15.25V13.4926C0 12.4981 0.395088 11.5442 1.09835 10.841L11.2197 0.719661L11.75 0.189331ZM11.75 2.31065L9.81066 4.24999L11.75 6.18933L13.6893 4.24999L11.75 2.31065ZM2.15901 11.9016L8.75 5.31065L10.6893 7.24999L4.09835 13.841C3.67639 14.2629 3.1041 14.5 2.50736 14.5H1.5V13.4926C1.5 12.8959 1.73705 12.3236 2.15901 11.9016ZM9 16H16V14.5H9V16Z",
                fill: "currentColor",
              }),
            }),
          l = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M8.70711 1.39644C8.31659 1.00592 7.68342 1.00592 7.2929 1.39644L2.21968 6.46966L1.68935 6.99999L2.75001 8.06065L3.28034 7.53032L7.25001 3.56065V14.25V15H8.75001V14.25V3.56065L12.7197 7.53032L13.25 8.06065L14.3107 6.99999L13.7803 6.46966L8.70711 1.39644Z",
                fill: "currentColor",
              }),
            }),
          c = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M3 3H13V13H3V3Z",
                fill: "currentColor",
              }),
            }),
          u = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              className: "-rotate-45",
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M10.8591 1.70735C10.3257 1.70735 9.81417 1.91925 9.437 2.29643L3.19455 8.53886C2.56246 9.17095 2.20735 10.0282 2.20735 10.9222C2.20735 11.8161 2.56246 12.6734 3.19455 13.3055C3.82665 13.9376 4.68395 14.2927 5.57786 14.2927C6.47178 14.2927 7.32908 13.9376 7.96117 13.3055L14.2036 7.06304L14.7038 6.56287L15.7041 7.56321L15.204 8.06337L8.96151 14.3058C8.06411 15.2032 6.84698 15.7074 5.57786 15.7074C4.30875 15.7074 3.09162 15.2032 2.19422 14.3058C1.29682 13.4084 0.792664 12.1913 0.792664 10.9222C0.792664 9.65305 1.29682 8.43592 2.19422 7.53852L8.43666 1.29609C9.07914 0.653606 9.95054 0.292664 10.8591 0.292664C11.7678 0.292664 12.6392 0.653606 13.2816 1.29609C13.9241 1.93857 14.2851 2.80997 14.2851 3.71857C14.2851 4.62718 13.9241 5.49858 13.2816 6.14106L13.2814 6.14133L7.0324 12.3835C7.03231 12.3836 7.03222 12.3837 7.03213 12.3838C6.64459 12.7712 6.11905 12.9888 5.57107 12.9888C5.02297 12.9888 4.49731 12.7711 4.10974 12.3835C3.72217 11.9959 3.50444 11.4703 3.50444 10.9222C3.50444 10.3741 3.72217 9.8484 4.10974 9.46084L4.11004 9.46054L9.877 3.70039L10.3775 3.20051L11.3772 4.20144L10.8767 4.70131L5.11008 10.4612C5.11005 10.4612 5.11003 10.4612 5.11 10.4613C4.98779 10.5835 4.91913 10.7493 4.91913 10.9222C4.91913 11.0951 4.98782 11.2609 5.11008 11.3832C5.23234 11.5054 5.39817 11.5741 5.57107 11.5741C5.74398 11.5741 5.9098 11.5054 6.03206 11.3832L6.03233 11.3829L12.2813 5.14072C12.2814 5.14063 12.2815 5.14054 12.2816 5.14045C12.6586 4.7633 12.8704 4.25185 12.8704 3.71857C12.8704 3.18516 12.6585 2.6736 12.2813 2.29643C11.9041 1.91925 11.3926 1.70735 10.8591 1.70735Z",
                fill: "currentColor",
              }),
            }),
          d = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M2.8914 10.4028L2.98327 10.6318C3.22909 11.2445 3.5 12.1045 3.5 13C3.5 13.3588 3.4564 13.7131 3.38773 14.0495C3.69637 13.9446 4.01409 13.8159 4.32918 13.6584C4.87888 13.3835 5.33961 13.0611 5.70994 12.7521L6.22471 12.3226L6.88809 12.4196C7.24851 12.4724 7.61994 12.5 8 12.5C11.7843 12.5 14.5 9.85569 14.5 7C14.5 4.14431 11.7843 1.5 8 1.5C4.21574 1.5 1.5 4.14431 1.5 7C1.5 8.18175 1.94229 9.29322 2.73103 10.2153L2.8914 10.4028ZM2.8135 15.7653C1.76096 16 1 16 1 16C1 16 1.43322 15.3097 1.72937 14.4367C1.88317 13.9834 2 13.4808 2 13C2 12.3826 1.80733 11.7292 1.59114 11.1903C0.591845 10.0221 0 8.57152 0 7C0 3.13401 3.58172 0 8 0C12.4183 0 16 3.13401 16 7C16 10.866 12.4183 14 8 14C7.54721 14 7.10321 13.9671 6.67094 13.9038C6.22579 14.2753 5.66881 14.6656 5 15C4.23366 15.3832 3.46733 15.6195 2.8135 15.7653Z",
                fill: "currentColor",
              }),
            }),
          h = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M12.4697 13.5303L13 14.0607L14.0607 13L13.5303 12.4697L9.06065 7.99999L13.5303 3.53032L14.0607 2.99999L13 1.93933L12.4697 2.46966L7.99999 6.93933L3.53032 2.46966L2.99999 1.93933L1.93933 2.99999L2.46966 3.53032L6.93933 7.99999L2.46966 12.4697L1.93933 13L2.99999 14.0607L3.53032 13.5303L7.99999 9.06065L12.4697 13.5303Z",
                fill: "currentColor",
              }),
            }),
          p = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M6.245 2.5H14.5V12.5C14.5 13.0523 14.0523 13.5 13.5 13.5H6.245V2.5ZM4.995 2.5H1.5V12.5C1.5 13.0523 1.94772 13.5 2.5 13.5H4.995V2.5ZM0 1H1.5H14.5H16V2.5V12.5C16 13.8807 14.8807 15 13.5 15H2.5C1.11929 15 0 13.8807 0 12.5V2.5V1Z",
                fill: "currentColor",
              }),
            }),
          f = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M8.75 1.75V1H7.25V1.75V6.75H2.25H1.5V8.25H2.25H7.25V13.25V14H8.75V13.25V8.25H13.75H14.5V6.75H13.75H8.75V1.75Z",
                fill: "currentColor",
              }),
            }),
          m = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M2.75 0.5C1.7835 0.5 1 1.2835 1 2.25V9.75C1 10.7165 1.7835 11.5 2.75 11.5H3.75H4.5V10H3.75H2.75C2.61193 10 2.5 9.88807 2.5 9.75V2.25C2.5 2.11193 2.61193 2 2.75 2H8.25C8.38807 2 8.5 2.11193 8.5 2.25V3H10V2.25C10 1.2835 9.2165 0.5 8.25 0.5H2.75ZM7.75 4.5C6.7835 4.5 6 5.2835 6 6.25V13.75C6 14.7165 6.7835 15.5 7.75 15.5H13.25C14.2165 15.5 15 14.7165 15 13.75V6.25C15 5.2835 14.2165 4.5 13.25 4.5H7.75ZM7.5 6.25C7.5 6.11193 7.61193 6 7.75 6H13.25C13.3881 6 13.5 6.11193 13.5 6.25V13.75C13.5 13.8881 13.3881 14 13.25 14H7.75C7.61193 14 7.5 13.8881 7.5 13.75V6.25Z",
                fill: "currentColor",
              }),
            }),
          g = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M6.89531 2.23972C6.72984 2.12153 6.5 2.23981 6.5 2.44315V5.25001C6.5 6.21651 5.7165 7.00001 4.75 7.00001H2.5V13.5H12.1884C12.762 13.5 13.262 13.1096 13.4011 12.5532L14.4011 8.55318C14.5984 7.76425 14.0017 7.00001 13.1884 7.00001H9.25H8.5V6.25001V3.51458C8.5 3.43384 8.46101 3.35807 8.39531 3.31114L6.89531 2.23972ZM5 2.44315C5 1.01975 6.6089 0.191779 7.76717 1.01912L9.26717 2.09054C9.72706 2.41904 10 2.94941 10 3.51458V5.50001H13.1884C14.9775 5.50001 16.2903 7.18133 15.8563 8.91698L14.8563 12.917C14.5503 14.1412 13.4503 15 12.1884 15H1.75H1V14.25V6.25001V5.50001H1.75H4.75C4.88807 5.50001 5 5.38808 5 5.25001V2.44315Z",
                fill: "currentColor",
              }),
            }),
          y = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M6.89531 13.7603C6.72984 13.8785 6.5 13.7602 6.5 13.5569V10.75C6.5 9.7835 5.7165 9 4.75 9H2.5V2.5H12.1884C12.762 2.5 13.262 2.89037 13.4011 3.44683L14.4011 7.44683C14.5984 8.23576 14.0017 9 13.1884 9H9.25H8.5V9.75V12.4854C8.5 12.5662 8.46101 12.6419 8.39531 12.6889L6.89531 13.7603ZM5 13.5569C5 14.9803 6.6089 15.8082 7.76717 14.9809L9.26717 13.9095C9.72706 13.581 10 13.0506 10 12.4854V10.5H13.1884C14.9775 10.5 16.2903 8.81868 15.8563 7.08303L14.8563 3.08303C14.5503 1.85882 13.4503 1 12.1884 1H1.75H1V1.75V9.75V10.5H1.75H4.75C4.88807 10.5 5 10.6119 5 10.75V13.5569Z",
                fill: "currentColor",
              }),
            }),
          v = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M12.0607 6.74999L11.5303 7.28032L8.7071 10.1035C8.31657 10.4941 7.68341 10.4941 7.29288 10.1035L4.46966 7.28032L3.93933 6.74999L4.99999 5.68933L5.53032 6.21966L7.99999 8.68933L10.4697 6.21966L11 5.68933L12.0607 6.74999Z",
                fill: "currentColor",
              }),
            }),
          b = ({ size: e = 16 }) =>
            (0, r.jsxs)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: [
                (0, r.jsx)("path", {
                  d: "M2.5 0.5V0H3.5V0.5C3.5 1.60457 4.39543 2.5 5.5 2.5H6V3V3.5H5.5C4.39543 3.5 3.5 4.39543 3.5 5.5V6H3H2.5V5.5C2.5 4.39543 1.60457 3.5 0.5 3.5H0V3V2.5H0.5C1.60457 2.5 2.5 1.60457 2.5 0.5Z",
                  fill: "currentColor",
                }),
                (0, r.jsx)("path", {
                  d: "M14.5 4.5V5H13.5V4.5C13.5 3.94772 13.0523 3.5 12.5 3.5H12V3V2.5H12.5C13.0523 2.5 13.5 2.05228 13.5 1.5V1H14H14.5V1.5C14.5 2.05228 14.9477 2.5 15.5 2.5H16V3V3.5H15.5C14.9477 3.5 14.5 3.94772 14.5 4.5Z",
                  fill: "currentColor",
                }),
                (0, r.jsx)("path", {
                  d: "M8.40706 4.92939L8.5 4H9.5L9.59294 4.92939C9.82973 7.29734 11.7027 9.17027 14.0706 9.40706L15 9.5V10.5L14.0706 10.5929C11.7027 10.8297 9.82973 12.7027 9.59294 15.0706L9.5 16H8.5L8.40706 15.0706C8.17027 12.7027 6.29734 10.8297 3.92939 10.5929L3 10.5V9.5L3.92939 9.40706C6.29734 9.17027 8.17027 7.29734 8.40706 4.92939Z",
                  fill: "currentColor",
                }),
              ],
            }),
          x = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8ZM11.5303 6.53033L12.0607 6L11 4.93934L10.4697 5.46967L6.5 9.43934L5.53033 8.46967L5 7.93934L3.93934 9L4.46967 9.53033L5.96967 11.0303C6.26256 11.3232 6.73744 11.3232 7.03033 11.0303L11.5303 6.53033Z",
                fill: "currentColor",
              }),
            }),
          k = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M10.268 14.0934C11.9051 13.4838 13.2303 12.2333 13.9384 10.6469C13.1192 10.7941 12.2138 10.9111 11.2469 10.9925C11.0336 12.2005 10.695 13.2621 10.268 14.0934ZM8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM8.48347 14.4823C8.32384 14.494 8.16262 14.5 8 14.5C7.83738 14.5 7.67616 14.494 7.51654 14.4823C7.5132 14.4791 7.50984 14.4759 7.50647 14.4726C7.2415 14.2165 6.94578 13.7854 6.67032 13.1558C6.41594 12.5744 6.19979 11.8714 6.04101 11.0778C6.67605 11.1088 7.33104 11.125 8 11.125C8.66896 11.125 9.32395 11.1088 9.95899 11.0778C9.80021 11.8714 9.58406 12.5744 9.32968 13.1558C9.05422 13.7854 8.7585 14.2165 8.49353 14.4726C8.49016 14.4759 8.4868 14.4791 8.48347 14.4823ZM11.4187 9.72246C12.5137 9.62096 13.5116 9.47245 14.3724 9.28806C14.4561 8.87172 14.5 8.44099 14.5 8C14.5 7.55901 14.4561 7.12828 14.3724 6.71194C13.5116 6.52755 12.5137 6.37904 11.4187 6.27753C11.4719 6.83232 11.5 7.40867 11.5 8C11.5 8.59133 11.4719 9.16768 11.4187 9.72246ZM10.1525 6.18401C10.2157 6.75982 10.25 7.36805 10.25 8C10.25 8.63195 10.2157 9.24018 10.1525 9.81598C9.46123 9.85455 8.7409 9.875 8 9.875C7.25909 9.875 6.53877 9.85455 5.84749 9.81598C5.7843 9.24018 5.75 8.63195 5.75 8C5.75 7.36805 5.7843 6.75982 5.84749 6.18401C6.53877 6.14545 7.25909 6.125 8 6.125C8.74091 6.125 9.46123 6.14545 10.1525 6.18401ZM11.2469 5.00748C12.2138 5.08891 13.1191 5.20593 13.9384 5.35306C13.2303 3.7667 11.9051 2.51622 10.268 1.90662C10.695 2.73788 11.0336 3.79953 11.2469 5.00748ZM8.48347 1.51771C8.4868 1.52089 8.49016 1.52411 8.49353 1.52737C8.7585 1.78353 9.05422 2.21456 9.32968 2.84417C9.58406 3.42562 9.80021 4.12856 9.95899 4.92219C9.32395 4.89118 8.66896 4.875 8 4.875C7.33104 4.875 6.67605 4.89118 6.04101 4.92219C6.19978 4.12856 6.41594 3.42562 6.67032 2.84417C6.94578 2.21456 7.2415 1.78353 7.50647 1.52737C7.50984 1.52411 7.51319 1.52089 7.51653 1.51771C7.67615 1.50597 7.83738 1.5 8 1.5C8.16262 1.5 8.32384 1.50597 8.48347 1.51771ZM5.73202 1.90663C4.0949 2.51622 2.76975 3.7667 2.06159 5.35306C2.88085 5.20593 3.78617 5.08891 4.75309 5.00748C4.96639 3.79953 5.30497 2.73788 5.73202 1.90663ZM4.58133 6.27753C3.48633 6.37904 2.48837 6.52755 1.62761 6.71194C1.54392 7.12828 1.5 7.55901 1.5 8C1.5 8.44099 1.54392 8.87172 1.62761 9.28806C2.48837 9.47245 3.48633 9.62096 4.58133 9.72246C4.52807 9.16768 4.5 8.59133 4.5 8C4.5 7.40867 4.52807 6.83232 4.58133 6.27753ZM4.75309 10.9925C3.78617 10.9111 2.88085 10.7941 2.06159 10.6469C2.76975 12.2333 4.0949 13.4838 5.73202 14.0934C5.30497 13.2621 4.96639 12.2005 4.75309 10.9925Z",
                fill: "currentColor",
              }),
            }),
          w = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M10 4.5V6H6V4.5C6 3.39543 6.89543 2.5 8 2.5C9.10457 2.5 10 3.39543 10 4.5ZM4.5 6V4.5C4.5 2.567 6.067 1 8 1C9.933 1 11.5 2.567 11.5 4.5V6H12.5H14V7.5V12.5C14 13.8807 12.8807 15 11.5 15H4.5C3.11929 15 2 13.8807 2 12.5V7.5V6H3.5H4.5ZM11.5 7.5H10H6H4.5H3.5V12.5C3.5 13.0523 3.94772 13.5 4.5 13.5H11.5C12.0523 13.5 12.5 13.0523 12.5 12.5V7.5H11.5Z",
                fill: "currentColor",
              }),
            }),
          _ = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M14.5 2.5H1.5V9.18933L2.96966 7.71967L3.18933 7.5H3.49999H6.63001H6.93933L6.96966 7.46967L10.4697 3.96967L11.5303 3.96967L14.5 6.93934V2.5ZM8.00066 8.55999L9.53034 10.0897L10.0607 10.62L9.00001 11.6807L8.46968 11.1503L6.31935 9H3.81065L1.53032 11.2803L1.5 11.3106V12.5C1.5 13.0523 1.94772 13.5 2.5 13.5H13.5C14.0523 13.5 14.5 13.0523 14.5 12.5V9.06066L11 5.56066L8.03032 8.53033L8.00066 8.55999ZM4.05312e-06 10.8107V12.5C4.05312e-06 13.8807 1.11929 15 2.5 15H13.5C14.8807 15 16 13.8807 16 12.5V9.56066L16.5607 9L16.0303 8.46967L16 8.43934V2.5V1H14.5H1.5H4.05312e-06V2.5V10.6893L-0.0606689 10.75L4.05312e-06 10.8107Z",
                fill: "currentColor",
              }),
            }),
          O = ({ size: e = 16 }) =>
            (0, r.jsx)("svg", {
              height: e,
              strokeLinejoin: "round",
              viewBox: "0 0 16 16",
              width: e,
              style: { color: "currentcolor" },
              children: (0, r.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M1 5.25V6H2.5V5.25V2.5H5.25H6V1H5.25H2C1.44772 1 1 1.44772 1 2V5.25ZM5.25 14.9994H6V13.4994H5.25H2.5V10.7494V9.99939H1V10.7494V13.9994C1 14.5517 1.44772 14.9994 2 14.9994H5.25ZM15 10V10.75V14C15 14.5523 14.5523 15 14 15H10.75H10V13.5H10.75H13.5V10.75V10H15ZM10.75 1H10V2.5H10.75H13.5V5.25V6H15V5.25V2C15 1.44772 14.5523 1 14 1H10.75Z",
                fill: "currentColor",
              }),
            });
      },
      12595: (e, t, n) => {
        "use strict";
        n(77598);
        let r = Array.from({ length: 64 }, (e, t) => t),
          i = (e) => Array(e).fill(-1);
        [
          ...i(46),
          ...r.slice(54, 64),
          ...i(7),
          ...r.slice(2, 28),
          ...i(6),
          ...r.slice(28, 54),
          ...i(5),
        ],
          "function" == typeof setImmediate ||
            ("object" == typeof process &&
              "function" == typeof process.nextTick &&
              process.nextTick);
      },
      13004: (e) => {
        e.exports = {
          nanoid: (e = 21) => {
            let t = "",
              n = 0 | e;
            for (; n--; )
              t +=
                "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[
                  (64 * Math.random()) | 0
                ];
            return t;
          },
          customAlphabet:
            (e, t = 21) =>
            (n = t) => {
              let r = "",
                i = 0 | n;
              for (; i--; ) r += e[(Math.random() * e.length) | 0];
              return r;
            },
        };
      },
      13504: (e, t, n) => {
        "use strict";
        n.d(t, { u: () => o });
        var r = n(92858),
          i = n(18720),
          s = n(43758);
        class o extends s.pe {
          static [r.i] = "PgDateColumnBaseBuilder";
          defaultNow() {
            return this.default((0, i.ll)`now()`);
          }
        }
      },
      13604: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          !(function (e, t) {
            for (var n in t)
              Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
          })(t, {
            HeadersAdapter: function () {
              return s;
            },
            ReadonlyHeadersError: function () {
              return i;
            },
          });
        let r = n(9581);
        class i extends Error {
          constructor() {
            super(
              "Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers",
            );
          }
          static callable() {
            throw new i();
          }
        }
        class s extends Headers {
          constructor(e) {
            super(),
              (this.headers = new Proxy(e, {
                get(t, n, i) {
                  if ("symbol" == typeof n)
                    return r.ReflectAdapter.get(t, n, i);
                  let s = n.toLowerCase(),
                    o = Object.keys(e).find((e) => e.toLowerCase() === s);
                  if (void 0 !== o) return r.ReflectAdapter.get(t, o, i);
                },
                set(t, n, i, s) {
                  if ("symbol" == typeof n)
                    return r.ReflectAdapter.set(t, n, i, s);
                  let o = n.toLowerCase(),
                    a = Object.keys(e).find((e) => e.toLowerCase() === o);
                  return r.ReflectAdapter.set(t, a ?? n, i, s);
                },
                has(t, n) {
                  if ("symbol" == typeof n) return r.ReflectAdapter.has(t, n);
                  let i = n.toLowerCase(),
                    s = Object.keys(e).find((e) => e.toLowerCase() === i);
                  return void 0 !== s && r.ReflectAdapter.has(t, s);
                },
                deleteProperty(t, n) {
                  if ("symbol" == typeof n)
                    return r.ReflectAdapter.deleteProperty(t, n);
                  let i = n.toLowerCase(),
                    s = Object.keys(e).find((e) => e.toLowerCase() === i);
                  return void 0 === s || r.ReflectAdapter.deleteProperty(t, s);
                },
              }));
          }
          static seal(e) {
            return new Proxy(e, {
              get(e, t, n) {
                switch (t) {
                  case "append":
                  case "delete":
                  case "set":
                    return i.callable;
                  default:
                    return r.ReflectAdapter.get(e, t, n);
                }
              },
            });
          }
          merge(e) {
            return Array.isArray(e) ? e.join(", ") : e;
          }
          static from(e) {
            return e instanceof Headers ? e : new s(e);
          }
          append(e, t) {
            let n = this.headers[e];
            "string" == typeof n
              ? (this.headers[e] = [n, t])
              : Array.isArray(n)
                ? n.push(t)
                : (this.headers[e] = t);
          }
          delete(e) {
            delete this.headers[e];
          }
          get(e) {
            let t = this.headers[e];
            return void 0 !== t ? this.merge(t) : null;
          }
          has(e) {
            return void 0 !== this.headers[e];
          }
          set(e, t) {
            this.headers[e] = t;
          }
          forEach(e, t) {
            for (let [n, r] of this.entries()) e.call(t, r, n, this);
          }
          *entries() {
            for (let e of Object.keys(this.headers)) {
              let t = e.toLowerCase(),
                n = this.get(t);
              yield [t, n];
            }
          }
          *keys() {
            for (let e of Object.keys(this.headers)) {
              let t = e.toLowerCase();
              yield t;
            }
          }
          *values() {
            for (let e of Object.keys(this.headers)) {
              let t = this.get(e);
              yield t;
            }
          }
          [Symbol.iterator]() {
            return this.entries();
          }
        }
      },
      13764: (e, t, n) => {
        "use strict";
        n.r(t),
          n.d(t, {
            GlobalError: () => s.default,
            __next_app__: () => u,
            pages: () => c,
            routeModule: () => d,
            tree: () => l,
          });
        var r = n(11610),
          i = n(51293),
          s = n(59059),
          o = n(17770),
          a = {};
        for (let e in o)
          0 >
            [
              "default",
              "tree",
              "pages",
              "GlobalError",
              "__next_app__",
              "routeModule",
            ].indexOf(e) && (a[e] = () => o[e]);
        n.d(t, a);
        let l = {
            children: [
              "",
              {
                children: [
                  "(ai-unified)",
                  {
                    children: [
                      "chat",
                      {
                        children: [
                          "__PAGE__",
                          {},
                          {
                            page: [
                              () => Promise.resolve().then(n.bind(n, 42925)),
                              "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\(ai-unified)\\chat\\page.tsx",
                            ],
                          },
                        ],
                      },
                      {
                        layout: [
                          () => Promise.resolve().then(n.bind(n, 74614)),
                          "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\(ai-unified)\\chat\\layout.tsx",
                        ],
                      },
                    ],
                  },
                  {
                    layout: [
                      () => Promise.resolve().then(n.bind(n, 89663)),
                      "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\(ai-unified)\\layout.tsx",
                    ],
                    forbidden: [
                      () => Promise.resolve().then(n.t.bind(n, 57382, 23)),
                      "next/dist/client/components/forbidden-error",
                    ],
                    unauthorized: [
                      () => Promise.resolve().then(n.t.bind(n, 87039, 23)),
                      "next/dist/client/components/unauthorized-error",
                    ],
                  },
                ],
              },
              {
                layout: [
                  () => Promise.resolve().then(n.bind(n, 22630)),
                  "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\layout.tsx",
                ],
                error: [
                  () => Promise.resolve().then(n.bind(n, 94745)),
                  "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\error.tsx",
                ],
                "global-error": [
                  () => Promise.resolve().then(n.bind(n, 59059)),
                  "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\global-error.tsx",
                ],
                "not-found": [
                  () => Promise.resolve().then(n.bind(n, 53974)),
                  "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\not-found.tsx",
                ],
                forbidden: [
                  () => Promise.resolve().then(n.t.bind(n, 57382, 23)),
                  "next/dist/client/components/forbidden-error",
                ],
                unauthorized: [
                  () => Promise.resolve().then(n.t.bind(n, 87039, 23)),
                  "next/dist/client/components/unauthorized-error",
                ],
              },
            ],
          }.children,
          c = [
            "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\(ai-unified)\\chat\\page.tsx",
          ],
          u = { require: n, loadChunk: () => Promise.resolve() },
          d = new r.AppPageRouteModule({
            definition: {
              kind: i.RouteKind.APP_PAGE,
              page: "/(ai-unified)/chat/page",
              pathname: "/chat",
              bundlePath: "",
              filename: "",
              appPaths: [],
            },
            userland: { loaderTree: l },
          });
      },
      14077: (e, t, n) => {
        "use strict";
        function r(e) {
          this.content = e;
        }
        n.d(t, {
          S4: () => z,
          ZF: () => G,
          FK: () => i,
          CU: () => l,
          sX: () => j,
          bP: () => _,
          u$: () => k,
          vI: () => c,
          Sj: () => F,
          Ji: () => u,
        }),
          (r.prototype = {
            constructor: r,
            find: function (e) {
              for (var t = 0; t < this.content.length; t += 2)
                if (this.content[t] === e) return t;
              return -1;
            },
            get: function (e) {
              var t = this.find(e);
              return -1 == t ? void 0 : this.content[t + 1];
            },
            update: function (e, t, n) {
              var i = n && n != e ? this.remove(n) : this,
                s = i.find(e),
                o = i.content.slice();
              return (
                -1 == s ? o.push(n || e, t) : ((o[s + 1] = t), n && (o[s] = n)),
                new r(o)
              );
            },
            remove: function (e) {
              var t = this.find(e);
              if (-1 == t) return this;
              var n = this.content.slice();
              return n.splice(t, 2), new r(n);
            },
            addToStart: function (e, t) {
              return new r([e, t].concat(this.remove(e).content));
            },
            addToEnd: function (e, t) {
              var n = this.remove(e).content.slice();
              return n.push(e, t), new r(n);
            },
            addBefore: function (e, t, n) {
              var i = this.remove(t),
                s = i.content.slice(),
                o = i.find(e);
              return s.splice(-1 == o ? s.length : o, 0, t, n), new r(s);
            },
            forEach: function (e) {
              for (var t = 0; t < this.content.length; t += 2)
                e(this.content[t], this.content[t + 1]);
            },
            prepend: function (e) {
              return (e = r.from(e)).size
                ? new r(e.content.concat(this.subtract(e).content))
                : this;
            },
            append: function (e) {
              return (e = r.from(e)).size
                ? new r(this.subtract(e).content.concat(e.content))
                : this;
            },
            subtract: function (e) {
              var t = this;
              e = r.from(e);
              for (var n = 0; n < e.content.length; n += 2)
                t = t.remove(e.content[n]);
              return t;
            },
            toObject: function () {
              var e = {};
              return (
                this.forEach(function (t, n) {
                  e[t] = n;
                }),
                e
              );
            },
            get size() {
              return this.content.length >> 1;
            },
          }),
          (r.from = function (e) {
            if (e instanceof r) return e;
            var t = [];
            if (e) for (var n in e) t.push(n, e[n]);
            return new r(t);
          });
        class i {
          constructor(e, t) {
            if (((this.content = e), (this.size = t || 0), null == t))
              for (let t = 0; t < e.length; t++) this.size += e[t].nodeSize;
          }
          nodesBetween(e, t, n, r = 0, i) {
            for (let s = 0, o = 0; o < t; s++) {
              let a = this.content[s],
                l = o + a.nodeSize;
              if (l > e && !1 !== n(a, r + o, i || null, s) && a.content.size) {
                let i = o + 1;
                a.nodesBetween(
                  Math.max(0, e - i),
                  Math.min(a.content.size, t - i),
                  n,
                  r + i,
                );
              }
              o = l;
            }
          }
          descendants(e) {
            this.nodesBetween(0, this.size, e);
          }
          textBetween(e, t, n, r) {
            let i = "",
              s = !0;
            return (
              this.nodesBetween(
                e,
                t,
                (o, a) => {
                  let l = o.isText
                    ? o.text.slice(Math.max(e, a) - a, t - a)
                    : o.isLeaf
                      ? r
                        ? "function" == typeof r
                          ? r(o)
                          : r
                        : o.type.spec.leafText
                          ? o.type.spec.leafText(o)
                          : ""
                      : "";
                  o.isBlock &&
                    ((o.isLeaf && l) || o.isTextblock) &&
                    n &&
                    (s ? (s = !1) : (i += n)),
                    (i += l);
                },
                0,
              ),
              i
            );
          }
          append(e) {
            if (!e.size) return this;
            if (!this.size) return e;
            let t = this.lastChild,
              n = e.firstChild,
              r = this.content.slice(),
              s = 0;
            for (
              t.isText &&
              t.sameMarkup(n) &&
              ((r[r.length - 1] = t.withText(t.text + n.text)), (s = 1));
              s < e.content.length;
              s++
            )
              r.push(e.content[s]);
            return new i(r, this.size + e.size);
          }
          cut(e, t = this.size) {
            if (0 == e && t == this.size) return this;
            let n = [],
              r = 0;
            if (t > e)
              for (let i = 0, s = 0; s < t; i++) {
                let o = this.content[i],
                  a = s + o.nodeSize;
                a > e &&
                  ((s < e || a > t) &&
                    (o = o.isText
                      ? o.cut(
                          Math.max(0, e - s),
                          Math.min(o.text.length, t - s),
                        )
                      : o.cut(
                          Math.max(0, e - s - 1),
                          Math.min(o.content.size, t - s - 1),
                        )),
                  n.push(o),
                  (r += o.nodeSize)),
                  (s = a);
              }
            return new i(n, r);
          }
          cutByIndex(e, t) {
            return e == t
              ? i.empty
              : 0 == e && t == this.content.length
                ? this
                : new i(this.content.slice(e, t));
          }
          replaceChild(e, t) {
            let n = this.content[e];
            if (n == t) return this;
            let r = this.content.slice(),
              s = this.size + t.nodeSize - n.nodeSize;
            return (r[e] = t), new i(r, s);
          }
          addToStart(e) {
            return new i([e].concat(this.content), this.size + e.nodeSize);
          }
          addToEnd(e) {
            return new i(this.content.concat(e), this.size + e.nodeSize);
          }
          eq(e) {
            if (this.content.length != e.content.length) return !1;
            for (let t = 0; t < this.content.length; t++)
              if (!this.content[t].eq(e.content[t])) return !1;
            return !0;
          }
          get firstChild() {
            return this.content.length ? this.content[0] : null;
          }
          get lastChild() {
            return this.content.length
              ? this.content[this.content.length - 1]
              : null;
          }
          get childCount() {
            return this.content.length;
          }
          child(e) {
            let t = this.content[e];
            if (!t)
              throw RangeError("Index " + e + " out of range for " + this);
            return t;
          }
          maybeChild(e) {
            return this.content[e] || null;
          }
          forEach(e) {
            for (let t = 0, n = 0; t < this.content.length; t++) {
              let r = this.content[t];
              e(r, n, t), (n += r.nodeSize);
            }
          }
          findDiffStart(e, t = 0) {
            return (function e(t, n, r) {
              for (let i = 0; ; i++) {
                if (i == t.childCount || i == n.childCount)
                  return t.childCount == n.childCount ? null : r;
                let s = t.child(i),
                  o = n.child(i);
                if (s == o) {
                  r += s.nodeSize;
                  continue;
                }
                if (!s.sameMarkup(o)) return r;
                if (s.isText && s.text != o.text) {
                  for (let e = 0; s.text[e] == o.text[e]; e++) r++;
                  return r;
                }
                if (s.content.size || o.content.size) {
                  let t = e(s.content, o.content, r + 1);
                  if (null != t) return t;
                }
                r += s.nodeSize;
              }
            })(this, e, t);
          }
          findDiffEnd(e, t = this.size, n = e.size) {
            return (function e(t, n, r, i) {
              for (let s = t.childCount, o = n.childCount; ; ) {
                if (0 == s || 0 == o) return s == o ? null : { a: r, b: i };
                let a = t.child(--s),
                  l = n.child(--o),
                  c = a.nodeSize;
                if (a == l) {
                  (r -= c), (i -= c);
                  continue;
                }
                if (!a.sameMarkup(l)) return { a: r, b: i };
                if (a.isText && a.text != l.text) {
                  let e = 0,
                    t = Math.min(a.text.length, l.text.length);
                  for (
                    ;
                    e < t &&
                    a.text[a.text.length - e - 1] ==
                      l.text[l.text.length - e - 1];

                  )
                    e++, r--, i--;
                  return { a: r, b: i };
                }
                if (a.content.size || l.content.size) {
                  let t = e(a.content, l.content, r - 1, i - 1);
                  if (t) return t;
                }
                (r -= c), (i -= c);
              }
            })(this, e, t, n);
          }
          findIndex(e, t = -1) {
            if (0 == e) return o(0, e);
            if (e == this.size) return o(this.content.length, e);
            if (e > this.size || e < 0)
              throw RangeError(`Position ${e} outside of fragment (${this})`);
            for (let n = 0, r = 0; ; n++) {
              let i = r + this.child(n).nodeSize;
              if (i >= e) {
                if (i == e || t > 0) return o(n + 1, i);
                return o(n, r);
              }
              r = i;
            }
          }
          toString() {
            return "<" + this.toStringInner() + ">";
          }
          toStringInner() {
            return this.content.join(", ");
          }
          toJSON() {
            return this.content.length
              ? this.content.map((e) => e.toJSON())
              : null;
          }
          static fromJSON(e, t) {
            if (!t) return i.empty;
            if (!Array.isArray(t))
              throw RangeError("Invalid input for Fragment.fromJSON");
            return new i(t.map(e.nodeFromJSON));
          }
          static fromArray(e) {
            if (!e.length) return i.empty;
            let t,
              n = 0;
            for (let r = 0; r < e.length; r++) {
              let i = e[r];
              (n += i.nodeSize),
                r && i.isText && e[r - 1].sameMarkup(i)
                  ? (t || (t = e.slice(0, r)),
                    (t[t.length - 1] = i.withText(
                      t[t.length - 1].text + i.text,
                    )))
                  : t && t.push(i);
            }
            return new i(t || e, n);
          }
          static from(e) {
            if (!e) return i.empty;
            if (e instanceof i) return e;
            if (Array.isArray(e)) return this.fromArray(e);
            if (e.attrs) return new i([e], e.nodeSize);
            throw RangeError(
              "Can not convert " +
                e +
                " to a Fragment" +
                (e.nodesBetween
                  ? " (looks like multiple versions of prosemirror-model were loaded)"
                  : ""),
            );
          }
        }
        i.empty = new i([], 0);
        let s = { index: 0, offset: 0 };
        function o(e, t) {
          return (s.index = e), (s.offset = t), s;
        }
        function a(e, t) {
          if (e === t) return !0;
          if (!(e && "object" == typeof e) || !(t && "object" == typeof t))
            return !1;
          let n = Array.isArray(e);
          if (Array.isArray(t) != n) return !1;
          if (n) {
            if (e.length != t.length) return !1;
            for (let n = 0; n < e.length; n++) if (!a(e[n], t[n])) return !1;
          } else {
            for (let n in e) if (!(n in t) || !a(e[n], t[n])) return !1;
            for (let n in t) if (!(n in e)) return !1;
          }
          return !0;
        }
        class l {
          constructor(e, t) {
            (this.type = e), (this.attrs = t);
          }
          addToSet(e) {
            let t,
              n = !1;
            for (let r = 0; r < e.length; r++) {
              let i = e[r];
              if (this.eq(i)) return e;
              if (this.type.excludes(i.type)) t || (t = e.slice(0, r));
              else {
                if (i.type.excludes(this.type)) return e;
                !n &&
                  i.type.rank > this.type.rank &&
                  (t || (t = e.slice(0, r)), t.push(this), (n = !0)),
                  t && t.push(i);
              }
            }
            return t || (t = e.slice()), n || t.push(this), t;
          }
          removeFromSet(e) {
            for (let t = 0; t < e.length; t++)
              if (this.eq(e[t])) return e.slice(0, t).concat(e.slice(t + 1));
            return e;
          }
          isInSet(e) {
            for (let t = 0; t < e.length; t++) if (this.eq(e[t])) return !0;
            return !1;
          }
          eq(e) {
            return this == e || (this.type == e.type && a(this.attrs, e.attrs));
          }
          toJSON() {
            let e = { type: this.type.name };
            for (let t in this.attrs) {
              e.attrs = this.attrs;
              break;
            }
            return e;
          }
          static fromJSON(e, t) {
            if (!t) throw RangeError("Invalid input for Mark.fromJSON");
            let n = e.marks[t.type];
            if (!n)
              throw RangeError(
                `There is no mark type ${t.type} in this schema`,
              );
            let r = n.create(t.attrs);
            return n.checkAttrs(r.attrs), r;
          }
          static sameSet(e, t) {
            if (e == t) return !0;
            if (e.length != t.length) return !1;
            for (let n = 0; n < e.length; n++) if (!e[n].eq(t[n])) return !1;
            return !0;
          }
          static setFrom(e) {
            if (!e || (Array.isArray(e) && 0 == e.length)) return l.none;
            if (e instanceof l) return [e];
            let t = e.slice();
            return t.sort((e, t) => e.type.rank - t.type.rank), t;
          }
        }
        l.none = [];
        class c extends Error {}
        class u {
          constructor(e, t, n) {
            (this.content = e), (this.openStart = t), (this.openEnd = n);
          }
          get size() {
            return this.content.size - this.openStart - this.openEnd;
          }
          insertAt(e, t) {
            let n = (function e(t, n, r, i) {
              let { index: s, offset: o } = t.findIndex(n),
                a = t.maybeChild(s);
              if (o == n || a.isText)
                return i && !i.canReplace(s, s, r)
                  ? null
                  : t.cut(0, n).append(r).append(t.cut(n));
              let l = e(a.content, n - o - 1, r);
              return l && t.replaceChild(s, a.copy(l));
            })(this.content, e + this.openStart, t);
            return n && new u(n, this.openStart, this.openEnd);
          }
          removeBetween(e, t) {
            return new u(
              (function e(t, n, r) {
                let { index: i, offset: s } = t.findIndex(n),
                  o = t.maybeChild(i),
                  { index: a, offset: l } = t.findIndex(r);
                if (s == n || o.isText) {
                  if (l != r && !t.child(a).isText)
                    throw RangeError("Removing non-flat range");
                  return t.cut(0, n).append(t.cut(r));
                }
                if (i != a) throw RangeError("Removing non-flat range");
                return t.replaceChild(
                  i,
                  o.copy(e(o.content, n - s - 1, r - s - 1)),
                );
              })(this.content, e + this.openStart, t + this.openStart),
              this.openStart,
              this.openEnd,
            );
          }
          eq(e) {
            return (
              this.content.eq(e.content) &&
              this.openStart == e.openStart &&
              this.openEnd == e.openEnd
            );
          }
          toString() {
            return (
              this.content + "(" + this.openStart + "," + this.openEnd + ")"
            );
          }
          toJSON() {
            if (!this.content.size) return null;
            let e = { content: this.content.toJSON() };
            return (
              this.openStart > 0 && (e.openStart = this.openStart),
              this.openEnd > 0 && (e.openEnd = this.openEnd),
              e
            );
          }
          static fromJSON(e, t) {
            if (!t) return u.empty;
            let n = t.openStart || 0,
              r = t.openEnd || 0;
            if ("number" != typeof n || "number" != typeof r)
              throw RangeError("Invalid input for Slice.fromJSON");
            return new u(i.fromJSON(e, t.content), n, r);
          }
          static maxOpen(e, t = !0) {
            let n = 0,
              r = 0;
            for (
              let r = e.firstChild;
              r && !r.isLeaf && (t || !r.type.spec.isolating);
              r = r.firstChild
            )
              n++;
            for (
              let n = e.lastChild;
              n && !n.isLeaf && (t || !n.type.spec.isolating);
              n = n.lastChild
            )
              r++;
            return new u(e, n, r);
          }
        }
        function d(e, t) {
          if (!t.type.compatibleContent(e.type))
            throw new c("Cannot join " + t.type.name + " onto " + e.type.name);
        }
        function h(e, t, n) {
          let r = e.node(n);
          return d(r, t.node(n)), r;
        }
        function p(e, t) {
          let n = t.length - 1;
          n >= 0 && e.isText && e.sameMarkup(t[n])
            ? (t[n] = e.withText(t[n].text + e.text))
            : t.push(e);
        }
        function f(e, t, n, r) {
          let i = (t || e).node(n),
            s = 0,
            o = t ? t.index(n) : i.childCount;
          e &&
            ((s = e.index(n)),
            e.depth > n ? s++ : e.textOffset && (p(e.nodeAfter, r), s++));
          for (let e = s; e < o; e++) p(i.child(e), r);
          t && t.depth == n && t.textOffset && p(t.nodeBefore, r);
        }
        function m(e, t) {
          return e.type.checkContent(t), e.copy(t);
        }
        function g(e, t, n) {
          let r = [];
          return (
            f(null, e, n, r),
            e.depth > n && p(m(h(e, t, n + 1), g(e, t, n + 1)), r),
            f(t, null, n, r),
            new i(r)
          );
        }
        u.empty = new u(i.empty, 0, 0);
        class y {
          constructor(e, t, n) {
            (this.pos = e),
              (this.path = t),
              (this.parentOffset = n),
              (this.depth = t.length / 3 - 1);
          }
          resolveDepth(e) {
            return null == e ? this.depth : e < 0 ? this.depth + e : e;
          }
          get parent() {
            return this.node(this.depth);
          }
          get doc() {
            return this.node(0);
          }
          node(e) {
            return this.path[3 * this.resolveDepth(e)];
          }
          index(e) {
            return this.path[3 * this.resolveDepth(e) + 1];
          }
          indexAfter(e) {
            return (
              (e = this.resolveDepth(e)),
              this.index(e) + (e != this.depth || this.textOffset ? 1 : 0)
            );
          }
          start(e) {
            return 0 == (e = this.resolveDepth(e))
              ? 0
              : this.path[3 * e - 1] + 1;
          }
          end(e) {
            return (
              (e = this.resolveDepth(e)),
              this.start(e) + this.node(e).content.size
            );
          }
          before(e) {
            if (!(e = this.resolveDepth(e)))
              throw RangeError(
                "There is no position before the top-level node",
              );
            return e == this.depth + 1 ? this.pos : this.path[3 * e - 1];
          }
          after(e) {
            if (!(e = this.resolveDepth(e)))
              throw RangeError("There is no position after the top-level node");
            return e == this.depth + 1
              ? this.pos
              : this.path[3 * e - 1] + this.path[3 * e].nodeSize;
          }
          get textOffset() {
            return this.pos - this.path[this.path.length - 1];
          }
          get nodeAfter() {
            let e = this.parent,
              t = this.index(this.depth);
            if (t == e.childCount) return null;
            let n = this.pos - this.path[this.path.length - 1],
              r = e.child(t);
            return n ? e.child(t).cut(n) : r;
          }
          get nodeBefore() {
            let e = this.index(this.depth),
              t = this.pos - this.path[this.path.length - 1];
            return t
              ? this.parent.child(e).cut(0, t)
              : 0 == e
                ? null
                : this.parent.child(e - 1);
          }
          posAtIndex(e, t) {
            t = this.resolveDepth(t);
            let n = this.path[3 * t],
              r = 0 == t ? 0 : this.path[3 * t - 1] + 1;
            for (let t = 0; t < e; t++) r += n.child(t).nodeSize;
            return r;
          }
          marks() {
            let e = this.parent,
              t = this.index();
            if (0 == e.content.size) return l.none;
            if (this.textOffset) return e.child(t).marks;
            let n = e.maybeChild(t - 1),
              r = e.maybeChild(t);
            if (!n) {
              let e = n;
              (n = r), (r = e);
            }
            let i = n.marks;
            for (var s = 0; s < i.length; s++)
              !1 !== i[s].type.spec.inclusive ||
                (r && i[s].isInSet(r.marks)) ||
                (i = i[s--].removeFromSet(i));
            return i;
          }
          marksAcross(e) {
            let t = this.parent.maybeChild(this.index());
            if (!t || !t.isInline) return null;
            let n = t.marks,
              r = e.parent.maybeChild(e.index());
            for (var i = 0; i < n.length; i++)
              !1 !== n[i].type.spec.inclusive ||
                (r && n[i].isInSet(r.marks)) ||
                (n = n[i--].removeFromSet(n));
            return n;
          }
          sharedDepth(e) {
            for (let t = this.depth; t > 0; t--)
              if (this.start(t) <= e && this.end(t) >= e) return t;
            return 0;
          }
          blockRange(e = this, t) {
            if (e.pos < this.pos) return e.blockRange(this);
            for (
              let n =
                this.depth -
                (this.parent.inlineContent || this.pos == e.pos ? 1 : 0);
              n >= 0;
              n--
            )
              if (e.pos <= this.end(n) && (!t || t(this.node(n))))
                return new k(this, e, n);
            return null;
          }
          sameParent(e) {
            return this.pos - this.parentOffset == e.pos - e.parentOffset;
          }
          max(e) {
            return e.pos > this.pos ? e : this;
          }
          min(e) {
            return e.pos < this.pos ? e : this;
          }
          toString() {
            let e = "";
            for (let t = 1; t <= this.depth; t++)
              e +=
                (e ? "/" : "") +
                this.node(t).type.name +
                "_" +
                this.index(t - 1);
            return e + ":" + this.parentOffset;
          }
          static resolve(e, t) {
            if (!(t >= 0 && t <= e.content.size))
              throw RangeError("Position " + t + " out of range");
            let n = [],
              r = 0,
              i = t;
            for (let t = e; ; ) {
              let { index: e, offset: s } = t.content.findIndex(i),
                o = i - s;
              if ((n.push(t, e, r + s), !o || (t = t.child(e)).isText)) break;
              (i = o - 1), (r += s + 1);
            }
            return new y(t, n, i);
          }
          static resolveCached(e, t) {
            let n = x.get(e);
            if (n)
              for (let e = 0; e < n.elts.length; e++) {
                let r = n.elts[e];
                if (r.pos == t) return r;
              }
            else x.set(e, (n = new v()));
            let r = (n.elts[n.i] = y.resolve(e, t));
            return (n.i = (n.i + 1) % b), r;
          }
        }
        class v {
          constructor() {
            (this.elts = []), (this.i = 0);
          }
        }
        let b = 12,
          x = new WeakMap();
        class k {
          constructor(e, t, n) {
            (this.$from = e), (this.$to = t), (this.depth = n);
          }
          get start() {
            return this.$from.before(this.depth + 1);
          }
          get end() {
            return this.$to.after(this.depth + 1);
          }
          get parent() {
            return this.$from.node(this.depth);
          }
          get startIndex() {
            return this.$from.index(this.depth);
          }
          get endIndex() {
            return this.$to.indexAfter(this.depth);
          }
        }
        let w = Object.create(null);
        class _ {
          constructor(e, t, n, r = l.none) {
            (this.type = e),
              (this.attrs = t),
              (this.marks = r),
              (this.content = n || i.empty);
          }
          get children() {
            return this.content.content;
          }
          get nodeSize() {
            return this.isLeaf ? 1 : 2 + this.content.size;
          }
          get childCount() {
            return this.content.childCount;
          }
          child(e) {
            return this.content.child(e);
          }
          maybeChild(e) {
            return this.content.maybeChild(e);
          }
          forEach(e) {
            this.content.forEach(e);
          }
          nodesBetween(e, t, n, r = 0) {
            this.content.nodesBetween(e, t, n, r, this);
          }
          descendants(e) {
            this.nodesBetween(0, this.content.size, e);
          }
          get textContent() {
            return this.isLeaf && this.type.spec.leafText
              ? this.type.spec.leafText(this)
              : this.textBetween(0, this.content.size, "");
          }
          textBetween(e, t, n, r) {
            return this.content.textBetween(e, t, n, r);
          }
          get firstChild() {
            return this.content.firstChild;
          }
          get lastChild() {
            return this.content.lastChild;
          }
          eq(e) {
            return (
              this == e || (this.sameMarkup(e) && this.content.eq(e.content))
            );
          }
          sameMarkup(e) {
            return this.hasMarkup(e.type, e.attrs, e.marks);
          }
          hasMarkup(e, t, n) {
            return (
              this.type == e &&
              a(this.attrs, t || e.defaultAttrs || w) &&
              l.sameSet(this.marks, n || l.none)
            );
          }
          copy(e = null) {
            return e == this.content
              ? this
              : new _(this.type, this.attrs, e, this.marks);
          }
          mark(e) {
            return e == this.marks
              ? this
              : new _(this.type, this.attrs, this.content, e);
          }
          cut(e, t = this.content.size) {
            return 0 == e && t == this.content.size
              ? this
              : this.copy(this.content.cut(e, t));
          }
          slice(e, t = this.content.size, n = !1) {
            if (e == t) return u.empty;
            let r = this.resolve(e),
              i = this.resolve(t),
              s = n ? 0 : r.sharedDepth(t),
              o = r.start(s);
            return new u(
              r.node(s).content.cut(r.pos - o, i.pos - o),
              r.depth - s,
              i.depth - s,
            );
          }
          replace(e, t, n) {
            var r = this.resolve(e),
              s = this.resolve(t);
            if (n.openStart > r.depth)
              throw new c("Inserted content deeper than insertion position");
            if (r.depth - n.openStart != s.depth - n.openEnd)
              throw new c("Inconsistent open depths");
            return (function e(t, n, r, s) {
              let o = t.index(s),
                a = t.node(s);
              if (o == n.index(s) && s < t.depth - r.openStart) {
                let i = e(t, n, r, s + 1);
                return a.copy(a.content.replaceChild(o, i));
              }
              if (!r.content.size) return m(a, g(t, n, s));
              if (r.openStart || r.openEnd || t.depth != s || n.depth != s) {
                let { start: e, end: o } = (function (e, t) {
                  let n = t.depth - e.openStart,
                    r = t.node(n).copy(e.content);
                  for (let e = n - 1; e >= 0; e--)
                    r = t.node(e).copy(i.from(r));
                  return {
                    start: r.resolveNoCache(e.openStart + n),
                    end: r.resolveNoCache(r.content.size - e.openEnd - n),
                  };
                })(r, t);
                return m(
                  a,
                  (function e(t, n, r, s, o) {
                    let a = t.depth > o && h(t, n, o + 1),
                      l = s.depth > o && h(r, s, o + 1),
                      c = [];
                    return (
                      f(null, t, o, c),
                      a && l && n.index(o) == r.index(o)
                        ? (d(a, l), p(m(a, e(t, n, r, s, o + 1)), c))
                        : (a && p(m(a, g(t, n, o + 1)), c),
                          f(n, r, o, c),
                          l && p(m(l, g(r, s, o + 1)), c)),
                      f(s, null, o, c),
                      new i(c)
                    );
                  })(t, e, o, n, s),
                );
              }
              {
                let e = t.parent,
                  i = e.content;
                return m(
                  e,
                  i
                    .cut(0, t.parentOffset)
                    .append(r.content)
                    .append(i.cut(n.parentOffset)),
                );
              }
            })(r, s, n, 0);
          }
          nodeAt(e) {
            for (let t = this; ; ) {
              let { index: n, offset: r } = t.content.findIndex(e);
              if (!(t = t.maybeChild(n))) return null;
              if (r == e || t.isText) return t;
              e -= r + 1;
            }
          }
          childAfter(e) {
            let { index: t, offset: n } = this.content.findIndex(e);
            return { node: this.content.maybeChild(t), index: t, offset: n };
          }
          childBefore(e) {
            if (0 == e) return { node: null, index: 0, offset: 0 };
            let { index: t, offset: n } = this.content.findIndex(e);
            if (n < e)
              return { node: this.content.child(t), index: t, offset: n };
            let r = this.content.child(t - 1);
            return { node: r, index: t - 1, offset: n - r.nodeSize };
          }
          resolve(e) {
            return y.resolveCached(this, e);
          }
          resolveNoCache(e) {
            return y.resolve(this, e);
          }
          rangeHasMark(e, t, n) {
            let r = !1;
            return (
              t > e &&
                this.nodesBetween(
                  e,
                  t,
                  (e) => (n.isInSet(e.marks) && (r = !0), !r),
                ),
              r
            );
          }
          get isBlock() {
            return this.type.isBlock;
          }
          get isTextblock() {
            return this.type.isTextblock;
          }
          get inlineContent() {
            return this.type.inlineContent;
          }
          get isInline() {
            return this.type.isInline;
          }
          get isText() {
            return this.type.isText;
          }
          get isLeaf() {
            return this.type.isLeaf;
          }
          get isAtom() {
            return this.type.isAtom;
          }
          toString() {
            if (this.type.spec.toDebugString)
              return this.type.spec.toDebugString(this);
            let e = this.type.name;
            return (
              this.content.size &&
                (e += "(" + this.content.toStringInner() + ")"),
              T(this.marks, e)
            );
          }
          contentMatchAt(e) {
            let t = this.type.contentMatch.matchFragment(this.content, 0, e);
            if (!t)
              throw Error(
                "Called contentMatchAt on a node with invalid content",
              );
            return t;
          }
          canReplace(e, t, n = i.empty, r = 0, s = n.childCount) {
            let o = this.contentMatchAt(e).matchFragment(n, r, s),
              a = o && o.matchFragment(this.content, t);
            if (!a || !a.validEnd) return !1;
            for (let e = r; e < s; e++)
              if (!this.type.allowsMarks(n.child(e).marks)) return !1;
            return !0;
          }
          canReplaceWith(e, t, n, r) {
            if (r && !this.type.allowsMarks(r)) return !1;
            let i = this.contentMatchAt(e).matchType(n),
              s = i && i.matchFragment(this.content, t);
            return !!s && s.validEnd;
          }
          canAppend(e) {
            return e.content.size
              ? this.canReplace(this.childCount, this.childCount, e.content)
              : this.type.compatibleContent(e.type);
          }
          check() {
            this.type.checkContent(this.content),
              this.type.checkAttrs(this.attrs);
            let e = l.none;
            for (let t = 0; t < this.marks.length; t++) {
              let n = this.marks[t];
              n.type.checkAttrs(n.attrs), (e = n.addToSet(e));
            }
            if (!l.sameSet(e, this.marks))
              throw RangeError(
                `Invalid collection of marks for node ${this.type.name}: ${this.marks.map((e) => e.type.name)}`,
              );
            this.content.forEach((e) => e.check());
          }
          toJSON() {
            let e = { type: this.type.name };
            for (let t in this.attrs) {
              e.attrs = this.attrs;
              break;
            }
            return (
              this.content.size && (e.content = this.content.toJSON()),
              this.marks.length &&
                (e.marks = this.marks.map((e) => e.toJSON())),
              e
            );
          }
          static fromJSON(e, t) {
            let n;
            if (!t) throw RangeError("Invalid input for Node.fromJSON");
            if (t.marks) {
              if (!Array.isArray(t.marks))
                throw RangeError("Invalid mark data for Node.fromJSON");
              n = t.marks.map(e.markFromJSON);
            }
            if ("text" == t.type) {
              if ("string" != typeof t.text)
                throw RangeError("Invalid text node in JSON");
              return e.text(t.text, n);
            }
            let r = i.fromJSON(e, t.content),
              s = e.nodeType(t.type).create(t.attrs, r, n);
            return s.type.checkAttrs(s.attrs), s;
          }
        }
        _.prototype.text = void 0;
        class O extends _ {
          constructor(e, t, n, r) {
            if ((super(e, t, null, r), !n))
              throw RangeError("Empty text nodes are not allowed");
            this.text = n;
          }
          toString() {
            return this.type.spec.toDebugString
              ? this.type.spec.toDebugString(this)
              : T(this.marks, JSON.stringify(this.text));
          }
          get textContent() {
            return this.text;
          }
          textBetween(e, t) {
            return this.text.slice(e, t);
          }
          get nodeSize() {
            return this.text.length;
          }
          mark(e) {
            return e == this.marks
              ? this
              : new O(this.type, this.attrs, this.text, e);
          }
          withText(e) {
            return e == this.text
              ? this
              : new O(this.type, this.attrs, e, this.marks);
          }
          cut(e = 0, t = this.text.length) {
            return 0 == e && t == this.text.length
              ? this
              : this.withText(this.text.slice(e, t));
          }
          eq(e) {
            return this.sameMarkup(e) && this.text == e.text;
          }
          toJSON() {
            let e = super.toJSON();
            return (e.text = this.text), e;
          }
        }
        function T(e, t) {
          for (let n = e.length - 1; n >= 0; n--)
            t = e[n].type.name + "(" + t + ")";
          return t;
        }
        class S {
          constructor(e) {
            (this.validEnd = e), (this.next = []), (this.wrapCache = []);
          }
          static parse(e, t) {
            var n;
            let r,
              i = new E(e, t);
            if (null == i.next) return S.empty;
            let s = (function e(t) {
              let n = [];
              do
                n.push(
                  (function (t) {
                    let n = [];
                    do
                      n.push(
                        (function (t) {
                          let n = (function (t) {
                            if (t.eat("(")) {
                              let n = e(t);
                              return (
                                t.eat(")") || t.err("Missing closing paren"), n
                              );
                            }
                            if (/\W/.test(t.next))
                              t.err("Unexpected token '" + t.next + "'");
                            else {
                              let e = (function (e, t) {
                                let n = e.nodeTypes,
                                  r = n[t];
                                if (r) return [r];
                                let i = [];
                                for (let e in n) {
                                  let r = n[e];
                                  r.isInGroup(t) && i.push(r);
                                }
                                return (
                                  0 == i.length &&
                                    e.err(
                                      "No node type or group '" + t + "' found",
                                    ),
                                  i
                                );
                              })(t, t.next).map(
                                (e) => (
                                  null == t.inline
                                    ? (t.inline = e.isInline)
                                    : t.inline != e.isInline &&
                                      t.err("Mixing inline and block content"),
                                  { type: "name", value: e }
                                ),
                              );
                              return (
                                t.pos++,
                                1 == e.length
                                  ? e[0]
                                  : { type: "choice", exprs: e }
                              );
                            }
                          })(t);
                          for (;;)
                            if (t.eat("+")) n = { type: "plus", expr: n };
                            else if (t.eat("*")) n = { type: "star", expr: n };
                            else if (t.eat("?")) n = { type: "opt", expr: n };
                            else if (t.eat("{"))
                              n = (function (e, t) {
                                let n = C(e),
                                  r = n;
                                return (
                                  e.eat(",") && (r = "}" != e.next ? C(e) : -1),
                                  e.eat("}") || e.err("Unclosed braced range"),
                                  { type: "range", min: n, max: r, expr: t }
                                );
                              })(t, n);
                            else break;
                          return n;
                        })(t),
                      );
                    while (t.next && ")" != t.next && "|" != t.next);
                    return 1 == n.length ? n[0] : { type: "seq", exprs: n };
                  })(t),
                );
              while (t.eat("|"));
              return 1 == n.length ? n[0] : { type: "choice", exprs: n };
            })(i);
            i.next && i.err("Unexpected trailing text");
            let o =
              ((n = (function (e) {
                let t = [[]];
                return (
                  i(
                    (function e(t, s) {
                      if ("choice" == t.type)
                        return t.exprs.reduce((t, n) => t.concat(e(n, s)), []);
                      if ("seq" == t.type)
                        for (let r = 0; ; r++) {
                          let o = e(t.exprs[r], s);
                          if (r == t.exprs.length - 1) return o;
                          i(o, (s = n()));
                        }
                      else if ("star" == t.type) {
                        let o = n();
                        return r(s, o), i(e(t.expr, o), o), [r(o)];
                      } else if ("plus" == t.type) {
                        let o = n();
                        return i(e(t.expr, s), o), i(e(t.expr, o), o), [r(o)];
                      } else if ("opt" == t.type)
                        return [r(s)].concat(e(t.expr, s));
                      else if ("range" == t.type) {
                        let o = s;
                        for (let r = 0; r < t.min; r++) {
                          let r = n();
                          i(e(t.expr, o), r), (o = r);
                        }
                        if (-1 == t.max) i(e(t.expr, o), o);
                        else
                          for (let s = t.min; s < t.max; s++) {
                            let s = n();
                            r(o, s), i(e(t.expr, o), s), (o = s);
                          }
                        return [r(o)];
                      } else if ("name" == t.type)
                        return [r(s, void 0, t.value)];
                      else throw Error("Unknown expr type");
                    })(e, 0),
                    n(),
                  ),
                  t
                );
                function n() {
                  return t.push([]) - 1;
                }
                function r(e, n, r) {
                  let i = { term: r, to: n };
                  return t[e].push(i), i;
                }
                function i(e, t) {
                  e.forEach((e) => (e.to = t));
                }
              })(s)),
              (r = Object.create(null)),
              (function e(t) {
                let i = [];
                t.forEach((e) => {
                  n[e].forEach(({ term: e, to: t }) => {
                    let r;
                    if (e) {
                      for (let t = 0; t < i.length; t++)
                        i[t][0] == e && (r = i[t][1]);
                      N(n, t).forEach((t) => {
                        r || i.push([e, (r = [])]),
                          -1 == r.indexOf(t) && r.push(t);
                      });
                    }
                  });
                });
                let s = (r[t.join(",")] = new S(t.indexOf(n.length - 1) > -1));
                for (let t = 0; t < i.length; t++) {
                  let n = i[t][1].sort(A);
                  s.next.push({ type: i[t][0], next: r[n.join(",")] || e(n) });
                }
                return s;
              })(N(n, 0)));
            return (
              (function (e, t) {
                for (let n = 0, r = [e]; n < r.length; n++) {
                  let e = r[n],
                    i = !e.validEnd,
                    s = [];
                  for (let t = 0; t < e.next.length; t++) {
                    let { type: n, next: o } = e.next[t];
                    s.push(n.name),
                      i && !(n.isText || n.hasRequiredAttrs()) && (i = !1),
                      -1 == r.indexOf(o) && r.push(o);
                  }
                  i &&
                    t.err(
                      "Only non-generatable nodes (" +
                        s.join(", ") +
                        ") in a required position (see https://prosemirror.net/docs/guide/#generatable)",
                    );
                }
              })(o, i),
              o
            );
          }
          matchType(e) {
            for (let t = 0; t < this.next.length; t++)
              if (this.next[t].type == e) return this.next[t].next;
            return null;
          }
          matchFragment(e, t = 0, n = e.childCount) {
            let r = this;
            for (let i = t; r && i < n; i++) r = r.matchType(e.child(i).type);
            return r;
          }
          get inlineContent() {
            return 0 != this.next.length && this.next[0].type.isInline;
          }
          get defaultType() {
            for (let e = 0; e < this.next.length; e++) {
              let { type: t } = this.next[e];
              if (!(t.isText || t.hasRequiredAttrs())) return t;
            }
            return null;
          }
          compatible(e) {
            for (let t = 0; t < this.next.length; t++)
              for (let n = 0; n < e.next.length; n++)
                if (this.next[t].type == e.next[n].type) return !0;
            return !1;
          }
          fillBefore(e, t = !1, n = 0) {
            let r = [this];
            return (function s(o, a) {
              let l = o.matchFragment(e, n);
              if (l && (!t || l.validEnd))
                return i.from(a.map((e) => e.createAndFill()));
              for (let e = 0; e < o.next.length; e++) {
                let { type: t, next: n } = o.next[e];
                if (!(t.isText || t.hasRequiredAttrs()) && -1 == r.indexOf(n)) {
                  r.push(n);
                  let e = s(n, a.concat(t));
                  if (e) return e;
                }
              }
              return null;
            })(this, []);
          }
          findWrapping(e) {
            for (let t = 0; t < this.wrapCache.length; t += 2)
              if (this.wrapCache[t] == e) return this.wrapCache[t + 1];
            let t = this.computeWrapping(e);
            return this.wrapCache.push(e, t), t;
          }
          computeWrapping(e) {
            let t = Object.create(null),
              n = [{ match: this, type: null, via: null }];
            for (; n.length; ) {
              let r = n.shift(),
                i = r.match;
              if (i.matchType(e)) {
                let e = [];
                for (let t = r; t.type; t = t.via) e.push(t.type);
                return e.reverse();
              }
              for (let e = 0; e < i.next.length; e++) {
                let { type: s, next: o } = i.next[e];
                s.isLeaf ||
                  s.hasRequiredAttrs() ||
                  s.name in t ||
                  (r.type && !o.validEnd) ||
                  (n.push({ match: s.contentMatch, type: s, via: r }),
                  (t[s.name] = !0));
              }
            }
            return null;
          }
          get edgeCount() {
            return this.next.length;
          }
          edge(e) {
            if (e >= this.next.length)
              throw RangeError(`There's no ${e}th edge in this content match`);
            return this.next[e];
          }
          toString() {
            let e = [];
            return (
              !(function t(n) {
                e.push(n);
                for (let r = 0; r < n.next.length; r++)
                  -1 == e.indexOf(n.next[r].next) && t(n.next[r].next);
              })(this),
              e
                .map((t, n) => {
                  let r = n + (t.validEnd ? "*" : " ") + " ";
                  for (let n = 0; n < t.next.length; n++)
                    r +=
                      (n ? ", " : "") +
                      t.next[n].type.name +
                      "->" +
                      e.indexOf(t.next[n].next);
                  return r;
                })
                .join("\n")
            );
          }
        }
        S.empty = new S(!0);
        class E {
          constructor(e, t) {
            (this.string = e),
              (this.nodeTypes = t),
              (this.inline = null),
              (this.pos = 0),
              (this.tokens = e.split(/\s*(?=\b|\W|$)/)),
              "" == this.tokens[this.tokens.length - 1] && this.tokens.pop(),
              "" == this.tokens[0] && this.tokens.shift();
          }
          get next() {
            return this.tokens[this.pos];
          }
          eat(e) {
            return this.next == e && (this.pos++ || !0);
          }
          err(e) {
            throw SyntaxError(
              e + " (in content expression '" + this.string + "')",
            );
          }
        }
        function C(e) {
          /\D/.test(e.next) && e.err("Expected number, got '" + e.next + "'");
          let t = Number(e.next);
          return e.pos++, t;
        }
        function A(e, t) {
          return t - e;
        }
        function N(e, t) {
          let n = [];
          return (
            (function t(r) {
              let i = e[r];
              if (1 == i.length && !i[0].term) return t(i[0].to);
              n.push(r);
              for (let e = 0; e < i.length; e++) {
                let { term: r, to: s } = i[e];
                r || -1 != n.indexOf(s) || t(s);
              }
            })(t),
            n.sort(A)
          );
        }
        function I(e) {
          let t = Object.create(null);
          for (let n in e) {
            let r = e[n];
            if (!r.hasDefault) return null;
            t[n] = r.default;
          }
          return t;
        }
        function D(e, t) {
          let n = Object.create(null);
          for (let r in e) {
            let i = t && t[r];
            if (void 0 === i) {
              let t = e[r];
              if (t.hasDefault) i = t.default;
              else throw RangeError("No value supplied for attribute " + r);
            }
            n[r] = i;
          }
          return n;
        }
        function P(e, t, n, r) {
          for (let r in t)
            if (!(r in e))
              throw RangeError(
                `Unsupported attribute ${r} for ${n} of type ${r}`,
              );
          for (let n in e) {
            let r = e[n];
            r.validate && r.validate(t[n]);
          }
        }
        function R(e, t) {
          let n = Object.create(null);
          if (t) for (let r in t) n[r] = new L(e, r, t[r]);
          return n;
        }
        class M {
          constructor(e, t, n) {
            (this.name = e),
              (this.schema = t),
              (this.spec = n),
              (this.markSet = null),
              (this.groups = n.group ? n.group.split(" ") : []),
              (this.attrs = R(e, n.attrs)),
              (this.defaultAttrs = I(this.attrs)),
              (this.contentMatch = null),
              (this.inlineContent = null),
              (this.isBlock = !(n.inline || "text" == e)),
              (this.isText = "text" == e);
          }
          get isInline() {
            return !this.isBlock;
          }
          get isTextblock() {
            return this.isBlock && this.inlineContent;
          }
          get isLeaf() {
            return this.contentMatch == S.empty;
          }
          get isAtom() {
            return this.isLeaf || !!this.spec.atom;
          }
          isInGroup(e) {
            return this.groups.indexOf(e) > -1;
          }
          get whitespace() {
            return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
          }
          hasRequiredAttrs() {
            for (let e in this.attrs) if (this.attrs[e].isRequired) return !0;
            return !1;
          }
          compatibleContent(e) {
            return this == e || this.contentMatch.compatible(e.contentMatch);
          }
          computeAttrs(e) {
            return !e && this.defaultAttrs
              ? this.defaultAttrs
              : D(this.attrs, e);
          }
          create(e = null, t, n) {
            if (this.isText)
              throw Error("NodeType.create can't construct text nodes");
            return new _(this, this.computeAttrs(e), i.from(t), l.setFrom(n));
          }
          createChecked(e = null, t, n) {
            return (
              (t = i.from(t)),
              this.checkContent(t),
              new _(this, this.computeAttrs(e), t, l.setFrom(n))
            );
          }
          createAndFill(e = null, t, n) {
            if (((e = this.computeAttrs(e)), (t = i.from(t)).size)) {
              let e = this.contentMatch.fillBefore(t);
              if (!e) return null;
              t = e.append(t);
            }
            let r = this.contentMatch.matchFragment(t),
              s = r && r.fillBefore(i.empty, !0);
            return s ? new _(this, e, t.append(s), l.setFrom(n)) : null;
          }
          validContent(e) {
            let t = this.contentMatch.matchFragment(e);
            if (!t || !t.validEnd) return !1;
            for (let t = 0; t < e.childCount; t++)
              if (!this.allowsMarks(e.child(t).marks)) return !1;
            return !0;
          }
          checkContent(e) {
            if (!this.validContent(e))
              throw RangeError(
                `Invalid content for node ${this.name}: ${e.toString().slice(0, 50)}`,
              );
          }
          checkAttrs(e) {
            P(this.attrs, e, "node", this.name);
          }
          allowsMarkType(e) {
            return null == this.markSet || this.markSet.indexOf(e) > -1;
          }
          allowsMarks(e) {
            if (null == this.markSet) return !0;
            for (let t = 0; t < e.length; t++)
              if (!this.allowsMarkType(e[t].type)) return !1;
            return !0;
          }
          allowedMarks(e) {
            let t;
            if (null == this.markSet) return e;
            for (let n = 0; n < e.length; n++)
              this.allowsMarkType(e[n].type)
                ? t && t.push(e[n])
                : t || (t = e.slice(0, n));
            return t ? (t.length ? t : l.none) : e;
          }
          static compile(e, t) {
            let n = Object.create(null);
            e.forEach((e, r) => (n[e] = new M(e, t, r)));
            let r = t.spec.topNode || "doc";
            if (!n[r])
              throw RangeError(
                "Schema is missing its top node type ('" + r + "')",
              );
            if (!n.text) throw RangeError("Every schema needs a 'text' type");
            for (let e in n.text.attrs)
              throw RangeError("The text node type should not have attributes");
            return n;
          }
        }
        class L {
          constructor(e, t, n) {
            (this.hasDefault = Object.prototype.hasOwnProperty.call(
              n,
              "default",
            )),
              (this.default = n.default),
              (this.validate =
                "string" == typeof n.validate
                  ? (function (e, t, n) {
                      let r = n.split("|");
                      return (n) => {
                        let i = null === n ? "null" : typeof n;
                        if (0 > r.indexOf(i))
                          throw RangeError(
                            `Expected value of type ${r} for attribute ${t} on type ${e}, got ${i}`,
                          );
                      };
                    })(e, t, n.validate)
                  : n.validate);
          }
          get isRequired() {
            return !this.hasDefault;
          }
        }
        class j {
          constructor(e, t, n, r) {
            (this.name = e),
              (this.rank = t),
              (this.schema = n),
              (this.spec = r),
              (this.attrs = R(e, r.attrs)),
              (this.excluded = null);
            let i = I(this.attrs);
            this.instance = i ? new l(this, i) : null;
          }
          create(e = null) {
            return !e && this.instance
              ? this.instance
              : new l(this, D(this.attrs, e));
          }
          static compile(e, t) {
            let n = Object.create(null),
              r = 0;
            return e.forEach((e, i) => (n[e] = new j(e, r++, t, i))), n;
          }
          removeFromSet(e) {
            for (var t = 0; t < e.length; t++)
              e[t].type == this &&
                ((e = e.slice(0, t).concat(e.slice(t + 1))), t--);
            return e;
          }
          isInSet(e) {
            for (let t = 0; t < e.length; t++)
              if (e[t].type == this) return e[t];
          }
          checkAttrs(e) {
            P(this.attrs, e, "mark", this.name);
          }
          excludes(e) {
            return this.excluded.indexOf(e) > -1;
          }
        }
        class F {
          constructor(e) {
            (this.linebreakReplacement = null),
              (this.cached = Object.create(null));
            let t = (this.spec = {});
            for (let n in e) t[n] = e[n];
            (t.nodes = r.from(e.nodes)),
              (t.marks = r.from(e.marks || {})),
              (this.nodes = M.compile(this.spec.nodes, this)),
              (this.marks = j.compile(this.spec.marks, this));
            let n = Object.create(null);
            for (let e in this.nodes) {
              if (e in this.marks)
                throw RangeError(e + " can not be both a node and a mark");
              let t = this.nodes[e],
                r = t.spec.content || "",
                i = t.spec.marks;
              if (
                ((t.contentMatch = n[r] || (n[r] = S.parse(r, this.nodes))),
                (t.inlineContent = t.contentMatch.inlineContent),
                t.spec.linebreakReplacement)
              ) {
                if (this.linebreakReplacement)
                  throw RangeError("Multiple linebreak nodes defined");
                if (!t.isInline || !t.isLeaf)
                  throw RangeError(
                    "Linebreak replacement nodes must be inline leaf nodes",
                  );
                this.linebreakReplacement = t;
              }
              t.markSet =
                "_" == i
                  ? null
                  : i
                    ? B(this, i.split(" "))
                    : "" != i && t.inlineContent
                      ? null
                      : [];
            }
            for (let e in this.marks) {
              let t = this.marks[e],
                n = t.spec.excludes;
              t.excluded =
                null == n ? [t] : "" == n ? [] : B(this, n.split(" "));
            }
            (this.nodeFromJSON = this.nodeFromJSON.bind(this)),
              (this.markFromJSON = this.markFromJSON.bind(this)),
              (this.topNodeType = this.nodes[this.spec.topNode || "doc"]),
              (this.cached.wrappings = Object.create(null));
          }
          node(e, t = null, n, r) {
            if ("string" == typeof e) e = this.nodeType(e);
            else if (e instanceof M) {
              if (e.schema != this)
                throw RangeError(
                  "Node type from different schema used (" + e.name + ")",
                );
            } else throw RangeError("Invalid node type: " + e);
            return e.createChecked(t, n, r);
          }
          text(e, t) {
            let n = this.nodes.text;
            return new O(n, n.defaultAttrs, e, l.setFrom(t));
          }
          mark(e, t) {
            return "string" == typeof e && (e = this.marks[e]), e.create(t);
          }
          nodeFromJSON(e) {
            return _.fromJSON(this, e);
          }
          markFromJSON(e) {
            return l.fromJSON(this, e);
          }
          nodeType(e) {
            let t = this.nodes[e];
            if (!t) throw RangeError("Unknown node type: " + e);
            return t;
          }
        }
        function B(e, t) {
          let n = [];
          for (let r = 0; r < t.length; r++) {
            let i = t[r],
              s = e.marks[i],
              o = s;
            if (s) n.push(s);
            else
              for (let t in e.marks) {
                let r = e.marks[t];
                ("_" == i ||
                  (r.spec.group && r.spec.group.split(" ").indexOf(i) > -1)) &&
                  n.push((o = r));
              }
            if (!o) throw SyntaxError("Unknown mark type: '" + t[r] + "'");
          }
          return n;
        }
        class z {
          constructor(e, t) {
            (this.schema = e),
              (this.rules = t),
              (this.tags = []),
              (this.styles = []);
            let n = (this.matchedStyles = []);
            t.forEach((e) => {
              if (null != e.tag) this.tags.push(e);
              else if (null != e.style) {
                let t = /[^=]*/.exec(e.style)[0];
                0 > n.indexOf(t) && n.push(t), this.styles.push(e);
              }
            }),
              (this.normalizeLists = !this.tags.some((t) => {
                if (!/^(ul|ol)\b/.test(t.tag) || !t.node) return !1;
                let n = e.nodes[t.node];
                return n.contentMatch.matchType(n);
              }));
          }
          parse(e, t = {}) {
            let n = new V(this, t, !1);
            return n.addAll(e, l.none, t.from, t.to), n.finish();
          }
          parseSlice(e, t = {}) {
            let n = new V(this, t, !0);
            return n.addAll(e, l.none, t.from, t.to), u.maxOpen(n.finish());
          }
          matchTag(e, t, n) {
            for (
              let s = n ? this.tags.indexOf(n) + 1 : 0;
              s < this.tags.length;
              s++
            ) {
              var r, i;
              let n = this.tags[s];
              if (
                ((r = e),
                (i = n.tag),
                (
                  r.matches ||
                  r.msMatchesSelector ||
                  r.webkitMatchesSelector ||
                  r.mozMatchesSelector
                ).call(r, i) &&
                  (void 0 === n.namespace || e.namespaceURI == n.namespace) &&
                  (!n.context || t.matchesContext(n.context)))
              ) {
                if (n.getAttrs) {
                  let t = n.getAttrs(e);
                  if (!1 === t) continue;
                  n.attrs = t || void 0;
                }
                return n;
              }
            }
          }
          matchStyle(e, t, n, r) {
            for (
              let i = r ? this.styles.indexOf(r) + 1 : 0;
              i < this.styles.length;
              i++
            ) {
              let r = this.styles[i],
                s = r.style;
              if (
                0 == s.indexOf(e) &&
                (!r.context || n.matchesContext(r.context)) &&
                (!(s.length > e.length) ||
                  (61 == s.charCodeAt(e.length) && s.slice(e.length + 1) == t))
              ) {
                if (r.getAttrs) {
                  let e = r.getAttrs(t);
                  if (!1 === e) continue;
                  r.attrs = e || void 0;
                }
                return r;
              }
            }
          }
          static schemaRules(e) {
            let t = [];
            function n(e) {
              let n = null == e.priority ? 50 : e.priority,
                r = 0;
              for (; r < t.length; r++) {
                let e = t[r];
                if ((null == e.priority ? 50 : e.priority) < n) break;
              }
              t.splice(r, 0, e);
            }
            for (let t in e.marks) {
              let r = e.marks[t].spec.parseDOM;
              r &&
                r.forEach((e) => {
                  n((e = W(e))),
                    e.mark || e.ignore || e.clearMark || (e.mark = t);
                });
            }
            for (let t in e.nodes) {
              let r = e.nodes[t].spec.parseDOM;
              r &&
                r.forEach((e) => {
                  n((e = W(e))), e.node || e.ignore || e.mark || (e.node = t);
                });
            }
            return t;
          }
          static fromSchema(e) {
            return (
              e.cached.domParser ||
              (e.cached.domParser = new z(e, z.schemaRules(e)))
            );
          }
        }
        let $ = {
            address: !0,
            article: !0,
            aside: !0,
            blockquote: !0,
            canvas: !0,
            dd: !0,
            div: !0,
            dl: !0,
            fieldset: !0,
            figcaption: !0,
            figure: !0,
            footer: !0,
            form: !0,
            h1: !0,
            h2: !0,
            h3: !0,
            h4: !0,
            h5: !0,
            h6: !0,
            header: !0,
            hgroup: !0,
            hr: !0,
            li: !0,
            noscript: !0,
            ol: !0,
            output: !0,
            p: !0,
            pre: !0,
            section: !0,
            table: !0,
            tfoot: !0,
            ul: !0,
          },
          q = {
            head: !0,
            noscript: !0,
            object: !0,
            script: !0,
            style: !0,
            title: !0,
          },
          U = { ol: !0, ul: !0 };
        function H(e, t, n) {
          return null != t
            ? +!!t | (2 * ("full" === t))
            : e && "pre" == e.whitespace
              ? 3
              : -5 & n;
        }
        class Q {
          constructor(e, t, n, r, i, s) {
            (this.type = e),
              (this.attrs = t),
              (this.marks = n),
              (this.solid = r),
              (this.options = s),
              (this.content = []),
              (this.activeMarks = l.none),
              (this.match = i || (4 & s ? null : e.contentMatch));
          }
          findWrapping(e) {
            if (!this.match) {
              if (!this.type) return [];
              let t = this.type.contentMatch.fillBefore(i.from(e));
              if (t) this.match = this.type.contentMatch.matchFragment(t);
              else {
                let t = this.type.contentMatch,
                  n;
                return (n = t.findWrapping(e.type))
                  ? ((this.match = t), n)
                  : null;
              }
            }
            return this.match.findWrapping(e.type);
          }
          finish(e) {
            if (!(1 & this.options)) {
              let e = this.content[this.content.length - 1],
                t;
              e &&
                e.isText &&
                (t = /[ \t\r\n\u000c]+$/.exec(e.text)) &&
                (e.text.length == t[0].length
                  ? this.content.pop()
                  : (this.content[this.content.length - 1] = e.withText(
                      e.text.slice(0, e.text.length - t[0].length),
                    )));
            }
            let t = i.from(this.content);
            return (
              !e &&
                this.match &&
                (t = t.append(this.match.fillBefore(i.empty, !0))),
              this.type ? this.type.create(this.attrs, t, this.marks) : t
            );
          }
          inlineContext(e) {
            return this.type
              ? this.type.inlineContent
              : this.content.length
                ? this.content[0].isInline
                : e.parentNode &&
                  !$.hasOwnProperty(e.parentNode.nodeName.toLowerCase());
          }
        }
        class V {
          constructor(e, t, n) {
            (this.parser = e),
              (this.options = t),
              (this.isOpen = n),
              (this.open = 0),
              (this.localPreserveWS = !1);
            let r = t.topNode,
              i,
              s = H(null, t.preserveWhitespace, 0) | (4 * !!n);
            (i = r
              ? new Q(
                  r.type,
                  r.attrs,
                  l.none,
                  !0,
                  t.topMatch || r.type.contentMatch,
                  s,
                )
              : n
                ? new Q(null, null, l.none, !0, null, s)
                : new Q(e.schema.topNodeType, null, l.none, !0, null, s)),
              (this.nodes = [i]),
              (this.find = t.findPositions),
              (this.needsBlock = !1);
          }
          get top() {
            return this.nodes[this.open];
          }
          addDOM(e, t) {
            3 == e.nodeType
              ? this.addTextNode(e, t)
              : 1 == e.nodeType && this.addElement(e, t);
          }
          addTextNode(e, t) {
            let n = e.nodeValue,
              r = this.top,
              i =
                2 & r.options
                  ? "full"
                  : this.localPreserveWS || (1 & r.options) > 0;
            if (
              "full" === i ||
              r.inlineContext(e) ||
              /[^ \t\r\n\u000c]/.test(n)
            ) {
              if (i)
                n =
                  "full" !== i
                    ? n.replace(/\r?\n|\r/g, " ")
                    : n.replace(/\r\n?/g, "\n");
              else if (
                ((n = n.replace(/[ \t\r\n\u000c]+/g, " ")),
                /^[ \t\r\n\u000c]/.test(n) &&
                  this.open == this.nodes.length - 1)
              ) {
                let t = r.content[r.content.length - 1],
                  i = e.previousSibling;
                (!t ||
                  (i && "BR" == i.nodeName) ||
                  (t.isText && /[ \t\r\n\u000c]$/.test(t.text))) &&
                  (n = n.slice(1));
              }
              n &&
                this.insertNode(this.parser.schema.text(n), t, !/\S/.test(n)),
                this.findInText(e);
            } else this.findInside(e);
          }
          addElement(e, t, n) {
            let r = this.localPreserveWS,
              i = this.top;
            ("PRE" == e.tagName || /pre/.test(e.style && e.style.whiteSpace)) &&
              (this.localPreserveWS = !0);
            let s = e.nodeName.toLowerCase(),
              o;
            U.hasOwnProperty(s) &&
              this.parser.normalizeLists &&
              (function (e) {
                for (let t = e.firstChild, n = null; t; t = t.nextSibling) {
                  let e = 1 == t.nodeType ? t.nodeName.toLowerCase() : null;
                  e && U.hasOwnProperty(e) && n
                    ? (n.appendChild(t), (t = n))
                    : "li" == e
                      ? (n = t)
                      : e && (n = null);
                }
              })(e);
            let a =
              (this.options.ruleFromNode && this.options.ruleFromNode(e)) ||
              (o = this.parser.matchTag(e, this, n));
            e: if (a ? a.ignore : q.hasOwnProperty(s))
              this.findInside(e), this.ignoreFallback(e, t);
            else if (!a || a.skip || a.closeParent) {
              a && a.closeParent
                ? (this.open = Math.max(0, this.open - 1))
                : a && a.skip.nodeType && (e = a.skip);
              let n,
                r = this.needsBlock;
              if ($.hasOwnProperty(s))
                i.content.length &&
                  i.content[0].isInline &&
                  this.open &&
                  (this.open--, (i = this.top)),
                  (n = !0),
                  i.type || (this.needsBlock = !0);
              else if (!e.firstChild) {
                this.leafFallback(e, t);
                break e;
              }
              let o = a && a.skip ? t : this.readStyles(e, t);
              o && this.addAll(e, o), n && this.sync(i), (this.needsBlock = r);
            } else {
              let n = this.readStyles(e, t);
              n &&
                this.addElementByRule(e, a, n, !1 === a.consuming ? o : void 0);
            }
            this.localPreserveWS = r;
          }
          leafFallback(e, t) {
            "BR" == e.nodeName &&
              this.top.type &&
              this.top.type.inlineContent &&
              this.addTextNode(e.ownerDocument.createTextNode("\n"), t);
          }
          ignoreFallback(e, t) {
            "BR" != e.nodeName ||
              (this.top.type && this.top.type.inlineContent) ||
              this.findPlace(this.parser.schema.text("-"), t, !0);
          }
          readStyles(e, t) {
            let n = e.style;
            if (n && n.length)
              for (let e = 0; e < this.parser.matchedStyles.length; e++) {
                let r = this.parser.matchedStyles[e],
                  i = n.getPropertyValue(r);
                if (i)
                  for (let e; ; ) {
                    let n = this.parser.matchStyle(r, i, this, e);
                    if (!n) break;
                    if (n.ignore) return null;
                    if (
                      ((t = n.clearMark
                        ? t.filter((e) => !n.clearMark(e))
                        : t.concat(
                            this.parser.schema.marks[n.mark].create(n.attrs),
                          )),
                      !1 === n.consuming)
                    )
                      e = n;
                    else break;
                  }
              }
            return t;
          }
          addElementByRule(e, t, n, r) {
            let i, s;
            if (t.node)
              if ((s = this.parser.schema.nodes[t.node]).isLeaf)
                this.insertNode(s.create(t.attrs), n, "BR" == e.nodeName) ||
                  this.leafFallback(e, n);
              else {
                let e = this.enter(s, t.attrs || null, n, t.preserveWhitespace);
                e && ((i = !0), (n = e));
              }
            else {
              let e = this.parser.schema.marks[t.mark];
              n = n.concat(e.create(t.attrs));
            }
            let o = this.top;
            if (s && s.isLeaf) this.findInside(e);
            else if (r) this.addElement(e, n, r);
            else if (t.getContent)
              this.findInside(e),
                t
                  .getContent(e, this.parser.schema)
                  .forEach((e) => this.insertNode(e, n, !1));
            else {
              let r = e;
              "string" == typeof t.contentElement
                ? (r = e.querySelector(t.contentElement))
                : "function" == typeof t.contentElement
                  ? (r = t.contentElement(e))
                  : t.contentElement && (r = t.contentElement),
                this.findAround(e, r, !0),
                this.addAll(r, n),
                this.findAround(e, r, !1);
            }
            i && this.sync(o) && this.open--;
          }
          addAll(e, t, n, r) {
            let i = n || 0;
            for (
              let s = n ? e.childNodes[n] : e.firstChild,
                o = null == r ? null : e.childNodes[r];
              s != o;
              s = s.nextSibling, ++i
            )
              this.findAtPoint(e, i), this.addDOM(s, t);
            this.findAtPoint(e, i);
          }
          findPlace(e, t, n) {
            let r, i;
            for (let t = this.open, s = 0; t >= 0; t--) {
              let o = this.nodes[t],
                a = o.findWrapping(e);
              if (
                a &&
                (!r || r.length > a.length + s) &&
                ((r = a), (i = o), !a.length)
              )
                break;
              if (o.solid) {
                if (n) break;
                s += 2;
              }
            }
            if (!r) return null;
            this.sync(i);
            for (let e = 0; e < r.length; e++)
              t = this.enterInner(r[e], null, t, !1);
            return t;
          }
          insertNode(e, t, n) {
            if (e.isInline && this.needsBlock && !this.top.type) {
              let e = this.textblockFromContext();
              e && (t = this.enterInner(e, null, t));
            }
            let r = this.findPlace(e, t, n);
            if (r) {
              this.closeExtra();
              let t = this.top;
              t.match && (t.match = t.match.matchType(e.type));
              let n = l.none;
              for (let i of r.concat(e.marks))
                (t.type ? t.type.allowsMarkType(i.type) : Z(i.type, e.type)) &&
                  (n = i.addToSet(n));
              return t.content.push(e.mark(n)), !0;
            }
            return !1;
          }
          enter(e, t, n, r) {
            let i = this.findPlace(e.create(t), n, !1);
            return i && (i = this.enterInner(e, t, n, !0, r)), i;
          }
          enterInner(e, t, n, r = !1, i) {
            this.closeExtra();
            let s = this.top;
            s.match = s.match && s.match.matchType(e);
            let o = H(e, i, s.options);
            4 & s.options && 0 == s.content.length && (o |= 4);
            let a = l.none;
            return (
              (n = n.filter(
                (t) =>
                  (s.type ? !s.type.allowsMarkType(t.type) : !Z(t.type, e)) ||
                  ((a = t.addToSet(a)), !1),
              )),
              this.nodes.push(new Q(e, t, a, r, null, o)),
              this.open++,
              n
            );
          }
          closeExtra(e = !1) {
            let t = this.nodes.length - 1;
            if (t > this.open) {
              for (; t > this.open; t--)
                this.nodes[t - 1].content.push(this.nodes[t].finish(e));
              this.nodes.length = this.open + 1;
            }
          }
          finish() {
            return (
              (this.open = 0),
              this.closeExtra(this.isOpen),
              this.nodes[0].finish(!!(this.isOpen || this.options.topOpen))
            );
          }
          sync(e) {
            for (let t = this.open; t >= 0; t--)
              if (this.nodes[t] == e) return (this.open = t), !0;
              else this.localPreserveWS && (this.nodes[t].options |= 1);
            return !1;
          }
          get currentPos() {
            this.closeExtra();
            let e = 0;
            for (let t = this.open; t >= 0; t--) {
              let n = this.nodes[t].content;
              for (let t = n.length - 1; t >= 0; t--) e += n[t].nodeSize;
              t && e++;
            }
            return e;
          }
          findAtPoint(e, t) {
            if (this.find)
              for (let n = 0; n < this.find.length; n++)
                this.find[n].node == e &&
                  this.find[n].offset == t &&
                  (this.find[n].pos = this.currentPos);
          }
          findInside(e) {
            if (this.find)
              for (let t = 0; t < this.find.length; t++)
                null == this.find[t].pos &&
                  1 == e.nodeType &&
                  e.contains(this.find[t].node) &&
                  (this.find[t].pos = this.currentPos);
          }
          findAround(e, t, n) {
            if (e != t && this.find)
              for (let r = 0; r < this.find.length; r++)
                null == this.find[r].pos &&
                  1 == e.nodeType &&
                  e.contains(this.find[r].node) &&
                  t.compareDocumentPosition(this.find[r].node) & (n ? 2 : 4) &&
                  (this.find[r].pos = this.currentPos);
          }
          findInText(e) {
            if (this.find)
              for (let t = 0; t < this.find.length; t++)
                this.find[t].node == e &&
                  (this.find[t].pos =
                    this.currentPos -
                    (e.nodeValue.length - this.find[t].offset));
          }
          matchesContext(e) {
            if (e.indexOf("|") > -1)
              return e.split(/\s*\|\s*/).some(this.matchesContext, this);
            let t = e.split("/"),
              n = this.options.context,
              r = !this.isOpen && (!n || n.parent.type == this.nodes[0].type),
              i = -(n ? n.depth + 1 : 0) + +!r,
              s = (e, o) => {
                for (; e >= 0; e--) {
                  let a = t[e];
                  if ("" == a) {
                    if (e == t.length - 1 || 0 == e) continue;
                    for (; o >= i; o--) if (s(e - 1, o)) return !0;
                    return !1;
                  }
                  {
                    let e =
                      o > 0 || (0 == o && r)
                        ? this.nodes[o].type
                        : n && o >= i
                          ? n.node(o - i).type
                          : null;
                    if (!e || (e.name != a && !e.isInGroup(a))) return !1;
                    o--;
                  }
                }
                return !0;
              };
            return s(t.length - 1, this.open);
          }
          textblockFromContext() {
            let e = this.options.context;
            if (e)
              for (let t = e.depth; t >= 0; t--) {
                let n = e.node(t).contentMatchAt(e.indexAfter(t)).defaultType;
                if (n && n.isTextblock && n.defaultAttrs) return n;
              }
            for (let e in this.parser.schema.nodes) {
              let t = this.parser.schema.nodes[e];
              if (t.isTextblock && t.defaultAttrs) return t;
            }
          }
        }
        function W(e) {
          let t = {};
          for (let n in e) t[n] = e[n];
          return t;
        }
        function Z(e, t) {
          let n = t.schema.nodes;
          for (let r in n) {
            let i = n[r];
            if (!i.allowsMarkType(e)) continue;
            let s = [],
              o = (e) => {
                s.push(e);
                for (let n = 0; n < e.edgeCount; n++) {
                  let { type: r, next: i } = e.edge(n);
                  if (r == t || (0 > s.indexOf(i) && o(i))) return !0;
                }
              };
            if (o(i.contentMatch)) return !0;
          }
        }
        class G {
          constructor(e, t) {
            (this.nodes = e), (this.marks = t);
          }
          serializeFragment(e, t = {}, n) {
            n || (n = K(t).createDocumentFragment());
            let r = n,
              i = [];
            return (
              e.forEach((e) => {
                if (i.length || e.marks.length) {
                  let n = 0,
                    s = 0;
                  for (; n < i.length && s < e.marks.length; ) {
                    let t = e.marks[s];
                    if (!this.marks[t.type.name]) {
                      s++;
                      continue;
                    }
                    if (!t.eq(i[n][0]) || !1 === t.type.spec.spanning) break;
                    n++, s++;
                  }
                  for (; n < i.length; ) r = i.pop()[1];
                  for (; s < e.marks.length; ) {
                    let n = e.marks[s++],
                      o = this.serializeMark(n, e.isInline, t);
                    o &&
                      (i.push([n, r]),
                      r.appendChild(o.dom),
                      (r = o.contentDOM || o.dom));
                  }
                }
                r.appendChild(this.serializeNodeInner(e, t));
              }),
              n
            );
          }
          serializeNodeInner(e, t) {
            let { dom: n, contentDOM: r } = J(
              K(t),
              this.nodes[e.type.name](e),
              null,
              e.attrs,
            );
            if (r) {
              if (e.isLeaf)
                throw RangeError(
                  "Content hole not allowed in a leaf node spec",
                );
              this.serializeFragment(e.content, t, r);
            }
            return n;
          }
          serializeNode(e, t = {}) {
            let n = this.serializeNodeInner(e, t);
            for (let r = e.marks.length - 1; r >= 0; r--) {
              let i = this.serializeMark(e.marks[r], e.isInline, t);
              i && ((i.contentDOM || i.dom).appendChild(n), (n = i.dom));
            }
            return n;
          }
          serializeMark(e, t, n = {}) {
            let r = this.marks[e.type.name];
            return r && J(K(n), r(e, t), null, e.attrs);
          }
          static renderSpec(e, t, n = null, r) {
            return J(e, t, n, r);
          }
          static fromSchema(e) {
            return (
              e.cached.domSerializer ||
              (e.cached.domSerializer = new G(
                this.nodesFromSchema(e),
                this.marksFromSchema(e),
              ))
            );
          }
          static nodesFromSchema(e) {
            let t = Y(e.nodes);
            return t.text || (t.text = (e) => e.text), t;
          }
          static marksFromSchema(e) {
            return Y(e.marks);
          }
        }
        function Y(e) {
          let t = {};
          for (let n in e) {
            let r = e[n].spec.toDOM;
            r && (t[n] = r);
          }
          return t;
        }
        function K(e) {
          return e.document || window.document;
        }
        let X = new WeakMap();
        function J(e, t, n, r) {
          let i, s, o;
          if ("string" == typeof t) return { dom: e.createTextNode(t) };
          if (null != t.nodeType) return { dom: t };
          if (t.dom && null != t.dom.nodeType) return t;
          let a = t[0],
            l;
          if ("string" != typeof a)
            throw RangeError("Invalid array passed to renderSpec");
          if (
            r &&
            (void 0 === (s = X.get(r)) &&
              X.set(
                r,
                ((o = null),
                !(function e(t) {
                  if (t && "object" == typeof t)
                    if (Array.isArray(t))
                      if ("string" == typeof t[0]) o || (o = []), o.push(t);
                      else for (let n = 0; n < t.length; n++) e(t[n]);
                    else for (let n in t) e(t[n]);
                })(r),
                (s = o)),
              ),
            (l = s)) &&
            l.indexOf(t) > -1
          )
            throw RangeError(
              "Using an array from an attribute object as a DOM spec. This may be an attempted cross site scripting attack.",
            );
          let c = a.indexOf(" ");
          c > 0 && ((n = a.slice(0, c)), (a = a.slice(c + 1)));
          let u = n ? e.createElementNS(n, a) : e.createElement(a),
            d = t[1],
            h = 1;
          if (
            d &&
            "object" == typeof d &&
            null == d.nodeType &&
            !Array.isArray(d)
          ) {
            for (let e in ((h = 2), d))
              if (null != d[e]) {
                let t = e.indexOf(" ");
                t > 0
                  ? u.setAttributeNS(e.slice(0, t), e.slice(t + 1), d[e])
                  : u.setAttribute(e, d[e]);
              }
          }
          for (let s = h; s < t.length; s++) {
            let o = t[s];
            if (0 === o) {
              if (s < t.length - 1 || s > h)
                throw RangeError(
                  "Content hole must be the only child of its parent node",
                );
              return { dom: u, contentDOM: u };
            }
            {
              let { dom: t, contentDOM: s } = J(e, o, n, r);
              if ((u.appendChild(t), s)) {
                if (i) throw RangeError("Multiple content holes");
                i = s;
              }
            }
          }
          return { dom: u, contentDOM: i };
        }
      },
      14230: (e, t, n) => {
        "use strict";
        n.d(t, {
          Fr: () => p,
          JJ: () => m,
          P8: () => c,
          dv: () => l,
          gO: () => u,
          sM: () => o,
          tG: () => f,
        });
        var r = n(34088),
          i = n(64680);
        class s {
          constructor(e, t, n = {}) {
            var r;
            (this.match = e),
              (this.match = e),
              (this.handler =
                "string" == typeof t
                  ? ((r = t),
                    function (e, t, n, i) {
                      let s = r;
                      if (t[1]) {
                        let e = t[0].lastIndexOf(t[1]);
                        s += t[0].slice(e + t[1].length);
                        let r = (n += e) - i;
                        r > 0 && ((s = t[0].slice(e - r, e) + s), (n = i));
                      }
                      return e.tr.insertText(s, n, i);
                    })
                  : t),
              (this.undoable = !1 !== n.undoable),
              (this.inCode = n.inCode || !1),
              (this.inCodeMark = !1 !== n.inCodeMark);
          }
        }
        function o({ rules: e }) {
          let t = new r.k_({
            state: {
              init: () => null,
              apply(e, t) {
                let n = e.getMeta(this);
                return n || (e.selectionSet || e.docChanged ? null : t);
              },
            },
            props: {
              handleTextInput: (n, r, i, s) => a(n, r, i, s, e, t),
              handleDOMEvents: {
                compositionend: (n) => {
                  setTimeout(() => {
                    let { $cursor: r } = n.state.selection;
                    r && a(n, r.pos, r.pos, "", e, t);
                  });
                },
              },
            },
            isInputRules: !0,
          });
          return t;
        }
        function a(e, t, n, r, i, s) {
          if (e.composing) return !1;
          let o = e.state,
            a = o.doc.resolve(t),
            l =
              a.parent.textBetween(
                Math.max(0, a.parentOffset - 500),
                a.parentOffset,
                null,
                "￼",
              ) + r;
          for (let c = 0; c < i.length; c++) {
            let u = i[c];
            if (!u.inCodeMark && a.marks().some((e) => e.type.spec.code))
              continue;
            if (a.parent.type.spec.code) {
              if (!u.inCode) continue;
            } else if ("only" === u.inCode) continue;
            let d = u.match.exec(l),
              h =
                d &&
                d[0].length >= r.length &&
                u.handler(o, d, t - (d[0].length - r.length), n);
            if (h)
              return (
                u.undoable &&
                  h.setMeta(s, { transform: h, from: t, to: n, text: r }),
                e.dispatch(h),
                !0
              );
          }
          return !1;
        }
        let l = (e, t) => {
            let n = e.plugins;
            for (let r = 0; r < n.length; r++) {
              let i = n[r],
                s;
              if (i.spec.isInputRules && (s = i.getState(e))) {
                if (t) {
                  let n = e.tr,
                    r = s.transform;
                  for (let e = r.steps.length - 1; e >= 0; e--)
                    n.step(r.steps[e].invert(r.docs[e]));
                  if (s.text) {
                    let t = n.doc.resolve(s.from).marks();
                    n.replaceWith(s.from, s.to, e.schema.text(s.text, t));
                  } else n.delete(s.from, s.to);
                  t(n);
                }
                return !0;
              }
            }
            return !1;
          },
          c = new s(/--$/, "—", { inCodeMark: !1 }),
          u = new s(/\.\.\.$/, "…", { inCodeMark: !1 }),
          d = new s(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/, "“", {
            inCodeMark: !1,
          }),
          h = new s(/"$/, "”", { inCodeMark: !1 }),
          p = [
            d,
            h,
            new s(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/, "‘", {
              inCodeMark: !1,
            }),
            new s(/'$/, "’", { inCodeMark: !1 }),
          ];
        function f(e, t, n = null, r) {
          return new s(e, (e, s, o, a) => {
            let l = n instanceof Function ? n(s) : n,
              c = e.tr.delete(o, a),
              u = c.doc.resolve(o).blockRange(),
              d = u && (0, i.oM)(u, t, l);
            if (!d) return null;
            c.wrap(u, d);
            let h = c.doc.resolve(o - 1).nodeBefore;
            return (
              h &&
                h.type == t &&
                (0, i.n9)(c.doc, o - 1) &&
                (!r || r(s, h)) &&
                c.join(o - 1),
              c
            );
          });
        }
        function m(e, t, n = null) {
          return new s(e, (e, r, i, s) => {
            let o = e.doc.resolve(i),
              a = n instanceof Function ? n(r) : n;
            return o.node(-1).canReplaceWith(o.index(-1), o.indexAfter(-1), t)
              ? e.tr.delete(i, s).setBlockType(i, i, t, a)
              : null;
          });
        }
      },
      14256: (e, t, n) => {
        "use strict";
        n.d(t, {
          m2: () => o,
          Z9: () => C,
          n_: () => A,
          HD: () => O,
          Ds: () => w,
          sl: () => k,
          cV: () => _,
          zt: () => T,
          $C: () => l,
          v0: () => f,
          WL: () => u,
          xI: () => m,
          S: () => v,
          GU: () => y,
          hd: () => x,
          ae: () => N,
        });
        var r = n(68098);
        let i =
          (e, t = 21) =>
          (n = t) => {
            let r = "",
              i = 0 | n;
            for (; i--; ) r += e[(Math.random() * e.length) | 0];
            return r;
          };
        var s = n(54220);
        function o(...e) {
          return e.reduce((e, t) => ({ ...e, ...(null != t ? t : {}) }), {});
        }
        function a(e) {
          let t = {};
          return (
            e.headers.forEach((e, n) => {
              t[n] = e;
            }),
            t
          );
        }
        var l = (({
          prefix: e,
          size: t = 16,
          alphabet:
            n = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
          separator: s = "-",
        } = {}) => {
          let o = i(n, t);
          if (null == e) return o;
          if (n.includes(s))
            throw new r.Di({
              argument: "separator",
              message: `The separator "${s}" must not be part of the alphabet "${n}".`,
            });
          return (t) => `${e}${s}${o(t)}`;
        })();
        function c(e) {
          return (
            e instanceof Error &&
            ("AbortError" === e.name || "TimeoutError" === e.name)
          );
        }
        function u({
          apiKey: e,
          environmentVariableName: t,
          apiKeyParameterName: n = "apiKey",
          description: i,
        }) {
          if ("string" == typeof e) return e;
          if (null != e)
            throw new r.Kq({ message: `${i} API key must be a string.` });
          if ("undefined" == typeof process)
            throw new r.Kq({
              message: `${i} API key is missing. Pass it using the '${n}' parameter. Environment variables is not supported in this environment.`,
            });
          if (null == (e = process.env[t]))
            throw new r.Kq({
              message: `${i} API key is missing. Pass it using the '${n}' parameter or the ${t} environment variable.`,
            });
          if ("string" != typeof e)
            throw new r.Kq({
              message: `${i} API key must be a string. The value of the ${t} environment variable is not a string.`,
            });
          return e;
        }
        var d = Symbol.for("vercel.ai.validator");
        function h({ value: e, schema: t }) {
          var n;
          let i =
            "object" == typeof t &&
            null !== t &&
            d in t &&
            !0 === t[d] &&
            "validate" in t
              ? t
              : ((n = t),
                {
                  [d]: !0,
                  validate: (e) => {
                    let t = n.safeParse(e);
                    return t.success
                      ? { success: !0, value: t.data }
                      : { success: !1, error: t.error };
                  },
                });
          try {
            if (null == i.validate) return { success: !0, value: e };
            let t = i.validate(e);
            if (t.success) return t;
            return {
              success: !1,
              error: r.iM.wrap({ value: e, cause: t.error }),
            };
          } catch (t) {
            return { success: !1, error: r.iM.wrap({ value: e, cause: t }) };
          }
        }
        function p({ text: e, schema: t }) {
          try {
            let n = s.parse(e);
            if (null == t) return { success: !0, value: n, rawValue: n };
            let r = h({ value: n, schema: t });
            return r.success ? { ...r, rawValue: n } : r;
          } catch (t) {
            return {
              success: !1,
              error: r.u6.isInstance(t) ? t : new r.u6({ text: e, cause: t }),
            };
          }
        }
        function f(e) {
          try {
            return s.parse(e), !0;
          } catch (e) {
            return !1;
          }
        }
        function m({ provider: e, providerOptions: t, schema: n }) {
          if ((null == t ? void 0 : t[e]) == null) return;
          let i = h({ value: t[e], schema: n });
          if (!i.success)
            throw new r.Di({
              argument: "providerOptions",
              message: `invalid ${e} provider options`,
              cause: i.error,
            });
          return i.value;
        }
        var g = () => globalThis.fetch,
          y = async ({
            url: e,
            headers: t,
            body: n,
            failedResponseHandler: r,
            successfulResponseHandler: i,
            abortSignal: s,
            fetch: o,
          }) =>
            b({
              url: e,
              headers: { "Content-Type": "application/json", ...t },
              body: { content: JSON.stringify(n), values: n },
              failedResponseHandler: r,
              successfulResponseHandler: i,
              abortSignal: s,
              fetch: o,
            }),
          v = async ({
            url: e,
            headers: t,
            formData: n,
            failedResponseHandler: r,
            successfulResponseHandler: i,
            abortSignal: s,
            fetch: o,
          }) =>
            b({
              url: e,
              headers: t,
              body: { content: n, values: Object.fromEntries(n.entries()) },
              failedResponseHandler: r,
              successfulResponseHandler: i,
              abortSignal: s,
              fetch: o,
            }),
          b = async ({
            url: e,
            headers: t = {},
            body: n,
            successfulResponseHandler: i,
            failedResponseHandler: s,
            abortSignal: o,
            fetch: l = g(),
          }) => {
            try {
              var u;
              let d = await l(e, {
                  method: "POST",
                  headers:
                    ((u = t),
                    Object.fromEntries(
                      Object.entries(u).filter(([e, t]) => null != t),
                    )),
                  body: n.content,
                  signal: o,
                }),
                h = a(d);
              if (!d.ok) {
                let t;
                try {
                  t = await s({
                    response: d,
                    url: e,
                    requestBodyValues: n.values,
                  });
                } catch (t) {
                  if (c(t) || r.hL.isInstance(t)) throw t;
                  throw new r.hL({
                    message: "Failed to process error response",
                    cause: t,
                    statusCode: d.status,
                    url: e,
                    responseHeaders: h,
                    requestBodyValues: n.values,
                  });
                }
                throw t.value;
              }
              try {
                return await i({
                  response: d,
                  url: e,
                  requestBodyValues: n.values,
                });
              } catch (t) {
                if (t instanceof Error && (c(t) || r.hL.isInstance(t))) throw t;
                throw new r.hL({
                  message: "Failed to process successful response",
                  cause: t,
                  statusCode: d.status,
                  url: e,
                  responseHeaders: h,
                  requestBodyValues: n.values,
                });
              }
            } catch (t) {
              if (c(t)) throw t;
              if (t instanceof TypeError && "fetch failed" === t.message) {
                let i = t.cause;
                if (null != i)
                  throw new r.hL({
                    message: `Cannot connect to API: ${i.message}`,
                    cause: i,
                    url: e,
                    requestBodyValues: n.values,
                    isRetryable: !0,
                  });
              }
              throw t;
            }
          };
        async function x(e) {
          return "function" == typeof e && (e = e()), Promise.resolve(e);
        }
        var k =
            ({ errorSchema: e, errorToMessage: t, isRetryable: n }) =>
            async ({ response: i, url: o, requestBodyValues: l }) => {
              let c = await i.text(),
                u = a(i);
              if ("" === c.trim())
                return {
                  responseHeaders: u,
                  value: new r.hL({
                    message: i.statusText,
                    url: o,
                    requestBodyValues: l,
                    statusCode: i.status,
                    responseHeaders: u,
                    responseBody: c,
                    isRetryable: null == n ? void 0 : n(i),
                  }),
                };
              try {
                let a = (function ({ text: e, schema: t }) {
                  try {
                    let n = s.parse(e);
                    if (null == t) return n;
                    return (function ({ value: e, schema: t }) {
                      let n = h({ value: e, schema: t });
                      if (!n.success)
                        throw r.iM.wrap({ value: e, cause: n.error });
                      return n.value;
                    })({ value: n, schema: t });
                  } catch (t) {
                    if (r.u6.isInstance(t) || r.iM.isInstance(t)) throw t;
                    throw new r.u6({ text: e, cause: t });
                  }
                })({ text: c, schema: e });
                return {
                  responseHeaders: u,
                  value: new r.hL({
                    message: t(a),
                    url: o,
                    requestBodyValues: l,
                    statusCode: i.status,
                    responseHeaders: u,
                    responseBody: c,
                    data: a,
                    isRetryable: null == n ? void 0 : n(i, a),
                  }),
                };
              } catch (e) {
                return {
                  responseHeaders: u,
                  value: new r.hL({
                    message: i.statusText,
                    url: o,
                    requestBodyValues: l,
                    statusCode: i.status,
                    responseHeaders: u,
                    responseBody: c,
                    isRetryable: null == n ? void 0 : n(i),
                  }),
                };
              }
            },
          w =
            (e) =>
            async ({ response: t }) => {
              let n = a(t);
              if (null == t.body) throw new r.Tt({});
              return {
                responseHeaders: n,
                value: t.body
                  .pipeThrough(new TextDecoderStream())
                  .pipeThrough(
                    (function () {
                      let e,
                        t,
                        n,
                        r = "",
                        i = [];
                      function s(e, t) {
                        if ("" === e) return void o(t);
                        if (e.startsWith(":")) return;
                        let n = e.indexOf(":");
                        if (-1 === n) return void a(e, "");
                        let r = e.slice(0, n),
                          i = n + 1;
                        a(
                          r,
                          i < e.length && " " === e[i]
                            ? e.slice(i + 1)
                            : e.slice(i),
                        );
                      }
                      function o(r) {
                        i.length > 0 &&
                          (r.enqueue({
                            event: e,
                            data: i.join("\n"),
                            id: t,
                            retry: n,
                          }),
                          (i = []),
                          (e = void 0),
                          (n = void 0));
                      }
                      function a(r, s) {
                        switch (r) {
                          case "event":
                            e = s;
                            break;
                          case "data":
                            i.push(s);
                            break;
                          case "id":
                            t = s;
                            break;
                          case "retry":
                            let o = parseInt(s, 10);
                            isNaN(o) || (n = o);
                        }
                      }
                      return new TransformStream({
                        transform(e, t) {
                          let { lines: n, incompleteLine: i } = (function (
                            e,
                            t,
                          ) {
                            let n = [],
                              r = e;
                            for (let e = 0; e < t.length; ) {
                              let i = t[e++];
                              "\n" === i
                                ? (n.push(r), (r = ""))
                                : "\r" === i
                                  ? (n.push(r), (r = ""), "\n" === t[e] && e++)
                                  : (r += i);
                            }
                            return { lines: n, incompleteLine: r };
                          })(r, e);
                          r = i;
                          for (let e = 0; e < n.length; e++) s(n[e], t);
                        },
                        flush(e) {
                          s(r, e), o(e);
                        },
                      });
                    })(),
                  )
                  .pipeThrough(
                    new TransformStream({
                      transform({ data: t }, n) {
                        "[DONE]" !== t && n.enqueue(p({ text: t, schema: e }));
                      },
                    }),
                  ),
              };
            },
          _ =
            (e) =>
            async ({ response: t, url: n, requestBodyValues: i }) => {
              let s = await t.text(),
                o = p({ text: s, schema: e }),
                l = a(t);
              if (!o.success)
                throw new r.hL({
                  message: "Invalid JSON response",
                  cause: o.error,
                  statusCode: t.status,
                  responseHeaders: l,
                  responseBody: s,
                  url: n,
                  requestBodyValues: i,
                });
              return {
                responseHeaders: l,
                value: o.value,
                rawValue: o.rawValue,
              };
            },
          O =
            () =>
            async ({ response: e, url: t, requestBodyValues: n }) => {
              let i = a(e);
              if (!e.body)
                throw new r.hL({
                  message: "Response body is empty",
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: i,
                  responseBody: void 0,
                });
              try {
                let t = await e.arrayBuffer();
                return { responseHeaders: i, value: new Uint8Array(t) };
              } catch (s) {
                throw new r.hL({
                  message: "Failed to read response as array buffer",
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: i,
                  responseBody: void 0,
                  cause: s,
                });
              }
            },
          T =
            () =>
            async ({ response: e, url: t, requestBodyValues: n }) => {
              let i = a(e),
                s = await e.text();
              return {
                responseHeaders: i,
                value: new r.hL({
                  message: e.statusText,
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: i,
                  responseBody: s,
                }),
              };
            },
          { btoa: S, atob: E } = globalThis;
        function C(e) {
          let t = E(e.replace(/-/g, "+").replace(/_/g, "/"));
          return Uint8Array.from(t, (e) => e.codePointAt(0));
        }
        function A(e) {
          let t = "";
          for (let n = 0; n < e.length; n++) t += String.fromCodePoint(e[n]);
          return S(t);
        }
        function N(e) {
          return null == e ? void 0 : e.replace(/\/$/, "");
        }
      },
      14391: (e, t, n) => {
        "use strict";
        n.d(t, { N: () => Z });
        var r = n(62428),
          i = n(85743),
          s = n(99413);
        function o(e) {
          var t, n;
          return null !=
            (n =
              null == (t = null == e ? void 0 : e.content)
                ? void 0
                : t.map(({ token: e, logprob: t, top_logprobs: n }) => ({
                    token: e,
                    logprob: t,
                    topLogprobs: n
                      ? n.map(({ token: e, logprob: t }) => ({
                          token: e,
                          logprob: t,
                        }))
                      : [],
                  })))
            ? n
            : void 0;
        }
        function a(e) {
          switch (e) {
            case "stop":
              return "stop";
            case "length":
              return "length";
            case "content_filter":
              return "content-filter";
            case "function_call":
            case "tool_calls":
              return "tool-calls";
            default:
              return "unknown";
          }
        }
        var l = s.Ik({
            error: s.Ik({
              message: s.Yj(),
              type: s.Yj().nullish(),
              param: s.bz().nullish(),
              code: s.KC([s.Yj(), s.ai()]).nullish(),
            }),
          }),
          c = (0, r.sl)({
            errorSchema: l,
            errorToMessage: (e) => e.error.message,
          });
        function u({ id: e, model: t, created: n }) {
          return {
            id: null != e ? e : void 0,
            modelId: null != t ? t : void 0,
            timestamp: null != n ? new Date(1e3 * n) : void 0,
          };
        }
        var d = class {
            constructor(e, t, n) {
              (this.specificationVersion = "v1"),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
            }
            get supportsStructuredOutputs() {
              var e;
              return null != (e = this.settings.structuredOutputs)
                ? e
                : m(this.modelId);
            }
            get defaultObjectGenerationMode() {
              return this.modelId.startsWith("gpt-4o-audio-preview")
                ? "tool"
                : this.supportsStructuredOutputs
                  ? "json"
                  : "tool";
            }
            get provider() {
              return this.config.provider;
            }
            get supportsImageUrls() {
              return !this.settings.downloadImages;
            }
            getArgs({
              mode: e,
              prompt: t,
              maxTokens: n,
              temperature: s,
              topP: o,
              topK: a,
              frequencyPenalty: l,
              presencePenalty: c,
              stopSequences: u,
              responseFormat: d,
              seed: h,
              providerMetadata: p,
            }) {
              var f, y, v, b, x, k, w, _, O, T, S;
              let E = e.type,
                C = [];
              null != a &&
                C.push({ type: "unsupported-setting", setting: "topK" }),
                (null == d ? void 0 : d.type) !== "json" ||
                  null == d.schema ||
                  this.supportsStructuredOutputs ||
                  C.push({
                    type: "unsupported-setting",
                    setting: "responseFormat",
                    details:
                      "JSON response format schema is only supported with structuredOutputs",
                  });
              let A = this.settings.useLegacyFunctionCalling;
              if (A && !0 === this.settings.parallelToolCalls)
                throw new i.b8({
                  functionality:
                    "useLegacyFunctionCalling with parallelToolCalls",
                });
              if (A && this.supportsStructuredOutputs)
                throw new i.b8({
                  functionality:
                    "structuredOutputs with useLegacyFunctionCalling",
                });
              let { messages: N, warnings: I } = (function ({
                prompt: e,
                useLegacyFunctionCalling: t = !1,
                systemMessageMode: n = "system",
              }) {
                let s = [],
                  o = [];
                for (let { role: a, content: l } of e)
                  switch (a) {
                    case "system":
                      switch (n) {
                        case "system":
                          s.push({ role: "system", content: l });
                          break;
                        case "developer":
                          s.push({ role: "developer", content: l });
                          break;
                        case "remove":
                          o.push({
                            type: "other",
                            message:
                              "system messages are removed for this model",
                          });
                          break;
                        default:
                          throw Error(`Unsupported system message mode: ${n}`);
                      }
                      break;
                    case "user":
                      if (1 === l.length && "text" === l[0].type) {
                        s.push({ role: "user", content: l[0].text });
                        break;
                      }
                      s.push({
                        role: "user",
                        content: l.map((e, t) => {
                          var n, s, o, a;
                          switch (e.type) {
                            case "text":
                              return { type: "text", text: e.text };
                            case "image":
                              return {
                                type: "image_url",
                                image_url: {
                                  url:
                                    e.image instanceof URL
                                      ? e.image.toString()
                                      : `data:${null != (n = e.mimeType) ? n : "image/jpeg"};base64,${(0, r.n_)(e.image)}`,
                                  detail:
                                    null ==
                                    (o =
                                      null == (s = e.providerMetadata)
                                        ? void 0
                                        : s.openai)
                                      ? void 0
                                      : o.imageDetail,
                                },
                              };
                            case "file":
                              if (e.data instanceof URL)
                                throw new i.b8({
                                  functionality:
                                    "'File content parts with URL data' functionality not supported.",
                                });
                              switch (e.mimeType) {
                                case "audio/wav":
                                  return {
                                    type: "input_audio",
                                    input_audio: {
                                      data: e.data,
                                      format: "wav",
                                    },
                                  };
                                case "audio/mp3":
                                case "audio/mpeg":
                                  return {
                                    type: "input_audio",
                                    input_audio: {
                                      data: e.data,
                                      format: "mp3",
                                    },
                                  };
                                case "application/pdf":
                                  return {
                                    type: "file",
                                    file: {
                                      filename:
                                        null != (a = e.filename)
                                          ? a
                                          : `part-${t}.pdf`,
                                      file_data: `data:application/pdf;base64,${e.data}`,
                                    },
                                  };
                                default:
                                  throw new i.b8({
                                    functionality: `File content part type ${e.mimeType} in user messages`,
                                  });
                              }
                          }
                        }),
                      });
                      break;
                    case "assistant": {
                      let e = "",
                        n = [];
                      for (let t of l)
                        switch (t.type) {
                          case "text":
                            e += t.text;
                            break;
                          case "tool-call":
                            n.push({
                              id: t.toolCallId,
                              type: "function",
                              function: {
                                name: t.toolName,
                                arguments: JSON.stringify(t.args),
                              },
                            });
                        }
                      if (t) {
                        if (n.length > 1)
                          throw new i.b8({
                            functionality:
                              "useLegacyFunctionCalling with multiple tool calls in one message",
                          });
                        s.push({
                          role: "assistant",
                          content: e,
                          function_call: n.length > 0 ? n[0].function : void 0,
                        });
                      } else
                        s.push({
                          role: "assistant",
                          content: e,
                          tool_calls: n.length > 0 ? n : void 0,
                        });
                      break;
                    }
                    case "tool":
                      for (let e of l)
                        t
                          ? s.push({
                              role: "function",
                              name: e.toolName,
                              content: JSON.stringify(e.result),
                            })
                          : s.push({
                              role: "tool",
                              tool_call_id: e.toolCallId,
                              content: JSON.stringify(e.result),
                            });
                      break;
                    default:
                      throw Error(`Unsupported role: ${a}`);
                  }
                return { messages: s, warnings: o };
              })({
                prompt: t,
                useLegacyFunctionCalling: A,
                systemMessageMode: m((O = this.modelId))
                  ? null !=
                    (S = null == (T = g[O]) ? void 0 : T.systemMessageMode)
                    ? S
                    : "developer"
                  : "system",
              });
              C.push(...I);
              let D = {
                model: this.modelId,
                logit_bias: this.settings.logitBias,
                logprobs:
                  !0 === this.settings.logprobs ||
                  "number" == typeof this.settings.logprobs ||
                  void 0,
                top_logprobs:
                  "number" == typeof this.settings.logprobs
                    ? this.settings.logprobs
                    : "boolean" == typeof this.settings.logprobs &&
                        this.settings.logprobs
                      ? 0
                      : void 0,
                user: this.settings.user,
                parallel_tool_calls: this.settings.parallelToolCalls,
                max_tokens: n,
                temperature: s,
                top_p: o,
                frequency_penalty: l,
                presence_penalty: c,
                response_format:
                  (null == d ? void 0 : d.type) === "json"
                    ? this.supportsStructuredOutputs && null != d.schema
                      ? {
                          type: "json_schema",
                          json_schema: {
                            schema: d.schema,
                            strict: !0,
                            name: null != (f = d.name) ? f : "response",
                            description: d.description,
                          },
                        }
                      : { type: "json_object" }
                    : void 0,
                stop: u,
                seed: h,
                max_completion_tokens:
                  null == (y = null == p ? void 0 : p.openai)
                    ? void 0
                    : y.maxCompletionTokens,
                store:
                  null == (v = null == p ? void 0 : p.openai)
                    ? void 0
                    : v.store,
                metadata:
                  null == (b = null == p ? void 0 : p.openai)
                    ? void 0
                    : b.metadata,
                prediction:
                  null == (x = null == p ? void 0 : p.openai)
                    ? void 0
                    : x.prediction,
                reasoning_effort:
                  null !=
                  (w =
                    null == (k = null == p ? void 0 : p.openai)
                      ? void 0
                      : k.reasoningEffort)
                    ? w
                    : this.settings.reasoningEffort,
                messages: N,
              };
              switch (
                (m(this.modelId)
                  ? (null != D.temperature &&
                      ((D.temperature = void 0),
                      C.push({
                        type: "unsupported-setting",
                        setting: "temperature",
                        details:
                          "temperature is not supported for reasoning models",
                      })),
                    null != D.top_p &&
                      ((D.top_p = void 0),
                      C.push({
                        type: "unsupported-setting",
                        setting: "topP",
                        details: "topP is not supported for reasoning models",
                      })),
                    null != D.frequency_penalty &&
                      ((D.frequency_penalty = void 0),
                      C.push({
                        type: "unsupported-setting",
                        setting: "frequencyPenalty",
                        details:
                          "frequencyPenalty is not supported for reasoning models",
                      })),
                    null != D.presence_penalty &&
                      ((D.presence_penalty = void 0),
                      C.push({
                        type: "unsupported-setting",
                        setting: "presencePenalty",
                        details:
                          "presencePenalty is not supported for reasoning models",
                      })),
                    null != D.logit_bias &&
                      ((D.logit_bias = void 0),
                      C.push({
                        type: "other",
                        message:
                          "logitBias is not supported for reasoning models",
                      })),
                    null != D.logprobs &&
                      ((D.logprobs = void 0),
                      C.push({
                        type: "other",
                        message:
                          "logprobs is not supported for reasoning models",
                      })),
                    null != D.top_logprobs &&
                      ((D.top_logprobs = void 0),
                      C.push({
                        type: "other",
                        message:
                          "topLogprobs is not supported for reasoning models",
                      })),
                    null != D.max_tokens &&
                      (null == D.max_completion_tokens &&
                        (D.max_completion_tokens = D.max_tokens),
                      (D.max_tokens = void 0)))
                  : (this.modelId.startsWith("gpt-4o-search-preview") ||
                      this.modelId.startsWith("gpt-4o-mini-search-preview")) &&
                    null != D.temperature &&
                    ((D.temperature = void 0),
                    C.push({
                      type: "unsupported-setting",
                      setting: "temperature",
                      details:
                        "temperature is not supported for the search preview models and has been removed.",
                    })),
                E)
              ) {
                case "regular": {
                  let {
                    tools: t,
                    tool_choice: n,
                    functions: r,
                    function_call: s,
                    toolWarnings: o,
                  } = (function ({
                    mode: e,
                    useLegacyFunctionCalling: t = !1,
                    structuredOutputs: n,
                  }) {
                    var r;
                    let s = (null == (r = e.tools) ? void 0 : r.length)
                        ? e.tools
                        : void 0,
                      o = [];
                    if (null == s)
                      return {
                        tools: void 0,
                        tool_choice: void 0,
                        toolWarnings: o,
                      };
                    let a = e.toolChoice;
                    if (t) {
                      let e = [];
                      for (let t of s)
                        "provider-defined" === t.type
                          ? o.push({ type: "unsupported-tool", tool: t })
                          : e.push({
                              name: t.name,
                              description: t.description,
                              parameters: t.parameters,
                            });
                      if (null == a)
                        return {
                          functions: e,
                          function_call: void 0,
                          toolWarnings: o,
                        };
                      switch (a.type) {
                        case "auto":
                        case "none":
                        case void 0:
                          return {
                            functions: e,
                            function_call: void 0,
                            toolWarnings: o,
                          };
                        case "required":
                          throw new i.b8({
                            functionality:
                              "useLegacyFunctionCalling and toolChoice: required",
                          });
                        default:
                          return {
                            functions: e,
                            function_call: { name: a.toolName },
                            toolWarnings: o,
                          };
                      }
                    }
                    let l = [];
                    for (let e of s)
                      "provider-defined" === e.type
                        ? o.push({ type: "unsupported-tool", tool: e })
                        : l.push({
                            type: "function",
                            function: {
                              name: e.name,
                              description: e.description,
                              parameters: e.parameters,
                              strict: !!n || void 0,
                            },
                          });
                    if (null == a)
                      return { tools: l, tool_choice: void 0, toolWarnings: o };
                    let c = a.type;
                    switch (c) {
                      case "auto":
                      case "none":
                      case "required":
                        return { tools: l, tool_choice: c, toolWarnings: o };
                      case "tool":
                        return {
                          tools: l,
                          tool_choice: {
                            type: "function",
                            function: { name: a.toolName },
                          },
                          toolWarnings: o,
                        };
                      default:
                        throw new i.b8({
                          functionality: `Unsupported tool choice type: ${c}`,
                        });
                    }
                  })({
                    mode: e,
                    useLegacyFunctionCalling: A,
                    structuredOutputs: this.supportsStructuredOutputs,
                  });
                  return {
                    args: {
                      ...D,
                      tools: t,
                      tool_choice: n,
                      functions: r,
                      function_call: s,
                    },
                    warnings: [...C, ...o],
                  };
                }
                case "object-json":
                  return {
                    args: {
                      ...D,
                      response_format:
                        this.supportsStructuredOutputs && null != e.schema
                          ? {
                              type: "json_schema",
                              json_schema: {
                                schema: e.schema,
                                strict: !0,
                                name: null != (_ = e.name) ? _ : "response",
                                description: e.description,
                              },
                            }
                          : { type: "json_object" },
                    },
                    warnings: C,
                  };
                case "object-tool":
                  return {
                    args: A
                      ? {
                          ...D,
                          function_call: { name: e.tool.name },
                          functions: [
                            {
                              name: e.tool.name,
                              description: e.tool.description,
                              parameters: e.tool.parameters,
                            },
                          ],
                        }
                      : {
                          ...D,
                          tool_choice: {
                            type: "function",
                            function: { name: e.tool.name },
                          },
                          tools: [
                            {
                              type: "function",
                              function: {
                                name: e.tool.name,
                                description: e.tool.description,
                                parameters: e.tool.parameters,
                                strict:
                                  !!this.supportsStructuredOutputs || void 0,
                              },
                            },
                          ],
                        },
                    warnings: C,
                  };
                default:
                  throw Error(`Unsupported type: ${E}`);
              }
            }
            async doGenerate(e) {
              var t, n, i, s, l, d, h, f;
              let { args: m, warnings: g } = this.getArgs(e),
                {
                  responseHeaders: y,
                  value: v,
                  rawValue: b,
                } = await (0, r.GU)({
                  url: this.config.url({
                    path: "/chat/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), e.headers),
                  body: m,
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.cV)(p),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { messages: x, ...k } = m,
                w = v.choices[0],
                _ =
                  null == (t = v.usage) ? void 0 : t.completion_tokens_details,
                O = null == (n = v.usage) ? void 0 : n.prompt_tokens_details,
                T = { openai: {} };
              return (
                (null == _ ? void 0 : _.reasoning_tokens) != null &&
                  (T.openai.reasoningTokens =
                    null == _ ? void 0 : _.reasoning_tokens),
                (null == _ ? void 0 : _.accepted_prediction_tokens) != null &&
                  (T.openai.acceptedPredictionTokens =
                    null == _ ? void 0 : _.accepted_prediction_tokens),
                (null == _ ? void 0 : _.rejected_prediction_tokens) != null &&
                  (T.openai.rejectedPredictionTokens =
                    null == _ ? void 0 : _.rejected_prediction_tokens),
                (null == O ? void 0 : O.cached_tokens) != null &&
                  (T.openai.cachedPromptTokens =
                    null == O ? void 0 : O.cached_tokens),
                {
                  text: null != (i = w.message.content) ? i : void 0,
                  toolCalls:
                    this.settings.useLegacyFunctionCalling &&
                    w.message.function_call
                      ? [
                          {
                            toolCallType: "function",
                            toolCallId: (0, r.$C)(),
                            toolName: w.message.function_call.name,
                            args: w.message.function_call.arguments,
                          },
                        ]
                      : null == (s = w.message.tool_calls)
                        ? void 0
                        : s.map((e) => {
                            var t;
                            return {
                              toolCallType: "function",
                              toolCallId: null != (t = e.id) ? t : (0, r.$C)(),
                              toolName: e.function.name,
                              args: e.function.arguments,
                            };
                          }),
                  finishReason: a(w.finish_reason),
                  usage: {
                    promptTokens:
                      null !=
                      (d = null == (l = v.usage) ? void 0 : l.prompt_tokens)
                        ? d
                        : NaN,
                    completionTokens:
                      null !=
                      (f = null == (h = v.usage) ? void 0 : h.completion_tokens)
                        ? f
                        : NaN,
                  },
                  rawCall: { rawPrompt: x, rawSettings: k },
                  rawResponse: { headers: y, body: b },
                  request: { body: JSON.stringify(m) },
                  response: u(v),
                  warnings: g,
                  logprobs: o(w.logprobs),
                  providerMetadata: T,
                }
              );
            }
            async doStream(e) {
              let t;
              if (this.settings.simulateStreaming) {
                let t = await this.doGenerate(e);
                return {
                  stream: new ReadableStream({
                    start(e) {
                      if (
                        (e.enqueue({
                          type: "response-metadata",
                          ...t.response,
                        }),
                        t.text &&
                          e.enqueue({ type: "text-delta", textDelta: t.text }),
                        t.toolCalls)
                      )
                        for (let n of t.toolCalls)
                          e.enqueue({
                            type: "tool-call-delta",
                            toolCallType: "function",
                            toolCallId: n.toolCallId,
                            toolName: n.toolName,
                            argsTextDelta: n.args,
                          }),
                            e.enqueue({ type: "tool-call", ...n });
                      e.enqueue({
                        type: "finish",
                        finishReason: t.finishReason,
                        usage: t.usage,
                        logprobs: t.logprobs,
                        providerMetadata: t.providerMetadata,
                      }),
                        e.close();
                    },
                  }),
                  rawCall: t.rawCall,
                  rawResponse: t.rawResponse,
                  warnings: t.warnings,
                };
              }
              let { args: n, warnings: s } = this.getArgs(e),
                l = {
                  ...n,
                  stream: !0,
                  stream_options:
                    "strict" === this.config.compatibility
                      ? { include_usage: !0 }
                      : void 0,
                },
                { responseHeaders: d, value: h } = await (0, r.GU)({
                  url: this.config.url({
                    path: "/chat/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), e.headers),
                  body: l,
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.Ds)(f),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { messages: p, ...m } = n,
                g = [],
                y = "unknown",
                v = { promptTokens: void 0, completionTokens: void 0 },
                b = !0,
                { useLegacyFunctionCalling: x } = this.settings,
                k = { openai: {} };
              return {
                stream: h.pipeThrough(
                  new TransformStream({
                    transform(e, n) {
                      var s, l, c, d, h, p, f, m, w, _, O, T;
                      if (!e.success) {
                        (y = "error"),
                          n.enqueue({ type: "error", error: e.error });
                        return;
                      }
                      let S = e.value;
                      if ("error" in S) {
                        (y = "error"),
                          n.enqueue({ type: "error", error: S.error });
                        return;
                      }
                      if (
                        (b &&
                          ((b = !1),
                          n.enqueue({ type: "response-metadata", ...u(S) })),
                        null != S.usage)
                      ) {
                        let {
                          prompt_tokens: e,
                          completion_tokens: t,
                          prompt_tokens_details: n,
                          completion_tokens_details: r,
                        } = S.usage;
                        (v = {
                          promptTokens: null != e ? e : void 0,
                          completionTokens: null != t ? t : void 0,
                        }),
                          (null == r ? void 0 : r.reasoning_tokens) != null &&
                            (k.openai.reasoningTokens =
                              null == r ? void 0 : r.reasoning_tokens),
                          (null == r ? void 0 : r.accepted_prediction_tokens) !=
                            null &&
                            (k.openai.acceptedPredictionTokens =
                              null == r
                                ? void 0
                                : r.accepted_prediction_tokens),
                          (null == r ? void 0 : r.rejected_prediction_tokens) !=
                            null &&
                            (k.openai.rejectedPredictionTokens =
                              null == r
                                ? void 0
                                : r.rejected_prediction_tokens),
                          (null == n ? void 0 : n.cached_tokens) != null &&
                            (k.openai.cachedPromptTokens =
                              null == n ? void 0 : n.cached_tokens);
                      }
                      let E = S.choices[0];
                      if (
                        ((null == E ? void 0 : E.finish_reason) != null &&
                          (y = a(E.finish_reason)),
                        (null == E ? void 0 : E.delta) == null)
                      )
                        return;
                      let C = E.delta;
                      null != C.content &&
                        n.enqueue({ type: "text-delta", textDelta: C.content });
                      let A = o(null == E ? void 0 : E.logprobs);
                      (null == A ? void 0 : A.length) &&
                        (void 0 === t && (t = []), t.push(...A));
                      let N =
                        x && null != C.function_call
                          ? [
                              {
                                type: "function",
                                id: (0, r.$C)(),
                                function: C.function_call,
                                index: 0,
                              },
                            ]
                          : C.tool_calls;
                      if (null != N)
                        for (let e of N) {
                          let t = e.index;
                          if (null == g[t]) {
                            if ("function" !== e.type)
                              throw new i.xn({
                                data: e,
                                message: "Expected 'function' type.",
                              });
                            if (null == e.id)
                              throw new i.xn({
                                data: e,
                                message: "Expected 'id' to be a string.",
                              });
                            if (
                              (null == (s = e.function) ? void 0 : s.name) ==
                              null
                            )
                              throw new i.xn({
                                data: e,
                                message:
                                  "Expected 'function.name' to be a string.",
                              });
                            g[t] = {
                              id: e.id,
                              type: "function",
                              function: {
                                name: e.function.name,
                                arguments:
                                  null != (l = e.function.arguments) ? l : "",
                              },
                              hasFinished: !1,
                            };
                            let o = g[t];
                            (null == (c = o.function) ? void 0 : c.name) !=
                              null &&
                              (null == (d = o.function)
                                ? void 0
                                : d.arguments) != null &&
                              (o.function.arguments.length > 0 &&
                                n.enqueue({
                                  type: "tool-call-delta",
                                  toolCallType: "function",
                                  toolCallId: o.id,
                                  toolName: o.function.name,
                                  argsTextDelta: o.function.arguments,
                                }),
                              (0, r.v0)(o.function.arguments) &&
                                (n.enqueue({
                                  type: "tool-call",
                                  toolCallType: "function",
                                  toolCallId:
                                    null != (h = o.id) ? h : (0, r.$C)(),
                                  toolName: o.function.name,
                                  args: o.function.arguments,
                                }),
                                (o.hasFinished = !0)));
                            continue;
                          }
                          let o = g[t];
                          !o.hasFinished &&
                            ((null == (p = e.function)
                              ? void 0
                              : p.arguments) != null &&
                              (o.function.arguments +=
                                null !=
                                (m =
                                  null == (f = e.function)
                                    ? void 0
                                    : f.arguments)
                                  ? m
                                  : ""),
                            n.enqueue({
                              type: "tool-call-delta",
                              toolCallType: "function",
                              toolCallId: o.id,
                              toolName: o.function.name,
                              argsTextDelta:
                                null != (w = e.function.arguments) ? w : "",
                            }),
                            (null == (_ = o.function) ? void 0 : _.name) !=
                              null &&
                              (null == (O = o.function)
                                ? void 0
                                : O.arguments) != null &&
                              (0, r.v0)(o.function.arguments) &&
                              (n.enqueue({
                                type: "tool-call",
                                toolCallType: "function",
                                toolCallId:
                                  null != (T = o.id) ? T : (0, r.$C)(),
                                toolName: o.function.name,
                                args: o.function.arguments,
                              }),
                              (o.hasFinished = !0)));
                        }
                    },
                    flush(e) {
                      var n, r;
                      e.enqueue({
                        type: "finish",
                        finishReason: y,
                        logprobs: t,
                        usage: {
                          promptTokens: null != (n = v.promptTokens) ? n : NaN,
                          completionTokens:
                            null != (r = v.completionTokens) ? r : NaN,
                        },
                        ...(null != k ? { providerMetadata: k } : {}),
                      });
                    },
                  }),
                ),
                rawCall: { rawPrompt: p, rawSettings: m },
                rawResponse: { headers: d },
                request: { body: JSON.stringify(l) },
                warnings: s,
              };
            }
          },
          h = s
            .Ik({
              prompt_tokens: s.ai().nullish(),
              completion_tokens: s.ai().nullish(),
              prompt_tokens_details: s
                .Ik({ cached_tokens: s.ai().nullish() })
                .nullish(),
              completion_tokens_details: s
                .Ik({
                  reasoning_tokens: s.ai().nullish(),
                  accepted_prediction_tokens: s.ai().nullish(),
                  rejected_prediction_tokens: s.ai().nullish(),
                })
                .nullish(),
            })
            .nullish(),
          p = s.Ik({
            id: s.Yj().nullish(),
            created: s.ai().nullish(),
            model: s.Yj().nullish(),
            choices: s.YO(
              s.Ik({
                message: s.Ik({
                  role: s.eu("assistant").nullish(),
                  content: s.Yj().nullish(),
                  function_call: s
                    .Ik({ arguments: s.Yj(), name: s.Yj() })
                    .nullish(),
                  tool_calls: s
                    .YO(
                      s.Ik({
                        id: s.Yj().nullish(),
                        type: s.eu("function"),
                        function: s.Ik({ name: s.Yj(), arguments: s.Yj() }),
                      }),
                    )
                    .nullish(),
                }),
                index: s.ai(),
                logprobs: s
                  .Ik({
                    content: s
                      .YO(
                        s.Ik({
                          token: s.Yj(),
                          logprob: s.ai(),
                          top_logprobs: s.YO(
                            s.Ik({ token: s.Yj(), logprob: s.ai() }),
                          ),
                        }),
                      )
                      .nullable(),
                  })
                  .nullish(),
                finish_reason: s.Yj().nullish(),
              }),
            ),
            usage: h,
          }),
          f = s.KC([
            s.Ik({
              id: s.Yj().nullish(),
              created: s.ai().nullish(),
              model: s.Yj().nullish(),
              choices: s.YO(
                s.Ik({
                  delta: s
                    .Ik({
                      role: s.k5(["assistant"]).nullish(),
                      content: s.Yj().nullish(),
                      function_call: s
                        .Ik({
                          name: s.Yj().optional(),
                          arguments: s.Yj().optional(),
                        })
                        .nullish(),
                      tool_calls: s
                        .YO(
                          s.Ik({
                            index: s.ai(),
                            id: s.Yj().nullish(),
                            type: s.eu("function").nullish(),
                            function: s.Ik({
                              name: s.Yj().nullish(),
                              arguments: s.Yj().nullish(),
                            }),
                          }),
                        )
                        .nullish(),
                    })
                    .nullish(),
                  logprobs: s
                    .Ik({
                      content: s
                        .YO(
                          s.Ik({
                            token: s.Yj(),
                            logprob: s.ai(),
                            top_logprobs: s.YO(
                              s.Ik({ token: s.Yj(), logprob: s.ai() }),
                            ),
                          }),
                        )
                        .nullable(),
                    })
                    .nullish(),
                  finish_reason: s.Yj().nullish(),
                  index: s.ai(),
                }),
              ),
              usage: h,
            }),
            l,
          ]);
        function m(e) {
          return e.startsWith("o");
        }
        var g = {
          "o1-mini": { systemMessageMode: "remove" },
          "o1-mini-2024-09-12": { systemMessageMode: "remove" },
          "o1-preview": { systemMessageMode: "remove" },
          "o1-preview-2024-09-12": { systemMessageMode: "remove" },
          o3: { systemMessageMode: "developer" },
          "o3-2025-04-16": { systemMessageMode: "developer" },
          "o3-mini": { systemMessageMode: "developer" },
          "o3-mini-2025-01-31": { systemMessageMode: "developer" },
          "o4-mini": { systemMessageMode: "developer" },
          "o4-mini-2025-04-16": { systemMessageMode: "developer" },
        };
        function y(e) {
          return null == e
            ? void 0
            : e.tokens.map((t, n) => ({
                token: t,
                logprob: e.token_logprobs[n],
                topLogprobs: e.top_logprobs
                  ? Object.entries(e.top_logprobs[n]).map(([e, t]) => ({
                      token: e,
                      logprob: t,
                    }))
                  : [],
              }));
        }
        var v = class {
            constructor(e, t, n) {
              (this.specificationVersion = "v1"),
                (this.defaultObjectGenerationMode = void 0),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
            }
            get provider() {
              return this.config.provider;
            }
            getArgs({
              mode: e,
              inputFormat: t,
              prompt: n,
              maxTokens: r,
              temperature: s,
              topP: o,
              topK: a,
              frequencyPenalty: l,
              presencePenalty: c,
              stopSequences: u,
              responseFormat: d,
              seed: h,
            }) {
              var p;
              let f = e.type,
                m = [];
              null != a &&
                m.push({ type: "unsupported-setting", setting: "topK" }),
                null != d &&
                  "text" !== d.type &&
                  m.push({
                    type: "unsupported-setting",
                    setting: "responseFormat",
                    details: "JSON response format is not supported.",
                  });
              let { prompt: g, stopSequences: y } = (function ({
                  prompt: e,
                  inputFormat: t,
                  user: n = "user",
                  assistant: r = "assistant",
                }) {
                  if (
                    "prompt" === t &&
                    1 === e.length &&
                    "user" === e[0].role &&
                    1 === e[0].content.length &&
                    "text" === e[0].content[0].type
                  )
                    return { prompt: e[0].content[0].text };
                  let s = "";
                  for (let { role: t, content: o } of ("system" === e[0].role &&
                    ((s += `${e[0].content}

`),
                    (e = e.slice(1))),
                  e))
                    switch (t) {
                      case "system":
                        throw new i.M3({
                          message:
                            "Unexpected system message in prompt: ${content}",
                          prompt: e,
                        });
                      case "user": {
                        let e = o
                          .map((e) => {
                            switch (e.type) {
                              case "text":
                                return e.text;
                              case "image":
                                throw new i.b8({ functionality: "images" });
                            }
                          })
                          .join("");
                        s += `${n}:
${e}

`;
                        break;
                      }
                      case "assistant": {
                        let e = o
                          .map((e) => {
                            switch (e.type) {
                              case "text":
                                return e.text;
                              case "tool-call":
                                throw new i.b8({
                                  functionality: "tool-call messages",
                                });
                            }
                          })
                          .join("");
                        s += `${r}:
${e}

`;
                        break;
                      }
                      case "tool":
                        throw new i.b8({ functionality: "tool messages" });
                      default:
                        throw Error(`Unsupported role: ${t}`);
                    }
                  return {
                    prompt: (s += `${r}:
`),
                    stopSequences: [
                      `
${n}:`,
                    ],
                  };
                })({ prompt: n, inputFormat: t }),
                v = [...(null != y ? y : []), ...(null != u ? u : [])],
                b = {
                  model: this.modelId,
                  echo: this.settings.echo,
                  logit_bias: this.settings.logitBias,
                  logprobs:
                    "number" == typeof this.settings.logprobs
                      ? this.settings.logprobs
                      : "boolean" == typeof this.settings.logprobs &&
                          this.settings.logprobs
                        ? 0
                        : void 0,
                  suffix: this.settings.suffix,
                  user: this.settings.user,
                  max_tokens: r,
                  temperature: s,
                  top_p: o,
                  frequency_penalty: l,
                  presence_penalty: c,
                  seed: h,
                  prompt: g,
                  stop: v.length > 0 ? v : void 0,
                };
              switch (f) {
                case "regular":
                  if (null == (p = e.tools) ? void 0 : p.length)
                    throw new i.b8({ functionality: "tools" });
                  if (e.toolChoice)
                    throw new i.b8({ functionality: "toolChoice" });
                  return { args: b, warnings: m };
                case "object-json":
                  throw new i.b8({ functionality: "object-json mode" });
                case "object-tool":
                  throw new i.b8({ functionality: "object-tool mode" });
                default:
                  throw Error(`Unsupported type: ${f}`);
              }
            }
            async doGenerate(e) {
              let { args: t, warnings: n } = this.getArgs(e),
                {
                  responseHeaders: i,
                  value: s,
                  rawValue: o,
                } = await (0, r.GU)({
                  url: this.config.url({
                    path: "/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), e.headers),
                  body: t,
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.cV)(b),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { prompt: l, ...d } = t,
                h = s.choices[0];
              return {
                text: h.text,
                usage: {
                  promptTokens: s.usage.prompt_tokens,
                  completionTokens: s.usage.completion_tokens,
                },
                finishReason: a(h.finish_reason),
                logprobs: y(h.logprobs),
                rawCall: { rawPrompt: l, rawSettings: d },
                rawResponse: { headers: i, body: o },
                response: u(s),
                warnings: n,
                request: { body: JSON.stringify(t) },
              };
            }
            async doStream(e) {
              let t,
                { args: n, warnings: i } = this.getArgs(e),
                s = {
                  ...n,
                  stream: !0,
                  stream_options:
                    "strict" === this.config.compatibility
                      ? { include_usage: !0 }
                      : void 0,
                },
                { responseHeaders: o, value: l } = await (0, r.GU)({
                  url: this.config.url({
                    path: "/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), e.headers),
                  body: s,
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.Ds)(x),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { prompt: d, ...h } = n,
                p = "unknown",
                f = { promptTokens: Number.NaN, completionTokens: Number.NaN },
                m = !0;
              return {
                stream: l.pipeThrough(
                  new TransformStream({
                    transform(e, n) {
                      if (!e.success) {
                        (p = "error"),
                          n.enqueue({ type: "error", error: e.error });
                        return;
                      }
                      let r = e.value;
                      if ("error" in r) {
                        (p = "error"),
                          n.enqueue({ type: "error", error: r.error });
                        return;
                      }
                      m &&
                        ((m = !1),
                        n.enqueue({ type: "response-metadata", ...u(r) })),
                        null != r.usage &&
                          (f = {
                            promptTokens: r.usage.prompt_tokens,
                            completionTokens: r.usage.completion_tokens,
                          });
                      let i = r.choices[0];
                      (null == i ? void 0 : i.finish_reason) != null &&
                        (p = a(i.finish_reason)),
                        (null == i ? void 0 : i.text) != null &&
                          n.enqueue({ type: "text-delta", textDelta: i.text });
                      let s = y(null == i ? void 0 : i.logprobs);
                      (null == s ? void 0 : s.length) &&
                        (void 0 === t && (t = []), t.push(...s));
                    },
                    flush(e) {
                      e.enqueue({
                        type: "finish",
                        finishReason: p,
                        logprobs: t,
                        usage: f,
                      });
                    },
                  }),
                ),
                rawCall: { rawPrompt: d, rawSettings: h },
                rawResponse: { headers: o },
                warnings: i,
                request: { body: JSON.stringify(s) },
              };
            }
          },
          b = s.Ik({
            id: s.Yj().nullish(),
            created: s.ai().nullish(),
            model: s.Yj().nullish(),
            choices: s.YO(
              s.Ik({
                text: s.Yj(),
                finish_reason: s.Yj(),
                logprobs: s
                  .Ik({
                    tokens: s.YO(s.Yj()),
                    token_logprobs: s.YO(s.ai()),
                    top_logprobs: s.YO(s.g1(s.Yj(), s.ai())).nullable(),
                  })
                  .nullish(),
              }),
            ),
            usage: s.Ik({ prompt_tokens: s.ai(), completion_tokens: s.ai() }),
          }),
          x = s.KC([
            s.Ik({
              id: s.Yj().nullish(),
              created: s.ai().nullish(),
              model: s.Yj().nullish(),
              choices: s.YO(
                s.Ik({
                  text: s.Yj(),
                  finish_reason: s.Yj().nullish(),
                  index: s.ai(),
                  logprobs: s
                    .Ik({
                      tokens: s.YO(s.Yj()),
                      token_logprobs: s.YO(s.ai()),
                      top_logprobs: s.YO(s.g1(s.Yj(), s.ai())).nullable(),
                    })
                    .nullish(),
                }),
              ),
              usage: s
                .Ik({ prompt_tokens: s.ai(), completion_tokens: s.ai() })
                .nullish(),
            }),
            l,
          ]),
          k = class {
            constructor(e, t, n) {
              (this.specificationVersion = "v1"),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
            }
            get provider() {
              return this.config.provider;
            }
            get maxEmbeddingsPerCall() {
              var e;
              return null != (e = this.settings.maxEmbeddingsPerCall)
                ? e
                : 2048;
            }
            get supportsParallelCalls() {
              var e;
              return null == (e = this.settings.supportsParallelCalls) || e;
            }
            async doEmbed({ values: e, headers: t, abortSignal: n }) {
              if (e.length > this.maxEmbeddingsPerCall)
                throw new i.Ch({
                  provider: this.provider,
                  modelId: this.modelId,
                  maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
                  values: e,
                });
              let { responseHeaders: s, value: o } = await (0, r.GU)({
                url: this.config.url({
                  path: "/embeddings",
                  modelId: this.modelId,
                }),
                headers: (0, r.m2)(this.config.headers(), t),
                body: {
                  model: this.modelId,
                  input: e,
                  encoding_format: "float",
                  dimensions: this.settings.dimensions,
                  user: this.settings.user,
                },
                failedResponseHandler: c,
                successfulResponseHandler: (0, r.cV)(w),
                abortSignal: n,
                fetch: this.config.fetch,
              });
              return {
                embeddings: o.data.map((e) => e.embedding),
                usage: o.usage ? { tokens: o.usage.prompt_tokens } : void 0,
                rawResponse: { headers: s },
              };
            }
          },
          w = s.Ik({
            data: s.YO(s.Ik({ embedding: s.YO(s.ai()) })),
            usage: s.Ik({ prompt_tokens: s.ai() }).nullish(),
          }),
          _ = { "dall-e-3": 1, "dall-e-2": 10, "gpt-image-1": 10 },
          O = new Set(["gpt-image-1"]),
          T = class {
            constructor(e, t, n) {
              (this.modelId = e),
                (this.settings = t),
                (this.config = n),
                (this.specificationVersion = "v1");
            }
            get maxImagesPerCall() {
              var e, t;
              return null !=
                (t =
                  null != (e = this.settings.maxImagesPerCall)
                    ? e
                    : _[this.modelId])
                ? t
                : 1;
            }
            get provider() {
              return this.config.provider;
            }
            async doGenerate({
              prompt: e,
              n: t,
              size: n,
              aspectRatio: i,
              seed: s,
              providerOptions: o,
              headers: a,
              abortSignal: l,
            }) {
              var u, d, h, p;
              let f = [];
              null != i &&
                f.push({
                  type: "unsupported-setting",
                  setting: "aspectRatio",
                  details:
                    "This model does not support aspect ratio. Use `size` instead.",
                }),
                null != s &&
                  f.push({ type: "unsupported-setting", setting: "seed" });
              let m =
                  null !=
                  (h =
                    null ==
                    (d =
                      null == (u = this.config._internal)
                        ? void 0
                        : u.currentDate)
                      ? void 0
                      : d.call(u))
                    ? h
                    : new Date(),
                { value: g, responseHeaders: y } = await (0, r.GU)({
                  url: this.config.url({
                    path: "/images/generations",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), a),
                  body: {
                    model: this.modelId,
                    prompt: e,
                    n: t,
                    size: n,
                    ...(null != (p = o.openai) ? p : {}),
                    ...(!O.has(this.modelId)
                      ? { response_format: "b64_json" }
                      : {}),
                  },
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.cV)(S),
                  abortSignal: l,
                  fetch: this.config.fetch,
                });
              return {
                images: g.data.map((e) => e.b64_json),
                warnings: f,
                response: { timestamp: m, modelId: this.modelId, headers: y },
              };
            }
          },
          S = s.Ik({ data: s.YO(s.Ik({ b64_json: s.Yj() })) }),
          E = s.Ik({
            include: s.YO(s.Yj()).nullish(),
            language: s.Yj().nullish(),
            prompt: s.Yj().nullish(),
            temperature: s.ai().min(0).max(1).nullish().default(0),
            timestampGranularities: s
              .YO(s.k5(["word", "segment"]))
              .nullish()
              .default(["segment"]),
          }),
          C = {
            afrikaans: "af",
            arabic: "ar",
            armenian: "hy",
            azerbaijani: "az",
            belarusian: "be",
            bosnian: "bs",
            bulgarian: "bg",
            catalan: "ca",
            chinese: "zh",
            croatian: "hr",
            czech: "cs",
            danish: "da",
            dutch: "nl",
            english: "en",
            estonian: "et",
            finnish: "fi",
            french: "fr",
            galician: "gl",
            german: "de",
            greek: "el",
            hebrew: "he",
            hindi: "hi",
            hungarian: "hu",
            icelandic: "is",
            indonesian: "id",
            italian: "it",
            japanese: "ja",
            kannada: "kn",
            kazakh: "kk",
            korean: "ko",
            latvian: "lv",
            lithuanian: "lt",
            macedonian: "mk",
            malay: "ms",
            marathi: "mr",
            maori: "mi",
            nepali: "ne",
            norwegian: "no",
            persian: "fa",
            polish: "pl",
            portuguese: "pt",
            romanian: "ro",
            russian: "ru",
            serbian: "sr",
            slovak: "sk",
            slovenian: "sl",
            spanish: "es",
            swahili: "sw",
            swedish: "sv",
            tagalog: "tl",
            tamil: "ta",
            thai: "th",
            turkish: "tr",
            ukrainian: "uk",
            urdu: "ur",
            vietnamese: "vi",
            welsh: "cy",
          },
          A = class {
            constructor(e, t) {
              (this.modelId = e),
                (this.config = t),
                (this.specificationVersion = "v1");
            }
            get provider() {
              return this.config.provider;
            }
            getArgs({ audio: e, mediaType: t, providerOptions: n }) {
              var i, s, o, a, l;
              let c = (0, r.xI)({
                  provider: "openai",
                  providerOptions: n,
                  schema: E,
                }),
                u = new FormData(),
                d =
                  e instanceof Uint8Array
                    ? new Blob([e])
                    : new Blob([(0, r.Z9)(e)]);
              if (
                (u.append("model", this.modelId),
                u.append("file", new File([d], "audio", { type: t })),
                c)
              ) {
                let e = {
                  include: null != (i = c.include) ? i : void 0,
                  language: null != (s = c.language) ? s : void 0,
                  prompt: null != (o = c.prompt) ? o : void 0,
                  temperature: null != (a = c.temperature) ? a : void 0,
                  timestamp_granularities:
                    null != (l = c.timestampGranularities) ? l : void 0,
                };
                for (let t in e) {
                  let n = e[t];
                  void 0 !== n && u.append(t, String(n));
                }
              }
              return { formData: u, warnings: [] };
            }
            async doGenerate(e) {
              var t, n, i, s, o, a;
              let l =
                  null !=
                  (i =
                    null ==
                    (n =
                      null == (t = this.config._internal)
                        ? void 0
                        : t.currentDate)
                      ? void 0
                      : n.call(t))
                    ? i
                    : new Date(),
                { formData: u, warnings: d } = this.getArgs(e),
                {
                  value: h,
                  responseHeaders: p,
                  rawValue: f,
                } = await (0, r.S)({
                  url: this.config.url({
                    path: "/audio/transcriptions",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), e.headers),
                  formData: u,
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.cV)(N),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                m =
                  null != h.language && h.language in C
                    ? C[h.language]
                    : void 0;
              return {
                text: h.text,
                segments:
                  null !=
                  (o =
                    null == (s = h.words)
                      ? void 0
                      : s.map((e) => ({
                          text: e.word,
                          startSecond: e.start,
                          endSecond: e.end,
                        })))
                    ? o
                    : [],
                language: m,
                durationInSeconds: null != (a = h.duration) ? a : void 0,
                warnings: d,
                response: {
                  timestamp: l,
                  modelId: this.modelId,
                  headers: p,
                  body: f,
                },
              };
            }
          },
          N = s.Ik({
            text: s.Yj(),
            language: s.Yj().nullish(),
            duration: s.ai().nullish(),
            words: s
              .YO(s.Ik({ word: s.Yj(), start: s.ai(), end: s.ai() }))
              .nullish(),
          });
        function I({ finishReason: e, hasToolCalls: t }) {
          switch (e) {
            case void 0:
            case null:
              return t ? "tool-calls" : "stop";
            case "max_output_tokens":
              return "length";
            case "content_filter":
              return "content-filter";
            default:
              return t ? "tool-calls" : "unknown";
          }
        }
        var D = class {
            constructor(e, t) {
              (this.specificationVersion = "v1"),
                (this.defaultObjectGenerationMode = "json"),
                (this.supportsStructuredOutputs = !0),
                (this.modelId = e),
                (this.config = t);
            }
            get provider() {
              return this.config.provider;
            }
            getArgs({
              mode: e,
              maxTokens: t,
              temperature: n,
              stopSequences: s,
              topP: o,
              topK: a,
              presencePenalty: l,
              frequencyPenalty: c,
              seed: u,
              prompt: d,
              providerMetadata: h,
              responseFormat: p,
            }) {
              var f, m, g, y;
              let v = [],
                b = (y = this.modelId).startsWith("o")
                  ? y.startsWith("o1-mini") || y.startsWith("o1-preview")
                    ? {
                        isReasoningModel: !0,
                        systemMessageMode: "remove",
                        requiredAutoTruncation: !1,
                      }
                    : {
                        isReasoningModel: !0,
                        systemMessageMode: "developer",
                        requiredAutoTruncation: !1,
                      }
                  : {
                      isReasoningModel: !1,
                      systemMessageMode: "system",
                      requiredAutoTruncation: !1,
                    },
                x = e.type;
              null != a &&
                v.push({ type: "unsupported-setting", setting: "topK" }),
                null != u &&
                  v.push({ type: "unsupported-setting", setting: "seed" }),
                null != l &&
                  v.push({
                    type: "unsupported-setting",
                    setting: "presencePenalty",
                  }),
                null != c &&
                  v.push({
                    type: "unsupported-setting",
                    setting: "frequencyPenalty",
                  }),
                null != s &&
                  v.push({
                    type: "unsupported-setting",
                    setting: "stopSequences",
                  });
              let { messages: k, warnings: w } = (function ({
                prompt: e,
                systemMessageMode: t,
              }) {
                let n = [],
                  s = [];
                for (let { role: o, content: a } of e)
                  switch (o) {
                    case "system":
                      switch (t) {
                        case "system":
                          n.push({ role: "system", content: a });
                          break;
                        case "developer":
                          n.push({ role: "developer", content: a });
                          break;
                        case "remove":
                          s.push({
                            type: "other",
                            message:
                              "system messages are removed for this model",
                          });
                          break;
                        default:
                          throw Error(`Unsupported system message mode: ${t}`);
                      }
                      break;
                    case "user":
                      n.push({
                        role: "user",
                        content: a.map((e, t) => {
                          var n, s, o, a;
                          switch (e.type) {
                            case "text":
                              return { type: "input_text", text: e.text };
                            case "image":
                              return {
                                type: "input_image",
                                image_url:
                                  e.image instanceof URL
                                    ? e.image.toString()
                                    : `data:${null != (n = e.mimeType) ? n : "image/jpeg"};base64,${(0, r.n_)(e.image)}`,
                                detail:
                                  null ==
                                  (o =
                                    null == (s = e.providerMetadata)
                                      ? void 0
                                      : s.openai)
                                    ? void 0
                                    : o.imageDetail,
                              };
                            case "file":
                              if (e.data instanceof URL)
                                throw new i.b8({
                                  functionality: "File URLs in user messages",
                                });
                              if ("application/pdf" === e.mimeType)
                                return {
                                  type: "input_file",
                                  filename:
                                    null != (a = e.filename)
                                      ? a
                                      : `part-${t}.pdf`,
                                  file_data: `data:application/pdf;base64,${e.data}`,
                                };
                              throw new i.b8({
                                functionality:
                                  "Only PDF files are supported in user messages",
                              });
                          }
                        }),
                      });
                      break;
                    case "assistant":
                      for (let e of a)
                        switch (e.type) {
                          case "text":
                            n.push({
                              role: "assistant",
                              content: [{ type: "output_text", text: e.text }],
                            });
                            break;
                          case "tool-call":
                            n.push({
                              type: "function_call",
                              call_id: e.toolCallId,
                              name: e.toolName,
                              arguments: JSON.stringify(e.args),
                            });
                        }
                      break;
                    case "tool":
                      for (let e of a)
                        n.push({
                          type: "function_call_output",
                          call_id: e.toolCallId,
                          output: JSON.stringify(e.result),
                        });
                      break;
                    default:
                      throw Error(`Unsupported role: ${o}`);
                  }
                return { messages: n, warnings: s };
              })({ prompt: d, systemMessageMode: b.systemMessageMode });
              v.push(...w);
              let _ = (0, r.xI)({
                  provider: "openai",
                  providerOptions: h,
                  schema: U,
                }),
                O = null == (f = null == _ ? void 0 : _.strictSchemas) || f,
                T = {
                  model: this.modelId,
                  input: k,
                  temperature: n,
                  top_p: o,
                  max_output_tokens: t,
                  ...((null == p ? void 0 : p.type) === "json" && {
                    text: {
                      format:
                        null != p.schema
                          ? {
                              type: "json_schema",
                              strict: O,
                              name: null != (m = p.name) ? m : "response",
                              description: p.description,
                              schema: p.schema,
                            }
                          : { type: "json_object" },
                    },
                  }),
                  metadata: null == _ ? void 0 : _.metadata,
                  parallel_tool_calls: null == _ ? void 0 : _.parallelToolCalls,
                  previous_response_id:
                    null == _ ? void 0 : _.previousResponseId,
                  store: null == _ ? void 0 : _.store,
                  user: null == _ ? void 0 : _.user,
                  instructions: null == _ ? void 0 : _.instructions,
                  ...(b.isReasoningModel &&
                    ((null == _ ? void 0 : _.reasoningEffort) != null ||
                      (null == _ ? void 0 : _.reasoningSummary) != null) && {
                      reasoning: {
                        ...((null == _ ? void 0 : _.reasoningEffort) !=
                          null && { effort: _.reasoningEffort }),
                        ...((null == _ ? void 0 : _.reasoningSummary) !=
                          null && { summary: _.reasoningSummary }),
                      },
                    }),
                  ...(b.requiredAutoTruncation && { truncation: "auto" }),
                };
              switch (
                (b.isReasoningModel &&
                  (null != T.temperature &&
                    ((T.temperature = void 0),
                    v.push({
                      type: "unsupported-setting",
                      setting: "temperature",
                      details:
                        "temperature is not supported for reasoning models",
                    })),
                  null != T.top_p &&
                    ((T.top_p = void 0),
                    v.push({
                      type: "unsupported-setting",
                      setting: "topP",
                      details: "topP is not supported for reasoning models",
                    }))),
                x)
              ) {
                case "regular": {
                  let {
                    tools: t,
                    tool_choice: n,
                    toolWarnings: r,
                  } = (function ({ mode: e, strict: t }) {
                    var n;
                    let r = (null == (n = e.tools) ? void 0 : n.length)
                        ? e.tools
                        : void 0,
                      s = [];
                    if (null == r)
                      return {
                        tools: void 0,
                        tool_choice: void 0,
                        toolWarnings: s,
                      };
                    let o = e.toolChoice,
                      a = [];
                    for (let e of r)
                      switch (e.type) {
                        case "function":
                          a.push({
                            type: "function",
                            name: e.name,
                            description: e.description,
                            parameters: e.parameters,
                            strict: !!t || void 0,
                          });
                          break;
                        case "provider-defined":
                          "openai.web_search_preview" === e.id
                            ? a.push({
                                type: "web_search_preview",
                                search_context_size: e.args.searchContextSize,
                                user_location: e.args.userLocation,
                              })
                            : s.push({ type: "unsupported-tool", tool: e });
                          break;
                        default:
                          s.push({ type: "unsupported-tool", tool: e });
                      }
                    if (null == o)
                      return { tools: a, tool_choice: void 0, toolWarnings: s };
                    let l = o.type;
                    switch (l) {
                      case "auto":
                      case "none":
                      case "required":
                        return { tools: a, tool_choice: l, toolWarnings: s };
                      case "tool":
                        if ("web_search_preview" === o.toolName)
                          return {
                            tools: a,
                            tool_choice: { type: "web_search_preview" },
                            toolWarnings: s,
                          };
                        return {
                          tools: a,
                          tool_choice: { type: "function", name: o.toolName },
                          toolWarnings: s,
                        };
                      default:
                        throw new i.b8({
                          functionality: `Unsupported tool choice type: ${l}`,
                        });
                    }
                  })({ mode: e, strict: O });
                  return {
                    args: { ...T, tools: t, tool_choice: n },
                    warnings: [...v, ...r],
                  };
                }
                case "object-json":
                  return {
                    args: {
                      ...T,
                      text: {
                        format:
                          null != e.schema
                            ? {
                                type: "json_schema",
                                strict: O,
                                name: null != (g = e.name) ? g : "response",
                                description: e.description,
                                schema: e.schema,
                              }
                            : { type: "json_object" },
                      },
                    },
                    warnings: v,
                  };
                case "object-tool":
                  return {
                    args: {
                      ...T,
                      tool_choice: { type: "function", name: e.tool.name },
                      tools: [
                        {
                          type: "function",
                          name: e.tool.name,
                          description: e.tool.description,
                          parameters: e.tool.parameters,
                          strict: O,
                        },
                      ],
                    },
                    warnings: v,
                  };
                default:
                  throw Error(`Unsupported type: ${x}`);
              }
            }
            async doGenerate(e) {
              var t, n, i, o, a, l, u;
              let { args: d, warnings: h } = this.getArgs(e),
                {
                  responseHeaders: p,
                  value: f,
                  rawValue: m,
                } = await (0, r.GU)({
                  url: this.config.url({
                    path: "/responses",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), e.headers),
                  body: d,
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.cV)(
                    s.Ik({
                      id: s.Yj(),
                      created_at: s.ai(),
                      model: s.Yj(),
                      output: s.YO(
                        s.gM("type", [
                          s.Ik({
                            type: s.eu("message"),
                            role: s.eu("assistant"),
                            content: s.YO(
                              s.Ik({
                                type: s.eu("output_text"),
                                text: s.Yj(),
                                annotations: s.YO(
                                  s.Ik({
                                    type: s.eu("url_citation"),
                                    start_index: s.ai(),
                                    end_index: s.ai(),
                                    url: s.Yj(),
                                    title: s.Yj(),
                                  }),
                                ),
                              }),
                            ),
                          }),
                          s.Ik({
                            type: s.eu("function_call"),
                            call_id: s.Yj(),
                            name: s.Yj(),
                            arguments: s.Yj(),
                          }),
                          s.Ik({ type: s.eu("web_search_call") }),
                          s.Ik({ type: s.eu("computer_call") }),
                          s.Ik({
                            type: s.eu("reasoning"),
                            summary: s.YO(
                              s.Ik({
                                type: s.eu("summary_text"),
                                text: s.Yj(),
                              }),
                            ),
                          }),
                        ]),
                      ),
                      incomplete_details: s.Ik({ reason: s.Yj() }).nullable(),
                      usage: P,
                    }),
                  ),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                g = f.output
                  .filter((e) => "message" === e.type)
                  .flatMap((e) => e.content)
                  .filter((e) => "output_text" === e.type),
                y = f.output
                  .filter((e) => "function_call" === e.type)
                  .map((e) => ({
                    toolCallType: "function",
                    toolCallId: e.call_id,
                    toolName: e.name,
                    args: e.arguments,
                  })),
                v =
                  null !=
                  (n =
                    null == (t = f.output.find((e) => "reasoning" === e.type))
                      ? void 0
                      : t.summary)
                    ? n
                    : null;
              return {
                text: g.map((e) => e.text).join("\n"),
                sources: g.flatMap((e) =>
                  e.annotations.map((e) => {
                    var t, n, i;
                    return {
                      sourceType: "url",
                      id:
                        null !=
                        (i =
                          null == (n = (t = this.config).generateId)
                            ? void 0
                            : n.call(t))
                          ? i
                          : (0, r.$C)(),
                      url: e.url,
                      title: e.title,
                    };
                  }),
                ),
                finishReason: I({
                  finishReason:
                    null == (i = f.incomplete_details) ? void 0 : i.reason,
                  hasToolCalls: y.length > 0,
                }),
                toolCalls: y.length > 0 ? y : void 0,
                reasoning: v
                  ? v.map((e) => ({ type: "text", text: e.text }))
                  : void 0,
                usage: {
                  promptTokens: f.usage.input_tokens,
                  completionTokens: f.usage.output_tokens,
                },
                rawCall: { rawPrompt: void 0, rawSettings: {} },
                rawResponse: { headers: p, body: m },
                request: { body: JSON.stringify(d) },
                response: {
                  id: f.id,
                  timestamp: new Date(1e3 * f.created_at),
                  modelId: f.model,
                },
                providerMetadata: {
                  openai: {
                    responseId: f.id,
                    cachedPromptTokens:
                      null !=
                      (a =
                        null == (o = f.usage.input_tokens_details)
                          ? void 0
                          : o.cached_tokens)
                        ? a
                        : null,
                    reasoningTokens:
                      null !=
                      (u =
                        null == (l = f.usage.output_tokens_details)
                          ? void 0
                          : l.reasoning_tokens)
                        ? u
                        : null,
                  },
                },
                warnings: h,
              };
            }
            async doStream(e) {
              let { args: t, warnings: n } = this.getArgs(e),
                { responseHeaders: i, value: s } = await (0, r.GU)({
                  url: this.config.url({
                    path: "/responses",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), e.headers),
                  body: { ...t, stream: !0 },
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.Ds)(q),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                o = this,
                a = "unknown",
                l = NaN,
                u = NaN,
                d = null,
                h = null,
                p = null,
                f = {},
                m = !1;
              return {
                stream: s.pipeThrough(
                  new TransformStream({
                    transform(e, t) {
                      var n, i, s, c, g, y, v, b, x;
                      if (!e.success) {
                        (a = "error"),
                          t.enqueue({ type: "error", error: e.error });
                        return;
                      }
                      let k = e.value;
                      if ("response.output_item.added" === k.type)
                        "function_call" === k.item.type &&
                          ((f[k.output_index] = {
                            toolName: k.item.name,
                            toolCallId: k.item.call_id,
                          }),
                          t.enqueue({
                            type: "tool-call-delta",
                            toolCallType: "function",
                            toolCallId: k.item.call_id,
                            toolName: k.item.name,
                            argsTextDelta: k.item.arguments,
                          }));
                      else if (
                        "response.function_call_arguments.delta" === k.type
                      ) {
                        let e = f[k.output_index];
                        null != e &&
                          t.enqueue({
                            type: "tool-call-delta",
                            toolCallType: "function",
                            toolCallId: e.toolCallId,
                            toolName: e.toolName,
                            argsTextDelta: k.delta,
                          });
                      } else {
                        "response.created" === k.type
                          ? ((p = k.response.id),
                            t.enqueue({
                              type: "response-metadata",
                              id: k.response.id,
                              timestamp: new Date(1e3 * k.response.created_at),
                              modelId: k.response.model,
                            }))
                          : "response.output_text.delta" === k.type
                            ? t.enqueue({
                                type: "text-delta",
                                textDelta: k.delta,
                              })
                            : "response.reasoning_summary_text.delta" === k.type
                              ? t.enqueue({
                                  type: "reasoning",
                                  textDelta: k.delta,
                                })
                              : "response.output_item.done" === k.type &&
                                  "function_call" === k.item.type
                                ? ((f[k.output_index] = void 0),
                                  (m = !0),
                                  t.enqueue({
                                    type: "tool-call",
                                    toolCallType: "function",
                                    toolCallId: k.item.call_id,
                                    toolName: k.item.name,
                                    args: k.item.arguments,
                                  }))
                                : "response.completed" === (x = k).type ||
                                    "response.incomplete" === x.type
                                  ? ((a = I({
                                      finishReason:
                                        null ==
                                        (n = k.response.incomplete_details)
                                          ? void 0
                                          : n.reason,
                                      hasToolCalls: m,
                                    })),
                                    (l = k.response.usage.input_tokens),
                                    (u = k.response.usage.output_tokens),
                                    (d =
                                      null !=
                                      (s =
                                        null ==
                                        (i =
                                          k.response.usage.input_tokens_details)
                                          ? void 0
                                          : i.cached_tokens)
                                        ? s
                                        : d),
                                    (h =
                                      null !=
                                      (g =
                                        null ==
                                        (c =
                                          k.response.usage
                                            .output_tokens_details)
                                          ? void 0
                                          : c.reasoning_tokens)
                                        ? g
                                        : h))
                                  : "response.output_text.annotation.added" ===
                                      k.type &&
                                    t.enqueue({
                                      type: "source",
                                      source: {
                                        sourceType: "url",
                                        id:
                                          null !=
                                          (b =
                                            null ==
                                            (v = (y = o.config).generateId)
                                              ? void 0
                                              : v.call(y))
                                            ? b
                                            : (0, r.$C)(),
                                        url: k.annotation.url,
                                        title: k.annotation.title,
                                      },
                                    });
                      }
                    },
                    flush(e) {
                      e.enqueue({
                        type: "finish",
                        finishReason: a,
                        usage: { promptTokens: l, completionTokens: u },
                        ...((null != d || null != h) && {
                          providerMetadata: {
                            openai: {
                              responseId: p,
                              cachedPromptTokens: d,
                              reasoningTokens: h,
                            },
                          },
                        }),
                      });
                    },
                  }),
                ),
                rawCall: { rawPrompt: void 0, rawSettings: {} },
                rawResponse: { headers: i },
                request: { body: JSON.stringify(t) },
                warnings: n,
              };
            }
          },
          P = s.Ik({
            input_tokens: s.ai(),
            input_tokens_details: s
              .Ik({ cached_tokens: s.ai().nullish() })
              .nullish(),
            output_tokens: s.ai(),
            output_tokens_details: s
              .Ik({ reasoning_tokens: s.ai().nullish() })
              .nullish(),
          }),
          R = s.Ik({ type: s.eu("response.output_text.delta"), delta: s.Yj() }),
          M = s.Ik({
            type: s.k5(["response.completed", "response.incomplete"]),
            response: s.Ik({
              incomplete_details: s.Ik({ reason: s.Yj() }).nullish(),
              usage: P,
            }),
          }),
          L = s.Ik({
            type: s.eu("response.created"),
            response: s.Ik({ id: s.Yj(), created_at: s.ai(), model: s.Yj() }),
          }),
          j = s.Ik({
            type: s.eu("response.output_item.done"),
            output_index: s.ai(),
            item: s.gM("type", [
              s.Ik({ type: s.eu("message") }),
              s.Ik({
                type: s.eu("function_call"),
                id: s.Yj(),
                call_id: s.Yj(),
                name: s.Yj(),
                arguments: s.Yj(),
                status: s.eu("completed"),
              }),
            ]),
          }),
          F = s.Ik({
            type: s.eu("response.function_call_arguments.delta"),
            item_id: s.Yj(),
            output_index: s.ai(),
            delta: s.Yj(),
          }),
          B = s.Ik({
            type: s.eu("response.output_item.added"),
            output_index: s.ai(),
            item: s.gM("type", [
              s.Ik({ type: s.eu("message") }),
              s.Ik({
                type: s.eu("function_call"),
                id: s.Yj(),
                call_id: s.Yj(),
                name: s.Yj(),
                arguments: s.Yj(),
              }),
            ]),
          }),
          z = s.Ik({
            type: s.eu("response.output_text.annotation.added"),
            annotation: s.Ik({
              type: s.eu("url_citation"),
              url: s.Yj(),
              title: s.Yj(),
            }),
          }),
          $ = s.Ik({
            type: s.eu("response.reasoning_summary_text.delta"),
            item_id: s.Yj(),
            output_index: s.ai(),
            summary_index: s.ai(),
            delta: s.Yj(),
          }),
          q = s.KC([
            R,
            M,
            L,
            j,
            F,
            B,
            z,
            $,
            s.Ik({ type: s.Yj() }).passthrough(),
          ]),
          U = s.Ik({
            metadata: s.bz().nullish(),
            parallelToolCalls: s.zM().nullish(),
            previousResponseId: s.Yj().nullish(),
            store: s.zM().nullish(),
            user: s.Yj().nullish(),
            reasoningEffort: s.Yj().nullish(),
            strictSchemas: s.zM().nullish(),
            instructions: s.Yj().nullish(),
            reasoningSummary: s.Yj().nullish(),
          }),
          H = s.Ik({}),
          Q = {
            webSearchPreview: function ({
              searchContextSize: e,
              userLocation: t,
            } = {}) {
              return {
                type: "provider-defined",
                id: "openai.web_search_preview",
                args: { searchContextSize: e, userLocation: t },
                parameters: H,
              };
            },
          },
          V = s.Ik({
            instructions: s.Yj().nullish(),
            speed: s.ai().min(0.25).max(4).default(1).nullish(),
          }),
          W = class {
            constructor(e, t) {
              (this.modelId = e),
                (this.config = t),
                (this.specificationVersion = "v1");
            }
            get provider() {
              return this.config.provider;
            }
            getArgs({
              text: e,
              voice: t = "alloy",
              outputFormat: n = "mp3",
              speed: i,
              instructions: s,
              providerOptions: o,
            }) {
              let a = [],
                l = (0, r.xI)({
                  provider: "openai",
                  providerOptions: o,
                  schema: V,
                }),
                c = {
                  model: this.modelId,
                  input: e,
                  voice: t,
                  response_format: "mp3",
                  speed: i,
                  instructions: s,
                };
              if (
                (n &&
                  (["mp3", "opus", "aac", "flac", "wav", "pcm"].includes(n)
                    ? (c.response_format = n)
                    : a.push({
                        type: "unsupported-setting",
                        setting: "outputFormat",
                        details: `Unsupported output format: ${n}. Using mp3 instead.`,
                      })),
                l)
              ) {
                let e = {};
                for (let t in e) {
                  let n = e[t];
                  void 0 !== n && (c[t] = n);
                }
              }
              return { requestBody: c, warnings: a };
            }
            async doGenerate(e) {
              var t, n, i;
              let s =
                  null !=
                  (i =
                    null ==
                    (n =
                      null == (t = this.config._internal)
                        ? void 0
                        : t.currentDate)
                      ? void 0
                      : n.call(t))
                    ? i
                    : new Date(),
                { requestBody: o, warnings: a } = this.getArgs(e),
                {
                  value: l,
                  responseHeaders: u,
                  rawValue: d,
                } = await (0, r.GU)({
                  url: this.config.url({
                    path: "/audio/speech",
                    modelId: this.modelId,
                  }),
                  headers: (0, r.m2)(this.config.headers(), e.headers),
                  body: o,
                  failedResponseHandler: c,
                  successfulResponseHandler: (0, r.HD)(),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                });
              return {
                audio: l,
                warnings: a,
                request: { body: JSON.stringify(o) },
                response: {
                  timestamp: s,
                  modelId: this.modelId,
                  headers: u,
                  body: d,
                },
              };
            }
          },
          Z = (function (e = {}) {
            var t, n, i;
            let s =
                null != (t = (0, r.ae)(e.baseURL))
                  ? t
                  : "https://api.openai.com/v1",
              o = null != (n = e.compatibility) ? n : "compatible",
              a = null != (i = e.name) ? i : "openai",
              l = () => ({
                Authorization: `Bearer ${(0, r.WL)({ apiKey: e.apiKey, environmentVariableName: "OPENAI_API_KEY", description: "OpenAI" })}`,
                "OpenAI-Organization": e.organization,
                "OpenAI-Project": e.project,
                ...e.headers,
              }),
              c = (t, n = {}) =>
                new d(t, n, {
                  provider: `${a}.chat`,
                  url: ({ path: e }) => `${s}${e}`,
                  headers: l,
                  compatibility: o,
                  fetch: e.fetch,
                }),
              u = (t, n = {}) =>
                new v(t, n, {
                  provider: `${a}.completion`,
                  url: ({ path: e }) => `${s}${e}`,
                  headers: l,
                  compatibility: o,
                  fetch: e.fetch,
                }),
              h = (t, n = {}) =>
                new k(t, n, {
                  provider: `${a}.embedding`,
                  url: ({ path: e }) => `${s}${e}`,
                  headers: l,
                  fetch: e.fetch,
                }),
              p = (t, n = {}) =>
                new T(t, n, {
                  provider: `${a}.image`,
                  url: ({ path: e }) => `${s}${e}`,
                  headers: l,
                  fetch: e.fetch,
                }),
              f = (t) =>
                new A(t, {
                  provider: `${a}.transcription`,
                  url: ({ path: e }) => `${s}${e}`,
                  headers: l,
                  fetch: e.fetch,
                }),
              m = (t) =>
                new W(t, {
                  provider: `${a}.speech`,
                  url: ({ path: e }) => `${s}${e}`,
                  headers: l,
                  fetch: e.fetch,
                }),
              g = (e, t) => {
                if (new.target)
                  throw Error(
                    "The OpenAI model function cannot be called with the new keyword.",
                  );
                return "gpt-3.5-turbo-instruct" === e ? u(e, t) : c(e, t);
              },
              y = function (e, t) {
                return g(e, t);
              };
            return (
              (y.languageModel = g),
              (y.chat = c),
              (y.completion = u),
              (y.responses = (t) =>
                new D(t, {
                  provider: `${a}.responses`,
                  url: ({ path: e }) => `${s}${e}`,
                  headers: l,
                  fetch: e.fetch,
                })),
              (y.embedding = h),
              (y.textEmbedding = h),
              (y.textEmbeddingModel = h),
              (y.image = p),
              (y.imageModel = p),
              (y.transcription = f),
              (y.transcriptionModel = f),
              (y.speech = m),
              (y.speechModel = m),
              (y.tools = Q),
              y
            );
          })({ compatibility: "strict" });
      },
      14478: (e, t, n) => {
        "use strict";
        n.d(t, { A: () => r });
        let r = (0, n(95255).A)("Grid3x3", [
          [
            "rect",
            {
              width: "18",
              height: "18",
              x: "3",
              y: "3",
              rx: "2",
              key: "afitv7",
            },
          ],
          ["path", { d: "M3 9h18", key: "1pudct" }],
          ["path", { d: "M3 15h18", key: "5xshup" }],
          ["path", { d: "M9 3v18", key: "fh3hqa" }],
          ["path", { d: "M15 3v18", key: "14nvp0" }],
        ]);
      },
      14555: (e, t, n) => {
        "use strict";
        n.d(t, { dw: () => u, p6: () => d, qw: () => l });
        var r = n(92858),
          i = n(43326),
          s = n(43758),
          o = n(13504);
        class a extends o.u {
          static [r.i] = "PgDateBuilder";
          constructor(e) {
            super(e, "date", "PgDate");
          }
          build(e) {
            return new l(e, this.config);
          }
        }
        class l extends s.Kl {
          static [r.i] = "PgDate";
          getSQLType() {
            return "date";
          }
          mapFromDriverValue(e) {
            return new Date(e);
          }
          mapToDriverValue(e) {
            return e.toISOString();
          }
        }
        class c extends o.u {
          static [r.i] = "PgDateStringBuilder";
          constructor(e) {
            super(e, "string", "PgDateString");
          }
          build(e) {
            return new u(e, this.config);
          }
        }
        class u extends s.Kl {
          static [r.i] = "PgDateString";
          getSQLType() {
            return "date";
          }
        }
        function d(e, t) {
          let { name: n, config: r } = (0, i.Ll)(e, t);
          return r?.mode === "date" ? new a(n) : new c(n);
        }
      },
      14604: (e, t, n) => {
        let { createProxy: r } = n(85493);
        e.exports = r(
          "E:\\downloads\\Hijraah\\node_modules\\.pnpm\\next@15.3.0-canary.31_@babe_be67f368de2727c847f3a61f5e6cf4fa\\node_modules\\next\\dist\\client\\script.js",
        );
      },
      14711: (e, t, n) => {
        "use strict";
        n.d(t, { A: () => r });
        let r = (0, n(95255).A)("Share2", [
          ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }],
          ["circle", { cx: "6", cy: "12", r: "3", key: "w7nqdw" }],
          ["circle", { cx: "18", cy: "19", r: "3", key: "1xt0gg" }],
          [
            "line",
            {
              x1: "8.59",
              x2: "15.42",
              y1: "13.51",
              y2: "17.49",
              key: "47mynk",
            },
          ],
          [
            "line",
            { x1: "15.41", x2: "8.59", y1: "6.51", y2: "10.49", key: "1n3mei" },
          ],
        ]);
      },
      14795: (e, t, n) => {
        "use strict";
        n.d(t, { j2: () => i });
        var r = n(84001);
        async function i() {
          return (await (0, r.WV)()).session;
        }
        n(57011), n(67761), n(29244);
      },
      15642: (e, t, n) => {
        "use strict";
        var r = Object.defineProperty,
          i = Object.getOwnPropertyDescriptor,
          s = Object.getOwnPropertyNames,
          o = Object.prototype.hasOwnProperty,
          a = {};
        ((e, t) => {
          for (var n in t) r(e, n, { get: t[n], enumerable: !0 });
        })(a, {
          OpenAICompatibleChatLanguageModel: () => b,
          OpenAICompatibleCompletionLanguageModel: () => E,
          OpenAICompatibleEmbeddingModel: () => P,
          OpenAICompatibleImageModel: () => j,
          createOpenAICompatible: () => z,
        }),
          (e.exports = ((e, t, n, a) => {
            if ((t && "object" == typeof t) || "function" == typeof t)
              for (let l of s(t))
                o.call(e, l) ||
                  l === n ||
                  r(e, l, {
                    get: () => t[l],
                    enumerable: !(a = i(t, l)) || a.enumerable,
                  });
            return e;
          })(r({}, "__esModule", { value: !0 }), a));
        var l = n(50289),
          c = n(70417),
          u = n(30879),
          d = n(50289),
          h = n(70417);
        function p(e) {
          var t, n;
          return null !=
            (n =
              null == (t = null == e ? void 0 : e.providerMetadata)
                ? void 0
                : t.openaiCompatible)
            ? n
            : {};
        }
        function f({ id: e, model: t, created: n }) {
          return {
            id: null != e ? e : void 0,
            modelId: null != t ? t : void 0,
            timestamp: null != n ? new Date(1e3 * n) : void 0,
          };
        }
        function m(e) {
          switch (e) {
            case "stop":
              return "stop";
            case "length":
              return "length";
            case "content_filter":
              return "content-filter";
            case "function_call":
            case "tool_calls":
              return "tool-calls";
            default:
              return "unknown";
          }
        }
        var g = n(30879),
          y = {
            errorSchema: g.z.object({
              error: g.z.object({
                message: g.z.string(),
                type: g.z.string().nullish(),
                param: g.z.any().nullish(),
                code: g.z.union([g.z.string(), g.z.number()]).nullish(),
              }),
            }),
            errorToMessage: (e) => e.error.message,
          },
          v = n(50289),
          b = class {
            constructor(e, t, n) {
              var r, i;
              (this.specificationVersion = "v1"),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
              let s = null != (r = n.errorStructure) ? r : y;
              (this.chunkSchema = w(s.errorSchema)),
                (this.failedResponseHandler = (0,
                c.createJsonErrorResponseHandler)(s)),
                (this.supportsStructuredOutputs =
                  null != (i = n.supportsStructuredOutputs) && i);
            }
            get defaultObjectGenerationMode() {
              return this.config.defaultObjectGenerationMode;
            }
            get provider() {
              return this.config.provider;
            }
            get providerOptionsName() {
              return this.config.provider.split(".")[0].trim();
            }
            getArgs({
              mode: e,
              prompt: t,
              maxTokens: n,
              temperature: r,
              topP: i,
              topK: s,
              frequencyPenalty: o,
              presencePenalty: a,
              providerMetadata: l,
              stopSequences: c,
              responseFormat: u,
              seed: f,
            }) {
              var m, g, y, b, x;
              let k = e.type,
                w = [];
              null != s &&
                w.push({ type: "unsupported-setting", setting: "topK" }),
                (null == u ? void 0 : u.type) !== "json" ||
                  null == u.schema ||
                  this.supportsStructuredOutputs ||
                  w.push({
                    type: "unsupported-setting",
                    setting: "responseFormat",
                    details:
                      "JSON response format schema is only supported with structuredOutputs",
                  });
              let _ = {
                model: this.modelId,
                user: this.settings.user,
                max_tokens: n,
                temperature: r,
                top_p: i,
                frequency_penalty: o,
                presence_penalty: a,
                response_format:
                  (null == u ? void 0 : u.type) === "json"
                    ? !0 === this.supportsStructuredOutputs && null != u.schema
                      ? {
                          type: "json_schema",
                          json_schema: {
                            schema: u.schema,
                            name: null != (m = u.name) ? m : "response",
                            description: u.description,
                          },
                        }
                      : { type: "json_object" }
                    : void 0,
                stop: c,
                seed: f,
                ...(null == l ? void 0 : l[this.providerOptionsName]),
                reasoning_effort:
                  null !=
                  (b =
                    null ==
                    (g = null == l ? void 0 : l[this.providerOptionsName])
                      ? void 0
                      : g.reasoningEffort)
                    ? b
                    : null == (y = null == l ? void 0 : l["openai-compatible"])
                      ? void 0
                      : y.reasoningEffort,
                messages: (function (e) {
                  let t = [];
                  for (let { role: n, content: r, ...i } of e) {
                    let e = p({ ...i });
                    switch (n) {
                      case "system":
                        t.push({ role: "system", content: r, ...e });
                        break;
                      case "user":
                        if (1 === r.length && "text" === r[0].type) {
                          t.push({
                            role: "user",
                            content: r[0].text,
                            ...p(r[0]),
                          });
                          break;
                        }
                        t.push({
                          role: "user",
                          content: r.map((e) => {
                            var t;
                            let n = p(e);
                            switch (e.type) {
                              case "text":
                                return { type: "text", text: e.text, ...n };
                              case "image":
                                return {
                                  type: "image_url",
                                  image_url: {
                                    url:
                                      e.image instanceof URL
                                        ? e.image.toString()
                                        : `data:${null != (t = e.mimeType) ? t : "image/jpeg"};base64,${(0, h.convertUint8ArrayToBase64)(e.image)}`,
                                  },
                                  ...n,
                                };
                              case "file":
                                throw new d.UnsupportedFunctionalityError({
                                  functionality:
                                    "File content parts in user messages",
                                });
                            }
                          }),
                          ...e,
                        });
                        break;
                      case "assistant": {
                        let n = "",
                          i = [];
                        for (let e of r) {
                          let t = p(e);
                          switch (e.type) {
                            case "text":
                              n += e.text;
                              break;
                            case "tool-call":
                              i.push({
                                id: e.toolCallId,
                                type: "function",
                                function: {
                                  name: e.toolName,
                                  arguments: JSON.stringify(e.args),
                                },
                                ...t,
                              });
                          }
                        }
                        t.push({
                          role: "assistant",
                          content: n,
                          tool_calls: i.length > 0 ? i : void 0,
                          ...e,
                        });
                        break;
                      }
                      case "tool":
                        for (let e of r) {
                          let n = p(e);
                          t.push({
                            role: "tool",
                            tool_call_id: e.toolCallId,
                            content: JSON.stringify(e.result),
                            ...n,
                          });
                        }
                        break;
                      default:
                        throw Error(`Unsupported role: ${n}`);
                    }
                  }
                  return t;
                })(t),
              };
              switch (k) {
                case "regular": {
                  let {
                    tools: t,
                    tool_choice: n,
                    toolWarnings: r,
                  } = (function ({ mode: e, structuredOutputs: t }) {
                    var n;
                    let r = (null == (n = e.tools) ? void 0 : n.length)
                        ? e.tools
                        : void 0,
                      i = [];
                    if (null == r)
                      return {
                        tools: void 0,
                        tool_choice: void 0,
                        toolWarnings: i,
                      };
                    let s = e.toolChoice,
                      o = [];
                    for (let e of r)
                      "provider-defined" === e.type
                        ? i.push({ type: "unsupported-tool", tool: e })
                        : o.push({
                            type: "function",
                            function: {
                              name: e.name,
                              description: e.description,
                              parameters: e.parameters,
                            },
                          });
                    if (null == s)
                      return { tools: o, tool_choice: void 0, toolWarnings: i };
                    let a = s.type;
                    switch (a) {
                      case "auto":
                      case "none":
                      case "required":
                        return { tools: o, tool_choice: a, toolWarnings: i };
                      case "tool":
                        return {
                          tools: o,
                          tool_choice: {
                            type: "function",
                            function: { name: s.toolName },
                          },
                          toolWarnings: i,
                        };
                      default:
                        throw new v.UnsupportedFunctionalityError({
                          functionality: `Unsupported tool choice type: ${a}`,
                        });
                    }
                  })({
                    mode: e,
                    structuredOutputs: this.supportsStructuredOutputs,
                  });
                  return {
                    args: { ..._, tools: t, tool_choice: n },
                    warnings: [...w, ...r],
                  };
                }
                case "object-json":
                  return {
                    args: {
                      ..._,
                      response_format:
                        !0 === this.supportsStructuredOutputs &&
                        null != e.schema
                          ? {
                              type: "json_schema",
                              json_schema: {
                                schema: e.schema,
                                name: null != (x = e.name) ? x : "response",
                                description: e.description,
                              },
                            }
                          : { type: "json_object" },
                    },
                    warnings: w,
                  };
                case "object-tool":
                  return {
                    args: {
                      ..._,
                      tool_choice: {
                        type: "function",
                        function: { name: e.tool.name },
                      },
                      tools: [
                        {
                          type: "function",
                          function: {
                            name: e.tool.name,
                            description: e.tool.description,
                            parameters: e.tool.parameters,
                          },
                        },
                      ],
                    },
                    warnings: w,
                  };
                default:
                  throw Error(`Unsupported type: ${k}`);
              }
            }
            async doGenerate(e) {
              var t, n, r, i, s, o, a, l, u, d, h;
              let { args: p, warnings: g } = this.getArgs({ ...e }),
                y = JSON.stringify(p),
                {
                  responseHeaders: v,
                  value: b,
                  rawValue: x,
                } = await (0, c.postJsonToApi)({
                  url: this.config.url({
                    path: "/chat/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, c.combineHeaders)(
                    this.config.headers(),
                    e.headers,
                  ),
                  body: p,
                  failedResponseHandler: this.failedResponseHandler,
                  successfulResponseHandler: (0, c.createJsonResponseHandler)(
                    k,
                  ),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { messages: w, ..._ } = p,
                O = b.choices[0],
                T = {
                  [this.providerOptionsName]: {},
                  ...(null ==
                  (n =
                    null == (t = this.config.metadataExtractor)
                      ? void 0
                      : t.extractMetadata)
                    ? void 0
                    : n.call(t, { parsedBody: x })),
                },
                S =
                  null == (r = b.usage) ? void 0 : r.completion_tokens_details,
                E = null == (i = b.usage) ? void 0 : i.prompt_tokens_details;
              return (
                (null == S ? void 0 : S.reasoning_tokens) != null &&
                  (T[this.providerOptionsName].reasoningTokens =
                    null == S ? void 0 : S.reasoning_tokens),
                (null == S ? void 0 : S.accepted_prediction_tokens) != null &&
                  (T[this.providerOptionsName].acceptedPredictionTokens =
                    null == S ? void 0 : S.accepted_prediction_tokens),
                (null == S ? void 0 : S.rejected_prediction_tokens) != null &&
                  (T[this.providerOptionsName].rejectedPredictionTokens =
                    null == S ? void 0 : S.rejected_prediction_tokens),
                (null == E ? void 0 : E.cached_tokens) != null &&
                  (T[this.providerOptionsName].cachedPromptTokens =
                    null == E ? void 0 : E.cached_tokens),
                {
                  text: null != (s = O.message.content) ? s : void 0,
                  reasoning:
                    null != (o = O.message.reasoning_content) ? o : void 0,
                  toolCalls:
                    null == (a = O.message.tool_calls)
                      ? void 0
                      : a.map((e) => {
                          var t;
                          return {
                            toolCallType: "function",
                            toolCallId:
                              null != (t = e.id) ? t : (0, c.generateId)(),
                            toolName: e.function.name,
                            args: e.function.arguments,
                          };
                        }),
                  finishReason: m(O.finish_reason),
                  usage: {
                    promptTokens:
                      null !=
                      (u = null == (l = b.usage) ? void 0 : l.prompt_tokens)
                        ? u
                        : NaN,
                    completionTokens:
                      null !=
                      (h = null == (d = b.usage) ? void 0 : d.completion_tokens)
                        ? h
                        : NaN,
                  },
                  providerMetadata: T,
                  rawCall: { rawPrompt: w, rawSettings: _ },
                  rawResponse: { headers: v, body: x },
                  response: f(b),
                  warnings: g,
                  request: { body: y },
                }
              );
            }
            async doStream(e) {
              var t;
              if (this.settings.simulateStreaming) {
                let t = await this.doGenerate(e);
                return {
                  stream: new ReadableStream({
                    start(e) {
                      if (
                        (e.enqueue({
                          type: "response-metadata",
                          ...t.response,
                        }),
                        t.reasoning)
                      )
                        if (Array.isArray(t.reasoning))
                          for (let n of t.reasoning)
                            "text" === n.type &&
                              e.enqueue({
                                type: "reasoning",
                                textDelta: n.text,
                              });
                        else
                          e.enqueue({
                            type: "reasoning",
                            textDelta: t.reasoning,
                          });
                      if (
                        (t.text &&
                          e.enqueue({ type: "text-delta", textDelta: t.text }),
                        t.toolCalls)
                      )
                        for (let n of t.toolCalls)
                          e.enqueue({ type: "tool-call", ...n });
                      e.enqueue({
                        type: "finish",
                        finishReason: t.finishReason,
                        usage: t.usage,
                        logprobs: t.logprobs,
                        providerMetadata: t.providerMetadata,
                      }),
                        e.close();
                    },
                  }),
                  rawCall: t.rawCall,
                  rawResponse: t.rawResponse,
                  warnings: t.warnings,
                };
              }
              let { args: n, warnings: r } = this.getArgs({ ...e }),
                i = {
                  ...n,
                  stream: !0,
                  stream_options: this.config.includeUsage
                    ? { include_usage: !0 }
                    : void 0,
                },
                s =
                  null == (t = this.config.metadataExtractor)
                    ? void 0
                    : t.createStreamExtractor(),
                { responseHeaders: o, value: a } = await (0, c.postJsonToApi)({
                  url: this.config.url({
                    path: "/chat/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, c.combineHeaders)(
                    this.config.headers(),
                    e.headers,
                  ),
                  body: i,
                  failedResponseHandler: this.failedResponseHandler,
                  successfulResponseHandler: (0,
                  c.createEventSourceResponseHandler)(this.chunkSchema),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { messages: u, ...d } = n,
                h = [],
                p = "unknown",
                g = {
                  completionTokens: void 0,
                  completionTokensDetails: {
                    reasoningTokens: void 0,
                    acceptedPredictionTokens: void 0,
                    rejectedPredictionTokens: void 0,
                  },
                  promptTokens: void 0,
                  promptTokensDetails: { cachedTokens: void 0 },
                },
                y = !0,
                v = this.providerOptionsName;
              return {
                stream: a.pipeThrough(
                  new TransformStream({
                    transform(e, t) {
                      var n, r, i, o, a, u, d, v, b, x, k, w;
                      if (!e.success) {
                        (p = "error"),
                          t.enqueue({ type: "error", error: e.error });
                        return;
                      }
                      let _ = e.value;
                      if (
                        (null == s || s.processChunk(e.rawValue), "error" in _)
                      ) {
                        (p = "error"),
                          t.enqueue({ type: "error", error: _.error.message });
                        return;
                      }
                      if (
                        (y &&
                          ((y = !1),
                          t.enqueue({ type: "response-metadata", ...f(_) })),
                        null != _.usage)
                      ) {
                        let {
                          prompt_tokens: e,
                          completion_tokens: t,
                          prompt_tokens_details: n,
                          completion_tokens_details: r,
                        } = _.usage;
                        (g.promptTokens = null != e ? e : void 0),
                          (g.completionTokens = null != t ? t : void 0),
                          (null == r ? void 0 : r.reasoning_tokens) != null &&
                            (g.completionTokensDetails.reasoningTokens =
                              null == r ? void 0 : r.reasoning_tokens),
                          (null == r ? void 0 : r.accepted_prediction_tokens) !=
                            null &&
                            (g.completionTokensDetails.acceptedPredictionTokens =
                              null == r
                                ? void 0
                                : r.accepted_prediction_tokens),
                          (null == r ? void 0 : r.rejected_prediction_tokens) !=
                            null &&
                            (g.completionTokensDetails.rejectedPredictionTokens =
                              null == r
                                ? void 0
                                : r.rejected_prediction_tokens),
                          (null == n ? void 0 : n.cached_tokens) != null &&
                            (g.promptTokensDetails.cachedTokens =
                              null == n ? void 0 : n.cached_tokens);
                      }
                      let O = _.choices[0];
                      if (
                        ((null == O ? void 0 : O.finish_reason) != null &&
                          (p = m(O.finish_reason)),
                        (null == O ? void 0 : O.delta) == null)
                      )
                        return;
                      let T = O.delta;
                      if (
                        (null != T.reasoning_content &&
                          t.enqueue({
                            type: "reasoning",
                            textDelta: T.reasoning_content,
                          }),
                        null != T.content &&
                          t.enqueue({
                            type: "text-delta",
                            textDelta: T.content,
                          }),
                        null != T.tool_calls)
                      )
                        for (let e of T.tool_calls) {
                          let s = e.index;
                          if (null == h[s]) {
                            if ("function" !== e.type)
                              throw new l.InvalidResponseDataError({
                                data: e,
                                message: "Expected 'function' type.",
                              });
                            if (null == e.id)
                              throw new l.InvalidResponseDataError({
                                data: e,
                                message: "Expected 'id' to be a string.",
                              });
                            if (
                              (null == (n = e.function) ? void 0 : n.name) ==
                              null
                            )
                              throw new l.InvalidResponseDataError({
                                data: e,
                                message:
                                  "Expected 'function.name' to be a string.",
                              });
                            h[s] = {
                              id: e.id,
                              type: "function",
                              function: {
                                name: e.function.name,
                                arguments:
                                  null != (r = e.function.arguments) ? r : "",
                              },
                              hasFinished: !1,
                            };
                            let u = h[s];
                            (null == (i = u.function) ? void 0 : i.name) !=
                              null &&
                              (null == (o = u.function)
                                ? void 0
                                : o.arguments) != null &&
                              (u.function.arguments.length > 0 &&
                                t.enqueue({
                                  type: "tool-call-delta",
                                  toolCallType: "function",
                                  toolCallId: u.id,
                                  toolName: u.function.name,
                                  argsTextDelta: u.function.arguments,
                                }),
                              (0, c.isParsableJson)(u.function.arguments) &&
                                (t.enqueue({
                                  type: "tool-call",
                                  toolCallType: "function",
                                  toolCallId:
                                    null != (a = u.id)
                                      ? a
                                      : (0, c.generateId)(),
                                  toolName: u.function.name,
                                  args: u.function.arguments,
                                }),
                                (u.hasFinished = !0)));
                            continue;
                          }
                          let p = h[s];
                          !p.hasFinished &&
                            ((null == (u = e.function)
                              ? void 0
                              : u.arguments) != null &&
                              (p.function.arguments +=
                                null !=
                                (v =
                                  null == (d = e.function)
                                    ? void 0
                                    : d.arguments)
                                  ? v
                                  : ""),
                            t.enqueue({
                              type: "tool-call-delta",
                              toolCallType: "function",
                              toolCallId: p.id,
                              toolName: p.function.name,
                              argsTextDelta:
                                null != (b = e.function.arguments) ? b : "",
                            }),
                            (null == (x = p.function) ? void 0 : x.name) !=
                              null &&
                              (null == (k = p.function)
                                ? void 0
                                : k.arguments) != null &&
                              (0, c.isParsableJson)(p.function.arguments) &&
                              (t.enqueue({
                                type: "tool-call",
                                toolCallType: "function",
                                toolCallId:
                                  null != (w = p.id) ? w : (0, c.generateId)(),
                                toolName: p.function.name,
                                args: p.function.arguments,
                              }),
                              (p.hasFinished = !0)));
                        }
                    },
                    flush(e) {
                      var t, n;
                      let r = {
                        [v]: {},
                        ...(null == s ? void 0 : s.buildMetadata()),
                      };
                      null != g.completionTokensDetails.reasoningTokens &&
                        (r[v].reasoningTokens =
                          g.completionTokensDetails.reasoningTokens),
                        null !=
                          g.completionTokensDetails.acceptedPredictionTokens &&
                          (r[v].acceptedPredictionTokens =
                            g.completionTokensDetails.acceptedPredictionTokens),
                        null !=
                          g.completionTokensDetails.rejectedPredictionTokens &&
                          (r[v].rejectedPredictionTokens =
                            g.completionTokensDetails.rejectedPredictionTokens),
                        null != g.promptTokensDetails.cachedTokens &&
                          (r[v].cachedPromptTokens =
                            g.promptTokensDetails.cachedTokens),
                        e.enqueue({
                          type: "finish",
                          finishReason: p,
                          usage: {
                            promptTokens:
                              null != (t = g.promptTokens) ? t : NaN,
                            completionTokens:
                              null != (n = g.completionTokens) ? n : NaN,
                          },
                          providerMetadata: r,
                        });
                    },
                  }),
                ),
                rawCall: { rawPrompt: u, rawSettings: d },
                rawResponse: { headers: o },
                warnings: r,
                request: { body: JSON.stringify(i) },
              };
            }
          },
          x = u.z
            .object({
              prompt_tokens: u.z.number().nullish(),
              completion_tokens: u.z.number().nullish(),
              prompt_tokens_details: u.z
                .object({ cached_tokens: u.z.number().nullish() })
                .nullish(),
              completion_tokens_details: u.z
                .object({
                  reasoning_tokens: u.z.number().nullish(),
                  accepted_prediction_tokens: u.z.number().nullish(),
                  rejected_prediction_tokens: u.z.number().nullish(),
                })
                .nullish(),
            })
            .nullish(),
          k = u.z.object({
            id: u.z.string().nullish(),
            created: u.z.number().nullish(),
            model: u.z.string().nullish(),
            choices: u.z.array(
              u.z.object({
                message: u.z.object({
                  role: u.z.literal("assistant").nullish(),
                  content: u.z.string().nullish(),
                  reasoning_content: u.z.string().nullish(),
                  tool_calls: u.z
                    .array(
                      u.z.object({
                        id: u.z.string().nullish(),
                        type: u.z.literal("function"),
                        function: u.z.object({
                          name: u.z.string(),
                          arguments: u.z.string(),
                        }),
                      }),
                    )
                    .nullish(),
                }),
                finish_reason: u.z.string().nullish(),
              }),
            ),
            usage: x,
          }),
          w = (e) =>
            u.z.union([
              u.z.object({
                id: u.z.string().nullish(),
                created: u.z.number().nullish(),
                model: u.z.string().nullish(),
                choices: u.z.array(
                  u.z.object({
                    delta: u.z
                      .object({
                        role: u.z.enum(["assistant"]).nullish(),
                        content: u.z.string().nullish(),
                        reasoning_content: u.z.string().nullish(),
                        tool_calls: u.z
                          .array(
                            u.z.object({
                              index: u.z.number(),
                              id: u.z.string().nullish(),
                              type: u.z.literal("function").nullish(),
                              function: u.z.object({
                                name: u.z.string().nullish(),
                                arguments: u.z.string().nullish(),
                              }),
                            }),
                          )
                          .nullish(),
                      })
                      .nullish(),
                    finish_reason: u.z.string().nullish(),
                  }),
                ),
                usage: x,
              }),
              e,
            ]),
          _ = n(50289),
          O = n(70417),
          T = n(30879),
          S = n(50289),
          E = class {
            constructor(e, t, n) {
              var r;
              (this.specificationVersion = "v1"),
                (this.defaultObjectGenerationMode = void 0),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
              let i = null != (r = n.errorStructure) ? r : y;
              (this.chunkSchema = A(i.errorSchema)),
                (this.failedResponseHandler = (0,
                O.createJsonErrorResponseHandler)(i));
            }
            get provider() {
              return this.config.provider;
            }
            get providerOptionsName() {
              return this.config.provider.split(".")[0].trim();
            }
            getArgs({
              mode: e,
              inputFormat: t,
              prompt: n,
              maxTokens: r,
              temperature: i,
              topP: s,
              topK: o,
              frequencyPenalty: a,
              presencePenalty: l,
              stopSequences: c,
              responseFormat: u,
              seed: d,
              providerMetadata: h,
            }) {
              var p;
              let f = e.type,
                m = [];
              null != o &&
                m.push({ type: "unsupported-setting", setting: "topK" }),
                null != u &&
                  "text" !== u.type &&
                  m.push({
                    type: "unsupported-setting",
                    setting: "responseFormat",
                    details: "JSON response format is not supported.",
                  });
              let { prompt: g, stopSequences: y } = (function ({
                  prompt: e,
                  inputFormat: t,
                  user: n = "user",
                  assistant: r = "assistant",
                }) {
                  if (
                    "prompt" === t &&
                    1 === e.length &&
                    "user" === e[0].role &&
                    1 === e[0].content.length &&
                    "text" === e[0].content[0].type
                  )
                    return { prompt: e[0].content[0].text };
                  let i = "";
                  for (let { role: t, content: s } of ("system" === e[0].role &&
                    ((i += `${e[0].content}

`),
                    (e = e.slice(1))),
                  e))
                    switch (t) {
                      case "system":
                        throw new S.InvalidPromptError({
                          message:
                            "Unexpected system message in prompt: ${content}",
                          prompt: e,
                        });
                      case "user": {
                        let e = s
                          .map((e) => {
                            switch (e.type) {
                              case "text":
                                return e.text;
                              case "image":
                                throw new S.UnsupportedFunctionalityError({
                                  functionality: "images",
                                });
                            }
                          })
                          .join("");
                        i += `${n}:
${e}

`;
                        break;
                      }
                      case "assistant": {
                        let e = s
                          .map((e) => {
                            switch (e.type) {
                              case "text":
                                return e.text;
                              case "tool-call":
                                throw new S.UnsupportedFunctionalityError({
                                  functionality: "tool-call messages",
                                });
                            }
                          })
                          .join("");
                        i += `${r}:
${e}

`;
                        break;
                      }
                      case "tool":
                        throw new S.UnsupportedFunctionalityError({
                          functionality: "tool messages",
                        });
                      default:
                        throw Error(`Unsupported role: ${t}`);
                    }
                  return {
                    prompt: (i += `${r}:
`),
                    stopSequences: [
                      `
${n}:`,
                    ],
                  };
                })({ prompt: n, inputFormat: t }),
                v = [...(null != y ? y : []), ...(null != c ? c : [])],
                b = {
                  model: this.modelId,
                  echo: this.settings.echo,
                  logit_bias: this.settings.logitBias,
                  suffix: this.settings.suffix,
                  user: this.settings.user,
                  max_tokens: r,
                  temperature: i,
                  top_p: s,
                  frequency_penalty: a,
                  presence_penalty: l,
                  seed: d,
                  ...(null == h ? void 0 : h[this.providerOptionsName]),
                  prompt: g,
                  stop: v.length > 0 ? v : void 0,
                };
              switch (f) {
                case "regular":
                  if (null == (p = e.tools) ? void 0 : p.length)
                    throw new _.UnsupportedFunctionalityError({
                      functionality: "tools",
                    });
                  if (e.toolChoice)
                    throw new _.UnsupportedFunctionalityError({
                      functionality: "toolChoice",
                    });
                  return { args: b, warnings: m };
                case "object-json":
                  throw new _.UnsupportedFunctionalityError({
                    functionality: "object-json mode",
                  });
                case "object-tool":
                  throw new _.UnsupportedFunctionalityError({
                    functionality: "object-tool mode",
                  });
                default:
                  throw Error(`Unsupported type: ${f}`);
              }
            }
            async doGenerate(e) {
              var t, n, r, i;
              let { args: s, warnings: o } = this.getArgs(e),
                {
                  responseHeaders: a,
                  value: l,
                  rawValue: c,
                } = await (0, O.postJsonToApi)({
                  url: this.config.url({
                    path: "/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, O.combineHeaders)(
                    this.config.headers(),
                    e.headers,
                  ),
                  body: s,
                  failedResponseHandler: this.failedResponseHandler,
                  successfulResponseHandler: (0, O.createJsonResponseHandler)(
                    C,
                  ),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { prompt: u, ...d } = s,
                h = l.choices[0];
              return {
                text: h.text,
                usage: {
                  promptTokens:
                    null !=
                    (n = null == (t = l.usage) ? void 0 : t.prompt_tokens)
                      ? n
                      : NaN,
                  completionTokens:
                    null !=
                    (i = null == (r = l.usage) ? void 0 : r.completion_tokens)
                      ? i
                      : NaN,
                },
                finishReason: m(h.finish_reason),
                rawCall: { rawPrompt: u, rawSettings: d },
                rawResponse: { headers: a, body: c },
                response: f(l),
                warnings: o,
                request: { body: JSON.stringify(s) },
              };
            }
            async doStream(e) {
              let { args: t, warnings: n } = this.getArgs(e),
                r = {
                  ...t,
                  stream: !0,
                  stream_options: this.config.includeUsage
                    ? { include_usage: !0 }
                    : void 0,
                },
                { responseHeaders: i, value: s } = await (0, O.postJsonToApi)({
                  url: this.config.url({
                    path: "/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, O.combineHeaders)(
                    this.config.headers(),
                    e.headers,
                  ),
                  body: r,
                  failedResponseHandler: this.failedResponseHandler,
                  successfulResponseHandler: (0,
                  O.createEventSourceResponseHandler)(this.chunkSchema),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { prompt: o, ...a } = t,
                l = "unknown",
                c = { promptTokens: Number.NaN, completionTokens: Number.NaN },
                u = !0;
              return {
                stream: s.pipeThrough(
                  new TransformStream({
                    transform(e, t) {
                      if (!e.success) {
                        (l = "error"),
                          t.enqueue({ type: "error", error: e.error });
                        return;
                      }
                      let n = e.value;
                      if ("error" in n) {
                        (l = "error"),
                          t.enqueue({ type: "error", error: n.error });
                        return;
                      }
                      u &&
                        ((u = !1),
                        t.enqueue({ type: "response-metadata", ...f(n) })),
                        null != n.usage &&
                          (c = {
                            promptTokens: n.usage.prompt_tokens,
                            completionTokens: n.usage.completion_tokens,
                          });
                      let r = n.choices[0];
                      (null == r ? void 0 : r.finish_reason) != null &&
                        (l = m(r.finish_reason)),
                        (null == r ? void 0 : r.text) != null &&
                          t.enqueue({ type: "text-delta", textDelta: r.text });
                    },
                    flush(e) {
                      e.enqueue({ type: "finish", finishReason: l, usage: c });
                    },
                  }),
                ),
                rawCall: { rawPrompt: o, rawSettings: a },
                rawResponse: { headers: i },
                warnings: n,
                request: { body: JSON.stringify(r) },
              };
            }
          },
          C = T.z.object({
            id: T.z.string().nullish(),
            created: T.z.number().nullish(),
            model: T.z.string().nullish(),
            choices: T.z.array(
              T.z.object({ text: T.z.string(), finish_reason: T.z.string() }),
            ),
            usage: T.z
              .object({
                prompt_tokens: T.z.number(),
                completion_tokens: T.z.number(),
              })
              .nullish(),
          }),
          A = (e) =>
            T.z.union([
              T.z.object({
                id: T.z.string().nullish(),
                created: T.z.number().nullish(),
                model: T.z.string().nullish(),
                choices: T.z.array(
                  T.z.object({
                    text: T.z.string(),
                    finish_reason: T.z.string().nullish(),
                    index: T.z.number(),
                  }),
                ),
                usage: T.z
                  .object({
                    prompt_tokens: T.z.number(),
                    completion_tokens: T.z.number(),
                  })
                  .nullish(),
              }),
              e,
            ]),
          N = n(50289),
          I = n(70417),
          D = n(30879),
          P = class {
            constructor(e, t, n) {
              (this.specificationVersion = "v1"),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
            }
            get provider() {
              return this.config.provider;
            }
            get maxEmbeddingsPerCall() {
              var e;
              return null != (e = this.config.maxEmbeddingsPerCall) ? e : 2048;
            }
            get supportsParallelCalls() {
              var e;
              return null == (e = this.config.supportsParallelCalls) || e;
            }
            async doEmbed({ values: e, headers: t, abortSignal: n }) {
              var r;
              if (e.length > this.maxEmbeddingsPerCall)
                throw new N.TooManyEmbeddingValuesForCallError({
                  provider: this.provider,
                  modelId: this.modelId,
                  maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
                  values: e,
                });
              let { responseHeaders: i, value: s } = await (0, I.postJsonToApi)(
                {
                  url: this.config.url({
                    path: "/embeddings",
                    modelId: this.modelId,
                  }),
                  headers: (0, I.combineHeaders)(this.config.headers(), t),
                  body: {
                    model: this.modelId,
                    input: e,
                    encoding_format: "float",
                    dimensions: this.settings.dimensions,
                    user: this.settings.user,
                  },
                  failedResponseHandler: (0, I.createJsonErrorResponseHandler)(
                    null != (r = this.config.errorStructure) ? r : y,
                  ),
                  successfulResponseHandler: (0, I.createJsonResponseHandler)(
                    R,
                  ),
                  abortSignal: n,
                  fetch: this.config.fetch,
                },
              );
              return {
                embeddings: s.data.map((e) => e.embedding),
                usage: s.usage ? { tokens: s.usage.prompt_tokens } : void 0,
                rawResponse: { headers: i },
              };
            }
          },
          R = D.z.object({
            data: D.z.array(D.z.object({ embedding: D.z.array(D.z.number()) })),
            usage: D.z.object({ prompt_tokens: D.z.number() }).nullish(),
          }),
          M = n(70417),
          L = n(30879),
          j = class {
            constructor(e, t, n) {
              (this.modelId = e),
                (this.settings = t),
                (this.config = n),
                (this.specificationVersion = "v1");
            }
            get maxImagesPerCall() {
              var e;
              return null != (e = this.settings.maxImagesPerCall) ? e : 10;
            }
            get provider() {
              return this.config.provider;
            }
            async doGenerate({
              prompt: e,
              n: t,
              size: n,
              aspectRatio: r,
              seed: i,
              providerOptions: s,
              headers: o,
              abortSignal: a,
            }) {
              var l, c, u, d, h;
              let p = [];
              null != r &&
                p.push({
                  type: "unsupported-setting",
                  setting: "aspectRatio",
                  details:
                    "This model does not support aspect ratio. Use `size` instead.",
                }),
                null != i &&
                  p.push({ type: "unsupported-setting", setting: "seed" });
              let f =
                  null !=
                  (u =
                    null ==
                    (c =
                      null == (l = this.config._internal)
                        ? void 0
                        : l.currentDate)
                      ? void 0
                      : c.call(l))
                    ? u
                    : new Date(),
                { value: m, responseHeaders: g } = await (0, M.postJsonToApi)({
                  url: this.config.url({
                    path: "/images/generations",
                    modelId: this.modelId,
                  }),
                  headers: (0, M.combineHeaders)(this.config.headers(), o),
                  body: {
                    model: this.modelId,
                    prompt: e,
                    n: t,
                    size: n,
                    ...(null != (d = s.openai) ? d : {}),
                    response_format: "b64_json",
                    ...(this.settings.user ? { user: this.settings.user } : {}),
                  },
                  failedResponseHandler: (0, M.createJsonErrorResponseHandler)(
                    null != (h = this.config.errorStructure) ? h : y,
                  ),
                  successfulResponseHandler: (0, M.createJsonResponseHandler)(
                    F,
                  ),
                  abortSignal: a,
                  fetch: this.config.fetch,
                });
              return {
                images: m.data.map((e) => e.b64_json),
                warnings: p,
                response: { timestamp: f, modelId: this.modelId, headers: g },
              };
            }
          },
          F = L.z.object({
            data: L.z.array(L.z.object({ b64_json: L.z.string() })),
          }),
          B = n(70417);
        function z(e) {
          let t = (0, B.withoutTrailingSlash)(e.baseURL),
            n = e.name,
            r = () => ({
              ...(e.apiKey && { Authorization: `Bearer ${e.apiKey}` }),
              ...e.headers,
            }),
            i = (i) => ({
              provider: `${n}.${i}`,
              url: ({ path: n }) => {
                let r = new URL(`${t}${n}`);
                return (
                  e.queryParams &&
                    (r.search = new URLSearchParams(e.queryParams).toString()),
                  r.toString()
                );
              },
              headers: r,
              fetch: e.fetch,
            }),
            s = (e, t = {}) => o(e, t),
            o = (e, t = {}) =>
              new b(e, t, {
                ...i("chat"),
                defaultObjectGenerationMode: "tool",
              }),
            a = (e, t) => s(e, t);
          return (
            (a.languageModel = s),
            (a.chatModel = o),
            (a.completionModel = (e, t = {}) => new E(e, t, i("completion"))),
            (a.textEmbeddingModel = (e, t = {}) => new P(e, t, i("embedding"))),
            (a.imageModel = (e, t = {}) => new j(e, t, i("image"))),
            a
          );
        }
      },
      15942: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, {
              Cq: () => u,
              GO: () => h,
              cn: () => l,
              lk: () => c,
              y8: () => d,
            });
            var i = n(85488);
            n(3477);
            var s = n(79029),
              o = n(58360),
              a = e([i]);
            function l(...e) {
              return (0, o.QP)((0, s.$)(e));
            }
            function c() {
              return "undefined" != typeof crypto && crypto.randomUUID
                ? crypto.randomUUID()
                : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
                    /[xy]/g,
                    function (e) {
                      let t = (16 * Math.random()) | 0;
                      return ("x" === e ? t : (3 & t) | 8).toString(16);
                    },
                  );
            }
            function u(e) {
              if (0 === e) return "0 Bytes";
              let t = Math.floor(Math.log(e) / Math.log(1024));
              return (
                parseFloat((e / Math.pow(1024, t)).toFixed(2)) +
                " " +
                ["Bytes", "KB", "MB", "GB", "TB"][t]
              );
            }
            i = (a.then ? (await a)() : a)[0];
            let h = async (e) => {
              let t = await fetch(e);
              if (!t.ok) {
                let e = Error("An error occurred while fetching the data.");
                try {
                  e.info = await t.json();
                } catch (n) {
                  e.info = t.statusText;
                }
                throw ((e.status = t.status), e);
              }
              return t.json();
            };
            function d(e) {
              return e.map((e) => {
                var t;
                return {
                  ...e,
                  content:
                    ((t = e.content),
                    "string" != typeof t
                      ? ""
                      : t.replace(/<has_function_call>/g, "")),
                };
              });
            }
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      16116: (e, t, n) => {
        "use strict";
        var r = n(45536);
        n.o(r, "useCookies") &&
          n.d(t, {
            useCookies: function () {
              return r.useCookies;
            },
          });
        var i = n(28894);
        n.o(i, "useCookies") &&
          n.d(t, {
            useCookies: function () {
              return i.useCookies;
            },
          });
      },
      16714: (e, t, n) => {
        "use strict";
        n.d(t, { AppSidebar: () => r });
        let r = (0, n(26394).registerClientReference)(
          function () {
            throw Error(
              "Attempted to call AppSidebar() from the server but AppSidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\app-sidebar.tsx",
          "AppSidebar",
        );
      },
      16862: function (e, t, n) {
        "use strict";
        var r =
            (this && this.__createBinding) ||
            (Object.create
              ? function (e, t, n, r) {
                  void 0 === r && (r = n);
                  var i = Object.getOwnPropertyDescriptor(t, n);
                  (!i ||
                    ("get" in i
                      ? !t.__esModule
                      : i.writable || i.configurable)) &&
                    (i = {
                      enumerable: !0,
                      get: function () {
                        return t[n];
                      },
                    }),
                    Object.defineProperty(e, r, i);
                }
              : function (e, t, n, r) {
                  void 0 === r && (r = n), (e[r] = t[n]);
                }),
          i =
            (this && this.__exportStar) ||
            function (e, t) {
              for (var n in e)
                "default" === n ||
                  Object.prototype.hasOwnProperty.call(t, n) ||
                  r(t, e, n);
            };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          i(n(43338), t),
          i(n(48866), t),
          i(n(35607), t),
          i(n(77749), t),
          i(n(67486), t),
          i(n(70964), t);
      },
      16949: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { m: () => b });
            var i = n(61268),
              s = n(1306),
              o = n.n(s),
              a = n(84205),
              l = n(17407),
              c = n(39070),
              u = n(15942),
              d = n(73912),
              h = n(33354),
              p = n(49816),
              f = n(12253),
              m = n(89394),
              g = n(99428),
              y = n(2424),
              v = e([c, u, h, g, y]);
            function b({ isReadonly: e, result: t, args: n }) {
              let { artifact: r, setArtifact: s } = (0, c.ST)(),
                { data: o, isLoading: d } = (0, l.Ay)(
                  t ? `/api/document?id=${t.id}` : null,
                  u.GO,
                ),
                p = (0, a.useMemo)(() => o?.[0], [o]),
                f = (0, a.useRef)(null);
              if (r.isVisible) {
                if (t)
                  return (0, i.jsx)(h.p, {
                    type: "create",
                    result: { id: t.id, title: t.title, kind: t.kind },
                    isReadonly: e,
                  });
                if (n)
                  return (0, i.jsx)(h.E, {
                    type: "create",
                    args: { title: n.title },
                    isReadonly: e,
                  });
              }
              if (d) return (0, i.jsx)(x, { artifactKind: t.kind ?? n.kind });
              let m =
                p ||
                ("streaming" === r.status
                  ? {
                      title: r.title,
                      kind: r.kind,
                      content: r.content,
                      id: r.documentId,
                      createdAt: new Date(),
                      userId: "noop",
                    }
                  : null);
              return m
                ? (0, i.jsxs)("div", {
                    className: "relative w-full cursor-pointer",
                    children: [
                      (0, i.jsx)(k, {
                        hitboxRef: f,
                        result: t,
                        setArtifact: s,
                      }),
                      (0, i.jsx)(w, {
                        title: m.title,
                        kind: m.kind,
                        isStreaming: "streaming" === r.status,
                      }),
                      (0, i.jsx)(_, { document: m }),
                    ],
                  })
                : (0, i.jsx)(x, { artifactKind: r.kind });
            }
            [c, u, h, g, y] = v.then ? (await v)() : v;
            let x = ({ artifactKind: e }) =>
                (0, i.jsxs)("div", {
                  className: "w-full",
                  children: [
                    (0, i.jsxs)("div", {
                      className:
                        "p-4 border rounded-t-2xl flex flex-row gap-2 items-center justify-between dark:bg-muted h-[57px] dark:border-zinc-700 border-b-0",
                      children: [
                        (0, i.jsxs)("div", {
                          className: "flex flex-row items-center gap-3",
                          children: [
                            (0, i.jsx)("div", {
                              className: "text-muted-foreground",
                              children: (0, i.jsx)("div", {
                                className:
                                  "animate-pulse rounded-md size-4 bg-muted-foreground/20",
                              }),
                            }),
                            (0, i.jsx)("div", {
                              className:
                                "animate-pulse rounded-lg h-4 bg-muted-foreground/20 w-24",
                            }),
                          ],
                        }),
                        (0, i.jsx)("div", { children: (0, i.jsx)(f.P7, {}) }),
                      ],
                    }),
                    "image" === e
                      ? (0, i.jsx)("div", {
                          className:
                            "overflow-y-scroll border rounded-b-2xl bg-muted border-t-0 dark:border-zinc-700",
                          children: (0, i.jsx)("div", {
                            className:
                              "animate-pulse h-[257px] bg-muted-foreground/20 w-full",
                          }),
                        })
                      : (0, i.jsx)("div", {
                          className:
                            "overflow-y-scroll border rounded-b-2xl p-8 pt-4 bg-muted border-t-0 dark:border-zinc-700",
                          children: (0, i.jsx)(p._, {}),
                        }),
                  ],
                }),
              k = (0, a.memo)(
                ({ hitboxRef: e, result: t, setArtifact: n }) => {
                  let r = (0, a.useCallback)(
                    (e) => {
                      let r = e.currentTarget.getBoundingClientRect();
                      n((e) =>
                        "streaming" === e.status
                          ? { ...e, isVisible: !0 }
                          : {
                              ...e,
                              title: t.title,
                              documentId: t.id,
                              kind: t.kind,
                              isVisible: !0,
                              boundingBox: {
                                left: r.x,
                                top: r.y,
                                width: r.width,
                                height: r.height,
                              },
                            },
                      );
                    },
                    [n, t],
                  );
                  return (0, i.jsx)("div", {
                    className:
                      "size-full absolute top-0 left-0 rounded-xl z-10",
                    ref: e,
                    onClick: r,
                    role: "presentation",
                    "aria-hidden": "true",
                    children: (0, i.jsx)("div", {
                      className: "w-full p-4 flex justify-end items-center",
                      children: (0, i.jsx)("div", {
                        className:
                          "absolute right-[9px] top-[13px] p-2 hover:dark:bg-zinc-700 rounded-md hover:bg-zinc-100",
                        children: (0, i.jsx)(f.P7, {}),
                      }),
                    }),
                  });
                },
                (e, t) => !!o()(e.result, t.result),
              ),
              w = (0, a.memo)(
                ({ title: e, kind: t, isStreaming: n }) =>
                  (0, i.jsxs)("div", {
                    className:
                      "p-4 border rounded-t-2xl flex flex-row gap-2 items-start sm:items-center justify-between dark:bg-muted border-b-0 dark:border-zinc-700",
                    children: [
                      (0, i.jsxs)("div", {
                        className:
                          "flex flex-row items-start sm:items-center gap-3",
                        children: [
                          (0, i.jsx)("div", {
                            className: "text-muted-foreground",
                            children: n
                              ? (0, i.jsx)("div", {
                                  className: "animate-spin",
                                  children: (0, i.jsx)(f.hz, {}),
                                })
                              : "image" === t
                                ? (0, i.jsx)(f.xf, {})
                                : (0, i.jsx)(f.oS, {}),
                          }),
                          (0, i.jsx)("div", {
                            className:
                              "-translate-y-1 sm:translate-y-0 font-medium",
                            children: e,
                          }),
                        ],
                      }),
                      (0, i.jsx)("div", { className: "w-8" }),
                    ],
                  }),
                (e, t) =>
                  e.title === t.title && e.isStreaming === t.isStreaming,
              ),
              _ = ({ document: e }) => {
                let { artifact: t } = (0, c.ST)(),
                  n = (0, u.cn)(
                    "h-[257px] overflow-y-scroll border rounded-b-2xl dark:bg-muted border-t-0 dark:border-zinc-700",
                    {
                      "p-4 sm:px-14 sm:py-16": "text" === e.kind,
                      "p-0": "code" === e.kind,
                    },
                  ),
                  r = {
                    content: e.content ?? "",
                    isCurrentVersion: !0,
                    currentVersionIndex: 0,
                    status: t.status,
                    saveContent: () => {},
                    suggestions: [],
                  };
                return (0, i.jsx)("div", {
                  className: n,
                  children:
                    "text" === e.kind
                      ? (0, i.jsx)(y.K, { ...r, onSaveContent: () => {} })
                      : "code" === e.kind
                        ? (0, i.jsx)("div", {
                            className: "flex flex-1 relative w-full",
                            children: (0, i.jsx)("div", {
                              className: "absolute inset-0",
                              children: (0, i.jsx)(d.B, {
                                ...r,
                                onSaveContent: () => {},
                              }),
                            }),
                          })
                        : "sheet" === e.kind
                          ? (0, i.jsx)("div", {
                              className: "flex flex-1 relative size-full p-4",
                              children: (0, i.jsx)("div", {
                                className: "absolute inset-0",
                                children: (0, i.jsx)(g.y, { ...r }),
                              }),
                            })
                          : "image" === e.kind
                            ? (0, i.jsx)(m.n, {
                                title: e.title,
                                content: e.content ?? "",
                                isCurrentVersion: !0,
                                currentVersionIndex: 0,
                                status: t.status,
                                isInline: !0,
                              })
                            : null,
                });
              };
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      17059: (e, t, n) => {
        "use strict";
        n.d(t, { E: () => r });
        let r = Symbol.for("drizzle:Name");
      },
      18542: (e, t, n) => {
        "use strict";
        !(function e() {
          if (
            "undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
            "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE
          )
            try {
              __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e);
            } catch (e) {
              console.error(e);
            }
        })(),
          (e.exports = n(71850));
      },
      18720: (e, t, n) => {
        "use strict";
        n.d(t, {
          Ct: () => k,
          DJ: () => h,
          Iw: () => v,
          Or: () => x,
          Ss: () => _,
          Xs: () => p,
          eG: () => m,
          ll: () => b,
          qt: () => d,
        });
        var r = n(92858),
          i = n(1596),
          s = n(537),
          o = n(53414),
          a = n(32566),
          l = n(54557),
          c = n(3021);
        class u {
          static [r.i] = null;
        }
        function d(e) {
          return null != e && "function" == typeof e.getSQL;
        }
        class h {
          static [r.i] = "StringChunk";
          value;
          constructor(e) {
            this.value = Array.isArray(e) ? e : [e];
          }
          getSQL() {
            return new p([this]);
          }
        }
        class p {
          constructor(e) {
            this.queryChunks = e;
          }
          static [r.i] = "SQL";
          decoder = g;
          shouldInlineParams = !1;
          append(e) {
            return this.queryChunks.push(...e.queryChunks), this;
          }
          toQuery(e) {
            return o.k.startActiveSpan("drizzle.buildSQL", (t) => {
              let n = this.buildQueryFromSourceParams(this.queryChunks, e);
              return (
                t?.setAttributes({
                  "drizzle.query.text": n.sql,
                  "drizzle.query.params": JSON.stringify(n.params),
                }),
                n
              );
            });
          }
          buildQueryFromSourceParams(e, t) {
            let n = Object.assign({}, t, {
                inlineParams: t.inlineParams || this.shouldInlineParams,
                paramStartIndex: t.paramStartIndex || { value: 0 },
              }),
              {
                casing: o,
                escapeName: u,
                escapeParam: m,
                prepareTyping: g,
                inlineParams: y,
                paramStartIndex: b,
              } = n;
            var k = e.map((e) => {
              if ((0, r.is)(e, h)) return { sql: e.value.join(""), params: [] };
              if ((0, r.is)(e, f)) return { sql: u(e.value), params: [] };
              if (void 0 === e) return { sql: "", params: [] };
              if (Array.isArray(e)) {
                let t = [new h("(")];
                for (let [n, r] of e.entries())
                  t.push(r), n < e.length - 1 && t.push(new h(", "));
                return (
                  t.push(new h(")")), this.buildQueryFromSourceParams(t, n)
                );
              }
              if ((0, r.is)(e, p))
                return this.buildQueryFromSourceParams(e.queryChunks, {
                  ...n,
                  inlineParams: y || e.shouldInlineParams,
                });
              if ((0, r.is)(e, c.XI)) {
                let t = e[c.XI.Symbol.Schema],
                  n = e[c.XI.Symbol.Name];
                return {
                  sql: void 0 === t || e[c.HE] ? u(n) : u(t) + "." + u(n),
                  params: [],
                };
              }
              if ((0, r.is)(e, l.V)) {
                let n = o.getColumnCasing(e);
                if ("indexes" === t.invokeSource)
                  return { sql: u(n), params: [] };
                let r = e.table[c.XI.Symbol.Schema];
                return {
                  sql:
                    e.table[c.HE] || void 0 === r
                      ? u(e.table[c.XI.Symbol.Name]) + "." + u(n)
                      : u(r) + "." + u(e.table[c.XI.Symbol.Name]) + "." + u(n),
                  params: [],
                };
              }
              if ((0, r.is)(e, _)) {
                let t = e[a.n].schema,
                  n = e[a.n].name;
                return {
                  sql:
                    void 0 === t || e[a.n].isAlias ? u(n) : u(t) + "." + u(n),
                  params: [],
                };
              }
              if ((0, r.is)(e, v)) {
                if ((0, r.is)(e.value, x))
                  return {
                    sql: m(b.value++, e),
                    params: [e],
                    typings: ["none"],
                  };
                let t =
                  null === e.value ? null : e.encoder.mapToDriverValue(e.value);
                if ((0, r.is)(t, p))
                  return this.buildQueryFromSourceParams([t], n);
                if (y) return { sql: this.mapInlineParam(t, n), params: [] };
                let i = ["none"];
                return (
                  g && (i = [g(e.encoder)]),
                  { sql: m(b.value++, t), params: [t], typings: i }
                );
              }
              return (0, r.is)(e, x)
                ? { sql: m(b.value++, e), params: [e], typings: ["none"] }
                : (0, r.is)(e, p.Aliased) && void 0 !== e.fieldAlias
                  ? { sql: u(e.fieldAlias), params: [] }
                  : (0, r.is)(e, s.n)
                    ? e._.isWith
                      ? { sql: u(e._.alias), params: [] }
                      : this.buildQueryFromSourceParams(
                          [new h("("), e._.sql, new h(") "), new f(e._.alias)],
                          n,
                        )
                    : (0, i.BU)(e)
                      ? e.schema
                        ? { sql: u(e.schema) + "." + u(e.enumName), params: [] }
                        : { sql: u(e.enumName), params: [] }
                      : d(e)
                        ? e.shouldOmitSQLParens?.()
                          ? this.buildQueryFromSourceParams([e.getSQL()], n)
                          : this.buildQueryFromSourceParams(
                              [new h("("), e.getSQL(), new h(")")],
                              n,
                            )
                        : y
                          ? { sql: this.mapInlineParam(e, n), params: [] }
                          : {
                              sql: m(b.value++, e),
                              params: [e],
                              typings: ["none"],
                            };
            });
            let w = { sql: "", params: [] };
            for (let e of k)
              (w.sql += e.sql),
                w.params.push(...e.params),
                e.typings?.length &&
                  (w.typings || (w.typings = []), w.typings.push(...e.typings));
            return w;
          }
          mapInlineParam(e, { escapeString: t }) {
            if (null === e) return "null";
            if ("number" == typeof e || "boolean" == typeof e)
              return e.toString();
            if ("string" == typeof e) return t(e);
            if ("object" == typeof e) {
              let n = e.toString();
              return "[object Object]" === n ? t(JSON.stringify(e)) : t(n);
            }
            throw Error("Unexpected param value: " + e);
          }
          getSQL() {
            return this;
          }
          as(e) {
            return void 0 === e ? this : new p.Aliased(this, e);
          }
          mapWith(e) {
            return (
              (this.decoder =
                "function" == typeof e ? { mapFromDriverValue: e } : e),
              this
            );
          }
          inlineParams() {
            return (this.shouldInlineParams = !0), this;
          }
          if(e) {
            return e ? this : void 0;
          }
        }
        class f {
          constructor(e) {
            this.value = e;
          }
          static [r.i] = "Name";
          brand;
          getSQL() {
            return new p([this]);
          }
        }
        function m(e) {
          return (
            "object" == typeof e &&
            null !== e &&
            "mapToDriverValue" in e &&
            "function" == typeof e.mapToDriverValue
          );
        }
        let g = { mapFromDriverValue: (e) => e },
          y = { mapToDriverValue: (e) => e };
        ({ ...g, ...y });
        class v {
          constructor(e, t = y) {
            (this.value = e), (this.encoder = t);
          }
          static [r.i] = "Param";
          brand;
          getSQL() {
            return new p([this]);
          }
        }
        function b(e, ...t) {
          let n = [];
          for (let [r, i] of ((t.length > 0 || (e.length > 0 && "" !== e[0])) &&
            n.push(new h(e[0])),
          t.entries()))
            n.push(i, new h(e[r + 1]));
          return new p(n);
        }
        ((e) => {
          (e.empty = function () {
            return new p([]);
          }),
            (e.fromList = function (e) {
              return new p(e);
            }),
            (e.raw = function (e) {
              return new p([new h(e)]);
            }),
            (e.join = function (e, t) {
              let n = [];
              for (let [r, i] of e.entries())
                r > 0 && void 0 !== t && n.push(t), n.push(i);
              return new p(n);
            }),
            (e.identifier = function (e) {
              return new f(e);
            }),
            (e.placeholder = function (e) {
              return new x(e);
            }),
            (e.param = function (e, t) {
              return new v(e, t);
            });
        })(b || (b = {})),
          ((e) => {
            class t {
              constructor(e, t) {
                (this.sql = e), (this.fieldAlias = t);
              }
              static [r.i] = "SQL.Aliased";
              isSelectionField = !1;
              getSQL() {
                return this.sql;
              }
              clone() {
                return new t(this.sql, this.fieldAlias);
              }
            }
            e.Aliased = t;
          })(p || (p = {}));
        class x {
          constructor(e) {
            this.name = e;
          }
          static [r.i] = "Placeholder";
          getSQL() {
            return new p([this]);
          }
        }
        function k(e, t) {
          return e.map((e) => {
            if ((0, r.is)(e, x)) {
              if (!(e.name in t))
                throw Error(
                  `No value for placeholder "${e.name}" was provided`,
                );
              return t[e.name];
            }
            if ((0, r.is)(e, v) && (0, r.is)(e.value, x)) {
              if (!(e.value.name in t))
                throw Error(
                  `No value for placeholder "${e.value.name}" was provided`,
                );
              return e.encoder.mapToDriverValue(t[e.value.name]);
            }
            return e;
          });
        }
        let w = Symbol.for("drizzle:IsDrizzleView");
        class _ {
          static [r.i] = "View";
          [a.n];
          [w] = !0;
          constructor({ name: e, schema: t, selectedFields: n, query: r }) {
            this[a.n] = {
              name: e,
              originalName: e,
              schema: t,
              selectedFields: n,
              query: r,
              isExisting: !r,
              isAlias: !1,
            };
          }
          getSQL() {
            return new p([this]);
          }
        }
        (l.V.prototype.getSQL = function () {
          return new p([this]);
        }),
          (c.XI.prototype.getSQL = function () {
            return new p([this]);
          }),
          (s.n.prototype.getSQL = function () {
            return new p([this]);
          });
      },
      19121: (e) => {
        "use strict";
        e.exports = require("next/dist/server/app-render/action-async-storage.external.js");
      },
      19771: (e) => {
        "use strict";
        e.exports = require("process");
      },
      20716: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { cn: () => c, lk: () => u, p1: () => d });
            var i = n(85488),
              s = n(31399),
              o = n(63775),
              a = n(54710),
              l = e([i]);
            function c(...e) {
              return (0, a.QP)((0, o.$)(e));
            }
            function u() {
              return "undefined" != typeof crypto && crypto.randomUUID
                ? crypto.randomUUID()
                : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
                    /[xy]/g,
                    function (e) {
                      let t = (16 * Math.random()) | 0;
                      return ("x" === e ? t : (3 & t) | 8).toString(16);
                    },
                  );
            }
            function d() {
              var e = (0, i.generateId)(12);
              let t = (0, s.uP)(10);
              return (0, s.Y8)(e, t);
            }
            (i = (l.then ? (await l)() : l)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      21725: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { p1: () => a });
            var i = n(85488),
              s = n(24448),
              o = e([i]);
            function a() {
              var e = (0, i.generateId)(12);
              let t = (0, s.uP)(10);
              return (0, s.Y8)(e, t);
            }
            (i = (o.then ? (await o)() : o)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      21800: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 16714)),
          Promise.resolve().then(n.bind(n, 98699)),
          Promise.resolve().then(n.bind(n, 29244)),
          Promise.resolve().then(n.t.bind(n, 14604, 23));
      },
      21820: (e) => {
        "use strict";
        e.exports = require("os");
      },
      22115: (e, t, n) => {
        "use strict";
        e.exports = n(99282);
      },
      22461: (e, t, n) => {
        "use strict";
        let r = n(63033),
          i = n(29294),
          s = n(4935),
          o = n(59692),
          a = n(78575),
          l = n(94625);
        function c() {
          let e = i.workAsyncStorage.getStore(),
            t = r.workUnitAsyncStorage.getStore();
          switch (
            ((!e || !t) && (0, r.throwForMissingRequestStore)("draftMode"),
            t.type)
          ) {
            case "request":
              return u(t.draftMode, e);
            case "cache":
            case "unstable-cache":
              let n = (0, r.getDraftModeProviderForCacheScope)(e, t);
              if (n) return u(n, e);
            case "prerender":
            case "prerender-ppr":
            case "prerender-legacy":
              return h(null);
            default:
              return t;
          }
        }
        function u(e, t) {
          let n,
            r = d.get(c);
          return r || ((n = h(e)), d.set(e, n), n);
        }
        let d = new WeakMap();
        function h(e) {
          let t = new p(e),
            n = Promise.resolve(t);
          return (
            Object.defineProperty(n, "isEnabled", {
              get: () => t.isEnabled,
              set(e) {
                Object.defineProperty(n, "isEnabled", {
                  value: e,
                  writable: !0,
                  enumerable: !0,
                });
              },
              enumerable: !0,
              configurable: !0,
            }),
            (n.enable = t.enable.bind(t)),
            (n.disable = t.disable.bind(t)),
            n
          );
        }
        class p {
          constructor(e) {
            this._provider = e;
          }
          get isEnabled() {
            return null !== this._provider && this._provider.isEnabled;
          }
          enable() {
            m("draftMode().enable()"),
              null !== this._provider && this._provider.enable();
          }
          disable() {
            m("draftMode().disable()"),
              null !== this._provider && this._provider.disable();
          }
        }
        let f = (0, o.createDedupedByCallsiteServerErrorLoggerDev)(
          function (e, t) {
            let n = e ? `Route "${e}" ` : "This route ";
            return Object.defineProperty(
              Error(
                `${n}used ${t}. \`draftMode()\` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`,
              ),
              "__NEXT_ERROR_CODE",
              { value: "E377", enumerable: !1, configurable: !0 },
            );
          },
        );
        function m(e) {
          let t = i.workAsyncStorage.getStore(),
            n = r.workUnitAsyncStorage.getStore();
          if (t) {
            if (n) {
              if ("cache" === n.type)
                throw Object.defineProperty(
                  Error(
                    `Route ${t.route} used "${e}" inside "use cache". The enabled status of draftMode can be read in caches but you must not enable or disable draftMode inside a cache. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`,
                  ),
                  "__NEXT_ERROR_CODE",
                  { value: "E246", enumerable: !1, configurable: !0 },
                );
              else if ("unstable-cache" === n.type)
                throw Object.defineProperty(
                  Error(
                    `Route ${t.route} used "${e}" inside a function cached with "unstable_cache(...)". The enabled status of draftMode can be read in caches but you must not enable or disable draftMode inside a cache. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`,
                  ),
                  "__NEXT_ERROR_CODE",
                  { value: "E259", enumerable: !1, configurable: !0 },
                );
              else if ("after" === n.phase)
                throw Object.defineProperty(
                  Error(
                    `Route ${t.route} used "${e}" inside \`after\`. The enabled status of draftMode can be read inside \`after\` but you cannot enable or disable draftMode. See more info here: https://nextjs.org/docs/app/api-reference/functions/after`,
                  ),
                  "__NEXT_ERROR_CODE",
                  { value: "E348", enumerable: !1, configurable: !0 },
                );
            }
            if (t.dynamicShouldError)
              throw Object.defineProperty(
                new a.StaticGenBailoutError(
                  `Route ${t.route} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${e}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`,
                ),
                "__NEXT_ERROR_CODE",
                { value: "E553", enumerable: !1, configurable: !0 },
              );
            if (n) {
              if ("prerender" === n.type) {
                let r = Object.defineProperty(
                  Error(
                    `Route ${t.route} used ${e} without first calling \`await connection()\`. See more info here: https://nextjs.org/docs/messages/next-prerender-sync-headers`,
                  ),
                  "__NEXT_ERROR_CODE",
                  { value: "E126", enumerable: !1, configurable: !0 },
                );
                (0, s.abortAndThrowOnSynchronousRequestDataAccess)(
                  t.route,
                  e,
                  r,
                  n,
                );
              } else if ("prerender-ppr" === n.type)
                (0, s.postponeWithTracking)(t.route, e, n.dynamicTracking);
              else if ("prerender-legacy" === n.type) {
                n.revalidate = 0;
                let r = Object.defineProperty(
                  new l.DynamicServerError(
                    `Route ${t.route} couldn't be rendered statically because it used \`${e}\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`,
                  ),
                  "__NEXT_ERROR_CODE",
                  { value: "E558", enumerable: !1, configurable: !0 },
                );
                throw (
                  ((t.dynamicUsageDescription = e),
                  (t.dynamicUsageStack = r.stack),
                  r)
                );
              }
            }
          }
        }
      },
      22630: (e, t, n) => {
        "use strict";
        let r;
        n.r(t),
          n.d(t, {
            default: () => b,
            dynamic: () => h,
            generateImageMetadata: () => y,
            generateMetadata: () => g,
            generateViewport: () => v,
            maxDuration: () => p,
            metadata: () => u,
            viewport: () => d,
          });
        var i = n(63033),
          s = n(35242);
        n(93206);
        var o = n(51433),
          a = n(59107),
          l = n(39862),
          c = n(60442);
        let u = {
            title: {
              default: "Hijraah - Navigate Your Immigration Journey",
              template: "%s | Hijraah",
            },
            metadataBase: new URL("https://hijraah.vercel.app"),
            description:
              "Navigate your immigration journey with AI guidance - Compare immigration policies across countries with intelligent insights",
            keywords: [
              "immigration",
              "visa",
              "comparison",
              "countries",
              "policies",
              "AI guidance",
              "immigration journey",
            ],
            authors: [{ name: "Hijraah Team" }],
            creator: "Hijraah",
            icons: { icon: "/Hijraah_logo.png", apple: "/Hijraah_logo.png" },
            openGraph: {
              type: "website",
              locale: "en_US",
              url: "https://hijraah.vercel.app",
              title: "Hijraah - Immigration Comparison",
              description:
                "Compare immigration policies across countries with AI-powered insights",
              siteName: "Hijraah",
              images: [
                {
                  url: "/Hijraah_logo.png",
                  width: 800,
                  height: 800,
                  alt: "Hijraah Logo",
                },
              ],
            },
            twitter: {
              card: "summary_large_image",
              title: "Hijraah - Immigration Comparison",
              description:
                "Compare immigration policies across countries with AI-powered insights",
              creator: "@hijraah",
              images: ["/Hijraah_logo.png"],
            },
            robots: { index: !0, follow: !0 },
          },
          d = {
            themeColor: [
              { media: "(prefers-color-scheme: light)", color: "white" },
              { media: "(prefers-color-scheme: dark)", color: "#18181b" },
            ],
            width: "device-width",
            initialScale: 1,
          },
          h = "force-dynamic",
          p = 60,
          f = { ...i },
          m =
            "workUnitAsyncStorage" in f
              ? f.workUnitAsyncStorage
              : "requestAsyncStorage" in f
                ? f.requestAsyncStorage
                : void 0;
        r = new Proxy(
          function ({ children: e }) {
            let t = { plugins: [] };
            return (0, s.jsxs)(s.Fragment, {
              children: [
                e,
                (0, s.jsx)(a.Analytics, {}),
                (0, s.jsx)(l.SpeedInsights, {}),
                t && (0, s.jsx)(o.StagewiseToolbar, { config: t }),
              ],
            });
          },
          {
            apply: (e, t, n) => {
              let r, i, s;
              try {
                let e = m?.getStore();
                (r = e?.headers.get("sentry-trace") ?? void 0),
                  (i = e?.headers.get("baggage") ?? void 0),
                  (s = e?.headers);
              } catch (e) {}
              return c
                .wrapServerComponentWithSentry(e, {
                  componentRoute: "/",
                  componentType: "Layout",
                  sentryTraceHeader: r,
                  baggageHeader: i,
                  headers: s,
                })
                .apply(t, n);
            },
          },
        );
        let g = void 0,
          y = void 0,
          v = void 0,
          b = r;
      },
      24448: (e, t, n) => {
        "use strict";
        n.d(t, { Y8: () => S, uP: () => T });
        var r = n(77598);
        let i = 10,
          s =
            "./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(
              "",
            ),
          o = Array.from({ length: 64 }, (e, t) => t),
          a = (e) => Array(e).fill(-1),
          l = [
            ...a(46),
            0,
            1,
            ...o.slice(54, 64),
            ...a(7),
            ...o.slice(2, 28),
            ...a(6),
            ...o.slice(28, 54),
            ...a(5),
          ],
          c = [
            0x243f6a88, 0x85a308d3, 0x13198a2e, 0x3707344, 0xa4093822,
            0x299f31d0, 0x82efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,
            0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5,
            0xb5470917, 0x9216d5d9, 0x8979fb1b,
          ],
          u = [
            0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed,
            0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,
            0x801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3,
            0xf4933d7e, 0xd95748f, 0x728eb658, 0x718bcd58, 0x82154aee,
            0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023,
            0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,
            0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda,
            0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,
            0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af,
            0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6,
            0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381,
            0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
            0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d,
            0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,
            0xf6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a,
            0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,
            0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c,
            0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,
            0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3,
            0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,
            0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724,
            0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x75372c9, 0x80991b7b,
            0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd,
            0x4c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
            0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f,
            0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,
            0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39,
            0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,
            0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df,
            0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,
            0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e,
            0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,
            0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98,
            0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565,
            0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341,
            0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
            0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0,
            0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,
            0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191,
            0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,
            0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0,
            0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,
            0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5,
            0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 2428461,
            0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e,
            0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2,
            0x2e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,
            0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915, 0xd60f573f,
            0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x8ba6fb5, 0x571be91f,
            0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e,
            0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x8ba4799, 0x6e85076a,
            0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 290971e4,
            0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff,
            0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29, 0xa0591340,
            0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,
            0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086,
            0x8470eb26, 0x6382e9c6, 0x21ecc5e, 0x9686b3f, 0x3ebaefc9,
            0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305,
            0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,
            0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x200b3ff, 0xae0cf51a,
            0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6,
            0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634,
            0x9af3dda7, 0xa9446146, 0xfd0030e, 0xecc8c73e, 0xa4751e41,
            0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38,
            0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79,
            0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810, 0xb38bae12,
            0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,
            0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a,
            0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908,
            0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002,
            0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,
            0x43556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509, 0xf28fe6ed,
            0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1,
            0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9,
            0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
            0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7,
            0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6,
            0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883, 0xb17f37d1,
            0x18cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,
            0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628,
            0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96,
            0x334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b,
            0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,
            0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50, 0x40685a32,
            0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099,
            0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f,
            0x16681281, 0xe358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,
            0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb,
            0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea,
            0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3, 0x42105d14,
            0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,
            0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e,
            0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646,
            0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b,
            0x5692b285, 0x95bbf00, 0xad19489d, 0x1462b174, 0x23820e00,
            0x58428d2a, 0xc55f5ea, 0x1dadf43e, 0x233f7061, 0x3372f092,
            0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460,
            0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855,
            0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,
            0x9e447a2e, 0xc3453484, 0xfdd56705, 0xe1e9ec9, 0xdb73dbd3,
            0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8,
            0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a, 0xe6e39f2b,
            0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,
            0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471,
            0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546,
            0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af, 0x70f4ddd3,
            0x66a02f45, 0xbfbc09ec, 0x3bd9785, 0x7fac6dd0, 0x31cb8504,
            0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825,
            0x530429f4, 0xa2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900,
            0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006,
            0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,
            0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b, 0x1dc9faf7,
            0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332,
            0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac,
            0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,
            0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56,
            0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x4272f70,
            0x80bb155c, 0x5282ce3, 0x95c11548, 0xe4c66d22, 0x48c1133f,
            0xc70f86dc, 0x7f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,
            0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834,
            0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0xe12b4c2, 0x2e1329e,
            0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62,
            0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,
            0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0, 0x5449a36f,
            0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0xa476341, 0x992eff74,
            0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c,
            0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,
            0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb,
            0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24,
            0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979, 0x8026e297,
            0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,
            0x6a124237, 0xb79251e7, 0x6a1bbe6, 0x4bfb6350, 0x1a6b1018,
            0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0xa121386,
            0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988,
            0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,
            0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc, 0x83426b33,
            0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24,
            0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38,
            0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,
            0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e,
            0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0,
            0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09, 0x662d09a1,
            0xc4324633, 0xe85a1f02, 0x9f0be8c, 0x4a99a025, 0x1d6efe10,
            0x1ab93d1d, 0xba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83,
            0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa,
            0xa002b5c4, 0xde6d027, 0x9af88c27, 0x773f8641, 0xc3604c06,
            0x61a806b5, 0xf0177a28, 0xc0f586e0, 6314154, 0x30dc7d62, 0x11e69ed7,
            0x2338ea63, 0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de,
            0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188, 0x39720a3d,
            0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,
            0xed545578, 0x8fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e,
            0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4,
            0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e,
            0x406000e0, 0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,
            0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe, 0xd5118e9d,
            0xbf0f7315, 0xd62d1c7e, 0xc700c47b, 0xb78c1b6b, 0x21a19045,
            0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79, 0xc6a376d2,
            0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
            0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0,
            0x6a2d519a, 0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6,
            0xa51e03aa, 0x9cf2d0a4, 0x83c061ba, 0x9be96a4d, 0x8fe51550,
            0xba645bd6, 0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,
            0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59, 0x80e4a915,
            0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,
            0x2cf0b7d9, 0x22b8b51, 0x96d5ac3a, 0x17da67d, 0xd1cf3ed6,
            0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,
            0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d,
            0x283b57cc, 0xf8d56629, 0x79132e28, 0x785f0191, 0xed756055,
            0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba, 0x3a16125,
            0x564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,
            0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928,
            0xb155fdf5, 0x3563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8,
            0xabcc5167, 0xccad925f, 0x4de81751, 0x3830dc8e, 0x379d5862,
            0x9320f991, 0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,
            0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680, 0xa2ae0810,
            0xdd6db224, 0x69852dfd, 0x9072166, 0xb39a460a, 0x6445c0dd,
            0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f,
            0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,
            0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47, 0xd29be463,
            0x542f5d9e, 0xaec2771b, 0xf64e6370, 0x740e0d8d, 0xe75b1357,
            0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc, 0x34d2466a,
            0x115af84, 3786409e3, 0x95983a1d, 0x6b89fb4, 0xce6ea048, 0x6f3f3b82,
            0x3520ab82, 0x11a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,
            0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7,
            0xa01fbac9, 0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,
            0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x339c32a,
            0xc6913667, 0x8df9317c, 0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a,
            0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a, 0xf91fc71,
            0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,
            0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e,
            0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df,
            0xd3a0342b, 0x8971f21e, 0x1b0a7441, 0x4ba3348c, 0xc5be7120,
            0xc37632d8, 0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0xfe3f11d,
            0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f, 0x1618b166,
            0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,
            0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697,
            0x88d273cc, 0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,
            0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a, 0xc9aa53fd,
            0x62a80f00, 0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222,
            0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3, 0x38abbd60,
            0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
            0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c,
            0x2fb8a8c, 0x1c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0,
            0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3,
            0x3ac372e6,
          ],
          d = [
            0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944,
            0x6f756274,
          ],
          h = (e, t) => {
            if (t <= 0 || t > e.length) throw Error(`Illegal len: ${t}`);
            let n = 0,
              r,
              i,
              o = [];
            for (; n < t; ) {
              if (
                ((r = 255 & e[n++]),
                o.push(s[(r >> 2) & 63]),
                (r = (3 & r) << 4),
                n >= t ||
                  ((r |= ((i = 255 & e[n++]) >> 4) & 15),
                  o.push(s[63 & r]),
                  (r = (15 & i) << 2),
                  n >= t))
              ) {
                o.push(s[63 & r]);
                break;
              }
              (r |= ((i = 255 & e[n++]) >> 6) & 3),
                o.push(s[63 & r]),
                o.push(s[63 & i]);
            }
            return o.join("");
          },
          p = (e, t) => {
            let n = e.length,
              r = 0,
              i = 0,
              s,
              o,
              a,
              c,
              u,
              d = [];
            for (
              ;
              r < n - 1 &&
              i < t &&
              ((s = (u = e.charCodeAt(r++)) < l.length ? l[u] : -1),
              (o = (u = e.charCodeAt(r++)) < l.length ? l[u] : -1),
              !(
                -1 == s ||
                -1 == o ||
                (d.push(
                  String.fromCharCode(((s << 2) >>> 0) | ((48 & o) >> 4)),
                ),
                ++i >= t || r >= n) ||
                -1 == (a = (u = e.charCodeAt(r++)) < l.length ? l[u] : -1) ||
                (d.push(
                  String.fromCharCode(
                    (((15 & o) << 4) >>> 0) | ((60 & a) >> 2),
                  ),
                ),
                ++i >= t || r >= n)
              ));

            )
              d.push(
                String.fromCharCode(
                  (((3 & a) << 6) >>> 0) |
                    ((u = e.charCodeAt(r++)) < l.length ? l[u] : -1),
                ),
              ),
                ++i;
            return d.map((e) => e.charCodeAt(0));
          },
          f = (e, t) => {
            let n = null;
            for (
              "number" == typeof e && ((n = e), (e = () => null));
              null !== n || null !== (n = e());

            )
              n < 128
                ? t(127 & n)
                : (n < 2048
                    ? t(((n >> 6) & 31) | 192)
                    : (n < 65536
                        ? t(((n >> 12) & 15) | 224)
                        : (t(((n >> 18) & 7) | 240), t(((n >> 12) & 63) | 128)),
                      t(((n >> 6) & 63) | 128)),
                  t((63 & n) | 128)),
                (n = null);
          },
          m = (e, t) => {
            let n,
              r = null;
            for (; null !== (n = null !== r ? r : e()); ) {
              if (
                n >= 55296 &&
                n <= 57343 &&
                null !== (r = e()) &&
                r >= 56320 &&
                r <= 57343
              ) {
                t((n - 55296) * 1024 + r - 56320 + 65536), (r = null);
                continue;
              }
              t(n);
            }
            null !== r && t(r);
          },
          g = (e, t) =>
            m(e, (e) => {
              f(e, t);
            }),
          y =
            "function" == typeof setImmediate
              ? setImmediate
              : "object" == typeof process &&
                  "function" == typeof process.nextTick
                ? process.nextTick
                : setTimeout,
          v = (e) => {
            let t = 0,
              n = [];
            return (
              g(
                () => (t < e.length ? e.charCodeAt(t++) : null),
                (e) => {
                  n.push(e);
                },
              ),
              n
            );
          },
          b = (e, t, n, r) => {
            let i,
              s = e[t],
              o = e[t + 1];
            return (
              (s ^= n[0]),
              (o ^=
                (((r[s >>> 24] + r[256 | ((s >> 16) & 255)]) ^
                  r[512 | ((s >> 8) & 255)]) +
                  r[768 | (255 & s)]) ^
                n[1]),
              (s ^=
                (((r[o >>> 24] + r[256 | ((o >> 16) & 255)]) ^
                  r[512 | ((o >> 8) & 255)]) +
                  r[768 | (255 & o)]) ^
                n[2]),
              (o ^=
                (((r[s >>> 24] + r[256 | ((s >> 16) & 255)]) ^
                  r[512 | ((s >> 8) & 255)]) +
                  r[768 | (255 & s)]) ^
                n[3]),
              (s ^=
                (((r[o >>> 24] + r[256 | ((o >> 16) & 255)]) ^
                  r[512 | ((o >> 8) & 255)]) +
                  r[768 | (255 & o)]) ^
                n[4]),
              (o ^=
                (((r[s >>> 24] + r[256 | ((s >> 16) & 255)]) ^
                  r[512 | ((s >> 8) & 255)]) +
                  r[768 | (255 & s)]) ^
                n[5]),
              (s ^=
                (((r[o >>> 24] + r[256 | ((o >> 16) & 255)]) ^
                  r[512 | ((o >> 8) & 255)]) +
                  r[768 | (255 & o)]) ^
                n[6]),
              (o ^=
                (((r[s >>> 24] + r[256 | ((s >> 16) & 255)]) ^
                  r[512 | ((s >> 8) & 255)]) +
                  r[768 | (255 & s)]) ^
                n[7]),
              (s ^=
                (((r[o >>> 24] + r[256 | ((o >> 16) & 255)]) ^
                  r[512 | ((o >> 8) & 255)]) +
                  r[768 | (255 & o)]) ^
                n[8]),
              (o ^=
                (((r[s >>> 24] + r[256 | ((s >> 16) & 255)]) ^
                  r[512 | ((s >> 8) & 255)]) +
                  r[768 | (255 & s)]) ^
                n[9]),
              (s ^=
                (((r[o >>> 24] + r[256 | ((o >> 16) & 255)]) ^
                  r[512 | ((o >> 8) & 255)]) +
                  r[768 | (255 & o)]) ^
                n[10]),
              (o ^=
                (((r[s >>> 24] + r[256 | ((s >> 16) & 255)]) ^
                  r[512 | ((s >> 8) & 255)]) +
                  r[768 | (255 & s)]) ^
                n[11]),
              (s ^=
                (((r[o >>> 24] + r[256 | ((o >> 16) & 255)]) ^
                  r[512 | ((o >> 8) & 255)]) +
                  r[768 | (255 & o)]) ^
                n[12]),
              (o ^=
                (((r[s >>> 24] + r[256 | ((s >> 16) & 255)]) ^
                  r[512 | ((s >> 8) & 255)]) +
                  r[768 | (255 & s)]) ^
                n[13]),
              (s ^=
                (((r[o >>> 24] + r[256 | ((o >> 16) & 255)]) ^
                  r[512 | ((o >> 8) & 255)]) +
                  r[768 | (255 & o)]) ^
                n[14]),
              (o ^=
                (((r[s >>> 24] + r[256 | ((s >> 16) & 255)]) ^
                  r[512 | ((s >> 8) & 255)]) +
                  r[768 | (255 & s)]) ^
                n[15]),
              (s ^=
                (((r[o >>> 24] + r[256 | ((o >> 16) & 255)]) ^
                  r[512 | ((o >> 8) & 255)]) +
                  r[768 | (255 & o)]) ^
                n[16]),
              (e[t] = o ^ n[17]),
              (e[t + 1] = s),
              e
            );
          },
          x = (e, t) => {
            let n = 0;
            for (let r = 0; r < 4; ++r)
              (n = (n << 8) | (255 & e[t])), (t = (t + 1) % e.length);
            return { key: n, offp: t };
          },
          k = (e, t, n) => {
            let r = t.length,
              i = n.length,
              s = 0,
              o = [0, 0],
              a;
            for (let n = 0; n < r; n++)
              (s = (a = x(e, s)).offp), (t[n] = t[n] ^ a.key);
            for (let e = 0; e < r; e += 2)
              (o = b(o, 0, t, n)), (t[e] = o[0]), (t[e + 1] = o[1]);
            for (let e = 0; e < i; e += 2)
              (o = b(o, 0, t, n)), (n[e] = o[0]), (n[e + 1] = o[1]);
          },
          w = (e, t, n, r) => {
            let i = n.length,
              s = r.length,
              o = 0,
              a = [0, 0],
              l;
            for (let e = 0; e < i; e++)
              (o = (l = x(t, o)).offp), (n[e] = n[e] ^ l.key);
            o = 0;
            for (let t = 0; t < i; t += 2)
              (o = (l = x(e, o)).offp),
                (a[0] ^= l.key),
                (o = (l = x(e, o)).offp),
                (a[1] ^= l.key),
                (a = b(a, 0, n, r)),
                (n[t] = a[0]),
                (n[t + 1] = a[1]);
            for (let t = 0; t < s; t += 2)
              (o = (l = x(e, o)).offp),
                (a[0] ^= l.key),
                (o = (l = x(e, o)).offp),
                (a[1] ^= l.key),
                (a = b(a, 0, n, r)),
                (r[t] = a[0]),
                (r[t + 1] = a[1]);
          },
          _ = (e, t, n, r, i) => {
            let s = d.slice(),
              o = s.length;
            if (n < 4 || n > 31) {
              let e = Error(`Illegal number of rounds (4-31): ${n}`);
              if (!1 === r) return Promise.reject(e);
              throw e;
            }
            if (16 !== t.length) {
              let e = Error(`Illegal salt length: ${t.length} != 16`);
              if (!1 === r) return Promise.reject(e);
              throw e;
            }
            n = (1 << n) >>> 0;
            let a,
              l,
              h = 0,
              p;
            Int32Array
              ? ((a = new Int32Array(c)), (l = new Int32Array(u)))
              : ((a = c.slice()), (l = u.slice())),
              w(t, e, a, l);
            let f = () => {
              if ((i && i(h / n), h < n)) {
                let r = Date.now();
                for (
                  ;
                  h < n &&
                  ((h += 1), k(e, a, l), k(t, a, l), !(Date.now() - r > 100));

                );
              } else {
                for (h = 0; h < 64; h++)
                  for (p = 0; p < o >> 1; p++) b(s, p << 1, a, l);
                let e = [];
                for (h = 0; h < o; h++)
                  e.push(((s[h] >> 24) & 255) >>> 0),
                    e.push(((s[h] >> 16) & 255) >>> 0),
                    e.push(((s[h] >> 8) & 255) >>> 0),
                    e.push((255 & s[h]) >>> 0);
                return !1 === r ? Promise.resolve(e) : e;
              }
              if (!1 === r)
                return new Promise((e) =>
                  y(() => {
                    f().then(e);
                  }),
                );
            };
            if (!1 === r) return f();
            {
              let e;
              for (;;) if ("u" > typeof (e = f())) return e || [];
            }
          },
          O = (e) => (0, r.randomBytes)(e),
          T = (e = i) => {
            if ("number" != typeof e)
              throw Error("Illegal arguments: " + typeof e);
            e < 4 ? (e = 4) : e > 31 && (e = 31);
            let t = [];
            return (
              t.push("$2a$"),
              e < 10 && t.push("0"),
              t.push(e.toString()),
              t.push("$"),
              t.push(h(O(16), 16)),
              t.join("")
            );
          },
          S = (e, t = i) => {
            if (
              ("number" == typeof t && (t = T(t)),
              "string" != typeof e || "string" != typeof t)
            )
              throw Error("Illegal arguments: " + typeof e + ", " + typeof t);
            return (function (e, t, n, r) {
              let i, s;
              if ("string" != typeof e || "string" != typeof t) {
                let e = Error("Invalid string / salt: Not a string");
                if (!1 === n) return Promise.reject(e);
                throw e;
              }
              if ("$" !== t.charAt(0) || "2" !== t.charAt(1)) {
                let e = Error("Invalid salt version: " + t.substring(0, 2));
                if (!1 === n) return Promise.reject(e);
                throw e;
              }
              if ("$" === t.charAt(2)) (i = "\0"), (s = 3);
              else {
                if (
                  ("a" !== (i = t.charAt(2)) && "b" !== i && "y" !== i) ||
                  "$" !== t.charAt(3)
                ) {
                  let e = Error("Invalid salt revision: " + t.substring(2, 4));
                  if (!1 === n) return Promise.reject(e);
                  throw e;
                }
                s = 4;
              }
              if (t.charAt(s + 2) > "$") {
                let e = Error("Missing salt rounds");
                if (!1 === n) return Promise.reject(e);
                throw e;
              }
              let o =
                  10 * parseInt(t.substring(s, s + 1), 10) +
                  parseInt(t.substring(s + 1, s + 2), 10),
                a = t.substring(s + 3, s + 25),
                l = v((e += i >= "a" ? "\0" : "")),
                c = p(a, 16),
                u = (e) => {
                  let t = [];
                  return (
                    t.push("$2"),
                    i >= "a" && t.push(i),
                    t.push("$"),
                    o < 10 && t.push("0"),
                    t.push(o.toString()),
                    t.push("$"),
                    t.push(h(c, c.length)),
                    t.push(h(e, 4 * d.length - 1)),
                    t.join("")
                  );
                };
              return !1 === n
                ? _(l, c, o, !1, void 0).then((e) => u(e))
                : u(_(l, c, o, !0, void 0));
            })(e, t, !0);
          };
      },
      24490: (e) => {
        "use strict";
        var t = Object.defineProperty,
          n = Object.getOwnPropertyDescriptor,
          r = Object.getOwnPropertyNames,
          i = Object.prototype.hasOwnProperty,
          s = (e, n) => t(e, "name", { value: n, configurable: !0 }),
          o = {};
        ((e, n) => {
          for (var r in n) t(e, r, { get: n[r], enumerable: !0 });
        })(o, { storeSecureCookies: () => l, useSecureCookies: () => c }),
          (e.exports = ((e, s, o, a) => {
            if ((s && "object" == typeof s) || "function" == typeof s)
              for (let l of r(s))
                i.call(e, l) ||
                  l === o ||
                  t(e, l, {
                    get: () => s[l],
                    enumerable: !(a = n(s, l)) || a.enumerable,
                  });
            return e;
          })(t({}, "__esModule", { value: !0 }), o));
        let a =
            "object" == typeof global
              ? (global.__COOKIES_STORAGE__ =
                  global.__COOKIES_STORAGE__ || new Map())
              : null,
          l = s((e) => {
            let t;
            do t = Math.random();
            while (a?.has(t));
            return a && (a.set(t, { value: e, time: Date.now() }), d()), t;
          }, "storeSecureCookies"),
          c = s((e) => a?.get(e)?.value, "useSecureCookies"),
          u = null,
          d = s(() => {
            u || (u = setTimeout(h, 1e4));
          }, "setCleanupTimeout"),
          h = s(() => {
            if ((clearTimeout(u), (u = null), !a)) return;
            let e = Date.now();
            for (let [t, { time: n }] of a.entries())
              e - n > 5e3 && a.delete(t);
            a.size && d();
          }, "cleanup");
      },
      26283: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { A: () => d });
            var i = n(61268),
              s = n(65666),
              o = n(6130),
              a = n(84205),
              l = n(12253),
              c = n(94434),
              u = e([c]);
            function d({ isLoading: e, reasoning: t }) {
              let [n, r] = (0, a.useState)(!0);
              return (0, i.jsxs)("div", {
                className: "flex flex-col",
                children: [
                  e
                    ? (0, i.jsxs)("div", {
                        className: "flex flex-row gap-2 items-center",
                        children: [
                          (0, i.jsx)("div", {
                            className: "font-medium",
                            children: "Reasoning",
                          }),
                          (0, i.jsx)("div", {
                            className: "animate-spin",
                            children: (0, i.jsx)(l.hz, {}),
                          }),
                        ],
                      })
                    : (0, i.jsxs)("div", {
                        className: "flex flex-row gap-2 items-center",
                        children: [
                          (0, i.jsx)("div", {
                            className: "font-medium",
                            children: "Reasoned for a few seconds",
                          }),
                          (0, i.jsx)("button", {
                            "data-testid": "message-reasoning-toggle",
                            type: "button",
                            className: "cursor-pointer",
                            onClick: () => {
                              r(!n);
                            },
                            children: (0, i.jsx)(l.D3, {}),
                          }),
                        ],
                      }),
                  (0, i.jsx)(s.N, {
                    initial: !1,
                    children:
                      n &&
                      (0, i.jsx)(
                        o.P.div,
                        {
                          "data-testid": "message-reasoning",
                          initial: "collapsed",
                          animate: "expanded",
                          exit: "collapsed",
                          variants: {
                            collapsed: {
                              height: 0,
                              opacity: 0,
                              marginTop: 0,
                              marginBottom: 0,
                            },
                            expanded: {
                              height: "auto",
                              opacity: 1,
                              marginTop: "1rem",
                              marginBottom: "0.5rem",
                            },
                          },
                          transition: { duration: 0.2, ease: "easeInOut" },
                          style: { overflow: "hidden" },
                          className:
                            "pl-4 text-zinc-600 dark:text-zinc-400 border-l flex flex-col gap-4",
                          children: (0, i.jsx)(c.o, { children: t }),
                        },
                        "content",
                      ),
                  }),
                ],
              });
            }
            (c = (u.then ? (await u)() : u)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      26564: (e) => {
        function t(e) {
          var t = Error("Cannot find module '" + e + "'");
          throw ((t.code = "MODULE_NOT_FOUND"), t);
        }
        (t.keys = () => []), (t.resolve = t), (t.id = 26564), (e.exports = t);
      },
      26708: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { Z: () => x });
            var i = n(61268),
              s = n(98849),
              o = n.n(s),
              a = n(1306),
              l = n.n(a),
              c = n(88787),
              u = n(84205),
              d = n(98654),
              h = n(48958),
              p = n(28909),
              f = n(37787),
              m = n(15942),
              g = n(12253),
              y = n(29791),
              v = n(97594),
              b = e([p, f, m, v]);
            [p, f, m, v] = b.then ? (await b)() : b;
            let x = (0, u.memo)(
                function ({
                  chatId: e,
                  input: t,
                  setInput: n,
                  status: r,
                  stop: s,
                  attachments: a,
                  setAttachments: l,
                  messages: p,
                  setMessages: m,
                  append: g,
                  className: b,
                }) {
                  let x = (0, u.useRef)(null),
                    { width: O } = (0, h.lW)(),
                    T = () => {
                      x.current &&
                        ((x.current.style.height = "auto"),
                        (x.current.style.height = `${x.current.scrollHeight + 2}px`));
                    },
                    S = () => {
                      x.current &&
                        ((x.current.style.height = "auto"),
                        (x.current.style.height = "98px"));
                    },
                    [E, C] = (0, h.Mj)("input", ""),
                    A = (0, u.useRef)(null),
                    [N, I] = (0, u.useState)([]),
                    D = (0, u.useCallback)(() => {
                      let e = { id: (0, c.Ak)(), role: "user", content: t };
                      g(e, { experimental_attachments: a }),
                        n(""),
                        l([]),
                        C(""),
                        S(),
                        O && O > 768 && x.current?.focus();
                    }, [g, t, a, l, C, n, O]),
                    P = async (e) => {
                      let t = new FormData();
                      t.append("file", e);
                      try {
                        let e = await fetch("/api/files/upload", {
                          method: "POST",
                          body: t,
                        });
                        if (e.ok) {
                          let {
                            url: t,
                            pathname: n,
                            contentType: r,
                          } = await e.json();
                          return { url: t, name: n, contentType: r };
                        }
                        let { error: n } = await e.json();
                        d.oR.error(n);
                      } catch (e) {
                        d.oR.error("Failed to upload file, please try again!");
                      }
                    },
                    R = (0, u.useCallback)(
                      async (e) => {
                        let t = Array.from(e.target.files || []);
                        I(t.map((e) => e.name));
                        try {
                          let e = t.map((e) => P(e)),
                            n = (await Promise.all(e)).filter(
                              (e) => void 0 !== e,
                            );
                          l((e) => [...e, ...n]);
                        } catch (e) {
                          console.error("Error uploading files!", e);
                        } finally {
                          I([]);
                        }
                      },
                      [l],
                    );
                  return (0, i.jsxs)("div", {
                    className: "relative w-full flex flex-col gap-4",
                    children: [
                      0 === p.length &&
                        0 === a.length &&
                        0 === N.length &&
                        (0, i.jsx)(v.z, { append: g, chatId: e }),
                      (0, i.jsx)("input", {
                        type: "file",
                        className:
                          "fixed -top-4 -left-4 size-0.5 opacity-0 pointer-events-none",
                        ref: A,
                        multiple: !0,
                        onChange: R,
                        tabIndex: -1,
                      }),
                      (a.length > 0 || N.length > 0) &&
                        (0, i.jsxs)("div", {
                          "data-testid": "attachments-preview",
                          className:
                            "flex flex-row gap-2 overflow-x-scroll items-end",
                          children: [
                            a.map((e) =>
                              (0, i.jsx)(y.q, { attachment: e }, e.url),
                            ),
                            N.map((e) =>
                              (0, i.jsx)(
                                y.q,
                                {
                                  attachment: {
                                    url: "",
                                    name: e,
                                    contentType: "",
                                  },
                                  isUploading: !0,
                                },
                                e,
                              ),
                            ),
                          ],
                        }),
                      (0, i.jsx)(f.T, {
                        "data-testid": "multimodal-input",
                        ref: x,
                        placeholder: "Send a message...",
                        value: t,
                        onChange: (e) => {
                          n(e.target.value), T();
                        },
                        className: o()(
                          "min-h-[24px] max-h-[calc(75dvh)] overflow-hidden resize-none rounded-2xl !text-base bg-muted pb-10 dark:border-zinc-700",
                          b,
                        ),
                        rows: 2,
                        autoFocus: !0,
                        onKeyDown: (e) => {
                          "Enter" === e.key &&
                            !e.shiftKey &&
                            !e.nativeEvent.isComposing &&
                            (e.preventDefault(),
                            "ready" !== r
                              ? d.oR.error(
                                  "Please wait for the model to finish its response!",
                                )
                              : (t.trim().length > 0 || a.length > 0) && D());
                        },
                      }),
                      (0, i.jsx)("div", {
                        className:
                          "absolute bottom-0 p-2 w-fit flex flex-row justify-start",
                        children: (0, i.jsx)(k, { fileInputRef: A, status: r }),
                      }),
                      (0, i.jsx)("div", {
                        className:
                          "absolute bottom-0 right-0 p-2 w-fit flex flex-row justify-end",
                        children:
                          "streaming" === r
                            ? (0, i.jsx)(w, { stop: s, setMessages: m })
                            : (0, i.jsx)(_, {
                                input: t,
                                submitForm: D,
                                uploadQueue: N,
                              }),
                      }),
                    ],
                  });
                },
                (e, t) =>
                  e.input === t.input &&
                  e.status === t.status &&
                  !!l()(e.attachments, t.attachments),
              ),
              k = (0, u.memo)(function ({ fileInputRef: e, status: t }) {
                return (0, i.jsx)(p.$, {
                  "data-testid": "attachments-button",
                  className:
                    "rounded-md rounded-bl-lg p-[7px] h-fit dark:border-zinc-700 hover:dark:bg-zinc-900 hover:bg-zinc-200",
                  onClick: (t) => {
                    t.preventDefault(), e.current?.click();
                  },
                  disabled: "ready" !== t,
                  variant: "ghost",
                  children: (0, i.jsx)(g.Au, { size: 14 }),
                });
              }),
              w = (0, u.memo)(function ({ stop: e, setMessages: t }) {
                return (0, i.jsx)(p.$, {
                  "data-testid": "stop-button",
                  className:
                    "rounded-full p-1.5 h-fit border dark:border-zinc-600",
                  onClick: (n) => {
                    n.preventDefault(), e(), t((e) => (0, m.y8)(e));
                  },
                  children: (0, i.jsx)(g.wF, { size: 14 }),
                });
              }),
              _ = (0, u.memo)(
                function ({ submitForm: e, input: t, uploadQueue: n }) {
                  return (0, i.jsx)(p.$, {
                    "data-testid": "send-button",
                    className:
                      "rounded-full p-1.5 h-fit border dark:border-zinc-600",
                    onClick: (t) => {
                      t.preventDefault(), e();
                    },
                    disabled: 0 === t.trim().length || n.length > 0,
                    children: (0, i.jsx)(g.Kp, { size: 14 }),
                  });
                },
                (e, t) =>
                  e.uploadQueue.length === t.uploadQueue.length &&
                  e.input === t.input,
              );
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      27448: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { j: () => u });
            var i = n(61268),
              s = n(84205),
              o = n(42443),
              a = n(28909),
              l = n(37787),
              c = e([a, l]);
            function u({ message: e, setMode: t, setMessages: n, reload: r }) {
              let [c, u] = (0, s.useState)(!1),
                [d, h] = (0, s.useState)(e.content),
                p = (0, s.useRef)(null),
                f = () => {
                  p.current &&
                    ((p.current.style.height = "auto"),
                    (p.current.style.height = `${p.current.scrollHeight + 2}px`));
                };
              return (0, i.jsxs)("div", {
                className: "flex flex-col gap-2 w-full",
                children: [
                  (0, i.jsx)(l.T, {
                    "data-testid": "message-editor",
                    ref: p,
                    className:
                      "bg-transparent outline-none overflow-hidden resize-none !text-base rounded-xl w-full",
                    value: d,
                    onChange: (e) => {
                      h(e.target.value), f();
                    },
                  }),
                  (0, i.jsxs)("div", {
                    className: "flex flex-row gap-2 justify-end",
                    children: [
                      (0, i.jsx)(a.$, {
                        variant: "outline",
                        className: "h-fit py-2 px-3",
                        onClick: () => {
                          t("view");
                        },
                        children: "Cancel",
                      }),
                      (0, i.jsx)(a.$, {
                        "data-testid": "message-editor-send-button",
                        variant: "default",
                        className: "h-fit py-2 px-3",
                        disabled: c,
                        onClick: async () => {
                          u(!0),
                            await (0, o.e)({ id: e.id }),
                            n((t) => {
                              let n = t.findIndex((t) => t.id === e.id);
                              if (-1 !== n) {
                                let r = { ...e, content: d };
                                return [...t.slice(0, n), r];
                              }
                              return t;
                            }),
                            t("view"),
                            r();
                        },
                        children: c ? "Sending..." : "Send",
                      }),
                    ],
                  }),
                ],
              });
            }
            ([a, l] = c.then ? (await c)() : c), r();
          } catch (e) {
            r(e);
          }
        });
      },
      27480: (e, t, n) => {
        "use strict";
        n.d(t, { A: () => ex });
        var r = n(21820),
          i = n(29021);
        let s = new Map(),
          o = new Map(),
          a = Symbol("OriginError"),
          l = {};
        class c extends Promise {
          constructor(e, t, n, r, i = {}) {
            let o, l;
            super((e, t) => {
              (o = e), (l = t);
            }),
              (this.tagged = Array.isArray(e.raw)),
              (this.strings = e),
              (this.args = t),
              (this.handler = n),
              (this.canceller = r),
              (this.options = i),
              (this.state = null),
              (this.statement = null),
              (this.resolve = (e) => ((this.active = !1), o(e))),
              (this.reject = (e) => ((this.active = !1), l(e))),
              (this.active = !1),
              (this.cancelled = null),
              (this.executed = !1),
              (this.signature = ""),
              (this[a] = this.handler.debug
                ? Error()
                : this.tagged &&
                  (function (e) {
                    if (s.has(e)) return s.get(e);
                    let t = Error.stackTraceLimit;
                    return (
                      (Error.stackTraceLimit = 4),
                      s.set(e, Error()),
                      (Error.stackTraceLimit = t),
                      s.get(e)
                    );
                  })(this.strings));
          }
          get origin() {
            return (
              (this.handler.debug
                ? this[a].stack
                : this.tagged && o.has(this.strings)
                  ? o.get(this.strings)
                  : o.set(this.strings, this[a].stack).get(this.strings)) || ""
            );
          }
          static get [Symbol.species]() {
            return Promise;
          }
          cancel() {
            return (
              this.canceller && (this.canceller(this), (this.canceller = null))
            );
          }
          simple() {
            return (
              (this.options.simple = !0), (this.options.prepare = !1), this
            );
          }
          async readable() {
            return this.simple(), (this.streaming = !0), this;
          }
          async writable() {
            return this.simple(), (this.streaming = !0), this;
          }
          cursor(e = 1, t) {
            let n;
            return ((this.options.simple = !1),
            "function" == typeof e && ((t = e), (e = 1)),
            (this.cursorRows = e),
            "function" == typeof t)
              ? ((this.cursorFn = t), this)
              : {
                  [Symbol.asyncIterator]: () => ({
                    next: () => {
                      if (this.executed && !this.active) return { done: !0 };
                      n && n();
                      let e = new Promise((e, t) => {
                        (this.cursorFn = (t) => (
                          e({ value: t, done: !1 }), new Promise((e) => (n = e))
                        )),
                          (this.resolve = () => (
                            (this.active = !1), e({ done: !0 })
                          )),
                          (this.reject = (e) => ((this.active = !1), t(e)));
                      });
                      return this.execute(), e;
                    },
                    return: () => (n && n(l), { done: !0 }),
                  }),
                };
          }
          describe() {
            return (
              (this.options.simple = !1),
              (this.onlyDescribe = this.options.prepare = !0),
              this
            );
          }
          stream() {
            throw Error(".stream has been renamed to .forEach");
          }
          forEach(e) {
            return (this.forEachFn = e), this.handle(), this;
          }
          raw() {
            return (this.isRaw = !0), this;
          }
          values() {
            return (this.isRaw = "values"), this;
          }
          async handle() {
            !this.executed &&
              (this.executed = !0) &&
              (await 1) &&
              this.handler(this);
          }
          execute() {
            return this.handle(), this;
          }
          then() {
            return this.handle(), super.then.apply(this, arguments);
          }
          catch() {
            return this.handle(), super.catch.apply(this, arguments);
          }
          finally() {
            return this.handle(), super.finally.apply(this, arguments);
          }
        }
        class u extends Error {
          constructor(e) {
            super(e.message),
              (this.name = this.constructor.name),
              Object.assign(this, e);
          }
        }
        let d = {
          connection: function e(t, n, r) {
            let { host: i, port: s } = r || n,
              o = Object.assign(
                Error("write " + t + " " + (n.path || i + ":" + s)),
                { code: t, errno: t, address: n.path || i },
                n.path ? {} : { port: s },
              );
            return Error.captureStackTrace(o, e), o;
          },
          postgres: function e(t) {
            let n = new u(t);
            return Error.captureStackTrace(n, e), n;
          },
          generic: function e(t, n) {
            let r = Object.assign(Error(t + ": " + n), { code: t });
            return Error.captureStackTrace(r, e), r;
          },
          notSupported: function e(t) {
            let n = Object.assign(Error(t + " (B) is not supported"), {
              code: "MESSAGE_NOT_SUPPORTED",
              name: t,
            });
            return Error.captureStackTrace(n, e), n;
          },
        };
        class h {
          then() {
            T();
          }
          catch() {
            T();
          }
          finally() {
            T();
          }
        }
        class p extends h {
          constructor(e) {
            super(), (this.value = I(e));
          }
        }
        class f extends h {
          constructor(e, t, n) {
            super(), (this.value = e), (this.type = t), (this.array = n);
          }
        }
        class m extends h {
          constructor(e, t) {
            super(), (this.first = e), (this.rest = t);
          }
          build(e, t, n, r) {
            let i = O.map(([t, n]) => ({ fn: n, i: e.search(t) }))
              .sort((e, t) => e.i - t.i)
              .pop();
            return -1 === i.i
              ? N(this.first, r)
              : i.fn(this.first, this.rest, t, n, r);
          }
        }
        function g(e, t, n, r) {
          let i = e instanceof f ? e.value : e;
          if (
            void 0 === i &&
            (e instanceof f
              ? (e.value = r.transform.undefined)
              : (i = e = r.transform.undefined),
            void 0 === i)
          )
            throw d.generic(
              "UNDEFINED_VALUE",
              "Undefined values are not allowed",
            );
          return (
            "$" +
            n.push(
              e instanceof f
                ? (t.push(e.value),
                  e.array
                    ? e.array[e.type || D(e.value)] ||
                      e.type ||
                      (function e(t) {
                        return Array.isArray(t)
                          ? e(t[0])
                          : 1009 * ("string" == typeof t);
                      })(e.value)
                    : e.type)
                : (t.push(e), D(e)),
            )
          );
        }
        let y = A({
          string: { to: 25, from: null, serialize: (e) => "" + e },
          number: {
            to: 0,
            from: [21, 23, 26, 700, 701],
            serialize: (e) => "" + e,
            parse: (e) => +e,
          },
          json: {
            to: 114,
            from: [114, 3802],
            serialize: (e) => JSON.stringify(e),
            parse: (e) => JSON.parse(e),
          },
          boolean: {
            to: 16,
            from: 16,
            serialize: (e) => (!0 === e ? "t" : "f"),
            parse: (e) => "t" === e,
          },
          date: {
            to: 1184,
            from: [1082, 1114, 1184],
            serialize: (e) =>
              (e instanceof Date ? e : new Date(e)).toISOString(),
            parse: (e) => new Date(e),
          },
          bytea: {
            to: 17,
            from: 17,
            serialize: (e) => "\\x" + Buffer.from(e).toString("hex"),
            parse: (e) => Buffer.from(e.slice(2), "hex"),
          },
        });
        function v(e, t, n, r, i, s) {
          for (let o = 1; o < e.strings.length; o++)
            (t += b(t, n, r, i, s) + e.strings[o]), (n = e.args[o]);
          return t;
        }
        function b(e, t, n, r, i) {
          return t instanceof m
            ? t.build(e, n, r, i)
            : t instanceof c
              ? x(t, n, r, i)
              : t instanceof p
                ? t.value
                : t && t[0] instanceof c
                  ? t.reduce((e, t) => e + " " + x(t, n, r, i), "")
                  : g(t, n, r, i);
        }
        function x(e, t, n, r) {
          return (e.fragment = !0), v(e, e.strings[0], e.args[0], t, n, r);
        }
        function k(e, t, n, r, i) {
          return e
            .map(
              (e) =>
                "(" + r.map((r) => b("values", e[r], t, n, i)).join(",") + ")",
            )
            .join(",");
        }
        function w(e, t, n, r, i) {
          let s = Array.isArray(e[0]),
            o = t.length ? t.flat() : Object.keys(s ? e[0] : e);
          return k(s ? e : [e], n, r, o, i);
        }
        function _(e, t, n, r, i) {
          let s;
          return ("string" == typeof e && (e = [e].concat(t)), Array.isArray(e))
            ? N(e, i)
            : (t.length ? t.flat() : Object.keys(e))
                .map(
                  (t) =>
                    ((s = e[t]) instanceof c
                      ? x(s, n, r, i)
                      : s instanceof p
                        ? s.value
                        : g(s, n, r, i)) +
                    " as " +
                    I(i.transform.column.to ? i.transform.column.to(t) : t),
                )
                .join(",");
        }
        let O = Object.entries({
          values: w,
          in: (...e) => {
            let t = w(...e);
            return "()" === t ? "(null)" : t;
          },
          select: _,
          as: _,
          returning: _,
          "\\(": _,
          update: (e, t, n, r, i) =>
            (t.length ? t.flat() : Object.keys(e)).map(
              (t) =>
                I(i.transform.column.to ? i.transform.column.to(t) : t) +
                "=" +
                b("values", e[t], n, r, i),
            ),
          insert(e, t, n, r, i) {
            let s = t.length
              ? t.flat()
              : Object.keys(Array.isArray(e) ? e[0] : e);
            return (
              "(" +
              N(s, i) +
              ")values" +
              k(Array.isArray(e) ? e : [e], n, r, s, i)
            );
          },
        }).map(([e, t]) => [
          RegExp("((?:^|[\\s(])" + e + "(?:$|[\\s(]))(?![\\s\\S]*\\1)", "i"),
          t,
        ]);
        function T() {
          throw d.generic(
            "NOT_TAGGED_CALL",
            "Query not called as a tagged template literal",
          );
        }
        let S = y.serializers,
          E = y.parsers,
          C = function (e) {
            let t = A(e || {});
            return {
              serializers: Object.assign({}, S, t.serializers),
              parsers: Object.assign({}, E, t.parsers),
            };
          };
        function A(e) {
          return Object.keys(e).reduce(
            (t, n) => (
              e[n].from &&
                []
                  .concat(e[n].from)
                  .forEach((r) => (t.parsers[r] = e[n].parse)),
              e[n].serialize &&
                ((t.serializers[e[n].to] = e[n].serialize),
                e[n].from &&
                  []
                    .concat(e[n].from)
                    .forEach((r) => (t.serializers[r] = e[n].serialize))),
              t
            ),
            { parsers: {}, serializers: {} },
          );
        }
        function N(e, { transform: { column: t } }) {
          return e.map((e) => I(t.to ? t.to(e) : e)).join(",");
        }
        let I = function (e) {
            return '"' + e.replace(/"/g, '""').replace(/\./g, '"."') + '"';
          },
          D = function e(t) {
            return t instanceof f
              ? t.type
              : t instanceof Date
                ? 1184
                : t instanceof Uint8Array
                  ? 17
                  : !0 === t || !1 === t
                    ? 16
                    : "bigint" == typeof t
                      ? 20
                      : Array.isArray(t)
                        ? e(t[0])
                        : 0;
          },
          P = /\\/g,
          R = /"/g,
          M = function e(t, n, r, i) {
            if (!1 === Array.isArray(t)) return t;
            if (!t.length) return "{}";
            let s = t[0],
              o = 1020 === i ? ";" : ",";
            return Array.isArray(s) && !s.type
              ? "{" + t.map((t) => e(t, n, r, i)).join(o) + "}"
              : "{" +
                  t
                    .map((e) => {
                      if (
                        void 0 === e &&
                        void 0 === (e = r.transform.undefined)
                      )
                        throw d.generic(
                          "UNDEFINED_VALUE",
                          "Undefined values are not allowed",
                        );
                      return null === e
                        ? "null"
                        : '"' +
                            (n ? n(e.type ? e.value : e) : "" + e)
                              .replace(P, "\\\\")
                              .replace(R, '\\"') +
                            '"';
                    })
                    .join(o) +
                  "}";
          },
          L = { i: 0, char: null, str: "", quoted: !1, last: 0 },
          j = (e) => {
            let t = e[0];
            for (let n = 1; n < e.length; n++)
              t += "_" === e[n] ? e[++n].toUpperCase() : e[n];
            return t;
          },
          F = (e) => {
            let t = e[0].toUpperCase();
            for (let n = 1; n < e.length; n++)
              t += "_" === e[n] ? e[++n].toUpperCase() : e[n];
            return t;
          },
          B = (e) => e.replace(/_/g, "-"),
          z = (e) => e.replace(/([A-Z])/g, "_$1").toLowerCase(),
          $ = (e) =>
            (
              e.slice(0, 1) + e.slice(1).replace(/([A-Z])/g, "_$1")
            ).toLowerCase(),
          q = (e) => e.replace(/-/g, "_");
        function U(e) {
          return function t(n, r) {
            return "object" == typeof n &&
              null !== n &&
              (114 === r.type || 3802 === r.type)
              ? Array.isArray(n)
                ? n.map((e) => t(e, r))
                : Object.entries(n).reduce(
                    (n, [i, s]) => Object.assign(n, { [e(i)]: t(s, r) }),
                    {},
                  )
              : n;
          };
        }
        (j.column = { from: j }),
          (j.value = { from: U(j) }),
          (z.column = { to: z });
        let H = { ...j };
        (H.column.to = z),
          (F.column = { from: F }),
          (F.value = { from: U(F) }),
          ($.column = { to: $ });
        let Q = { ...F };
        (Q.column.to = $),
          (B.column = { from: B }),
          (B.value = { from: U(B) }),
          (q.column = { to: q });
        let V = { ...B };
        V.column.to = q;
        var W = n(91645),
          Z = n(34631),
          G = n(55511),
          Y = n(27910),
          K = n(74998);
        class X extends Array {
          constructor() {
            super(),
              Object.defineProperties(this, {
                count: { value: null, writable: !0 },
                state: { value: null, writable: !0 },
                command: { value: null, writable: !0 },
                columns: { value: null, writable: !0 },
                statement: { value: null, writable: !0 },
              });
          }
          static get [Symbol.species]() {
            return Array;
          }
        }
        let J = function (e = []) {
            let t = e.slice(),
              n = 0;
            return {
              get length() {
                return t.length - n;
              },
              remove: (e) => {
                let n = t.indexOf(e);
                return -1 === n ? null : (t.splice(n, 1), e);
              },
              push: (e) => (t.push(e), e),
              shift: () => {
                let e = t[n++];
                return (
                  n === t.length ? ((n = 0), (t = [])) : (t[n - 1] = void 0), e
                );
              },
            };
          },
          ee = Buffer.allocUnsafe(256),
          et = Object.assign(
            function () {
              return (et.i = 0), et;
            },
            "BCcDdEFfHPpQSX".split("").reduce((e, t) => {
              let n = t.charCodeAt(0);
              return (e[t] = () => ((ee[0] = n), (et.i = 5), et)), e;
            }, {}),
            {
              N: "\0",
              i: 0,
              inc: (e) => ((et.i += e), et),
              str(e) {
                let t = Buffer.byteLength(e);
                return en(t), (et.i += ee.write(e, et.i, t, "utf8")), et;
              },
              i16: (e) => (en(2), ee.writeUInt16BE(e, et.i), (et.i += 2), et),
              i32: (e, t) => (
                t || 0 === t
                  ? ee.writeUInt32BE(e, t)
                  : (en(4), ee.writeUInt32BE(e, et.i), (et.i += 4)),
                et
              ),
              z: (e) => (en(e), ee.fill(0, et.i, et.i + e), (et.i += e), et),
              raw: (e) => (
                (ee = Buffer.concat([ee.subarray(0, et.i), e])),
                (et.i = ee.length),
                et
              ),
              end(e = 1) {
                ee.writeUInt32BE(et.i - e, e);
                let t = ee.subarray(0, et.i);
                return (et.i = 0), (ee = Buffer.allocUnsafe(256)), t;
              },
            },
          );
        function en(e) {
          if (ee.length - et.i < e) {
            let t = ee,
              n = t.length;
            (ee = Buffer.allocUnsafe(n + (n >> 1) + e)), t.copy(ee);
          }
        }
        let er = function e(
            t,
            n = {},
            { onopen: r = eu, onend: i = eu, onclose: s = eu } = {},
          ) {
            let {
                ssl: o,
                max: a,
                user: u,
                host: h,
                port: p,
                database: f,
                parsers: m,
                transform: y,
                onnotice: b,
                onnotify: x,
                onparameter: k,
                max_pipeline: w,
                keep_alive: _,
                backoff: O,
                target_session_attrs: T,
              } = t,
              S = J(),
              E = ei++,
              C = { pid: null, secret: null },
              A = eg(eV, t.idle_timeout),
              N = eg(eV, t.max_lifetime),
              I = eg(function () {
                eH(d.connection("CONNECT_TIMEOUT", t, D)), D.destroy();
              }, t.connect_timeout),
              D = null,
              P,
              R = new X(),
              j = Buffer.alloc(0),
              F = t.fetch_types,
              B = {},
              z = {},
              $ = Math.random().toString(36).slice(2),
              q = 1,
              U = 0,
              H = 0,
              Q = 0,
              V = 0,
              ee = 0,
              en = 0,
              er = 0,
              eh = null,
              ey = null,
              ev = !1,
              eb = null,
              ex = null,
              ek = null,
              ew = null,
              e_ = null,
              eO = null,
              eT = null,
              eS = null,
              eE = null,
              eC = null,
              eA = {
                queue: n.closed,
                idleTimer: A,
                connect(e) {
                  (ek = e), e$();
                },
                terminate: eW,
                execute: eD,
                cancel: eI,
                end: eV,
                count: 0,
                id: E,
              };
            return n.closed && n.closed.push(eA), eA;
            async function eN() {
              let e;
              try {
                e = t.socket
                  ? await Promise.resolve(t.socket(t))
                  : new W.Socket();
              } catch (e) {
                eU(e);
                return;
              }
              return e.on("error", eU), e.on("close", eZ), e.on("drain", eF), e;
            }
            async function eI({ pid: e, secret: t }, n, r) {
              try {
                (P = et().i32(16).i32(0x4d2162e).i32(e).i32(t).end(16)),
                  await ez(),
                  D.once("error", r),
                  D.once("close", n);
              } catch (e) {
                r(e);
              }
            }
            function eD(e) {
              if (ev) return eQ(e, d.connection("CONNECTION_DESTROYED", t));
              if (!e.cancelled)
                try {
                  return (
                    (e.state = C),
                    eE ? S.push(e) : ((eE = e).active = !0),
                    (function (e) {
                      let n = [],
                        r = [],
                        i = v(e, e.strings[0], e.args[0], n, r, t);
                      e.tagged || e.args.forEach((e) => g(e, n, r, t)),
                        (e.prepare =
                          t.prepare &&
                          (!("prepare" in e.options) || e.options.prepare)),
                        (e.string = i),
                        (e.signature = e.prepare && r + i),
                        e.onlyDescribe && delete z[e.signature],
                        (e.parameters = e.parameters || n),
                        (e.prepared = e.prepare && e.signature in z),
                        (e.describeFirst =
                          e.onlyDescribe || (n.length && !e.prepared)),
                        (e.statement = e.prepared
                          ? z[e.signature]
                          : {
                              string: i,
                              types: r,
                              name: e.prepare ? $ + q++ : "",
                            }),
                        "function" == typeof t.debug && t.debug(E, i, n, r);
                    })(e),
                    eM(
                      (function (e) {
                        var t;
                        if (e.parameters.length >= 65534)
                          throw d.generic(
                            "MAX_PARAMETERS_EXCEEDED",
                            "Max number of parameters (65534) exceeded",
                          );
                        return e.options.simple
                          ? et()
                              .Q()
                              .str(e.statement.string + et.N)
                              .end()
                          : e.describeFirst
                            ? Buffer.concat([eP(e), eo])
                            : e.prepare
                              ? e.prepared
                                ? eR(e)
                                : Buffer.concat([eP(e), eR(e)])
                              : ((t = e),
                                Buffer.concat([
                                  e3(
                                    t.statement.string,
                                    t.parameters,
                                    t.statement.types,
                                  ),
                                  ec,
                                  eR(t),
                                ]));
                      })(e),
                    ) &&
                      !e.describeFirst &&
                      !e.cursorFn &&
                      S.length < w &&
                      (!e.options.onexecute || e.options.onexecute(eA))
                  );
                } catch (e) {
                  return 0 === S.length && eM(es), eH(e), !0;
                }
            }
            function eP(e) {
              return Buffer.concat([
                e3(
                  e.statement.string,
                  e.parameters,
                  e.statement.types,
                  e.statement.name,
                ),
                (function (e, t = "") {
                  return et()
                    .D()
                    .str("S")
                    .str(t + et.N)
                    .end();
                })("S", e.statement.name),
              ]);
            }
            function eR(e) {
              return Buffer.concat([
                (function (e, n, r = "", i = "") {
                  let s, o;
                  return (
                    et()
                      .B()
                      .str(i + et.N)
                      .str(r + et.N)
                      .i16(0)
                      .i16(e.length),
                    e.forEach((r, i) => {
                      if (null === r) return et.i32(0xffffffff);
                      (o = n[i]),
                        (e[i] = r =
                          o in t.serializers ? t.serializers[o](r) : "" + r),
                        (s = et.i),
                        et
                          .inc(4)
                          .str(r)
                          .i32(et.i - s - 4, s);
                    }),
                    et.i16(0),
                    et.end()
                  );
                })(
                  e.parameters,
                  e.statement.types,
                  e.statement.name,
                  e.cursorName,
                ),
                e.cursorFn ? e4("", e.cursorRows) : el,
              ]);
            }
            function eM(e, t) {
              return ((eO = eO ? Buffer.concat([eO, e]) : Buffer.from(e)),
              t || eO.length >= 1024)
                ? eL(t)
                : (null === ey && (ey = setImmediate(eL)), !0);
            }
            function eL(e) {
              let t = D.write(eO, e);
              return null !== ey && clearImmediate(ey), (eO = ey = null), t;
            }
            async function ej() {
              if (
                (eM(ea),
                !(await new Promise((e) =>
                  D.once("data", (t) => e(83 === t[0])),
                )) && "prefer" === o)
              )
                return eq();
              D.removeAllListeners(),
                (D = Z.connect({
                  socket: D,
                  servername: W.isIP(D.host) ? void 0 : D.host,
                  ...("require" === o || "allow" === o || "prefer" === o
                    ? { rejectUnauthorized: !1 }
                    : "verify-full" === o
                      ? {}
                      : "object" == typeof o
                        ? o
                        : {}),
                })).on("secureConnect", eq),
                D.on("error", eU),
                D.on("close", eZ),
                D.on("drain", eF);
            }
            function eF() {
              eE || r(eA);
            }
            function eB(n) {
              if (!eb || (eb.push(n), !((H -= n.length) > 0)))
                for (
                  j = eb
                    ? Buffer.concat(eb, ee - H)
                    : 0 === j.length
                      ? n
                      : Buffer.concat([j, n], j.length + n.length);
                  j.length > 4;

                ) {
                  if ((ee = j.readUInt32BE(1)) >= j.length) {
                    (H = ee - j.length), (eb = [j]);
                    break;
                  }
                  try {
                    !(function (n, i = n[0]) {
                      (68 === i
                        ? function (e) {
                            let t,
                              n,
                              r,
                              i = 7,
                              s = eE.isRaw
                                ? Array(eE.statement.columns.length)
                                : {};
                            for (
                              let o = 0;
                              o < eE.statement.columns.length;
                              o++
                            )
                              (n = eE.statement.columns[o]),
                                (t = e.readInt32BE(i)),
                                (i += 4),
                                (r =
                                  -1 === t
                                    ? null
                                    : !0 === eE.isRaw
                                      ? e.subarray(i, (i += t))
                                      : void 0 === n.parser
                                        ? e.toString("utf8", i, (i += t))
                                        : !0 === n.parser.array
                                          ? n.parser(
                                              e.toString(
                                                "utf8",
                                                i + 1,
                                                (i += t),
                                              ),
                                            )
                                          : n.parser(
                                              e.toString("utf8", i, (i += t)),
                                            )),
                                eE.isRaw
                                  ? (s[o] =
                                      !0 === eE.isRaw
                                        ? r
                                        : y.value.from
                                          ? y.value.from(r, n)
                                          : r)
                                  : (s[n.name] = y.value.from
                                      ? y.value.from(r, n)
                                      : r);
                            eE.forEachFn
                              ? eE.forEachFn(y.row.from ? y.row.from(s) : s, R)
                              : (R[er++] = y.row.from ? y.row.from(s) : s);
                          }
                        : 100 === i
                          ? function (e) {
                              e_ && (e_.push(e.subarray(5)) || D.pause());
                            }
                          : 65 === i
                            ? function (e) {
                                if (!x) return;
                                let t = 9;
                                for (; 0 !== e[t++]; );
                                x(
                                  e.toString("utf8", 9, t - 1),
                                  e.toString("utf8", t, e.length - 1),
                                );
                              }
                            : 83 === i
                              ? function (e) {
                                  let [n, r] = e
                                    .toString("utf8", 5, e.length - 1)
                                    .split(et.N);
                                  (B[n] = r),
                                    t.parameters[n] !== r &&
                                      ((t.parameters[n] = r), k && k(n, r));
                                }
                              : 90 === i
                                ? function (n) {
                                    if (
                                      (eE &&
                                        eE.options.simple &&
                                        eE.resolve(ex || R),
                                      (eE = ex = null),
                                      (R = new X()),
                                      I.cancel(),
                                      ek)
                                    ) {
                                      if (T)
                                        if (
                                          B.in_hot_standby &&
                                          B.default_transaction_read_only
                                        ) {
                                          var i, s;
                                          if (
                                            ((i = T),
                                            (s = B),
                                            ("read-write" === i &&
                                              "on" ===
                                                s.default_transaction_read_only) ||
                                              ("read-only" === i &&
                                                "off" ===
                                                  s.default_transaction_read_only) ||
                                              ("primary" === i &&
                                                "on" === s.in_hot_standby) ||
                                              ("standby" === i &&
                                                "off" === s.in_hot_standby) ||
                                              ("prefer-standby" === i &&
                                                "off" === s.in_hot_standby &&
                                                t.host[V]))
                                          )
                                            return eW();
                                        } else {
                                          let e = new c(
                                            [
                                              `
      show transaction_read_only;
      select pg_catalog.pg_is_in_recovery()
    `,
                                            ],
                                            [],
                                            eD,
                                            null,
                                            { simple: !0 },
                                          );
                                          (e.resolve = ([[e], [t]]) => {
                                            (B.default_transaction_read_only =
                                              e.transaction_read_only),
                                              (B.in_hot_standby =
                                                t.pg_is_in_recovery
                                                  ? "on"
                                                  : "off");
                                          }),
                                            e.execute();
                                          return;
                                        }
                                      return F
                                        ? (ek.reserve && (ek = null), e2())
                                        : (ek && !ek.reserve && eD(ek),
                                          (t.shared.retries = V = 0),
                                          void (ek = null));
                                    }
                                    for (
                                      ;
                                      S.length &&
                                      (eE = S.shift()) &&
                                      ((eE.active = !0), eE.cancelled);

                                    )
                                      e(t).cancel(
                                        eE.state,
                                        eE.cancelled.resolve,
                                        eE.cancelled.reject,
                                      );
                                    eE ||
                                      (eA.reserved
                                        ? eA.reserved.release || 73 !== n[5]
                                          ? eA.reserved()
                                          : ew
                                            ? eW()
                                            : ((eA.reserved = null), r(eA))
                                        : ew
                                          ? eW()
                                          : r(eA));
                                  }
                                : 67 === i
                                  ? function (e) {
                                      er = 0;
                                      for (let t = e.length - 1; t > 0; t--)
                                        if (
                                          (32 === e[t] &&
                                            e[t + 1] < 58 &&
                                            null === R.count &&
                                            (R.count = +e.toString(
                                              "utf8",
                                              t + 1,
                                              e.length - 1,
                                            )),
                                          e[t - 1] >= 65)
                                        ) {
                                          (R.command = e.toString(
                                            "utf8",
                                            5,
                                            t,
                                          )),
                                            (R.state = C);
                                          break;
                                        }
                                      return (eC && (eC(), (eC = null)),
                                      "BEGIN" !== R.command ||
                                        1 === a ||
                                        eA.reserved)
                                        ? eE.options.simple
                                          ? eG()
                                          : void (eE.cursorFn &&
                                              (R.count && eE.cursorFn(R),
                                              eM(es)),
                                            eE.resolve(R))
                                        : eH(
                                            d.generic(
                                              "UNSAFE_TRANSACTION",
                                              "Only use sql.begin, sql.reserved or max: 1",
                                            ),
                                          );
                                    }
                                  : 50 === i
                                    ? eG
                                    : 49 === i
                                      ? function () {
                                          eE.parsing = !1;
                                        }
                                      : 116 === i
                                        ? function (e) {
                                            let t = e.readUInt16BE(5);
                                            for (let n = 0; n < t; ++n)
                                              eE.statement.types[n] ||
                                                (eE.statement.types[n] =
                                                  e.readUInt32BE(7 + 4 * n));
                                            eE.prepare &&
                                              (z[eE.signature] = eE.statement),
                                              eE.describeFirst &&
                                                !eE.onlyDescribe &&
                                                (eM(eR(eE)),
                                                (eE.describeFirst = !1));
                                          }
                                        : 84 === i
                                          ? function (e) {
                                              let t;
                                              R.command &&
                                                ((ex = ex || [R]).push(
                                                  (R = new X()),
                                                ),
                                                (R.count = null),
                                                (eE.statement.columns = null));
                                              let n = e.readUInt16BE(5),
                                                r = 7;
                                              eE.statement.columns = Array(n);
                                              for (let i = 0; i < n; ++i) {
                                                for (t = r; 0 !== e[r++]; );
                                                let n = e.readUInt32BE(r),
                                                  s = e.readUInt16BE(r + 4),
                                                  o = e.readUInt32BE(r + 6);
                                                (eE.statement.columns[i] = {
                                                  name: y.column.from
                                                    ? y.column.from(
                                                        e.toString(
                                                          "utf8",
                                                          t,
                                                          r - 1,
                                                        ),
                                                      )
                                                    : e.toString(
                                                        "utf8",
                                                        t,
                                                        r - 1,
                                                      ),
                                                  parser: m[o],
                                                  table: n,
                                                  number: s,
                                                  type: o,
                                                }),
                                                  (r += 18);
                                              }
                                              if (
                                                ((R.statement = eE.statement),
                                                eE.onlyDescribe)
                                              )
                                                return (
                                                  eE.resolve(eE.statement),
                                                  eM(es)
                                                );
                                            }
                                          : 82 === i
                                            ? eY
                                            : 110 === i
                                              ? function () {
                                                  if (
                                                    ((R.statement =
                                                      eE.statement),
                                                    (R.statement.columns = []),
                                                    eE.onlyDescribe)
                                                  )
                                                    return (
                                                      eE.resolve(eE.statement),
                                                      eM(es)
                                                    );
                                                }
                                              : 75 === i
                                                ? function (e) {
                                                    (C.pid = e.readUInt32BE(5)),
                                                      (C.secret =
                                                        e.readUInt32BE(9));
                                                  }
                                                : 69 === i
                                                  ? function (e) {
                                                      var t, n;
                                                      eE &&
                                                        (eE.cursorFn ||
                                                          eE.describeFirst) &&
                                                        eM(es);
                                                      let r = d.postgres(ep(e));
                                                      eE && eE.retried
                                                        ? eH(eE.retried)
                                                        : eE &&
                                                            eE.prepared &&
                                                            ed.has(r.routine)
                                                          ? ((t = eE),
                                                            (n = r),
                                                            delete z[
                                                              t.signature
                                                            ],
                                                            (t.retried = n),
                                                            eD(t))
                                                          : eH(r);
                                                    }
                                                  : 115 === i
                                                    ? e5
                                                    : 51 === i
                                                      ? function () {
                                                          R.count &&
                                                            eE.cursorFn(R),
                                                            eE.resolve(R);
                                                        }
                                                      : 71 === i
                                                        ? function () {
                                                            (e_ =
                                                              new Y.Writable({
                                                                autoDestroy: !0,
                                                                write(e, t, n) {
                                                                  D.write(
                                                                    et()
                                                                      .d()
                                                                      .raw(e)
                                                                      .end(),
                                                                    n,
                                                                  );
                                                                },
                                                                destroy(e, t) {
                                                                  t(e),
                                                                    D.write(
                                                                      et()
                                                                        .f()
                                                                        .str(
                                                                          e +
                                                                            et.N,
                                                                        )
                                                                        .end(),
                                                                    ),
                                                                    (e_ = null);
                                                                },
                                                                final(e) {
                                                                  D.write(
                                                                    et()
                                                                      .c()
                                                                      .end(),
                                                                  ),
                                                                    (eC = e);
                                                                },
                                                              })),
                                                              eE.resolve(e_);
                                                          }
                                                        : 78 === i
                                                          ? function (e) {
                                                              b
                                                                ? b(ep(e))
                                                                : console.log(
                                                                    ep(e),
                                                                  );
                                                            }
                                                          : 72 === i
                                                            ? function () {
                                                                (e_ =
                                                                  new Y.Readable(
                                                                    {
                                                                      read() {
                                                                        D.resume();
                                                                      },
                                                                    },
                                                                  )),
                                                                  eE.resolve(
                                                                    e_,
                                                                  );
                                                              }
                                                            : 99 === i
                                                              ? function () {
                                                                  e_ &&
                                                                    e_.push(
                                                                      null,
                                                                    ),
                                                                    (e_ = null);
                                                                }
                                                              : 73 === i
                                                                ? function () {}
                                                                : 86 === i
                                                                  ? function () {
                                                                      eH(
                                                                        d.notSupported(
                                                                          "FunctionCallResponse",
                                                                        ),
                                                                      );
                                                                    }
                                                                  : 118 === i
                                                                    ? function () {
                                                                        eH(
                                                                          d.notSupported(
                                                                            "NegotiateProtocolVersion",
                                                                          ),
                                                                        );
                                                                      }
                                                                    : 87 === i
                                                                      ? function () {
                                                                          (e_ =
                                                                            new Y.Duplex(
                                                                              {
                                                                                autoDestroy:
                                                                                  !0,
                                                                                read() {
                                                                                  D.resume();
                                                                                },
                                                                                write(
                                                                                  e,
                                                                                  t,
                                                                                  n,
                                                                                ) {
                                                                                  D.write(
                                                                                    et()
                                                                                      .d()
                                                                                      .raw(
                                                                                        e,
                                                                                      )
                                                                                      .end(),
                                                                                    n,
                                                                                  );
                                                                                },
                                                                                destroy(
                                                                                  e,
                                                                                  t,
                                                                                ) {
                                                                                  t(
                                                                                    e,
                                                                                  ),
                                                                                    D.write(
                                                                                      et()
                                                                                        .f()
                                                                                        .str(
                                                                                          e +
                                                                                            et.N,
                                                                                        )
                                                                                        .end(),
                                                                                    ),
                                                                                    (e_ =
                                                                                      null);
                                                                                },
                                                                                final(
                                                                                  e,
                                                                                ) {
                                                                                  D.write(
                                                                                    et()
                                                                                      .c()
                                                                                      .end(),
                                                                                  ),
                                                                                    (eC =
                                                                                      e);
                                                                                },
                                                                              },
                                                                            )),
                                                                            eE.resolve(
                                                                              e_,
                                                                            );
                                                                        }
                                                                      : function (
                                                                          e,
                                                                        ) {
                                                                          console.error(
                                                                            "Postgres.js : Unknown Message:",
                                                                            e[0],
                                                                          );
                                                                        })(n);
                    })(j.subarray(0, ee + 1));
                  } catch (e) {
                    eE && (eE.cursorFn || eE.describeFirst) && eM(es), eH(e);
                  }
                  (j = j.subarray(ee + 1)), (H = 0), (eb = null);
                }
            }
            async function ez() {
              if (((ev = !1), (B = {}), D || (D = await eN()), D)) {
                if ((I.start(), t.socket)) return o ? ej() : eq();
                if ((D.on("connect", o ? ej : eq), t.path))
                  return D.connect(t.path);
                (D.ssl = o),
                  D.connect(p[Q], h[Q]),
                  (D.host = h[Q]),
                  (D.port = p[Q]),
                  (Q = (Q + 1) % p.length);
              }
            }
            function e$() {
              setTimeout(ez, U ? U + en - K.performance.now() : 0);
            }
            function eq() {
              try {
                (z = {}),
                  (F = t.fetch_types),
                  ($ = Math.random().toString(36).slice(2)),
                  (q = 1),
                  N.start(),
                  D.on("data", eB),
                  _ && D.setKeepAlive && D.setKeepAlive(!0, 1e3 * _);
                let e =
                  P ||
                  et()
                    .inc(4)
                    .i16(3)
                    .z(2)
                    .str(
                      Object.entries(
                        Object.assign(
                          { user: u, database: f, client_encoding: "UTF8" },
                          t.connection,
                        ),
                      )
                        .filter(([, e]) => e)
                        .map(([e, t]) => e + et.N + t)
                        .join(et.N),
                    )
                    .z(2)
                    .end(0);
                eM(e);
              } catch (e) {
                eU(e);
              }
            }
            function eU(e) {
              if (eA.queue !== n.connecting || !t.host[V + 1])
                for (eH(e); S.length; ) eQ(S.shift(), e);
            }
            function eH(e) {
              e_ && (e_.destroy(e), (e_ = null)),
                eE && eQ(eE, e),
                ek && (eQ(ek, e), (ek = null));
            }
            function eQ(e, n) {
              if (e.reserve) return e.reject(n);
              (n && "object" == typeof n) || (n = Error(n)),
                "query" in n ||
                  "parameters" in n ||
                  Object.defineProperties(n, {
                    stack: {
                      value: n.stack + e.origin.replace(/.*\n/, "\n"),
                      enumerable: t.debug,
                    },
                    query: { value: e.string, enumerable: t.debug },
                    parameters: { value: e.parameters, enumerable: t.debug },
                    args: { value: e.args, enumerable: t.debug },
                    types: {
                      value: e.statement && e.statement.types,
                      enumerable: t.debug,
                    },
                  }),
                e.reject(n);
            }
            function eV() {
              return (
                ew ||
                (eA.reserved || i(eA),
                eA.reserved || ek || eE || 0 !== S.length
                  ? (ew = new Promise((e) => (eT = e)))
                  : (eW(),
                    new Promise((e) =>
                      D && "closed" !== D.readyState ? D.once("close", e) : e(),
                    )))
              );
            }
            function eW() {
              (ev = !0),
                (e_ || eE || ek || S.length) &&
                  eU(d.connection("CONNECTION_DESTROYED", t)),
                clearImmediate(ey),
                D &&
                  (D.removeListener("data", eB),
                  D.removeListener("connect", eq),
                  "open" === D.readyState && D.end(et().X().end())),
                eT && (eT(), (ew = eT = null));
            }
            async function eZ(e) {
              if (
                ((j = Buffer.alloc(0)),
                (H = 0),
                (eb = null),
                clearImmediate(ey),
                D.removeListener("data", eB),
                D.removeListener("connect", eq),
                A.cancel(),
                N.cancel(),
                I.cancel(),
                D.removeAllListeners(),
                (D = null),
                ek)
              )
                return e$();
              !e &&
                (eE || S.length) &&
                eU(d.connection("CONNECTION_CLOSED", t, D)),
                (U = K.performance.now()),
                e && t.shared.retries++,
                (en = ("function" == typeof O ? O(t.shared.retries) : O) * 1e3),
                s(eA, d.connection("CONNECTION_CLOSED", t, D));
            }
            function eG() {
              R.statement || (R.statement = eE.statement),
                (R.columns = eE.statement.columns);
            }
            async function eY(e, t = e.readUInt32BE(5)) {
              (3 === t
                ? eK
                : 5 === t
                  ? eX
                  : 10 === t
                    ? eJ
                    : 11 === t
                      ? e0
                      : 12 === t
                        ? function (e) {
                            e.toString("utf8", 9).split(et.N, 1)[0].slice(2) !==
                              eh &&
                              (eH(
                                d.generic(
                                  "SASL_SIGNATURE_MISMATCH",
                                  "The server did not return the correct signature",
                                ),
                              ),
                              D.destroy());
                          }
                        : 0 !== t
                          ? function (e, t) {
                              console.error("Postgres.js : Unknown Auth:", t);
                            }
                          : eu)(e, t);
            }
            async function eK() {
              let e = await e1();
              eM(et().p().str(e).z(1).end());
            }
            async function eX(e) {
              let t =
                "md5" +
                (await ef(
                  Buffer.concat([
                    Buffer.from(await ef((await e1()) + u)),
                    e.subarray(9),
                  ]),
                ));
              eM(et().p().str(t).z(1).end());
            }
            async function eJ() {
              (eS = (await G.randomBytes(18)).toString("base64")),
                et()
                  .p()
                  .str("SCRAM-SHA-256" + et.N);
              let e = et.i;
              eM(
                et
                  .inc(4)
                  .str("n,,n=*,r=" + eS)
                  .i32(et.i - e - 4, e)
                  .end(),
              );
            }
            async function e0(e) {
              var t;
              let n = e
                  .toString("utf8", 9)
                  .split(",")
                  .reduce((e, t) => ((e[t[0]] = t.slice(2)), e), {}),
                r = await G.pbkdf2Sync(
                  await e1(),
                  Buffer.from(n.s, "base64"),
                  parseInt(n.i),
                  32,
                  "sha256",
                ),
                i = await em(r, "Client Key"),
                s =
                  "n=*,r=" +
                  eS +
                  ",r=" +
                  n.r +
                  ",s=" +
                  n.s +
                  ",i=" +
                  n.i +
                  ",c=biws,r=" +
                  n.r;
              eh = (await em(await em(r, "Server Key"), s)).toString("base64");
              let o =
                "c=biws,r=" +
                n.r +
                ",p=" +
                (function (e, t) {
                  let n = Math.max(e.length, t.length),
                    r = Buffer.allocUnsafe(n);
                  for (let i = 0; i < n; i++) r[i] = e[i] ^ t[i];
                  return r;
                })(
                  i,
                  Buffer.from(
                    await em(
                      await ((t = i),
                      G.createHash("sha256").update(t).digest()),
                      s,
                    ),
                  ),
                ).toString("base64");
              eM(et().p().str(o).end());
            }
            function e1() {
              return Promise.resolve(
                "function" == typeof t.pass ? t.pass() : t.pass,
              );
            }
            async function e2() {
              (F = !1),
                (
                  await new c(
                    [
                      `
      select b.oid, b.typarray
      from pg_catalog.pg_type a
      left join pg_catalog.pg_type b on b.oid = a.typelem
      where a.typcategory = 'A'
      group by b.oid, b.typarray
      order by b.oid
    `,
                    ],
                    [],
                    eD,
                  )
                ).forEach(({ oid: e, typarray: n }) =>
                  (function (e, n) {
                    if (t.parsers[n] && t.serializers[n]) return;
                    let r = t.parsers[e];
                    (t.shared.typeArrayMap[e] = n),
                      (t.parsers[n] = (e) => (
                        (L.i = L.last = 0),
                        (function e(t, n, r, i) {
                          let s = [],
                            o = 1020 === i ? ";" : ",";
                          for (; t.i < n.length; t.i++) {
                            if (((t.char = n[t.i]), t.quoted))
                              "\\" === t.char
                                ? (t.str += n[++t.i])
                                : '"' === t.char
                                  ? (s.push(r ? r(t.str) : t.str),
                                    (t.str = ""),
                                    (t.quoted = '"' === n[t.i + 1]),
                                    (t.last = t.i + 2))
                                  : (t.str += t.char);
                            else if ('"' === t.char) t.quoted = !0;
                            else if ("{" === t.char)
                              (t.last = ++t.i), s.push(e(t, n, r, i));
                            else if ("}" === t.char) {
                              (t.quoted = !1),
                                t.last < t.i &&
                                  s.push(
                                    r
                                      ? r(n.slice(t.last, t.i))
                                      : n.slice(t.last, t.i),
                                  ),
                                (t.last = t.i + 1);
                              break;
                            } else
                              t.char === o &&
                                "}" !== t.p &&
                                '"' !== t.p &&
                                (s.push(
                                  r
                                    ? r(n.slice(t.last, t.i))
                                    : n.slice(t.last, t.i),
                                ),
                                (t.last = t.i + 1));
                            t.p = t.char;
                          }
                          return (
                            t.last < t.i &&
                              s.push(
                                r
                                  ? r(n.slice(t.last, t.i + 1))
                                  : n.slice(t.last, t.i + 1),
                              ),
                            s
                          );
                        })(L, e, r, n)
                      )),
                      (t.parsers[n].array = !0),
                      (t.serializers[n] = (r) => M(r, t.serializers[e], t, n));
                  })(e, n),
                );
            }
            async function e5() {
              try {
                let e = await Promise.resolve(eE.cursorFn(R));
                (er = 0),
                  e === l
                    ? eM(
                        (function (e = "") {
                          return Buffer.concat([
                            et()
                              .C()
                              .str("P")
                              .str(e + et.N)
                              .end(),
                            et().S().end(),
                          ]);
                        })(eE.portal),
                      )
                    : ((R = new X()), eM(e4("", eE.cursorRows)));
              } catch (e) {
                eM(es), eE.reject(e);
              }
            }
            function e3(e, t, n, r = "") {
              return (
                et()
                  .P()
                  .str(r + et.N)
                  .str(e + et.N)
                  .i16(t.length),
                t.forEach((e, t) => et.i32(n[t] || 0)),
                et.end()
              );
            }
            function e4(e = "", t = 0) {
              return Buffer.concat([
                et()
                  .E()
                  .str(e + et.N)
                  .i32(t)
                  .end(),
                eo,
              ]);
            }
          },
          ei = 1,
          es = et().S().end(),
          eo = et().H().end(),
          ea = et().i32(8).i32(0x4d2162f).end(8),
          el = Buffer.concat([et().E().str(et.N).i32(0).end(), es]),
          ec = et().D().str("S").str(et.N).end(),
          eu = () => {},
          ed = new Set([
            "FetchPreparedStatement",
            "RevalidateCachedQuery",
            "transformAssignedExpr",
          ]),
          eh = {
            83: "severity_local",
            86: "severity",
            67: "code",
            77: "message",
            68: "detail",
            72: "hint",
            80: "position",
            112: "internal_position",
            113: "internal_query",
            87: "where",
            115: "schema_name",
            116: "table_name",
            99: "column_name",
            100: "data type_name",
            110: "constraint_name",
            70: "file",
            76: "line",
            82: "routine",
          };
        function ep(e) {
          let t = {},
            n = 5;
          for (let r = 5; r < e.length - 1; r++)
            0 === e[r] &&
              ((t[eh[e[n]]] = e.toString("utf8", n + 1, r)), (n = r + 1));
          return t;
        }
        function ef(e) {
          return G.createHash("md5").update(e).digest("hex");
        }
        function em(e, t) {
          return G.createHmac("sha256", e).update(t).digest();
        }
        function eg(e, t) {
          let n;
          if (!(t = "function" == typeof t ? t() : t))
            return { cancel: eu, start: eu };
          return {
            cancel() {
              n && (clearTimeout(n), (n = null));
            },
            start() {
              n && clearTimeout(n), (n = setTimeout(r, 1e3 * t, arguments));
            },
          };
          function r(t) {
            e.apply(null, t), (n = null);
          }
        }
        let ey = () => {};
        function ev(e, t, n, r) {
          let i,
            s,
            o,
            a = r.raw ? Array(t.length) : {};
          for (let l = 0; l < t.length; l++)
            (i = e[n++]),
              (s = t[l]),
              (o =
                110 === i
                  ? null
                  : 117 === i
                    ? void 0
                    : void 0 === s.parser
                      ? e.toString("utf8", n + 4, (n += 4 + e.readUInt32BE(n)))
                      : !0 === s.parser.array
                        ? s.parser(
                            e.toString(
                              "utf8",
                              n + 5,
                              (n += 4 + e.readUInt32BE(n)),
                            ),
                          )
                        : s.parser(
                            e.toString(
                              "utf8",
                              n + 4,
                              (n += 4 + e.readUInt32BE(n)),
                            ),
                          )),
              r.raw
                ? (a[l] =
                    !0 === r.raw ? o : r.value.from ? r.value.from(o, s) : o)
                : (a[s.name] = r.value.from ? r.value.from(o, s) : o);
          return { i: n, row: r.row.from ? r.row.from(a) : a };
        }
        function eb(e, t, n = 393216) {
          return new Promise(async (r, i) => {
            await e
              .begin(async (e) => {
                let i;
                t || ([{ oid: t }] = await e`select lo_creat(-1) as oid`);
                let [{ fd: s }] = await e`select lo_open(${t}, ${n}) as fd`,
                  o = {
                    writable: l,
                    readable: a,
                    close: () => e`select lo_close(${s})`.then(i),
                    tell: () => e`select lo_tell64(${s})`,
                    read: (t) => e`select loread(${s}, ${t}) as data`,
                    write: (t) => e`select lowrite(${s}, ${t})`,
                    truncate: (t) => e`select lo_truncate64(${s}, ${t})`,
                    seek: (t, n = 0) => e`select lo_lseek64(${s}, ${t}, ${n})`,
                    size: () => e`
          select
            lo_lseek64(${s}, location, 0) as position,
            seek.size
          from (
            select
              lo_lseek64($1, 0, 2) as size,
              tell.location
            from (select lo_tell64($1) as location) tell
          ) seek
        `,
                  };
                return r(o), new Promise(async (e) => (i = e));
                async function a({
                  highWaterMark: e = 16384,
                  start: t = 0,
                  end: n = 1 / 0,
                } = {}) {
                  let r = n - t;
                  return (
                    t && (await o.seek(t)),
                    new Y.Readable({
                      highWaterMark: e,
                      async read(e) {
                        let t = e > r ? e - r : e;
                        r -= e;
                        let [{ data: n }] = await o.read(t);
                        this.push(n), n.length < e && this.push(null);
                      },
                    })
                  );
                }
                async function l({
                  highWaterMark: e = 16384,
                  start: t = 0,
                } = {}) {
                  return (
                    t && (await o.seek(t)),
                    new Y.Writable({
                      highWaterMark: e,
                      write(e, t, n) {
                        o.write(e).then(() => n(), n);
                      },
                    })
                  );
                }
              })
              .catch(i);
          });
        }
        Object.assign(ek, {
          PostgresError: u,
          toPascal: F,
          pascal: Q,
          toCamel: j,
          camel: H,
          toKebab: B,
          kebab: V,
          fromPascal: $,
          fromCamel: z,
          fromKebab: q,
          BigInt: {
            to: 20,
            from: [20],
            parse: (e) => BigInt(e),
            serialize: (e) => e.toString(),
          },
        });
        let ex = ek;
        function ek(e, t) {
          let n = (function (e, t) {
              var n;
              if (e && e.shared) return e;
              let i = process.env,
                s = (e && "string" != typeof e ? e : t) || {},
                { url: o, multihost: a } = (function (e) {
                  if (!e || "string" != typeof e)
                    return { url: { searchParams: new Map() } };
                  let t = e;
                  t = decodeURIComponent(
                    (t = t.slice(t.indexOf("://") + 3).split(/[?/]/)[0]).slice(
                      t.indexOf("@") + 1,
                    ),
                  );
                  let n = new URL(e.replace(t, t.split(",")[0]));
                  return {
                    url: {
                      username: decodeURIComponent(n.username),
                      password: decodeURIComponent(n.password),
                      host: n.host,
                      hostname: n.hostname,
                      port: n.port,
                      pathname: n.pathname,
                      searchParams: n.searchParams,
                    },
                    multihost: t.indexOf(",") > -1 && t,
                  };
                })(e),
                l = [...o.searchParams].reduce(
                  (e, [t, n]) => ((e[t] = n), e),
                  {},
                ),
                c =
                  s.hostname ||
                  s.host ||
                  a ||
                  o.hostname ||
                  i.PGHOST ||
                  "localhost",
                u = s.port || o.port || i.PGPORT || 5432,
                d =
                  s.user ||
                  s.username ||
                  o.username ||
                  i.PGUSERNAME ||
                  i.PGUSER ||
                  (function () {
                    try {
                      return r.userInfo().username;
                    } catch (e) {
                      return (
                        process.env.USERNAME ||
                        process.env.USER ||
                        process.env.LOGNAME
                      );
                    }
                  })();
              s.no_prepare && (s.prepare = !1),
                l.sslmode && ((l.ssl = l.sslmode), delete l.sslmode),
                "timeout" in s &&
                  (console.log(
                    "The timeout option is deprecated, use idle_timeout instead",
                  ),
                  (s.idle_timeout = s.timeout)),
                "system" === l.sslrootcert && (l.ssl = "verify-full");
              let h = [
                  "idle_timeout",
                  "connect_timeout",
                  "max_lifetime",
                  "max_pipeline",
                  "backoff",
                  "keep_alive",
                ],
                p = {
                  max: 10,
                  ssl: !1,
                  idle_timeout: null,
                  connect_timeout: 30,
                  max_lifetime: e_,
                  max_pipeline: 100,
                  backoff: ew,
                  keep_alive: 60,
                  prepare: !0,
                  debug: !1,
                  fetch_types: !0,
                  publications: "alltables",
                  target_session_attrs: null,
                };
              return {
                host: Array.isArray(c)
                  ? c
                  : c.split(",").map((e) => e.split(":")[0]),
                port: Array.isArray(u)
                  ? u
                  : c.split(",").map((e) => parseInt(e.split(":")[1] || u)),
                path: s.path || (c.indexOf("/") > -1 && c + "/.s.PGSQL." + u),
                database:
                  s.database ||
                  s.db ||
                  (o.pathname || "").slice(1) ||
                  i.PGDATABASE ||
                  d,
                user: d,
                pass: s.pass || s.password || o.password || i.PGPASSWORD || "",
                ...Object.entries(p).reduce((e, [t, n]) => {
                  let r =
                    t in s
                      ? s[t]
                      : t in l
                        ? "disable" !== l[t] && "false" !== l[t] && l[t]
                        : i["PG" + t.toUpperCase()] || n;
                  return (
                    (e[t] = "string" == typeof r && h.includes(t) ? +r : r), e
                  );
                }, {}),
                connection: {
                  application_name: i.PGAPPNAME || "postgres.js",
                  ...s.connection,
                  ...Object.entries(l).reduce(
                    (e, [t, n]) => (t in p || (e[t] = n), e),
                    {},
                  ),
                },
                types: s.types || {},
                target_session_attrs: (function (e, t, n) {
                  let r =
                    e.target_session_attrs ||
                    t.searchParams.get("target_session_attrs") ||
                    n.PGTARGETSESSIONATTRS;
                  if (
                    !r ||
                    [
                      "read-write",
                      "read-only",
                      "primary",
                      "standby",
                      "prefer-standby",
                    ].includes(r)
                  )
                    return r;
                  throw Error(
                    "target_session_attrs " + r + " is not supported",
                  );
                })(s, o, i),
                onnotice: s.onnotice,
                onnotify: s.onnotify,
                onclose: s.onclose,
                onparameter: s.onparameter,
                socket: s.socket,
                transform: {
                  undefined: (n = s.transform || { undefined: void 0 })
                    .undefined,
                  column: {
                    from:
                      "function" == typeof n.column
                        ? n.column
                        : n.column && n.column.from,
                    to: n.column && n.column.to,
                  },
                  value: {
                    from:
                      "function" == typeof n.value
                        ? n.value
                        : n.value && n.value.from,
                    to: n.value && n.value.to,
                  },
                  row: {
                    from:
                      "function" == typeof n.row ? n.row : n.row && n.row.from,
                    to: n.row && n.row.to,
                  },
                },
                parameters: {},
                shared: { retries: 0, typeArrayMap: {} },
                ...C(s.types),
              };
            })(e, t),
            s =
              n.no_subscribe ||
              (function (e, t) {
                let n = new Map(),
                  r = "postgresjs_" + Math.random().toString(36).slice(2),
                  i = {},
                  s,
                  o,
                  a = !1,
                  l = (d.sql = e({
                    ...t,
                    transform: { column: {}, value: {}, row: {} },
                    max: 1,
                    fetch_types: !1,
                    idle_timeout: null,
                    max_lifetime: null,
                    connection: { ...t.connection, replication: "database" },
                    onclose: async function () {
                      a ||
                        ((o = null),
                        (i.pid = i.secret = void 0),
                        h(await p(l, r, t.publications)),
                        n.forEach((e) =>
                          e.forEach(({ onsubscribe: e }) => e()),
                        ));
                    },
                    no_subscribe: !0,
                  })),
                  c = l.end,
                  u = l.close;
                return (
                  (l.end = async () => (
                    (a = !0),
                    o &&
                      (await new Promise((e) => (o.once("close", e), o.end()))),
                    c()
                  )),
                  (l.close = async () => (
                    o &&
                      (await new Promise((e) => (o.once("close", e), o.end()))),
                    u()
                  )),
                  d
                );
                async function d(e, a, c = ey, u = ey) {
                  (e = (function (e) {
                    let t =
                      e.match(
                        /^(\*|insert|update|delete)?:?([^.]+?\.?[^=]+)?=?(.+)?/i,
                      ) || [];
                    if (!t) throw Error("Malformed subscribe pattern: " + e);
                    let [, n, r, i] = t;
                    return (
                      (n || "*") +
                      (r
                        ? ":" + (-1 === r.indexOf(".") ? "public." + r : r)
                        : "") +
                      (i ? "=" + i : "")
                    );
                  })(e)),
                    s || (s = p(l, r, t.publications));
                  let f = { fn: a, onsubscribe: c },
                    m = n.has(e)
                      ? n.get(e).add(f)
                      : n.set(e, new Set([f])).get(e),
                    g = () => {
                      m.delete(f), 0 === m.size && n.delete(e);
                    };
                  return s.then(
                    (e) => (
                      h(e),
                      c(),
                      o && o.on("error", u),
                      { unsubscribe: g, state: i, sql: l }
                    ),
                  );
                }
                function h(e) {
                  (o = e.stream),
                    (i.pid = e.state.pid),
                    (i.secret = e.state.secret);
                }
                async function p(e, n, r) {
                  if (!r) throw Error("Missing publication names");
                  let i = await e.unsafe(
                      `CREATE_REPLICATION_SLOT ${n} TEMPORARY LOGICAL pgoutput NOEXPORT_SNAPSHOT`,
                    ),
                    [s] = i,
                    o = await e
                      .unsafe(
                        `START_REPLICATION SLOT ${n} LOGICAL ${s.consistent_point} (proto_version '1', publication_names '${r}')`,
                      )
                      .writable(),
                    a = {
                      lsn: Buffer.concat(
                        s.consistent_point
                          .split("/")
                          .map((e) =>
                            Buffer.from(("00000000" + e).slice(-8), "hex"),
                          ),
                      ),
                    };
                  return (
                    o.on("data", function (n) {
                      var r, i, s, c, u;
                      119 === n[0]
                        ? ((r = n.subarray(25)),
                          (i = a),
                          (s = e.options.parsers),
                          (c = l),
                          (u = t.transform),
                          Object.entries({
                            R: (e) => {
                              let t = 1,
                                n = (i[e.readUInt32BE(t)] = {
                                  schema:
                                    e.toString(
                                      "utf8",
                                      (t += 4),
                                      (t = e.indexOf(0, t)),
                                    ) || "pg_catalog",
                                  table: e.toString(
                                    "utf8",
                                    t + 1,
                                    (t = e.indexOf(0, t + 1)),
                                  ),
                                  columns: Array(e.readUInt16BE((t += 2))),
                                  keys: [],
                                });
                              t += 2;
                              let r = 0,
                                o;
                              for (; t < e.length; )
                                (o = n.columns[r++] =
                                  {
                                    key: e[t++],
                                    name: u.column.from
                                      ? u.column.from(
                                          e.toString(
                                            "utf8",
                                            t,
                                            (t = e.indexOf(0, t)),
                                          ),
                                        )
                                      : e.toString(
                                          "utf8",
                                          t,
                                          (t = e.indexOf(0, t)),
                                        ),
                                    type: e.readUInt32BE((t += 1)),
                                    parser: s[e.readUInt32BE(t)],
                                    atttypmod: e.readUInt32BE((t += 4)),
                                  }).key && n.keys.push(o),
                                  (t += 4);
                            },
                            Y: () => {},
                            O: () => {},
                            B: (e) => {
                              var t;
                              (t = e.readBigInt64BE(9)),
                                (i.date = new Date(
                                  Date.UTC(2e3, 0, 1) + Number(t / BigInt(1e3)),
                                )),
                                (i.lsn = e.subarray(1, 9));
                            },
                            I: (e) => {
                              let t = 1,
                                n = i[e.readUInt32BE(t)],
                                { row: r } = ev(e, n.columns, (t += 7), u);
                              c(r, { command: "insert", relation: n });
                            },
                            D: (e) => {
                              let t = 1,
                                n = i[e.readUInt32BE(t)],
                                r = 75 === e[(t += 4)];
                              c(
                                r || 79 === e[t]
                                  ? ev(e, n.columns, (t += 3), u).row
                                  : null,
                                { command: "delete", relation: n, key: r },
                              );
                            },
                            U: (e) => {
                              let t = 1,
                                n = i[e.readUInt32BE(t)],
                                r = 75 === e[(t += 4)],
                                s =
                                  r || 79 === e[t]
                                    ? ev(e, n.columns, (t += 3), u)
                                    : null;
                              s && (t = s.i);
                              let { row: o } = ev(e, n.columns, t + 3, u);
                              c(o, {
                                command: "update",
                                relation: n,
                                key: r,
                                old: s && s.row,
                              });
                            },
                            T: () => {},
                            C: () => {},
                          })
                            .reduce(
                              (e, [t, n]) => ((e[t.charCodeAt(0)] = n), e),
                              {},
                            )
                            [r[0]](r))
                        : 107 === n[0] &&
                          n[17] &&
                          ((a.lsn = n.subarray(1, 9)),
                          (function () {
                            let e = Buffer.alloc(34);
                            (e[0] = 114),
                              e.fill(a.lsn, 1),
                              e.writeBigInt64BE(
                                BigInt(Date.now() - Date.UTC(2e3, 0, 1)) *
                                  BigInt(1e3),
                                25,
                              ),
                              o.write(e);
                          })());
                    }),
                    o.on("error", function (e) {
                      console.error(
                        "Unexpected error during logical streaming - reconnecting",
                        e,
                      );
                    }),
                    o.on("close", e.close),
                    { stream: o, state: i.state }
                  );
                  function l(e, t) {
                    let n = t.relation.schema + "." + t.relation.table;
                    f("*", e, t),
                      f("*:" + n, e, t),
                      t.relation.keys.length &&
                        f(
                          "*:" +
                            n +
                            "=" +
                            t.relation.keys.map((t) => e[t.name]),
                          e,
                          t,
                        ),
                      f(t.command, e, t),
                      f(t.command + ":" + n, e, t),
                      t.relation.keys.length &&
                        f(
                          t.command +
                            ":" +
                            n +
                            "=" +
                            t.relation.keys.map((t) => e[t.name]),
                          e,
                          t,
                        );
                  }
                }
                function f(e, t, r) {
                  n.has(e) && n.get(e).forEach(({ fn: n }) => n(t, r, e));
                }
              })(ek, { ...n }),
            o = !1,
            a = J(),
            h = J(),
            g = J(),
            y = J(),
            v = J(),
            b = J(),
            x = J(),
            k = J(),
            w = {
              connecting: h,
              reserved: g,
              closed: y,
              ended: v,
              open: b,
              busy: x,
              full: k,
            },
            _ = [...Array(n.max)].map(() =>
              er(n, w, { onopen: $, onend: z, onclose: q }),
            ),
            O = T(function (e) {
              return o
                ? e.reject(d.connection("CONNECTION_ENDED", n, n))
                : b.length
                  ? R(b.shift(), e)
                  : y.length
                    ? B(y.shift(), e)
                    : void (x.length ? R(x.shift(), e) : a.push(e));
            });
          return (
            Object.assign(O, {
              get parameters() {
                return n.parameters;
              },
              largeObject: eb.bind(null, O),
              subscribe: s,
              CLOSE: l,
              END: l,
              PostgresError: u,
              options: n,
              reserve: A,
              listen: S,
              begin: N,
              close: j,
              end: L,
            }),
            O
          );
          function T(e) {
            return (
              (e.debug = n.debug),
              Object.entries(n.types).reduce(
                (e, [t, n]) => ((e[t] = (e) => new f(e, n.to)), e),
                t,
              ),
              Object.assign(r, {
                types: t,
                typed: t,
                unsafe: function (t, n = [], r = {}) {
                  return (
                    2 != arguments.length ||
                      Array.isArray(n) ||
                      ((r = n), (n = [])),
                    new c([t], n, e, M, {
                      prepare: !1,
                      ...r,
                      simple: "simple" in r ? r.simple : 0 === n.length,
                    })
                  );
                },
                notify: E,
                array: function e(t, r) {
                  return Array.isArray(t)
                    ? new f(
                        t,
                        r || (t.length ? D(t) || 25 : 0),
                        n.shared.typeArrayMap,
                      )
                    : e(Array.from(arguments));
                },
                json: P,
                file: function (t, n = [], r = {}) {
                  return (
                    2 != arguments.length ||
                      Array.isArray(n) ||
                      ((r = n), (n = [])),
                    new c(
                      [],
                      n,
                      (n) => {
                        i.readFile(t, "utf8", (t, r) => {
                          if (t) return n.reject(t);
                          (n.strings = [r]), e(n);
                        });
                      },
                      M,
                      {
                        ...r,
                        simple: "simple" in r ? r.simple : 0 === n.length,
                      },
                    )
                  );
                },
              }),
              r
            );
            function t(e, t) {
              return new f(e, t);
            }
            function r(t, ...i) {
              return t && Array.isArray(t.raw)
                ? new c(t, i, e, M)
                : "string" != typeof t || i.length
                  ? new m(t, i)
                  : new p(n.transform.column.to ? n.transform.column.to(t) : t);
            }
          }
          async function S(e, t, r) {
            let i = { fn: t, onlisten: r },
              s =
                S.sql ||
                (S.sql = ek({
                  ...n,
                  max: 1,
                  idle_timeout: null,
                  max_lifetime: null,
                  fetch_types: !1,
                  onclose() {
                    Object.entries(S.channels).forEach(
                      ([e, { listeners: t }]) => {
                        delete S.channels[e],
                          Promise.all(
                            t.map((t) =>
                              S(e, t.fn, t.onlisten).catch(() => {}),
                            ),
                          );
                      },
                    );
                  },
                  onnotify(e, t) {
                    e in S.channels &&
                      S.channels[e].listeners.forEach((e) => e.fn(t));
                  },
                })),
              o = S.channels || (S.channels = {});
            if (e in o) {
              o[e].listeners.push(i);
              let t = await o[e].result;
              return (
                i.onlisten && i.onlisten(), { state: t.state, unlisten: l }
              );
            }
            o[e] = {
              result: s`listen ${s.unsafe('"' + e.replace(/"/g, '""') + '"')}`,
              listeners: [i],
            };
            let a = await o[e].result;
            return i.onlisten && i.onlisten(), { state: a.state, unlisten: l };
            async function l() {
              if (
                e in o != !1 &&
                ((o[e].listeners = o[e].listeners.filter((e) => e !== i)),
                !o[e].listeners.length)
              )
                return (
                  delete o[e],
                  s`unlisten ${s.unsafe('"' + e.replace(/"/g, '""') + '"')}`
                );
            }
          }
          async function E(e, t) {
            return await O`select pg_notify(${e}, ${"" + t})`;
          }
          async function A() {
            let e = J(),
              t = b.length
                ? b.shift()
                : await new Promise((e, t) => {
                    let n = { reserve: e, reject: t };
                    a.push(n), y.length && B(y.shift(), n);
                  });
            I(t, g),
              (t.reserved = () => (e.length ? t.execute(e.shift()) : I(t, g))),
              (t.reserved.release = !0);
            let n = T(function (n) {
              t.queue === k ? e.push(n) : t.execute(n) || I(t, k);
            });
            return (
              (n.release = () => {
                (t.reserved = null), $(t);
              }),
              n
            );
          }
          async function N(e, t) {
            t || ((t = e), (e = ""));
            let n = J(),
              r = 0,
              i,
              s = null;
            try {
              return (
                await O.unsafe("begin " + e.replace(/[^a-z ]/gi, ""), [], {
                  onexecute: function (e) {
                    (i = e),
                      I(e, g),
                      (e.reserved = () =>
                        n.length ? e.execute(n.shift()) : I(e, g));
                  },
                }).execute(),
                await Promise.race([
                  o(i, t),
                  new Promise((e, t) => (i.onclose = t)),
                ])
              );
            } catch (e) {
              throw e;
            }
            async function o(e, t, i) {
              let a,
                l,
                c = T(function (t) {
                  t.catch((e) => a || (a = e)),
                    e.queue === k ? n.push(t) : e.execute(t) || I(e, k);
                });
              (c.savepoint = function t(n, i) {
                return n && Array.isArray(n.raw)
                  ? t((e) => e.apply(e, arguments))
                  : (1 == arguments.length && ((i = n), (n = null)),
                    o(e, i, "s" + r++ + (n ? "_" + n : "")));
              }),
                (c.prepare = (e) => (s = e.replace(/[^a-z0-9$-_. ]/gi))),
                i && (await c`savepoint ${c(i)}`);
              try {
                if (
                  ((l = await new Promise((e, n) => {
                    let r = t(c);
                    Promise.resolve(Array.isArray(r) ? Promise.all(r) : r).then(
                      e,
                      n,
                    );
                  })),
                  a)
                )
                  throw a;
              } catch (e) {
                throw (
                  (await (i ? c`rollback to ${c(i)}` : c`rollback`),
                  (e instanceof u && "25P02" === e.code && a) || e)
                );
              }
              return (
                i ||
                  (s
                    ? await c`prepare transaction '${c.unsafe(s)}'`
                    : await c`commit`),
                l
              );
            }
          }
          function I(e, t) {
            return (
              e.queue.remove(e),
              t.push(e),
              (e.queue = t),
              t === b ? e.idleTimer.start() : e.idleTimer.cancel(),
              e
            );
          }
          function P(e) {
            return new f(e, 3802);
          }
          function R(e, t) {
            return e.execute(t) ? I(e, x) : I(e, k);
          }
          function M(e) {
            return new Promise((t, r) => {
              e.state
                ? e.active
                  ? er(n).cancel(e.state, t, r)
                  : (e.cancelled = { resolve: t, reject: r })
                : (a.remove(e),
                  (e.cancelled = !0),
                  e.reject(
                    d.generic(
                      "57014",
                      "canceling statement due to user request",
                    ),
                  ),
                  t());
            });
          }
          async function L({ timeout: e = null } = {}) {
            let t;
            return (
              o ||
              (await 1,
              (o = Promise.race([
                new Promise(
                  (n) => null !== e && (t = setTimeout(F, 1e3 * e, n)),
                ),
                Promise.all(
                  _.map((e) => e.end()).concat(
                    S.sql ? S.sql.end({ timeout: 0 }) : [],
                    s.sql ? s.sql.end({ timeout: 0 }) : [],
                  ),
                ),
              ]).then(() => clearTimeout(t))))
            );
          }
          async function j() {
            await Promise.all(_.map((e) => e.end()));
          }
          async function F(e) {
            for (await Promise.all(_.map((e) => e.terminate())); a.length; )
              a.shift().reject(d.connection("CONNECTION_DESTROYED", n));
            e();
          }
          function B(e, t) {
            return I(e, h), e.connect(t), e;
          }
          function z(e) {
            I(e, v);
          }
          function $(e) {
            if (0 === a.length) return I(e, b);
            let t = Math.ceil(a.length / (h.length + 1)),
              n = !0;
            for (; n && a.length && t-- > 0; ) {
              let t = a.shift();
              if (t.reserve) return t.reserve(e);
              n = e.execute(t);
            }
            n ? I(e, x) : I(e, k);
          }
          function q(e, t) {
            I(e, y),
              (e.reserved = null),
              e.onclose && (e.onclose(t), (e.onclose = null)),
              n.onclose && n.onclose(e.id),
              a.length && B(e, a.shift());
          }
        }
        function ew(e) {
          return (0.5 + Math.random() / 2) * Math.min(3 ** e / 100, 20);
        }
        function e_() {
          return 60 * (30 + 30 * Math.random());
        }
      },
      27910: (e) => {
        "use strict";
        e.exports = require("stream");
      },
      28169: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 87113));
      },
      28191: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 84792)),
          Promise.resolve().then(n.bind(n, 66561)),
          Promise.resolve().then(n.bind(n, 25052));
      },
      28354: (e) => {
        "use strict";
        e.exports = require("util");
      },
      28894: (e, t, n) => {
        "use strict";
        var r = Object.create,
          i = Object.defineProperty,
          s = Object.getOwnPropertyDescriptor,
          o = Object.getOwnPropertyNames,
          a = Object.getPrototypeOf,
          l = Object.prototype.hasOwnProperty,
          c = (e, t) => i(e, "name", { value: t, configurable: !0 }),
          u = (e, t, n, r) => {
            if ((t && "object" == typeof t) || "function" == typeof t)
              for (let a of o(t))
                l.call(e, a) ||
                  a === n ||
                  i(e, a, {
                    get: () => t[a],
                    enumerable: !(r = s(t, a)) || r.enumerable,
                  });
            return e;
          },
          d = (e, t, n) => (
            (n = null != e ? r(a(e)) : {}),
            u(
              !t && e && e.__esModule
                ? n
                : i(n, "default", { value: e, enumerable: !0 }),
              e,
            )
          ),
          h = {};
        ((e, t) => {
          for (var n in t) i(e, n, { get: t[n], enumerable: !0 });
        })(h, { CookiesProvider: () => v, SecureCookiesProvider: () => b }),
          (e.exports = u(i({}, "__esModule", { value: !0 }), h));
        var p = d(n(84205));
        d(n(99703));
        var f = n(89882),
          m = n(3220),
          g = n(24490);
        let y = "__cookies_commands",
          v = c(({ value: e, children: t }) => {
            let n = x(e);
            return p.default.createElement(m.Ctx.Provider, { value: n }, t);
          }, "CookiesProvider"),
          b = c(({ value: e, children: t }) => {
            let n = (0, g.useSecureCookies)(e),
              r = n ? x(n) : null;
            return p.default.createElement(m.Ctx.Provider, { value: r }, t);
          }, "SecureCookiesProvider"),
          x = c((e) => {
            let t = (0, p.useContext)(f.ServerInsertedHTMLContext),
              n = (0, p.useMemo)(() => {
                let n = Object.fromEntries(e.map((e) => [e.name, e.value]));
                return {
                  get: (e) => (null == e ? { ...n } : n[e]),
                  set: (...e) => {
                    t?.(() => k("set", ...e)), (n[e[0]] = e[1]);
                  },
                  remove: (...e) => {
                    t?.(() => k("remove", ...e)), delete n[e[0]];
                  },
                };
              }, [e, t]);
            return (
              (0, p.useEffect)(() => {
                let e = window[y] || [];
                if (e.length) for (let t of e) w(t);
              }, []),
              n
            );
          }, "useCookieRecords"),
          k = c(
            (...e) =>
              p.default.createElement("script", {
                dangerouslySetInnerHTML: {
                  __html: `window.${y} = window.${y} || [];window.${y}.push(${JSON.stringify(e).replaceAll("</", "<\\/")});`,
                },
              }),
            "getCookieCommandHtml",
          ),
          w = c((e) => {}, "runCookieCommand");
      },
      28909: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { $: () => c, r: () => u });
            var i = n(61268),
              s = n(86415),
              o = n(91635);
            n(84205);
            var a = n(15942),
              l = e([a]);
            a = (l.then ? (await l)() : l)[0];
            let u = (0, o.F)(
              "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
              {
                variants: {
                  variant: {
                    default:
                      "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
                    destructive:
                      "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
                    outline:
                      "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
                    secondary:
                      "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
                    ghost:
                      "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
                    link: "text-primary underline-offset-4 hover:underline",
                  },
                  size: {
                    default: "h-9 px-4 py-2 has-[>svg]:px-3",
                    sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
                    lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
                    icon: "size-9",
                  },
                },
                defaultVariants: { variant: "default", size: "default" },
              },
            );
            function c({
              className: e,
              variant: t,
              size: n,
              asChild: r = !1,
              ...o
            }) {
              let l = r ? s.DX : "button";
              return (0, i.jsx)(l, {
                "data-slot": "button",
                className: (0, a.cn)(u({ variant: t, size: n, className: e })),
                ...o,
              });
            }
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      29021: (e) => {
        "use strict";
        e.exports = require("fs");
      },
      29272: (e, t, n) => {
        "use strict";
        n.d(t, { Srz: () => l, TBE: () => o });
        var r = n(84205);
        function i(e, t) {
          if (null == e) return {};
          var n,
            r,
            i = {},
            s = Object.keys(e);
          for (r = 0; r < s.length; r++)
            (n = s[r]), t.indexOf(n) >= 0 || (i[n] = e[n]);
          return i;
        }
        var s = ["color"],
          o = (0, r.forwardRef)(function (e, t) {
            var n = e.color,
              o = i(e, s);
            return (0, r.createElement)(
              "svg",
              Object.assign(
                {
                  width: "15",
                  height: "15",
                  viewBox: "0 0 15 15",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                },
                o,
                { ref: t },
              ),
              (0, r.createElement)("path", {
                d: "M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z",
                fill: void 0 === n ? "currentColor" : n,
                fillRule: "evenodd",
                clipRule: "evenodd",
              }),
            );
          }),
          a = ["color"],
          l = (0, r.forwardRef)(function (e, t) {
            var n = e.color,
              s = i(e, a);
            return (0, r.createElement)(
              "svg",
              Object.assign(
                {
                  width: "15",
                  height: "15",
                  viewBox: "0 0 15 15",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                },
                s,
                { ref: t },
              ),
              (0, r.createElement)("path", {
                d: "M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z",
                fill: void 0 === n ? "currentColor" : n,
                fillRule: "evenodd",
                clipRule: "evenodd",
              }),
            );
          });
      },
      29294: (e) => {
        "use strict";
        e.exports = require("next/dist/server/app-render/work-async-storage.external.js");
      },
      29791: (e, t, n) => {
        "use strict";
        n.d(t, { q: () => s });
        var r = n(61268),
          i = n(12253);
        let s = ({ attachment: e, isUploading: t = !1 }) => {
          let { name: n, url: s, contentType: o } = e;
          return (0, r.jsxs)("div", {
            "data-testid": "input-attachment-preview",
            className: "flex flex-col gap-2",
            children: [
              (0, r.jsxs)("div", {
                className:
                  "w-20 h-16 aspect-video bg-muted rounded-md relative flex flex-col items-center justify-center",
                children: [
                  o && o.startsWith("image")
                    ? (0, r.jsx)(
                        "img",
                        {
                          src: s,
                          alt: n ?? "An image attachment",
                          className: "rounded-md size-full object-cover",
                        },
                        s,
                      )
                    : (0, r.jsx)("div", { className: "" }),
                  t &&
                    (0, r.jsx)("div", {
                      "data-testid": "input-attachment-loader",
                      className: "animate-spin absolute text-zinc-500",
                      children: (0, r.jsx)(i.hz, {}),
                    }),
                ],
              }),
              (0, r.jsx)("div", {
                className: "text-xs text-zinc-500 max-w-16 truncate",
                children: n,
              }),
            ],
          });
        };
      },
      30205: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, {
              Cf: () => f,
              Es: () => g,
              L3: () => y,
              c7: () => m,
              lG: () => u,
              rr: () => v,
              zM: () => d,
            });
            var i = n(61268),
              s = n(33459),
              o = n(90495),
              a = n(84205),
              l = n(15942),
              c = e([l]);
            l = (c.then ? (await c)() : c)[0];
            let u = s.bL,
              d = s.l9,
              h = s.ZL;
            s.bm;
            let p = a.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.hJ, {
                ref: n,
                className: (0, l.cn)(
                  "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
                  e,
                ),
                ...t,
              }),
            );
            p.displayName = s.hJ.displayName;
            let f = a.forwardRef(({ className: e, children: t, ...n }, r) =>
              (0, i.jsxs)(h, {
                children: [
                  (0, i.jsx)(p, {}),
                  (0, i.jsxs)(s.UC, {
                    ref: r,
                    className: (0, l.cn)(
                      "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
                      e,
                    ),
                    ...n,
                    children: [
                      t,
                      (0, i.jsxs)(s.bm, {
                        className:
                          "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground",
                        children: [
                          (0, i.jsx)(o.A, { className: "h-4 w-4" }),
                          (0, i.jsx)("span", {
                            className: "sr-only",
                            children: "Close",
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            );
            f.displayName = s.UC.displayName;
            let m = ({ className: e, ...t }) =>
              (0, i.jsx)("div", {
                className: (0, l.cn)(
                  "flex flex-col space-y-1.5 text-center sm:text-left",
                  e,
                ),
                ...t,
              });
            m.displayName = "DialogHeader";
            let g = ({ className: e, ...t }) =>
              (0, i.jsx)("div", {
                className: (0, l.cn)(
                  "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
                  e,
                ),
                ...t,
              });
            g.displayName = "DialogFooter";
            let y = a.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.hE, {
                ref: n,
                className: (0, l.cn)(
                  "text-lg font-semibold leading-none tracking-tight",
                  e,
                ),
                ...t,
              }),
            );
            y.displayName = s.hE.displayName;
            let v = a.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.VY, {
                ref: n,
                className: (0, l.cn)("text-sm text-muted-foreground", e),
                ...t,
              }),
            );
            (v.displayName = s.VY.displayName), r();
          } catch (e) {
            r(e);
          }
        });
      },
      30567: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { Rh: () => p, b3: () => d, ls: () => h });
            var i = n(99793),
              s = n(63942),
              o = n(87851);
            n(84205);
            var a = n(94262),
              l = n(68426),
              c = n(40530),
              u = e([a, l, c]);
            [a, l, c] = u.then ? (await u)() : u;
            var d = (function (e) {
              return (
                (e.Text = "text"),
                (e.Code = "code"),
                (e.Sheet = "sheet"),
                (e.Image = "image"),
                e
              );
            })({});
            let h = { kind: null, status: "idle", title: "", content: null },
              p = [
                {
                  kind: "text",
                  icon: i.A,
                  component: c._,
                  onStreamPart: ({ streamPart: e, setArtifact: t }) => {
                    "text-delta" === e.type &&
                      t((t) => ({
                        ...t,
                        content:
                          ("string" == typeof t.content ? t.content : "") +
                          e.content,
                        status: "streaming",
                      }));
                  },
                },
                {
                  kind: "code",
                  icon: s.A,
                  component: a.E,
                  onStreamPart: ({ streamPart: e, setArtifact: t }) => {
                    "code-delta" === e.type &&
                      t((t) => ({
                        ...t,
                        content:
                          ("string" == typeof t.content ? t.content : "") +
                          e.content,
                        status: "streaming",
                      }));
                  },
                },
                {
                  kind: "sheet",
                  icon: o.A,
                  component: l.O,
                  onStreamPart: ({ streamPart: e, setArtifact: t }) => {
                    t((t) => {
                      let n = t.content;
                      return ("sheet" !== t.kind ||
                        (null !== n &&
                          "object" == typeof n &&
                          n.rows &&
                          n.columns) ||
                        (n = { columns: [], rows: [] }),
                      "sheet-delta" === e.type &&
                        "object" == typeof e.content &&
                        Array.isArray(e.content))
                        ? {
                            ...t,
                            content: {
                              ...n,
                              rows: [...(n.rows || []), ...e.content],
                            },
                            status: "streaming",
                          }
                        : t;
                    });
                  },
                },
              ];
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      30879: function (e, t, n) {
        "use strict";
        var r =
            (this && this.__createBinding) ||
            (Object.create
              ? function (e, t, n, r) {
                  void 0 === r && (r = n);
                  var i = Object.getOwnPropertyDescriptor(t, n);
                  (!i ||
                    ("get" in i
                      ? !t.__esModule
                      : i.writable || i.configurable)) &&
                    (i = {
                      enumerable: !0,
                      get: function () {
                        return t[n];
                      },
                    }),
                    Object.defineProperty(e, r, i);
                }
              : function (e, t, n, r) {
                  void 0 === r && (r = n), (e[r] = t[n]);
                }),
          i =
            (this && this.__setModuleDefault) ||
            (Object.create
              ? function (e, t) {
                  Object.defineProperty(e, "default", {
                    enumerable: !0,
                    value: t,
                  });
                }
              : function (e, t) {
                  e.default = t;
                }),
          s =
            (this && this.__importStar) ||
            function (e) {
              if (e && e.__esModule) return e;
              var t = {};
              if (null != e)
                for (var n in e)
                  "default" !== n &&
                    Object.prototype.hasOwnProperty.call(e, n) &&
                    r(t, e, n);
              return i(t, e), t;
            },
          o =
            (this && this.__exportStar) ||
            function (e, t) {
              for (var n in e)
                "default" === n ||
                  Object.prototype.hasOwnProperty.call(t, n) ||
                  r(t, e, n);
            };
        Object.defineProperty(t, "__esModule", { value: !0 }), (t.z = void 0);
        let a = s(n(16862));
        (t.z = a), o(n(16862), t), (t.default = a);
      },
      31421: (e) => {
        "use strict";
        e.exports = require("node:child_process");
      },
      32110: (e, t, n) => {
        "use strict";
        n.d(t, { Qq: () => l });
        var r = n(92858),
          i = n(43326),
          s = n(43758);
        class o extends s.pe {
          static [r.i] = "PgTextBuilder";
          constructor(e, t) {
            super(e, "string", "PgText"), (this.config.enumValues = t.enum);
          }
          build(e) {
            return new a(e, this.config);
          }
        }
        class a extends s.Kl {
          static [r.i] = "PgText";
          enumValues = this.config.enumValues;
          getSQLType() {
            return "text";
          }
        }
        function l(e, t = {}) {
          let { name: n, config: r } = (0, i.Ll)(e, t);
          return new o(n, r);
        }
      },
      32566: (e, t, n) => {
        "use strict";
        n.d(t, { n: () => r });
        let r = Symbol.for("drizzle:ViewBaseConfig");
      },
      32995: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 251)),
          Promise.resolve().then(n.bind(n, 3519));
      },
      33007: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { $: () => h, kA: () => u, wA: () => d });
            var i = n(93678),
              s = n(56162),
              o = n(27480),
              a = n(21725),
              l = n(41062);
            n(12595);
            var c = e([a]);
            a = (c.then ? (await c)() : c)[0];
            let p = (0, o.A)(process.env.POSTGRES_URL),
              f = (0, s.f)(p);
            async function u({ id: e }) {
              try {
                let [t] = await f
                  .select()
                  .from(l.p$)
                  .where((0, i.eq)(l.p$.id, e));
                return t;
              } catch (e) {
                throw (
                  (console.error("Failed to get message by id from database"),
                  e)
                );
              }
            }
            async function d({ chatId: e, timestamp: t }) {
              try {
                let n = await f
                  .select({ id: l.p$.id })
                  .from(l.p$)
                  .where(
                    (0, i.Uo)(
                      (0, i.eq)(l.p$.sessionId, e),
                      (0, i.lt)(l.p$.createdAt, t),
                    ),
                  );
                if (0 === n.length) return [];
                let r = n.map((e) => e.id);
                return await f
                  .delete(l.p$)
                  .where((0, i.RV)(l.p$.id, r))
                  .returning();
              } catch (e) {
                throw (
                  (console.error(
                    "Failed to delete messages by chat id after timestamp from database",
                    e,
                  ),
                  e)
                );
              }
            }
            async function h({ chatId: e, visibility: t }) {
              try {
                return await f
                  .update(l.o0)
                  .set({ visibility: t })
                  .where((0, i.eq)(l.o0.id, e));
              } catch (e) {
                throw (
                  (console.error(
                    "Failed to update chat visibility by id from database",
                  ),
                  e)
                );
              }
            }
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      33354: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { E: () => h, p: () => d });
            var i = n(61268),
              s = n(84205),
              o = n(98654),
              a = n(12253),
              l = n(39070),
              c = e([l]);
            l = (c.then ? (await c)() : c)[0];
            let u = (e, t) => {
                switch (e) {
                  case "create":
                    return "present" === t ? "Creating" : "Created";
                  case "update":
                    return "present" === t ? "Updating" : "Updated";
                  case "request-suggestions":
                    return "present" === t
                      ? "Adding suggestions"
                      : "Added suggestions to";
                  default:
                    return null;
                }
              },
              d = (0, s.memo)(
                function ({ type: e, result: t, isReadonly: n }) {
                  let { setArtifact: r } = (0, l.ST)();
                  return (0, i.jsxs)("button", {
                    type: "button",
                    className:
                      "bg-background cursor-pointer border py-2 px-3 rounded-xl w-fit flex flex-row gap-3 items-start",
                    onClick: (e) => {
                      if (n)
                        return void o.oR.error(
                          "Viewing files in shared chats is currently not supported.",
                        );
                      let i = e.currentTarget.getBoundingClientRect(),
                        s = {
                          top: i.top,
                          left: i.left,
                          width: i.width,
                          height: i.height,
                        };
                      r({
                        documentId: t.id,
                        kind: t.kind,
                        content: "",
                        title: t.title,
                        isVisible: !0,
                        status: "idle",
                        boundingBox: s,
                      });
                    },
                    children: [
                      (0, i.jsx)("div", {
                        className: "text-muted-foreground mt-1",
                        children:
                          "create" === e
                            ? (0, i.jsx)(a.oS, {})
                            : "update" === e
                              ? (0, i.jsx)(a.vL, {})
                              : "request-suggestions" === e
                                ? (0, i.jsx)(a.b1, {})
                                : null,
                      }),
                      (0, i.jsx)("div", {
                        className: "text-left",
                        children: `${u(e, "past")} "${t.title}"`,
                      }),
                    ],
                  });
                },
                () => !0,
              ),
              h = (0, s.memo)(
                function ({ type: e, args: t, isReadonly: n }) {
                  let { setArtifact: r } = (0, l.ST)();
                  return (0, i.jsxs)("button", {
                    type: "button",
                    className:
                      "cursor pointer w-fit border py-2 px-3 rounded-xl flex flex-row items-start justify-between gap-3",
                    onClick: (e) => {
                      if (n)
                        return void o.oR.error(
                          "Viewing files in shared chats is currently not supported.",
                        );
                      let t = e.currentTarget.getBoundingClientRect(),
                        i = {
                          top: t.top,
                          left: t.left,
                          width: t.width,
                          height: t.height,
                        };
                      r((e) => ({ ...e, isVisible: !0, boundingBox: i }));
                    },
                    children: [
                      (0, i.jsxs)("div", {
                        className: "flex flex-row gap-3 items-start",
                        children: [
                          (0, i.jsx)("div", {
                            className: "text-zinc-500 mt-1",
                            children:
                              "create" === e
                                ? (0, i.jsx)(a.oS, {})
                                : "update" === e
                                  ? (0, i.jsx)(a.vL, {})
                                  : "request-suggestions" === e
                                    ? (0, i.jsx)(a.b1, {})
                                    : null,
                          }),
                          (0, i.jsx)("div", {
                            className: "text-left",
                            children: `${u(e, "present")} ${t.title ? `"${t.title}"` : ""}`,
                          }),
                        ],
                      }),
                      (0, i.jsx)("div", {
                        className: "animate-spin mt-1",
                        children: (0, i.jsx)(a.hz, {}),
                      }),
                    ],
                  });
                },
                () => !0,
              );
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      33675: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 95437)),
          Promise.resolve().then(n.bind(n, 29244));
      },
      33873: (e) => {
        "use strict";
        e.exports = require("path");
      },
      34088: (e, t, n) => {
        "use strict";
        n.d(t, {
          $t: () => _,
          LN: () => o,
          U3: () => u,
          hs: () => E,
          i5: () => f,
          k_: () => O,
          nh: () => h,
          yn: () => a,
        });
        var r = n(14077),
          i = n(64680);
        let s = Object.create(null);
        class o {
          constructor(e, t, n) {
            (this.$anchor = e),
              (this.$head = t),
              (this.ranges = n || [new a(e.min(t), e.max(t))]);
          }
          get anchor() {
            return this.$anchor.pos;
          }
          get head() {
            return this.$head.pos;
          }
          get from() {
            return this.$from.pos;
          }
          get to() {
            return this.$to.pos;
          }
          get $from() {
            return this.ranges[0].$from;
          }
          get $to() {
            return this.ranges[0].$to;
          }
          get empty() {
            let e = this.ranges;
            for (let t = 0; t < e.length; t++)
              if (e[t].$from.pos != e[t].$to.pos) return !1;
            return !0;
          }
          content() {
            return this.$from.doc.slice(this.from, this.to, !0);
          }
          replace(e, t = r.Ji.empty) {
            let n = t.content.lastChild,
              i = null;
            for (let e = 0; e < t.openEnd; e++) (i = n), (n = n.lastChild);
            let s = e.steps.length,
              o = this.ranges;
            for (let a = 0; a < o.length; a++) {
              let { $from: l, $to: c } = o[a],
                u = e.mapping.slice(s);
              e.replaceRange(u.map(l.pos), u.map(c.pos), a ? r.Ji.empty : t),
                0 == a &&
                  y(e, s, (n ? n.isInline : i && i.isTextblock) ? -1 : 1);
            }
          }
          replaceWith(e, t) {
            let n = e.steps.length,
              r = this.ranges;
            for (let i = 0; i < r.length; i++) {
              let { $from: s, $to: o } = r[i],
                a = e.mapping.slice(n),
                l = a.map(s.pos),
                c = a.map(o.pos);
              i
                ? e.deleteRange(l, c)
                : (e.replaceRangeWith(l, c, t), y(e, n, t.isInline ? -1 : 1));
            }
          }
          static findFrom(e, t, n = !1) {
            let r = e.parent.inlineContent
              ? new u(e)
              : g(e.node(0), e.parent, e.pos, e.index(), t, n);
            if (r) return r;
            for (let r = e.depth - 1; r >= 0; r--) {
              let i =
                t < 0
                  ? g(e.node(0), e.node(r), e.before(r + 1), e.index(r), t, n)
                  : g(
                      e.node(0),
                      e.node(r),
                      e.after(r + 1),
                      e.index(r) + 1,
                      t,
                      n,
                    );
              if (i) return i;
            }
            return null;
          }
          static near(e, t = 1) {
            return (
              this.findFrom(e, t) || this.findFrom(e, -t) || new f(e.node(0))
            );
          }
          static atStart(e) {
            return g(e, e, 0, 0, 1) || new f(e);
          }
          static atEnd(e) {
            return g(e, e, e.content.size, e.childCount, -1) || new f(e);
          }
          static fromJSON(e, t) {
            if (!t || !t.type)
              throw RangeError("Invalid input for Selection.fromJSON");
            let n = s[t.type];
            if (!n) throw RangeError(`No selection type ${t.type} defined`);
            return n.fromJSON(e, t);
          }
          static jsonID(e, t) {
            if (e in s)
              throw RangeError("Duplicate use of selection JSON ID " + e);
            return (s[e] = t), (t.prototype.jsonID = e), t;
          }
          getBookmark() {
            return u.between(this.$anchor, this.$head).getBookmark();
          }
        }
        o.prototype.visible = !0;
        class a {
          constructor(e, t) {
            (this.$from = e), (this.$to = t);
          }
        }
        let l = !1;
        function c(e) {
          l ||
            e.parent.inlineContent ||
            ((l = !0),
            console.warn(
              "TextSelection endpoint not pointing into a node with inline content (" +
                e.parent.type.name +
                ")",
            ));
        }
        class u extends o {
          constructor(e, t = e) {
            c(e), c(t), super(e, t);
          }
          get $cursor() {
            return this.$anchor.pos == this.$head.pos ? this.$head : null;
          }
          map(e, t) {
            let n = e.resolve(t.map(this.head));
            if (!n.parent.inlineContent) return o.near(n);
            let r = e.resolve(t.map(this.anchor));
            return new u(r.parent.inlineContent ? r : n, n);
          }
          replace(e, t = r.Ji.empty) {
            if ((super.replace(e, t), t == r.Ji.empty)) {
              let t = this.$from.marksAcross(this.$to);
              t && e.ensureMarks(t);
            }
          }
          eq(e) {
            return (
              e instanceof u && e.anchor == this.anchor && e.head == this.head
            );
          }
          getBookmark() {
            return new d(this.anchor, this.head);
          }
          toJSON() {
            return { type: "text", anchor: this.anchor, head: this.head };
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.anchor || "number" != typeof t.head)
              throw RangeError("Invalid input for TextSelection.fromJSON");
            return new u(e.resolve(t.anchor), e.resolve(t.head));
          }
          static create(e, t, n = t) {
            let r = e.resolve(t);
            return new this(r, n == t ? r : e.resolve(n));
          }
          static between(e, t, n) {
            let r = e.pos - t.pos;
            if (((!n || r) && (n = r >= 0 ? 1 : -1), !t.parent.inlineContent)) {
              let e = o.findFrom(t, n, !0) || o.findFrom(t, -n, !0);
              if (!e) return o.near(t, n);
              t = e.$head;
            }
            return (
              e.parent.inlineContent ||
                (0 == r
                  ? (e = t)
                  : (e = (o.findFrom(e, -n, !0) || o.findFrom(e, n, !0))
                      .$anchor).pos <
                      t.pos !=
                      r < 0 && (e = t)),
              new u(e, t)
            );
          }
        }
        o.jsonID("text", u);
        class d {
          constructor(e, t) {
            (this.anchor = e), (this.head = t);
          }
          map(e) {
            return new d(e.map(this.anchor), e.map(this.head));
          }
          resolve(e) {
            return u.between(e.resolve(this.anchor), e.resolve(this.head));
          }
        }
        class h extends o {
          constructor(e) {
            let t = e.nodeAfter;
            super(e, e.node(0).resolve(e.pos + t.nodeSize)), (this.node = t);
          }
          map(e, t) {
            let { deleted: n, pos: r } = t.mapResult(this.anchor),
              i = e.resolve(r);
            return n ? o.near(i) : new h(i);
          }
          content() {
            return new r.Ji(r.FK.from(this.node), 0, 0);
          }
          eq(e) {
            return e instanceof h && e.anchor == this.anchor;
          }
          toJSON() {
            return { type: "node", anchor: this.anchor };
          }
          getBookmark() {
            return new p(this.anchor);
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.anchor)
              throw RangeError("Invalid input for NodeSelection.fromJSON");
            return new h(e.resolve(t.anchor));
          }
          static create(e, t) {
            return new h(e.resolve(t));
          }
          static isSelectable(e) {
            return !e.isText && !1 !== e.type.spec.selectable;
          }
        }
        (h.prototype.visible = !1), o.jsonID("node", h);
        class p {
          constructor(e) {
            this.anchor = e;
          }
          map(e) {
            let { deleted: t, pos: n } = e.mapResult(this.anchor);
            return t ? new d(n, n) : new p(n);
          }
          resolve(e) {
            let t = e.resolve(this.anchor),
              n = t.nodeAfter;
            return n && h.isSelectable(n) ? new h(t) : o.near(t);
          }
        }
        class f extends o {
          constructor(e) {
            super(e.resolve(0), e.resolve(e.content.size));
          }
          replace(e, t = r.Ji.empty) {
            if (t == r.Ji.empty) {
              e.delete(0, e.doc.content.size);
              let t = o.atStart(e.doc);
              t.eq(e.selection) || e.setSelection(t);
            } else super.replace(e, t);
          }
          toJSON() {
            return { type: "all" };
          }
          static fromJSON(e) {
            return new f(e);
          }
          map(e) {
            return new f(e);
          }
          eq(e) {
            return e instanceof f;
          }
          getBookmark() {
            return m;
          }
        }
        o.jsonID("all", f);
        let m = {
          map() {
            return this;
          },
          resolve: (e) => new f(e),
        };
        function g(e, t, n, r, i, s = !1) {
          if (t.inlineContent) return u.create(e, n);
          for (
            let o = r - (i > 0 ? 0 : 1);
            i > 0 ? o < t.childCount : o >= 0;
            o += i
          ) {
            let r = t.child(o);
            if (r.isAtom) {
              if (!s && h.isSelectable(r))
                return h.create(e, n - (i < 0 ? r.nodeSize : 0));
            } else {
              let t = g(e, r, n + i, i < 0 ? r.childCount : 0, i, s);
              if (t) return t;
            }
            n += r.nodeSize * i;
          }
          return null;
        }
        function y(e, t, n) {
          let r,
            s = e.steps.length - 1;
          if (s < t) return;
          let a = e.steps[s];
          (a instanceof i.Ln || a instanceof i.Wg) &&
            (e.mapping.maps[s].forEach((e, t, n, i) => {
              null == r && (r = i);
            }),
            e.setSelection(o.near(e.doc.resolve(r), n)));
        }
        class v extends i.dL {
          constructor(e) {
            super(e.doc),
              (this.curSelectionFor = 0),
              (this.updated = 0),
              (this.meta = Object.create(null)),
              (this.time = Date.now()),
              (this.curSelection = e.selection),
              (this.storedMarks = e.storedMarks);
          }
          get selection() {
            return (
              this.curSelectionFor < this.steps.length &&
                ((this.curSelection = this.curSelection.map(
                  this.doc,
                  this.mapping.slice(this.curSelectionFor),
                )),
                (this.curSelectionFor = this.steps.length)),
              this.curSelection
            );
          }
          setSelection(e) {
            if (e.$from.doc != this.doc)
              throw RangeError(
                "Selection passed to setSelection must point at the current document",
              );
            return (
              (this.curSelection = e),
              (this.curSelectionFor = this.steps.length),
              (this.updated = (1 | this.updated) & -3),
              (this.storedMarks = null),
              this
            );
          }
          get selectionSet() {
            return (1 & this.updated) > 0;
          }
          setStoredMarks(e) {
            return (this.storedMarks = e), (this.updated |= 2), this;
          }
          ensureMarks(e) {
            return (
              r.CU.sameSet(
                this.storedMarks || this.selection.$from.marks(),
                e,
              ) || this.setStoredMarks(e),
              this
            );
          }
          addStoredMark(e) {
            return this.ensureMarks(
              e.addToSet(this.storedMarks || this.selection.$head.marks()),
            );
          }
          removeStoredMark(e) {
            return this.ensureMarks(
              e.removeFromSet(this.storedMarks || this.selection.$head.marks()),
            );
          }
          get storedMarksSet() {
            return (2 & this.updated) > 0;
          }
          addStep(e, t) {
            super.addStep(e, t),
              (this.updated = -3 & this.updated),
              (this.storedMarks = null);
          }
          setTime(e) {
            return (this.time = e), this;
          }
          replaceSelection(e) {
            return this.selection.replace(this, e), this;
          }
          replaceSelectionWith(e, t = !0) {
            let n = this.selection;
            return (
              t &&
                (e = e.mark(
                  this.storedMarks ||
                    (n.empty
                      ? n.$from.marks()
                      : n.$from.marksAcross(n.$to) || r.CU.none),
                )),
              n.replaceWith(this, e),
              this
            );
          }
          deleteSelection() {
            return this.selection.replace(this), this;
          }
          insertText(e, t, n) {
            let r = this.doc.type.schema;
            if (null == t)
              return e
                ? this.replaceSelectionWith(r.text(e), !0)
                : this.deleteSelection();
            {
              if ((null == n && (n = t), (n = null == n ? t : n), !e))
                return this.deleteRange(t, n);
              let i = this.storedMarks;
              if (!i) {
                let e = this.doc.resolve(t);
                i = n == t ? e.marks() : e.marksAcross(this.doc.resolve(n));
              }
              return (
                this.replaceRangeWith(t, n, r.text(e, i)),
                this.selection.empty ||
                  this.setSelection(o.near(this.selection.$to)),
                this
              );
            }
          }
          setMeta(e, t) {
            return (this.meta["string" == typeof e ? e : e.key] = t), this;
          }
          getMeta(e) {
            return this.meta["string" == typeof e ? e : e.key];
          }
          get isGeneric() {
            for (let e in this.meta) return !1;
            return !0;
          }
          scrollIntoView() {
            return (this.updated |= 4), this;
          }
          get scrolledIntoView() {
            return (4 & this.updated) > 0;
          }
        }
        function b(e, t) {
          return t && e ? e.bind(t) : e;
        }
        class x {
          constructor(e, t, n) {
            (this.name = e),
              (this.init = b(t.init, n)),
              (this.apply = b(t.apply, n));
          }
        }
        let k = [
          new x("doc", {
            init: (e) => e.doc || e.schema.topNodeType.createAndFill(),
            apply: (e) => e.doc,
          }),
          new x("selection", {
            init: (e, t) => e.selection || o.atStart(t.doc),
            apply: (e) => e.selection,
          }),
          new x("storedMarks", {
            init: (e) => e.storedMarks || null,
            apply: (e, t, n, r) => (r.selection.$cursor ? e.storedMarks : null),
          }),
          new x("scrollToSelection", {
            init: () => 0,
            apply: (e, t) => (e.scrolledIntoView ? t + 1 : t),
          }),
        ];
        class w {
          constructor(e, t) {
            (this.schema = e),
              (this.plugins = []),
              (this.pluginsByKey = Object.create(null)),
              (this.fields = k.slice()),
              t &&
                t.forEach((e) => {
                  if (this.pluginsByKey[e.key])
                    throw RangeError(
                      "Adding different instances of a keyed plugin (" +
                        e.key +
                        ")",
                    );
                  this.plugins.push(e),
                    (this.pluginsByKey[e.key] = e),
                    e.spec.state &&
                      this.fields.push(new x(e.key, e.spec.state, e));
                });
          }
        }
        class _ {
          constructor(e) {
            this.config = e;
          }
          get schema() {
            return this.config.schema;
          }
          get plugins() {
            return this.config.plugins;
          }
          apply(e) {
            return this.applyTransaction(e).state;
          }
          filterTransaction(e, t = -1) {
            for (let n = 0; n < this.config.plugins.length; n++)
              if (n != t) {
                let t = this.config.plugins[n];
                if (
                  t.spec.filterTransaction &&
                  !t.spec.filterTransaction.call(t, e, this)
                )
                  return !1;
              }
            return !0;
          }
          applyTransaction(e) {
            if (!this.filterTransaction(e))
              return { state: this, transactions: [] };
            let t = [e],
              n = this.applyInner(e),
              r = null;
            for (;;) {
              let i = !1;
              for (let s = 0; s < this.config.plugins.length; s++) {
                let o = this.config.plugins[s];
                if (o.spec.appendTransaction) {
                  let a = r ? r[s].n : 0,
                    l = r ? r[s].state : this,
                    c =
                      a < t.length &&
                      o.spec.appendTransaction.call(
                        o,
                        a ? t.slice(a) : t,
                        l,
                        n,
                      );
                  if (c && n.filterTransaction(c, s)) {
                    if ((c.setMeta("appendedTransaction", e), !r)) {
                      r = [];
                      for (let e = 0; e < this.config.plugins.length; e++)
                        r.push(
                          e < s
                            ? { state: n, n: t.length }
                            : { state: this, n: 0 },
                        );
                    }
                    t.push(c), (n = n.applyInner(c)), (i = !0);
                  }
                  r && (r[s] = { state: n, n: t.length });
                }
              }
              if (!i) return { state: n, transactions: t };
            }
          }
          applyInner(e) {
            if (!e.before.eq(this.doc))
              throw RangeError("Applying a mismatched transaction");
            let t = new _(this.config),
              n = this.config.fields;
            for (let r = 0; r < n.length; r++) {
              let i = n[r];
              t[i.name] = i.apply(e, this[i.name], this, t);
            }
            return t;
          }
          get tr() {
            return new v(this);
          }
          static create(e) {
            let t = new w(e.doc ? e.doc.type.schema : e.schema, e.plugins),
              n = new _(t);
            for (let r = 0; r < t.fields.length; r++)
              n[t.fields[r].name] = t.fields[r].init(e, n);
            return n;
          }
          reconfigure(e) {
            let t = new w(this.schema, e.plugins),
              n = t.fields,
              r = new _(t);
            for (let t = 0; t < n.length; t++) {
              let i = n[t].name;
              r[i] = this.hasOwnProperty(i) ? this[i] : n[t].init(e, r);
            }
            return r;
          }
          toJSON(e) {
            let t = {
              doc: this.doc.toJSON(),
              selection: this.selection.toJSON(),
            };
            if (
              (this.storedMarks &&
                (t.storedMarks = this.storedMarks.map((e) => e.toJSON())),
              e && "object" == typeof e)
            )
              for (let n in e) {
                if ("doc" == n || "selection" == n)
                  throw RangeError(
                    "The JSON fields `doc` and `selection` are reserved",
                  );
                let r = e[n],
                  i = r.spec.state;
                i && i.toJSON && (t[n] = i.toJSON.call(r, this[r.key]));
              }
            return t;
          }
          static fromJSON(e, t, n) {
            if (!t) throw RangeError("Invalid input for EditorState.fromJSON");
            if (!e.schema)
              throw RangeError("Required config field 'schema' missing");
            let i = new w(e.schema, e.plugins),
              s = new _(i);
            return (
              i.fields.forEach((i) => {
                if ("doc" == i.name) s.doc = r.bP.fromJSON(e.schema, t.doc);
                else if ("selection" == i.name)
                  s.selection = o.fromJSON(s.doc, t.selection);
                else if ("storedMarks" == i.name)
                  t.storedMarks &&
                    (s.storedMarks = t.storedMarks.map(e.schema.markFromJSON));
                else {
                  if (n)
                    for (let r in n) {
                      let o = n[r],
                        a = o.spec.state;
                      if (
                        o.key == i.name &&
                        a &&
                        a.fromJSON &&
                        Object.prototype.hasOwnProperty.call(t, r)
                      ) {
                        s[i.name] = a.fromJSON.call(o, e, t[r], s);
                        return;
                      }
                    }
                  s[i.name] = i.init(e, s);
                }
              }),
              s
            );
          }
        }
        class O {
          constructor(e) {
            (this.spec = e),
              (this.props = {}),
              e.props &&
                (function e(t, n, r) {
                  for (let i in t) {
                    let s = t[i];
                    s instanceof Function
                      ? (s = s.bind(n))
                      : "handleDOMEvents" == i && (s = e(s, n, {})),
                      (r[i] = s);
                  }
                  return r;
                })(e.props, this, this.props),
              (this.key = e.key ? e.key.key : S("plugin"));
          }
          getState(e) {
            return e[this.key];
          }
        }
        let T = Object.create(null);
        function S(e) {
          return e in T ? e + "$" + ++T[e] : ((T[e] = 0), e + "$");
        }
        class E {
          constructor(e = "key") {
            this.key = S(e);
          }
          get(e) {
            return e.config.pluginsByKey[this.key];
          }
          getState(e) {
            return e[this.key];
          }
        }
      },
      34631: (e) => {
        "use strict";
        e.exports = require("tls");
      },
      35607: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 });
      },
      36686: (e) => {
        "use strict";
        e.exports = require("diagnostics_channel");
      },
      37067: (e) => {
        "use strict";
        e.exports = require("node:http");
      },
      37787: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { T: () => l });
            var i = n(61268),
              s = n(84205),
              o = n(15942),
              a = e([o]);
            o = (a.then ? (await a)() : a)[0];
            let l = s.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("textarea", {
                className: (0, o.cn)(
                  "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
                  e,
                ),
                ref: n,
                ...t,
              }),
            );
            (l.displayName = "Textarea"), r();
          } catch (e) {
            r(e);
          }
        });
      },
      37830: (e) => {
        "use strict";
        e.exports = require("node:stream/web");
      },
      38522: (e) => {
        "use strict";
        e.exports = require("node:zlib");
      },
      38590: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { iN: () => c }),
              n(61268),
              n(31655),
              n(89882),
              n(84205),
              n(98654);
            var i = n(73638),
              s = n(93336);
            n(12253);
            var o = n(33713);
            n(69127);
            var a = n(15942),
              l = e([i, s, o, a]);
            [i, s, o, a] = l.then ? (await l)() : l;
            let c = () => "/api/history";
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      39070: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { A0: () => d, D4: () => u, ST: () => c, ZU: () => h });
            var i = n(84205),
              s = n(17407),
              o = n(88590),
              a = n(30567),
              l = e([a]);
            a = (l.then ? (await l)() : l)[0];
            let u = (0, o.vt)((e) => ({
                artifact: a.ls,
                metadata: {},
                setArtifact: (t) => e((e) => ({ artifact: t(e.artifact) })),
                setMetadata: (t) => e((e) => ({ metadata: t(e.metadata) })),
                resetArtifact: () => e({ artifact: a.ls, metadata: {} }),
              })),
              d = () => u((e) => e.setArtifact),
              h = () => u((e) => e.resetArtifact);
            function c() {
              let { data: e, mutate: t } = (0, s.Ay)("artifact", null, {
                  fallbackData: a.ls,
                }),
                n = (0, i.useMemo)(() => e || a.ls, [e]),
                r = (0, i.useCallback)(
                  (e) => {
                    t((t) => {
                      let n = t || a.ls;
                      return "function" == typeof e ? e(n) : e;
                    });
                  },
                  [t],
                ),
                { data: o, mutate: l } = (0, s.Ay)(
                  () =>
                    n.documentId ? `artifact-metadata-${n.documentId}` : null,
                  null,
                  { fallbackData: null },
                );
              return (0, i.useMemo)(
                () => ({
                  artifact: n,
                  setArtifact: r,
                  metadata: o,
                  setMetadata: l,
                }),
                [n, r, o, l],
              );
            }
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      39079: (e, t, n) => {
        "use strict";
        let r = n(13604),
          i = n(29294),
          s = n(63033),
          o = n(4935),
          a = n(78575),
          l = n(82984),
          c = n(59692),
          u = (n(96456), n(97237)),
          d = new WeakMap();
        function h(e) {
          let t = d.get(e);
          if (t) return t;
          let n = Promise.resolve(e);
          return (
            d.set(e, n),
            Object.defineProperties(n, {
              append: { value: e.append.bind(e) },
              delete: { value: e.delete.bind(e) },
              get: { value: e.get.bind(e) },
              has: { value: e.has.bind(e) },
              set: { value: e.set.bind(e) },
              getSetCookie: { value: e.getSetCookie.bind(e) },
              forEach: { value: e.forEach.bind(e) },
              keys: { value: e.keys.bind(e) },
              values: { value: e.values.bind(e) },
              entries: { value: e.entries.bind(e) },
              [Symbol.iterator]: { value: e[Symbol.iterator].bind(e) },
            }),
            n
          );
        }
        function p(e) {
          return "string" == typeof e ? `'${e}'` : "...";
        }
        let f = (0, c.createDedupedByCallsiteServerErrorLoggerDev)(m);
        function m(e, t) {
          let n = e ? `Route "${e}" ` : "This route ";
          return Object.defineProperty(
            Error(
              `${n}used ${t}. \`headers()\` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`,
            ),
            "__NEXT_ERROR_CODE",
            { value: "E277", enumerable: !1, configurable: !0 },
          );
        }
      },
      40530: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { _: () => l });
            var i = n(61268);
            n(84205);
            var s = n(5451),
              o = n(62268),
              a = e([s, o]);
            [s, o] = a.then ? (await a)() : a;
            let l = ({ artifact: e }) =>
              (0, i.jsxs)(s.Zp, {
                className: "h-full flex flex-col",
                children: [
                  (0, i.jsx)(s.aR, {
                    children: (0, i.jsx)(s.ZB, {
                      children: e.title || "Text Artifact",
                    }),
                  }),
                  (0, i.jsx)(s.Wu, {
                    className: "flex-1 overflow-auto",
                    children:
                      "string" == typeof e.content
                        ? (0, i.jsx)(o.C, { content: e.content })
                        : (0, i.jsx)("pre", {
                            className: "text-xs text-muted-foreground",
                            children: "Invalid content format",
                          }),
                  }),
                ],
              });
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      41062: (e, t, n) => {
        "use strict";
        let r;
        n.d(t, { p$: () => eW, o0: () => eV });
        var i,
          s,
          o,
          a,
          l = n(1596),
          c = n(8325),
          u = n(89138),
          d = n(32110),
          h = n(80629),
          p = n(71721),
          f = n(90377),
          m = n(61469),
          g = n(42447),
          y = n(67712);
        !(function (e) {
          (e.assertEqual = (e) => {}),
            (e.assertIs = function (e) {}),
            (e.assertNever = function (e) {
              throw Error();
            }),
            (e.arrayToEnum = (e) => {
              let t = {};
              for (let n of e) t[n] = n;
              return t;
            }),
            (e.getValidEnumValues = (t) => {
              let n = e.objectKeys(t).filter((e) => "number" != typeof t[t[e]]),
                r = {};
              for (let e of n) r[e] = t[e];
              return e.objectValues(r);
            }),
            (e.objectValues = (t) =>
              e.objectKeys(t).map(function (e) {
                return t[e];
              })),
            (e.objectKeys =
              "function" == typeof Object.keys
                ? (e) => Object.keys(e)
                : (e) => {
                    let t = [];
                    for (let n in e)
                      Object.prototype.hasOwnProperty.call(e, n) && t.push(n);
                    return t;
                  }),
            (e.find = (e, t) => {
              for (let n of e) if (t(n)) return n;
            }),
            (e.isInteger =
              "function" == typeof Number.isInteger
                ? (e) => Number.isInteger(e)
                : (e) =>
                    "number" == typeof e &&
                    Number.isFinite(e) &&
                    Math.floor(e) === e),
            (e.joinValues = function (e, t = " | ") {
              return e
                .map((e) => ("string" == typeof e ? `'${e}'` : e))
                .join(t);
            }),
            (e.jsonStringifyReplacer = (e, t) =>
              "bigint" == typeof t ? t.toString() : t);
        })(i || (i = {})),
          ((s || (s = {})).mergeShapes = (e, t) => ({ ...e, ...t }));
        let v = i.arrayToEnum([
            "string",
            "nan",
            "number",
            "integer",
            "float",
            "boolean",
            "date",
            "bigint",
            "symbol",
            "function",
            "undefined",
            "null",
            "array",
            "object",
            "unknown",
            "promise",
            "void",
            "never",
            "map",
            "set",
          ]),
          b = (e) => {
            switch (typeof e) {
              case "undefined":
                return v.undefined;
              case "string":
                return v.string;
              case "number":
                return Number.isNaN(e) ? v.nan : v.number;
              case "boolean":
                return v.boolean;
              case "function":
                return v.function;
              case "bigint":
                return v.bigint;
              case "symbol":
                return v.symbol;
              case "object":
                if (Array.isArray(e)) return v.array;
                if (null === e) return v.null;
                if (
                  e.then &&
                  "function" == typeof e.then &&
                  e.catch &&
                  "function" == typeof e.catch
                )
                  return v.promise;
                if ("undefined" != typeof Map && e instanceof Map) return v.map;
                if ("undefined" != typeof Set && e instanceof Set) return v.set;
                if ("undefined" != typeof Date && e instanceof Date)
                  return v.date;
                return v.object;
              default:
                return v.unknown;
            }
          },
          x = i.arrayToEnum([
            "invalid_type",
            "invalid_literal",
            "custom",
            "invalid_union",
            "invalid_union_discriminator",
            "invalid_enum_value",
            "unrecognized_keys",
            "invalid_arguments",
            "invalid_return_type",
            "invalid_date",
            "invalid_string",
            "too_small",
            "too_big",
            "invalid_intersection_types",
            "not_multiple_of",
            "not_finite",
          ]);
        class k extends Error {
          get errors() {
            return this.issues;
          }
          constructor(e) {
            super(),
              (this.issues = []),
              (this.addIssue = (e) => {
                this.issues = [...this.issues, e];
              }),
              (this.addIssues = (e = []) => {
                this.issues = [...this.issues, ...e];
              });
            let t = new.target.prototype;
            Object.setPrototypeOf
              ? Object.setPrototypeOf(this, t)
              : (this.__proto__ = t),
              (this.name = "ZodError"),
              (this.issues = e);
          }
          format(e) {
            let t =
                e ||
                function (e) {
                  return e.message;
                },
              n = { _errors: [] },
              r = (e) => {
                for (let i of e.issues)
                  if ("invalid_union" === i.code) i.unionErrors.map(r);
                  else if ("invalid_return_type" === i.code)
                    r(i.returnTypeError);
                  else if ("invalid_arguments" === i.code) r(i.argumentsError);
                  else if (0 === i.path.length) n._errors.push(t(i));
                  else {
                    let e = n,
                      r = 0;
                    for (; r < i.path.length; ) {
                      let n = i.path[r];
                      r === i.path.length - 1
                        ? ((e[n] = e[n] || { _errors: [] }),
                          e[n]._errors.push(t(i)))
                        : (e[n] = e[n] || { _errors: [] }),
                        (e = e[n]),
                        r++;
                    }
                  }
              };
            return r(this), n;
          }
          static assert(e) {
            if (!(e instanceof k)) throw Error(`Not a ZodError: ${e}`);
          }
          toString() {
            return this.message;
          }
          get message() {
            return JSON.stringify(this.issues, i.jsonStringifyReplacer, 2);
          }
          get isEmpty() {
            return 0 === this.issues.length;
          }
          flatten(e = (e) => e.message) {
            let t = {},
              n = [];
            for (let r of this.issues)
              r.path.length > 0
                ? ((t[r.path[0]] = t[r.path[0]] || []), t[r.path[0]].push(e(r)))
                : n.push(e(r));
            return { formErrors: n, fieldErrors: t };
          }
          get formErrors() {
            return this.flatten();
          }
        }
        k.create = (e) => new k(e);
        let w = (e, t) => {
            let n;
            switch (e.code) {
              case x.invalid_type:
                n =
                  e.received === v.undefined
                    ? "Required"
                    : `Expected ${e.expected}, received ${e.received}`;
                break;
              case x.invalid_literal:
                n = `Invalid literal value, expected ${JSON.stringify(e.expected, i.jsonStringifyReplacer)}`;
                break;
              case x.unrecognized_keys:
                n = `Unrecognized key(s) in object: ${i.joinValues(e.keys, ", ")}`;
                break;
              case x.invalid_union:
                n = "Invalid input";
                break;
              case x.invalid_union_discriminator:
                n = `Invalid discriminator value. Expected ${i.joinValues(e.options)}`;
                break;
              case x.invalid_enum_value:
                n = `Invalid enum value. Expected ${i.joinValues(e.options)}, received '${e.received}'`;
                break;
              case x.invalid_arguments:
                n = "Invalid function arguments";
                break;
              case x.invalid_return_type:
                n = "Invalid function return type";
                break;
              case x.invalid_date:
                n = "Invalid date";
                break;
              case x.invalid_string:
                "object" == typeof e.validation
                  ? "includes" in e.validation
                    ? ((n = `Invalid input: must include "${e.validation.includes}"`),
                      "number" == typeof e.validation.position &&
                        (n = `${n} at one or more positions greater than or equal to ${e.validation.position}`))
                    : "startsWith" in e.validation
                      ? (n = `Invalid input: must start with "${e.validation.startsWith}"`)
                      : "endsWith" in e.validation
                        ? (n = `Invalid input: must end with "${e.validation.endsWith}"`)
                        : i.assertNever(e.validation)
                  : (n =
                      "regex" !== e.validation
                        ? `Invalid ${e.validation}`
                        : "Invalid");
                break;
              case x.too_small:
                n =
                  "array" === e.type
                    ? `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "more than"} ${e.minimum} element(s)`
                    : "string" === e.type
                      ? `String must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "over"} ${e.minimum} character(s)`
                      : "number" === e.type
                        ? `Number must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${e.minimum}`
                        : "date" === e.type
                          ? `Date must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(e.minimum))}`
                          : "Invalid input";
                break;
              case x.too_big:
                n =
                  "array" === e.type
                    ? `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "less than"} ${e.maximum} element(s)`
                    : "string" === e.type
                      ? `String must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "under"} ${e.maximum} character(s)`
                      : "number" === e.type
                        ? `Number must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}`
                        : "bigint" === e.type
                          ? `BigInt must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}`
                          : "date" === e.type
                            ? `Date must be ${e.exact ? "exactly" : e.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(e.maximum))}`
                            : "Invalid input";
                break;
              case x.custom:
                n = "Invalid input";
                break;
              case x.invalid_intersection_types:
                n = "Intersection results could not be merged";
                break;
              case x.not_multiple_of:
                n = `Number must be a multiple of ${e.multipleOf}`;
                break;
              case x.not_finite:
                n = "Number must be finite";
                break;
              default:
                (n = t.defaultError), i.assertNever(e);
            }
            return { message: n };
          },
          _ = (e) => {
            let { data: t, path: n, errorMaps: r, issueData: i } = e,
              s = [...n, ...(i.path || [])],
              o = { ...i, path: s };
            if (void 0 !== i.message)
              return { ...i, path: s, message: i.message };
            let a = "";
            for (let e of r
              .filter((e) => !!e)
              .slice()
              .reverse())
              a = e(o, { data: t, defaultError: a }).message;
            return { ...i, path: s, message: a };
          };
        function O(e, t) {
          let n = _({
            issueData: t,
            data: e.data,
            path: e.path,
            errorMaps: [
              e.common.contextualErrorMap,
              e.schemaErrorMap,
              w,
              w == w ? void 0 : w,
            ].filter((e) => !!e),
          });
          e.common.issues.push(n);
        }
        class T {
          constructor() {
            this.value = "valid";
          }
          dirty() {
            "valid" === this.value && (this.value = "dirty");
          }
          abort() {
            "aborted" !== this.value && (this.value = "aborted");
          }
          static mergeArray(e, t) {
            let n = [];
            for (let r of t) {
              if ("aborted" === r.status) return S;
              "dirty" === r.status && e.dirty(), n.push(r.value);
            }
            return { status: e.value, value: n };
          }
          static async mergeObjectAsync(e, t) {
            let n = [];
            for (let e of t) {
              let t = await e.key,
                r = await e.value;
              n.push({ key: t, value: r });
            }
            return T.mergeObjectSync(e, n);
          }
          static mergeObjectSync(e, t) {
            let n = {};
            for (let r of t) {
              let { key: t, value: i } = r;
              if ("aborted" === t.status || "aborted" === i.status) return S;
              "dirty" === t.status && e.dirty(),
                "dirty" === i.status && e.dirty(),
                "__proto__" !== t.value &&
                  (void 0 !== i.value || r.alwaysSet) &&
                  (n[t.value] = i.value);
            }
            return { status: e.value, value: n };
          }
        }
        let S = Object.freeze({ status: "aborted" }),
          E = (e) => ({ status: "dirty", value: e }),
          C = (e) => ({ status: "valid", value: e }),
          A = (e) => "aborted" === e.status,
          N = (e) => "dirty" === e.status,
          I = (e) => "valid" === e.status,
          D = (e) => "undefined" != typeof Promise && e instanceof Promise;
        !(function (e) {
          (e.errToObj = (e) =>
            "string" == typeof e ? { message: e } : e || {}),
            (e.toString = (e) => ("string" == typeof e ? e : e?.message));
        })(o || (o = {}));
        class P {
          constructor(e, t, n, r) {
            (this._cachedPath = []),
              (this.parent = e),
              (this.data = t),
              (this._path = n),
              (this._key = r);
          }
          get path() {
            return (
              this._cachedPath.length ||
                (Array.isArray(this._key)
                  ? this._cachedPath.push(...this._path, ...this._key)
                  : this._cachedPath.push(...this._path, this._key)),
              this._cachedPath
            );
          }
        }
        let R = (e, t) => {
          if (I(t)) return { success: !0, data: t.value };
          if (!e.common.issues.length)
            throw Error("Validation failed but no issues detected.");
          return {
            success: !1,
            get error() {
              if (this._error) return this._error;
              let t = new k(e.common.issues);
              return (this._error = t), this._error;
            },
          };
        };
        function M(e) {
          if (!e) return {};
          let {
            errorMap: t,
            invalid_type_error: n,
            required_error: r,
            description: i,
          } = e;
          if (t && (n || r))
            throw Error(
              'Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.',
            );
          return t
            ? { errorMap: t, description: i }
            : {
                errorMap: (t, i) => {
                  let { message: s } = e;
                  return "invalid_enum_value" === t.code
                    ? { message: s ?? i.defaultError }
                    : void 0 === i.data
                      ? { message: s ?? r ?? i.defaultError }
                      : "invalid_type" !== t.code
                        ? { message: i.defaultError }
                        : { message: s ?? n ?? i.defaultError };
                },
                description: i,
              };
        }
        class L {
          get description() {
            return this._def.description;
          }
          _getType(e) {
            return b(e.data);
          }
          _getOrReturnCtx(e, t) {
            return (
              t || {
                common: e.parent.common,
                data: e.data,
                parsedType: b(e.data),
                schemaErrorMap: this._def.errorMap,
                path: e.path,
                parent: e.parent,
              }
            );
          }
          _processInputParams(e) {
            return {
              status: new T(),
              ctx: {
                common: e.parent.common,
                data: e.data,
                parsedType: b(e.data),
                schemaErrorMap: this._def.errorMap,
                path: e.path,
                parent: e.parent,
              },
            };
          }
          _parseSync(e) {
            let t = this._parse(e);
            if (D(t)) throw Error("Synchronous parse encountered promise.");
            return t;
          }
          _parseAsync(e) {
            return Promise.resolve(this._parse(e));
          }
          parse(e, t) {
            let n = this.safeParse(e, t);
            if (n.success) return n.data;
            throw n.error;
          }
          safeParse(e, t) {
            let n = {
                common: {
                  issues: [],
                  async: t?.async ?? !1,
                  contextualErrorMap: t?.errorMap,
                },
                path: t?.path || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data: e,
                parsedType: b(e),
              },
              r = this._parseSync({ data: e, path: n.path, parent: n });
            return R(n, r);
          }
          "~validate"(e) {
            let t = {
              common: { issues: [], async: !!this["~standard"].async },
              path: [],
              schemaErrorMap: this._def.errorMap,
              parent: null,
              data: e,
              parsedType: b(e),
            };
            if (!this["~standard"].async)
              try {
                let n = this._parseSync({ data: e, path: [], parent: t });
                return I(n) ? { value: n.value } : { issues: t.common.issues };
              } catch (e) {
                e?.message?.toLowerCase()?.includes("encountered") &&
                  (this["~standard"].async = !0),
                  (t.common = { issues: [], async: !0 });
              }
            return this._parseAsync({ data: e, path: [], parent: t }).then(
              (e) => (I(e) ? { value: e.value } : { issues: t.common.issues }),
            );
          }
          async parseAsync(e, t) {
            let n = await this.safeParseAsync(e, t);
            if (n.success) return n.data;
            throw n.error;
          }
          async safeParseAsync(e, t) {
            let n = {
                common: {
                  issues: [],
                  contextualErrorMap: t?.errorMap,
                  async: !0,
                },
                path: t?.path || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data: e,
                parsedType: b(e),
              },
              r = this._parse({ data: e, path: n.path, parent: n });
            return R(n, await (D(r) ? r : Promise.resolve(r)));
          }
          refine(e, t) {
            let n = (e) =>
              "string" == typeof t || void 0 === t
                ? { message: t }
                : "function" == typeof t
                  ? t(e)
                  : t;
            return this._refinement((t, r) => {
              let i = e(t),
                s = () => r.addIssue({ code: x.custom, ...n(t) });
              return "undefined" != typeof Promise && i instanceof Promise
                ? i.then((e) => !!e || (s(), !1))
                : !!i || (s(), !1);
            });
          }
          refinement(e, t) {
            return this._refinement(
              (n, r) =>
                !!e(n) ||
                (r.addIssue("function" == typeof t ? t(n, r) : t), !1),
            );
          }
          _refinement(e) {
            return new eA({
              schema: this,
              typeName: a.ZodEffects,
              effect: { type: "refinement", refinement: e },
            });
          }
          superRefine(e) {
            return this._refinement(e);
          }
          constructor(e) {
            (this.spa = this.safeParseAsync),
              (this._def = e),
              (this.parse = this.parse.bind(this)),
              (this.safeParse = this.safeParse.bind(this)),
              (this.parseAsync = this.parseAsync.bind(this)),
              (this.safeParseAsync = this.safeParseAsync.bind(this)),
              (this.spa = this.spa.bind(this)),
              (this.refine = this.refine.bind(this)),
              (this.refinement = this.refinement.bind(this)),
              (this.superRefine = this.superRefine.bind(this)),
              (this.optional = this.optional.bind(this)),
              (this.nullable = this.nullable.bind(this)),
              (this.nullish = this.nullish.bind(this)),
              (this.array = this.array.bind(this)),
              (this.promise = this.promise.bind(this)),
              (this.or = this.or.bind(this)),
              (this.and = this.and.bind(this)),
              (this.transform = this.transform.bind(this)),
              (this.brand = this.brand.bind(this)),
              (this.default = this.default.bind(this)),
              (this.catch = this.catch.bind(this)),
              (this.describe = this.describe.bind(this)),
              (this.pipe = this.pipe.bind(this)),
              (this.readonly = this.readonly.bind(this)),
              (this.isNullable = this.isNullable.bind(this)),
              (this.isOptional = this.isOptional.bind(this)),
              (this["~standard"] = {
                version: 1,
                vendor: "zod",
                validate: (e) => this["~validate"](e),
              });
          }
          optional() {
            return eN.create(this, this._def);
          }
          nullable() {
            return eI.create(this, this._def);
          }
          nullish() {
            return this.nullable().optional();
          }
          array() {
            return eh.create(this);
          }
          promise() {
            return eC.create(this, this._def);
          }
          or(e) {
            return ef.create([this, e], this._def);
          }
          and(e) {
            return ey.create(this, e, this._def);
          }
          transform(e) {
            return new eA({
              ...M(this._def),
              schema: this,
              typeName: a.ZodEffects,
              effect: { type: "transform", transform: e },
            });
          }
          default(e) {
            return new eD({
              ...M(this._def),
              innerType: this,
              defaultValue: "function" == typeof e ? e : () => e,
              typeName: a.ZodDefault,
            });
          }
          brand() {
            return new eM({
              typeName: a.ZodBranded,
              type: this,
              ...M(this._def),
            });
          }
          catch(e) {
            return new eP({
              ...M(this._def),
              innerType: this,
              catchValue: "function" == typeof e ? e : () => e,
              typeName: a.ZodCatch,
            });
          }
          describe(e) {
            return new this.constructor({ ...this._def, description: e });
          }
          pipe(e) {
            return eL.create(this, e);
          }
          readonly() {
            return ej.create(this);
          }
          isOptional() {
            return this.safeParse(void 0).success;
          }
          isNullable() {
            return this.safeParse(null).success;
          }
        }
        let j = /^c[^\s-]{8,}$/i,
          F = /^[0-9a-z]+$/,
          B = /^[0-9A-HJKMNP-TV-Z]{26}$/i,
          z =
            /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,
          $ = /^[a-z0-9_-]{21}$/i,
          q = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,
          U =
            /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,
          H =
            /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,
          Q =
            /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
          V =
            /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
          W =
            /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,
          Z =
            /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
          G =
            /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
          Y =
            /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
          K =
            "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",
          X = RegExp(`^${K}$`);
        function J(e) {
          let t = "[0-5]\\d";
          e.precision
            ? (t = `${t}\\.\\d{${e.precision}}`)
            : null == e.precision && (t = `${t}(\\.\\d+)?`);
          let n = e.precision ? "+" : "?";
          return `([01]\\d|2[0-3]):[0-5]\\d(:${t})${n}`;
        }
        class ee extends L {
          _parse(e) {
            var t, n, s, o;
            let a;
            if (
              (this._def.coerce && (e.data = String(e.data)),
              this._getType(e) !== v.string)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.string,
                  received: t.parsedType,
                }),
                S
              );
            }
            let l = new T();
            for (let c of this._def.checks)
              if ("min" === c.kind)
                e.data.length < c.value &&
                  (O((a = this._getOrReturnCtx(e, a)), {
                    code: x.too_small,
                    minimum: c.value,
                    type: "string",
                    inclusive: !0,
                    exact: !1,
                    message: c.message,
                  }),
                  l.dirty());
              else if ("max" === c.kind)
                e.data.length > c.value &&
                  (O((a = this._getOrReturnCtx(e, a)), {
                    code: x.too_big,
                    maximum: c.value,
                    type: "string",
                    inclusive: !0,
                    exact: !1,
                    message: c.message,
                  }),
                  l.dirty());
              else if ("length" === c.kind) {
                let t = e.data.length > c.value,
                  n = e.data.length < c.value;
                (t || n) &&
                  ((a = this._getOrReturnCtx(e, a)),
                  t
                    ? O(a, {
                        code: x.too_big,
                        maximum: c.value,
                        type: "string",
                        inclusive: !0,
                        exact: !0,
                        message: c.message,
                      })
                    : n &&
                      O(a, {
                        code: x.too_small,
                        minimum: c.value,
                        type: "string",
                        inclusive: !0,
                        exact: !0,
                        message: c.message,
                      }),
                  l.dirty());
              } else if ("email" === c.kind)
                H.test(e.data) ||
                  (O((a = this._getOrReturnCtx(e, a)), {
                    validation: "email",
                    code: x.invalid_string,
                    message: c.message,
                  }),
                  l.dirty());
              else if ("emoji" === c.kind)
                r ||
                  (r = RegExp(
                    "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$",
                    "u",
                  )),
                  r.test(e.data) ||
                    (O((a = this._getOrReturnCtx(e, a)), {
                      validation: "emoji",
                      code: x.invalid_string,
                      message: c.message,
                    }),
                    l.dirty());
              else if ("uuid" === c.kind)
                z.test(e.data) ||
                  (O((a = this._getOrReturnCtx(e, a)), {
                    validation: "uuid",
                    code: x.invalid_string,
                    message: c.message,
                  }),
                  l.dirty());
              else if ("nanoid" === c.kind)
                $.test(e.data) ||
                  (O((a = this._getOrReturnCtx(e, a)), {
                    validation: "nanoid",
                    code: x.invalid_string,
                    message: c.message,
                  }),
                  l.dirty());
              else if ("cuid" === c.kind)
                j.test(e.data) ||
                  (O((a = this._getOrReturnCtx(e, a)), {
                    validation: "cuid",
                    code: x.invalid_string,
                    message: c.message,
                  }),
                  l.dirty());
              else if ("cuid2" === c.kind)
                F.test(e.data) ||
                  (O((a = this._getOrReturnCtx(e, a)), {
                    validation: "cuid2",
                    code: x.invalid_string,
                    message: c.message,
                  }),
                  l.dirty());
              else if ("ulid" === c.kind)
                B.test(e.data) ||
                  (O((a = this._getOrReturnCtx(e, a)), {
                    validation: "ulid",
                    code: x.invalid_string,
                    message: c.message,
                  }),
                  l.dirty());
              else if ("url" === c.kind)
                try {
                  new URL(e.data);
                } catch {
                  O((a = this._getOrReturnCtx(e, a)), {
                    validation: "url",
                    code: x.invalid_string,
                    message: c.message,
                  }),
                    l.dirty();
                }
              else
                "regex" === c.kind
                  ? ((c.regex.lastIndex = 0),
                    c.regex.test(e.data) ||
                      (O((a = this._getOrReturnCtx(e, a)), {
                        validation: "regex",
                        code: x.invalid_string,
                        message: c.message,
                      }),
                      l.dirty()))
                  : "trim" === c.kind
                    ? (e.data = e.data.trim())
                    : "includes" === c.kind
                      ? e.data.includes(c.value, c.position) ||
                        (O((a = this._getOrReturnCtx(e, a)), {
                          code: x.invalid_string,
                          validation: {
                            includes: c.value,
                            position: c.position,
                          },
                          message: c.message,
                        }),
                        l.dirty())
                      : "toLowerCase" === c.kind
                        ? (e.data = e.data.toLowerCase())
                        : "toUpperCase" === c.kind
                          ? (e.data = e.data.toUpperCase())
                          : "startsWith" === c.kind
                            ? e.data.startsWith(c.value) ||
                              (O((a = this._getOrReturnCtx(e, a)), {
                                code: x.invalid_string,
                                validation: { startsWith: c.value },
                                message: c.message,
                              }),
                              l.dirty())
                            : "endsWith" === c.kind
                              ? e.data.endsWith(c.value) ||
                                (O((a = this._getOrReturnCtx(e, a)), {
                                  code: x.invalid_string,
                                  validation: { endsWith: c.value },
                                  message: c.message,
                                }),
                                l.dirty())
                              : "datetime" === c.kind
                                ? (function (e) {
                                    let t = `${K}T${J(e)}`,
                                      n = [];
                                    return (
                                      n.push(e.local ? "Z?" : "Z"),
                                      e.offset &&
                                        n.push("([+-]\\d{2}:?\\d{2})"),
                                      (t = `${t}(${n.join("|")})`),
                                      RegExp(`^${t}$`)
                                    );
                                  })(c).test(e.data) ||
                                  (O((a = this._getOrReturnCtx(e, a)), {
                                    code: x.invalid_string,
                                    validation: "datetime",
                                    message: c.message,
                                  }),
                                  l.dirty())
                                : "date" === c.kind
                                  ? X.test(e.data) ||
                                    (O((a = this._getOrReturnCtx(e, a)), {
                                      code: x.invalid_string,
                                      validation: "date",
                                      message: c.message,
                                    }),
                                    l.dirty())
                                  : "time" === c.kind
                                    ? RegExp(`^${J(c)}$`).test(e.data) ||
                                      (O((a = this._getOrReturnCtx(e, a)), {
                                        code: x.invalid_string,
                                        validation: "time",
                                        message: c.message,
                                      }),
                                      l.dirty())
                                    : "duration" === c.kind
                                      ? U.test(e.data) ||
                                        (O((a = this._getOrReturnCtx(e, a)), {
                                          validation: "duration",
                                          code: x.invalid_string,
                                          message: c.message,
                                        }),
                                        l.dirty())
                                      : "ip" === c.kind
                                        ? ((t = e.data),
                                          !(
                                            (("v4" === (n = c.version) || !n) &&
                                              Q.test(t)) ||
                                            (("v6" === n || !n) && W.test(t))
                                          ) &&
                                            1 &&
                                            (O(
                                              (a = this._getOrReturnCtx(e, a)),
                                              {
                                                validation: "ip",
                                                code: x.invalid_string,
                                                message: c.message,
                                              },
                                            ),
                                            l.dirty()))
                                        : "jwt" === c.kind
                                          ? !(function (e, t) {
                                              if (!q.test(e)) return !1;
                                              try {
                                                let [n] = e.split("."),
                                                  r = n
                                                    .replace(/-/g, "+")
                                                    .replace(/_/g, "/")
                                                    .padEnd(
                                                      n.length +
                                                        ((4 - (n.length % 4)) %
                                                          4),
                                                      "=",
                                                    ),
                                                  i = JSON.parse(atob(r));
                                                if (
                                                  "object" != typeof i ||
                                                  null === i ||
                                                  ("typ" in i &&
                                                    i?.typ !== "JWT") ||
                                                  !i.alg ||
                                                  (t && i.alg !== t)
                                                )
                                                  return !1;
                                                return !0;
                                              } catch {
                                                return !1;
                                              }
                                            })(e.data, c.alg) &&
                                            (O(
                                              (a = this._getOrReturnCtx(e, a)),
                                              {
                                                validation: "jwt",
                                                code: x.invalid_string,
                                                message: c.message,
                                              },
                                            ),
                                            l.dirty())
                                          : "cidr" === c.kind
                                            ? ((s = e.data),
                                              !(
                                                (("v4" === (o = c.version) ||
                                                  !o) &&
                                                  V.test(s)) ||
                                                (("v6" === o || !o) &&
                                                  Z.test(s))
                                              ) &&
                                                1 &&
                                                (O(
                                                  (a = this._getOrReturnCtx(
                                                    e,
                                                    a,
                                                  )),
                                                  {
                                                    validation: "cidr",
                                                    code: x.invalid_string,
                                                    message: c.message,
                                                  },
                                                ),
                                                l.dirty()))
                                            : "base64" === c.kind
                                              ? G.test(e.data) ||
                                                (O(
                                                  (a = this._getOrReturnCtx(
                                                    e,
                                                    a,
                                                  )),
                                                  {
                                                    validation: "base64",
                                                    code: x.invalid_string,
                                                    message: c.message,
                                                  },
                                                ),
                                                l.dirty())
                                              : "base64url" === c.kind
                                                ? Y.test(e.data) ||
                                                  (O(
                                                    (a = this._getOrReturnCtx(
                                                      e,
                                                      a,
                                                    )),
                                                    {
                                                      validation: "base64url",
                                                      code: x.invalid_string,
                                                      message: c.message,
                                                    },
                                                  ),
                                                  l.dirty())
                                                : i.assertNever(c);
            return { status: l.value, value: e.data };
          }
          _regex(e, t, n) {
            return this.refinement((t) => e.test(t), {
              validation: t,
              code: x.invalid_string,
              ...o.errToObj(n),
            });
          }
          _addCheck(e) {
            return new ee({ ...this._def, checks: [...this._def.checks, e] });
          }
          email(e) {
            return this._addCheck({ kind: "email", ...o.errToObj(e) });
          }
          url(e) {
            return this._addCheck({ kind: "url", ...o.errToObj(e) });
          }
          emoji(e) {
            return this._addCheck({ kind: "emoji", ...o.errToObj(e) });
          }
          uuid(e) {
            return this._addCheck({ kind: "uuid", ...o.errToObj(e) });
          }
          nanoid(e) {
            return this._addCheck({ kind: "nanoid", ...o.errToObj(e) });
          }
          cuid(e) {
            return this._addCheck({ kind: "cuid", ...o.errToObj(e) });
          }
          cuid2(e) {
            return this._addCheck({ kind: "cuid2", ...o.errToObj(e) });
          }
          ulid(e) {
            return this._addCheck({ kind: "ulid", ...o.errToObj(e) });
          }
          base64(e) {
            return this._addCheck({ kind: "base64", ...o.errToObj(e) });
          }
          base64url(e) {
            return this._addCheck({ kind: "base64url", ...o.errToObj(e) });
          }
          jwt(e) {
            return this._addCheck({ kind: "jwt", ...o.errToObj(e) });
          }
          ip(e) {
            return this._addCheck({ kind: "ip", ...o.errToObj(e) });
          }
          cidr(e) {
            return this._addCheck({ kind: "cidr", ...o.errToObj(e) });
          }
          datetime(e) {
            return "string" == typeof e
              ? this._addCheck({
                  kind: "datetime",
                  precision: null,
                  offset: !1,
                  local: !1,
                  message: e,
                })
              : this._addCheck({
                  kind: "datetime",
                  precision: void 0 === e?.precision ? null : e?.precision,
                  offset: e?.offset ?? !1,
                  local: e?.local ?? !1,
                  ...o.errToObj(e?.message),
                });
          }
          date(e) {
            return this._addCheck({ kind: "date", message: e });
          }
          time(e) {
            return "string" == typeof e
              ? this._addCheck({ kind: "time", precision: null, message: e })
              : this._addCheck({
                  kind: "time",
                  precision: void 0 === e?.precision ? null : e?.precision,
                  ...o.errToObj(e?.message),
                });
          }
          duration(e) {
            return this._addCheck({ kind: "duration", ...o.errToObj(e) });
          }
          regex(e, t) {
            return this._addCheck({
              kind: "regex",
              regex: e,
              ...o.errToObj(t),
            });
          }
          includes(e, t) {
            return this._addCheck({
              kind: "includes",
              value: e,
              position: t?.position,
              ...o.errToObj(t?.message),
            });
          }
          startsWith(e, t) {
            return this._addCheck({
              kind: "startsWith",
              value: e,
              ...o.errToObj(t),
            });
          }
          endsWith(e, t) {
            return this._addCheck({
              kind: "endsWith",
              value: e,
              ...o.errToObj(t),
            });
          }
          min(e, t) {
            return this._addCheck({ kind: "min", value: e, ...o.errToObj(t) });
          }
          max(e, t) {
            return this._addCheck({ kind: "max", value: e, ...o.errToObj(t) });
          }
          length(e, t) {
            return this._addCheck({
              kind: "length",
              value: e,
              ...o.errToObj(t),
            });
          }
          nonempty(e) {
            return this.min(1, o.errToObj(e));
          }
          trim() {
            return new ee({
              ...this._def,
              checks: [...this._def.checks, { kind: "trim" }],
            });
          }
          toLowerCase() {
            return new ee({
              ...this._def,
              checks: [...this._def.checks, { kind: "toLowerCase" }],
            });
          }
          toUpperCase() {
            return new ee({
              ...this._def,
              checks: [...this._def.checks, { kind: "toUpperCase" }],
            });
          }
          get isDatetime() {
            return !!this._def.checks.find((e) => "datetime" === e.kind);
          }
          get isDate() {
            return !!this._def.checks.find((e) => "date" === e.kind);
          }
          get isTime() {
            return !!this._def.checks.find((e) => "time" === e.kind);
          }
          get isDuration() {
            return !!this._def.checks.find((e) => "duration" === e.kind);
          }
          get isEmail() {
            return !!this._def.checks.find((e) => "email" === e.kind);
          }
          get isURL() {
            return !!this._def.checks.find((e) => "url" === e.kind);
          }
          get isEmoji() {
            return !!this._def.checks.find((e) => "emoji" === e.kind);
          }
          get isUUID() {
            return !!this._def.checks.find((e) => "uuid" === e.kind);
          }
          get isNANOID() {
            return !!this._def.checks.find((e) => "nanoid" === e.kind);
          }
          get isCUID() {
            return !!this._def.checks.find((e) => "cuid" === e.kind);
          }
          get isCUID2() {
            return !!this._def.checks.find((e) => "cuid2" === e.kind);
          }
          get isULID() {
            return !!this._def.checks.find((e) => "ulid" === e.kind);
          }
          get isIP() {
            return !!this._def.checks.find((e) => "ip" === e.kind);
          }
          get isCIDR() {
            return !!this._def.checks.find((e) => "cidr" === e.kind);
          }
          get isBase64() {
            return !!this._def.checks.find((e) => "base64" === e.kind);
          }
          get isBase64url() {
            return !!this._def.checks.find((e) => "base64url" === e.kind);
          }
          get minLength() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxLength() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
        }
        ee.create = (e) =>
          new ee({
            checks: [],
            typeName: a.ZodString,
            coerce: e?.coerce ?? !1,
            ...M(e),
          });
        class et extends L {
          constructor() {
            super(...arguments),
              (this.min = this.gte),
              (this.max = this.lte),
              (this.step = this.multipleOf);
          }
          _parse(e) {
            let t;
            if (
              (this._def.coerce && (e.data = Number(e.data)),
              this._getType(e) !== v.number)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.number,
                  received: t.parsedType,
                }),
                S
              );
            }
            let n = new T();
            for (let r of this._def.checks)
              "int" === r.kind
                ? i.isInteger(e.data) ||
                  (O((t = this._getOrReturnCtx(e, t)), {
                    code: x.invalid_type,
                    expected: "integer",
                    received: "float",
                    message: r.message,
                  }),
                  n.dirty())
                : "min" === r.kind
                  ? (r.inclusive ? e.data < r.value : e.data <= r.value) &&
                    (O((t = this._getOrReturnCtx(e, t)), {
                      code: x.too_small,
                      minimum: r.value,
                      type: "number",
                      inclusive: r.inclusive,
                      exact: !1,
                      message: r.message,
                    }),
                    n.dirty())
                  : "max" === r.kind
                    ? (r.inclusive ? e.data > r.value : e.data >= r.value) &&
                      (O((t = this._getOrReturnCtx(e, t)), {
                        code: x.too_big,
                        maximum: r.value,
                        type: "number",
                        inclusive: r.inclusive,
                        exact: !1,
                        message: r.message,
                      }),
                      n.dirty())
                    : "multipleOf" === r.kind
                      ? 0 !==
                          (function (e, t) {
                            let n = (e.toString().split(".")[1] || "").length,
                              r = (t.toString().split(".")[1] || "").length,
                              i = n > r ? n : r;
                            return (
                              (Number.parseInt(e.toFixed(i).replace(".", "")) %
                                Number.parseInt(
                                  t.toFixed(i).replace(".", ""),
                                )) /
                              10 ** i
                            );
                          })(e.data, r.value) &&
                        (O((t = this._getOrReturnCtx(e, t)), {
                          code: x.not_multiple_of,
                          multipleOf: r.value,
                          message: r.message,
                        }),
                        n.dirty())
                      : "finite" === r.kind
                        ? Number.isFinite(e.data) ||
                          (O((t = this._getOrReturnCtx(e, t)), {
                            code: x.not_finite,
                            message: r.message,
                          }),
                          n.dirty())
                        : i.assertNever(r);
            return { status: n.value, value: e.data };
          }
          gte(e, t) {
            return this.setLimit("min", e, !0, o.toString(t));
          }
          gt(e, t) {
            return this.setLimit("min", e, !1, o.toString(t));
          }
          lte(e, t) {
            return this.setLimit("max", e, !0, o.toString(t));
          }
          lt(e, t) {
            return this.setLimit("max", e, !1, o.toString(t));
          }
          setLimit(e, t, n, r) {
            return new et({
              ...this._def,
              checks: [
                ...this._def.checks,
                { kind: e, value: t, inclusive: n, message: o.toString(r) },
              ],
            });
          }
          _addCheck(e) {
            return new et({ ...this._def, checks: [...this._def.checks, e] });
          }
          int(e) {
            return this._addCheck({ kind: "int", message: o.toString(e) });
          }
          positive(e) {
            return this._addCheck({
              kind: "min",
              value: 0,
              inclusive: !1,
              message: o.toString(e),
            });
          }
          negative(e) {
            return this._addCheck({
              kind: "max",
              value: 0,
              inclusive: !1,
              message: o.toString(e),
            });
          }
          nonpositive(e) {
            return this._addCheck({
              kind: "max",
              value: 0,
              inclusive: !0,
              message: o.toString(e),
            });
          }
          nonnegative(e) {
            return this._addCheck({
              kind: "min",
              value: 0,
              inclusive: !0,
              message: o.toString(e),
            });
          }
          multipleOf(e, t) {
            return this._addCheck({
              kind: "multipleOf",
              value: e,
              message: o.toString(t),
            });
          }
          finite(e) {
            return this._addCheck({ kind: "finite", message: o.toString(e) });
          }
          safe(e) {
            return this._addCheck({
              kind: "min",
              inclusive: !0,
              value: Number.MIN_SAFE_INTEGER,
              message: o.toString(e),
            })._addCheck({
              kind: "max",
              inclusive: !0,
              value: Number.MAX_SAFE_INTEGER,
              message: o.toString(e),
            });
          }
          get minValue() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxValue() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
          get isInt() {
            return !!this._def.checks.find(
              (e) =>
                "int" === e.kind ||
                ("multipleOf" === e.kind && i.isInteger(e.value)),
            );
          }
          get isFinite() {
            let e = null,
              t = null;
            for (let n of this._def.checks)
              if (
                "finite" === n.kind ||
                "int" === n.kind ||
                "multipleOf" === n.kind
              )
                return !0;
              else
                "min" === n.kind
                  ? (null === t || n.value > t) && (t = n.value)
                  : "max" === n.kind &&
                    (null === e || n.value < e) &&
                    (e = n.value);
            return Number.isFinite(t) && Number.isFinite(e);
          }
        }
        et.create = (e) =>
          new et({
            checks: [],
            typeName: a.ZodNumber,
            coerce: e?.coerce || !1,
            ...M(e),
          });
        class en extends L {
          constructor() {
            super(...arguments), (this.min = this.gte), (this.max = this.lte);
          }
          _parse(e) {
            let t;
            if (this._def.coerce)
              try {
                e.data = BigInt(e.data);
              } catch {
                return this._getInvalidInput(e);
              }
            if (this._getType(e) !== v.bigint) return this._getInvalidInput(e);
            let n = new T();
            for (let r of this._def.checks)
              "min" === r.kind
                ? (r.inclusive ? e.data < r.value : e.data <= r.value) &&
                  (O((t = this._getOrReturnCtx(e, t)), {
                    code: x.too_small,
                    type: "bigint",
                    minimum: r.value,
                    inclusive: r.inclusive,
                    message: r.message,
                  }),
                  n.dirty())
                : "max" === r.kind
                  ? (r.inclusive ? e.data > r.value : e.data >= r.value) &&
                    (O((t = this._getOrReturnCtx(e, t)), {
                      code: x.too_big,
                      type: "bigint",
                      maximum: r.value,
                      inclusive: r.inclusive,
                      message: r.message,
                    }),
                    n.dirty())
                  : "multipleOf" === r.kind
                    ? e.data % r.value !== BigInt(0) &&
                      (O((t = this._getOrReturnCtx(e, t)), {
                        code: x.not_multiple_of,
                        multipleOf: r.value,
                        message: r.message,
                      }),
                      n.dirty())
                    : i.assertNever(r);
            return { status: n.value, value: e.data };
          }
          _getInvalidInput(e) {
            let t = this._getOrReturnCtx(e);
            return (
              O(t, {
                code: x.invalid_type,
                expected: v.bigint,
                received: t.parsedType,
              }),
              S
            );
          }
          gte(e, t) {
            return this.setLimit("min", e, !0, o.toString(t));
          }
          gt(e, t) {
            return this.setLimit("min", e, !1, o.toString(t));
          }
          lte(e, t) {
            return this.setLimit("max", e, !0, o.toString(t));
          }
          lt(e, t) {
            return this.setLimit("max", e, !1, o.toString(t));
          }
          setLimit(e, t, n, r) {
            return new en({
              ...this._def,
              checks: [
                ...this._def.checks,
                { kind: e, value: t, inclusive: n, message: o.toString(r) },
              ],
            });
          }
          _addCheck(e) {
            return new en({ ...this._def, checks: [...this._def.checks, e] });
          }
          positive(e) {
            return this._addCheck({
              kind: "min",
              value: BigInt(0),
              inclusive: !1,
              message: o.toString(e),
            });
          }
          negative(e) {
            return this._addCheck({
              kind: "max",
              value: BigInt(0),
              inclusive: !1,
              message: o.toString(e),
            });
          }
          nonpositive(e) {
            return this._addCheck({
              kind: "max",
              value: BigInt(0),
              inclusive: !0,
              message: o.toString(e),
            });
          }
          nonnegative(e) {
            return this._addCheck({
              kind: "min",
              value: BigInt(0),
              inclusive: !0,
              message: o.toString(e),
            });
          }
          multipleOf(e, t) {
            return this._addCheck({
              kind: "multipleOf",
              value: e,
              message: o.toString(t),
            });
          }
          get minValue() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxValue() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
        }
        en.create = (e) =>
          new en({
            checks: [],
            typeName: a.ZodBigInt,
            coerce: e?.coerce ?? !1,
            ...M(e),
          });
        class er extends L {
          _parse(e) {
            if (
              (this._def.coerce && (e.data = !!e.data),
              this._getType(e) !== v.boolean)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.boolean,
                  received: t.parsedType,
                }),
                S
              );
            }
            return C(e.data);
          }
        }
        er.create = (e) =>
          new er({ typeName: a.ZodBoolean, coerce: e?.coerce || !1, ...M(e) });
        class ei extends L {
          _parse(e) {
            let t;
            if (
              (this._def.coerce && (e.data = new Date(e.data)),
              this._getType(e) !== v.date)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.date,
                  received: t.parsedType,
                }),
                S
              );
            }
            if (Number.isNaN(e.data.getTime()))
              return O(this._getOrReturnCtx(e), { code: x.invalid_date }), S;
            let n = new T();
            for (let r of this._def.checks)
              "min" === r.kind
                ? e.data.getTime() < r.value &&
                  (O((t = this._getOrReturnCtx(e, t)), {
                    code: x.too_small,
                    message: r.message,
                    inclusive: !0,
                    exact: !1,
                    minimum: r.value,
                    type: "date",
                  }),
                  n.dirty())
                : "max" === r.kind
                  ? e.data.getTime() > r.value &&
                    (O((t = this._getOrReturnCtx(e, t)), {
                      code: x.too_big,
                      message: r.message,
                      inclusive: !0,
                      exact: !1,
                      maximum: r.value,
                      type: "date",
                    }),
                    n.dirty())
                  : i.assertNever(r);
            return { status: n.value, value: new Date(e.data.getTime()) };
          }
          _addCheck(e) {
            return new ei({ ...this._def, checks: [...this._def.checks, e] });
          }
          min(e, t) {
            return this._addCheck({
              kind: "min",
              value: e.getTime(),
              message: o.toString(t),
            });
          }
          max(e, t) {
            return this._addCheck({
              kind: "max",
              value: e.getTime(),
              message: o.toString(t),
            });
          }
          get minDate() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return null != e ? new Date(e) : null;
          }
          get maxDate() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return null != e ? new Date(e) : null;
          }
        }
        ei.create = (e) =>
          new ei({
            checks: [],
            coerce: e?.coerce || !1,
            typeName: a.ZodDate,
            ...M(e),
          });
        class es extends L {
          _parse(e) {
            if (this._getType(e) !== v.symbol) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.symbol,
                  received: t.parsedType,
                }),
                S
              );
            }
            return C(e.data);
          }
        }
        es.create = (e) => new es({ typeName: a.ZodSymbol, ...M(e) });
        class eo extends L {
          _parse(e) {
            if (this._getType(e) !== v.undefined) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.undefined,
                  received: t.parsedType,
                }),
                S
              );
            }
            return C(e.data);
          }
        }
        eo.create = (e) => new eo({ typeName: a.ZodUndefined, ...M(e) });
        class ea extends L {
          _parse(e) {
            if (this._getType(e) !== v.null) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.null,
                  received: t.parsedType,
                }),
                S
              );
            }
            return C(e.data);
          }
        }
        ea.create = (e) => new ea({ typeName: a.ZodNull, ...M(e) });
        class el extends L {
          constructor() {
            super(...arguments), (this._any = !0);
          }
          _parse(e) {
            return C(e.data);
          }
        }
        el.create = (e) => new el({ typeName: a.ZodAny, ...M(e) });
        class ec extends L {
          constructor() {
            super(...arguments), (this._unknown = !0);
          }
          _parse(e) {
            return C(e.data);
          }
        }
        ec.create = (e) => new ec({ typeName: a.ZodUnknown, ...M(e) });
        class eu extends L {
          _parse(e) {
            let t = this._getOrReturnCtx(e);
            return (
              O(t, {
                code: x.invalid_type,
                expected: v.never,
                received: t.parsedType,
              }),
              S
            );
          }
        }
        eu.create = (e) => new eu({ typeName: a.ZodNever, ...M(e) });
        class ed extends L {
          _parse(e) {
            if (this._getType(e) !== v.undefined) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.void,
                  received: t.parsedType,
                }),
                S
              );
            }
            return C(e.data);
          }
        }
        ed.create = (e) => new ed({ typeName: a.ZodVoid, ...M(e) });
        class eh extends L {
          _parse(e) {
            let { ctx: t, status: n } = this._processInputParams(e),
              r = this._def;
            if (t.parsedType !== v.array)
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.array,
                  received: t.parsedType,
                }),
                S
              );
            if (null !== r.exactLength) {
              let e = t.data.length > r.exactLength.value,
                i = t.data.length < r.exactLength.value;
              (e || i) &&
                (O(t, {
                  code: e ? x.too_big : x.too_small,
                  minimum: i ? r.exactLength.value : void 0,
                  maximum: e ? r.exactLength.value : void 0,
                  type: "array",
                  inclusive: !0,
                  exact: !0,
                  message: r.exactLength.message,
                }),
                n.dirty());
            }
            if (
              (null !== r.minLength &&
                t.data.length < r.minLength.value &&
                (O(t, {
                  code: x.too_small,
                  minimum: r.minLength.value,
                  type: "array",
                  inclusive: !0,
                  exact: !1,
                  message: r.minLength.message,
                }),
                n.dirty()),
              null !== r.maxLength &&
                t.data.length > r.maxLength.value &&
                (O(t, {
                  code: x.too_big,
                  maximum: r.maxLength.value,
                  type: "array",
                  inclusive: !0,
                  exact: !1,
                  message: r.maxLength.message,
                }),
                n.dirty()),
              t.common.async)
            )
              return Promise.all(
                [...t.data].map((e, n) =>
                  r.type._parseAsync(new P(t, e, t.path, n)),
                ),
              ).then((e) => T.mergeArray(n, e));
            let i = [...t.data].map((e, n) =>
              r.type._parseSync(new P(t, e, t.path, n)),
            );
            return T.mergeArray(n, i);
          }
          get element() {
            return this._def.type;
          }
          min(e, t) {
            return new eh({
              ...this._def,
              minLength: { value: e, message: o.toString(t) },
            });
          }
          max(e, t) {
            return new eh({
              ...this._def,
              maxLength: { value: e, message: o.toString(t) },
            });
          }
          length(e, t) {
            return new eh({
              ...this._def,
              exactLength: { value: e, message: o.toString(t) },
            });
          }
          nonempty(e) {
            return this.min(1, e);
          }
        }
        eh.create = (e, t) =>
          new eh({
            type: e,
            minLength: null,
            maxLength: null,
            exactLength: null,
            typeName: a.ZodArray,
            ...M(t),
          });
        class ep extends L {
          constructor() {
            super(...arguments),
              (this._cached = null),
              (this.nonstrict = this.passthrough),
              (this.augment = this.extend);
          }
          _getCached() {
            if (null !== this._cached) return this._cached;
            let e = this._def.shape(),
              t = i.objectKeys(e);
            return (this._cached = { shape: e, keys: t }), this._cached;
          }
          _parse(e) {
            if (this._getType(e) !== v.object) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.object,
                  received: t.parsedType,
                }),
                S
              );
            }
            let { status: t, ctx: n } = this._processInputParams(e),
              { shape: r, keys: i } = this._getCached(),
              s = [];
            if (
              !(
                this._def.catchall instanceof eu &&
                "strip" === this._def.unknownKeys
              )
            )
              for (let e in n.data) i.includes(e) || s.push(e);
            let o = [];
            for (let e of i) {
              let t = r[e],
                i = n.data[e];
              o.push({
                key: { status: "valid", value: e },
                value: t._parse(new P(n, i, n.path, e)),
                alwaysSet: e in n.data,
              });
            }
            if (this._def.catchall instanceof eu) {
              let e = this._def.unknownKeys;
              if ("passthrough" === e)
                for (let e of s)
                  o.push({
                    key: { status: "valid", value: e },
                    value: { status: "valid", value: n.data[e] },
                  });
              else if ("strict" === e)
                s.length > 0 &&
                  (O(n, { code: x.unrecognized_keys, keys: s }), t.dirty());
              else if ("strip" === e);
              else
                throw Error(
                  "Internal ZodObject error: invalid unknownKeys value.",
                );
            } else {
              let e = this._def.catchall;
              for (let t of s) {
                let r = n.data[t];
                o.push({
                  key: { status: "valid", value: t },
                  value: e._parse(new P(n, r, n.path, t)),
                  alwaysSet: t in n.data,
                });
              }
            }
            return n.common.async
              ? Promise.resolve()
                  .then(async () => {
                    let e = [];
                    for (let t of o) {
                      let n = await t.key,
                        r = await t.value;
                      e.push({ key: n, value: r, alwaysSet: t.alwaysSet });
                    }
                    return e;
                  })
                  .then((e) => T.mergeObjectSync(t, e))
              : T.mergeObjectSync(t, o);
          }
          get shape() {
            return this._def.shape();
          }
          strict(e) {
            return (
              o.errToObj,
              new ep({
                ...this._def,
                unknownKeys: "strict",
                ...(void 0 !== e
                  ? {
                      errorMap: (t, n) => {
                        let r =
                          this._def.errorMap?.(t, n).message ?? n.defaultError;
                        return "unrecognized_keys" === t.code
                          ? { message: o.errToObj(e).message ?? r }
                          : { message: r };
                      },
                    }
                  : {}),
              })
            );
          }
          strip() {
            return new ep({ ...this._def, unknownKeys: "strip" });
          }
          passthrough() {
            return new ep({ ...this._def, unknownKeys: "passthrough" });
          }
          extend(e) {
            return new ep({
              ...this._def,
              shape: () => ({ ...this._def.shape(), ...e }),
            });
          }
          merge(e) {
            return new ep({
              unknownKeys: e._def.unknownKeys,
              catchall: e._def.catchall,
              shape: () => ({ ...this._def.shape(), ...e._def.shape() }),
              typeName: a.ZodObject,
            });
          }
          setKey(e, t) {
            return this.augment({ [e]: t });
          }
          catchall(e) {
            return new ep({ ...this._def, catchall: e });
          }
          pick(e) {
            let t = {};
            for (let n of i.objectKeys(e))
              e[n] && this.shape[n] && (t[n] = this.shape[n]);
            return new ep({ ...this._def, shape: () => t });
          }
          omit(e) {
            let t = {};
            for (let n of i.objectKeys(this.shape))
              e[n] || (t[n] = this.shape[n]);
            return new ep({ ...this._def, shape: () => t });
          }
          deepPartial() {
            return (function e(t) {
              if (t instanceof ep) {
                let n = {};
                for (let r in t.shape) {
                  let i = t.shape[r];
                  n[r] = eN.create(e(i));
                }
                return new ep({ ...t._def, shape: () => n });
              }
              if (t instanceof eh)
                return new eh({ ...t._def, type: e(t.element) });
              if (t instanceof eN) return eN.create(e(t.unwrap()));
              if (t instanceof eI) return eI.create(e(t.unwrap()));
              if (t instanceof ev) return ev.create(t.items.map((t) => e(t)));
              else return t;
            })(this);
          }
          partial(e) {
            let t = {};
            for (let n of i.objectKeys(this.shape)) {
              let r = this.shape[n];
              e && !e[n] ? (t[n] = r) : (t[n] = r.optional());
            }
            return new ep({ ...this._def, shape: () => t });
          }
          required(e) {
            let t = {};
            for (let n of i.objectKeys(this.shape))
              if (e && !e[n]) t[n] = this.shape[n];
              else {
                let e = this.shape[n];
                for (; e instanceof eN; ) e = e._def.innerType;
                t[n] = e;
              }
            return new ep({ ...this._def, shape: () => t });
          }
          keyof() {
            return eT(i.objectKeys(this.shape));
          }
        }
        (ep.create = (e, t) =>
          new ep({
            shape: () => e,
            unknownKeys: "strip",
            catchall: eu.create(),
            typeName: a.ZodObject,
            ...M(t),
          })),
          (ep.strictCreate = (e, t) =>
            new ep({
              shape: () => e,
              unknownKeys: "strict",
              catchall: eu.create(),
              typeName: a.ZodObject,
              ...M(t),
            })),
          (ep.lazycreate = (e, t) =>
            new ep({
              shape: e,
              unknownKeys: "strip",
              catchall: eu.create(),
              typeName: a.ZodObject,
              ...M(t),
            }));
        class ef extends L {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = this._def.options;
            if (t.common.async)
              return Promise.all(
                n.map(async (e) => {
                  let n = {
                    ...t,
                    common: { ...t.common, issues: [] },
                    parent: null,
                  };
                  return {
                    result: await e._parseAsync({
                      data: t.data,
                      path: t.path,
                      parent: n,
                    }),
                    ctx: n,
                  };
                }),
              ).then(function (e) {
                for (let t of e)
                  if ("valid" === t.result.status) return t.result;
                for (let n of e)
                  if ("dirty" === n.result.status)
                    return (
                      t.common.issues.push(...n.ctx.common.issues), n.result
                    );
                let n = e.map((e) => new k(e.ctx.common.issues));
                return O(t, { code: x.invalid_union, unionErrors: n }), S;
              });
            {
              let e,
                r = [];
              for (let i of n) {
                let n = {
                    ...t,
                    common: { ...t.common, issues: [] },
                    parent: null,
                  },
                  s = i._parseSync({ data: t.data, path: t.path, parent: n });
                if ("valid" === s.status) return s;
                "dirty" !== s.status || e || (e = { result: s, ctx: n }),
                  n.common.issues.length && r.push(n.common.issues);
              }
              if (e)
                return t.common.issues.push(...e.ctx.common.issues), e.result;
              let i = r.map((e) => new k(e));
              return O(t, { code: x.invalid_union, unionErrors: i }), S;
            }
          }
          get options() {
            return this._def.options;
          }
        }
        ef.create = (e, t) =>
          new ef({ options: e, typeName: a.ZodUnion, ...M(t) });
        let em = (e) => {
          if (e instanceof e_) return em(e.schema);
          if (e instanceof eA) return em(e.innerType());
          if (e instanceof eO) return [e.value];
          if (e instanceof eS) return e.options;
          if (e instanceof eE) return i.objectValues(e.enum);
          else if (e instanceof eD) return em(e._def.innerType);
          else if (e instanceof eo) return [void 0];
          else if (e instanceof ea) return [null];
          else if (e instanceof eN) return [void 0, ...em(e.unwrap())];
          else if (e instanceof eI) return [null, ...em(e.unwrap())];
          else if (e instanceof eM) return em(e.unwrap());
          else if (e instanceof ej) return em(e.unwrap());
          else if (e instanceof eP) return em(e._def.innerType);
          else return [];
        };
        class eg extends L {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            if (t.parsedType !== v.object)
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.object,
                  received: t.parsedType,
                }),
                S
              );
            let n = this.discriminator,
              r = t.data[n],
              i = this.optionsMap.get(r);
            return i
              ? t.common.async
                ? i._parseAsync({ data: t.data, path: t.path, parent: t })
                : i._parseSync({ data: t.data, path: t.path, parent: t })
              : (O(t, {
                  code: x.invalid_union_discriminator,
                  options: Array.from(this.optionsMap.keys()),
                  path: [n],
                }),
                S);
          }
          get discriminator() {
            return this._def.discriminator;
          }
          get options() {
            return this._def.options;
          }
          get optionsMap() {
            return this._def.optionsMap;
          }
          static create(e, t, n) {
            let r = new Map();
            for (let n of t) {
              let t = em(n.shape[e]);
              if (!t.length)
                throw Error(
                  `A discriminator value for key \`${e}\` could not be extracted from all schema options`,
                );
              for (let i of t) {
                if (r.has(i))
                  throw Error(
                    `Discriminator property ${String(e)} has duplicate value ${String(i)}`,
                  );
                r.set(i, n);
              }
            }
            return new eg({
              typeName: a.ZodDiscriminatedUnion,
              discriminator: e,
              options: t,
              optionsMap: r,
              ...M(n),
            });
          }
        }
        class ey extends L {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e),
              r = (e, r) => {
                if (A(e) || A(r)) return S;
                let s = (function e(t, n) {
                  let r = b(t),
                    s = b(n);
                  if (t === n) return { valid: !0, data: t };
                  if (r === v.object && s === v.object) {
                    let r = i.objectKeys(n),
                      s = i.objectKeys(t).filter((e) => -1 !== r.indexOf(e)),
                      o = { ...t, ...n };
                    for (let r of s) {
                      let i = e(t[r], n[r]);
                      if (!i.valid) return { valid: !1 };
                      o[r] = i.data;
                    }
                    return { valid: !0, data: o };
                  }
                  if (r === v.array && s === v.array) {
                    if (t.length !== n.length) return { valid: !1 };
                    let r = [];
                    for (let i = 0; i < t.length; i++) {
                      let s = e(t[i], n[i]);
                      if (!s.valid) return { valid: !1 };
                      r.push(s.data);
                    }
                    return { valid: !0, data: r };
                  }
                  if (r === v.date && s === v.date && +t == +n)
                    return { valid: !0, data: t };
                  return { valid: !1 };
                })(e.value, r.value);
                return s.valid
                  ? ((N(e) || N(r)) && t.dirty(),
                    { status: t.value, value: s.data })
                  : (O(n, { code: x.invalid_intersection_types }), S);
              };
            return n.common.async
              ? Promise.all([
                  this._def.left._parseAsync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                  this._def.right._parseAsync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                ]).then(([e, t]) => r(e, t))
              : r(
                  this._def.left._parseSync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                  this._def.right._parseSync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                );
          }
        }
        ey.create = (e, t, n) =>
          new ey({ left: e, right: t, typeName: a.ZodIntersection, ...M(n) });
        class ev extends L {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== v.array)
              return (
                O(n, {
                  code: x.invalid_type,
                  expected: v.array,
                  received: n.parsedType,
                }),
                S
              );
            if (n.data.length < this._def.items.length)
              return (
                O(n, {
                  code: x.too_small,
                  minimum: this._def.items.length,
                  inclusive: !0,
                  exact: !1,
                  type: "array",
                }),
                S
              );
            !this._def.rest &&
              n.data.length > this._def.items.length &&
              (O(n, {
                code: x.too_big,
                maximum: this._def.items.length,
                inclusive: !0,
                exact: !1,
                type: "array",
              }),
              t.dirty());
            let r = [...n.data]
              .map((e, t) => {
                let r = this._def.items[t] || this._def.rest;
                return r ? r._parse(new P(n, e, n.path, t)) : null;
              })
              .filter((e) => !!e);
            return n.common.async
              ? Promise.all(r).then((e) => T.mergeArray(t, e))
              : T.mergeArray(t, r);
          }
          get items() {
            return this._def.items;
          }
          rest(e) {
            return new ev({ ...this._def, rest: e });
          }
        }
        ev.create = (e, t) => {
          if (!Array.isArray(e))
            throw Error(
              "You must pass an array of schemas to z.tuple([ ... ])",
            );
          return new ev({
            items: e,
            typeName: a.ZodTuple,
            rest: null,
            ...M(t),
          });
        };
        class eb extends L {
          get keySchema() {
            return this._def.keyType;
          }
          get valueSchema() {
            return this._def.valueType;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== v.object)
              return (
                O(n, {
                  code: x.invalid_type,
                  expected: v.object,
                  received: n.parsedType,
                }),
                S
              );
            let r = [],
              i = this._def.keyType,
              s = this._def.valueType;
            for (let e in n.data)
              r.push({
                key: i._parse(new P(n, e, n.path, e)),
                value: s._parse(new P(n, n.data[e], n.path, e)),
                alwaysSet: e in n.data,
              });
            return n.common.async
              ? T.mergeObjectAsync(t, r)
              : T.mergeObjectSync(t, r);
          }
          get element() {
            return this._def.valueType;
          }
          static create(e, t, n) {
            return new eb(
              t instanceof L
                ? { keyType: e, valueType: t, typeName: a.ZodRecord, ...M(n) }
                : {
                    keyType: ee.create(),
                    valueType: e,
                    typeName: a.ZodRecord,
                    ...M(t),
                  },
            );
          }
        }
        class ex extends L {
          get keySchema() {
            return this._def.keyType;
          }
          get valueSchema() {
            return this._def.valueType;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== v.map)
              return (
                O(n, {
                  code: x.invalid_type,
                  expected: v.map,
                  received: n.parsedType,
                }),
                S
              );
            let r = this._def.keyType,
              i = this._def.valueType,
              s = [...n.data.entries()].map(([e, t], s) => ({
                key: r._parse(new P(n, e, n.path, [s, "key"])),
                value: i._parse(new P(n, t, n.path, [s, "value"])),
              }));
            if (n.common.async) {
              let e = new Map();
              return Promise.resolve().then(async () => {
                for (let n of s) {
                  let r = await n.key,
                    i = await n.value;
                  if ("aborted" === r.status || "aborted" === i.status)
                    return S;
                  ("dirty" === r.status || "dirty" === i.status) && t.dirty(),
                    e.set(r.value, i.value);
                }
                return { status: t.value, value: e };
              });
            }
            {
              let e = new Map();
              for (let n of s) {
                let r = n.key,
                  i = n.value;
                if ("aborted" === r.status || "aborted" === i.status) return S;
                ("dirty" === r.status || "dirty" === i.status) && t.dirty(),
                  e.set(r.value, i.value);
              }
              return { status: t.value, value: e };
            }
          }
        }
        ex.create = (e, t, n) =>
          new ex({ valueType: t, keyType: e, typeName: a.ZodMap, ...M(n) });
        class ek extends L {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== v.set)
              return (
                O(n, {
                  code: x.invalid_type,
                  expected: v.set,
                  received: n.parsedType,
                }),
                S
              );
            let r = this._def;
            null !== r.minSize &&
              n.data.size < r.minSize.value &&
              (O(n, {
                code: x.too_small,
                minimum: r.minSize.value,
                type: "set",
                inclusive: !0,
                exact: !1,
                message: r.minSize.message,
              }),
              t.dirty()),
              null !== r.maxSize &&
                n.data.size > r.maxSize.value &&
                (O(n, {
                  code: x.too_big,
                  maximum: r.maxSize.value,
                  type: "set",
                  inclusive: !0,
                  exact: !1,
                  message: r.maxSize.message,
                }),
                t.dirty());
            let i = this._def.valueType;
            function s(e) {
              let n = new Set();
              for (let r of e) {
                if ("aborted" === r.status) return S;
                "dirty" === r.status && t.dirty(), n.add(r.value);
              }
              return { status: t.value, value: n };
            }
            let o = [...n.data.values()].map((e, t) =>
              i._parse(new P(n, e, n.path, t)),
            );
            return n.common.async ? Promise.all(o).then((e) => s(e)) : s(o);
          }
          min(e, t) {
            return new ek({
              ...this._def,
              minSize: { value: e, message: o.toString(t) },
            });
          }
          max(e, t) {
            return new ek({
              ...this._def,
              maxSize: { value: e, message: o.toString(t) },
            });
          }
          size(e, t) {
            return this.min(e, t).max(e, t);
          }
          nonempty(e) {
            return this.min(1, e);
          }
        }
        ek.create = (e, t) =>
          new ek({
            valueType: e,
            minSize: null,
            maxSize: null,
            typeName: a.ZodSet,
            ...M(t),
          });
        class ew extends L {
          constructor() {
            super(...arguments), (this.validate = this.implement);
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            if (t.parsedType !== v.function)
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.function,
                  received: t.parsedType,
                }),
                S
              );
            function n(e, n) {
              return _({
                data: e,
                path: t.path,
                errorMaps: [
                  t.common.contextualErrorMap,
                  t.schemaErrorMap,
                  w,
                  w,
                ].filter((e) => !!e),
                issueData: { code: x.invalid_arguments, argumentsError: n },
              });
            }
            function r(e, n) {
              return _({
                data: e,
                path: t.path,
                errorMaps: [
                  t.common.contextualErrorMap,
                  t.schemaErrorMap,
                  w,
                  w,
                ].filter((e) => !!e),
                issueData: { code: x.invalid_return_type, returnTypeError: n },
              });
            }
            let i = { errorMap: t.common.contextualErrorMap },
              s = t.data;
            if (this._def.returns instanceof eC) {
              let e = this;
              return C(async function (...t) {
                let o = new k([]),
                  a = await e._def.args.parseAsync(t, i).catch((e) => {
                    throw (o.addIssue(n(t, e)), o);
                  }),
                  l = await Reflect.apply(s, this, a);
                return await e._def.returns._def.type
                  .parseAsync(l, i)
                  .catch((e) => {
                    throw (o.addIssue(r(l, e)), o);
                  });
              });
            }
            {
              let e = this;
              return C(function (...t) {
                let o = e._def.args.safeParse(t, i);
                if (!o.success) throw new k([n(t, o.error)]);
                let a = Reflect.apply(s, this, o.data),
                  l = e._def.returns.safeParse(a, i);
                if (!l.success) throw new k([r(a, l.error)]);
                return l.data;
              });
            }
          }
          parameters() {
            return this._def.args;
          }
          returnType() {
            return this._def.returns;
          }
          args(...e) {
            return new ew({
              ...this._def,
              args: ev.create(e).rest(ec.create()),
            });
          }
          returns(e) {
            return new ew({ ...this._def, returns: e });
          }
          implement(e) {
            return this.parse(e);
          }
          strictImplement(e) {
            return this.parse(e);
          }
          static create(e, t, n) {
            return new ew({
              args: e || ev.create([]).rest(ec.create()),
              returns: t || ec.create(),
              typeName: a.ZodFunction,
              ...M(n),
            });
          }
        }
        class e_ extends L {
          get schema() {
            return this._def.getter();
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            return this._def
              .getter()
              ._parse({ data: t.data, path: t.path, parent: t });
          }
        }
        e_.create = (e, t) =>
          new e_({ getter: e, typeName: a.ZodLazy, ...M(t) });
        class eO extends L {
          _parse(e) {
            if (e.data !== this._def.value) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  received: t.data,
                  code: x.invalid_literal,
                  expected: this._def.value,
                }),
                S
              );
            }
            return { status: "valid", value: e.data };
          }
          get value() {
            return this._def.value;
          }
        }
        function eT(e, t) {
          return new eS({ values: e, typeName: a.ZodEnum, ...M(t) });
        }
        eO.create = (e, t) =>
          new eO({ value: e, typeName: a.ZodLiteral, ...M(t) });
        class eS extends L {
          _parse(e) {
            if ("string" != typeof e.data) {
              let t = this._getOrReturnCtx(e),
                n = this._def.values;
              return (
                O(t, {
                  expected: i.joinValues(n),
                  received: t.parsedType,
                  code: x.invalid_type,
                }),
                S
              );
            }
            if (
              (this._cache || (this._cache = new Set(this._def.values)),
              !this._cache.has(e.data))
            ) {
              let t = this._getOrReturnCtx(e),
                n = this._def.values;
              return (
                O(t, {
                  received: t.data,
                  code: x.invalid_enum_value,
                  options: n,
                }),
                S
              );
            }
            return C(e.data);
          }
          get options() {
            return this._def.values;
          }
          get enum() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          get Values() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          get Enum() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          extract(e, t = this._def) {
            return eS.create(e, { ...this._def, ...t });
          }
          exclude(e, t = this._def) {
            return eS.create(
              this.options.filter((t) => !e.includes(t)),
              { ...this._def, ...t },
            );
          }
        }
        eS.create = eT;
        class eE extends L {
          _parse(e) {
            let t = i.getValidEnumValues(this._def.values),
              n = this._getOrReturnCtx(e);
            if (n.parsedType !== v.string && n.parsedType !== v.number) {
              let e = i.objectValues(t);
              return (
                O(n, {
                  expected: i.joinValues(e),
                  received: n.parsedType,
                  code: x.invalid_type,
                }),
                S
              );
            }
            if (
              (this._cache ||
                (this._cache = new Set(i.getValidEnumValues(this._def.values))),
              !this._cache.has(e.data))
            ) {
              let e = i.objectValues(t);
              return (
                O(n, {
                  received: n.data,
                  code: x.invalid_enum_value,
                  options: e,
                }),
                S
              );
            }
            return C(e.data);
          }
          get enum() {
            return this._def.values;
          }
        }
        eE.create = (e, t) =>
          new eE({ values: e, typeName: a.ZodNativeEnum, ...M(t) });
        class eC extends L {
          unwrap() {
            return this._def.type;
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            return t.parsedType !== v.promise && !1 === t.common.async
              ? (O(t, {
                  code: x.invalid_type,
                  expected: v.promise,
                  received: t.parsedType,
                }),
                S)
              : C(
                  (t.parsedType === v.promise
                    ? t.data
                    : Promise.resolve(t.data)
                  ).then((e) =>
                    this._def.type.parseAsync(e, {
                      path: t.path,
                      errorMap: t.common.contextualErrorMap,
                    }),
                  ),
                );
          }
        }
        eC.create = (e, t) =>
          new eC({ type: e, typeName: a.ZodPromise, ...M(t) });
        class eA extends L {
          innerType() {
            return this._def.schema;
          }
          sourceType() {
            return this._def.schema._def.typeName === a.ZodEffects
              ? this._def.schema.sourceType()
              : this._def.schema;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e),
              r = this._def.effect || null,
              s = {
                addIssue: (e) => {
                  O(n, e), e.fatal ? t.abort() : t.dirty();
                },
                get path() {
                  return n.path;
                },
              };
            if (((s.addIssue = s.addIssue.bind(s)), "preprocess" === r.type)) {
              let e = r.transform(n.data, s);
              if (n.common.async)
                return Promise.resolve(e).then(async (e) => {
                  if ("aborted" === t.value) return S;
                  let r = await this._def.schema._parseAsync({
                    data: e,
                    path: n.path,
                    parent: n,
                  });
                  return "aborted" === r.status
                    ? S
                    : "dirty" === r.status || "dirty" === t.value
                      ? E(r.value)
                      : r;
                });
              {
                if ("aborted" === t.value) return S;
                let r = this._def.schema._parseSync({
                  data: e,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === r.status
                  ? S
                  : "dirty" === r.status || "dirty" === t.value
                    ? E(r.value)
                    : r;
              }
            }
            if ("refinement" === r.type) {
              let e = (e) => {
                let t = r.refinement(e, s);
                if (n.common.async) return Promise.resolve(t);
                if (t instanceof Promise)
                  throw Error(
                    "Async refinement encountered during synchronous parse operation. Use .parseAsync instead.",
                  );
                return e;
              };
              if (!1 !== n.common.async)
                return this._def.schema
                  ._parseAsync({ data: n.data, path: n.path, parent: n })
                  .then((n) =>
                    "aborted" === n.status
                      ? S
                      : ("dirty" === n.status && t.dirty(),
                        e(n.value).then(() => ({
                          status: t.value,
                          value: n.value,
                        }))),
                  );
              {
                let r = this._def.schema._parseSync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === r.status
                  ? S
                  : ("dirty" === r.status && t.dirty(),
                    e(r.value),
                    { status: t.value, value: r.value });
              }
            }
            if ("transform" === r.type)
              if (!1 !== n.common.async)
                return this._def.schema
                  ._parseAsync({ data: n.data, path: n.path, parent: n })
                  .then((e) =>
                    I(e)
                      ? Promise.resolve(r.transform(e.value, s)).then((e) => ({
                          status: t.value,
                          value: e,
                        }))
                      : S,
                  );
              else {
                let e = this._def.schema._parseSync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                if (!I(e)) return S;
                let i = r.transform(e.value, s);
                if (i instanceof Promise)
                  throw Error(
                    "Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.",
                  );
                return { status: t.value, value: i };
              }
            i.assertNever(r);
          }
        }
        (eA.create = (e, t, n) =>
          new eA({ schema: e, typeName: a.ZodEffects, effect: t, ...M(n) })),
          (eA.createWithPreprocess = (e, t, n) =>
            new eA({
              schema: t,
              effect: { type: "preprocess", transform: e },
              typeName: a.ZodEffects,
              ...M(n),
            }));
        class eN extends L {
          _parse(e) {
            return this._getType(e) === v.undefined
              ? C(void 0)
              : this._def.innerType._parse(e);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        eN.create = (e, t) =>
          new eN({ innerType: e, typeName: a.ZodOptional, ...M(t) });
        class eI extends L {
          _parse(e) {
            return this._getType(e) === v.null
              ? C(null)
              : this._def.innerType._parse(e);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        eI.create = (e, t) =>
          new eI({ innerType: e, typeName: a.ZodNullable, ...M(t) });
        class eD extends L {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = t.data;
            return (
              t.parsedType === v.undefined && (n = this._def.defaultValue()),
              this._def.innerType._parse({ data: n, path: t.path, parent: t })
            );
          }
          removeDefault() {
            return this._def.innerType;
          }
        }
        eD.create = (e, t) =>
          new eD({
            innerType: e,
            typeName: a.ZodDefault,
            defaultValue:
              "function" == typeof t.default ? t.default : () => t.default,
            ...M(t),
          });
        class eP extends L {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = { ...t, common: { ...t.common, issues: [] } },
              r = this._def.innerType._parse({
                data: n.data,
                path: n.path,
                parent: { ...n },
              });
            return D(r)
              ? r.then((e) => ({
                  status: "valid",
                  value:
                    "valid" === e.status
                      ? e.value
                      : this._def.catchValue({
                          get error() {
                            return new k(n.common.issues);
                          },
                          input: n.data,
                        }),
                }))
              : {
                  status: "valid",
                  value:
                    "valid" === r.status
                      ? r.value
                      : this._def.catchValue({
                          get error() {
                            return new k(n.common.issues);
                          },
                          input: n.data,
                        }),
                };
          }
          removeCatch() {
            return this._def.innerType;
          }
        }
        eP.create = (e, t) =>
          new eP({
            innerType: e,
            typeName: a.ZodCatch,
            catchValue: "function" == typeof t.catch ? t.catch : () => t.catch,
            ...M(t),
          });
        class eR extends L {
          _parse(e) {
            if (this._getType(e) !== v.nan) {
              let t = this._getOrReturnCtx(e);
              return (
                O(t, {
                  code: x.invalid_type,
                  expected: v.nan,
                  received: t.parsedType,
                }),
                S
              );
            }
            return { status: "valid", value: e.data };
          }
        }
        (eR.create = (e) => new eR({ typeName: a.ZodNaN, ...M(e) })),
          Symbol("zod_brand");
        class eM extends L {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = t.data;
            return this._def.type._parse({ data: n, path: t.path, parent: t });
          }
          unwrap() {
            return this._def.type;
          }
        }
        class eL extends L {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.common.async)
              return (async () => {
                let e = await this._def.in._parseAsync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === e.status
                  ? S
                  : "dirty" === e.status
                    ? (t.dirty(), E(e.value))
                    : this._def.out._parseAsync({
                        data: e.value,
                        path: n.path,
                        parent: n,
                      });
              })();
            {
              let e = this._def.in._parseSync({
                data: n.data,
                path: n.path,
                parent: n,
              });
              return "aborted" === e.status
                ? S
                : "dirty" === e.status
                  ? (t.dirty(), { status: "dirty", value: e.value })
                  : this._def.out._parseSync({
                      data: e.value,
                      path: n.path,
                      parent: n,
                    });
            }
          }
          static create(e, t) {
            return new eL({ in: e, out: t, typeName: a.ZodPipeline });
          }
        }
        class ej extends L {
          _parse(e) {
            let t = this._def.innerType._parse(e),
              n = (e) => (I(e) && (e.value = Object.freeze(e.value)), e);
            return D(t) ? t.then((e) => n(e)) : n(t);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        (ej.create = (e, t) =>
          new ej({ innerType: e, typeName: a.ZodReadonly, ...M(t) })),
          ep.lazycreate,
          (function (e) {
            (e.ZodString = "ZodString"),
              (e.ZodNumber = "ZodNumber"),
              (e.ZodNaN = "ZodNaN"),
              (e.ZodBigInt = "ZodBigInt"),
              (e.ZodBoolean = "ZodBoolean"),
              (e.ZodDate = "ZodDate"),
              (e.ZodSymbol = "ZodSymbol"),
              (e.ZodUndefined = "ZodUndefined"),
              (e.ZodNull = "ZodNull"),
              (e.ZodAny = "ZodAny"),
              (e.ZodUnknown = "ZodUnknown"),
              (e.ZodNever = "ZodNever"),
              (e.ZodVoid = "ZodVoid"),
              (e.ZodArray = "ZodArray"),
              (e.ZodObject = "ZodObject"),
              (e.ZodUnion = "ZodUnion"),
              (e.ZodDiscriminatedUnion = "ZodDiscriminatedUnion"),
              (e.ZodIntersection = "ZodIntersection"),
              (e.ZodTuple = "ZodTuple"),
              (e.ZodRecord = "ZodRecord"),
              (e.ZodMap = "ZodMap"),
              (e.ZodSet = "ZodSet"),
              (e.ZodFunction = "ZodFunction"),
              (e.ZodLazy = "ZodLazy"),
              (e.ZodLiteral = "ZodLiteral"),
              (e.ZodEnum = "ZodEnum"),
              (e.ZodEffects = "ZodEffects"),
              (e.ZodNativeEnum = "ZodNativeEnum"),
              (e.ZodOptional = "ZodOptional"),
              (e.ZodNullable = "ZodNullable"),
              (e.ZodDefault = "ZodDefault"),
              (e.ZodCatch = "ZodCatch"),
              (e.ZodPromise = "ZodPromise"),
              (e.ZodBranded = "ZodBranded"),
              (e.ZodPipeline = "ZodPipeline"),
              (e.ZodReadonly = "ZodReadonly");
          })(a || (a = {}));
        let eF = ee.create;
        et.create,
          eR.create,
          en.create,
          er.create,
          ei.create,
          es.create,
          eo.create,
          ea.create,
          el.create,
          ec.create,
          eu.create,
          ed.create;
        let eB = eh.create,
          ez = ep.create;
        ep.strictCreate,
          ef.create,
          eg.create,
          ey.create,
          ev.create,
          eb.create,
          ex.create,
          ek.create,
          ew.create,
          e_.create,
          eO.create;
        let e$ = eS.create;
        eE.create,
          eC.create,
          eA.create,
          eN.create,
          eI.create,
          eA.createWithPreprocess,
          eL.create;
        let eq = (0, l.rL)("user_role", ["user", "admin", "client"]),
          eU = (0, l.rL)("case_status", [
            "draft",
            "submitted",
            "in_review",
            "approved",
            "rejected",
            "completed",
          ]),
          eH = (0, c.cJ)("profiles", {
            id: (0, u.uR)("id").primaryKey(),
            firstName: (0, d.Qq)("first_name"),
            lastName: (0, d.Qq)("last_name"),
            avatarUrl: (0, d.Qq)("avatar_url"),
            bio: (0, d.Qq)("bio"),
            timezone: (0, d.Qq)("timezone"),
            language: (0, d.Qq)("language").default("en"),
            countryOfResidence: (0, d.Qq)("country_of_residence"),
            countryOfInterest: (0, d.Qq)("country_of_interest"),
            countryOfCitizenship: (0, d.Qq)("country_of_citizenship"),
            isAdmin: (0, h.zM)("is_admin").default(!1),
            visaType: (0, d.Qq)("visa_type"),
            immigrationGoals: (0, d.Qq)("immigration_goals"),
            role: eq("role").default("client"),
            createdAt: (0, p.vE)("created_at", {
              withTimezone: !0,
            }).defaultNow(),
            updatedAt: (0, p.vE)("updated_at", {
              withTimezone: !0,
            }).defaultNow(),
          }),
          eQ = (0, c.cJ)("cases", {
            id: (0, u.uR)("id").primaryKey().defaultRandom(),
            userId: (0, u.uR)("user_id")
              .notNull()
              .references(() => eH.id, { onDelete: "cascade" }),
            title: (0, d.Qq)("title").notNull(),
            description: (0, d.Qq)("description"),
            status: eU("status").notNull().default("draft"),
            metadata: (0, f.Pq)("metadata").default("{}"),
            createdAt: (0, p.vE)("created_at", {
              withTimezone: !0,
            }).defaultNow(),
            updatedAt: (0, p.vE)("updated_at", {
              withTimezone: !0,
            }).defaultNow(),
          }),
          eV = (0, c.cJ)("chat_sessions", {
            id: (0, u.uR)("id").primaryKey().defaultRandom(),
            userId: (0, u.uR)("user_id")
              .notNull()
              .references(() => eH.id, { onDelete: "cascade" }),
            title: (0, d.Qq)("title"),
            context: (0, d.Qq)("context"),
            prompt: (0, d.Qq)("prompt"),
            model: (0, d.Qq)("model"),
            systemPrompt: (0, d.Qq)("system_prompt"),
            agentConfig: (0, f.Pq)("agent_config").default("{}"),
            caseId: (0, u.uR)("case_id").references(() => eQ.id, {
              onDelete: "set null",
            }),
            lastMessageAt: (0, p.vE)("last_message_at", {
              withTimezone: !0,
            }).defaultNow(),
            metadata: (0, f.Pq)("metadata").default("{}"),
            visibility: (0, m.yf)("visibility", {
              enum: ["private", "public", "team"],
            })
              .notNull()
              .default("private"),
            createdAt: (0, p.vE)("created_at", { withTimezone: !0 })
              .notNull()
              .defaultNow(),
            updatedAt: (0, p.vE)("updated_at", { withTimezone: !0 })
              .notNull()
              .defaultNow(),
          }),
          eW = (0, c.cJ)("chat_messages", {
            id: (0, u.uR)("id").primaryKey().defaultRandom(),
            sessionId: (0, u.uR)("session_id")
              .notNull()
              .references(() => eV.id, { onDelete: "cascade" }),
            userId: (0, u.uR)("user_id").references(() => eH.id, {
              onDelete: "set null",
            }),
            role: (0, m.yf)("role", {
              enum: ["user", "assistant", "system", "tool", "function"],
            }).notNull(),
            content: (0, d.Qq)("content").notNull(),
            sources: (0, f.Pq)("sources"),
            toolCalls: (0, f.Pq)("tool_calls"),
            metadata: (0, f.Pq)("metadata").default("{}"),
            tokens: (0, g.nd)("tokens"),
            createdAt: (0, p.vE)("created_at", { withTimezone: !0 })
              .notNull()
              .defaultNow(),
            updatedAt: (0, p.vE)("updated_at", { withTimezone: !0 })
              .notNull()
              .defaultNow(),
          });
        (0, c.cJ)(
          "chat_message_votes",
          {
            messageId: (0, u.uR)("message_id")
              .notNull()
              .references(() => eW.id, { onDelete: "cascade" }),
            userId: (0, u.uR)("user_id")
              .notNull()
              .references(() => eH.id, { onDelete: "cascade" }),
            isUpvoted: (0, h.zM)("is_upvoted").notNull().default(!0),
            createdAt: (0, p.vE)("created_at", {
              withTimezone: !0,
            }).defaultNow(),
          },
          (e) => ({ pk: (0, y.ie)({ columns: [e.messageId, e.userId] }) }),
        );
        let eZ = (0, c.cJ)("artifacts", {
          id: (0, u.uR)("id").primaryKey().defaultRandom(),
          userId: (0, u.uR)("user_id").references(() => eH.id, {
            onDelete: "cascade",
          }),
          title: (0, d.Qq)("title").notNull(),
          kind: (0, d.Qq)("kind").notNull(),
          content: (0, d.Qq)("content").notNull(),
          createdAt: (0, p.vE)("created_at", { withTimezone: !0 })
            .notNull()
            .defaultNow(),
          updatedAt: (0, p.vE)("updated_at", { withTimezone: !0 })
            .notNull()
            .defaultNow(),
        });
        (0, c.cJ)("suggestions", {
          id: (0, u.uR)("id").primaryKey().defaultRandom(),
          userId: (0, u.uR)("user_id").references(() => eH.id, {
            onDelete: "cascade",
          }),
          documentId: (0, u.uR)("document_id")
            .notNull()
            .references(() => eZ.id, { onDelete: "cascade" }),
          title: (0, d.Qq)("title"),
          fromText: (0, d.Qq)("from_text"),
          toText: (0, d.Qq)("to_text"),
          createdAt: (0, p.vE)("created_at", { withTimezone: !0 })
            .notNull()
            .defaultNow(),
          updatedAt: (0, p.vE)("updated_at", { withTimezone: !0 })
            .notNull()
            .defaultNow(),
        }),
          (0, c.cJ)("streams", {
            id: (0, u.uR)("id").primaryKey().defaultRandom(),
            chatId: (0, u.uR)("chat_id").references(() => eV.id, {
              onDelete: "cascade",
            }),
            createdAt: (0, p.vE)("created_at", { withTimezone: !0 })
              .notNull()
              .defaultNow(),
          }),
          (0, c.cJ)("chat_attachments", {
            id: (0, u.uR)("id").primaryKey().defaultRandom(),
            chatId: (0, u.uR)("chat_id")
              .notNull()
              .references(() => eV.id, { onDelete: "cascade" }),
            messageId: (0, u.uR)("message_id")
              .notNull()
              .references(() => eW.id, { onDelete: "cascade" }),
            userId: (0, u.uR)("user_id")
              .notNull()
              .references(() => eH.id, { onDelete: "cascade" }),
            fileName: (0, d.Qq)("file_name").notNull(),
            fileType: (0, d.Qq)("file_type").notNull(),
            fileSize: (0, g.nd)("file_size").notNull(),
            filePath: (0, d.Qq)("file_path").notNull(),
            createdAt: (0, p.vE)("created_at", { withTimezone: !0 })
              .notNull()
              .defaultNow(),
          });
        let eG = (0, c.cJ)("legacy_chats", {
            id: (0, u.uR)("id").primaryKey().notNull().defaultRandom(),
            createdAt: (0, p.vE)("created_at").notNull(),
            userId: (0, u.uR)("user_id")
              .notNull()
              .references(() => eH.id, { onDelete: "cascade" }),
            title: (0, d.Qq)("title").notNull(),
            visibility: (0, m.yf)("visibility").default("private").notNull(),
          }),
          eY = (0, c.cJ)("legacy_messages", {
            id: (0, u.uR)("id").primaryKey().notNull().defaultRandom(),
            chatId: (0, u.uR)("chat_id")
              .notNull()
              .references(() => eG.id, { onDelete: "cascade" }),
            role: (0, m.yf)("role").notNull(),
            parts: (0, f.Pq)("parts").notNull(),
            attachments: (0, f.Pq)("attachments").notNull(),
            createdAt: (0, p.vE)("created_at").notNull(),
          }),
          eK = (0, c.cJ)("legacy_messages_v2", {
            id: (0, u.uR)("id").primaryKey().notNull().defaultRandom(),
            chatId: (0, u.uR)("chat_id")
              .notNull()
              .references(() => eG.id, { onDelete: "cascade" }),
            role: (0, m.yf)("role").notNull(),
            parts: (0, f.Pq)("parts").notNull(),
            attachments: (0, f.Pq)("attachments").notNull(),
            createdAt: (0, p.vE)("created_at").notNull(),
          });
        (0, c.cJ)(
          "legacy_votes",
          {
            chatId: (0, u.uR)("chat_id")
              .notNull()
              .references(() => eG.id, { onDelete: "cascade" }),
            messageId: (0, u.uR)("message_id")
              .notNull()
              .references(() => eY.id, { onDelete: "cascade" }),
            isUpvoted: (0, h.zM)("is_upvoted").notNull(),
          },
          (e) => ({ pk: (0, y.ie)({ columns: [e.chatId, e.messageId] }) }),
        ),
          (0, c.cJ)(
            "legacy_votes_v2",
            {
              chatId: (0, u.uR)("chat_id")
                .notNull()
                .references(() => eG.id, { onDelete: "cascade" }),
              messageId: (0, u.uR)("message_id")
                .notNull()
                .references(() => eK.id, { onDelete: "cascade" }),
              isUpvoted: (0, h.zM)("is_upvoted").notNull(),
            },
            (e) => ({ pk: (0, y.ie)({ columns: [e.chatId, e.messageId] }) }),
          );
        let eX = ez({ text: eF().min(1).max(2e3), type: e$(["text"]) }),
          eJ = ez({
            id: eF().uuid(),
            createdAt: {
              string: (e) => ee.create({ ...e, coerce: !0 }),
              number: (e) => et.create({ ...e, coerce: !0 }),
              boolean: (e) => er.create({ ...e, coerce: !0 }),
              bigint: (e) => en.create({ ...e, coerce: !0 }),
              date: (e) => ei.create({ ...e, coerce: !0 }),
            }.date(),
            role: e$(["user", "assistant", "system", "tool", "function"]),
            content: eF().min(1).max(2e3),
            parts: eB(eX),
            experimental_attachments: eB(
              ez({
                url: eF().url(),
                name: eF().min(1).max(2e3),
                contentType: e$(["image/png", "image/jpg", "image/jpeg"]),
              }),
            ).optional(),
          });
        ez({
          id: eF().uuid(),
          messages: eB(eJ).min(1),
          selectedChatModel: e$([
            "gpt-3.5-turbo",
            "gpt-4",
            "gpt-4-vision-preview",
            "gpt-4o",
            "claude-3-sonnet",
            "claude-3-opus",
            "claude-3-haiku",
          ]),
          visibility: e$(["public", "private", "team"]).default("private"),
        }).extend({
          description: eF().optional(),
          caseId: eF().uuid().optional(),
          countryCode: eF().optional(),
        });
      },
      41692: (e) => {
        "use strict";
        e.exports = require("node:tls");
      },
      42057: (e, t, n) => {
        "use strict";
        n.d(t, { default: () => i.a });
        var r = n(14604),
          i = n.n(r);
      },
      42443: (e, t, n) => {
        "use strict";
        n.d(t, { e: () => i });
        var r = n(23708);
        let i = (0, r.createServerReference)(
          "40126ff470a43535ad3f3b5edbf6a896ae355d2d69",
          r.callServer,
          void 0,
          r.findSourceMapURL,
          "deleteTrailingMessages",
        );
      },
      42447: (e, t, n) => {
        "use strict";
        n.d(t, { nd: () => l });
        var r = n(92858),
          i = n(43758),
          s = n(99427);
        class o extends s.p {
          static [r.i] = "PgIntegerBuilder";
          constructor(e) {
            super(e, "number", "PgInteger");
          }
          build(e) {
            return new a(e, this.config);
          }
        }
        class a extends i.Kl {
          static [r.i] = "PgInteger";
          getSQLType() {
            return "integer";
          }
          mapFromDriverValue(e) {
            return "string" == typeof e ? Number.parseInt(e) : e;
          }
        }
        function l(e) {
          return new o(e ?? "");
        }
      },
      42925: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            let m;
            n.r(t),
              n.d(t, {
                default: () => k,
                generateImageMetadata: () => b,
                generateMetadata: () => v,
                generateViewport: () => x,
              });
            var i = n(63033),
              s = n(35242),
              o = n(15058),
              a = n(29073),
              l = n(95232),
              c = n(14795),
              u = n(20716),
              d = n(95437),
              h = n(60442),
              p = e([l, u]);
            async function f() {
              let e = await (0, c.j2)();
              e || (0, a.redirect)("/api/auth/guest");
              let t = {
                  ...e,
                  user: e.user,
                  expires: e.expires_at
                    ? new Date(1e3 * e.expires_at).toISOString()
                    : new Date(Date.now() + 2592e6).toISOString(),
                },
                n = (0, u.lk)(),
                r = await (0, o.UL)(),
                i = r.get("chat-model")?.value || l.oQ;
              return (0, s.jsx)(d.default, {
                session: t,
                id: n,
                initialChatModel: i,
              });
            }
            [l, u] = p.then ? (await p)() : p;
            let g = { ...i },
              y =
                "workUnitAsyncStorage" in g
                  ? g.workUnitAsyncStorage
                  : "requestAsyncStorage" in g
                    ? g.requestAsyncStorage
                    : void 0;
            m = new Proxy(f, {
              apply: (e, t, n) => {
                let r, i, s;
                try {
                  let e = y?.getStore();
                  (r = e?.headers.get("sentry-trace") ?? void 0),
                    (i = e?.headers.get("baggage") ?? void 0),
                    (s = e?.headers);
                } catch (e) {}
                return h
                  .wrapServerComponentWithSentry(e, {
                    componentRoute: "/(ai-unified)/chat",
                    componentType: "Page",
                    sentryTraceHeader: r,
                    baggageHeader: i,
                    headers: s,
                  })
                  .apply(t, n);
              },
            });
            let v = void 0,
              b = void 0,
              x = void 0,
              k = m;
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      43326: (e, t, n) => {
        "use strict";
        n.d(t, {
          DV: () => u,
          He: () =>
            function e(t, n) {
              return Object.entries(t).reduce((t, [o, l]) => {
                if ("string" != typeof o) return t;
                let c = n ? [...n, o] : [o];
                return (
                  (0, i.is)(l, r.V) ||
                  (0, i.is)(l, s.Xs) ||
                  (0, i.is)(l, s.Xs.Aliased)
                    ? t.push({ path: c, field: l })
                    : (0, i.is)(l, a.XI)
                      ? t.push(...e(l[a.XI.Symbol.Columns], c))
                      : t.push(...e(l, c)),
                  t
                );
              }, []);
            },
          Ll: () => m,
          Lq: () => g,
          XJ: () => h,
          YD: () => p,
          a6: () => c,
          q: () => d,
          zN: () => f,
        });
        var r = n(54557),
          i = n(92858),
          s = n(18720),
          o = n(537),
          a = n(3021),
          l = n(32566);
        function c(e, t, n) {
          let o = {},
            l = e.reduce((e, { path: l, field: c }, u) => {
              let d;
              d = (0, i.is)(c, r.V)
                ? c
                : (0, i.is)(c, s.Xs)
                  ? c.decoder
                  : c.sql.decoder;
              let h = e;
              for (let [e, s] of l.entries())
                if (e < l.length - 1) s in h || (h[s] = {}), (h = h[s]);
                else {
                  let e = t[u],
                    p = (h[s] = null === e ? null : d.mapFromDriverValue(e));
                  if (n && (0, i.is)(c, r.V) && 2 === l.length) {
                    let e = l[0];
                    e in o
                      ? "string" == typeof o[e] &&
                        o[e] !== (0, a.Io)(c.table) &&
                        (o[e] = !1)
                      : (o[e] = null === p && (0, a.Io)(c.table));
                  }
                }
              return e;
            }, {});
          if (n && Object.keys(o).length > 0)
            for (let [e, t] of Object.entries(o))
              "string" != typeof t || n[t] || (l[e] = null);
          return l;
        }
        function u(e, t) {
          let n = Object.keys(e),
            r = Object.keys(t);
          if (n.length !== r.length) return !1;
          for (let [e, t] of n.entries()) if (t !== r[e]) return !1;
          return !0;
        }
        function d(e, t) {
          let n = Object.entries(t)
            .filter(([, e]) => void 0 !== e)
            .map(([t, n]) =>
              (0, i.is)(n, s.Xs) || (0, i.is)(n, r.V)
                ? [t, n]
                : [t, new s.Iw(n, e[a.XI.Symbol.Columns][t])],
            );
          if (0 === n.length) throw Error("No values to set");
          return Object.fromEntries(n);
        }
        function h(e, t) {
          for (let n of t)
            for (let t of Object.getOwnPropertyNames(n.prototype))
              "constructor" !== t &&
                Object.defineProperty(
                  e.prototype,
                  t,
                  Object.getOwnPropertyDescriptor(n.prototype, t) ||
                    Object.create(null),
                );
        }
        function p(e) {
          return e[a.XI.Symbol.Columns];
        }
        function f(e) {
          return (0, i.is)(e, o.n)
            ? e._.alias
            : (0, i.is)(e, s.Ss)
              ? e[l.n].name
              : (0, i.is)(e, s.Xs)
                ? void 0
                : e[a.XI.Symbol.IsAlias]
                  ? e[a.XI.Symbol.Name]
                  : e[a.XI.Symbol.BaseName];
        }
        function m(e, t) {
          return {
            name: "string" == typeof e && e.length > 0 ? e : "",
            config: "object" == typeof e ? e : t,
          };
        }
        function g(e) {
          if (
            "object" != typeof e ||
            null === e ||
            "Object" !== e.constructor.name
          )
            return !1;
          if ("logger" in e) {
            let t = typeof e.logger;
            return (
              "boolean" === t ||
              ("object" === t && "function" == typeof e.logger.logQuery) ||
              "undefined" === t
            );
          }
          if ("schema" in e) {
            let t = typeof e.schema;
            return "object" === t || "undefined" === t;
          }
          if ("casing" in e) {
            let t = typeof e.casing;
            return "string" === t || "undefined" === t;
          }
          if ("mode" in e)
            return (
              "default" === e.mode &&
              "planetscale" === e.mode &&
              void 0 === e.mode
            );
          if ("connection" in e) {
            let t = typeof e.connection;
            return "string" === t || "object" === t || "undefined" === t;
          }
          if ("client" in e) {
            let t = typeof e.client;
            return "object" === t || "function" === t || "undefined" === t;
          }
          return 0 === Object.keys(e).length;
        }
      },
      43338: function (e, t, n) {
        "use strict";
        var r =
          (this && this.__importDefault) ||
          function (e) {
            return e && e.__esModule ? e : { default: e };
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.defaultErrorMap = void 0),
          (t.setErrorMap = function (e) {
            s = e;
          }),
          (t.getErrorMap = function () {
            return s;
          });
        let i = r(n(80618));
        t.defaultErrorMap = i.default;
        let s = i.default;
      },
      43758: (e, t, n) => {
        "use strict";
        n.d(t, { Kl: () => g, pe: () => m });
        var r = n(92858);
        class i {
          static [r.i] = "ColumnBuilder";
          config;
          constructor(e, t, n) {
            this.config = {
              name: e,
              keyAsName: "" === e,
              notNull: !1,
              default: void 0,
              hasDefault: !1,
              primaryKey: !1,
              isUnique: !1,
              uniqueName: void 0,
              uniqueType: void 0,
              dataType: t,
              columnType: n,
              generated: void 0,
            };
          }
          $type() {
            return this;
          }
          notNull() {
            return (this.config.notNull = !0), this;
          }
          default(e) {
            return (
              (this.config.default = e), (this.config.hasDefault = !0), this
            );
          }
          $defaultFn(e) {
            return (
              (this.config.defaultFn = e), (this.config.hasDefault = !0), this
            );
          }
          $default = this.$defaultFn;
          $onUpdateFn(e) {
            return (
              (this.config.onUpdateFn = e), (this.config.hasDefault = !0), this
            );
          }
          $onUpdate = this.$onUpdateFn;
          primaryKey() {
            return (
              (this.config.primaryKey = !0), (this.config.notNull = !0), this
            );
          }
          setName(e) {
            "" === this.config.name && (this.config.name = e);
          }
        }
        var s = n(54557),
          o = n(17059);
        class a {
          static [r.i] = "PgForeignKeyBuilder";
          reference;
          _onUpdate = "no action";
          _onDelete = "no action";
          constructor(e, t) {
            (this.reference = () => {
              let { name: t, columns: n, foreignColumns: r } = e();
              return {
                name: t,
                columns: n,
                foreignTable: r[0].table,
                foreignColumns: r,
              };
            }),
              t &&
                ((this._onUpdate = t.onUpdate), (this._onDelete = t.onDelete));
          }
          onUpdate(e) {
            return (this._onUpdate = void 0 === e ? "no action" : e), this;
          }
          onDelete(e) {
            return (this._onDelete = void 0 === e ? "no action" : e), this;
          }
          build(e) {
            return new l(e, this);
          }
        }
        class l {
          constructor(e, t) {
            (this.table = e),
              (this.reference = t.reference),
              (this.onUpdate = t._onUpdate),
              (this.onDelete = t._onDelete);
          }
          static [r.i] = "PgForeignKey";
          reference;
          onUpdate;
          onDelete;
          getName() {
            let { name: e, columns: t, foreignColumns: n } = this.reference(),
              r = t.map((e) => e.name),
              i = n.map((e) => e.name),
              s = [this.table[o.E], ...r, n[0].table[o.E], ...i];
            return e ?? `${s.join("_")}_fk`;
          }
        }
        var c = n(47483);
        function u(e, t) {
          return `${e[o.E]}_${t.join("_")}_unique`;
        }
        class d {
          constructor(e, t) {
            (this.name = t), (this.columns = e);
          }
          static [r.i] = null;
          columns;
          nullsNotDistinctConfig = !1;
          nullsNotDistinct() {
            return (this.nullsNotDistinctConfig = !0), this;
          }
          build(e) {
            return new p(
              e,
              this.columns,
              this.nullsNotDistinctConfig,
              this.name,
            );
          }
        }
        class h {
          static [r.i] = null;
          name;
          constructor(e) {
            this.name = e;
          }
          on(...e) {
            return new d(e, this.name);
          }
        }
        class p {
          constructor(e, t, n, r) {
            (this.table = e),
              (this.columns = t),
              (this.name =
                r ??
                u(
                  this.table,
                  this.columns.map((e) => e.name),
                )),
              (this.nullsNotDistinct = n);
          }
          static [r.i] = null;
          columns;
          name;
          nullsNotDistinct = !1;
          getName() {
            return this.name;
          }
        }
        function f(e, t, n) {
          for (let r = t; r < e.length; r++) {
            let i = e[r];
            if ("\\" === i) {
              r++;
              continue;
            }
            if ('"' === i) return [e.slice(t, r).replace(/\\/g, ""), r + 1];
            if (!n && ("," === i || "}" === i))
              return [e.slice(t, r).replace(/\\/g, ""), r];
          }
          return [e.slice(t).replace(/\\/g, ""), e.length];
        }
        class m extends i {
          foreignKeyConfigs = [];
          static [r.i] = "PgColumnBuilder";
          array(e) {
            return new b(this.config.name, this, e);
          }
          references(e, t = {}) {
            return this.foreignKeyConfigs.push({ ref: e, actions: t }), this;
          }
          unique(e, t) {
            return (
              (this.config.isUnique = !0),
              (this.config.uniqueName = e),
              (this.config.uniqueType = t?.nulls),
              this
            );
          }
          generatedAlwaysAs(e) {
            return (
              (this.config.generated = {
                as: e,
                type: "always",
                mode: "stored",
              }),
              this
            );
          }
          buildForeignKeys(e, t) {
            return this.foreignKeyConfigs.map(({ ref: n, actions: r }) =>
              (0, c.i)(
                (n, r) => {
                  let i = new a(() => ({
                    columns: [e],
                    foreignColumns: [n()],
                  }));
                  return (
                    r.onUpdate && i.onUpdate(r.onUpdate),
                    r.onDelete && i.onDelete(r.onDelete),
                    i.build(t)
                  );
                },
                n,
                r,
              ),
            );
          }
          buildExtraConfigColumn(e) {
            return new y(e, this.config);
          }
        }
        class g extends s.V {
          constructor(e, t) {
            t.uniqueName || (t.uniqueName = u(e, [t.name])),
              super(e, t),
              (this.table = e);
          }
          static [r.i] = "PgColumn";
        }
        class y extends g {
          static [r.i] = "ExtraConfigColumn";
          getSQLType() {
            return this.getSQLType();
          }
          indexConfig = {
            order: this.config.order ?? "asc",
            nulls: this.config.nulls ?? "last",
            opClass: this.config.opClass,
          };
          defaultConfig = { order: "asc", nulls: "last", opClass: void 0 };
          asc() {
            return (this.indexConfig.order = "asc"), this;
          }
          desc() {
            return (this.indexConfig.order = "desc"), this;
          }
          nullsFirst() {
            return (this.indexConfig.nulls = "first"), this;
          }
          nullsLast() {
            return (this.indexConfig.nulls = "last"), this;
          }
          op(e) {
            return (this.indexConfig.opClass = e), this;
          }
        }
        class v {
          static [r.i] = null;
          constructor(e, t, n, r) {
            (this.name = e),
              (this.keyAsName = t),
              (this.type = n),
              (this.indexConfig = r);
          }
          name;
          keyAsName;
          type;
          indexConfig;
        }
        class b extends m {
          static [r.i] = "PgArrayBuilder";
          constructor(e, t, n) {
            super(e, "array", "PgArray"),
              (this.config.baseBuilder = t),
              (this.config.size = n);
          }
          build(e) {
            let t = this.config.baseBuilder.build(e);
            return new x(e, this.config, t);
          }
        }
        class x extends g {
          constructor(e, t, n, r) {
            super(e, t),
              (this.baseColumn = n),
              (this.range = r),
              (this.size = t.size);
          }
          size;
          static [r.i] = "PgArray";
          getSQLType() {
            return `${this.baseColumn.getSQLType()}[${"number" == typeof this.size ? this.size : ""}]`;
          }
          mapFromDriverValue(e) {
            return (
              "string" == typeof e &&
                (e = (function (e) {
                  let [t] = (function e(t, n = 0) {
                    let r = [],
                      i = n,
                      s = !1;
                    for (; i < t.length; ) {
                      let o = t[i];
                      if ("," === o) {
                        (s || i === n) && r.push(""), (s = !0), i++;
                        continue;
                      }
                      if (((s = !1), "\\" === o)) {
                        i += 2;
                        continue;
                      }
                      if ('"' === o) {
                        let [e, n] = f(t, i + 1, !0);
                        r.push(e), (i = n);
                        continue;
                      }
                      if ("}" === o) return [r, i + 1];
                      if ("{" === o) {
                        let [n, s] = e(t, i + 1);
                        r.push(n), (i = s);
                        continue;
                      }
                      let [a, l] = f(t, i, !1);
                      r.push(a), (i = l);
                    }
                    return [r, i];
                  })(e, 1);
                  return t;
                })(e)),
              e.map((e) => this.baseColumn.mapFromDriverValue(e))
            );
          }
          mapToDriverValue(e, t = !1) {
            let n = e.map((e) =>
              null === e
                ? null
                : (0, r.is)(this.baseColumn, x)
                  ? this.baseColumn.mapToDriverValue(e, !0)
                  : this.baseColumn.mapToDriverValue(e),
            );
            return t
              ? n
              : (function e(t) {
                  return `{${t.map((t) => (Array.isArray(t) ? e(t) : "string" == typeof t ? `"${t.replace(/\\/g, "\\\\").replace(/"/g, '\\"')}"` : `${t}`)).join(",")}}`;
                })(n);
          }
        }
      },
      44708: (e) => {
        "use strict";
        e.exports = require("node:https");
      },
      45536: (e, t, n) => {
        "use strict";
        var r = Object.create,
          i = Object.defineProperty,
          s = Object.getOwnPropertyDescriptor,
          o = Object.getOwnPropertyNames,
          a = Object.getPrototypeOf,
          l = Object.prototype.hasOwnProperty,
          c = (e, t, n, r) => {
            if ((t && "object" == typeof t) || "function" == typeof t)
              for (let a of o(t))
                l.call(e, a) ||
                  a === n ||
                  i(e, a, {
                    get: () => t[a],
                    enumerable: !(r = s(t, a)) || r.enumerable,
                  });
            return e;
          },
          u = {};
        ((e, t) => {
          for (var n in t) i(e, n, { get: t[n], enumerable: !0 });
        })(u, { useCookies: () => f }),
          (e.exports = c(i({}, "__esModule", { value: !0 }), u));
        var d = n(84205),
          h = ((e, t, n) => (
            (n = null != e ? r(a(e)) : {}),
            c(
              !t && e && e.__esModule
                ? n
                : i(n, "default", { value: e, enumerable: !0 }),
              e,
            )
          ))(n(99703)),
          p = n(3220);
        let f = i(
          () => {
            let e = (0, d.useContext)(p.Ctx),
              [, t] = (0, d.useState)(0);
            return (0, d.useMemo)(() => {
              let n = "undefined" == typeof window ? e : h.default;
              if (!n)
                throw Error(
                  'Missing `<CookiesProvider>` from "next-client-cookies/server"',
                );
              return {
                get: n.get.bind(n),
                set: (...e) => {
                  n.set(...e), t((e) => e + 1);
                },
                remove: (...e) => {
                  n.remove(...e), t((e) => e + 1);
                },
              };
            }, [e]);
          },
          "name",
          { value: "useCookies", configurable: !0 },
        );
      },
      47391: (e, t, n) => {
        "use strict";
        n.d(t, { UL: () => r.U });
        var r = n(55843);
        n(39079), n(22461);
      },
      47483: (e, t, n) => {
        "use strict";
        function r(e, ...t) {
          return e(...t);
        }
        n.d(t, { i: () => r });
      },
      47602: (e, t, n) => {
        "use strict";
        function r() {
          var e = arguments[0];
          "string" == typeof e && (e = document.createElement(e));
          var t = 1,
            n = arguments[1];
          if (
            n &&
            "object" == typeof n &&
            null == n.nodeType &&
            !Array.isArray(n)
          ) {
            for (var r in n)
              if (Object.prototype.hasOwnProperty.call(n, r)) {
                var i = n[r];
                "string" == typeof i
                  ? e.setAttribute(r, i)
                  : null != i && (e[r] = i);
              }
            t++;
          }
          for (; t < arguments.length; t++)
            !(function e(t, n) {
              if ("string" == typeof n)
                t.appendChild(document.createTextNode(n));
              else if (null == n);
              else if (null != n.nodeType) t.appendChild(n);
              else if (Array.isArray(n))
                for (var r = 0; r < n.length; r++) e(t, n[r]);
              else throw RangeError("Unsupported child node: " + n);
            })(e, arguments[t]);
          return e;
        }
        n.d(t, { A: () => r });
      },
      48161: (e) => {
        "use strict";
        e.exports = require("node:os");
      },
      48509: (e, t) => {
        "use strict";
        var n;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.errorUtil = void 0),
          (function (e) {
            (e.errToObj = (e) =>
              "string" == typeof e ? { message: e } : e || {}),
              (e.toString = (e) => ("string" == typeof e ? e : e?.message));
          })(n || (t.errorUtil = n = {}));
      },
      48598: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, {
              G7: () => p,
              Gj: () => h,
              L$: () => g,
              fx: () => y,
              h_: () => v,
              oI: () => f,
              uB: () => d,
              xL: () => m,
            });
            var i = n(61268),
              s = n(8166),
              o = n(44803),
              a = n(84205),
              l = n(15942),
              c = n(30205),
              u = e([l, c]);
            [l, c] = u.then ? (await u)() : u;
            let d = a.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.uB, {
                ref: n,
                className: (0, l.cn)(
                  "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
                  e,
                ),
                ...t,
              }),
            );
            d.displayName = s.uB.displayName;
            let h = ({ children: e, ...t }) =>
                (0, i.jsx)(c.lG, {
                  ...t,
                  children: (0, i.jsx)(c.Cf, {
                    className: "overflow-hidden p-0 shadow-lg",
                    children: (0, i.jsx)(d, {
                      className:
                        "[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5",
                      children: e,
                    }),
                  }),
                }),
              p = a.forwardRef(({ className: e, ...t }, n) =>
                (0, i.jsxs)("div", {
                  className: "flex items-center border-b px-3",
                  "cmdk-input-wrapper": "",
                  children: [
                    (0, i.jsx)(o.A, {
                      className: "mr-2 h-4 w-4 shrink-0 opacity-50",
                    }),
                    (0, i.jsx)(s.uB.Input, {
                      ref: n,
                      className: (0, l.cn)(
                        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
                        e,
                      ),
                      ...t,
                    }),
                  ],
                }),
              );
            p.displayName = s.uB.Input.displayName;
            let f = a.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.uB.List, {
                ref: n,
                className: (0, l.cn)(
                  "max-h-[300px] overflow-y-auto overflow-x-hidden",
                  e,
                ),
                ...t,
              }),
            );
            f.displayName = s.uB.List.displayName;
            let m = a.forwardRef((e, t) =>
              (0, i.jsx)(s.uB.Empty, {
                ref: t,
                className: "py-6 text-center text-sm",
                ...e,
              }),
            );
            m.displayName = s.uB.Empty.displayName;
            let g = a.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.uB.Group, {
                ref: n,
                className: (0, l.cn)(
                  "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
                  e,
                ),
                ...t,
              }),
            );
            g.displayName = s.uB.Group.displayName;
            let y = a.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.uB.Separator, {
                ref: n,
                className: (0, l.cn)("-mx-1 h-px bg-border", e),
                ...t,
              }),
            );
            y.displayName = s.uB.Separator.displayName;
            let v = a.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.uB.Item, {
                ref: n,
                className: (0, l.cn)(
                  "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
                  e,
                ),
                ...t,
              }),
            );
            (v.displayName = s.uB.Item.displayName), r();
          } catch (e) {
            r(e);
          }
        });
      },
      48866: function (e, t, n) {
        "use strict";
        var r =
          (this && this.__importDefault) ||
          function (e) {
            return e && e.__esModule ? e : { default: e };
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.isAsync =
            t.isValid =
            t.isDirty =
            t.isAborted =
            t.OK =
            t.DIRTY =
            t.INVALID =
            t.ParseStatus =
            t.EMPTY_PATH =
            t.makeIssue =
              void 0),
          (t.addIssueToContext = function (e, n) {
            let r = (0, i.getErrorMap)(),
              o = (0, t.makeIssue)({
                issueData: n,
                data: e.data,
                path: e.path,
                errorMaps: [
                  e.common.contextualErrorMap,
                  e.schemaErrorMap,
                  r,
                  r === s.default ? void 0 : s.default,
                ].filter((e) => !!e),
              });
            e.common.issues.push(o);
          });
        let i = n(43338),
          s = r(n(80618));
        (t.makeIssue = (e) => {
          let { data: t, path: n, errorMaps: r, issueData: i } = e,
            s = [...n, ...(i.path || [])],
            o = { ...i, path: s };
          if (void 0 !== i.message)
            return { ...i, path: s, message: i.message };
          let a = "";
          for (let e of r
            .filter((e) => !!e)
            .slice()
            .reverse())
            a = e(o, { data: t, defaultError: a }).message;
          return { ...i, path: s, message: a };
        }),
          (t.EMPTY_PATH = []);
        class o {
          constructor() {
            this.value = "valid";
          }
          dirty() {
            "valid" === this.value && (this.value = "dirty");
          }
          abort() {
            "aborted" !== this.value && (this.value = "aborted");
          }
          static mergeArray(e, n) {
            let r = [];
            for (let i of n) {
              if ("aborted" === i.status) return t.INVALID;
              "dirty" === i.status && e.dirty(), r.push(i.value);
            }
            return { status: e.value, value: r };
          }
          static async mergeObjectAsync(e, t) {
            let n = [];
            for (let e of t) {
              let t = await e.key,
                r = await e.value;
              n.push({ key: t, value: r });
            }
            return o.mergeObjectSync(e, n);
          }
          static mergeObjectSync(e, n) {
            let r = {};
            for (let i of n) {
              let { key: n, value: s } = i;
              if ("aborted" === n.status || "aborted" === s.status)
                return t.INVALID;
              "dirty" === n.status && e.dirty(),
                "dirty" === s.status && e.dirty(),
                "__proto__" !== n.value &&
                  (void 0 !== s.value || i.alwaysSet) &&
                  (r[n.value] = s.value);
            }
            return { status: e.value, value: r };
          }
        }
        (t.ParseStatus = o),
          (t.INVALID = Object.freeze({ status: "aborted" })),
          (t.DIRTY = (e) => ({ status: "dirty", value: e })),
          (t.OK = (e) => ({ status: "valid", value: e })),
          (t.isAborted = (e) => "aborted" === e.status),
          (t.isDirty = (e) => "dirty" === e.status),
          (t.isValid = (e) => "valid" === e.status),
          (t.isAsync = (e) =>
            "undefined" != typeof Promise && e instanceof Promise);
      },
      48958: (e, t, n) => {
        "use strict";
        n.d(t, { Cj: () => a, Mj: () => u, lW: () => p });
        var r = n(84205),
          i = n(88823),
          s = "undefined" != typeof window ? r.useLayoutEffect : r.useEffect;
        function o(e, t, n, i) {
          let o = (0, r.useRef)(t);
          s(() => {
            o.current = t;
          }, [t]),
            (0, r.useEffect)(() => {
              let t = (null == n ? void 0 : n.current) ?? window;
              if (!(t && t.addEventListener)) return;
              let r = (e) => {
                o.current(e);
              };
              return (
                t.addEventListener(e, r, i),
                () => {
                  t.removeEventListener(e, r, i);
                }
              );
            }, [e, n, i]);
        }
        function a() {
          let [e, t] = (0, r.useState)(null);
          return [
            e,
            (0, r.useCallback)(async (e) => {
              if (!(null == navigator ? void 0 : navigator.clipboard))
                return console.warn("Clipboard not supported"), !1;
              try {
                return await navigator.clipboard.writeText(e), t(e), !0;
              } catch (e) {
                return console.warn("Copy failed", e), t(null), !1;
              }
            }, []),
          ];
        }
        function l(e) {
          let t = (0, r.useRef)(() => {
            throw Error("Cannot call an event handler while rendering.");
          });
          return (
            s(() => {
              t.current = e;
            }, [e]),
            (0, r.useCallback)(
              (...e) => {
                var n;
                return null == (n = t.current) ? void 0 : n.call(t, ...e);
              },
              [t],
            )
          );
        }
        var c = "undefined" == typeof window;
        function u(e, t, n = {}) {
          let { initializeWithValue: i = !0 } = n,
            s = (0, r.useCallback)(
              (e) => (n.serializer ? n.serializer(e) : JSON.stringify(e)),
              [n],
            ),
            a = (0, r.useCallback)(
              (e) => {
                let r;
                if (n.deserializer) return n.deserializer(e);
                if ("undefined" === e) return;
                let i = t instanceof Function ? t() : t;
                try {
                  r = JSON.parse(e);
                } catch (e) {
                  return console.error("Error parsing JSON:", e), i;
                }
                return r;
              },
              [n, t],
            ),
            d = (0, r.useCallback)(() => {
              let n = t instanceof Function ? t() : t;
              if (c) return n;
              try {
                let t = window.localStorage.getItem(e);
                return t ? a(t) : n;
              } catch (t) {
                return (
                  console.warn(
                    `Error reading localStorage key \u201C${e}\u201D:`,
                    t,
                  ),
                  n
                );
              }
            }, [t, e, a]),
            [h, p] = (0, r.useState)(() =>
              i ? d() : t instanceof Function ? t() : t,
            ),
            f = l((t) => {
              c &&
                console.warn(
                  `Tried setting localStorage key \u201C${e}\u201D even though environment is not a client`,
                );
              try {
                let n = t instanceof Function ? t(d()) : t;
                window.localStorage.setItem(e, s(n)),
                  p(n),
                  window.dispatchEvent(
                    new StorageEvent("local-storage", { key: e }),
                  );
              } catch (t) {
                console.warn(
                  `Error setting localStorage key \u201C${e}\u201D:`,
                  t,
                );
              }
            }),
            m = l(() => {
              c &&
                console.warn(
                  `Tried removing localStorage key \u201C${e}\u201D even though environment is not a client`,
                );
              let n = t instanceof Function ? t() : t;
              window.localStorage.removeItem(e),
                p(n),
                window.dispatchEvent(
                  new StorageEvent("local-storage", { key: e }),
                );
            });
          (0, r.useEffect)(() => {
            p(d());
          }, [e]);
          let g = (0, r.useCallback)(
            (t) => {
              (t.key && t.key !== e) || p(d());
            },
            [e, d],
          );
          return o("storage", g), o("local-storage", g), [h, f, m];
        }
        var d = "undefined" == typeof window;
        var h = "undefined" == typeof window;
        function p(e = {}) {
          let { initializeWithValue: t = !0 } = e;
          h && (t = !1);
          let [n, a] = (0, r.useState)(() =>
              t
                ? { width: window.innerWidth, height: window.innerHeight }
                : { width: void 0, height: void 0 },
            ),
            l = (function (e, t = 500, n) {
              let s = (0, r.useRef)();
              var o = () => {
                s.current && s.current.cancel();
              };
              let a = (0, r.useRef)(o);
              (a.current = o),
                (0, r.useEffect)(
                  () => () => {
                    a.current();
                  },
                  [],
                );
              let l = (0, r.useMemo)(() => {
                let n = i(e, t, void 0),
                  r = (...e) => n(...e);
                return (
                  (r.cancel = () => {
                    n.cancel();
                  }),
                  (r.isPending = () => !!s.current),
                  (r.flush = () => n.flush()),
                  r
                );
              }, [e, t, n]);
              return (
                (0, r.useEffect)(() => {
                  s.current = i(e, t, n);
                }, [e, t, n]),
                l
              );
            })(a, e.debounceDelay);
          function c() {
            (e.debounceDelay ? l : a)({
              width: window.innerWidth,
              height: window.innerHeight,
            });
          }
          return (
            o("resize", c),
            s(() => {
              c();
            }, []),
            n
          );
        }
      },
      48969: (e, t, n) => {
        "use strict";
        n.d(t, { wQ: () => h });
        var r = n(14077);
        let i = ["p", 0],
          s = ["blockquote", 0],
          o = ["hr"],
          a = ["pre", ["code", 0]],
          l = ["br"],
          c = ["em", 0],
          u = ["strong", 0],
          d = ["code", 0],
          h = new r.Sj({
            nodes: {
              doc: { content: "block+" },
              paragraph: {
                content: "inline*",
                group: "block",
                parseDOM: [{ tag: "p" }],
                toDOM: () => i,
              },
              blockquote: {
                content: "block+",
                group: "block",
                defining: !0,
                parseDOM: [{ tag: "blockquote" }],
                toDOM: () => s,
              },
              horizontal_rule: {
                group: "block",
                parseDOM: [{ tag: "hr" }],
                toDOM: () => o,
              },
              heading: {
                attrs: { level: { default: 1, validate: "number" } },
                content: "inline*",
                group: "block",
                defining: !0,
                parseDOM: [
                  { tag: "h1", attrs: { level: 1 } },
                  { tag: "h2", attrs: { level: 2 } },
                  { tag: "h3", attrs: { level: 3 } },
                  { tag: "h4", attrs: { level: 4 } },
                  { tag: "h5", attrs: { level: 5 } },
                  { tag: "h6", attrs: { level: 6 } },
                ],
                toDOM: (e) => ["h" + e.attrs.level, 0],
              },
              code_block: {
                content: "text*",
                marks: "",
                group: "block",
                code: !0,
                defining: !0,
                parseDOM: [{ tag: "pre", preserveWhitespace: "full" }],
                toDOM: () => a,
              },
              text: { group: "inline" },
              image: {
                inline: !0,
                attrs: {
                  src: { validate: "string" },
                  alt: { default: null, validate: "string|null" },
                  title: { default: null, validate: "string|null" },
                },
                group: "inline",
                draggable: !0,
                parseDOM: [
                  {
                    tag: "img[src]",
                    getAttrs: (e) => ({
                      src: e.getAttribute("src"),
                      title: e.getAttribute("title"),
                      alt: e.getAttribute("alt"),
                    }),
                  },
                ],
                toDOM(e) {
                  let { src: t, alt: n, title: r } = e.attrs;
                  return ["img", { src: t, alt: n, title: r }];
                },
              },
              hard_break: {
                inline: !0,
                group: "inline",
                selectable: !1,
                parseDOM: [{ tag: "br" }],
                toDOM: () => l,
              },
            },
            marks: {
              link: {
                attrs: {
                  href: { validate: "string" },
                  title: { default: null, validate: "string|null" },
                },
                inclusive: !1,
                parseDOM: [
                  {
                    tag: "a[href]",
                    getAttrs: (e) => ({
                      href: e.getAttribute("href"),
                      title: e.getAttribute("title"),
                    }),
                  },
                ],
                toDOM(e) {
                  let { href: t, title: n } = e.attrs;
                  return ["a", { href: t, title: n }, 0];
                },
              },
              em: {
                parseDOM: [
                  { tag: "i" },
                  { tag: "em" },
                  { style: "font-style=italic" },
                  {
                    style: "font-style=normal",
                    clearMark: (e) => "em" == e.type.name,
                  },
                ],
                toDOM: () => c,
              },
              strong: {
                parseDOM: [
                  { tag: "strong" },
                  {
                    tag: "b",
                    getAttrs: (e) => "normal" != e.style.fontWeight && null,
                  },
                  {
                    style: "font-weight=400",
                    clearMark: (e) => "strong" == e.type.name,
                  },
                  {
                    style: "font-weight",
                    getAttrs: (e) =>
                      /^(bold(er)?|[5-9]\d{2,})$/.test(e) && null,
                  },
                ],
                toDOM: () => u,
              },
              code: { code: !0, parseDOM: [{ tag: "code" }], toDOM: () => d },
            },
          });
      },
      49816: (e, t, n) => {
        "use strict";
        n.d(t, { _: () => i });
        var r = n(61268);
        let i = () =>
          (0, r.jsxs)("div", {
            className: "flex flex-col gap-4 w-full",
            children: [
              (0, r.jsx)("div", {
                className:
                  "animate-pulse rounded-lg h-4 bg-muted-foreground/20 w-48",
              }),
              (0, r.jsx)("div", {
                className:
                  "animate-pulse rounded-lg h-4 bg-muted-foreground/20 w-3/4",
              }),
              (0, r.jsx)("div", {
                className:
                  "animate-pulse rounded-lg h-4 bg-muted-foreground/20 w-1/2",
              }),
              (0, r.jsx)("div", {
                className:
                  "animate-pulse rounded-lg h-4 bg-muted-foreground/20 w-64",
              }),
              (0, r.jsx)("div", {
                className:
                  "animate-pulse rounded-lg h-4 bg-muted-foreground/20 w-40",
              }),
              (0, r.jsx)("div", {
                className:
                  "animate-pulse rounded-lg h-4 bg-muted-foreground/20 w-36",
              }),
              (0, r.jsx)("div", {
                className:
                  "animate-pulse rounded-lg h-4 bg-muted-foreground/20 w-64",
              }),
            ],
          });
      },
      50289: (e) => {
        "use strict";
        var t,
          n,
          r,
          i,
          s,
          o,
          a,
          l,
          c,
          u,
          d,
          h,
          p,
          f,
          m = Object.defineProperty,
          g = Object.getOwnPropertyDescriptor,
          y = Object.getOwnPropertyNames,
          v = Object.prototype.hasOwnProperty,
          b = {};
        ((e, t) => {
          for (var n in t) m(e, n, { get: t[n], enumerable: !0 });
        })(b, {
          AISDKError: () => _,
          APICallError: () => E,
          EmptyResponseBodyError: () => I,
          InvalidArgumentError: () => L,
          InvalidPromptError: () => z,
          InvalidResponseDataError: () => H,
          JSONParseError: () => Z,
          LoadAPIKeyError: () => X,
          LoadSettingError: () => en,
          NoContentGeneratedError: () => eo,
          NoSuchModelError: () => eu,
          TooManyEmbeddingValuesForCallError: () => ef,
          TypeValidationError: () => eb,
          UnsupportedFunctionalityError: () => e_,
          getErrorMessage: () => D,
          isJSONArray: () => eT,
          isJSONObject: () => eS,
          isJSONValue: () => eO,
        }),
          (e.exports = ((e, t, n, r) => {
            if ((t && "object" == typeof t) || "function" == typeof t)
              for (let i of y(t))
                v.call(e, i) ||
                  i === n ||
                  m(e, i, {
                    get: () => t[i],
                    enumerable: !(r = g(t, i)) || r.enumerable,
                  });
            return e;
          })(m({}, "__esModule", { value: !0 }), b));
        var x = "vercel.ai.error",
          k = Symbol.for(x),
          w = class e extends Error {
            constructor({ name: e, message: n, cause: r }) {
              super(n), (this[t] = !0), (this.name = e), (this.cause = r);
            }
            static isInstance(t) {
              return e.hasMarker(t, x);
            }
            static hasMarker(e, t) {
              let n = Symbol.for(t);
              return (
                null != e &&
                "object" == typeof e &&
                n in e &&
                "boolean" == typeof e[n] &&
                !0 === e[n]
              );
            }
          };
        t = k;
        var _ = w,
          O = "AI_APICallError",
          T = `vercel.ai.error.${O}`,
          S = Symbol.for(T),
          E = class extends _ {
            constructor({
              message: e,
              url: t,
              requestBodyValues: r,
              statusCode: i,
              responseHeaders: s,
              responseBody: o,
              cause: a,
              isRetryable: l = null != i &&
                (408 === i || 409 === i || 429 === i || i >= 500),
              data: c,
            }) {
              super({ name: O, message: e, cause: a }),
                (this[n] = !0),
                (this.url = t),
                (this.requestBodyValues = r),
                (this.statusCode = i),
                (this.responseHeaders = s),
                (this.responseBody = o),
                (this.isRetryable = l),
                (this.data = c);
            }
            static isInstance(e) {
              return _.hasMarker(e, T);
            }
          };
        n = S;
        var C = "AI_EmptyResponseBodyError",
          A = `vercel.ai.error.${C}`,
          N = Symbol.for(A),
          I = class extends _ {
            constructor({ message: e = "Empty response body" } = {}) {
              super({ name: C, message: e }), (this[r] = !0);
            }
            static isInstance(e) {
              return _.hasMarker(e, A);
            }
          };
        function D(e) {
          return null == e
            ? "unknown error"
            : "string" == typeof e
              ? e
              : e instanceof Error
                ? e.message
                : JSON.stringify(e);
        }
        r = N;
        var P = "AI_InvalidArgumentError",
          R = `vercel.ai.error.${P}`,
          M = Symbol.for(R),
          L = class extends _ {
            constructor({ message: e, cause: t, argument: n }) {
              super({ name: P, message: e, cause: t }),
                (this[i] = !0),
                (this.argument = n);
            }
            static isInstance(e) {
              return _.hasMarker(e, R);
            }
          };
        i = M;
        var j = "AI_InvalidPromptError",
          F = `vercel.ai.error.${j}`,
          B = Symbol.for(F),
          z = class extends _ {
            constructor({ prompt: e, message: t, cause: n }) {
              super({ name: j, message: `Invalid prompt: ${t}`, cause: n }),
                (this[s] = !0),
                (this.prompt = e);
            }
            static isInstance(e) {
              return _.hasMarker(e, F);
            }
          };
        s = B;
        var $ = "AI_InvalidResponseDataError",
          q = `vercel.ai.error.${$}`,
          U = Symbol.for(q),
          H = class extends _ {
            constructor({
              data: e,
              message: t = `Invalid response data: ${JSON.stringify(e)}.`,
            }) {
              super({ name: $, message: t }), (this[o] = !0), (this.data = e);
            }
            static isInstance(e) {
              return _.hasMarker(e, q);
            }
          };
        o = U;
        var Q = "AI_JSONParseError",
          V = `vercel.ai.error.${Q}`,
          W = Symbol.for(V),
          Z = class extends _ {
            constructor({ text: e, cause: t }) {
              super({
                name: Q,
                message: `JSON parsing failed: Text: ${e}.
Error message: ${D(t)}`,
                cause: t,
              }),
                (this[a] = !0),
                (this.text = e);
            }
            static isInstance(e) {
              return _.hasMarker(e, V);
            }
          };
        a = W;
        var G = "AI_LoadAPIKeyError",
          Y = `vercel.ai.error.${G}`,
          K = Symbol.for(Y),
          X = class extends _ {
            constructor({ message: e }) {
              super({ name: G, message: e }), (this[l] = !0);
            }
            static isInstance(e) {
              return _.hasMarker(e, Y);
            }
          };
        l = K;
        var J = "AI_LoadSettingError",
          ee = `vercel.ai.error.${J}`,
          et = Symbol.for(ee),
          en = class extends _ {
            constructor({ message: e }) {
              super({ name: J, message: e }), (this[c] = !0);
            }
            static isInstance(e) {
              return _.hasMarker(e, ee);
            }
          };
        c = et;
        var er = "AI_NoContentGeneratedError",
          ei = `vercel.ai.error.${er}`,
          es = Symbol.for(ei),
          eo = class extends _ {
            constructor({ message: e = "No content generated." } = {}) {
              super({ name: er, message: e }), (this[u] = !0);
            }
            static isInstance(e) {
              return _.hasMarker(e, ei);
            }
          };
        u = es;
        var ea = "AI_NoSuchModelError",
          el = `vercel.ai.error.${ea}`,
          ec = Symbol.for(el),
          eu = class extends _ {
            constructor({
              errorName: e = ea,
              modelId: t,
              modelType: n,
              message: r = `No such ${n}: ${t}`,
            }) {
              super({ name: e, message: r }),
                (this[d] = !0),
                (this.modelId = t),
                (this.modelType = n);
            }
            static isInstance(e) {
              return _.hasMarker(e, el);
            }
          };
        d = ec;
        var ed = "AI_TooManyEmbeddingValuesForCallError",
          eh = `vercel.ai.error.${ed}`,
          ep = Symbol.for(eh),
          ef = class extends _ {
            constructor(e) {
              super({
                name: ed,
                message: `Too many values for a single embedding call. The ${e.provider} model "${e.modelId}" can only embed up to ${e.maxEmbeddingsPerCall} values per call, but ${e.values.length} values were provided.`,
              }),
                (this[h] = !0),
                (this.provider = e.provider),
                (this.modelId = e.modelId),
                (this.maxEmbeddingsPerCall = e.maxEmbeddingsPerCall),
                (this.values = e.values);
            }
            static isInstance(e) {
              return _.hasMarker(e, eh);
            }
          };
        h = ep;
        var em = "AI_TypeValidationError",
          eg = `vercel.ai.error.${em}`,
          ey = Symbol.for(eg),
          ev = class e extends _ {
            constructor({ value: e, cause: t }) {
              super({
                name: em,
                message: `Type validation failed: Value: ${JSON.stringify(e)}.
Error message: ${D(t)}`,
                cause: t,
              }),
                (this[p] = !0),
                (this.value = e);
            }
            static isInstance(e) {
              return _.hasMarker(e, eg);
            }
            static wrap({ value: t, cause: n }) {
              return e.isInstance(n) && n.value === t
                ? n
                : new e({ value: t, cause: n });
            }
          };
        p = ey;
        var eb = ev,
          ex = "AI_UnsupportedFunctionalityError",
          ek = `vercel.ai.error.${ex}`,
          ew = Symbol.for(ek),
          e_ = class extends _ {
            constructor({
              functionality: e,
              message: t = `'${e}' functionality not supported.`,
            }) {
              super({ name: ex, message: t }),
                (this[f] = !0),
                (this.functionality = e);
            }
            static isInstance(e) {
              return _.hasMarker(e, ek);
            }
          };
        function eO(e) {
          return (
            null === e ||
            "string" == typeof e ||
            "number" == typeof e ||
            "boolean" == typeof e ||
            (Array.isArray(e)
              ? e.every(eO)
              : "object" == typeof e &&
                Object.entries(e).every(
                  ([e, t]) => "string" == typeof e && eO(t),
                ))
          );
        }
        function eT(e) {
          return Array.isArray(e) && e.every(eO);
        }
        function eS(e) {
          return (
            null != e &&
            "object" == typeof e &&
            Object.entries(e).every(([e, t]) => "string" == typeof e && eO(t))
          );
        }
        f = ew;
      },
      50305: (e, t, n) => {
        "use strict";
        n.d(t, { Fx: () => a, kn: () => o });
        var r = n(92858),
          i = n(43758);
        class s extends i.pe {
          static [r.i] = "PgJsonbBuilder";
          constructor(e) {
            super(e, "json", "PgJsonb");
          }
          build(e) {
            return new o(e, this.config);
          }
        }
        class o extends i.Kl {
          static [r.i] = "PgJsonb";
          constructor(e, t) {
            super(e, t);
          }
          getSQLType() {
            return "jsonb";
          }
          mapToDriverValue(e) {
            return JSON.stringify(e);
          }
          mapFromDriverValue(e) {
            if ("string" == typeof e)
              try {
                return JSON.parse(e);
              } catch {}
            return e;
          }
        }
        function a(e) {
          return new s(e ?? "");
        }
      },
      50840: (e, t, n) => {
        "use strict";
        n.d(t, { Xd: () => l, kB: () => c });
        var r = n(92858),
          i = n(43326),
          s = n(43758),
          o = n(13504);
        class a extends o.u {
          constructor(e, t, n) {
            super(e, "string", "PgTime"),
              (this.withTimezone = t),
              (this.precision = n),
              (this.config.withTimezone = t),
              (this.config.precision = n);
          }
          static [r.i] = "PgTimeBuilder";
          build(e) {
            return new l(e, this.config);
          }
        }
        class l extends s.Kl {
          static [r.i] = "PgTime";
          withTimezone;
          precision;
          constructor(e, t) {
            super(e, t),
              (this.withTimezone = t.withTimezone),
              (this.precision = t.precision);
          }
          getSQLType() {
            let e = void 0 === this.precision ? "" : `(${this.precision})`;
            return `time${e}${this.withTimezone ? " with time zone" : ""}`;
          }
        }
        function c(e, t = {}) {
          let { name: n, config: r } = (0, i.Ll)(e, t);
          return new a(n, r.withTimezone ?? !1, r.precision);
        }
      },
      51337: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { B: () => h });
            var i = n(61268),
              s = n(1306),
              o = n.n(s),
              a = n(84205),
              l = n(57916),
              c = n(66972),
              u = n(57274),
              d = e([l]);
            l = (d.then ? (await d)() : d)[0];
            let h = (0, a.memo)(
              function ({
                sessionId: e,
                status: t,
                votes: n,
                messages: r,
                setMessages: s,
                reload: o,
                isReadonly: a,
                currentUserId: d,
              }) {
                let [h, p] = (0, u.R)();
                return (0, i.jsxs)("div", {
                  ref: h,
                  className:
                    "flex flex-col min-w-0 gap-6 flex-1 overflow-y-scroll pt-4",
                  children: [
                    0 === r.length && (0, i.jsx)(c.A, {}),
                    r.map((c, u) => {
                      let h = n?.find(
                        (e) => e.messageId === c.id && e.userId === d,
                      );
                      return (0, i.jsx)(
                        l.e,
                        {
                          sessionId: e,
                          message: c,
                          isLoading: "streaming" === t && r.length - 1 === u,
                          vote: h,
                          setMessages: s,
                          reload: o,
                          isReadonly: a,
                          currentUserId: d,
                        },
                        c.id,
                      );
                    }),
                    "submitted" === t &&
                      r.length > 0 &&
                      "user" === r[r.length - 1].role &&
                      (0, i.jsx)(l.q, {}),
                    (0, i.jsx)("div", {
                      ref: p,
                      className: "shrink-0 min-w-[24px] min-h-[24px]",
                    }),
                  ],
                });
              },
              (e, t) =>
                (!!e.isArtifactVisible && !!t.isArtifactVisible) ||
                (e.status === t.status &&
                  e.messages.length === t.messages.length &&
                  !!o()(e.messages, t.messages) &&
                  !!o()(e.votes, t.votes) &&
                  e.currentUserId === t.currentUserId),
            );
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      52827: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { Artifact: () => T });
            var i = n(61268),
              s = n(99793),
              o = n(63942),
              a = n(14478),
              l = n(63806),
              c = n(14711),
              u = n(96465),
              d = n(27896),
              h = n(15014),
              p = n(90495),
              f = n(89882),
              m = n(84205),
              g = n(28909),
              y = n(5451),
              v = n(93336),
              b = n(78337),
              x = n(77001),
              k = n(87826),
              w = n(15942),
              _ = e([g, y, v, b, x, k, w]);
            function O({ content: e }) {
              return (0, i.jsx)("div", {
                className: "whitespace-pre-wrap",
                children: e,
              });
            }
            function T({ id: e, viewOnly: t = !1, onClose: n, className: r }) {
              let {
                  currentArtifact: _,
                  artifactMessages: T,
                  getArtifact: S,
                  updateArtifact: E,
                  deleteArtifact: C,
                  updateArtifactVisibility: A,
                  isLoading: N,
                } = (0, k.S)(),
                [I, D] = (0, m.useState)("document"),
                [P, R] = (0, m.useState)(!1),
                [M, L] = (0, m.useState)(""),
                [j, F] = (0, m.useState)({ text: "" }),
                [B, z] = (0, m.useState)({ code: "", language: "" }),
                $ = (0, f.useRouter)();
              (0, f.usePathname)();
              let q = async () => {
                  window.confirm(
                    "Are you sure you want to delete this artifact?",
                  ) && (await C(e), n ? n() : $.push("/artifacts"));
                },
                U = async (t) => {
                  await A(e, t);
                },
                H = async () => {
                  if (!_) return;
                  let t =
                    "document" === _.type
                      ? j
                      : "code" === _.type
                        ? B
                        : _.content;
                  await E(e, { title: M, content: t }), R(!1);
                };
              return N || !_
                ? (0, i.jsx)(y.Zp, {
                    className: (0, w.cn)(
                      "w-full h-full min-h-[300px] flex items-center justify-center",
                      r,
                    ),
                    children: (0, i.jsx)("div", {
                      className: "animate-pulse text-muted-foreground",
                      children: "Loading artifact...",
                    }),
                  })
                : (0, i.jsxs)(y.Zp, {
                    className: (0, w.cn)("w-full h-full flex flex-col", r),
                    children: [
                      (0, i.jsxs)(y.aR, {
                        className:
                          "flex flex-row items-center justify-between pb-2 space-y-0",
                        children: [
                          (0, i.jsxs)("div", {
                            className: "flex items-center space-x-2",
                            children: [
                              ((e) => {
                                switch (e) {
                                  case "document":
                                  default:
                                    return (0, i.jsx)(s.A, {
                                      className: "h-5 w-5",
                                    });
                                  case "code":
                                    return (0, i.jsx)(o.A, {
                                      className: "h-5 w-5",
                                    });
                                  case "spreadsheet":
                                    return (0, i.jsx)(a.A, {
                                      className: "h-5 w-5",
                                    });
                                  case "image":
                                    return (0, i.jsx)(l.A, {
                                      className: "h-5 w-5",
                                    });
                                }
                              })(_.type),
                              P
                                ? (0, i.jsx)(b.p, {
                                    value: M,
                                    onChange: (e) => L(e.target.value),
                                    className: "h-7 text-lg font-semibold",
                                  })
                                : (0, i.jsx)(y.ZB, { children: _.title }),
                            ],
                          }),
                          (0, i.jsxs)("div", {
                            className: "flex items-center space-x-2",
                            children: [
                              !t &&
                                (0, i.jsxs)(i.Fragment, {
                                  children: [
                                    (0, i.jsxs)(v.rI, {
                                      children: [
                                        (0, i.jsx)(v.ty, {
                                          asChild: !0,
                                          children: (0, i.jsx)(g.$, {
                                            variant: "ghost",
                                            size: "icon",
                                            className: "h-8 w-8",
                                            children: ((e) => {
                                              switch (e) {
                                                case "public":
                                                  return (0, i.jsx)(c.A, {
                                                    className: "h-4 w-4",
                                                  });
                                                case "team":
                                                  return (0, i.jsx)(u.A, {
                                                    className: "h-4 w-4",
                                                  });
                                                default:
                                                  return (0, i.jsx)(d.A, {
                                                    className: "h-4 w-4",
                                                  });
                                              }
                                            })(_.visibility),
                                          }),
                                        }),
                                        (0, i.jsxs)(v.SQ, {
                                          align: "end",
                                          children: [
                                            (0, i.jsxs)(v._2, {
                                              onClick: () => U("private"),
                                              children: [
                                                (0, i.jsx)(d.A, {
                                                  className: "h-4 w-4 mr-2",
                                                }),
                                                "Private",
                                              ],
                                            }),
                                            (0, i.jsxs)(v._2, {
                                              onClick: () => U("team"),
                                              children: [
                                                (0, i.jsx)(u.A, {
                                                  className: "h-4 w-4 mr-2",
                                                }),
                                                "Team",
                                              ],
                                            }),
                                            (0, i.jsxs)(v._2, {
                                              onClick: () => U("public"),
                                              children: [
                                                (0, i.jsx)(c.A, {
                                                  className: "h-4 w-4 mr-2",
                                                }),
                                                "Public",
                                              ],
                                            }),
                                          ],
                                        }),
                                      ],
                                    }),
                                    P
                                      ? (0, i.jsxs)(i.Fragment, {
                                          children: [
                                            (0, i.jsx)(g.$, {
                                              variant: "ghost",
                                              size: "sm",
                                              onClick: () => {
                                                _ &&
                                                  (L(_.title),
                                                  "document" === _.type &&
                                                  _.content
                                                    ? F(_.content)
                                                    : "code" === _.type &&
                                                      _.content &&
                                                      z(_.content)),
                                                  R(!1);
                                              },
                                              children: "Cancel",
                                            }),
                                            (0, i.jsx)(g.$, {
                                              variant: "default",
                                              size: "sm",
                                              onClick: H,
                                              children: "Save",
                                            }),
                                          ],
                                        })
                                      : (0, i.jsx)(g.$, {
                                          variant: "ghost",
                                          size: "sm",
                                          onClick: () => R(!0),
                                          children: "Edit",
                                        }),
                                    (0, i.jsx)(g.$, {
                                      variant: "ghost",
                                      size: "icon",
                                      className: "h-8 w-8 text-destructive",
                                      onClick: q,
                                      children: (0, i.jsx)(h.A, {
                                        className: "h-4 w-4",
                                      }),
                                    }),
                                  ],
                                }),
                              n &&
                                (0, i.jsx)(g.$, {
                                  variant: "ghost",
                                  size: "icon",
                                  className: "h-8 w-8",
                                  onClick: n,
                                  children: (0, i.jsx)(p.A, {
                                    className: "h-4 w-4",
                                  }),
                                }),
                            ],
                          }),
                        ],
                      }),
                      (0, i.jsx)(y.Wu, {
                        className: "flex-1 p-0 overflow-hidden",
                        children: (0, i.jsxs)(x.Tabs, {
                          value: I,
                          onValueChange: D,
                          className: "h-full flex flex-col",
                          children: [
                            (0, i.jsxs)(x.TabsList, {
                              className: "mx-4",
                              children: [
                                (0, i.jsx)(x.TabsTrigger, {
                                  value: "document",
                                  onClick: () => D("document"),
                                  children: "Document",
                                }),
                                T.length > 0 &&
                                  (0, i.jsxs)(x.TabsTrigger, {
                                    value: "chat",
                                    onClick: () => D("chat"),
                                    children: ["Chat (", T.length, ")"],
                                  }),
                              ],
                            }),
                            (0, i.jsxs)(x.TabsContent, {
                              value: "document",
                              className: "flex-1 p-4 overflow-auto",
                              children: [
                                "document" === _.type &&
                                  (P
                                    ? (0, i.jsx)("div", {
                                        className: "min-h-[300px] font-mono",
                                        children: (0, i.jsx)("textarea", {
                                          value: j?.text || "",
                                          onChange: (e) =>
                                            F({ ...j, text: e.target.value }),
                                          className:
                                            "w-full h-full min-h-[300px] p-2 border rounded-md",
                                        }),
                                      })
                                    : (0, i.jsx)("div", {
                                        className:
                                          "prose dark:prose-invert max-w-none",
                                        children: (0, i.jsx)(O, {
                                          content: _.content?.text || "",
                                        }),
                                      })),
                                "code" === _.type &&
                                  (P
                                    ? (0, i.jsxs)("div", {
                                        className: "space-y-4",
                                        children: [
                                          (0, i.jsxs)("div", {
                                            className: "flex space-x-2",
                                            children: [
                                              (0, i.jsx)(b.p, {
                                                value: B?.fileName || "",
                                                onChange: (e) =>
                                                  z({
                                                    ...B,
                                                    fileName: e.target.value,
                                                  }),
                                                placeholder: "Filename",
                                                className: "w-1/3",
                                              }),
                                              (0, i.jsx)(b.p, {
                                                value: B?.language || "",
                                                onChange: (e) =>
                                                  z({
                                                    ...B,
                                                    language: e.target.value,
                                                  }),
                                                placeholder: "Language",
                                                className: "w-1/3",
                                              }),
                                            ],
                                          }),
                                          (0, i.jsx)("div", {
                                            className:
                                              "min-h-[300px] font-mono",
                                            children: (0, i.jsx)("textarea", {
                                              value: B?.code || "",
                                              onChange: (e) =>
                                                z({
                                                  ...B,
                                                  code: e.target.value,
                                                }),
                                              className:
                                                "w-full h-full min-h-[300px] p-2 border rounded-md font-mono",
                                            }),
                                          }),
                                        ],
                                      })
                                    : (0, i.jsxs)("div", {
                                        className:
                                          "prose dark:prose-invert max-w-none",
                                        children: [
                                          (0, i.jsx)("h3", {
                                            children:
                                              _.content?.fileName || "Code",
                                          }),
                                          (0, i.jsx)("pre", {
                                            className:
                                              "bg-gray-100 dark:bg-gray-800 p-4 rounded-md overflow-auto",
                                            children: (0, i.jsx)("code", {
                                              children: _.content?.code || "",
                                            }),
                                          }),
                                        ],
                                      })),
                              ],
                            }),
                            (0, i.jsx)(x.TabsContent, {
                              value: "chat",
                              className: "flex-1 p-4 overflow-auto",
                              children: (0, i.jsx)("div", {
                                className: "space-y-4",
                                children: T.map((e) =>
                                  (0, i.jsxs)(
                                    "div",
                                    {
                                      className: (0, w.cn)(
                                        "p-3 rounded-lg",
                                        "user" === e.role
                                          ? "bg-primary text-primary-foreground ml-12"
                                          : "bg-muted mr-12",
                                      ),
                                      children: [
                                        (0, i.jsx)("div", {
                                          className: "text-xs font-medium mb-1",
                                          children:
                                            "user" === e.role
                                              ? "You"
                                              : "AI Assistant",
                                        }),
                                        (0, i.jsx)("div", {
                                          children: e.message,
                                        }),
                                      ],
                                    },
                                    e.id,
                                  ),
                                ),
                              }),
                            }),
                          ],
                        }),
                      }),
                      (0, i.jsx)(y.wL, {
                        className: "text-xs text-muted-foreground pt-2 pb-2",
                        children: (0, i.jsxs)("div", {
                          className: "flex items-center space-x-1",
                          children: [
                            (0, i.jsxs)("span", {
                              children: [
                                "Created: ",
                                new Date(_.created_at).toLocaleString(),
                              ],
                            }),
                            (0, i.jsx)("span", { children: "•" }),
                            (0, i.jsxs)("span", {
                              children: [
                                "Updated: ",
                                new Date(_.updated_at).toLocaleString(),
                              ],
                            }),
                          ],
                        }),
                      }),
                    ],
                  });
            }
            ([g, y, v, b, x, k, w] = _.then ? (await _)() : _), r();
          } catch (e) {
            r(e);
          }
        });
      },
      53053: (e) => {
        "use strict";
        e.exports = require("node:diagnostics_channel");
      },
      53414: (e, t, n) => {
        "use strict";
        let r, i;
        n.d(t, { k: () => o });
        var s = n(47483);
        let o = {
          startActiveSpan: (e, t) =>
            r
              ? (i || (i = r.trace.getTracer("drizzle-orm", "0.43.1")),
                (0, s.i)(
                  (n, r) =>
                    r.startActiveSpan(e, (e) => {
                      try {
                        return t(e);
                      } catch (t) {
                        throw (
                          (e.setStatus({
                            code: n.SpanStatusCode.ERROR,
                            message:
                              t instanceof Error ? t.message : "Unknown error",
                          }),
                          t)
                        );
                      } finally {
                        e.end();
                      }
                    }),
                  r,
                  i,
                ))
              : t(),
        };
      },
      53974: (e, t, n) => {
        "use strict";
        let r;
        n.r(t),
          n.d(t, {
            default: () => p,
            generateImageMetadata: () => d,
            generateMetadata: () => u,
            generateViewport: () => h,
          });
        var i = n(63033),
          s = n(26394),
          o = n(60442),
          a = (0, s.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call the default export of \"E:\\\\downloads\\\\Hijraah\\\\apps\\\\web\\\\src\\\\app\\\\not-found.tsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\not-found.tsx",
            "default",
          );
        let l = { ...i },
          c =
            "workUnitAsyncStorage" in l
              ? l.workUnitAsyncStorage
              : "requestAsyncStorage" in l
                ? l.requestAsyncStorage
                : void 0;
        r =
          "function" == typeof a
            ? new Proxy(a, {
                apply: (e, t, n) => {
                  let r, i, s;
                  try {
                    let e = c?.getStore();
                    (r = e?.headers.get("sentry-trace") ?? void 0),
                      (i = e?.headers.get("baggage") ?? void 0),
                      (s = e?.headers);
                  } catch (e) {}
                  return o
                    .wrapServerComponentWithSentry(e, {
                      componentRoute: "/",
                      componentType: "Not-found",
                      sentryTraceHeader: r,
                      baggageHeader: i,
                      headers: s,
                    })
                    .apply(t, n);
                },
              })
            : a;
        let u = void 0,
          d = void 0,
          h = void 0,
          p = r;
      },
      54220: (e) => {
        "use strict";
        let t = "undefined" != typeof Buffer,
          n =
            /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/,
          r =
            /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
        function i(e, i, o) {
          null == o &&
            null !== i &&
            "object" == typeof i &&
            ((o = i), (i = void 0)),
            t && Buffer.isBuffer(e) && (e = e.toString()),
            e && 65279 === e.charCodeAt(0) && (e = e.slice(1));
          let a = JSON.parse(e, i);
          if (null === a || "object" != typeof a) return a;
          let l = (o && o.protoAction) || "error",
            c = (o && o.constructorAction) || "error";
          if ("ignore" === l && "ignore" === c) return a;
          if ("ignore" !== l && "ignore" !== c) {
            if (!1 === n.test(e) && !1 === r.test(e)) return a;
          } else if ("ignore" !== l && "ignore" === c) {
            if (!1 === n.test(e)) return a;
          } else if (!1 === r.test(e)) return a;
          return s(a, {
            protoAction: l,
            constructorAction: c,
            safe: o && o.safe,
          });
        }
        function s(
          e,
          {
            protoAction: t = "error",
            constructorAction: n = "error",
            safe: r,
          } = {},
        ) {
          let i = [e];
          for (; i.length; ) {
            let e = i;
            for (let s of ((i = []), e)) {
              if (
                "ignore" !== t &&
                Object.prototype.hasOwnProperty.call(s, "__proto__")
              ) {
                if (!0 === r) return null;
                if ("error" === t)
                  throw SyntaxError(
                    "Object contains forbidden prototype property",
                  );
                delete s.__proto__;
              }
              if (
                "ignore" !== n &&
                Object.prototype.hasOwnProperty.call(s, "constructor") &&
                Object.prototype.hasOwnProperty.call(s.constructor, "prototype")
              ) {
                if (!0 === r) return null;
                if ("error" === n)
                  throw SyntaxError(
                    "Object contains forbidden prototype property",
                  );
                delete s.constructor;
              }
              for (let e in s) {
                let t = s[e];
                t && "object" == typeof t && i.push(t);
              }
            }
          }
          return e;
        }
        function o(e, t, n) {
          let r = Error.stackTraceLimit;
          Error.stackTraceLimit = 0;
          try {
            return i(e, t, n);
          } finally {
            Error.stackTraceLimit = r;
          }
        }
        (e.exports = o),
          (e.exports.default = o),
          (e.exports.parse = o),
          (e.exports.safeParse = function (e, t) {
            let n = Error.stackTraceLimit;
            Error.stackTraceLimit = 0;
            try {
              return i(e, t, { safe: !0 });
            } catch (e) {
              return null;
            } finally {
              Error.stackTraceLimit = n;
            }
          }),
          (e.exports.scan = s);
      },
      54557: (e, t, n) => {
        "use strict";
        n.d(t, { V: () => i });
        var r = n(92858);
        class i {
          constructor(e, t) {
            (this.table = e),
              (this.config = t),
              (this.name = t.name),
              (this.keyAsName = t.keyAsName),
              (this.notNull = t.notNull),
              (this.default = t.default),
              (this.defaultFn = t.defaultFn),
              (this.onUpdateFn = t.onUpdateFn),
              (this.hasDefault = t.hasDefault),
              (this.primary = t.primaryKey),
              (this.isUnique = t.isUnique),
              (this.uniqueName = t.uniqueName),
              (this.uniqueType = t.uniqueType),
              (this.dataType = t.dataType),
              (this.columnType = t.columnType),
              (this.generated = t.generated),
              (this.generatedIdentity = t.generatedIdentity);
          }
          static [r.i] = "Column";
          name;
          keyAsName;
          primary;
          notNull;
          default;
          defaultFn;
          onUpdateFn;
          hasDefault;
          isUnique;
          uniqueName;
          uniqueType;
          dataType;
          columnType;
          enumValues = void 0;
          generated = void 0;
          generatedIdentity = void 0;
          config;
          mapFromDriverValue(e) {
            return e;
          }
          mapToDriverValue(e) {
            return e;
          }
          shouldDisableInsert() {
            return (
              void 0 !== this.config.generated &&
              "byDefault" !== this.config.generated.type
            );
          }
        }
      },
      55359: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { r: () => x });
            var i = n(61268),
              s = n(15324),
              o = n(89882),
              a = n(84205),
              l = n(16235),
              c = n(17407),
              u = n(90771),
              d = n(69127),
              h = n(15942),
              p = n(52827),
              f = n(90733),
              m = n(51337),
              g = n(26708),
              y = n(38590),
              v = n(98654),
              b = e([h, p, f, m, g, y, s]);
            function x({
              id: e,
              initialMessages: t,
              initialChatModel: n,
              initialVisibility: r,
              isReadonly: b,
              session: x,
              autoResume: k,
            }) {
              let { mutate: w } = (0, l.iX)(),
                _ = x?.user?.id,
                { visibilityType: O } = (0, d.I)({
                  chatId: e,
                  initialVisibility: r,
                }),
                {
                  messages: T,
                  setMessages: S,
                  handleSubmit: E,
                  input: C,
                  setInput: A,
                  append: N,
                  status: I,
                  stop: D,
                  reload: P,
                } = (0, s.Y_)({
                  id: e,
                  initialMessages: t,
                  experimental_throttle: 100,
                  sendExtraMessageFields: !0,
                  generateId: h.lk,
                  experimental_prepareRequestBody: (t) => ({
                    id: e,
                    messages: t.messages,
                    selectedChatModel: n,
                    visibility: O,
                  }),
                  onFinish: () => {
                    w((0, u.WI)(y.iN));
                  },
                  onError: (e) => {
                    v.oR.error(e.message);
                  },
                });
              (0, o.useSearchParams)().get("query");
              let [R, M] = (0, a.useState)(!1),
                { data: L } = (0, c.Ay)(
                  T.length >= 2 && e ? `/api/vote?sessionId=${e}` : null,
                  h.GO,
                ),
                [j, F] = (0, a.useState)([]);
              return (0, i.jsxs)(i.Fragment, {
                children: [
                  (0, i.jsxs)("div", {
                    className: "flex flex-col min-w-0 h-dvh bg-background",
                    children: [
                      (0, i.jsx)(f.e, {
                        chatId: e,
                        selectedModelId: n,
                        visibility: O,
                        isReadonly: b,
                      }),
                      (0, i.jsx)(m.B, {
                        sessionId: e,
                        status: I,
                        votes: L,
                        messages: T,
                        setMessages: S,
                        reload: P,
                        isReadonly: b,
                        isArtifactVisible: !1,
                        currentUserId: _,
                      }),
                      (0, i.jsx)("form", {
                        className:
                          "flex mx-auto px-4 bg-background pb-4 md:pb-6 gap-2 w-full md:max-w-3xl",
                        children:
                          !b &&
                          (0, i.jsx)(g.Z, {
                            chatId: e,
                            input: C,
                            setInput: A,
                            status: I,
                            stop: D,
                            attachments: j,
                            setAttachments: F,
                            messages: T,
                            setMessages: S,
                            append: N,
                          }),
                      }),
                    ],
                  }),
                  (0, i.jsx)(p.Artifact, { id: e, viewOnly: b }),
                ],
              });
            }
            ([h, p, f, m, g, y, s] = b.then ? (await b)() : b), r();
          } catch (e) {
            r(e);
          }
        });
      },
      55511: (e) => {
        "use strict";
        e.exports = require("crypto");
      },
      55591: (e) => {
        "use strict";
        e.exports = require("https");
      },
      55843: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "U", {
          enumerable: !0,
          get: function () {
            return h;
          },
        });
        let r = n(61423),
          i = n(57716),
          s = n(29294),
          o = n(63033),
          a = n(4935),
          l = n(78575),
          c = n(82984),
          u = n(59692),
          d = (n(96456), n(97237));
        function h() {
          let e = "cookies",
            t = s.workAsyncStorage.getStore(),
            n = o.workUnitAsyncStorage.getStore();
          if (t) {
            if (
              n &&
              "after" === n.phase &&
              !(0, d.isRequestAPICallableInsideAfter)()
            )
              throw Object.defineProperty(
                Error(
                  `Route ${t.route} used "cookies" inside "after(...)". This is not supported. If you need this data inside an "after" callback, use "cookies" outside of the callback. See more info here: https://nextjs.org/docs/canary/app/api-reference/functions/after`,
                ),
                "__NEXT_ERROR_CODE",
                { value: "E88", enumerable: !1, configurable: !0 },
              );
            if (t.forceStatic)
              return f(
                r.RequestCookiesAdapter.seal(
                  new i.RequestCookies(new Headers({})),
                ),
              );
            if (n) {
              if ("cache" === n.type)
                throw Object.defineProperty(
                  Error(
                    `Route ${t.route} used "cookies" inside "use cache". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "cookies" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`,
                  ),
                  "__NEXT_ERROR_CODE",
                  { value: "E398", enumerable: !1, configurable: !0 },
                );
              else if ("unstable-cache" === n.type)
                throw Object.defineProperty(
                  Error(
                    `Route ${t.route} used "cookies" inside a function cached with "unstable_cache(...)". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "cookies" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`,
                  ),
                  "__NEXT_ERROR_CODE",
                  { value: "E157", enumerable: !1, configurable: !0 },
                );
            }
            if (t.dynamicShouldError)
              throw Object.defineProperty(
                new l.StaticGenBailoutError(
                  `Route ${t.route} with \`dynamic = "error"\` couldn't be rendered statically because it used \`cookies\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`,
                ),
                "__NEXT_ERROR_CODE",
                { value: "E549", enumerable: !1, configurable: !0 },
              );
            if (n)
              if ("prerender" === n.type) {
                var u = t.route,
                  h = n;
                let e = p.get(h);
                if (e) return e;
                let r = (0, c.makeHangingPromise)(
                  h.renderSignal,
                  "`cookies()`",
                );
                return (
                  p.set(h, r),
                  Object.defineProperties(r, {
                    [Symbol.iterator]: {
                      value: function () {
                        let e = "`cookies()[Symbol.iterator]()`",
                          t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                    size: {
                      get() {
                        let e = "`cookies().size`",
                          t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                    get: {
                      value: function () {
                        let e;
                        e =
                          0 == arguments.length
                            ? "`cookies().get()`"
                            : `\`cookies().get(${m(arguments[0])})\``;
                        let t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                    getAll: {
                      value: function () {
                        let e;
                        e =
                          0 == arguments.length
                            ? "`cookies().getAll()`"
                            : `\`cookies().getAll(${m(arguments[0])})\``;
                        let t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                    has: {
                      value: function () {
                        let e;
                        e =
                          0 == arguments.length
                            ? "`cookies().has()`"
                            : `\`cookies().has(${m(arguments[0])})\``;
                        let t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                    set: {
                      value: function () {
                        let e;
                        if (0 == arguments.length) e = "`cookies().set()`";
                        else {
                          let t = arguments[0];
                          e = t
                            ? `\`cookies().set(${m(t)}, ...)\``
                            : "`cookies().set(...)`";
                        }
                        let t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                    delete: {
                      value: function () {
                        let e;
                        e =
                          0 == arguments.length
                            ? "`cookies().delete()`"
                            : 1 == arguments.length
                              ? `\`cookies().delete(${m(arguments[0])})\``
                              : `\`cookies().delete(${m(arguments[0])}, ...)\``;
                        let t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                    clear: {
                      value: function () {
                        let e = "`cookies().clear()`",
                          t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                    toString: {
                      value: function () {
                        let e = "`cookies().toString()`",
                          t = y(u, e);
                        (0, a.abortAndThrowOnSynchronousRequestDataAccess)(
                          u,
                          e,
                          t,
                          h,
                        );
                      },
                    },
                  }),
                  r
                );
              } else
                "prerender-ppr" === n.type
                  ? (0, a.postponeWithTracking)(t.route, e, n.dynamicTracking)
                  : "prerender-legacy" === n.type &&
                    (0, a.throwToInterruptStaticGeneration)(e, t, n);
            (0, a.trackDynamicDataInDynamicRender)(t, n);
          }
          let g = (0, o.getExpectedRequestStore)(e);
          return f(
            (0, r.areCookiesMutableInCurrentPhase)(g)
              ? g.userspaceMutableCookies
              : g.cookies,
          );
        }
        let p = new WeakMap();
        function f(e) {
          let t = p.get(e);
          if (t) return t;
          let n = Promise.resolve(e);
          return (
            p.set(e, n),
            Object.defineProperties(n, {
              [Symbol.iterator]: {
                value: e[Symbol.iterator]
                  ? e[Symbol.iterator].bind(e)
                  : v.bind(e),
              },
              size: { get: () => e.size },
              get: { value: e.get.bind(e) },
              getAll: { value: e.getAll.bind(e) },
              has: { value: e.has.bind(e) },
              set: { value: e.set.bind(e) },
              delete: { value: e.delete.bind(e) },
              clear: {
                value:
                  "function" == typeof e.clear ? e.clear.bind(e) : b.bind(e, n),
              },
              toString: { value: e.toString.bind(e) },
            }),
            n
          );
        }
        function m(e) {
          return "object" == typeof e && null !== e && "string" == typeof e.name
            ? `'${e.name}'`
            : "string" == typeof e
              ? `'${e}'`
              : "...";
        }
        let g = (0, u.createDedupedByCallsiteServerErrorLoggerDev)(y);
        function y(e, t) {
          let n = e ? `Route "${e}" ` : "This route ";
          return Object.defineProperty(
            Error(
              `${n}used ${t}. \`cookies()\` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`,
            ),
            "__NEXT_ERROR_CODE",
            { value: "E223", enumerable: !1, configurable: !0 },
          );
        }
        function v() {
          return this.getAll()
            .map((e) => [e.name, e])
            .values();
        }
        function b(e) {
          for (let e of this.getAll()) this.delete(e.name);
          return e;
        }
      },
      56162: (e, t, n) => {
        "use strict";
        n.d(t, { f: () => eC });
        var r = n(27480),
          i = n(92858);
        class s {
          static [i.i] = "ConsoleLogWriter";
          write(e) {
            console.log(e);
          }
        }
        class o {
          static [i.i] = "DefaultLogger";
          writer;
          constructor(e) {
            this.writer = e?.writer ?? new s();
          }
          logQuery(e, t) {
            let n = t.map((e) => {
                try {
                  return JSON.stringify(e);
                } catch {
                  return String(e);
                }
              }),
              r = n.length ? ` -- params: [${n.join(", ")}]` : "";
            this.writer.write(`Query: ${e}${r}`);
          }
        }
        class a {
          static [i.i] = "NoopLogger";
          logQuery() {}
        }
        var l = n(54557),
          c = n(18720),
          u = n(3021),
          d = n(32566);
        class h {
          constructor(e) {
            this.table = e;
          }
          static [i.i] = "ColumnAliasProxyHandler";
          get(e, t) {
            return "table" === t ? this.table : e[t];
          }
        }
        class p {
          constructor(e, t) {
            (this.alias = e), (this.replaceOriginalName = t);
          }
          static [i.i] = "TableAliasProxyHandler";
          get(e, t) {
            if (t === u.XI.Symbol.IsAlias) return !0;
            if (
              t === u.XI.Symbol.Name ||
              (this.replaceOriginalName && t === u.XI.Symbol.OriginalName)
            )
              return this.alias;
            if (t === d.n) return { ...e[d.n], name: this.alias, isAlias: !0 };
            if (t === u.XI.Symbol.Columns) {
              let t = e[u.XI.Symbol.Columns];
              if (!t) return t;
              let n = {};
              return (
                Object.keys(t).map((r) => {
                  n[r] = new Proxy(t[r], new h(new Proxy(e, this)));
                }),
                n
              );
            }
            let n = e[t];
            return (0, i.is)(n, l.V)
              ? new Proxy(n, new h(new Proxy(e, this)))
              : n;
          }
        }
        class f {
          constructor(e) {
            this.alias = e;
          }
          static [i.i] = null;
          get(e, t) {
            return "sourceTable" === t ? m(e.sourceTable, this.alias) : e[t];
          }
        }
        function m(e, t) {
          return new Proxy(e, new p(t, !1));
        }
        function g(e, t) {
          return new Proxy(e, new h(new Proxy(e.table, new p(t, !1))));
        }
        function y(e, t) {
          return new c.Xs.Aliased(v(e.sql, t), e.fieldAlias);
        }
        function v(e, t) {
          return c.ll.join(
            e.queryChunks.map((e) =>
              (0, i.is)(e, l.V)
                ? g(e, t)
                : (0, i.is)(e, c.Xs)
                  ? v(e, t)
                  : (0, i.is)(e, c.Xs.Aliased)
                    ? y(e, t)
                    : e,
            ),
          );
        }
        function b(e) {
          return (
            e
              .replace(/['\u2019]/g, "")
              .match(/[\da-z]+|[A-Z]+(?![a-z])|[A-Z][\da-z]+/g) ?? []
          )
            .map((e) => e.toLowerCase())
            .join("_");
        }
        function x(e) {
          return (
            e
              .replace(/['\u2019]/g, "")
              .match(/[\da-z]+|[A-Z]+(?![a-z])|[A-Z][\da-z]+/g) ?? []
          ).reduce(
            (e, t, n) =>
              e +
              (0 === n
                ? t.toLowerCase()
                : `${t[0].toUpperCase()}${t.slice(1)}`),
            "",
          );
        }
        function k(e) {
          return e;
        }
        class w {
          static [i.i] = "CasingCache";
          cache = {};
          cachedTables = {};
          convert;
          constructor(e) {
            this.convert = "snake_case" === e ? b : "camelCase" === e ? x : k;
          }
          getColumnCasing(e) {
            if (!e.keyAsName) return e.name;
            let t = e.table[u.XI.Symbol.Schema] ?? "public",
              n = e.table[u.XI.Symbol.OriginalName],
              r = `${t}.${n}.${e.name}`;
            return this.cache[r] || this.cacheTable(e.table), this.cache[r];
          }
          cacheTable(e) {
            let t = e[u.XI.Symbol.Schema] ?? "public",
              n = e[u.XI.Symbol.OriginalName],
              r = `${t}.${n}`;
            if (!this.cachedTables[r]) {
              for (let t of Object.values(e[u.XI.Symbol.Columns])) {
                let e = `${r}.${t.name}`;
                this.cache[e] = this.convert(t.name);
              }
              this.cachedTables[r] = !0;
            }
          }
          clearCache() {
            (this.cache = {}), (this.cachedTables = {});
          }
        }
        class _ extends Error {
          static [i.i] = "DrizzleError";
          constructor({ message: e, cause: t }) {
            super(e), (this.name = "DrizzleError"), (this.cause = t);
          }
        }
        class O extends _ {
          static [i.i] = "TransactionRollbackError";
          constructor() {
            super({ message: "Rollback" });
          }
        }
        var T = n(43758),
          S = n(50305),
          E = n(90377),
          C = n(82655),
          A = n(50840),
          N = n(71721),
          I = n(14555),
          D = n(89138),
          P = n(8325),
          R = n(67712),
          M = n(93678);
        function L(e) {
          return (0, c.ll)`${e} asc`;
        }
        function j(e) {
          return (0, c.ll)`${e} desc`;
        }
        class F {
          constructor(e, t, n) {
            (this.sourceTable = e),
              (this.referencedTable = t),
              (this.relationName = n),
              (this.referencedTableName = t[u.XI.Symbol.Name]);
          }
          static [i.i] = "Relation";
          referencedTableName;
          fieldName;
        }
        class B {
          constructor(e, t) {
            (this.table = e), (this.config = t);
          }
          static [i.i] = "Relations";
        }
        class z extends F {
          constructor(e, t, n, r) {
            super(e, t, n?.relationName),
              (this.config = n),
              (this.isNullable = r);
          }
          static [i.i] = "One";
          withFieldName(e) {
            let t = new z(
              this.sourceTable,
              this.referencedTable,
              this.config,
              this.isNullable,
            );
            return (t.fieldName = e), t;
          }
        }
        class $ extends F {
          constructor(e, t, n) {
            super(e, t, n?.relationName), (this.config = n);
          }
          static [i.i] = "Many";
          withFieldName(e) {
            let t = new $(this.sourceTable, this.referencedTable, this.config);
            return (t.fieldName = e), t;
          }
        }
        function q(e) {
          return {
            one: function (t, n) {
              return new z(
                e,
                t,
                n,
                n?.fields.reduce((e, t) => e && t.notNull, !0) ?? !1,
              );
            },
            many: function (t, n) {
              return new $(e, t, n);
            },
          };
        }
        var U = n(537),
          H = n(43326);
        class Q extends c.Ss {
          static [i.i] = "PgViewBase";
        }
        class V {
          static [i.i] = "PgDialect";
          casing;
          constructor(e) {
            this.casing = new w(e?.casing);
          }
          async migrate(e, t, n) {
            let r =
                "string" == typeof n
                  ? "__drizzle_migrations"
                  : (n.migrationsTable ?? "__drizzle_migrations"),
              i =
                "string" == typeof n
                  ? "drizzle"
                  : (n.migrationsSchema ?? "drizzle"),
              s = (0, c.ll)`
			CREATE TABLE IF NOT EXISTS ${c.ll.identifier(i)}.${c.ll.identifier(r)} (
				id SERIAL PRIMARY KEY,
				hash text NOT NULL,
				created_at bigint
			)
		`;
            await t.execute(
              (0, c.ll)`CREATE SCHEMA IF NOT EXISTS ${c.ll.identifier(i)}`,
            ),
              await t.execute(s);
            let o = (
              await t.all(
                (0,
                c.ll)`select id, hash, created_at from ${c.ll.identifier(i)}.${c.ll.identifier(r)} order by created_at desc limit 1`,
              )
            )[0];
            await t.transaction(async (t) => {
              for await (let n of e)
                if (!o || Number(o.created_at) < n.folderMillis) {
                  for (let e of n.sql) await t.execute(c.ll.raw(e));
                  await t.execute(
                    (0,
                    c.ll)`insert into ${c.ll.identifier(i)}.${c.ll.identifier(r)} ("hash", "created_at") values(${n.hash}, ${n.folderMillis})`,
                  );
                }
            });
          }
          escapeName(e) {
            return `"${e}"`;
          }
          escapeParam(e) {
            return `$${e + 1}`;
          }
          escapeString(e) {
            return `'${e.replace(/'/g, "''")}'`;
          }
          buildWithCTE(e) {
            if (!e?.length) return;
            let t = [(0, c.ll)`with `];
            for (let [n, r] of e.entries())
              t.push((0, c.ll)`${c.ll.identifier(r._.alias)} as (${r._.sql})`),
                n < e.length - 1 && t.push((0, c.ll)`, `);
            return t.push((0, c.ll)` `), c.ll.join(t);
          }
          buildDeleteQuery({ table: e, where: t, returning: n, withList: r }) {
            let i = this.buildWithCTE(r),
              s = n
                ? (0,
                  c.ll)` returning ${this.buildSelection(n, { isSingleTable: !0 })}`
                : void 0,
              o = t ? (0, c.ll)` where ${t}` : void 0;
            return (0, c.ll)`${i}delete from ${e}${o}${s}`;
          }
          buildUpdateSet(e, t) {
            let n = e[u.XI.Symbol.Columns],
              r = Object.keys(n).filter(
                (e) => void 0 !== t[e] || n[e]?.onUpdateFn !== void 0,
              ),
              i = r.length;
            return c.ll.join(
              r.flatMap((e, r) => {
                let s = n[e],
                  o = t[e] ?? c.ll.param(s.onUpdateFn(), s),
                  a = (0,
                  c.ll)`${c.ll.identifier(this.casing.getColumnCasing(s))} = ${o}`;
                return r < i - 1 ? [a, c.ll.raw(", ")] : [a];
              }),
            );
          }
          buildUpdateQuery({
            table: e,
            set: t,
            where: n,
            returning: r,
            withList: i,
            from: s,
            joins: o,
          }) {
            let a = this.buildWithCTE(i),
              l = e[P.mu.Symbol.Name],
              u = e[P.mu.Symbol.Schema],
              d = e[P.mu.Symbol.OriginalName],
              h = l === d ? void 0 : l,
              p = (0,
              c.ll)`${u ? (0, c.ll)`${c.ll.identifier(u)}.` : void 0}${c.ll.identifier(d)}${h && (0, c.ll)` ${c.ll.identifier(h)}`}`,
              f = this.buildUpdateSet(e, t),
              m = s && c.ll.join([c.ll.raw(" from "), this.buildFromTable(s)]),
              g = this.buildJoins(o),
              y = r
                ? (0,
                  c.ll)` returning ${this.buildSelection(r, { isSingleTable: !s })}`
                : void 0,
              v = n ? (0, c.ll)` where ${n}` : void 0;
            return (0, c.ll)`${a}update ${p} set ${f}${m}${g}${v}${y}`;
          }
          buildSelection(e, { isSingleTable: t = !1 } = {}) {
            let n = e.length,
              r = e.flatMap(({ field: e }, r) => {
                let s = [];
                if ((0, i.is)(e, c.Xs.Aliased) && e.isSelectionField)
                  s.push(c.ll.identifier(e.fieldAlias));
                else if ((0, i.is)(e, c.Xs.Aliased) || (0, i.is)(e, c.Xs)) {
                  let n = (0, i.is)(e, c.Xs.Aliased) ? e.sql : e;
                  t
                    ? s.push(
                        new c.Xs(
                          n.queryChunks.map((e) =>
                            (0, i.is)(e, T.Kl)
                              ? c.ll.identifier(this.casing.getColumnCasing(e))
                              : e,
                          ),
                        ),
                      )
                    : s.push(n),
                    (0, i.is)(e, c.Xs.Aliased) &&
                      s.push((0, c.ll)` as ${c.ll.identifier(e.fieldAlias)}`);
                } else
                  (0, i.is)(e, l.V) &&
                    (t
                      ? s.push(c.ll.identifier(this.casing.getColumnCasing(e)))
                      : s.push(e));
                return r < n - 1 && s.push((0, c.ll)`, `), s;
              });
            return c.ll.join(r);
          }
          buildJoins(e) {
            if (!e || 0 === e.length) return;
            let t = [];
            for (let [n, r] of e.entries()) {
              0 === n && t.push((0, c.ll)` `);
              let s = r.table,
                o = r.lateral ? (0, c.ll)` lateral` : void 0,
                a = r.on ? (0, c.ll)` on ${r.on}` : void 0;
              if ((0, i.is)(s, P.mu)) {
                let e = s[P.mu.Symbol.Name],
                  n = s[P.mu.Symbol.Schema],
                  i = s[P.mu.Symbol.OriginalName],
                  l = e === i ? void 0 : r.alias;
                t.push(
                  (0,
                  c.ll)`${c.ll.raw(r.joinType)} join${o} ${n ? (0, c.ll)`${c.ll.identifier(n)}.` : void 0}${c.ll.identifier(i)}${l && (0, c.ll)` ${c.ll.identifier(l)}`}${a}`,
                );
              } else if ((0, i.is)(s, c.Ss)) {
                let e = s[d.n].name,
                  n = s[d.n].schema,
                  i = s[d.n].originalName,
                  l = e === i ? void 0 : r.alias;
                t.push(
                  (0,
                  c.ll)`${c.ll.raw(r.joinType)} join${o} ${n ? (0, c.ll)`${c.ll.identifier(n)}.` : void 0}${c.ll.identifier(i)}${l && (0, c.ll)` ${c.ll.identifier(l)}`}${a}`,
                );
              } else
                t.push((0, c.ll)`${c.ll.raw(r.joinType)} join${o} ${s}${a}`);
              n < e.length - 1 && t.push((0, c.ll)` `);
            }
            return c.ll.join(t);
          }
          buildFromTable(e) {
            if ((0, i.is)(e, u.XI) && e[u.XI.Symbol.IsAlias]) {
              let t = (0,
              c.ll)`${c.ll.identifier(e[u.XI.Symbol.OriginalName])}`;
              return (
                e[u.XI.Symbol.Schema] &&
                  (t = (0,
                  c.ll)`${c.ll.identifier(e[u.XI.Symbol.Schema])}.${t}`),
                (0, c.ll)`${t} ${c.ll.identifier(e[u.XI.Symbol.Name])}`
              );
            }
            return e;
          }
          buildSelectQuery({
            withList: e,
            fields: t,
            fieldsFlat: n,
            where: r,
            having: s,
            table: o,
            joins: a,
            orderBy: h,
            groupBy: p,
            limit: f,
            offset: m,
            lockingClause: g,
            distinct: y,
            setOperators: v,
          }) {
            let b,
              x,
              k,
              w = n ?? (0, H.He)(t);
            for (let e of w) {
              let t;
              if (
                (0, i.is)(e.field, l.V) &&
                (0, u.Io)(e.field.table) !==
                  ((0, i.is)(o, U.n)
                    ? o._.alias
                    : (0, i.is)(o, Q)
                      ? o[d.n].name
                      : (0, i.is)(o, c.Xs)
                        ? void 0
                        : (0, u.Io)(o)) &&
                ((t = e.field.table),
                !a?.some(
                  ({ alias: e }) =>
                    e ===
                    (t[u.XI.Symbol.IsAlias]
                      ? (0, u.Io)(t)
                      : t[u.XI.Symbol.BaseName]),
                ))
              ) {
                let t = (0, u.Io)(e.field.table);
                throw Error(
                  `Your "${e.path.join("->")}" field references a column "${t}"."${e.field.name}", but the table "${t}" is not part of the query! Did you forget to join it?`,
                );
              }
            }
            let _ = !a || 0 === a.length,
              O = this.buildWithCTE(e);
            y &&
              (b =
                !0 === y
                  ? (0, c.ll)` distinct`
                  : (0,
                    c.ll)` distinct on (${c.ll.join(y.on, (0, c.ll)`, `)})`);
            let T = this.buildSelection(w, { isSingleTable: _ }),
              S = this.buildFromTable(o),
              E = this.buildJoins(a),
              C = r ? (0, c.ll)` where ${r}` : void 0,
              A = s ? (0, c.ll)` having ${s}` : void 0;
            h &&
              h.length > 0 &&
              (x = (0, c.ll)` order by ${c.ll.join(h, (0, c.ll)`, `)}`),
              p &&
                p.length > 0 &&
                (k = (0, c.ll)` group by ${c.ll.join(p, (0, c.ll)`, `)}`);
            let N =
                "object" == typeof f || ("number" == typeof f && f >= 0)
                  ? (0, c.ll)` limit ${f}`
                  : void 0,
              I = m ? (0, c.ll)` offset ${m}` : void 0,
              D = c.ll.empty();
            if (g) {
              let e = (0, c.ll)` for ${c.ll.raw(g.strength)}`;
              g.config.of &&
                e.append(
                  (0,
                  c.ll)` of ${c.ll.join(Array.isArray(g.config.of) ? g.config.of : [g.config.of], (0, c.ll)`, `)}`,
                ),
                g.config.noWait
                  ? e.append((0, c.ll)` nowait`)
                  : g.config.skipLocked && e.append((0, c.ll)` skip locked`),
                D.append(e);
            }
            let P = (0,
            c.ll)`${O}select${b} ${T} from ${S}${E}${C}${k}${A}${x}${N}${I}${D}`;
            return v.length > 0 ? this.buildSetOperations(P, v) : P;
          }
          buildSetOperations(e, t) {
            let [n, ...r] = t;
            if (!n)
              throw Error("Cannot pass undefined values to any set operator");
            return 0 === r.length
              ? this.buildSetOperationQuery({ leftSelect: e, setOperator: n })
              : this.buildSetOperations(
                  this.buildSetOperationQuery({
                    leftSelect: e,
                    setOperator: n,
                  }),
                  r,
                );
          }
          buildSetOperationQuery({
            leftSelect: e,
            setOperator: {
              type: t,
              isAll: n,
              rightSelect: r,
              limit: s,
              orderBy: o,
              offset: a,
            },
          }) {
            let l,
              u = (0, c.ll)`(${e.getSQL()}) `,
              d = (0, c.ll)`(${r.getSQL()})`;
            if (o && o.length > 0) {
              let e = [];
              for (let t of o)
                if ((0, i.is)(t, T.Kl)) e.push(c.ll.identifier(t.name));
                else if ((0, i.is)(t, c.Xs)) {
                  for (let e = 0; e < t.queryChunks.length; e++) {
                    let n = t.queryChunks[e];
                    (0, i.is)(n, T.Kl) &&
                      (t.queryChunks[e] = c.ll.identifier(n.name));
                  }
                  e.push((0, c.ll)`${t}`);
                } else e.push((0, c.ll)`${t}`);
              l = (0, c.ll)` order by ${c.ll.join(e, (0, c.ll)`, `)} `;
            }
            let h =
                "object" == typeof s || ("number" == typeof s && s >= 0)
                  ? (0, c.ll)` limit ${s}`
                  : void 0,
              p = c.ll.raw(`${t} ${n ? "all " : ""}`),
              f = a ? (0, c.ll)` offset ${a}` : void 0;
            return (0, c.ll)`${u}${p}${d}${l}${h}${f}`;
          }
          buildInsertQuery({
            table: e,
            values: t,
            onConflict: n,
            returning: r,
            withList: s,
            select: o,
            overridingSystemValue_: a,
          }) {
            let l = [],
              d = Object.entries(e[u.XI.Symbol.Columns]).filter(
                ([e, t]) => !t.shouldDisableInsert(),
              ),
              h = d.map(([, e]) =>
                c.ll.identifier(this.casing.getColumnCasing(e)),
              );
            if (o) (0, i.is)(t, c.Xs) ? l.push(t) : l.push(t.getSQL());
            else
              for (let [e, n] of (l.push(c.ll.raw("values ")), t.entries())) {
                let r = [];
                for (let [e, t] of d) {
                  let s = n[e];
                  if (
                    void 0 === s ||
                    ((0, i.is)(s, c.Iw) && void 0 === s.value)
                  )
                    if (void 0 !== t.defaultFn) {
                      let e = t.defaultFn(),
                        n = (0, i.is)(e, c.Xs) ? e : c.ll.param(e, t);
                      r.push(n);
                    } else if (t.default || void 0 === t.onUpdateFn)
                      r.push((0, c.ll)`default`);
                    else {
                      let e = t.onUpdateFn(),
                        n = (0, i.is)(e, c.Xs) ? e : c.ll.param(e, t);
                      r.push(n);
                    }
                  else r.push(s);
                }
                l.push(r), e < t.length - 1 && l.push((0, c.ll)`, `);
              }
            let p = this.buildWithCTE(s),
              f = c.ll.join(l),
              m = r
                ? (0,
                  c.ll)` returning ${this.buildSelection(r, { isSingleTable: !0 })}`
                : void 0,
              g = n ? (0, c.ll)` on conflict ${n}` : void 0,
              y = !0 === a ? (0, c.ll)`overriding system value ` : void 0;
            return (0, c.ll)`${p}insert into ${e} ${h} ${y}${f}${g}${m}`;
          }
          buildRefreshMaterializedViewQuery({
            view: e,
            concurrently: t,
            withNoData: n,
          }) {
            let r = t ? (0, c.ll)` concurrently` : void 0,
              i = n ? (0, c.ll)` with no data` : void 0;
            return (0, c.ll)`refresh materialized view${r} ${e}${i}`;
          }
          prepareTyping(e) {
            if ((0, i.is)(e, S.kn) || (0, i.is)(e, E.iX)) return "json";
            if ((0, i.is)(e, C.Z5)) return "decimal";
            if ((0, i.is)(e, A.Xd)) return "time";
            if ((0, i.is)(e, N.KM) || (0, i.is)(e, N.xQ)) return "timestamp";
            if ((0, i.is)(e, I.qw) || (0, i.is)(e, I.dw)) return "date";
            else if ((0, i.is)(e, D.dL)) return "uuid";
            else return "none";
          }
          sqlToQuery(e, t) {
            return e.toQuery({
              casing: this.casing,
              escapeName: this.escapeName,
              escapeParam: this.escapeParam,
              escapeString: this.escapeString,
              prepareTyping: this.prepareTyping,
              invokeSource: t,
            });
          }
          buildRelationalQueryWithoutPK({
            fullSchema: e,
            schema: t,
            tableNamesMap: n,
            table: r,
            tableConfig: s,
            queryConfig: o,
            tableAlias: a,
            nestedQueryRelation: d,
            joinOn: h,
          }) {
            let p,
              f = [],
              b,
              x,
              k = [],
              w,
              O = [];
            if (!0 === o)
              f = Object.entries(s.columns).map(([e, t]) => ({
                dbKey: t.name,
                tsKey: e,
                field: g(t, a),
                relationTableTsKey: void 0,
                isJson: !1,
                selection: [],
              }));
            else {
              let r = Object.fromEntries(
                Object.entries(s.columns).map(([e, t]) => [e, g(t, a)]),
              );
              if (o.where) {
                let e =
                  "function" == typeof o.where
                    ? o.where(r, {
                        and: M.Uo,
                        between: M.Tq,
                        eq: M.eq,
                        exists: M.t2,
                        gt: M.gt,
                        gte: M.RO,
                        ilike: M.B3,
                        inArray: M.RV,
                        isNull: M.kZ,
                        isNotNull: M.Pe,
                        like: M.mj,
                        lt: M.lt,
                        lte: M.wJ,
                        ne: M.ne,
                        not: M.AU,
                        notBetween: M.o8,
                        notExists: M.KJ,
                        notLike: M.RK,
                        notIlike: M.q1,
                        notInArray: M.KL,
                        or: M.or,
                        sql: c.ll,
                      })
                    : o.where;
                w = e && v(e, a);
              }
              let d = [],
                h = [];
              if (o.columns) {
                let e = !1;
                for (let [t, n] of Object.entries(o.columns))
                  void 0 !== n &&
                    t in s.columns &&
                    (e || !0 !== n || (e = !0), h.push(t));
                h.length > 0 &&
                  (h = e
                    ? h.filter((e) => o.columns?.[e] === !0)
                    : Object.keys(s.columns).filter((e) => !h.includes(e)));
              } else h = Object.keys(s.columns);
              for (let e of h) {
                let t = s.columns[e];
                d.push({ tsKey: e, value: t });
              }
              let p = [];
              if (
                (o.with &&
                  (p = Object.entries(o.with)
                    .filter((e) => !!e[1])
                    .map(([e, t]) => ({
                      tsKey: e,
                      queryConfig: t,
                      relation: s.relations[e],
                    }))),
                o.extras)
              )
                for (let [e, t] of Object.entries(
                  "function" == typeof o.extras
                    ? o.extras(r, { sql: c.ll })
                    : o.extras,
                ))
                  d.push({ tsKey: e, value: y(t, a) });
              for (let { tsKey: e, value: t } of d)
                f.push({
                  dbKey: (0, i.is)(t, c.Xs.Aliased)
                    ? t.fieldAlias
                    : s.columns[e].name,
                  tsKey: e,
                  field: (0, i.is)(t, l.V) ? g(t, a) : t,
                  relationTableTsKey: void 0,
                  isJson: !1,
                  selection: [],
                });
              let m =
                "function" == typeof o.orderBy
                  ? o.orderBy(r, { sql: c.ll, asc: L, desc: j })
                  : (o.orderBy ?? []);
              for (let {
                tsKey: r,
                queryConfig: s,
                relation: d,
              } of (Array.isArray(m) || (m = [m]),
              (k = m.map((e) => ((0, i.is)(e, l.V) ? g(e, a) : v(e, a)))),
              (b = o.limit),
              (x = o.offset),
              p)) {
                let o = (function (e, t, n) {
                    if ((0, i.is)(n, z) && n.config)
                      return {
                        fields: n.config.fields,
                        references: n.config.references,
                      };
                    let r = t[(0, u.Lf)(n.referencedTable)];
                    if (!r)
                      throw Error(
                        `Table "${n.referencedTable[u.XI.Symbol.Name]}" not found in schema`,
                      );
                    let s = e[r];
                    if (!s) throw Error(`Table "${r}" not found in schema`);
                    let o = n.sourceTable,
                      a = t[(0, u.Lf)(o)];
                    if (!a)
                      throw Error(
                        `Table "${o[u.XI.Symbol.Name]}" not found in schema`,
                      );
                    let l = [];
                    for (let e of Object.values(s.relations))
                      ((n.relationName &&
                        n !== e &&
                        e.relationName === n.relationName) ||
                        (!n.relationName &&
                          e.referencedTable === n.sourceTable)) &&
                        l.push(e);
                    if (l.length > 1)
                      throw n.relationName
                        ? Error(
                            `There are multiple relations with name "${n.relationName}" in table "${r}"`,
                          )
                        : Error(
                            `There are multiple relations between "${r}" and "${n.sourceTable[u.XI.Symbol.Name]}". Please specify relation name`,
                          );
                    if (l[0] && (0, i.is)(l[0], z) && l[0].config)
                      return {
                        fields: l[0].config.references,
                        references: l[0].config.fields,
                      };
                    throw Error(
                      `There is not enough information to infer relation "${a}.${n.fieldName}"`,
                    );
                  })(t, n, d),
                  l = n[(0, u.Lf)(d.referencedTable)],
                  h = `${a}_${r}`,
                  p = (0, M.Uo)(
                    ...o.fields.map((e, t) =>
                      (0, M.eq)(g(o.references[t], h), g(e, a)),
                    ),
                  ),
                  m = this.buildRelationalQueryWithoutPK({
                    fullSchema: e,
                    schema: t,
                    tableNamesMap: n,
                    table: e[l],
                    tableConfig: t[l],
                    queryConfig: (0, i.is)(d, z)
                      ? !0 === s
                        ? { limit: 1 }
                        : { ...s, limit: 1 }
                      : s,
                    tableAlias: h,
                    joinOn: p,
                    nestedQueryRelation: d,
                  }),
                  y = (0,
                  c.ll)`${c.ll.identifier(h)}.${c.ll.identifier("data")}`.as(r);
                O.push({
                  on: (0, c.ll)`true`,
                  table: new U.n(m.sql, {}, h),
                  alias: h,
                  joinType: "left",
                  lateral: !0,
                }),
                  f.push({
                    dbKey: r,
                    tsKey: r,
                    field: y,
                    relationTableTsKey: l,
                    isJson: !0,
                    selection: m.selection,
                  });
              }
            }
            if (0 === f.length)
              throw new _({
                message: `No fields selected for table "${s.tsName}" ("${a}")`,
              });
            if (((w = (0, M.Uo)(h, w)), d)) {
              let e = (0, c.ll)`json_build_array(${c.ll.join(
                f.map(({ field: e, tsKey: t, isJson: n }) =>
                  n
                    ? (0,
                      c.ll)`${c.ll.identifier(`${a}_${t}`)}.${c.ll.identifier("data")}`
                    : (0, i.is)(e, c.Xs.Aliased)
                      ? e.sql
                      : e,
                ),
                (0, c.ll)`, `,
              )})`;
              (0, i.is)(d, $) &&
                (e = (0,
                c.ll)`coalesce(json_agg(${e}${k.length > 0 ? (0, c.ll)` order by ${c.ll.join(k, (0, c.ll)`, `)}` : void 0}), '[]'::json)`);
              let t = [
                {
                  dbKey: "data",
                  tsKey: "data",
                  field: e.as("data"),
                  isJson: !0,
                  relationTableTsKey: s.tsName,
                  selection: f,
                },
              ];
              void 0 !== b || void 0 !== x || k.length > 0
                ? ((p = this.buildSelectQuery({
                    table: m(r, a),
                    fields: {},
                    fieldsFlat: [{ path: [], field: c.ll.raw("*") }],
                    where: w,
                    limit: b,
                    offset: x,
                    orderBy: k,
                    setOperators: [],
                  })),
                  (w = void 0),
                  (b = void 0),
                  (x = void 0),
                  (k = []))
                : (p = m(r, a)),
                (p = this.buildSelectQuery({
                  table: (0, i.is)(p, P.mu) ? p : new U.n(p, {}, a),
                  fields: {},
                  fieldsFlat: t.map(({ field: e }) => ({
                    path: [],
                    field: (0, i.is)(e, l.V) ? g(e, a) : e,
                  })),
                  joins: O,
                  where: w,
                  limit: b,
                  offset: x,
                  orderBy: k,
                  setOperators: [],
                }));
            } else
              p = this.buildSelectQuery({
                table: m(r, a),
                fields: {},
                fieldsFlat: f.map(({ field: e }) => ({
                  path: [],
                  field: (0, i.is)(e, l.V) ? g(e, a) : e,
                })),
                joins: O,
                where: w,
                limit: b,
                offset: x,
                orderBy: k,
                setOperators: [],
              });
            return { tableTsKey: s.tsName, sql: p, selection: f };
          }
        }
        class W {
          static [i.i] = "SelectionProxyHandler";
          config;
          constructor(e) {
            this.config = { ...e };
          }
          get(e, t) {
            if ("_" === t)
              return {
                ...e._,
                selectedFields: new Proxy(e._.selectedFields, this),
              };
            if (t === d.n)
              return {
                ...e[d.n],
                selectedFields: new Proxy(e[d.n].selectedFields, this),
              };
            if ("symbol" == typeof t) return e[t];
            let n = (
              (0, i.is)(e, U.n)
                ? e._.selectedFields
                : (0, i.is)(e, c.Ss)
                  ? e[d.n].selectedFields
                  : e
            )[t];
            if ((0, i.is)(n, c.Xs.Aliased)) {
              if (
                "sql" === this.config.sqlAliasedBehavior &&
                !n.isSelectionField
              )
                return n.sql;
              let e = n.clone();
              return (e.isSelectionField = !0), e;
            }
            if ((0, i.is)(n, c.Xs)) {
              if ("sql" === this.config.sqlBehavior) return n;
              throw Error(
                `You tried to reference "${t}" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using ".as('alias')" method.`,
              );
            }
            return (0, i.is)(n, l.V)
              ? this.config.alias
                ? new Proxy(
                    n,
                    new h(
                      new Proxy(
                        n.table,
                        new p(
                          this.config.alias,
                          this.config.replaceOriginalName ?? !1,
                        ),
                      ),
                    ),
                  )
                : n
              : "object" != typeof n || null === n
                ? n
                : new Proxy(n, new W(this.config));
          }
        }
        class Z {
          static [i.i] = "TypedQueryBuilder";
          getSelectedFields() {
            return this._.selectedFields;
          }
        }
        class G {
          static [i.i] = "QueryPromise";
          [Symbol.toStringTag] = "QueryPromise";
          catch(e) {
            return this.then(void 0, e);
          }
          finally(e) {
            return this.then(
              (t) => (e?.(), t),
              (t) => {
                throw (e?.(), t);
              },
            );
          }
          then(e, t) {
            return this.execute().then(e, t);
          }
        }
        var Y = n(53414);
        class K {
          static [i.i] = "PgSelectBuilder";
          fields;
          session;
          dialect;
          withList = [];
          distinct;
          constructor(e) {
            (this.fields = e.fields),
              (this.session = e.session),
              (this.dialect = e.dialect),
              e.withList && (this.withList = e.withList),
              (this.distinct = e.distinct);
          }
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          from(e) {
            let t,
              n = !!this.fields;
            return (
              (t = this.fields
                ? this.fields
                : (0, i.is)(e, U.n)
                  ? Object.fromEntries(
                      Object.keys(e._.selectedFields).map((t) => [t, e[t]]),
                    )
                  : (0, i.is)(e, Q)
                    ? e[d.n].selectedFields
                    : (0, i.is)(e, c.Xs)
                      ? {}
                      : (0, H.YD)(e)),
              new J({
                table: e,
                fields: t,
                isPartialSelect: n,
                session: this.session,
                dialect: this.dialect,
                withList: this.withList,
                distinct: this.distinct,
              }).setToken(this.authToken)
            );
          }
        }
        class X extends Z {
          static [i.i] = "PgSelectQueryBuilder";
          _;
          config;
          joinsNotNullableMap;
          tableName;
          isPartialSelect;
          session;
          dialect;
          constructor({
            table: e,
            fields: t,
            isPartialSelect: n,
            session: r,
            dialect: i,
            withList: s,
            distinct: o,
          }) {
            super(),
              (this.config = {
                withList: s,
                table: e,
                fields: { ...t },
                distinct: o,
                setOperators: [],
              }),
              (this.isPartialSelect = n),
              (this.session = r),
              (this.dialect = i),
              (this._ = { selectedFields: t }),
              (this.tableName = (0, H.zN)(e)),
              (this.joinsNotNullableMap =
                "string" == typeof this.tableName
                  ? { [this.tableName]: !0 }
                  : {});
          }
          createJoin(e, t) {
            return (n, r) => {
              let s = this.tableName,
                o = (0, H.zN)(n);
              if (
                "string" == typeof o &&
                this.config.joins?.some((e) => e.alias === o)
              )
                throw Error(`Alias "${o}" is already used in this query`);
              if (
                !this.isPartialSelect &&
                (1 === Object.keys(this.joinsNotNullableMap).length &&
                  "string" == typeof s &&
                  (this.config.fields = { [s]: this.config.fields }),
                "string" == typeof o && !(0, i.is)(n, c.Xs))
              ) {
                let e = (0, i.is)(n, U.n)
                  ? n._.selectedFields
                  : (0, i.is)(n, c.Ss)
                    ? n[d.n].selectedFields
                    : n[u.XI.Symbol.Columns];
                this.config.fields[o] = e;
              }
              if (
                ("function" == typeof r &&
                  (r = r(
                    new Proxy(
                      this.config.fields,
                      new W({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" }),
                    ),
                  )),
                this.config.joins || (this.config.joins = []),
                this.config.joins.push({
                  on: r,
                  table: n,
                  joinType: e,
                  alias: o,
                  lateral: t,
                }),
                "string" == typeof o)
              )
                switch (e) {
                  case "left":
                    this.joinsNotNullableMap[o] = !1;
                    break;
                  case "right":
                    (this.joinsNotNullableMap = Object.fromEntries(
                      Object.entries(this.joinsNotNullableMap).map(([e]) => [
                        e,
                        !1,
                      ]),
                    )),
                      (this.joinsNotNullableMap[o] = !0);
                    break;
                  case "cross":
                  case "inner":
                    this.joinsNotNullableMap[o] = !0;
                    break;
                  case "full":
                    (this.joinsNotNullableMap = Object.fromEntries(
                      Object.entries(this.joinsNotNullableMap).map(([e]) => [
                        e,
                        !1,
                      ]),
                    )),
                      (this.joinsNotNullableMap[o] = !1);
                }
              return this;
            };
          }
          leftJoin = this.createJoin("left", !1);
          leftJoinLateral = this.createJoin("left", !0);
          rightJoin = this.createJoin("right", !1);
          innerJoin = this.createJoin("inner", !1);
          innerJoinLateral = this.createJoin("inner", !0);
          fullJoin = this.createJoin("full", !1);
          crossJoin = this.createJoin("cross", !1);
          crossJoinLateral = this.createJoin("cross", !0);
          createSetOperator(e, t) {
            return (n) => {
              let r = "function" == typeof n ? n(et()) : n;
              if (!(0, H.DV)(this.getSelectedFields(), r.getSelectedFields()))
                throw Error(
                  "Set operator error (union / intersect / except): selected fields are not the same or are in a different order",
                );
              return (
                this.config.setOperators.push({
                  type: e,
                  isAll: t,
                  rightSelect: r,
                }),
                this
              );
            };
          }
          union = this.createSetOperator("union", !1);
          unionAll = this.createSetOperator("union", !0);
          intersect = this.createSetOperator("intersect", !1);
          intersectAll = this.createSetOperator("intersect", !0);
          except = this.createSetOperator("except", !1);
          exceptAll = this.createSetOperator("except", !0);
          addSetOperators(e) {
            return this.config.setOperators.push(...e), this;
          }
          where(e) {
            return (
              "function" == typeof e &&
                (e = e(
                  new Proxy(
                    this.config.fields,
                    new W({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" }),
                  ),
                )),
              (this.config.where = e),
              this
            );
          }
          having(e) {
            return (
              "function" == typeof e &&
                (e = e(
                  new Proxy(
                    this.config.fields,
                    new W({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" }),
                  ),
                )),
              (this.config.having = e),
              this
            );
          }
          groupBy(...e) {
            if ("function" == typeof e[0]) {
              let t = e[0](
                new Proxy(
                  this.config.fields,
                  new W({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" }),
                ),
              );
              this.config.groupBy = Array.isArray(t) ? t : [t];
            } else this.config.groupBy = e;
            return this;
          }
          orderBy(...e) {
            if ("function" == typeof e[0]) {
              let t = e[0](
                  new Proxy(
                    this.config.fields,
                    new W({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" }),
                  ),
                ),
                n = Array.isArray(t) ? t : [t];
              this.config.setOperators.length > 0
                ? (this.config.setOperators.at(-1).orderBy = n)
                : (this.config.orderBy = n);
            } else
              this.config.setOperators.length > 0
                ? (this.config.setOperators.at(-1).orderBy = e)
                : (this.config.orderBy = e);
            return this;
          }
          limit(e) {
            return (
              this.config.setOperators.length > 0
                ? (this.config.setOperators.at(-1).limit = e)
                : (this.config.limit = e),
              this
            );
          }
          offset(e) {
            return (
              this.config.setOperators.length > 0
                ? (this.config.setOperators.at(-1).offset = e)
                : (this.config.offset = e),
              this
            );
          }
          for(e, t = {}) {
            return (
              (this.config.lockingClause = { strength: e, config: t }), this
            );
          }
          getSQL() {
            return this.dialect.buildSelectQuery(this.config);
          }
          toSQL() {
            let { typings: e, ...t } = this.dialect.sqlToQuery(this.getSQL());
            return t;
          }
          as(e) {
            return new Proxy(
              new U.n(this.getSQL(), this.config.fields, e),
              new W({
                alias: e,
                sqlAliasedBehavior: "alias",
                sqlBehavior: "error",
              }),
            );
          }
          getSelectedFields() {
            return new Proxy(
              this.config.fields,
              new W({
                alias: this.tableName,
                sqlAliasedBehavior: "alias",
                sqlBehavior: "error",
              }),
            );
          }
          $dynamic() {
            return this;
          }
        }
        class J extends X {
          static [i.i] = "PgSelect";
          _prepare(e) {
            let {
              session: t,
              config: n,
              dialect: r,
              joinsNotNullableMap: i,
              authToken: s,
            } = this;
            if (!t)
              throw Error(
                "Cannot execute a query on a query builder. Please use a database instance instead.",
              );
            return Y.k.startActiveSpan("drizzle.prepareQuery", () => {
              let o = (0, H.He)(n.fields),
                a = t.prepareQuery(r.sqlToQuery(this.getSQL()), o, e, !0);
              return (a.joinsNotNullableMap = i), a.setToken(s);
            });
          }
          prepare(e) {
            return this._prepare(e);
          }
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          execute = (e) =>
            Y.k.startActiveSpan("drizzle.operation", () =>
              this._prepare().execute(e, this.authToken),
            );
        }
        function ee(e, t) {
          return (n, r, ...i) => {
            let s = [r, ...i].map((n) => ({
              type: e,
              isAll: t,
              rightSelect: n,
            }));
            for (let e of s)
              if (
                !(0, H.DV)(
                  n.getSelectedFields(),
                  e.rightSelect.getSelectedFields(),
                )
              )
                throw Error(
                  "Set operator error (union / intersect / except): selected fields are not the same or are in a different order",
                );
            return n.addSetOperators(s);
          };
        }
        (0, H.XJ)(J, [G]);
        let et = () => ({
            union: en,
            unionAll: er,
            intersect: ei,
            intersectAll: es,
            except: eo,
            exceptAll: ea,
          }),
          en = ee("union", !1),
          er = ee("union", !0),
          ei = ee("intersect", !1),
          es = ee("intersect", !0),
          eo = ee("except", !1),
          ea = ee("except", !0);
        class el {
          static [i.i] = "PgQueryBuilder";
          dialect;
          dialectConfig;
          constructor(e) {
            (this.dialect = (0, i.is)(e, V) ? e : void 0),
              (this.dialectConfig = (0, i.is)(e, V) ? void 0 : e);
          }
          $with = (e, t) => {
            let n = this;
            return {
              as: (r) => (
                "function" == typeof r && (r = r(n)),
                new Proxy(
                  new U.J(
                    r.getSQL(),
                    t ??
                      ("getSelectedFields" in r
                        ? (r.getSelectedFields() ?? {})
                        : {}),
                    e,
                    !0,
                  ),
                  new W({
                    alias: e,
                    sqlAliasedBehavior: "alias",
                    sqlBehavior: "error",
                  }),
                )
              ),
            };
          };
          with(...e) {
            let t = this;
            return {
              select: function (n) {
                return new K({
                  fields: n ?? void 0,
                  session: void 0,
                  dialect: t.getDialect(),
                  withList: e,
                });
              },
              selectDistinct: function (e) {
                return new K({
                  fields: e ?? void 0,
                  session: void 0,
                  dialect: t.getDialect(),
                  distinct: !0,
                });
              },
              selectDistinctOn: function (e, n) {
                return new K({
                  fields: n ?? void 0,
                  session: void 0,
                  dialect: t.getDialect(),
                  distinct: { on: e },
                });
              },
            };
          }
          select(e) {
            return new K({
              fields: e ?? void 0,
              session: void 0,
              dialect: this.getDialect(),
            });
          }
          selectDistinct(e) {
            return new K({
              fields: e ?? void 0,
              session: void 0,
              dialect: this.getDialect(),
              distinct: !0,
            });
          }
          selectDistinctOn(e, t) {
            return new K({
              fields: t ?? void 0,
              session: void 0,
              dialect: this.getDialect(),
              distinct: { on: e },
            });
          }
          getDialect() {
            return (
              this.dialect || (this.dialect = new V(this.dialectConfig)),
              this.dialect
            );
          }
        }
        class ec {
          constructor(e, t, n, r) {
            (this.table = e),
              (this.session = t),
              (this.dialect = n),
              (this.withList = r);
          }
          static [i.i] = "PgUpdateBuilder";
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          set(e) {
            return new eu(
              this.table,
              (0, H.q)(this.table, e),
              this.session,
              this.dialect,
              this.withList,
            ).setToken(this.authToken);
          }
        }
        class eu extends G {
          constructor(e, t, n, r, i) {
            super(),
              (this.session = n),
              (this.dialect = r),
              (this.config = { set: t, table: e, withList: i, joins: [] }),
              (this.tableName = (0, H.zN)(e)),
              (this.joinsNotNullableMap =
                "string" == typeof this.tableName
                  ? { [this.tableName]: !0 }
                  : {});
          }
          static [i.i] = "PgUpdate";
          config;
          tableName;
          joinsNotNullableMap;
          from(e) {
            let t = (0, H.zN)(e);
            return (
              "string" == typeof t && (this.joinsNotNullableMap[t] = !0),
              (this.config.from = e),
              this
            );
          }
          getTableLikeFields(e) {
            return (0, i.is)(e, P.mu)
              ? e[u.XI.Symbol.Columns]
              : (0, i.is)(e, U.n)
                ? e._.selectedFields
                : e[d.n].selectedFields;
          }
          createJoin(e) {
            return (t, n) => {
              let r = (0, H.zN)(t);
              if (
                "string" == typeof r &&
                this.config.joins.some((e) => e.alias === r)
              )
                throw Error(`Alias "${r}" is already used in this query`);
              if ("function" == typeof n) {
                let e =
                  this.config.from && !(0, i.is)(this.config.from, c.Xs)
                    ? this.getTableLikeFields(this.config.from)
                    : void 0;
                n = n(
                  new Proxy(
                    this.config.table[u.XI.Symbol.Columns],
                    new W({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" }),
                  ),
                  e &&
                    new Proxy(
                      e,
                      new W({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" }),
                    ),
                );
              }
              if (
                (this.config.joins.push({
                  on: n,
                  table: t,
                  joinType: e,
                  alias: r,
                }),
                "string" == typeof r)
              )
                switch (e) {
                  case "left":
                    this.joinsNotNullableMap[r] = !1;
                    break;
                  case "right":
                    (this.joinsNotNullableMap = Object.fromEntries(
                      Object.entries(this.joinsNotNullableMap).map(([e]) => [
                        e,
                        !1,
                      ]),
                    )),
                      (this.joinsNotNullableMap[r] = !0);
                    break;
                  case "inner":
                    this.joinsNotNullableMap[r] = !0;
                    break;
                  case "full":
                    (this.joinsNotNullableMap = Object.fromEntries(
                      Object.entries(this.joinsNotNullableMap).map(([e]) => [
                        e,
                        !1,
                      ]),
                    )),
                      (this.joinsNotNullableMap[r] = !1);
                }
              return this;
            };
          }
          leftJoin = this.createJoin("left");
          rightJoin = this.createJoin("right");
          innerJoin = this.createJoin("inner");
          fullJoin = this.createJoin("full");
          where(e) {
            return (this.config.where = e), this;
          }
          returning(e) {
            if (
              !e &&
              ((e = Object.assign({}, this.config.table[u.XI.Symbol.Columns])),
              this.config.from)
            ) {
              let t = (0, H.zN)(this.config.from);
              if (
                "string" == typeof t &&
                this.config.from &&
                !(0, i.is)(this.config.from, c.Xs)
              ) {
                let n = this.getTableLikeFields(this.config.from);
                e[t] = n;
              }
              for (let t of this.config.joins) {
                let n = (0, H.zN)(t.table);
                if ("string" == typeof n && !(0, i.is)(t.table, c.Xs)) {
                  let r = this.getTableLikeFields(t.table);
                  e[n] = r;
                }
              }
            }
            return (
              (this.config.returningFields = e),
              (this.config.returning = (0, H.He)(e)),
              this
            );
          }
          getSQL() {
            return this.dialect.buildUpdateQuery(this.config);
          }
          toSQL() {
            let { typings: e, ...t } = this.dialect.sqlToQuery(this.getSQL());
            return t;
          }
          _prepare(e) {
            let t = this.session.prepareQuery(
              this.dialect.sqlToQuery(this.getSQL()),
              this.config.returning,
              e,
              !0,
            );
            return (t.joinsNotNullableMap = this.joinsNotNullableMap), t;
          }
          prepare(e) {
            return this._prepare(e);
          }
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          execute = (e) => this._prepare().execute(e, this.authToken);
          getSelectedFields() {
            return this.config.returningFields
              ? new Proxy(
                  this.config.returningFields,
                  new W({
                    alias: (0, u.Io)(this.config.table),
                    sqlAliasedBehavior: "alias",
                    sqlBehavior: "error",
                  }),
                )
              : void 0;
          }
          $dynamic() {
            return this;
          }
        }
        class ed {
          constructor(e, t, n, r, i) {
            (this.table = e),
              (this.session = t),
              (this.dialect = n),
              (this.withList = r),
              (this.overridingSystemValue_ = i);
          }
          static [i.i] = "PgInsertBuilder";
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          overridingSystemValue() {
            return (this.overridingSystemValue_ = !0), this;
          }
          values(e) {
            if (0 === (e = Array.isArray(e) ? e : [e]).length)
              throw Error("values() must be called with at least one value");
            let t = e.map((e) => {
              let t = {},
                n = this.table[u.XI.Symbol.Columns];
              for (let r of Object.keys(e)) {
                let s = e[r];
                t[r] = (0, i.is)(s, c.Xs) ? s : new c.Iw(s, n[r]);
              }
              return t;
            });
            return new eh(
              this.table,
              t,
              this.session,
              this.dialect,
              this.withList,
              !1,
              this.overridingSystemValue_,
            ).setToken(this.authToken);
          }
          select(e) {
            let t = "function" == typeof e ? e(new el()) : e;
            if (
              !(0, i.is)(t, c.Xs) &&
              !(0, H.DV)(this.table[u.e], t._.selectedFields)
            )
              throw Error(
                "Insert select error: selected fields are not the same or are in a different order compared to the table definition",
              );
            return new eh(
              this.table,
              t,
              this.session,
              this.dialect,
              this.withList,
              !0,
            );
          }
        }
        class eh extends G {
          constructor(e, t, n, r, i, s, o) {
            super(),
              (this.session = n),
              (this.dialect = r),
              (this.config = {
                table: e,
                values: t,
                withList: i,
                select: s,
                overridingSystemValue_: o,
              });
          }
          static [i.i] = "PgInsert";
          config;
          returning(e = this.config.table[u.XI.Symbol.Columns]) {
            return (
              (this.config.returningFields = e),
              (this.config.returning = (0, H.He)(e)),
              this
            );
          }
          onConflictDoNothing(e = {}) {
            if (void 0 === e.target)
              this.config.onConflict = (0, c.ll)`do nothing`;
            else {
              let t = "";
              t = Array.isArray(e.target)
                ? e.target
                    .map((e) =>
                      this.dialect.escapeName(
                        this.dialect.casing.getColumnCasing(e),
                      ),
                    )
                    .join(",")
                : this.dialect.escapeName(
                    this.dialect.casing.getColumnCasing(e.target),
                  );
              let n = e.where ? (0, c.ll)` where ${e.where}` : void 0;
              this.config.onConflict = (0,
              c.ll)`(${c.ll.raw(t)})${n} do nothing`;
            }
            return this;
          }
          onConflictDoUpdate(e) {
            if (e.where && (e.targetWhere || e.setWhere))
              throw Error(
                'You cannot use both "where" and "targetWhere"/"setWhere" at the same time - "where" is deprecated, use "targetWhere" or "setWhere" instead.',
              );
            let t = e.where ? (0, c.ll)` where ${e.where}` : void 0,
              n = e.targetWhere ? (0, c.ll)` where ${e.targetWhere}` : void 0,
              r = e.setWhere ? (0, c.ll)` where ${e.setWhere}` : void 0,
              i = this.dialect.buildUpdateSet(
                this.config.table,
                (0, H.q)(this.config.table, e.set),
              ),
              s = "";
            return (
              (s = Array.isArray(e.target)
                ? e.target
                    .map((e) =>
                      this.dialect.escapeName(
                        this.dialect.casing.getColumnCasing(e),
                      ),
                    )
                    .join(",")
                : this.dialect.escapeName(
                    this.dialect.casing.getColumnCasing(e.target),
                  )),
              (this.config.onConflict = (0,
              c.ll)`(${c.ll.raw(s)})${n} do update set ${i}${t}${r}`),
              this
            );
          }
          getSQL() {
            return this.dialect.buildInsertQuery(this.config);
          }
          toSQL() {
            let { typings: e, ...t } = this.dialect.sqlToQuery(this.getSQL());
            return t;
          }
          _prepare(e) {
            return Y.k.startActiveSpan("drizzle.prepareQuery", () =>
              this.session.prepareQuery(
                this.dialect.sqlToQuery(this.getSQL()),
                this.config.returning,
                e,
                !0,
              ),
            );
          }
          prepare(e) {
            return this._prepare(e);
          }
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          execute = (e) =>
            Y.k.startActiveSpan("drizzle.operation", () =>
              this._prepare().execute(e, this.authToken),
            );
          getSelectedFields() {
            return this.config.returningFields
              ? new Proxy(
                  this.config.returningFields,
                  new W({
                    alias: (0, u.Io)(this.config.table),
                    sqlAliasedBehavior: "alias",
                    sqlBehavior: "error",
                  }),
                )
              : void 0;
          }
          $dynamic() {
            return this;
          }
        }
        class ep extends G {
          constructor(e, t, n, r) {
            super(),
              (this.session = t),
              (this.dialect = n),
              (this.config = { table: e, withList: r });
          }
          static [i.i] = "PgDelete";
          config;
          where(e) {
            return (this.config.where = e), this;
          }
          returning(e = this.config.table[u.XI.Symbol.Columns]) {
            return (
              (this.config.returningFields = e),
              (this.config.returning = (0, H.He)(e)),
              this
            );
          }
          getSQL() {
            return this.dialect.buildDeleteQuery(this.config);
          }
          toSQL() {
            let { typings: e, ...t } = this.dialect.sqlToQuery(this.getSQL());
            return t;
          }
          _prepare(e) {
            return Y.k.startActiveSpan("drizzle.prepareQuery", () =>
              this.session.prepareQuery(
                this.dialect.sqlToQuery(this.getSQL()),
                this.config.returning,
                e,
                !0,
              ),
            );
          }
          prepare(e) {
            return this._prepare(e);
          }
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          execute = (e) =>
            Y.k.startActiveSpan("drizzle.operation", () =>
              this._prepare().execute(e, this.authToken),
            );
          getSelectedFields() {
            return this.config.returningFields
              ? new Proxy(
                  this.config.returningFields,
                  new W({
                    alias: (0, u.Io)(this.config.table),
                    sqlAliasedBehavior: "alias",
                    sqlBehavior: "error",
                  }),
                )
              : void 0;
          }
          $dynamic() {
            return this;
          }
        }
        class ef extends c.Xs {
          constructor(e) {
            super(ef.buildEmbeddedCount(e.source, e.filters).queryChunks),
              (this.params = e),
              this.mapWith(Number),
              (this.session = e.session),
              (this.sql = ef.buildCount(e.source, e.filters));
          }
          sql;
          token;
          static [i.i] = "PgCountBuilder";
          [Symbol.toStringTag] = "PgCountBuilder";
          session;
          static buildEmbeddedCount(e, t) {
            return (0,
            c.ll)`(select count(*) from ${e}${c.ll.raw(" where ").if(t)}${t})`;
          }
          static buildCount(e, t) {
            return (0,
            c.ll)`select count(*) as count from ${e}${c.ll.raw(" where ").if(t)}${t};`;
          }
          setToken(e) {
            return (this.token = e), this;
          }
          then(e, t) {
            return Promise.resolve(
              this.session.count(this.sql, this.token),
            ).then(e, t);
          }
          catch(e) {
            return this.then(void 0, e);
          }
          finally(e) {
            return this.then(
              (t) => (e?.(), t),
              (t) => {
                throw (e?.(), t);
              },
            );
          }
        }
        class em {
          constructor(e, t, n, r, i, s, o) {
            (this.fullSchema = e),
              (this.schema = t),
              (this.tableNamesMap = n),
              (this.table = r),
              (this.tableConfig = i),
              (this.dialect = s),
              (this.session = o);
          }
          static [i.i] = "PgRelationalQueryBuilder";
          findMany(e) {
            return new eg(
              this.fullSchema,
              this.schema,
              this.tableNamesMap,
              this.table,
              this.tableConfig,
              this.dialect,
              this.session,
              e || {},
              "many",
            );
          }
          findFirst(e) {
            return new eg(
              this.fullSchema,
              this.schema,
              this.tableNamesMap,
              this.table,
              this.tableConfig,
              this.dialect,
              this.session,
              e ? { ...e, limit: 1 } : { limit: 1 },
              "first",
            );
          }
        }
        class eg extends G {
          constructor(e, t, n, r, i, s, o, a, l) {
            super(),
              (this.fullSchema = e),
              (this.schema = t),
              (this.tableNamesMap = n),
              (this.table = r),
              (this.tableConfig = i),
              (this.dialect = s),
              (this.session = o),
              (this.config = a),
              (this.mode = l);
          }
          static [i.i] = "PgRelationalQuery";
          _prepare(e) {
            return Y.k.startActiveSpan("drizzle.prepareQuery", () => {
              let { query: t, builtQuery: n } = this._toSQL();
              return this.session.prepareQuery(n, void 0, e, !0, (e, n) => {
                let r = e.map((e) =>
                  (function e(t, n, r, s, o = (e) => e) {
                    let a = {};
                    for (let [u, d] of s.entries())
                      if (d.isJson) {
                        let s = n.relations[d.tsKey],
                          l = r[u],
                          c = "string" == typeof l ? JSON.parse(l) : l;
                        a[d.tsKey] = (0, i.is)(s, z)
                          ? c &&
                            e(t, t[d.relationTableTsKey], c, d.selection, o)
                          : c.map((n) =>
                              e(t, t[d.relationTableTsKey], n, d.selection, o),
                            );
                      } else {
                        let e,
                          t = o(r[u]),
                          n = d.field;
                        (e = (0, i.is)(n, l.V)
                          ? n
                          : (0, i.is)(n, c.Xs)
                            ? n.decoder
                            : n.sql.decoder),
                          (a[d.tsKey] =
                            null === t ? null : e.mapFromDriverValue(t));
                      }
                    return a;
                  })(this.schema, this.tableConfig, e, t.selection, n),
                );
                return "first" === this.mode ? r[0] : r;
              });
            });
          }
          prepare(e) {
            return this._prepare(e);
          }
          _getQuery() {
            return this.dialect.buildRelationalQueryWithoutPK({
              fullSchema: this.fullSchema,
              schema: this.schema,
              tableNamesMap: this.tableNamesMap,
              table: this.table,
              tableConfig: this.tableConfig,
              queryConfig: this.config,
              tableAlias: this.tableConfig.tsName,
            });
          }
          getSQL() {
            return this._getQuery().sql;
          }
          _toSQL() {
            let e = this._getQuery(),
              t = this.dialect.sqlToQuery(e.sql);
            return { query: e, builtQuery: t };
          }
          toSQL() {
            return this._toSQL().builtQuery;
          }
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          execute() {
            return Y.k.startActiveSpan("drizzle.operation", () =>
              this._prepare().execute(void 0, this.authToken),
            );
          }
        }
        class ey extends G {
          constructor(e, t, n, r) {
            super(),
              (this.execute = e),
              (this.sql = t),
              (this.query = n),
              (this.mapBatchResult = r);
          }
          static [i.i] = "PgRaw";
          getSQL() {
            return this.sql;
          }
          getQuery() {
            return this.query;
          }
          mapResult(e, t) {
            return t ? this.mapBatchResult(e) : e;
          }
          _prepare() {
            return this;
          }
          isResponseInArrayMode() {
            return !1;
          }
        }
        class ev extends G {
          constructor(e, t, n) {
            super(),
              (this.session = t),
              (this.dialect = n),
              (this.config = { view: e });
          }
          static [i.i] = "PgRefreshMaterializedView";
          config;
          concurrently() {
            if (void 0 !== this.config.withNoData)
              throw Error("Cannot use concurrently and withNoData together");
            return (this.config.concurrently = !0), this;
          }
          withNoData() {
            if (void 0 !== this.config.concurrently)
              throw Error("Cannot use concurrently and withNoData together");
            return (this.config.withNoData = !0), this;
          }
          getSQL() {
            return this.dialect.buildRefreshMaterializedViewQuery(this.config);
          }
          toSQL() {
            let { typings: e, ...t } = this.dialect.sqlToQuery(this.getSQL());
            return t;
          }
          _prepare(e) {
            return Y.k.startActiveSpan("drizzle.prepareQuery", () =>
              this.session.prepareQuery(
                this.dialect.sqlToQuery(this.getSQL()),
                void 0,
                e,
                !0,
              ),
            );
          }
          prepare(e) {
            return this._prepare(e);
          }
          authToken;
          setToken(e) {
            return (this.authToken = e), this;
          }
          execute = (e) =>
            Y.k.startActiveSpan("drizzle.operation", () =>
              this._prepare().execute(e, this.authToken),
            );
        }
        class eb {
          constructor(e, t, n) {
            if (
              ((this.dialect = e),
              (this.session = t),
              (this._ = n
                ? {
                    schema: n.schema,
                    fullSchema: n.fullSchema,
                    tableNamesMap: n.tableNamesMap,
                    session: t,
                  }
                : {
                    schema: void 0,
                    fullSchema: {},
                    tableNamesMap: {},
                    session: t,
                  }),
              (this.query = {}),
              this._.schema)
            )
              for (let [r, i] of Object.entries(this._.schema))
                this.query[r] = new em(
                  n.fullSchema,
                  this._.schema,
                  this._.tableNamesMap,
                  n.fullSchema[r],
                  i,
                  e,
                  t,
                );
          }
          static [i.i] = "PgDatabase";
          query;
          $with = (e, t) => {
            let n = this;
            return {
              as: (r) => (
                "function" == typeof r && (r = r(new el(n.dialect))),
                new Proxy(
                  new U.J(
                    r.getSQL(),
                    t ??
                      ("getSelectedFields" in r
                        ? (r.getSelectedFields() ?? {})
                        : {}),
                    e,
                    !0,
                  ),
                  new W({
                    alias: e,
                    sqlAliasedBehavior: "alias",
                    sqlBehavior: "error",
                  }),
                )
              ),
            };
          };
          $count(e, t) {
            return new ef({ source: e, filters: t, session: this.session });
          }
          with(...e) {
            let t = this;
            return {
              select: function (n) {
                return new K({
                  fields: n ?? void 0,
                  session: t.session,
                  dialect: t.dialect,
                  withList: e,
                });
              },
              selectDistinct: function (n) {
                return new K({
                  fields: n ?? void 0,
                  session: t.session,
                  dialect: t.dialect,
                  withList: e,
                  distinct: !0,
                });
              },
              selectDistinctOn: function (n, r) {
                return new K({
                  fields: r ?? void 0,
                  session: t.session,
                  dialect: t.dialect,
                  withList: e,
                  distinct: { on: n },
                });
              },
              update: function (n) {
                return new ec(n, t.session, t.dialect, e);
              },
              insert: function (n) {
                return new ed(n, t.session, t.dialect, e);
              },
              delete: function (n) {
                return new ep(n, t.session, t.dialect, e);
              },
            };
          }
          select(e) {
            return new K({
              fields: e ?? void 0,
              session: this.session,
              dialect: this.dialect,
            });
          }
          selectDistinct(e) {
            return new K({
              fields: e ?? void 0,
              session: this.session,
              dialect: this.dialect,
              distinct: !0,
            });
          }
          selectDistinctOn(e, t) {
            return new K({
              fields: t ?? void 0,
              session: this.session,
              dialect: this.dialect,
              distinct: { on: e },
            });
          }
          update(e) {
            return new ec(e, this.session, this.dialect);
          }
          insert(e) {
            return new ed(e, this.session, this.dialect);
          }
          delete(e) {
            return new ep(e, this.session, this.dialect);
          }
          refreshMaterializedView(e) {
            return new ev(e, this.session, this.dialect);
          }
          authToken;
          execute(e) {
            let t = "string" == typeof e ? c.ll.raw(e) : e.getSQL(),
              n = this.dialect.sqlToQuery(t),
              r = this.session.prepareQuery(n, void 0, void 0, !1);
            return new ey(
              () => r.execute(void 0, this.authToken),
              t,
              n,
              (e) => r.mapResult(e, !0),
            );
          }
          transaction(e, t) {
            return this.session.transaction(e, t);
          }
        }
        class ex {
          constructor(e) {
            this.query = e;
          }
          authToken;
          getQuery() {
            return this.query;
          }
          mapResult(e, t) {
            return e;
          }
          setToken(e) {
            return (this.authToken = e), this;
          }
          static [i.i] = "PgPreparedQuery";
          joinsNotNullableMap;
        }
        class ek {
          constructor(e) {
            this.dialect = e;
          }
          static [i.i] = "PgSession";
          execute(e, t) {
            return Y.k.startActiveSpan("drizzle.operation", () =>
              Y.k
                .startActiveSpan("drizzle.prepareQuery", () =>
                  this.prepareQuery(
                    this.dialect.sqlToQuery(e),
                    void 0,
                    void 0,
                    !1,
                  ),
                )
                .setToken(t)
                .execute(void 0, t),
            );
          }
          all(e) {
            return this.prepareQuery(
              this.dialect.sqlToQuery(e),
              void 0,
              void 0,
              !1,
            ).all();
          }
          async count(e, t) {
            return Number((await this.execute(e, t))[0].count);
          }
        }
        class ew extends eb {
          constructor(e, t, n, r = 0) {
            super(e, t, n), (this.schema = n), (this.nestedIndex = r);
          }
          static [i.i] = "PgTransaction";
          rollback() {
            throw new O();
          }
          getTransactionConfigSQL(e) {
            let t = [];
            return (
              e.isolationLevel && t.push(`isolation level ${e.isolationLevel}`),
              e.accessMode && t.push(e.accessMode),
              "boolean" == typeof e.deferrable &&
                t.push(e.deferrable ? "deferrable" : "not deferrable"),
              c.ll.raw(t.join(" "))
            );
          }
          setTransaction(e) {
            return this.session.execute(
              (0, c.ll)`set transaction ${this.getTransactionConfigSQL(e)}`,
            );
          }
        }
        class e_ extends ex {
          constructor(e, t, n, r, i, s, o) {
            super({ sql: t, params: n }),
              (this.client = e),
              (this.queryString = t),
              (this.params = n),
              (this.logger = r),
              (this.fields = i),
              (this._isResponseInArrayMode = s),
              (this.customResultMapper = o);
          }
          static [i.i] = "PostgresJsPreparedQuery";
          async execute(e = {}) {
            return Y.k.startActiveSpan("drizzle.execute", async (t) => {
              let n = (0, c.Ct)(this.params, e);
              t?.setAttributes({
                "drizzle.query.text": this.queryString,
                "drizzle.query.params": JSON.stringify(n),
              }),
                this.logger.logQuery(this.queryString, n);
              let {
                fields: r,
                queryString: i,
                client: s,
                joinsNotNullableMap: o,
                customResultMapper: a,
              } = this;
              if (!r && !a)
                return Y.k.startActiveSpan("drizzle.driver.execute", () =>
                  s.unsafe(i, n),
                );
              let l = await Y.k.startActiveSpan(
                "drizzle.driver.execute",
                () => (
                  t?.setAttributes({
                    "drizzle.query.text": i,
                    "drizzle.query.params": JSON.stringify(n),
                  }),
                  s.unsafe(i, n).values()
                ),
              );
              return Y.k.startActiveSpan("drizzle.mapResponse", () =>
                a ? a(l) : l.map((e) => (0, H.a6)(r, e, o)),
              );
            });
          }
          all(e = {}) {
            return Y.k.startActiveSpan("drizzle.execute", async (t) => {
              let n = (0, c.Ct)(this.params, e);
              return (
                t?.setAttributes({
                  "drizzle.query.text": this.queryString,
                  "drizzle.query.params": JSON.stringify(n),
                }),
                this.logger.logQuery(this.queryString, n),
                Y.k.startActiveSpan(
                  "drizzle.driver.execute",
                  () => (
                    t?.setAttributes({
                      "drizzle.query.text": this.queryString,
                      "drizzle.query.params": JSON.stringify(n),
                    }),
                    this.client.unsafe(this.queryString, n)
                  ),
                )
              );
            });
          }
          isResponseInArrayMode() {
            return this._isResponseInArrayMode;
          }
        }
        class eO extends ek {
          constructor(e, t, n, r = {}) {
            super(t),
              (this.client = e),
              (this.schema = n),
              (this.options = r),
              (this.logger = r.logger ?? new a());
          }
          static [i.i] = "PostgresJsSession";
          logger;
          prepareQuery(e, t, n, r, i) {
            return new e_(this.client, e.sql, e.params, this.logger, t, r, i);
          }
          query(e, t) {
            return (
              this.logger.logQuery(e, t), this.client.unsafe(e, t).values()
            );
          }
          queryObjects(e, t) {
            return this.client.unsafe(e, t);
          }
          transaction(e, t) {
            return this.client.begin(async (n) => {
              let r = new eO(n, this.dialect, this.schema, this.options),
                i = new eT(this.dialect, r, this.schema);
              return t && (await i.setTransaction(t)), e(i);
            });
          }
        }
        class eT extends ew {
          constructor(e, t, n, r = 0) {
            super(e, t, n, r), (this.session = t);
          }
          static [i.i] = "PostgresJsTransaction";
          transaction(e) {
            return this.session.client.savepoint((t) => {
              let n = new eO(
                t,
                this.dialect,
                this.schema,
                this.session.options,
              );
              return e(new eT(this.dialect, n, this.schema));
            });
          }
        }
        class eS extends eb {
          static [i.i] = "PostgresJsDatabase";
        }
        function eE(e, t = {}) {
          let n,
            r,
            s = (e) => e;
          for (let t of [
            "1184",
            "1082",
            "1083",
            "1114",
            "1182",
            "1185",
            "1115",
            "1231",
          ])
            (e.options.parsers[t] = s), (e.options.serializers[t] = s);
          (e.options.serializers["114"] = s),
            (e.options.serializers["3802"] = s);
          let a = new V({ casing: t.casing });
          if (
            (!0 === t.logger
              ? (n = new o())
              : !1 !== t.logger && (n = t.logger),
            t.schema)
          ) {
            let e = (function (e, t) {
              1 === Object.keys(e).length &&
                "default" in e &&
                !(0, i.is)(e.default, u.XI) &&
                (e = e.default);
              let n = {},
                r = {},
                s = {};
              for (let [o, a] of Object.entries(e))
                if ((0, i.is)(a, u.XI)) {
                  let e = (0, u.Lf)(a),
                    t = r[e];
                  for (let r of ((n[e] = o),
                  (s[o] = {
                    tsName: o,
                    dbName: a[u.XI.Symbol.Name],
                    schema: a[u.XI.Symbol.Schema],
                    columns: a[u.XI.Symbol.Columns],
                    relations: t?.relations ?? {},
                    primaryKey: t?.primaryKey ?? [],
                  }),
                  Object.values(a[u.XI.Symbol.Columns])))
                    r.primary && s[o].primaryKey.push(r);
                  let l = a[u.XI.Symbol.ExtraConfigBuilder]?.(
                    a[u.XI.Symbol.ExtraConfigColumns],
                  );
                  if (l)
                    for (let e of Object.values(l))
                      (0, i.is)(e, R.hv) && s[o].primaryKey.push(...e.columns);
                } else if ((0, i.is)(a, B)) {
                  let e,
                    i = (0, u.Lf)(a.table),
                    o = n[i];
                  for (let [n, l] of Object.entries(a.config(t(a.table))))
                    if (o) {
                      let t = s[o];
                      (t.relations[n] = l), e && t.primaryKey.push(...e);
                    } else
                      i in r || (r[i] = { relations: {}, primaryKey: e }),
                        (r[i].relations[n] = l);
                }
              return { tables: s, tableNamesMap: n };
            })(t.schema, q);
            r = {
              fullSchema: t.schema,
              schema: e.tables,
              tableNamesMap: e.tableNamesMap,
            };
          }
          let l = new eO(e, a, r, { logger: n }),
            c = new eS(a, l, r);
          return (c.$client = e), c;
        }
        function eC(...e) {
          if ("string" == typeof e[0]) return eE((0, r.A)(e[0]), e[1]);
          if ((0, H.Lq)(e[0])) {
            let { connection: t, client: n, ...i } = e[0];
            if (n) return eE(n, i);
            if ("object" == typeof t && void 0 !== t.url) {
              let { url: e, ...n } = t;
              return eE((0, r.A)(e, n), i);
            }
            return eE((0, r.A)(t), i);
          }
          return eE(e[0], e[1]);
        }
        (eC || (eC = {})).mock = function (e) {
          return eE({ options: { parsers: {}, serializers: {} } }, e);
        };
      },
      56414: (e, t, n) => {
        "use strict";
        n.d(t, {
          UC: () => M,
          VY: () => B,
          ZD: () => j,
          ZL: () => P,
          bL: () => I,
          hE: () => F,
          hJ: () => R,
          l9: () => D,
          rc: () => L,
        });
        var r = n(84205),
          i = n(14072),
          s = n(79744),
          o = n(33459),
          a = n(28777),
          l = n(86415),
          c = n(61268),
          u = "AlertDialog",
          [d, h] = (0, i.A)(u, [o.Hs]),
          p = (0, o.Hs)(),
          f = (e) => {
            let { __scopeAlertDialog: t, ...n } = e,
              r = p(t);
            return (0, c.jsx)(o.bL, { ...r, ...n, modal: !0 });
          };
        f.displayName = u;
        var m = r.forwardRef((e, t) => {
          let { __scopeAlertDialog: n, ...r } = e,
            i = p(n);
          return (0, c.jsx)(o.l9, { ...i, ...r, ref: t });
        });
        m.displayName = "AlertDialogTrigger";
        var g = (e) => {
          let { __scopeAlertDialog: t, ...n } = e,
            r = p(t);
          return (0, c.jsx)(o.ZL, { ...r, ...n });
        };
        g.displayName = "AlertDialogPortal";
        var y = r.forwardRef((e, t) => {
          let { __scopeAlertDialog: n, ...r } = e,
            i = p(n);
          return (0, c.jsx)(o.hJ, { ...i, ...r, ref: t });
        });
        y.displayName = "AlertDialogOverlay";
        var v = "AlertDialogContent",
          [b, x] = d(v),
          k = (0, l.Dc)("AlertDialogContent"),
          w = r.forwardRef((e, t) => {
            let { __scopeAlertDialog: n, children: i, ...l } = e,
              u = p(n),
              d = r.useRef(null),
              h = (0, s.s)(t, d),
              f = r.useRef(null);
            return (0, c.jsx)(o.G$, {
              contentName: v,
              titleName: _,
              docsSlug: "alert-dialog",
              children: (0, c.jsx)(b, {
                scope: n,
                cancelRef: f,
                children: (0, c.jsxs)(o.UC, {
                  role: "alertdialog",
                  ...u,
                  ...l,
                  ref: h,
                  onOpenAutoFocus: (0, a.m)(l.onOpenAutoFocus, (e) => {
                    e.preventDefault(), f.current?.focus({ preventScroll: !0 });
                  }),
                  onPointerDownOutside: (e) => e.preventDefault(),
                  onInteractOutside: (e) => e.preventDefault(),
                  children: [
                    (0, c.jsx)(k, { children: i }),
                    (0, c.jsx)(N, { contentRef: d }),
                  ],
                }),
              }),
            });
          });
        w.displayName = v;
        var _ = "AlertDialogTitle",
          O = r.forwardRef((e, t) => {
            let { __scopeAlertDialog: n, ...r } = e,
              i = p(n);
            return (0, c.jsx)(o.hE, { ...i, ...r, ref: t });
          });
        O.displayName = _;
        var T = "AlertDialogDescription",
          S = r.forwardRef((e, t) => {
            let { __scopeAlertDialog: n, ...r } = e,
              i = p(n);
            return (0, c.jsx)(o.VY, { ...i, ...r, ref: t });
          });
        S.displayName = T;
        var E = r.forwardRef((e, t) => {
          let { __scopeAlertDialog: n, ...r } = e,
            i = p(n);
          return (0, c.jsx)(o.bm, { ...i, ...r, ref: t });
        });
        E.displayName = "AlertDialogAction";
        var C = "AlertDialogCancel",
          A = r.forwardRef((e, t) => {
            let { __scopeAlertDialog: n, ...r } = e,
              { cancelRef: i } = x(C, n),
              a = p(n),
              l = (0, s.s)(t, i);
            return (0, c.jsx)(o.bm, { ...a, ...r, ref: l });
          });
        A.displayName = C;
        var N = ({ contentRef: e }) => {
            let t = `\`${v}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${v}\` by passing a \`${T}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${v}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;
            return (
              r.useEffect(() => {
                document.getElementById(
                  e.current?.getAttribute("aria-describedby"),
                ) || console.warn(t);
              }, [t, e]),
              null
            );
          },
          I = f,
          D = m,
          P = g,
          R = y,
          M = w,
          L = E,
          j = A,
          F = O,
          B = S;
      },
      56460: (e, t, n) => {
        "use strict";
        n.r(t), n.d(t, { default: () => s });
        var r = n(61268),
          i = n(89882);
        function s() {
          return (
            (0, i.useRouter)(),
            (0, r.jsxs)("div", {
              className:
                "flex flex-col items-center justify-center min-h-screen py-2",
              children: [
                (0, r.jsx)("h1", {
                  className: "text-4xl font-bold",
                  children: "Page Not Found",
                }),
                (0, r.jsx)("p", {
                  className: "mt-3 text-xl",
                  children: "Redirecting to home page...",
                }),
              ],
            })
          );
        }
        n(84205), n(58702);
      },
      57075: (e) => {
        "use strict";
        e.exports = require("node:stream");
      },
      57274: (e, t, n) => {
        "use strict";
        n.d(t, { R: () => i });
        var r = n(84205);
        function i() {
          return [(0, r.useRef)(null), (0, r.useRef)(null)];
        }
      },
      57716: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          !(function (e, t) {
            for (var n in t)
              Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
          })(t, {
            RequestCookies: function () {
              return r.RequestCookies;
            },
            ResponseCookies: function () {
              return r.ResponseCookies;
            },
            stringifyCookie: function () {
              return r.stringifyCookie;
            },
          });
        let r = n(64609);
      },
      57916: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { e: () => T, q: () => S });
            var i = n(61268),
              s = n(98849),
              o = n.n(s),
              a = n(1306),
              l = n.n(a),
              c = n(65666),
              u = n(6130),
              d = n(84205),
              h = n(15942),
              p = n(28909),
              f = n(33354),
              m = n(16949),
              g = n(12253),
              y = n(94434),
              v = n(7746),
              b = n(27448),
              x = n(26283),
              k = n(29791),
              w = n(89284),
              _ = n(71808),
              O = e([h, p, f, m, y, v, b, x, w]);
            [h, p, f, m, y, v, b, x, w] = O.then ? (await O)() : O;
            let T = (0, d.memo)(
                ({
                  sessionId: e,
                  message: t,
                  vote: n,
                  isLoading: r,
                  setMessages: s,
                  reload: a,
                  isReadonly: l,
                  currentUserId: O,
                }) => {
                  let [T, S] = (0, d.useState)("view");
                  return (0, i.jsx)(c.N, {
                    children: (0, i.jsx)(u.P.div, {
                      "data-testid": `message-${t.role}`,
                      className: "w-full mx-auto max-w-3xl px-4 group/message",
                      initial: { y: 5, opacity: 0 },
                      animate: { y: 0, opacity: 1 },
                      "data-role": t.role,
                      children: (0, i.jsxs)("div", {
                        className: (0, h.cn)(
                          "flex gap-4 w-full group-data-[role=user]/message:ml-auto group-data-[role=user]/message:max-w-2xl",
                          {
                            "w-full": "edit" === T,
                            "group-data-[role=user]/message:w-fit":
                              "edit" !== T,
                          },
                        ),
                        children: [
                          "assistant" === t.role &&
                            (0, i.jsx)("div", {
                              className:
                                "size-8 flex items-center rounded-full justify-center ring-1 shrink-0 ring-border bg-background",
                              children: (0, i.jsx)("div", {
                                className: "translate-y-px",
                                children: (0, i.jsx)(g.BZ, { size: 14 }),
                              }),
                            }),
                          (0, i.jsxs)("div", {
                            className: "flex flex-col gap-4 w-full",
                            children: [
                              t.experimental_attachments &&
                                (0, i.jsx)("div", {
                                  "data-testid": "message-attachments",
                                  className: "flex flex-row justify-end gap-2",
                                  children: t.experimental_attachments.map(
                                    (e) =>
                                      (0, i.jsx)(k.q, { attachment: e }, e.url),
                                  ),
                                }),
                              t.reasoning &&
                                (0, i.jsx)(x.A, {
                                  isLoading: r,
                                  reasoning: t.reasoning,
                                }),
                              (t.content || t.reasoning) &&
                                "view" === T &&
                                (0, i.jsxs)("div", {
                                  "data-testid": "message-content",
                                  className: "flex flex-row gap-2 items-start",
                                  children: [
                                    "user" === t.role &&
                                      !l &&
                                      (0, i.jsxs)(w.m_, {
                                        children: [
                                          (0, i.jsx)(w.k$, {
                                            asChild: !0,
                                            children: (0, i.jsx)(p.$, {
                                              "data-testid": "message-edit",
                                              variant: "ghost",
                                              className:
                                                "px-2 h-fit rounded-full text-muted-foreground opacity-0 group-hover/message:opacity-100",
                                              onClick: () => {
                                                S("edit");
                                              },
                                              children: (0, i.jsx)(g.vL, {}),
                                            }),
                                          }),
                                          (0, i.jsx)(w.ZI, {
                                            children: "Edit message",
                                          }),
                                        ],
                                      }),
                                    (0, i.jsx)("div", {
                                      className: (0, h.cn)(
                                        "flex flex-col gap-4",
                                        {
                                          "bg-primary text-primary-foreground px-3 py-2 rounded-xl":
                                            "user" === t.role,
                                        },
                                      ),
                                      children: (0, i.jsx)(y.o, {
                                        content: t.content,
                                      }),
                                    }),
                                  ],
                                }),
                              t.content &&
                                "edit" === T &&
                                (0, i.jsxs)("div", {
                                  className: "flex flex-row gap-2 items-start",
                                  children: [
                                    (0, i.jsx)("div", { className: "size-8" }),
                                    (0, i.jsx)(
                                      b.j,
                                      {
                                        message: t,
                                        setMode: S,
                                        setMessages: s,
                                        reload: a,
                                      },
                                      t.id,
                                    ),
                                  ],
                                }),
                              t.toolInvocations &&
                                t.toolInvocations.length > 0 &&
                                (0, i.jsx)("div", {
                                  className: "flex flex-col gap-4",
                                  children: t.toolInvocations.map((e) => {
                                    let {
                                      toolName: t,
                                      toolCallId: n,
                                      state: r,
                                      args: s,
                                    } = e;
                                    if ("result" === r) {
                                      let { result: r } = e;
                                      return (0, i.jsx)(
                                        "div",
                                        {
                                          children:
                                            "getWeather" === t
                                              ? (0, i.jsx)(_.V, {
                                                  weatherAtLocation: r,
                                                })
                                              : "createDocument" === t
                                                ? (0, i.jsx)(m.m, {
                                                    isReadonly: l,
                                                    result: r,
                                                  })
                                                : "updateDocument" === t
                                                  ? (0, i.jsx)(f.p, {
                                                      type: "update",
                                                      result: r,
                                                      isReadonly: l,
                                                    })
                                                  : "requestSuggestions" === t
                                                    ? (0, i.jsx)(f.p, {
                                                        type: "request-suggestions",
                                                        result: r,
                                                        isReadonly: l,
                                                      })
                                                    : (0, i.jsx)("pre", {
                                                        children:
                                                          JSON.stringify(
                                                            r,
                                                            null,
                                                            2,
                                                          ),
                                                      }),
                                        },
                                        n,
                                      );
                                    }
                                    return (0, i.jsx)(
                                      "div",
                                      {
                                        className: o()({
                                          skeleton: ["getWeather"].includes(t),
                                        }),
                                        children:
                                          "getWeather" === t
                                            ? (0, i.jsx)(_.V, {})
                                            : "createDocument" === t
                                              ? (0, i.jsx)(m.m, {
                                                  isReadonly: l,
                                                  args: s,
                                                })
                                              : "updateDocument" === t
                                                ? (0, i.jsx)(f.E, {
                                                    type: "update",
                                                    args: s,
                                                    isReadonly: l,
                                                  })
                                                : "requestSuggestions" === t
                                                  ? (0, i.jsx)(f.E, {
                                                      type: "request-suggestions",
                                                      args: s,
                                                      isReadonly: l,
                                                    })
                                                  : null,
                                      },
                                      n,
                                    );
                                  }),
                                }),
                              !l &&
                                (0, i.jsx)(
                                  v.P,
                                  {
                                    sessionId: e,
                                    message: t,
                                    vote: n,
                                    isLoading: r,
                                    currentUserId: O,
                                  },
                                  `action-${t.id}`,
                                ),
                            ],
                          }),
                        ],
                      }),
                    }),
                  });
                },
                (e, t) =>
                  e.isLoading === t.isLoading &&
                  e.message.reasoning === t.message.reasoning &&
                  e.message.content === t.message.content &&
                  !!l()(e.message.toolInvocations, t.message.toolInvocations) &&
                  !!l()(e.vote, t.vote) &&
                  e.currentUserId === t.currentUserId,
              ),
              S = () =>
                (0, i.jsx)(u.P.div, {
                  "data-testid": "message-assistant-loading",
                  className: "w-full mx-auto max-w-3xl px-4 group/message ",
                  initial: { y: 5, opacity: 0 },
                  animate: { y: 0, opacity: 1, transition: { delay: 1 } },
                  "data-role": "assistant",
                  children: (0, i.jsxs)("div", {
                    className: o()(
                      "flex gap-4 group-data-[role=user]/message:px-3 w-full group-data-[role=user]/message:w-fit group-data-[role=user]/message:ml-auto group-data-[role=user]/message:max-w-2xl group-data-[role=user]/message:py-2 rounded-xl",
                      { "group-data-[role=user]/message:bg-muted": !0 },
                    ),
                    children: [
                      (0, i.jsx)("div", {
                        className:
                          "size-8 flex items-center rounded-full justify-center ring-1 shrink-0 ring-border",
                        children: (0, i.jsx)(g.BZ, { size: 14 }),
                      }),
                      (0, i.jsx)("div", {
                        className: "flex flex-col gap-2 w-full",
                        children: (0, i.jsx)("div", {
                          className:
                            "flex flex-col gap-4 text-muted-foreground",
                          children: "Thinking...",
                        }),
                      }),
                    ],
                  }),
                });
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      57975: (e) => {
        "use strict";
        e.exports = require("node:util");
      },
      58702: (e, t, n) => {
        "use strict";
        n.d(t, {
          IB: () => r,
          V8: () => a,
          XG: () => o,
          o0: () => s,
          q: () => i,
        });
        let r = ["en", "ar", "es", "fr"],
          i = "en",
          s = {
            en: {
              nativeName: "English",
              englishName: "English",
              direction: "ltr",
              dateFormat: "MM/DD/YYYY",
              flag: "\uD83C\uDDFA\uD83C\uDDF8",
              htmlLang: "en",
              calendar: "gregory",
              number: { decimal: ".", thousands: "," },
            },
            ar: {
              nativeName: "العربية",
              englishName: "Arabic",
              direction: "rtl",
              dateFormat: "DD/MM/YYYY",
              flag: "\uD83C\uDDF8\uD83C\uDDE6",
              htmlLang: "ar",
              calendar: "islamic",
              fontClass: "font-arabic",
              number: { decimal: "٫", thousands: "٬" },
            },
            fr: {
              nativeName: "Fran\xe7ais",
              englishName: "French",
              direction: "ltr",
              dateFormat: "DD/MM/YYYY",
              flag: "\uD83C\uDDEB\uD83C\uDDF7",
              htmlLang: "fr",
              calendar: "gregory",
              number: { decimal: ",", thousands: " " },
            },
            es: {
              nativeName: "Espa\xf1ol",
              englishName: "Spanish",
              direction: "ltr",
              dateFormat: "DD/MM/YYYY",
              flag: "\uD83C\uDDEA\uD83C\uDDF8",
              htmlLang: "es",
              calendar: "gregory",
              number: { decimal: ",", thousands: "." },
            },
          };
        function o(e) {
          return s[e] || s[i];
        }
        function a(e) {
          return "rtl" === o(e).direction;
        }
      },
      59059: (e, t, n) => {
        "use strict";
        n.r(t), n.d(t, { default: () => r });
        let r = (0, n(26394).registerClientReference)(
          function () {
            throw Error(
              "Attempted to call the default export of \"E:\\\\downloads\\\\Hijraah\\\\apps\\\\web\\\\src\\\\app\\\\global-error.tsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\global-error.tsx",
          "default",
        );
      },
      59483: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { BU: () => h, L8: () => d, n6: () => u });
            var i = n(14230),
              s = n(14077),
              o = n(48969),
              a = n(3647),
              l = n(74824),
              c = e([l]);
            l = (c.then ? (await c)() : c)[0];
            let d = new s.Sj({
              nodes: (0, a.ZW)(o.wQ.spec.nodes, "paragraph block*", "block"),
              marks: o.wQ.spec.marks,
            });
            function u(e) {
              return (0, i.JJ)(
                RegExp(`^(#{1,${e}})\\s$`),
                d.nodes.heading,
                () => ({ level: e }),
              );
            }
            let h = ({ transaction: e, editorRef: t, onSaveContent: n }) => {
              if (!t || !t.current) return;
              let r = t.current.state.apply(e);
              if (
                (t.current.updateState(r),
                e.docChanged && !e.getMeta("no-save"))
              ) {
                let t = (0, l.zn)(r.doc);
                n(t, !e.getMeta("no-debounce"));
              }
            };
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      59692: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          Object.defineProperty(
            t,
            "createDedupedByCallsiteServerErrorLoggerDev",
            {
              enumerable: !0,
              get: function () {
                return l;
              },
            },
          );
        let r = (function (e, t) {
          if (e && e.__esModule) return e;
          if (null === e || ("object" != typeof e && "function" != typeof e))
            return { default: e };
          var n = i(t);
          if (n && n.has(e)) return n.get(e);
          var r = { __proto__: null },
            s = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var o in e)
            if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
              var a = s ? Object.getOwnPropertyDescriptor(e, o) : null;
              a && (a.get || a.set)
                ? Object.defineProperty(r, o, a)
                : (r[o] = e[o]);
            }
          return (r.default = e), n && n.set(e, r), r;
        })(n(65244));
        function i(e) {
          if ("function" != typeof WeakMap) return null;
          var t = new WeakMap(),
            n = new WeakMap();
          return (i = function (e) {
            return e ? n : t;
          })(e);
        }
        let s = { current: null },
          o = "function" == typeof r.cache ? r.cache : (e) => e,
          a = console.warn;
        function l(e) {
          return function (...t) {
            a(e(...t));
          };
        }
        o((e) => {
          try {
            a(s.current);
          } finally {
            s.current = null;
          }
        });
      },
      59893: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 87447));
      },
      60684: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { Lh: () => h, Uj: () => p, dY: () => f, gO: () => d });
            var i = n(61268),
              s = n(34088),
              o = n(76503),
              a = n(18542),
              l = n(30567),
              c = n(85137),
              u = e([l, c]);
            function d(e, t) {
              return t.map((t) => {
                var n;
                let r,
                  i =
                    ((n = t.originalText),
                    (r = null),
                    e.nodesBetween(0, e.content.size, (e, t) => {
                      if (e.isText && e.text) {
                        let i = e.text.indexOf(n);
                        if (-1 !== i)
                          return (
                            (r = { start: t + i, end: t + i + n.length }), !1
                          );
                      }
                      return !0;
                    }),
                    r);
                return i
                  ? { ...t, selectionStart: i.start, selectionEnd: i.end }
                  : { ...t, selectionStart: 0, selectionEnd: 0 };
              });
            }
            function h(e, t, n = l.b3.Text) {
              let r = document.createElement("span"),
                s = (0, a.createRoot)(r);
              return (
                r.addEventListener("mousedown", (e) => {
                  e.preventDefault(), t.dom.blur();
                }),
                s.render(
                  (0, i.jsx)(c.V, {
                    suggestion: e,
                    onApply: () => {
                      let { state: n, dispatch: r } = t,
                        i = n.tr,
                        s = p.getState(n),
                        a = s?.decorations;
                      if (a) {
                        let t = o.zF.create(
                          n.doc,
                          a.find().filter((t) => t.spec.suggestionId !== e.id),
                        );
                        i.setMeta(p, { decorations: t, selected: null }), r(i);
                      }
                      let l = t.state.tr.replaceWith(
                        e.selectionStart,
                        e.selectionEnd,
                        n.schema.text(e.suggestedText),
                      );
                      l.setMeta("no-debounce", !0), r(l);
                    },
                    artifactKind: n,
                  }),
                ),
                {
                  dom: r,
                  destroy: () => {
                    setTimeout(() => {
                      s.unmount();
                    }, 0);
                  },
                }
              );
            }
            [l, c] = u.then ? (await u)() : u;
            let p = new s.hs("suggestions"),
              f = new s.k_({
                key: p,
                state: {
                  init: () => ({ decorations: o.zF.empty, selected: null }),
                  apply(e, t) {
                    let n = e.getMeta(p);
                    return (
                      n || {
                        decorations: t.decorations.map(e.mapping, e.doc),
                        selected: t.selected,
                      }
                    );
                  },
                },
                props: {
                  decorations(e) {
                    return this.getState(e)?.decorations ?? o.zF.empty;
                  },
                },
              });
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      61423: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          !(function (e, t) {
            for (var n in t)
              Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
          })(t, {
            MutableRequestCookiesAdapter: function () {
              return h;
            },
            ReadonlyRequestCookiesError: function () {
              return a;
            },
            RequestCookiesAdapter: function () {
              return l;
            },
            appendMutableCookies: function () {
              return d;
            },
            areCookiesMutableInCurrentPhase: function () {
              return f;
            },
            getModifiedCookieValues: function () {
              return u;
            },
            responseCookiesToRequestCookies: function () {
              return g;
            },
            wrapWithMutableAccessCheck: function () {
              return p;
            },
          });
        let r = n(57716),
          i = n(9581),
          s = n(29294),
          o = n(63033);
        class a extends Error {
          constructor() {
            super(
              "Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#options",
            );
          }
          static callable() {
            throw new a();
          }
        }
        class l {
          static seal(e) {
            return new Proxy(e, {
              get(e, t, n) {
                switch (t) {
                  case "clear":
                  case "delete":
                  case "set":
                    return a.callable;
                  default:
                    return i.ReflectAdapter.get(e, t, n);
                }
              },
            });
          }
        }
        let c = Symbol.for("next.mutated.cookies");
        function u(e) {
          let t = e[c];
          return t && Array.isArray(t) && 0 !== t.length ? t : [];
        }
        function d(e, t) {
          let n = u(t);
          if (0 === n.length) return !1;
          let i = new r.ResponseCookies(e),
            s = i.getAll();
          for (let e of n) i.set(e);
          for (let e of s) i.set(e);
          return !0;
        }
        class h {
          static wrap(e, t) {
            let n = new r.ResponseCookies(new Headers());
            for (let t of e.getAll()) n.set(t);
            let o = [],
              a = new Set(),
              l = () => {
                let e = s.workAsyncStorage.getStore();
                if (
                  (e && (e.pathWasRevalidated = !0),
                  (o = n.getAll().filter((e) => a.has(e.name))),
                  t)
                ) {
                  let e = [];
                  for (let t of o) {
                    let n = new r.ResponseCookies(new Headers());
                    n.set(t), e.push(n.toString());
                  }
                  t(e);
                }
              },
              u = new Proxy(n, {
                get(e, t, n) {
                  switch (t) {
                    case c:
                      return o;
                    case "delete":
                      return function (...t) {
                        a.add("string" == typeof t[0] ? t[0] : t[0].name);
                        try {
                          return e.delete(...t), u;
                        } finally {
                          l();
                        }
                      };
                    case "set":
                      return function (...t) {
                        a.add("string" == typeof t[0] ? t[0] : t[0].name);
                        try {
                          return e.set(...t), u;
                        } finally {
                          l();
                        }
                      };
                    default:
                      return i.ReflectAdapter.get(e, t, n);
                  }
                },
              });
            return u;
          }
        }
        function p(e) {
          let t = new Proxy(e, {
            get(e, n, r) {
              switch (n) {
                case "delete":
                  return function (...n) {
                    return m("cookies().delete"), e.delete(...n), t;
                  };
                case "set":
                  return function (...n) {
                    return m("cookies().set"), e.set(...n), t;
                  };
                default:
                  return i.ReflectAdapter.get(e, n, r);
              }
            },
          });
          return t;
        }
        function f(e) {
          return "action" === e.phase;
        }
        function m(e) {
          if (!f((0, o.getExpectedRequestStore)(e))) throw new a();
        }
        function g(e) {
          let t = new r.RequestCookies(new Headers());
          for (let n of e.getAll()) t.set(n);
          return t;
        }
      },
      61469: (e, t, n) => {
        "use strict";
        n.d(t, { yf: () => l });
        var r = n(92858),
          i = n(43326),
          s = n(43758);
        class o extends s.pe {
          static [r.i] = "PgVarcharBuilder";
          constructor(e, t) {
            super(e, "string", "PgVarchar"),
              (this.config.length = t.length),
              (this.config.enumValues = t.enum);
          }
          build(e) {
            return new a(e, this.config);
          }
        }
        class a extends s.Kl {
          static [r.i] = "PgVarchar";
          length = this.config.length;
          enumValues = this.config.enumValues;
          getSQLType() {
            return void 0 === this.length
              ? "varchar"
              : `varchar(${this.length})`;
          }
        }
        function l(e, t = {}) {
          let { name: n, config: r } = (0, i.Ll)(e, t);
          return new o(n, r);
        }
      },
      62268: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { C: () => d });
            var i = n(61268),
              s = n(84205),
              o = n(84894),
              a = n(50616),
              l = n(15942),
              c = n(71269),
              u = e([l, c]);
            [l, c] = u.then ? (await u)() : u;
            let d = (0, s.memo)(function ({ content: e, className: t }) {
              return e
                ? (0, i.jsx)(o.oz, {
                    className: (0, l.cn)("prose dark:prose-invert", t),
                    remarkPlugins: [a.A],
                    components: {
                      pre: ({ children: e }) =>
                        (0, i.jsx)(i.Fragment, { children: e }),
                      code({ node: e, className: t, children: n, ...r }) {
                        let s = /language-(\w+)/.exec(t || ""),
                          o = String(n).replace(/\n$/, "");
                        return s
                          ? (0, i.jsx)(c.$, {
                              language: s[1],
                              code: o,
                              className: t,
                              ...r,
                            })
                          : (0, i.jsx)("code", {
                              className: (0, l.cn)(
                                "rounded-md bg-muted px-1 py-0.5 font-mono text-sm",
                                t,
                              ),
                              ...r,
                              children: o,
                            });
                      },
                    },
                    children: e,
                  })
                : (console.warn("Empty content in UnifiedMarkdown"), null);
            });
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      62428: (e, t, n) => {
        "use strict";
        n.d(t, {
          m2: () => o,
          Z9: () => E,
          n_: () => C,
          HD: () => _,
          Ds: () => k,
          sl: () => x,
          cV: () => w,
          zt: () => O,
          $C: () => l,
          v0: () => f,
          WL: () => u,
          xI: () => m,
          S: () => v,
          GU: () => y,
          ae: () => A,
        });
        var r = n(85743);
        let i =
          (e, t = 21) =>
          (n = t) => {
            let r = "",
              i = 0 | n;
            for (; i--; ) r += e[(Math.random() * e.length) | 0];
            return r;
          };
        var s = n(94173);
        function o(...e) {
          return e.reduce((e, t) => ({ ...e, ...(null != t ? t : {}) }), {});
        }
        function a(e) {
          let t = {};
          return (
            e.headers.forEach((e, n) => {
              t[n] = e;
            }),
            t
          );
        }
        var l = (({
          prefix: e,
          size: t = 16,
          alphabet:
            n = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
          separator: s = "-",
        } = {}) => {
          let o = i(n, t);
          if (null == e) return o;
          if (n.includes(s))
            throw new r.Di({
              argument: "separator",
              message: `The separator "${s}" must not be part of the alphabet "${n}".`,
            });
          return (t) => `${e}${s}${o(t)}`;
        })();
        function c(e) {
          return (
            e instanceof Error &&
            ("AbortError" === e.name || "TimeoutError" === e.name)
          );
        }
        function u({
          apiKey: e,
          environmentVariableName: t,
          apiKeyParameterName: n = "apiKey",
          description: i,
        }) {
          if ("string" == typeof e) return e;
          if (null != e)
            throw new r.Kq({ message: `${i} API key must be a string.` });
          if ("undefined" == typeof process)
            throw new r.Kq({
              message: `${i} API key is missing. Pass it using the '${n}' parameter. Environment variables is not supported in this environment.`,
            });
          if (null == (e = process.env[t]))
            throw new r.Kq({
              message: `${i} API key is missing. Pass it using the '${n}' parameter or the ${t} environment variable.`,
            });
          if ("string" != typeof e)
            throw new r.Kq({
              message: `${i} API key must be a string. The value of the ${t} environment variable is not a string.`,
            });
          return e;
        }
        var d = Symbol.for("vercel.ai.validator");
        function h({ value: e, schema: t }) {
          var n;
          let i =
            "object" == typeof t &&
            null !== t &&
            d in t &&
            !0 === t[d] &&
            "validate" in t
              ? t
              : ((n = t),
                {
                  [d]: !0,
                  validate: (e) => {
                    let t = n.safeParse(e);
                    return t.success
                      ? { success: !0, value: t.data }
                      : { success: !1, error: t.error };
                  },
                });
          try {
            if (null == i.validate) return { success: !0, value: e };
            let t = i.validate(e);
            if (t.success) return t;
            return {
              success: !1,
              error: r.iM.wrap({ value: e, cause: t.error }),
            };
          } catch (t) {
            return { success: !1, error: r.iM.wrap({ value: e, cause: t }) };
          }
        }
        function p({ text: e, schema: t }) {
          try {
            let n = s.parse(e);
            if (null == t) return { success: !0, value: n, rawValue: n };
            let r = h({ value: n, schema: t });
            return r.success ? { ...r, rawValue: n } : r;
          } catch (t) {
            return {
              success: !1,
              error: r.u6.isInstance(t) ? t : new r.u6({ text: e, cause: t }),
            };
          }
        }
        function f(e) {
          try {
            return s.parse(e), !0;
          } catch (e) {
            return !1;
          }
        }
        function m({ provider: e, providerOptions: t, schema: n }) {
          if ((null == t ? void 0 : t[e]) == null) return;
          let i = h({ value: t[e], schema: n });
          if (!i.success)
            throw new r.Di({
              argument: "providerOptions",
              message: `invalid ${e} provider options`,
              cause: i.error,
            });
          return i.value;
        }
        var g = () => globalThis.fetch,
          y = async ({
            url: e,
            headers: t,
            body: n,
            failedResponseHandler: r,
            successfulResponseHandler: i,
            abortSignal: s,
            fetch: o,
          }) =>
            b({
              url: e,
              headers: { "Content-Type": "application/json", ...t },
              body: { content: JSON.stringify(n), values: n },
              failedResponseHandler: r,
              successfulResponseHandler: i,
              abortSignal: s,
              fetch: o,
            }),
          v = async ({
            url: e,
            headers: t,
            formData: n,
            failedResponseHandler: r,
            successfulResponseHandler: i,
            abortSignal: s,
            fetch: o,
          }) =>
            b({
              url: e,
              headers: t,
              body: { content: n, values: Object.fromEntries(n.entries()) },
              failedResponseHandler: r,
              successfulResponseHandler: i,
              abortSignal: s,
              fetch: o,
            }),
          b = async ({
            url: e,
            headers: t = {},
            body: n,
            successfulResponseHandler: i,
            failedResponseHandler: s,
            abortSignal: o,
            fetch: l = g(),
          }) => {
            try {
              var u;
              let d = await l(e, {
                  method: "POST",
                  headers:
                    ((u = t),
                    Object.fromEntries(
                      Object.entries(u).filter(([e, t]) => null != t),
                    )),
                  body: n.content,
                  signal: o,
                }),
                h = a(d);
              if (!d.ok) {
                let t;
                try {
                  t = await s({
                    response: d,
                    url: e,
                    requestBodyValues: n.values,
                  });
                } catch (t) {
                  if (c(t) || r.hL.isInstance(t)) throw t;
                  throw new r.hL({
                    message: "Failed to process error response",
                    cause: t,
                    statusCode: d.status,
                    url: e,
                    responseHeaders: h,
                    requestBodyValues: n.values,
                  });
                }
                throw t.value;
              }
              try {
                return await i({
                  response: d,
                  url: e,
                  requestBodyValues: n.values,
                });
              } catch (t) {
                if (t instanceof Error && (c(t) || r.hL.isInstance(t))) throw t;
                throw new r.hL({
                  message: "Failed to process successful response",
                  cause: t,
                  statusCode: d.status,
                  url: e,
                  responseHeaders: h,
                  requestBodyValues: n.values,
                });
              }
            } catch (t) {
              if (c(t)) throw t;
              if (t instanceof TypeError && "fetch failed" === t.message) {
                let i = t.cause;
                if (null != i)
                  throw new r.hL({
                    message: `Cannot connect to API: ${i.message}`,
                    cause: i,
                    url: e,
                    requestBodyValues: n.values,
                    isRetryable: !0,
                  });
              }
              throw t;
            }
          },
          x =
            ({ errorSchema: e, errorToMessage: t, isRetryable: n }) =>
            async ({ response: i, url: o, requestBodyValues: l }) => {
              let c = await i.text(),
                u = a(i);
              if ("" === c.trim())
                return {
                  responseHeaders: u,
                  value: new r.hL({
                    message: i.statusText,
                    url: o,
                    requestBodyValues: l,
                    statusCode: i.status,
                    responseHeaders: u,
                    responseBody: c,
                    isRetryable: null == n ? void 0 : n(i),
                  }),
                };
              try {
                let a = (function ({ text: e, schema: t }) {
                  try {
                    let n = s.parse(e);
                    if (null == t) return n;
                    return (function ({ value: e, schema: t }) {
                      let n = h({ value: e, schema: t });
                      if (!n.success)
                        throw r.iM.wrap({ value: e, cause: n.error });
                      return n.value;
                    })({ value: n, schema: t });
                  } catch (t) {
                    if (r.u6.isInstance(t) || r.iM.isInstance(t)) throw t;
                    throw new r.u6({ text: e, cause: t });
                  }
                })({ text: c, schema: e });
                return {
                  responseHeaders: u,
                  value: new r.hL({
                    message: t(a),
                    url: o,
                    requestBodyValues: l,
                    statusCode: i.status,
                    responseHeaders: u,
                    responseBody: c,
                    data: a,
                    isRetryable: null == n ? void 0 : n(i, a),
                  }),
                };
              } catch (e) {
                return {
                  responseHeaders: u,
                  value: new r.hL({
                    message: i.statusText,
                    url: o,
                    requestBodyValues: l,
                    statusCode: i.status,
                    responseHeaders: u,
                    responseBody: c,
                    isRetryable: null == n ? void 0 : n(i),
                  }),
                };
              }
            },
          k =
            (e) =>
            async ({ response: t }) => {
              let n = a(t);
              if (null == t.body) throw new r.Tt({});
              return {
                responseHeaders: n,
                value: t.body
                  .pipeThrough(new TextDecoderStream())
                  .pipeThrough(
                    (function () {
                      let e,
                        t,
                        n,
                        r = "",
                        i = [];
                      function s(e, t) {
                        if ("" === e) return void o(t);
                        if (e.startsWith(":")) return;
                        let n = e.indexOf(":");
                        if (-1 === n) return void a(e, "");
                        let r = e.slice(0, n),
                          i = n + 1;
                        a(
                          r,
                          i < e.length && " " === e[i]
                            ? e.slice(i + 1)
                            : e.slice(i),
                        );
                      }
                      function o(r) {
                        i.length > 0 &&
                          (r.enqueue({
                            event: e,
                            data: i.join("\n"),
                            id: t,
                            retry: n,
                          }),
                          (i = []),
                          (e = void 0),
                          (n = void 0));
                      }
                      function a(r, s) {
                        switch (r) {
                          case "event":
                            e = s;
                            break;
                          case "data":
                            i.push(s);
                            break;
                          case "id":
                            t = s;
                            break;
                          case "retry":
                            let o = parseInt(s, 10);
                            isNaN(o) || (n = o);
                        }
                      }
                      return new TransformStream({
                        transform(e, t) {
                          let { lines: n, incompleteLine: i } = (function (
                            e,
                            t,
                          ) {
                            let n = [],
                              r = e;
                            for (let e = 0; e < t.length; ) {
                              let i = t[e++];
                              "\n" === i
                                ? (n.push(r), (r = ""))
                                : "\r" === i
                                  ? (n.push(r), (r = ""), "\n" === t[e] && e++)
                                  : (r += i);
                            }
                            return { lines: n, incompleteLine: r };
                          })(r, e);
                          r = i;
                          for (let e = 0; e < n.length; e++) s(n[e], t);
                        },
                        flush(e) {
                          s(r, e), o(e);
                        },
                      });
                    })(),
                  )
                  .pipeThrough(
                    new TransformStream({
                      transform({ data: t }, n) {
                        "[DONE]" !== t && n.enqueue(p({ text: t, schema: e }));
                      },
                    }),
                  ),
              };
            },
          w =
            (e) =>
            async ({ response: t, url: n, requestBodyValues: i }) => {
              let s = await t.text(),
                o = p({ text: s, schema: e }),
                l = a(t);
              if (!o.success)
                throw new r.hL({
                  message: "Invalid JSON response",
                  cause: o.error,
                  statusCode: t.status,
                  responseHeaders: l,
                  responseBody: s,
                  url: n,
                  requestBodyValues: i,
                });
              return {
                responseHeaders: l,
                value: o.value,
                rawValue: o.rawValue,
              };
            },
          _ =
            () =>
            async ({ response: e, url: t, requestBodyValues: n }) => {
              let i = a(e);
              if (!e.body)
                throw new r.hL({
                  message: "Response body is empty",
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: i,
                  responseBody: void 0,
                });
              try {
                let t = await e.arrayBuffer();
                return { responseHeaders: i, value: new Uint8Array(t) };
              } catch (s) {
                throw new r.hL({
                  message: "Failed to read response as array buffer",
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: i,
                  responseBody: void 0,
                  cause: s,
                });
              }
            },
          O =
            () =>
            async ({ response: e, url: t, requestBodyValues: n }) => {
              let i = a(e),
                s = await e.text();
              return {
                responseHeaders: i,
                value: new r.hL({
                  message: e.statusText,
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: i,
                  responseBody: s,
                }),
              };
            },
          { btoa: T, atob: S } = globalThis;
        function E(e) {
          let t = S(e.replace(/-/g, "+").replace(/_/g, "/"));
          return Uint8Array.from(t, (e) => e.codePointAt(0));
        }
        function C(e) {
          let t = "";
          for (let n = 0; n < e.length; n++) t += String.fromCodePoint(e[n]);
          return T(t);
        }
        function A(e) {
          return null == e ? void 0 : e.replace(/\/$/, "");
        }
      },
      63017: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 59059));
      },
      63033: (e) => {
        "use strict";
        e.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");
      },
      63575: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { r: () => c });
            var i = n(15324),
              s = n(84205),
              o = n(30567),
              a = n(39070),
              l = e([o, a, i]);
            function c({ id: e }) {
              let { data: t } = (0, i.Y_)({ id: e }),
                { artifact: n, setArtifact: r, setMetadata: o } = (0, a.ST)();
              return (0, s.useRef)(-1), null;
            }
            ([o, a, i] = l.then ? (await l)() : l), r();
          } catch (e) {
            r(e);
          }
        });
      },
      63806: (e, t, n) => {
        "use strict";
        n.d(t, { A: () => r });
        let r = (0, n(95255).A)("Image", [
          [
            "rect",
            {
              width: "18",
              height: "18",
              x: "3",
              y: "3",
              rx: "2",
              ry: "2",
              key: "1m3agn",
            },
          ],
          ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
          [
            "path",
            { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" },
          ],
        ]);
      },
      64105: (e, t, n) => {
        "use strict";
        n.d(t, { BN: () => i, E3: () => r, xT: () => c });
        for (
          var r = {
              8: "Backspace",
              9: "Tab",
              10: "Enter",
              12: "NumLock",
              13: "Enter",
              16: "Shift",
              17: "Control",
              18: "Alt",
              20: "CapsLock",
              27: "Escape",
              32: " ",
              33: "PageUp",
              34: "PageDown",
              35: "End",
              36: "Home",
              37: "ArrowLeft",
              38: "ArrowUp",
              39: "ArrowRight",
              40: "ArrowDown",
              44: "PrintScreen",
              45: "Insert",
              46: "Delete",
              59: ";",
              61: "=",
              91: "Meta",
              92: "Meta",
              106: "*",
              107: "+",
              108: ",",
              109: "-",
              110: ".",
              111: "/",
              144: "NumLock",
              145: "ScrollLock",
              160: "Shift",
              161: "Shift",
              162: "Control",
              163: "Control",
              164: "Alt",
              165: "Alt",
              173: "-",
              186: ";",
              187: "=",
              188: ",",
              189: "-",
              190: ".",
              191: "/",
              192: "`",
              219: "[",
              220: "\\",
              221: "]",
              222: "'",
            },
            i = {
              48: ")",
              49: "!",
              50: "@",
              51: "#",
              52: "$",
              53: "%",
              54: "^",
              55: "&",
              56: "*",
              57: "(",
              59: ":",
              61: "+",
              173: "_",
              186: ":",
              187: "+",
              188: "<",
              189: "_",
              190: ">",
              191: "?",
              192: "~",
              219: "{",
              220: "|",
              221: "}",
              222: '"',
            },
            s =
              "undefined" != typeof navigator && /Mac/.test(navigator.platform),
            o =
              "undefined" != typeof navigator &&
              /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(
                navigator.userAgent,
              ),
            a = 0;
          a < 10;
          a++
        )
          r[48 + a] = r[96 + a] = String(a);
        for (var a = 1; a <= 24; a++) r[a + 111] = "F" + a;
        for (var a = 65; a <= 90; a++)
          (r[a] = String.fromCharCode(a + 32)), (i[a] = String.fromCharCode(a));
        for (var l in r) i.hasOwnProperty(l) || (i[l] = r[l]);
        function c(e) {
          var t =
            (!(
              (s && e.metaKey && e.shiftKey && !e.ctrlKey && !e.altKey) ||
              (o && e.shiftKey && e.key && 1 == e.key.length) ||
              "Unidentified" == e.key
            ) &&
              e.key) ||
            (e.shiftKey ? i : r)[e.keyCode] ||
            e.key ||
            "Unidentified";
          return (
            "Esc" == t && (t = "Escape"),
            "Del" == t && (t = "Delete"),
            "Left" == t && (t = "ArrowLeft"),
            "Up" == t && (t = "ArrowUp"),
            "Right" == t && (t = "ArrowRight"),
            "Down" == t && (t = "ArrowDown"),
            t
          );
        }
      },
      64306: (e, t, n) => {
        "use strict";
        var r = Object.defineProperty,
          i = Object.getOwnPropertyDescriptor,
          s = Object.getOwnPropertyNames,
          o = Object.prototype.hasOwnProperty,
          a = {};
        ((e, t) => {
          for (var n in t) r(e, n, { get: t[n], enumerable: !0 });
        })(a, { createFireworks: () => g, fireworks: () => y }),
          (e.exports = ((e, t, n, a) => {
            if ((t && "object" == typeof t) || "function" == typeof t)
              for (let l of s(t))
                o.call(e, l) ||
                  l === n ||
                  r(e, l, {
                    get: () => t[l],
                    enumerable: !(a = i(t, l)) || a.enumerable,
                  });
            return e;
          })(r({}, "__esModule", { value: !0 }), a));
        var l = n(15642),
          c = n(70417),
          u = n(30879),
          d = n(70417),
          h = {
            "accounts/fireworks/models/flux-1-dev-fp8": {
              urlFormat: "workflows",
            },
            "accounts/fireworks/models/flux-1-schnell-fp8": {
              urlFormat: "workflows",
            },
            "accounts/fireworks/models/playground-v2-5-1024px-aesthetic": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
            "accounts/fireworks/models/japanese-stable-diffusion-xl": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
            "accounts/fireworks/models/playground-v2-1024px-aesthetic": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
            "accounts/fireworks/models/stable-diffusion-xl-1024-v1-0": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
            "accounts/fireworks/models/SSD-1B": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
          },
          p = class {
            constructor(e, t, n) {
              (this.modelId = e),
                (this.settings = t),
                (this.config = n),
                (this.specificationVersion = "v1");
            }
            get provider() {
              return this.config.provider;
            }
            get maxImagesPerCall() {
              var e;
              return null != (e = this.settings.maxImagesPerCall) ? e : 1;
            }
            async doGenerate({
              prompt: e,
              n: t,
              size: n,
              aspectRatio: r,
              seed: i,
              providerOptions: s,
              headers: o,
              abortSignal: a,
            }) {
              var l, c, u, p, f, m, g;
              let y = [],
                v = h[this.modelId];
              (null == v ? void 0 : v.supportsSize) ||
                null == n ||
                y.push({
                  type: "unsupported-setting",
                  setting: "size",
                  details:
                    "This model does not support the `size` option. Use `aspectRatio` instead.",
                }),
                (null == v ? void 0 : v.supportsSize) &&
                  null != r &&
                  y.push({
                    type: "unsupported-setting",
                    setting: "aspectRatio",
                    details:
                      "This model does not support the `aspectRatio` option.",
                  });
              let b = null == n ? void 0 : n.split("x"),
                x =
                  null !=
                  (u =
                    null ==
                    (c =
                      null == (l = this.config._internal)
                        ? void 0
                        : l.currentDate)
                      ? void 0
                      : c.call(l))
                    ? u
                    : new Date(),
                { value: k, responseHeaders: w } = await (0, d.postJsonToApi)({
                  url:
                    ((f = this.config.baseURL),
                    (null == (g = h[(m = this.modelId)])
                      ? void 0
                      : g.urlFormat) === "image_generation"
                      ? `${f}/image_generation/${m}`
                      : `${f}/workflows/${m}/text_to_image`),
                  headers: (0, d.combineHeaders)(this.config.headers(), o),
                  body: {
                    prompt: e,
                    aspect_ratio: r,
                    seed: i,
                    samples: t,
                    ...(b && { width: b[0], height: b[1] }),
                    ...(null != (p = s.fireworks) ? p : {}),
                  },
                  failedResponseHandler: (0,
                  d.createStatusCodeErrorResponseHandler)(),
                  successfulResponseHandler: (0,
                  d.createBinaryResponseHandler)(),
                  abortSignal: a,
                  fetch: this.config.fetch,
                });
              return {
                images: [k],
                warnings: y,
                response: { timestamp: x, modelId: this.modelId, headers: w },
              };
            }
          },
          f = {
            errorSchema: u.z.object({ error: u.z.string() }),
            errorToMessage: (e) => e.error,
          },
          m = "https://api.fireworks.ai/inference/v1";
        function g(e = {}) {
          var t;
          let n = (0, c.withoutTrailingSlash)(null != (t = e.baseURL) ? t : m),
            r = () => ({
              Authorization: `Bearer ${(0, c.loadApiKey)({ apiKey: e.apiKey, environmentVariableName: "FIREWORKS_API_KEY", description: "Fireworks API key" })}`,
              ...e.headers,
            }),
            i = (t) => ({
              provider: `fireworks.${t}`,
              url: ({ path: e }) => `${n}${e}`,
              headers: r,
              fetch: e.fetch,
            }),
            s = (e, t = {}) =>
              new l.OpenAICompatibleChatLanguageModel(e, t, {
                ...i("chat"),
                errorStructure: f,
                defaultObjectGenerationMode: "json",
              }),
            o = (e, t = {}) =>
              new p(e, t, { ...i("image"), baseURL: null != n ? n : m }),
            a = (e, t) => s(e, t);
          return (
            (a.completionModel = (e, t = {}) =>
              new l.OpenAICompatibleCompletionLanguageModel(e, t, {
                ...i("completion"),
                errorStructure: f,
              })),
            (a.chatModel = s),
            (a.languageModel = s),
            (a.textEmbeddingModel = (e, t = {}) =>
              new l.OpenAICompatibleEmbeddingModel(e, t, {
                ...i("embedding"),
                errorStructure: f,
              })),
            (a.image = o),
            (a.imageModel = o),
            a
          );
        }
        var y = g();
      },
      64609: (e) => {
        "use strict";
        var t = Object.defineProperty,
          n = Object.getOwnPropertyDescriptor,
          r = Object.getOwnPropertyNames,
          i = Object.prototype.hasOwnProperty,
          s = {};
        function o(e) {
          var t;
          let n = [
              "path" in e && e.path && `Path=${e.path}`,
              "expires" in e &&
                (e.expires || 0 === e.expires) &&
                `Expires=${("number" == typeof e.expires ? new Date(e.expires) : e.expires).toUTCString()}`,
              "maxAge" in e &&
                "number" == typeof e.maxAge &&
                `Max-Age=${e.maxAge}`,
              "domain" in e && e.domain && `Domain=${e.domain}`,
              "secure" in e && e.secure && "Secure",
              "httpOnly" in e && e.httpOnly && "HttpOnly",
              "sameSite" in e && e.sameSite && `SameSite=${e.sameSite}`,
              "partitioned" in e && e.partitioned && "Partitioned",
              "priority" in e && e.priority && `Priority=${e.priority}`,
            ].filter(Boolean),
            r = `${e.name}=${encodeURIComponent(null != (t = e.value) ? t : "")}`;
          return 0 === n.length ? r : `${r}; ${n.join("; ")}`;
        }
        function a(e) {
          let t = new Map();
          for (let n of e.split(/; */)) {
            if (!n) continue;
            let e = n.indexOf("=");
            if (-1 === e) {
              t.set(n, "true");
              continue;
            }
            let [r, i] = [n.slice(0, e), n.slice(e + 1)];
            try {
              t.set(r, decodeURIComponent(null != i ? i : "true"));
            } catch {}
          }
          return t;
        }
        function l(e) {
          if (!e) return;
          let [[t, n], ...r] = a(e),
            {
              domain: i,
              expires: s,
              httponly: o,
              maxage: l,
              path: d,
              samesite: h,
              secure: p,
              partitioned: f,
              priority: m,
            } = Object.fromEntries(
              r.map(([e, t]) => [e.toLowerCase().replace(/-/g, ""), t]),
            );
          {
            var g,
              y,
              v = {
                name: t,
                value: decodeURIComponent(n),
                domain: i,
                ...(s && { expires: new Date(s) }),
                ...(o && { httpOnly: !0 }),
                ...("string" == typeof l && { maxAge: Number(l) }),
                path: d,
                ...(h && {
                  sameSite: c.includes((g = (g = h).toLowerCase()))
                    ? g
                    : void 0,
                }),
                ...(p && { secure: !0 }),
                ...(m && {
                  priority: u.includes((y = (y = m).toLowerCase()))
                    ? y
                    : void 0,
                }),
                ...(f && { partitioned: !0 }),
              };
            let e = {};
            for (let t in v) v[t] && (e[t] = v[t]);
            return e;
          }
        }
        ((e, n) => {
          for (var r in n) t(e, r, { get: n[r], enumerable: !0 });
        })(s, {
          RequestCookies: () => d,
          ResponseCookies: () => h,
          parseCookie: () => a,
          parseSetCookie: () => l,
          stringifyCookie: () => o,
        }),
          (e.exports = ((e, s, o, a) => {
            if ((s && "object" == typeof s) || "function" == typeof s)
              for (let l of r(s))
                i.call(e, l) ||
                  l === o ||
                  t(e, l, {
                    get: () => s[l],
                    enumerable: !(a = n(s, l)) || a.enumerable,
                  });
            return e;
          })(t({}, "__esModule", { value: !0 }), s));
        var c = ["strict", "lax", "none"],
          u = ["low", "medium", "high"],
          d = class {
            constructor(e) {
              (this._parsed = new Map()), (this._headers = e);
              let t = e.get("cookie");
              if (t)
                for (let [e, n] of a(t))
                  this._parsed.set(e, { name: e, value: n });
            }
            [Symbol.iterator]() {
              return this._parsed[Symbol.iterator]();
            }
            get size() {
              return this._parsed.size;
            }
            get(...e) {
              let t = "string" == typeof e[0] ? e[0] : e[0].name;
              return this._parsed.get(t);
            }
            getAll(...e) {
              var t;
              let n = Array.from(this._parsed);
              if (!e.length) return n.map(([e, t]) => t);
              let r =
                "string" == typeof e[0]
                  ? e[0]
                  : null == (t = e[0])
                    ? void 0
                    : t.name;
              return n.filter(([e]) => e === r).map(([e, t]) => t);
            }
            has(e) {
              return this._parsed.has(e);
            }
            set(...e) {
              let [t, n] = 1 === e.length ? [e[0].name, e[0].value] : e,
                r = this._parsed;
              return (
                r.set(t, { name: t, value: n }),
                this._headers.set(
                  "cookie",
                  Array.from(r)
                    .map(([e, t]) => o(t))
                    .join("; "),
                ),
                this
              );
            }
            delete(e) {
              let t = this._parsed,
                n = Array.isArray(e) ? e.map((e) => t.delete(e)) : t.delete(e);
              return (
                this._headers.set(
                  "cookie",
                  Array.from(t)
                    .map(([e, t]) => o(t))
                    .join("; "),
                ),
                n
              );
            }
            clear() {
              return this.delete(Array.from(this._parsed.keys())), this;
            }
            [Symbol.for("edge-runtime.inspect.custom")]() {
              return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;
            }
            toString() {
              return [...this._parsed.values()]
                .map((e) => `${e.name}=${encodeURIComponent(e.value)}`)
                .join("; ");
            }
          },
          h = class {
            constructor(e) {
              var t, n, r;
              (this._parsed = new Map()), (this._headers = e);
              let i =
                null !=
                (r =
                  null !=
                  (n = null == (t = e.getSetCookie) ? void 0 : t.call(e))
                    ? n
                    : e.get("set-cookie"))
                  ? r
                  : [];
              for (let e of Array.isArray(i)
                ? i
                : (function (e) {
                    if (!e) return [];
                    var t,
                      n,
                      r,
                      i,
                      s,
                      o = [],
                      a = 0;
                    function l() {
                      for (; a < e.length && /\s/.test(e.charAt(a)); ) a += 1;
                      return a < e.length;
                    }
                    for (; a < e.length; ) {
                      for (t = a, s = !1; l(); )
                        if ("," === (n = e.charAt(a))) {
                          for (
                            r = a, a += 1, l(), i = a;
                            a < e.length &&
                            "=" !== (n = e.charAt(a)) &&
                            ";" !== n &&
                            "," !== n;

                          )
                            a += 1;
                          a < e.length && "=" === e.charAt(a)
                            ? ((s = !0),
                              (a = i),
                              o.push(e.substring(t, r)),
                              (t = a))
                            : (a = r + 1);
                        } else a += 1;
                      (!s || a >= e.length) && o.push(e.substring(t, e.length));
                    }
                    return o;
                  })(i)) {
                let t = l(e);
                t && this._parsed.set(t.name, t);
              }
            }
            get(...e) {
              let t = "string" == typeof e[0] ? e[0] : e[0].name;
              return this._parsed.get(t);
            }
            getAll(...e) {
              var t;
              let n = Array.from(this._parsed.values());
              if (!e.length) return n;
              let r =
                "string" == typeof e[0]
                  ? e[0]
                  : null == (t = e[0])
                    ? void 0
                    : t.name;
              return n.filter((e) => e.name === r);
            }
            has(e) {
              return this._parsed.has(e);
            }
            set(...e) {
              let [t, n, r] =
                  1 === e.length ? [e[0].name, e[0].value, e[0]] : e,
                i = this._parsed;
              return (
                i.set(
                  t,
                  (function (e = { name: "", value: "" }) {
                    return (
                      "number" == typeof e.expires &&
                        (e.expires = new Date(e.expires)),
                      e.maxAge &&
                        (e.expires = new Date(Date.now() + 1e3 * e.maxAge)),
                      (null === e.path || void 0 === e.path) && (e.path = "/"),
                      e
                    );
                  })({ name: t, value: n, ...r }),
                ),
                (function (e, t) {
                  for (let [, n] of (t.delete("set-cookie"), e)) {
                    let e = o(n);
                    t.append("set-cookie", e);
                  }
                })(i, this._headers),
                this
              );
            }
            delete(...e) {
              let [t, n] = "string" == typeof e[0] ? [e[0]] : [e[0].name, e[0]];
              return this.set({
                ...n,
                name: t,
                value: "",
                expires: new Date(0),
              });
            }
            [Symbol.for("edge-runtime.inspect.custom")]() {
              return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;
            }
            toString() {
              return [...this._parsed.values()].map(o).join("; ");
            }
          };
      },
      64680: (e, t, n) => {
        "use strict";
        n.d(t, {
          $L: () => A,
          Ln: () => m,
          N0: () => E,
          Um: () => C,
          Wg: () => g,
          X9: () => o,
          dL: () => z,
          jP: () => b,
          n9: () => T,
          oM: () => x,
          zy: () => O,
        });
        var r = n(14077);
        class i {
          constructor(e, t, n) {
            (this.pos = e), (this.delInfo = t), (this.recover = n);
          }
          get deleted() {
            return (8 & this.delInfo) > 0;
          }
          get deletedBefore() {
            return (5 & this.delInfo) > 0;
          }
          get deletedAfter() {
            return (6 & this.delInfo) > 0;
          }
          get deletedAcross() {
            return (4 & this.delInfo) > 0;
          }
        }
        class s {
          constructor(e, t = !1) {
            if (((this.ranges = e), (this.inverted = t), !e.length && s.empty))
              return s.empty;
          }
          recover(e) {
            let t = 0,
              n = 65535 & e;
            if (!this.inverted)
              for (let e = 0; e < n; e++)
                t += this.ranges[3 * e + 2] - this.ranges[3 * e + 1];
            return this.ranges[3 * n] + t + (e - (65535 & e)) / 65536;
          }
          mapResult(e, t = 1) {
            return this._map(e, t, !1);
          }
          map(e, t = 1) {
            return this._map(e, t, !0);
          }
          _map(e, t, n) {
            let r = 0,
              s = this.inverted ? 2 : 1,
              o = this.inverted ? 1 : 2;
            for (let a = 0; a < this.ranges.length; a += 3) {
              let l = this.ranges[a] - (this.inverted ? r : 0);
              if (l > e) break;
              let c = this.ranges[a + s],
                u = this.ranges[a + o],
                d = l + c;
              if (e <= d) {
                let s = c ? (e == l ? -1 : e == d ? 1 : t) : t,
                  o = l + r + (s < 0 ? 0 : u);
                if (n) return o;
                let h = e == (t < 0 ? l : d) ? null : a / 3 + (e - l) * 65536,
                  p = e == l ? 2 : e == d ? 1 : 4;
                return (t < 0 ? e != l : e != d) && (p |= 8), new i(o, p, h);
              }
              r += u - c;
            }
            return n ? e + r : new i(e + r, 0, null);
          }
          touches(e, t) {
            let n = 0,
              r = 65535 & t,
              i = this.inverted ? 2 : 1,
              s = this.inverted ? 1 : 2;
            for (let t = 0; t < this.ranges.length; t += 3) {
              let o = this.ranges[t] - (this.inverted ? n : 0);
              if (o > e) break;
              let a = this.ranges[t + i];
              if (e <= o + a && t == 3 * r) return !0;
              n += this.ranges[t + s] - a;
            }
            return !1;
          }
          forEach(e) {
            let t = this.inverted ? 2 : 1,
              n = this.inverted ? 1 : 2;
            for (let r = 0, i = 0; r < this.ranges.length; r += 3) {
              let s = this.ranges[r],
                o = s - (this.inverted ? i : 0),
                a = s + (this.inverted ? 0 : i),
                l = this.ranges[r + t],
                c = this.ranges[r + n];
              e(o, o + l, a, a + c), (i += c - l);
            }
          }
          invert() {
            return new s(this.ranges, !this.inverted);
          }
          toString() {
            return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
          }
          static offset(e) {
            return 0 == e ? s.empty : new s(e < 0 ? [0, -e, 0] : [0, 0, e]);
          }
        }
        s.empty = new s([]);
        class o {
          constructor(e, t, n = 0, r = e ? e.length : 0) {
            (this.mirror = t),
              (this.from = n),
              (this.to = r),
              (this._maps = e || []),
              (this.ownData = !(e || t));
          }
          get maps() {
            return this._maps;
          }
          slice(e = 0, t = this.maps.length) {
            return new o(this._maps, this.mirror, e, t);
          }
          appendMap(e, t) {
            this.ownData ||
              ((this._maps = this._maps.slice()),
              (this.mirror = this.mirror && this.mirror.slice()),
              (this.ownData = !0)),
              (this.to = this._maps.push(e)),
              null != t && this.setMirror(this._maps.length - 1, t);
          }
          appendMapping(e) {
            for (let t = 0, n = this._maps.length; t < e._maps.length; t++) {
              let r = e.getMirror(t);
              this.appendMap(e._maps[t], null != r && r < t ? n + r : void 0);
            }
          }
          getMirror(e) {
            if (this.mirror) {
              for (let t = 0; t < this.mirror.length; t++)
                if (this.mirror[t] == e)
                  return this.mirror[t + (t % 2 ? -1 : 1)];
            }
          }
          setMirror(e, t) {
            this.mirror || (this.mirror = []), this.mirror.push(e, t);
          }
          appendMappingInverted(e) {
            for (
              let t = e.maps.length - 1, n = this._maps.length + e._maps.length;
              t >= 0;
              t--
            ) {
              let r = e.getMirror(t);
              this.appendMap(
                e._maps[t].invert(),
                null != r && r > t ? n - r - 1 : void 0,
              );
            }
          }
          invert() {
            let e = new o();
            return e.appendMappingInverted(this), e;
          }
          map(e, t = 1) {
            if (this.mirror) return this._map(e, t, !0);
            for (let n = this.from; n < this.to; n++)
              e = this._maps[n].map(e, t);
            return e;
          }
          mapResult(e, t = 1) {
            return this._map(e, t, !1);
          }
          _map(e, t, n) {
            let r = 0;
            for (let n = this.from; n < this.to; n++) {
              let i = this._maps[n].mapResult(e, t);
              if (null != i.recover) {
                let t = this.getMirror(n);
                if (null != t && t > n && t < this.to) {
                  (n = t), (e = this._maps[t].recover(i.recover));
                  continue;
                }
              }
              (r |= i.delInfo), (e = i.pos);
            }
            return n ? e : new i(e, r, null);
          }
        }
        let a = Object.create(null);
        class l {
          getMap() {
            return s.empty;
          }
          merge(e) {
            return null;
          }
          static fromJSON(e, t) {
            if (!t || !t.stepType)
              throw RangeError("Invalid input for Step.fromJSON");
            let n = a[t.stepType];
            if (!n) throw RangeError(`No step type ${t.stepType} defined`);
            return n.fromJSON(e, t);
          }
          static jsonID(e, t) {
            if (e in a) throw RangeError("Duplicate use of step JSON ID " + e);
            return (a[e] = t), (t.prototype.jsonID = e), t;
          }
        }
        class c {
          constructor(e, t) {
            (this.doc = e), (this.failed = t);
          }
          static ok(e) {
            return new c(e, null);
          }
          static fail(e) {
            return new c(null, e);
          }
          static fromReplace(e, t, n, i) {
            try {
              return c.ok(e.replace(t, n, i));
            } catch (e) {
              if (e instanceof r.vI) return c.fail(e.message);
              throw e;
            }
          }
        }
        function u(e, t, n) {
          let i = [];
          for (let r = 0; r < e.childCount; r++) {
            let s = e.child(r);
            s.content.size && (s = s.copy(u(s.content, t, s))),
              s.isInline && (s = t(s, n, r)),
              i.push(s);
          }
          return r.FK.fromArray(i);
        }
        class d extends l {
          constructor(e, t, n) {
            super(), (this.from = e), (this.to = t), (this.mark = n);
          }
          apply(e) {
            let t = e.slice(this.from, this.to),
              n = e.resolve(this.from),
              i = n.node(n.sharedDepth(this.to)),
              s = new r.Ji(
                u(
                  t.content,
                  (e, t) =>
                    e.isAtom && t.type.allowsMarkType(this.mark.type)
                      ? e.mark(this.mark.addToSet(e.marks))
                      : e,
                  i,
                ),
                t.openStart,
                t.openEnd,
              );
            return c.fromReplace(e, this.from, this.to, s);
          }
          invert() {
            return new h(this.from, this.to, this.mark);
          }
          map(e) {
            let t = e.mapResult(this.from, 1),
              n = e.mapResult(this.to, -1);
            return (t.deleted && n.deleted) || t.pos >= n.pos
              ? null
              : new d(t.pos, n.pos, this.mark);
          }
          merge(e) {
            return e instanceof d &&
              e.mark.eq(this.mark) &&
              this.from <= e.to &&
              this.to >= e.from
              ? new d(
                  Math.min(this.from, e.from),
                  Math.max(this.to, e.to),
                  this.mark,
                )
              : null;
          }
          toJSON() {
            return {
              stepType: "addMark",
              mark: this.mark.toJSON(),
              from: this.from,
              to: this.to,
            };
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.from || "number" != typeof t.to)
              throw RangeError("Invalid input for AddMarkStep.fromJSON");
            return new d(t.from, t.to, e.markFromJSON(t.mark));
          }
        }
        l.jsonID("addMark", d);
        class h extends l {
          constructor(e, t, n) {
            super(), (this.from = e), (this.to = t), (this.mark = n);
          }
          apply(e) {
            let t = e.slice(this.from, this.to),
              n = new r.Ji(
                u(
                  t.content,
                  (e) => e.mark(this.mark.removeFromSet(e.marks)),
                  e,
                ),
                t.openStart,
                t.openEnd,
              );
            return c.fromReplace(e, this.from, this.to, n);
          }
          invert() {
            return new d(this.from, this.to, this.mark);
          }
          map(e) {
            let t = e.mapResult(this.from, 1),
              n = e.mapResult(this.to, -1);
            return (t.deleted && n.deleted) || t.pos >= n.pos
              ? null
              : new h(t.pos, n.pos, this.mark);
          }
          merge(e) {
            return e instanceof h &&
              e.mark.eq(this.mark) &&
              this.from <= e.to &&
              this.to >= e.from
              ? new h(
                  Math.min(this.from, e.from),
                  Math.max(this.to, e.to),
                  this.mark,
                )
              : null;
          }
          toJSON() {
            return {
              stepType: "removeMark",
              mark: this.mark.toJSON(),
              from: this.from,
              to: this.to,
            };
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.from || "number" != typeof t.to)
              throw RangeError("Invalid input for RemoveMarkStep.fromJSON");
            return new h(t.from, t.to, e.markFromJSON(t.mark));
          }
        }
        l.jsonID("removeMark", h);
        class p extends l {
          constructor(e, t) {
            super(), (this.pos = e), (this.mark = t);
          }
          apply(e) {
            let t = e.nodeAt(this.pos);
            if (!t) return c.fail("No node at mark step's position");
            let n = t.type.create(t.attrs, null, this.mark.addToSet(t.marks));
            return c.fromReplace(
              e,
              this.pos,
              this.pos + 1,
              new r.Ji(r.FK.from(n), 0, +!t.isLeaf),
            );
          }
          invert(e) {
            let t = e.nodeAt(this.pos);
            if (t) {
              let e = this.mark.addToSet(t.marks);
              if (e.length == t.marks.length) {
                for (let n = 0; n < t.marks.length; n++)
                  if (!t.marks[n].isInSet(e))
                    return new p(this.pos, t.marks[n]);
                return new p(this.pos, this.mark);
              }
            }
            return new f(this.pos, this.mark);
          }
          map(e) {
            let t = e.mapResult(this.pos, 1);
            return t.deletedAfter ? null : new p(t.pos, this.mark);
          }
          toJSON() {
            return {
              stepType: "addNodeMark",
              pos: this.pos,
              mark: this.mark.toJSON(),
            };
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.pos)
              throw RangeError("Invalid input for AddNodeMarkStep.fromJSON");
            return new p(t.pos, e.markFromJSON(t.mark));
          }
        }
        l.jsonID("addNodeMark", p);
        class f extends l {
          constructor(e, t) {
            super(), (this.pos = e), (this.mark = t);
          }
          apply(e) {
            let t = e.nodeAt(this.pos);
            if (!t) return c.fail("No node at mark step's position");
            let n = t.type.create(
              t.attrs,
              null,
              this.mark.removeFromSet(t.marks),
            );
            return c.fromReplace(
              e,
              this.pos,
              this.pos + 1,
              new r.Ji(r.FK.from(n), 0, +!t.isLeaf),
            );
          }
          invert(e) {
            let t = e.nodeAt(this.pos);
            return t && this.mark.isInSet(t.marks)
              ? new p(this.pos, this.mark)
              : this;
          }
          map(e) {
            let t = e.mapResult(this.pos, 1);
            return t.deletedAfter ? null : new f(t.pos, this.mark);
          }
          toJSON() {
            return {
              stepType: "removeNodeMark",
              pos: this.pos,
              mark: this.mark.toJSON(),
            };
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.pos)
              throw RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
            return new f(t.pos, e.markFromJSON(t.mark));
          }
        }
        l.jsonID("removeNodeMark", f);
        class m extends l {
          constructor(e, t, n, r = !1) {
            super(),
              (this.from = e),
              (this.to = t),
              (this.slice = n),
              (this.structure = r);
          }
          apply(e) {
            return this.structure && y(e, this.from, this.to)
              ? c.fail("Structure replace would overwrite content")
              : c.fromReplace(e, this.from, this.to, this.slice);
          }
          getMap() {
            return new s([this.from, this.to - this.from, this.slice.size]);
          }
          invert(e) {
            return new m(
              this.from,
              this.from + this.slice.size,
              e.slice(this.from, this.to),
            );
          }
          map(e) {
            let t = e.mapResult(this.from, 1),
              n = e.mapResult(this.to, -1);
            return t.deletedAcross && n.deletedAcross
              ? null
              : new m(
                  t.pos,
                  Math.max(t.pos, n.pos),
                  this.slice,
                  this.structure,
                );
          }
          merge(e) {
            if (!(e instanceof m) || e.structure || this.structure) return null;
            if (
              this.from + this.slice.size != e.from ||
              this.slice.openEnd ||
              e.slice.openStart
            )
              if (e.to != this.from || this.slice.openStart || e.slice.openEnd)
                return null;
              else {
                let t =
                  this.slice.size + e.slice.size == 0
                    ? r.Ji.empty
                    : new r.Ji(
                        e.slice.content.append(this.slice.content),
                        e.slice.openStart,
                        this.slice.openEnd,
                      );
                return new m(e.from, this.to, t, this.structure);
              }
            {
              let t =
                this.slice.size + e.slice.size == 0
                  ? r.Ji.empty
                  : new r.Ji(
                      this.slice.content.append(e.slice.content),
                      this.slice.openStart,
                      e.slice.openEnd,
                    );
              return new m(
                this.from,
                this.to + (e.to - e.from),
                t,
                this.structure,
              );
            }
          }
          toJSON() {
            let e = { stepType: "replace", from: this.from, to: this.to };
            return (
              this.slice.size && (e.slice = this.slice.toJSON()),
              this.structure && (e.structure = !0),
              e
            );
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.from || "number" != typeof t.to)
              throw RangeError("Invalid input for ReplaceStep.fromJSON");
            return new m(
              t.from,
              t.to,
              r.Ji.fromJSON(e, t.slice),
              !!t.structure,
            );
          }
        }
        l.jsonID("replace", m);
        class g extends l {
          constructor(e, t, n, r, i, s, o = !1) {
            super(),
              (this.from = e),
              (this.to = t),
              (this.gapFrom = n),
              (this.gapTo = r),
              (this.slice = i),
              (this.insert = s),
              (this.structure = o);
          }
          apply(e) {
            if (
              this.structure &&
              (y(e, this.from, this.gapFrom) || y(e, this.gapTo, this.to))
            )
              return c.fail("Structure gap-replace would overwrite content");
            let t = e.slice(this.gapFrom, this.gapTo);
            if (t.openStart || t.openEnd)
              return c.fail("Gap is not a flat range");
            let n = this.slice.insertAt(this.insert, t.content);
            return n
              ? c.fromReplace(e, this.from, this.to, n)
              : c.fail("Content does not fit in gap");
          }
          getMap() {
            return new s([
              this.from,
              this.gapFrom - this.from,
              this.insert,
              this.gapTo,
              this.to - this.gapTo,
              this.slice.size - this.insert,
            ]);
          }
          invert(e) {
            let t = this.gapTo - this.gapFrom;
            return new g(
              this.from,
              this.from + this.slice.size + t,
              this.from + this.insert,
              this.from + this.insert + t,
              e
                .slice(this.from, this.to)
                .removeBetween(
                  this.gapFrom - this.from,
                  this.gapTo - this.from,
                ),
              this.gapFrom - this.from,
              this.structure,
            );
          }
          map(e) {
            let t = e.mapResult(this.from, 1),
              n = e.mapResult(this.to, -1),
              r = this.from == this.gapFrom ? t.pos : e.map(this.gapFrom, -1),
              i = this.to == this.gapTo ? n.pos : e.map(this.gapTo, 1);
            return (t.deletedAcross && n.deletedAcross) ||
              r < t.pos ||
              i > n.pos
              ? null
              : new g(
                  t.pos,
                  n.pos,
                  r,
                  i,
                  this.slice,
                  this.insert,
                  this.structure,
                );
          }
          toJSON() {
            let e = {
              stepType: "replaceAround",
              from: this.from,
              to: this.to,
              gapFrom: this.gapFrom,
              gapTo: this.gapTo,
              insert: this.insert,
            };
            return (
              this.slice.size && (e.slice = this.slice.toJSON()),
              this.structure && (e.structure = !0),
              e
            );
          }
          static fromJSON(e, t) {
            if (
              "number" != typeof t.from ||
              "number" != typeof t.to ||
              "number" != typeof t.gapFrom ||
              "number" != typeof t.gapTo ||
              "number" != typeof t.insert
            )
              throw RangeError("Invalid input for ReplaceAroundStep.fromJSON");
            return new g(
              t.from,
              t.to,
              t.gapFrom,
              t.gapTo,
              r.Ji.fromJSON(e, t.slice),
              t.insert,
              !!t.structure,
            );
          }
        }
        function y(e, t, n) {
          let r = e.resolve(t),
            i = n - t,
            s = r.depth;
          for (; i > 0 && s > 0 && r.indexAfter(s) == r.node(s).childCount; )
            s--, i--;
          if (i > 0) {
            let e = r.node(s).maybeChild(r.indexAfter(s));
            for (; i > 0; ) {
              if (!e || e.isLeaf) return !0;
              (e = e.firstChild), i--;
            }
          }
          return !1;
        }
        function v(e, t, n, i = n.contentMatch, s = !0) {
          let o = e.doc.nodeAt(t),
            a = [],
            l = t + 1;
          for (let t = 0; t < o.childCount; t++) {
            let c = o.child(t),
              u = l + c.nodeSize,
              d = i.matchType(c.type);
            if (d) {
              i = d;
              for (let t = 0; t < c.marks.length; t++)
                n.allowsMarkType(c.marks[t].type) ||
                  e.step(new h(l, u, c.marks[t]));
              if (s && c.isText && "pre" != n.whitespace) {
                let e,
                  t = /\r?\n|\r/g,
                  i;
                for (; (e = t.exec(c.text)); )
                  i ||
                    (i = new r.Ji(
                      r.FK.from(n.schema.text(" ", n.allowedMarks(c.marks))),
                      0,
                      0,
                    )),
                    a.push(new m(l + e.index, l + e.index + e[0].length, i));
              }
            } else a.push(new m(l, u, r.Ji.empty));
            l = u;
          }
          if (!i.validEnd) {
            let t = i.fillBefore(r.FK.empty, !0);
            e.replace(l, l, new r.Ji(t, 0, 0));
          }
          for (let t = a.length - 1; t >= 0; t--) e.step(a[t]);
        }
        function b(e) {
          let t = e.parent.content.cutByIndex(e.startIndex, e.endIndex);
          for (let n = e.depth; ; --n) {
            let r = e.$from.node(n),
              i = e.$from.index(n),
              s = e.$to.indexAfter(n);
            if (n < e.depth && r.canReplace(i, s, t)) return n;
            if (
              0 == n ||
              r.type.spec.isolating ||
              !(
                (0 == i || r.canReplace(i, r.childCount)) &&
                (s == r.childCount || r.canReplace(0, s))
              )
            )
              break;
          }
          return null;
        }
        function x(e, t, n = null, r = e) {
          let i = (function (e, t) {
              let { parent: n, startIndex: r, endIndex: i } = e,
                s = n.contentMatchAt(r).findWrapping(t);
              if (!s) return null;
              let o = s.length ? s[0] : t;
              return n.canReplaceWith(r, i, o) ? s : null;
            })(e, t),
            s =
              i &&
              (function (e, t) {
                let { parent: n, startIndex: r, endIndex: i } = e,
                  s = n.child(r),
                  o = t.contentMatch.findWrapping(s.type);
                if (!o) return null;
                let a = (o.length ? o[o.length - 1] : t).contentMatch;
                for (let e = r; a && e < i; e++)
                  a = a.matchType(n.child(e).type);
                return a && a.validEnd ? o : null;
              })(r, t);
          return s
            ? i.map(k).concat({ type: t, attrs: n }).concat(s.map(k))
            : null;
        }
        function k(e) {
          return { type: e, attrs: null };
        }
        function w(e, t, n, r) {
          t.forEach((i, s) => {
            if (i.isText) {
              let o,
                a = /\r?\n|\r/g;
              for (; (o = a.exec(i.text)); ) {
                let i = e.mapping.slice(r).map(n + 1 + s + o.index);
                e.replaceWith(
                  i,
                  i + 1,
                  t.type.schema.linebreakReplacement.create(),
                );
              }
            }
          });
        }
        function _(e, t, n, r) {
          t.forEach((i, s) => {
            if (i.type == i.type.schema.linebreakReplacement) {
              let i = e.mapping.slice(r).map(n + 1 + s);
              e.replaceWith(i, i + 1, t.type.schema.text("\n"));
            }
          });
        }
        function O(e, t, n = 1, r) {
          let i = e.resolve(t),
            s = i.depth - n,
            o = (r && r[r.length - 1]) || i.parent;
          if (
            s < 0 ||
            i.parent.type.spec.isolating ||
            !i.parent.canReplace(i.index(), i.parent.childCount) ||
            !o.type.validContent(
              i.parent.content.cutByIndex(i.index(), i.parent.childCount),
            )
          )
            return !1;
          for (let e = i.depth - 1, t = n - 2; e > s; e--, t--) {
            let n = i.node(e),
              s = i.index(e);
            if (n.type.spec.isolating) return !1;
            let o = n.content.cutByIndex(s, n.childCount),
              a = r && r[t + 1];
            a && (o = o.replaceChild(0, a.type.create(a.attrs)));
            let l = (r && r[t]) || n;
            if (!n.canReplace(s + 1, n.childCount) || !l.type.validContent(o))
              return !1;
          }
          let a = i.indexAfter(s),
            l = r && r[0];
          return i
            .node(s)
            .canReplaceWith(a, a, l ? l.type : i.node(s + 1).type);
        }
        function T(e, t) {
          let n = e.resolve(t),
            r = n.index();
          return S(n.nodeBefore, n.nodeAfter) && n.parent.canReplace(r, r + 1);
        }
        function S(e, t) {
          return !!(
            e &&
            t &&
            !e.isLeaf &&
            (function (e, t) {
              t.content.size || e.type.compatibleContent(t.type);
              let n = e.contentMatchAt(e.childCount),
                { linebreakReplacement: r } = e.type.schema;
              for (let i = 0; i < t.childCount; i++) {
                let s = t.child(i),
                  o = s.type == r ? e.type.schema.nodes.text : s.type;
                if (!(n = n.matchType(o)) || !e.type.allowsMarks(s.marks))
                  return !1;
              }
              return n.validEnd;
            })(e, t)
          );
        }
        function E(e, t, n = -1) {
          let r = e.resolve(t);
          for (let e = r.depth; ; e--) {
            let i,
              s,
              o = r.index(e);
            if (
              (e == r.depth
                ? ((i = r.nodeBefore), (s = r.nodeAfter))
                : n > 0
                  ? ((i = r.node(e + 1)), o++, (s = r.node(e).maybeChild(o)))
                  : ((i = r.node(e).maybeChild(o - 1)), (s = r.node(e + 1))),
              i && !i.isTextblock && S(i, s) && r.node(e).canReplace(o, o + 1))
            )
              return t;
            if (0 == e) break;
            t = n < 0 ? r.before(e) : r.after(e);
          }
        }
        function C(e, t, n) {
          let r = e.resolve(t);
          if (!n.content.size) return t;
          let i = n.content;
          for (let e = 0; e < n.openStart; e++) i = i.firstChild.content;
          for (let e = 1; e <= (0 == n.openStart && n.size ? 2 : 1); e++)
            for (let t = r.depth; t >= 0; t--) {
              let n =
                  t == r.depth
                    ? 0
                    : r.pos <= (r.start(t + 1) + r.end(t + 1)) / 2
                      ? -1
                      : 1,
                s = r.index(t) + +(n > 0),
                o = r.node(t),
                a = !1;
              if (1 == e) a = o.canReplace(s, s, i);
              else {
                let e = o.contentMatchAt(s).findWrapping(i.firstChild.type);
                a = e && o.canReplaceWith(s, s, e[0]);
              }
              if (a)
                return 0 == n
                  ? r.pos
                  : n < 0
                    ? r.before(t + 1)
                    : r.after(t + 1);
            }
          return null;
        }
        function A(e, t, n = t, i = r.Ji.empty) {
          if (t == n && !i.size) return null;
          let s = e.resolve(t),
            o = e.resolve(n);
          return N(s, o, i) ? new m(t, n, i) : new I(s, o, i).fit();
        }
        function N(e, t, n) {
          return (
            !n.openStart &&
            !n.openEnd &&
            e.start() == t.start() &&
            e.parent.canReplace(e.index(), t.index(), n.content)
          );
        }
        l.jsonID("replaceAround", g);
        class I {
          constructor(e, t, n) {
            (this.$from = e),
              (this.$to = t),
              (this.unplaced = n),
              (this.frontier = []),
              (this.placed = r.FK.empty);
            for (let t = 0; t <= e.depth; t++) {
              let n = e.node(t);
              this.frontier.push({
                type: n.type,
                match: n.contentMatchAt(e.indexAfter(t)),
              });
            }
            for (let t = e.depth; t > 0; t--)
              this.placed = r.FK.from(e.node(t).copy(this.placed));
          }
          get depth() {
            return this.frontier.length - 1;
          }
          fit() {
            for (; this.unplaced.size; ) {
              let e = this.findFittable();
              e ? this.placeNodes(e) : this.openMore() || this.dropNode();
            }
            let e = this.mustMoveInline(),
              t = this.placed.size - this.depth - this.$from.depth,
              n = this.$from,
              i = this.close(e < 0 ? this.$to : n.doc.resolve(e));
            if (!i) return null;
            let s = this.placed,
              o = n.depth,
              a = i.depth;
            for (; o && a && 1 == s.childCount; )
              (s = s.firstChild.content), o--, a--;
            let l = new r.Ji(s, o, a);
            return e > -1
              ? new g(n.pos, e, this.$to.pos, this.$to.end(), l, t)
              : l.size || n.pos != this.$to.pos
                ? new m(n.pos, i.pos, l)
                : null;
          }
          findFittable() {
            let e = this.unplaced.openStart;
            for (
              let t = this.unplaced.content, n = 0, r = this.unplaced.openEnd;
              n < e;
              n++
            ) {
              let i = t.firstChild;
              if (
                (t.childCount > 1 && (r = 0), i.type.spec.isolating && r <= n)
              ) {
                e = n;
                break;
              }
              t = i.content;
            }
            for (let t = 1; t <= 2; t++)
              for (let n = 1 == t ? e : this.unplaced.openStart; n >= 0; n--) {
                let e,
                  i = null,
                  s = (
                    n
                      ? (i = R(this.unplaced.content, n - 1).firstChild).content
                      : this.unplaced.content
                  ).firstChild;
                for (let e = this.depth; e >= 0; e--) {
                  let { type: o, match: a } = this.frontier[e],
                    l,
                    c = null;
                  if (
                    1 == t &&
                    (s
                      ? a.matchType(s.type) ||
                        (c = a.fillBefore(r.FK.from(s), !1))
                      : i && o.compatibleContent(i.type))
                  )
                    return {
                      sliceDepth: n,
                      frontierDepth: e,
                      parent: i,
                      inject: c,
                    };
                  if (2 == t && s && (l = a.findWrapping(s.type)))
                    return {
                      sliceDepth: n,
                      frontierDepth: e,
                      parent: i,
                      wrap: l,
                    };
                  if (i && a.matchType(i.type)) break;
                }
              }
          }
          openMore() {
            let { content: e, openStart: t, openEnd: n } = this.unplaced,
              i = R(e, t);
            return (
              !!i.childCount &&
              !i.firstChild.isLeaf &&
              ((this.unplaced = new r.Ji(
                e,
                t + 1,
                Math.max(n, i.size + t >= e.size - n ? t + 1 : 0),
              )),
              !0)
            );
          }
          dropNode() {
            let { content: e, openStart: t, openEnd: n } = this.unplaced,
              i = R(e, t);
            if (i.childCount <= 1 && t > 0) {
              let s = e.size - t <= t + i.size;
              this.unplaced = new r.Ji(D(e, t - 1, 1), t - 1, s ? t - 1 : n);
            } else this.unplaced = new r.Ji(D(e, t, 1), t, n);
          }
          placeNodes({
            sliceDepth: e,
            frontierDepth: t,
            parent: n,
            inject: i,
            wrap: s,
          }) {
            for (; this.depth > t; ) this.closeFrontierNode();
            if (s)
              for (let e = 0; e < s.length; e++) this.openFrontierNode(s[e]);
            let o = this.unplaced,
              a = n ? n.content : o.content,
              l = o.openStart - e,
              c = 0,
              u = [],
              { match: d, type: h } = this.frontier[t];
            if (i) {
              for (let e = 0; e < i.childCount; e++) u.push(i.child(e));
              d = d.matchFragment(i);
            }
            let p = a.size + e - (o.content.size - o.openEnd);
            for (; c < a.childCount; ) {
              let e = a.child(c),
                t = d.matchType(e.type);
              if (!t) break;
              (++c > 1 || 0 == l || e.content.size) &&
                ((d = t),
                u.push(
                  (function e(t, n, i) {
                    if (n <= 0) return t;
                    let s = t.content;
                    return (
                      n > 1 &&
                        (s = s.replaceChild(
                          0,
                          e(s.firstChild, n - 1, 1 == s.childCount ? i - 1 : 0),
                        )),
                      n > 0 &&
                        ((s = t.type.contentMatch.fillBefore(s).append(s)),
                        i <= 0 &&
                          (s = s.append(
                            t.type.contentMatch
                              .matchFragment(s)
                              .fillBefore(r.FK.empty, !0),
                          ))),
                      t.copy(s)
                    );
                  })(
                    e.mark(h.allowedMarks(e.marks)),
                    1 == c ? l : 0,
                    c == a.childCount ? p : -1,
                  ),
                ));
            }
            let f = c == a.childCount;
            f || (p = -1),
              (this.placed = P(this.placed, t, r.FK.from(u))),
              (this.frontier[t].match = d),
              f &&
                p < 0 &&
                n &&
                n.type == this.frontier[this.depth].type &&
                this.frontier.length > 1 &&
                this.closeFrontierNode();
            for (let e = 0, t = a; e < p; e++) {
              let e = t.lastChild;
              this.frontier.push({
                type: e.type,
                match: e.contentMatchAt(e.childCount),
              }),
                (t = e.content);
            }
            this.unplaced = f
              ? 0 == e
                ? r.Ji.empty
                : new r.Ji(
                    D(o.content, e - 1, 1),
                    e - 1,
                    p < 0 ? o.openEnd : e - 1,
                  )
              : new r.Ji(D(o.content, e, c), o.openStart, o.openEnd);
          }
          mustMoveInline() {
            if (!this.$to.parent.isTextblock) return -1;
            let e = this.frontier[this.depth],
              t;
            if (
              !e.type.isTextblock ||
              !M(this.$to, this.$to.depth, e.type, e.match, !1) ||
              (this.$to.depth == this.depth &&
                (t = this.findCloseLevel(this.$to)) &&
                t.depth == this.depth)
            )
              return -1;
            let { depth: n } = this.$to,
              r = this.$to.after(n);
            for (; n > 1 && r == this.$to.end(--n); ) ++r;
            return r;
          }
          findCloseLevel(e) {
            t: for (let t = Math.min(this.depth, e.depth); t >= 0; t--) {
              let { match: n, type: r } = this.frontier[t],
                i = t < e.depth && e.end(t + 1) == e.pos + (e.depth - (t + 1)),
                s = M(e, t, r, n, i);
              if (s) {
                for (let n = t - 1; n >= 0; n--) {
                  let { match: t, type: r } = this.frontier[n],
                    i = M(e, n, r, t, !0);
                  if (!i || i.childCount) continue t;
                }
                return {
                  depth: t,
                  fit: s,
                  move: i ? e.doc.resolve(e.after(t + 1)) : e,
                };
              }
            }
          }
          close(e) {
            let t = this.findCloseLevel(e);
            if (!t) return null;
            for (; this.depth > t.depth; ) this.closeFrontierNode();
            t.fit.childCount && (this.placed = P(this.placed, t.depth, t.fit)),
              (e = t.move);
            for (let n = t.depth + 1; n <= e.depth; n++) {
              let t = e.node(n),
                r = t.type.contentMatch.fillBefore(t.content, !0, e.index(n));
              this.openFrontierNode(t.type, t.attrs, r);
            }
            return e;
          }
          openFrontierNode(e, t = null, n) {
            let i = this.frontier[this.depth];
            (i.match = i.match.matchType(e)),
              (this.placed = P(
                this.placed,
                this.depth,
                r.FK.from(e.create(t, n)),
              )),
              this.frontier.push({ type: e, match: e.contentMatch });
          }
          closeFrontierNode() {
            let e = this.frontier.pop().match.fillBefore(r.FK.empty, !0);
            e.childCount &&
              (this.placed = P(this.placed, this.frontier.length, e));
          }
        }
        function D(e, t, n) {
          return 0 == t
            ? e.cutByIndex(n, e.childCount)
            : e.replaceChild(
                0,
                e.firstChild.copy(D(e.firstChild.content, t - 1, n)),
              );
        }
        function P(e, t, n) {
          return 0 == t
            ? e.append(n)
            : e.replaceChild(
                e.childCount - 1,
                e.lastChild.copy(P(e.lastChild.content, t - 1, n)),
              );
        }
        function R(e, t) {
          for (let n = 0; n < t; n++) e = e.firstChild.content;
          return e;
        }
        function M(e, t, n, r, i) {
          let s = e.node(t),
            o = i ? e.indexAfter(t) : e.index(t);
          if (o == s.childCount && !n.compatibleContent(s.type)) return null;
          let a = r.fillBefore(s.content, !0, o);
          return a &&
            !(function (e, t, n) {
              for (let r = n; r < t.childCount; r++)
                if (!e.allowsMarks(t.child(r).marks)) return !0;
              return !1;
            })(n, s.content, o)
            ? a
            : null;
        }
        function L(e, t) {
          let n = [],
            r = Math.min(e.depth, t.depth);
          for (let i = r; i >= 0; i--) {
            let r = e.start(i);
            if (
              r < e.pos - (e.depth - i) ||
              t.end(i) > t.pos + (t.depth - i) ||
              e.node(i).type.spec.isolating ||
              t.node(i).type.spec.isolating
            )
              break;
            (r == t.start(i) ||
              (i == e.depth &&
                i == t.depth &&
                e.parent.inlineContent &&
                t.parent.inlineContent &&
                i &&
                t.start(i - 1) == r - 1)) &&
              n.push(i);
          }
          return n;
        }
        class j extends l {
          constructor(e, t, n) {
            super(), (this.pos = e), (this.attr = t), (this.value = n);
          }
          apply(e) {
            let t = e.nodeAt(this.pos);
            if (!t) return c.fail("No node at attribute step's position");
            let n = Object.create(null);
            for (let e in t.attrs) n[e] = t.attrs[e];
            n[this.attr] = this.value;
            let i = t.type.create(n, null, t.marks);
            return c.fromReplace(
              e,
              this.pos,
              this.pos + 1,
              new r.Ji(r.FK.from(i), 0, +!t.isLeaf),
            );
          }
          getMap() {
            return s.empty;
          }
          invert(e) {
            return new j(
              this.pos,
              this.attr,
              e.nodeAt(this.pos).attrs[this.attr],
            );
          }
          map(e) {
            let t = e.mapResult(this.pos, 1);
            return t.deletedAfter ? null : new j(t.pos, this.attr, this.value);
          }
          toJSON() {
            return {
              stepType: "attr",
              pos: this.pos,
              attr: this.attr,
              value: this.value,
            };
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.pos || "string" != typeof t.attr)
              throw RangeError("Invalid input for AttrStep.fromJSON");
            return new j(t.pos, t.attr, t.value);
          }
        }
        l.jsonID("attr", j);
        class F extends l {
          constructor(e, t) {
            super(), (this.attr = e), (this.value = t);
          }
          apply(e) {
            let t = Object.create(null);
            for (let n in e.attrs) t[n] = e.attrs[n];
            t[this.attr] = this.value;
            let n = e.type.create(t, e.content, e.marks);
            return c.ok(n);
          }
          getMap() {
            return s.empty;
          }
          invert(e) {
            return new F(this.attr, e.attrs[this.attr]);
          }
          map(e) {
            return this;
          }
          toJSON() {
            return { stepType: "docAttr", attr: this.attr, value: this.value };
          }
          static fromJSON(e, t) {
            if ("string" != typeof t.attr)
              throw RangeError("Invalid input for DocAttrStep.fromJSON");
            return new F(t.attr, t.value);
          }
        }
        l.jsonID("docAttr", F);
        let B = class extends Error {};
        ((B = function e(t) {
          let n = Error.call(this, t);
          return (n.__proto__ = e.prototype), n;
        }).prototype = Object.create(Error.prototype)),
          (B.prototype.constructor = B),
          (B.prototype.name = "TransformError");
        class z {
          constructor(e) {
            (this.doc = e),
              (this.steps = []),
              (this.docs = []),
              (this.mapping = new o());
          }
          get before() {
            return this.docs.length ? this.docs[0] : this.doc;
          }
          step(e) {
            let t = this.maybeStep(e);
            if (t.failed) throw new B(t.failed);
            return this;
          }
          maybeStep(e) {
            let t = e.apply(this.doc);
            return t.failed || this.addStep(e, t.doc), t;
          }
          get docChanged() {
            return this.steps.length > 0;
          }
          addStep(e, t) {
            this.docs.push(this.doc),
              this.steps.push(e),
              this.mapping.appendMap(e.getMap()),
              (this.doc = t);
          }
          replace(e, t = e, n = r.Ji.empty) {
            let i = A(this.doc, e, t, n);
            return i && this.step(i), this;
          }
          replaceWith(e, t, n) {
            return this.replace(e, t, new r.Ji(r.FK.from(n), 0, 0));
          }
          delete(e, t) {
            return this.replace(e, t, r.Ji.empty);
          }
          insert(e, t) {
            return this.replaceWith(e, e, t);
          }
          replaceRange(e, t, n) {
            return (
              !(function (e, t, n, i) {
                if (!i.size) return e.deleteRange(t, n);
                let s = e.doc.resolve(t),
                  o = e.doc.resolve(n);
                if (N(s, o, i)) return e.step(new m(t, n, i));
                let a = L(s, e.doc.resolve(n));
                0 == a[a.length - 1] && a.pop();
                let l = -(s.depth + 1);
                a.unshift(l);
                for (let e = s.depth, t = s.pos - 1; e > 0; e--, t--) {
                  let n = s.node(e).type.spec;
                  if (n.defining || n.definingAsContext || n.isolating) break;
                  a.indexOf(e) > -1
                    ? (l = e)
                    : s.before(e) == t && a.splice(1, 0, -e);
                }
                let c = a.indexOf(l),
                  u = [],
                  d = i.openStart;
                for (let e = i.content, t = 0; ; t++) {
                  let n = e.firstChild;
                  if ((u.push(n), t == i.openStart)) break;
                  e = n.content;
                }
                for (let e = d - 1; e >= 0; e--) {
                  var h;
                  let t = u[e],
                    n = (h = t.type).spec.defining || h.spec.definingForContent;
                  if (n && !t.sameMarkup(s.node(Math.abs(l) - 1))) d = e;
                  else if (n || !t.type.isTextblock) break;
                }
                for (let t = i.openStart; t >= 0; t--) {
                  let l = (t + d + 1) % (i.openStart + 1),
                    h = u[l];
                  if (h)
                    for (let t = 0; t < a.length; t++) {
                      let u = a[(t + c) % a.length],
                        d = !0;
                      u < 0 && ((d = !1), (u = -u));
                      let p = s.node(u - 1),
                        f = s.index(u - 1);
                      if (p.canReplaceWith(f, f, h.type, h.marks))
                        return e.replace(
                          s.before(u),
                          d ? o.after(u) : n,
                          new r.Ji(
                            (function e(t, n, i, s, o) {
                              if (n < i) {
                                let r = t.firstChild;
                                t = t.replaceChild(
                                  0,
                                  r.copy(e(r.content, n + 1, i, s, r)),
                                );
                              }
                              if (n > s) {
                                let e = o.contentMatchAt(0),
                                  n = e.fillBefore(t).append(t);
                                t = n.append(
                                  e.matchFragment(n).fillBefore(r.FK.empty, !0),
                                );
                              }
                              return t;
                            })(i.content, 0, i.openStart, l),
                            l,
                            i.openEnd,
                          ),
                        );
                    }
                }
                let p = e.steps.length;
                for (
                  let r = a.length - 1;
                  r >= 0 && (e.replace(t, n, i), !(e.steps.length > p));
                  r--
                ) {
                  let e = a[r];
                  e < 0 || ((t = s.before(e)), (n = o.after(e)));
                }
              })(this, e, t, n),
              this
            );
          }
          replaceRangeWith(e, t, n) {
            var i = e,
              s = t;
            if (
              !n.isInline &&
              i == s &&
              this.doc.resolve(i).parent.content.size
            ) {
              let e = (function (e, t, n) {
                let r = e.resolve(t);
                if (r.parent.canReplaceWith(r.index(), r.index(), n)) return t;
                if (0 == r.parentOffset)
                  for (let e = r.depth - 1; e >= 0; e--) {
                    let t = r.index(e);
                    if (r.node(e).canReplaceWith(t, t, n))
                      return r.before(e + 1);
                    if (t > 0) return null;
                  }
                if (r.parentOffset == r.parent.content.size)
                  for (let e = r.depth - 1; e >= 0; e--) {
                    let t = r.indexAfter(e);
                    if (r.node(e).canReplaceWith(t, t, n))
                      return r.after(e + 1);
                    if (t < r.node(e).childCount) break;
                  }
                return null;
              })(this.doc, i, n.type);
              null != e && (i = s = e);
            }
            return this.replaceRange(i, s, new r.Ji(r.FK.from(n), 0, 0)), this;
          }
          deleteRange(e, t) {
            return (
              !(function (e, t, n) {
                let r = e.doc.resolve(t),
                  i = e.doc.resolve(n),
                  s = L(r, i);
                for (let t = 0; t < s.length; t++) {
                  let n = s[t],
                    o = t == s.length - 1;
                  if ((o && 0 == n) || r.node(n).type.contentMatch.validEnd)
                    return e.delete(r.start(n), i.end(n));
                  if (
                    n > 0 &&
                    (o ||
                      r
                        .node(n - 1)
                        .canReplace(r.index(n - 1), i.indexAfter(n - 1)))
                  )
                    return e.delete(r.before(n), i.after(n));
                }
                for (let s = 1; s <= r.depth && s <= i.depth; s++)
                  if (
                    t - r.start(s) == r.depth - s &&
                    n > r.end(s) &&
                    i.end(s) - n != i.depth - s &&
                    r.start(s - 1) == i.start(s - 1) &&
                    r.node(s - 1).canReplace(r.index(s - 1), i.index(s - 1))
                  )
                    return e.delete(r.before(s), n);
                e.delete(t, n);
              })(this, e, t),
              this
            );
          }
          lift(e, t) {
            return (
              !(function (e, t, n) {
                let { $from: i, $to: s, depth: o } = t,
                  a = i.before(o + 1),
                  l = s.after(o + 1),
                  c = a,
                  u = l,
                  d = r.FK.empty,
                  h = 0;
                for (let e = o, t = !1; e > n; e--)
                  t || i.index(e) > 0
                    ? ((t = !0), (d = r.FK.from(i.node(e).copy(d))), h++)
                    : c--;
                let p = r.FK.empty,
                  f = 0;
                for (let e = o, t = !1; e > n; e--)
                  t || s.after(e + 1) < s.end(e)
                    ? ((t = !0), (p = r.FK.from(s.node(e).copy(p))), f++)
                    : u++;
                e.step(
                  new g(
                    c,
                    u,
                    a,
                    l,
                    new r.Ji(d.append(p), h, f),
                    d.size - h,
                    !0,
                  ),
                );
              })(this, e, t),
              this
            );
          }
          join(e, t = 1) {
            return (
              !(function (e, t, n) {
                let i = null,
                  { linebreakReplacement: s } = e.doc.type.schema,
                  o = e.doc.resolve(t - n),
                  a = o.node().type;
                if (s && a.inlineContent) {
                  let e = "pre" == a.whitespace,
                    t = !!a.contentMatch.matchType(s);
                  e && !t ? (i = !1) : !e && t && (i = !0);
                }
                let l = e.steps.length;
                if (!1 === i) {
                  let r = e.doc.resolve(t + n);
                  _(e, r.node(), r.before(), l);
                }
                a.inlineContent &&
                  v(
                    e,
                    t + n - 1,
                    a,
                    o.node().contentMatchAt(o.index()),
                    null == i,
                  );
                let c = e.mapping.slice(l),
                  u = c.map(t - n);
                if (
                  (e.step(new m(u, c.map(t + n, -1), r.Ji.empty, !0)), !0 === i)
                ) {
                  let t = e.doc.resolve(u);
                  w(e, t.node(), t.before(), e.steps.length);
                }
              })(this, e, t),
              this
            );
          }
          wrap(e, t) {
            return (
              !(function (e, t, n) {
                let i = r.FK.empty;
                for (let e = n.length - 1; e >= 0; e--) {
                  if (i.size) {
                    let t = n[e].type.contentMatch.matchFragment(i);
                    if (!t || !t.validEnd)
                      throw RangeError(
                        "Wrapper type given to Transform.wrap does not form valid content of its parent wrapper",
                      );
                  }
                  i = r.FK.from(n[e].type.create(n[e].attrs, i));
                }
                let s = t.start,
                  o = t.end;
                e.step(new g(s, o, s, o, new r.Ji(i, 0, 0), n.length, !0));
              })(this, e, t),
              this
            );
          }
          setBlockType(e, t = e, n, i = null) {
            var s = this;
            if (!n.isTextblock)
              throw RangeError(
                "Type given to setBlockType should be a textblock",
              );
            let o = s.steps.length;
            return (
              s.doc.nodesBetween(e, t, (e, t) => {
                var a, l, c;
                let u,
                  d,
                  h = "function" == typeof i ? i(e) : i;
                if (
                  e.isTextblock &&
                  !e.hasMarkup(n, h) &&
                  ((a = s.doc),
                  (l = s.mapping.slice(o).map(t)),
                  (c = n),
                  (d = (u = a.resolve(l)).index()),
                  u.parent.canReplaceWith(d, d + 1, c))
                ) {
                  let i = null;
                  if (n.schema.linebreakReplacement) {
                    let e = "pre" == n.whitespace,
                      t = !!n.contentMatch.matchType(
                        n.schema.linebreakReplacement,
                      );
                    e && !t ? (i = !1) : !e && t && (i = !0);
                  }
                  !1 === i && _(s, e, t, o),
                    v(s, s.mapping.slice(o).map(t, 1), n, void 0, null === i);
                  let a = s.mapping.slice(o),
                    l = a.map(t, 1),
                    c = a.map(t + e.nodeSize, 1);
                  return (
                    s.step(
                      new g(
                        l,
                        c,
                        l + 1,
                        c - 1,
                        new r.Ji(r.FK.from(n.create(h, null, e.marks)), 0, 0),
                        1,
                        !0,
                      ),
                    ),
                    !0 === i && w(s, e, t, o),
                    !1
                  );
                }
              }),
              this
            );
          }
          setNodeMarkup(e, t, n = null, i) {
            return (
              !(function (e, t, n, i, s) {
                let o = e.doc.nodeAt(t);
                if (!o) throw RangeError("No node at given position");
                n || (n = o.type);
                let a = n.create(i, null, s || o.marks);
                if (o.isLeaf) return e.replaceWith(t, t + o.nodeSize, a);
                if (!n.validContent(o.content))
                  throw RangeError("Invalid content for node type " + n.name);
                e.step(
                  new g(
                    t,
                    t + o.nodeSize,
                    t + 1,
                    t + o.nodeSize - 1,
                    new r.Ji(r.FK.from(a), 0, 0),
                    1,
                    !0,
                  ),
                );
              })(this, e, t, n, i),
              this
            );
          }
          setNodeAttribute(e, t, n) {
            return this.step(new j(e, t, n)), this;
          }
          setDocAttribute(e, t) {
            return this.step(new F(e, t)), this;
          }
          addNodeMark(e, t) {
            return this.step(new p(e, t)), this;
          }
          removeNodeMark(e, t) {
            let n = this.doc.nodeAt(e);
            if (!n) throw RangeError("No node at position " + e);
            if (t instanceof r.CU) t.isInSet(n.marks) && this.step(new f(e, t));
            else {
              let r = n.marks,
                i,
                s = [];
              for (; (i = t.isInSet(r)); )
                s.push(new f(e, i)), (r = i.removeFromSet(r));
              for (let e = s.length - 1; e >= 0; e--) this.step(s[e]);
            }
            return this;
          }
          split(e, t = 1, n) {
            return (
              !(function (e, t, n = 1, i) {
                let s = e.doc.resolve(t),
                  o = r.FK.empty,
                  a = r.FK.empty;
                for (
                  let e = s.depth, t = s.depth - n, l = n - 1;
                  e > t;
                  e--, l--
                ) {
                  o = r.FK.from(s.node(e).copy(o));
                  let t = i && i[l];
                  a = r.FK.from(
                    t ? t.type.create(t.attrs, a) : s.node(e).copy(a),
                  );
                }
                e.step(new m(t, t, new r.Ji(o.append(a), n, n), !0));
              })(this, e, t, n),
              this
            );
          }
          addMark(e, t, n) {
            var r;
            let i, s, o, a;
            return (
              (r = this),
              (o = []),
              (a = []),
              r.doc.nodesBetween(e, t, (r, l, c) => {
                if (!r.isInline) return;
                let u = r.marks;
                if (!n.isInSet(u) && c.type.allowsMarkType(n.type)) {
                  let c = Math.max(l, e),
                    p = Math.min(l + r.nodeSize, t),
                    f = n.addToSet(u);
                  for (let e = 0; e < u.length; e++)
                    u[e].isInSet(f) ||
                      (i && i.to == c && i.mark.eq(u[e])
                        ? (i.to = p)
                        : o.push((i = new h(c, p, u[e]))));
                  s && s.to == c ? (s.to = p) : a.push((s = new d(c, p, n)));
                }
              }),
              o.forEach((e) => r.step(e)),
              a.forEach((e) => r.step(e)),
              this
            );
          }
          removeMark(e, t, n) {
            var i;
            let s, o;
            return (
              (i = this),
              (s = []),
              (o = 0),
              i.doc.nodesBetween(e, t, (i, a) => {
                if (!i.isInline) return;
                o++;
                let l = null;
                if (n instanceof r.sX) {
                  let e = i.marks,
                    t;
                  for (; (t = n.isInSet(e)); )
                    (l || (l = [])).push(t), (e = t.removeFromSet(e));
                } else n ? n.isInSet(i.marks) && (l = [n]) : (l = i.marks);
                if (l && l.length) {
                  let n = Math.min(a + i.nodeSize, t);
                  for (let t = 0; t < l.length; t++) {
                    let r = l[t],
                      i;
                    for (let e = 0; e < s.length; e++) {
                      let t = s[e];
                      t.step == o - 1 && r.eq(s[e].style) && (i = t);
                    }
                    i
                      ? ((i.to = n), (i.step = o))
                      : s.push({
                          style: r,
                          from: Math.max(a, e),
                          to: n,
                          step: o,
                        });
                  }
                }
              }),
              s.forEach((e) => i.step(new h(e.from, e.to, e.style))),
              this
            );
          }
          clearIncompatible(e, t, n) {
            return v(this, e, t, n), this;
          }
        }
      },
      65666: (e, t, n) => {
        "use strict";
        n.d(t, { N: () => y });
        var r = n(61268),
          i = n(84205),
          s = n(420),
          o = n(95988),
          a = n(88924),
          l = n(26997);
        class c extends i.Component {
          getSnapshotBeforeUpdate(e) {
            let t = this.props.childRef.current;
            if (t && e.isPresent && !this.props.isPresent) {
              let e = this.props.sizeRef.current;
              (e.height = t.offsetHeight || 0),
                (e.width = t.offsetWidth || 0),
                (e.top = t.offsetTop),
                (e.left = t.offsetLeft);
            }
            return null;
          }
          componentDidUpdate() {}
          render() {
            return this.props.children;
          }
        }
        function u({ children: e, isPresent: t }) {
          let n = (0, i.useId)(),
            s = (0, i.useRef)(null),
            o = (0, i.useRef)({ width: 0, height: 0, top: 0, left: 0 }),
            { nonce: a } = (0, i.useContext)(l.Q);
          return (
            (0, i.useInsertionEffect)(() => {
              let { width: e, height: r, top: i, left: l } = o.current;
              if (t || !s.current || !e || !r) return;
              s.current.dataset.motionPopId = n;
              let c = document.createElement("style");
              return (
                a && (c.nonce = a),
                document.head.appendChild(c),
                c.sheet &&
                  c.sheet.insertRule(`
          [data-motion-pop-id="${n}"] {
            position: absolute !important;
            width: ${e}px !important;
            height: ${r}px !important;
            top: ${i}px !important;
            left: ${l}px !important;
          }
        `),
                () => {
                  document.head.removeChild(c);
                }
              );
            }, [t]),
            (0, r.jsx)(c, {
              isPresent: t,
              childRef: s,
              sizeRef: o,
              children: i.cloneElement(e, { ref: s }),
            })
          );
        }
        let d = ({
          children: e,
          initial: t,
          isPresent: n,
          onExitComplete: s,
          custom: l,
          presenceAffectsLayout: c,
          mode: d,
        }) => {
          let p = (0, o.M)(h),
            f = (0, i.useId)(),
            m = (0, i.useCallback)(
              (e) => {
                for (let t of (p.set(e, !0), p.values())) if (!t) return;
                s && s();
              },
              [p, s],
            ),
            g = (0, i.useMemo)(
              () => ({
                id: f,
                initial: t,
                isPresent: n,
                custom: l,
                onExitComplete: m,
                register: (e) => (p.set(e, !1), () => p.delete(e)),
              }),
              c ? [Math.random(), m] : [n, m],
            );
          return (
            (0, i.useMemo)(() => {
              p.forEach((e, t) => p.set(t, !1));
            }, [n]),
            i.useEffect(() => {
              n || p.size || !s || s();
            }, [n]),
            "popLayout" === d &&
              (e = (0, r.jsx)(u, { isPresent: n, children: e })),
            (0, r.jsx)(a.t.Provider, { value: g, children: e })
          );
        };
        function h() {
          return new Map();
        }
        var p = n(57751);
        let f = (e) => e.key || "";
        function m(e) {
          let t = [];
          return (
            i.Children.forEach(e, (e) => {
              (0, i.isValidElement)(e) && t.push(e);
            }),
            t
          );
        }
        var g = n(61267);
        let y = ({
          children: e,
          custom: t,
          initial: n = !0,
          onExitComplete: a,
          presenceAffectsLayout: l = !0,
          mode: c = "sync",
          propagate: u = !1,
        }) => {
          let [h, y] = (0, p.xQ)(u),
            v = (0, i.useMemo)(() => m(e), [e]),
            b = u && !h ? [] : v.map(f),
            x = (0, i.useRef)(!0),
            k = (0, i.useRef)(v),
            w = (0, o.M)(() => new Map()),
            [_, O] = (0, i.useState)(v),
            [T, S] = (0, i.useState)(v);
          (0, g.E)(() => {
            (x.current = !1), (k.current = v);
            for (let e = 0; e < T.length; e++) {
              let t = f(T[e]);
              b.includes(t) ? w.delete(t) : !0 !== w.get(t) && w.set(t, !1);
            }
          }, [T, b.length, b.join("-")]);
          let E = [];
          if (v !== _) {
            let e = [...v];
            for (let t = 0; t < T.length; t++) {
              let n = T[t],
                r = f(n);
              b.includes(r) || (e.splice(t, 0, n), E.push(n));
            }
            "wait" === c && E.length && (e = E), S(m(e)), O(v);
            return;
          }
          let { forceRender: C } = (0, i.useContext)(s.L);
          return (0, r.jsx)(r.Fragment, {
            children: T.map((e) => {
              let i = f(e),
                s = (!u || !!h) && (v === T || b.includes(i));
              return (0, r.jsx)(
                d,
                {
                  isPresent: s,
                  initial: (!x.current || !!n) && void 0,
                  custom: s ? void 0 : t,
                  presenceAffectsLayout: l,
                  mode: c,
                  onExitComplete: s
                    ? void 0
                    : () => {
                        if (!w.has(i)) return;
                        w.set(i, !0);
                        let e = !0;
                        w.forEach((t) => {
                          t || (e = !1);
                        }),
                          e &&
                            (null == C || C(),
                            S(k.current),
                            u && (null == y || y()),
                            a && a());
                      },
                  children: e,
                },
                i,
              );
            }),
          });
        };
      },
      66321: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, {
              A0: () => c,
              BF: () => u,
              Hj: () => d,
              XI: () => l,
              nA: () => p,
              nd: () => h,
              r6: () => f,
            });
            var i = n(61268),
              s = n(84205),
              o = n(15942),
              a = e([o]);
            o = (a.then ? (await a)() : a)[0];
            let l = s.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("div", {
                className: "relative w-full overflow-auto",
                children: (0, i.jsx)("table", {
                  ref: n,
                  className: (0, o.cn)("w-full caption-bottom text-sm", e),
                  ...t,
                }),
              }),
            );
            l.displayName = "Table";
            let c = s.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("thead", {
                ref: n,
                className: (0, o.cn)("[&_tr]:border-b", e),
                ...t,
              }),
            );
            c.displayName = "TableHeader";
            let u = s.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("tbody", {
                ref: n,
                className: (0, o.cn)("[&_tr:last-child]:border-0", e),
                ...t,
              }),
            );
            (u.displayName = "TableBody"),
              (s.forwardRef(({ className: e, ...t }, n) =>
                (0, i.jsx)("tfoot", {
                  ref: n,
                  className: (0, o.cn)(
                    "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
                    e,
                  ),
                  ...t,
                }),
              ).displayName = "TableFooter");
            let d = s.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("tr", {
                ref: n,
                className: (0, o.cn)(
                  "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
                  e,
                ),
                ...t,
              }),
            );
            d.displayName = "TableRow";
            let h = s.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("th", {
                ref: n,
                className: (0, o.cn)(
                  "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
                  e,
                ),
                ...t,
              }),
            );
            h.displayName = "TableHead";
            let p = s.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("td", {
                ref: n,
                className: (0, o.cn)(
                  "p-4 align-middle [&:has([role=checkbox])]:pr-0",
                  e,
                ),
                ...t,
              }),
            );
            p.displayName = "TableCell";
            let f = s.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)("caption", {
                ref: n,
                className: (0, o.cn)("mt-4 text-sm text-muted-foreground", e),
                ...t,
              }),
            );
            (f.displayName = "TableCaption"), r();
          } catch (e) {
            r(e);
          }
        });
      },
      66972: (e, t, n) => {
        "use strict";
        n.d(t, { A: () => l });
        var r = n(61268),
          i = n(6130),
          s = n(31655),
          o = n.n(s),
          a = n(12253);
        let l = () =>
          (0, r.jsx)(
            i.P.div,
            {
              className: "max-w-3xl mx-auto md:mt-20",
              initial: { opacity: 0, scale: 0.98 },
              animate: { opacity: 1, scale: 1 },
              exit: { opacity: 0, scale: 0.98 },
              transition: { delay: 0.5 },
              children: (0, r.jsxs)("div", {
                className:
                  "rounded-xl p-6 flex flex-col gap-8 leading-relaxed text-center max-w-xl",
                children: [
                  (0, r.jsxs)("p", {
                    className:
                      "flex flex-row justify-center gap-4 items-center",
                    children: [
                      (0, r.jsx)(a.PY, { size: 32 }),
                      (0, r.jsx)("span", { children: "+" }),
                      (0, r.jsx)(a.b1, { size: 32 }),
                    ],
                  }),
                  (0, r.jsxs)("p", {
                    children: [
                      "This is an",
                      " ",
                      (0, r.jsx)(o(), {
                        className: "font-medium underline underline-offset-4",
                        href: "https://github.com/vercel/ai-chatbot",
                        target: "_blank",
                        children: "open source",
                      }),
                      " ",
                      "chatbot template built with Next.js and the AI SDK by Vercel. It uses the",
                      " ",
                      (0, r.jsx)("code", {
                        className: "rounded-md bg-muted px-1 py-0.5",
                        children: "streamText",
                      }),
                      " ",
                      "function in the server and the",
                      " ",
                      (0, r.jsx)("code", {
                        className: "rounded-md bg-muted px-1 py-0.5",
                        children: "useChat",
                      }),
                      " hook on the client to create a seamless chat experience.",
                    ],
                  }),
                  (0, r.jsxs)("p", {
                    children: [
                      "You can learn more about the AI SDK by visiting the",
                      " ",
                      (0, r.jsx)(o(), {
                        className: "font-medium underline underline-offset-4",
                        href: "https://sdk.vercel.ai/docs",
                        target: "_blank",
                        children: "docs",
                      }),
                      ".",
                    ],
                  }),
                ],
              }),
            },
            "overview",
          );
      },
      67166: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { B: () => f });
            var i = n(61268),
              s = n(29272),
              o = n(16116),
              a = n(84205),
              l = n(98654),
              c = n(15942),
              u = n(28909),
              d = n(48598),
              h = n(12126),
              p = e([c, u, d, h]);
            [c, u, d, h] = p.then ? (await p)() : p;
            let m = [
                {
                  id: "gpt-4o",
                  name: "GPT-4o",
                  provider: "OpenAI",
                  description: "Most capable model for chat and reasoning",
                },
                {
                  id: "claude-3-opus-20240229",
                  name: "Claude 3 Opus",
                  provider: "Anthropic",
                  description: "Highest quality model with advanced reasoning",
                },
                {
                  id: "claude-3-sonnet-20240229",
                  name: "Claude 3 Sonnet",
                  provider: "Anthropic",
                  description: "Excellent balance of intelligence and speed",
                },
                {
                  id: "gemini-1.0-pro",
                  name: "Gemini Pro",
                  provider: "Google",
                  description: "Google's most capable model for chat",
                },
                {
                  id: "deepseek-chat",
                  name: "DeepSeek",
                  provider: "DeepSeek",
                  description: "Open model with strong reasoning capabilities",
                },
                {
                  id: "mixtral-8x7b-instruct",
                  name: "Mixtral 8x7B",
                  provider: "Mixtral",
                  description: "Open model with good performance",
                },
              ],
              g = [
                {
                  id: "gpt-4-turbo",
                  name: "GPT-4 Turbo",
                  provider: "OpenAI",
                  description: "Most reliable model for complex reasoning",
                },
                {
                  id: "claude-3-opus-20240229",
                  name: "Claude 3 Opus",
                  provider: "Anthropic",
                  description: "Highest quality model with advanced reasoning",
                },
                {
                  id: "claude-3-sonnet-20240229",
                  name: "Claude 3 Sonnet",
                  provider: "Anthropic",
                  description: "Excellent balance of intelligence and speed",
                },
              ];
            function f({
              types: e = ["chat", "reasoning"],
              onChatModelSelect: t,
              onReasoningModelSelect: n,
              className: r,
              ...p
            }) {
              let f = (0, o.useCookies)(),
                y = f.get("preferred-chat-model") || "gpt-4o",
                v = f.get("preferred-reasoning-model") || "gpt-4-turbo",
                [b, x] = a.useState(!1),
                [k, w] = a.useState(!1),
                [_, O] = a.useState(m.find((e) => e.id === y) || m[0]),
                [T, S] = a.useState(g.find((e) => e.id === v) || g[0]),
                E = (e) => {
                  O(e), x(!1);
                  try {
                    f.set("preferred-chat-model", e.id), t && t(e.id);
                  } catch (e) {
                    console.error("Failed to save model preference:", e),
                      l.oR.error("Failed to save model preference");
                  }
                },
                C = (e) => {
                  S(e), w(!1);
                  try {
                    f.set("preferred-reasoning-model", e.id), n && n(e.id);
                  } catch (e) {
                    console.error("Failed to save model preference:", e),
                      l.oR.error("Failed to save model preference");
                  }
                };
              return (0, i.jsxs)("div", {
                className: (0, c.cn)("flex flex-wrap gap-2 items-center", r),
                children: [
                  e.includes("chat") &&
                    (0, i.jsxs)(h.AM, {
                      open: b,
                      onOpenChange: x,
                      ...p,
                      children: [
                        (0, i.jsx)(h.Wv, {
                          asChild: !0,
                          children: (0, i.jsxs)(u.$, {
                            variant: "outline",
                            role: "combobox",
                            "aria-expanded": b,
                            "aria-label": "Select a chat model",
                            className: "justify-between min-w-[200px]",
                            children: [
                              (0, i.jsxs)("div", {
                                className: "flex items-center gap-2 truncate",
                                children: [
                                  (0, i.jsx)("span", {
                                    className: "truncate",
                                    children: _.name,
                                  }),
                                  _.provider &&
                                    (0, i.jsxs)("span", {
                                      className:
                                        "text-xs text-muted-foreground truncate",
                                      children: ["(", _.provider, ")"],
                                    }),
                                ],
                              }),
                              (0, i.jsx)(s.TBE, {
                                className: "ml-2 h-4 w-4 shrink-0 opacity-50",
                              }),
                            ],
                          }),
                        }),
                        (0, i.jsx)(h.hl, {
                          className: "w-[250px] p-0",
                          align: "start",
                          children: (0, i.jsxs)(d.uB, {
                            children: [
                              (0, i.jsx)(d.G7, {
                                placeholder: "Search models...",
                                className: "h-9",
                              }),
                              (0, i.jsxs)(d.oI, {
                                children: [
                                  (0, i.jsx)(d.xL, {
                                    children: "No models found.",
                                  }),
                                  (0, i.jsx)(d.L$, {
                                    children: m.map((e) =>
                                      (0, i.jsx)(
                                        d.h_,
                                        {
                                          value: e.id,
                                          onSelect: () => E(e),
                                          children: (0, i.jsxs)("div", {
                                            className: "flex flex-col",
                                            children: [
                                              (0, i.jsxs)("div", {
                                                className: "flex items-center",
                                                children: [
                                                  (0, i.jsx)("span", {
                                                    className: "mr-2",
                                                    children: e.name,
                                                  }),
                                                  e.provider &&
                                                    (0, i.jsxs)("span", {
                                                      className:
                                                        "text-xs text-muted-foreground",
                                                      children: [
                                                        "(",
                                                        e.provider,
                                                        ")",
                                                      ],
                                                    }),
                                                  (0, i.jsx)(s.Srz, {
                                                    className: (0, c.cn)(
                                                      "ml-auto h-4 w-4",
                                                      _.id === e.id
                                                        ? "opacity-100"
                                                        : "opacity-0",
                                                    ),
                                                  }),
                                                ],
                                              }),
                                              e.description &&
                                                (0, i.jsx)("span", {
                                                  className:
                                                    "text-xs text-muted-foreground",
                                                  children: e.description,
                                                }),
                                            ],
                                          }),
                                        },
                                        e.id,
                                      ),
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                      ],
                    }),
                  e.includes("reasoning") &&
                    (0, i.jsxs)(h.AM, {
                      open: k,
                      onOpenChange: w,
                      ...p,
                      children: [
                        (0, i.jsx)(h.Wv, {
                          asChild: !0,
                          children: (0, i.jsxs)(u.$, {
                            variant: "outline",
                            role: "combobox",
                            "aria-expanded": k,
                            "aria-label": "Select a reasoning model",
                            className: "justify-between min-w-[200px]",
                            children: [
                              (0, i.jsxs)("div", {
                                className: "flex items-center gap-2 truncate",
                                children: [
                                  (0, i.jsx)("span", {
                                    className: "truncate",
                                    children: T.name,
                                  }),
                                  T.provider &&
                                    (0, i.jsxs)("span", {
                                      className:
                                        "text-xs text-muted-foreground truncate",
                                      children: ["(", T.provider, ")"],
                                    }),
                                ],
                              }),
                              (0, i.jsx)(s.TBE, {
                                className: "ml-2 h-4 w-4 shrink-0 opacity-50",
                              }),
                            ],
                          }),
                        }),
                        (0, i.jsx)(h.hl, {
                          className: "w-[250px] p-0",
                          align: "start",
                          children: (0, i.jsxs)(d.uB, {
                            children: [
                              (0, i.jsx)(d.G7, {
                                placeholder: "Search models...",
                                className: "h-9",
                              }),
                              (0, i.jsxs)(d.oI, {
                                children: [
                                  (0, i.jsx)(d.xL, {
                                    children: "No models found.",
                                  }),
                                  (0, i.jsx)(d.L$, {
                                    children: g.map((e) =>
                                      (0, i.jsx)(
                                        d.h_,
                                        {
                                          value: e.id,
                                          onSelect: () => C(e),
                                          children: (0, i.jsxs)("div", {
                                            className: "flex flex-col",
                                            children: [
                                              (0, i.jsxs)("div", {
                                                className: "flex items-center",
                                                children: [
                                                  (0, i.jsx)("span", {
                                                    className: "mr-2",
                                                    children: e.name,
                                                  }),
                                                  e.provider &&
                                                    (0, i.jsxs)("span", {
                                                      className:
                                                        "text-xs text-muted-foreground",
                                                      children: [
                                                        "(",
                                                        e.provider,
                                                        ")",
                                                      ],
                                                    }),
                                                  (0, i.jsx)(s.Srz, {
                                                    className: (0, c.cn)(
                                                      "ml-auto h-4 w-4",
                                                      T.id === e.id
                                                        ? "opacity-100"
                                                        : "opacity-0",
                                                    ),
                                                  }),
                                                ],
                                              }),
                                              e.description &&
                                                (0, i.jsx)("span", {
                                                  className:
                                                    "text-xs text-muted-foreground",
                                                  children: e.description,
                                                }),
                                            ],
                                          }),
                                        },
                                        e.id,
                                      ),
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                      ],
                    }),
                ],
              });
            }
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      67402: (e, t, n) => {
        "use strict";
        n.d(t, { P: () => x });
        var r = n(68098),
          i = n(14256),
          s = n(58342),
          o = s.Ik({
            type: s.eu("error"),
            error: s.Ik({ type: s.Yj(), message: s.Yj() }),
          }),
          a = (0, i.sl)({
            errorSchema: o,
            errorToMessage: (e) => e.error.message,
          });
        function l(e) {
          switch (e) {
            case "end_turn":
            case "stop_sequence":
              return "stop";
            case "tool_use":
              return "tool-calls";
            case "max_tokens":
              return "length";
            default:
              return "unknown";
          }
        }
        var c = class {
            constructor(e, t, n) {
              (this.specificationVersion = "v1"),
                (this.defaultObjectGenerationMode = "tool"),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
            }
            supportsUrl(e) {
              return "https:" === e.protocol;
            }
            get provider() {
              return this.config.provider;
            }
            get supportsImageUrls() {
              return this.config.supportsImageUrls;
            }
            async getArgs({
              mode: e,
              prompt: t,
              maxTokens: n = 4096,
              temperature: s,
              topP: o,
              topK: a,
              frequencyPenalty: l,
              presencePenalty: c,
              stopSequences: u,
              responseFormat: d,
              seed: p,
              providerMetadata: f,
            }) {
              var m, g, y;
              let v = e.type,
                b = [];
              null != l &&
                b.push({
                  type: "unsupported-setting",
                  setting: "frequencyPenalty",
                }),
                null != c &&
                  b.push({
                    type: "unsupported-setting",
                    setting: "presencePenalty",
                  }),
                null != p &&
                  b.push({ type: "unsupported-setting", setting: "seed" }),
                null != d &&
                  "text" !== d.type &&
                  b.push({
                    type: "unsupported-setting",
                    setting: "responseFormat",
                    details: "JSON response format is not supported.",
                  });
              let { prompt: x, betas: k } = (function ({
                  prompt: e,
                  sendReasoning: t,
                  warnings: n,
                }) {
                  var s, o, a, l;
                  let c,
                    u = new Set(),
                    d = (function (e) {
                      let t,
                        n = [];
                      for (let r of e) {
                        let { role: e } = r;
                        switch (e) {
                          case "system":
                            (null == t ? void 0 : t.type) !== "system" &&
                              ((t = { type: "system", messages: [] }),
                              n.push(t)),
                              t.messages.push(r);
                            break;
                          case "assistant":
                            (null == t ? void 0 : t.type) !== "assistant" &&
                              ((t = { type: "assistant", messages: [] }),
                              n.push(t)),
                              t.messages.push(r);
                            break;
                          case "user":
                          case "tool":
                            (null == t ? void 0 : t.type) !== "user" &&
                              ((t = { type: "user", messages: [] }), n.push(t)),
                              t.messages.push(r);
                            break;
                          default:
                            throw Error(`Unsupported role: ${e}`);
                        }
                      }
                      return n;
                    })(e),
                    h = [];
                  function p(e) {
                    var t;
                    let n = null == e ? void 0 : e.anthropic;
                    return null != (t = null == n ? void 0 : n.cacheControl)
                      ? t
                      : null == n
                        ? void 0
                        : n.cache_control;
                  }
                  for (let e = 0; e < d.length; e++) {
                    let f = d[e],
                      m = e === d.length - 1,
                      g = f.type;
                    switch (g) {
                      case "system":
                        if (null != c)
                          throw new r.b8({
                            functionality:
                              "Multiple system messages that are separated by user/assistant messages",
                          });
                        c = f.messages.map(
                          ({ content: e, providerMetadata: t }) => ({
                            type: "text",
                            text: e,
                            cache_control: p(t),
                          }),
                        );
                        break;
                      case "user": {
                        let e = [];
                        for (let t of f.messages) {
                          let { role: n, content: l } = t;
                          switch (n) {
                            case "user":
                              for (let n = 0; n < l.length; n++) {
                                let a = l[n],
                                  c = n === l.length - 1,
                                  d =
                                    null != (s = p(a.providerMetadata))
                                      ? s
                                      : c
                                        ? p(t.providerMetadata)
                                        : void 0;
                                switch (a.type) {
                                  case "text":
                                    e.push({
                                      type: "text",
                                      text: a.text,
                                      cache_control: d,
                                    });
                                    break;
                                  case "image":
                                    e.push({
                                      type: "image",
                                      source:
                                        a.image instanceof URL
                                          ? {
                                              type: "url",
                                              url: a.image.toString(),
                                            }
                                          : {
                                              type: "base64",
                                              media_type:
                                                null != (o = a.mimeType)
                                                  ? o
                                                  : "image/jpeg",
                                              data: (0, i.n_)(a.image),
                                            },
                                      cache_control: d,
                                    });
                                    break;
                                  case "file":
                                    if ("application/pdf" !== a.mimeType)
                                      throw new r.b8({
                                        functionality:
                                          "Non-PDF files in user messages",
                                      });
                                    u.add("pdfs-2024-09-25"),
                                      e.push({
                                        type: "document",
                                        source:
                                          a.data instanceof URL
                                            ? {
                                                type: "url",
                                                url: a.data.toString(),
                                              }
                                            : {
                                                type: "base64",
                                                media_type: "application/pdf",
                                                data: a.data,
                                              },
                                        cache_control: d,
                                      });
                                }
                              }
                              break;
                            case "tool":
                              for (let n = 0; n < l.length; n++) {
                                let r = l[n],
                                  i = n === l.length - 1,
                                  s =
                                    null != (a = p(r.providerMetadata))
                                      ? a
                                      : i
                                        ? p(t.providerMetadata)
                                        : void 0,
                                  o =
                                    null != r.content
                                      ? r.content.map((e) => {
                                          var t;
                                          switch (e.type) {
                                            case "text":
                                              return {
                                                type: "text",
                                                text: e.text,
                                                cache_control: void 0,
                                              };
                                            case "image":
                                              return {
                                                type: "image",
                                                source: {
                                                  type: "base64",
                                                  media_type:
                                                    null != (t = e.mimeType)
                                                      ? t
                                                      : "image/jpeg",
                                                  data: e.data,
                                                },
                                                cache_control: void 0,
                                              };
                                          }
                                        })
                                      : JSON.stringify(r.result);
                                e.push({
                                  type: "tool_result",
                                  tool_use_id: r.toolCallId,
                                  content: o,
                                  is_error: r.isError,
                                  cache_control: s,
                                });
                              }
                              break;
                            default:
                              throw Error(`Unsupported role: ${n}`);
                          }
                        }
                        h.push({ role: "user", content: e });
                        break;
                      }
                      case "assistant": {
                        let e = [];
                        for (let r = 0; r < f.messages.length; r++) {
                          let i = f.messages[r],
                            s = r === f.messages.length - 1,
                            { content: o } = i;
                          for (let r = 0; r < o.length; r++) {
                            let a = o[r],
                              c = r === o.length - 1,
                              u =
                                null != (l = p(a.providerMetadata))
                                  ? l
                                  : c
                                    ? p(i.providerMetadata)
                                    : void 0;
                            switch (a.type) {
                              case "text":
                                e.push({
                                  type: "text",
                                  text: m && s && c ? a.text.trim() : a.text,
                                  cache_control: u,
                                });
                                break;
                              case "reasoning":
                                t
                                  ? e.push({
                                      type: "thinking",
                                      thinking: a.text,
                                      signature: a.signature,
                                      cache_control: u,
                                    })
                                  : n.push({
                                      type: "other",
                                      message:
                                        "sending reasoning content is disabled for this model",
                                    });
                                break;
                              case "redacted-reasoning":
                                e.push({
                                  type: "redacted_thinking",
                                  data: a.data,
                                  cache_control: u,
                                });
                                break;
                              case "tool-call":
                                e.push({
                                  type: "tool_use",
                                  id: a.toolCallId,
                                  name: a.toolName,
                                  input: a.args,
                                  cache_control: u,
                                });
                            }
                          }
                        }
                        h.push({ role: "assistant", content: e });
                        break;
                      }
                      default:
                        throw Error(`Unsupported type: ${g}`);
                    }
                  }
                  return { prompt: { system: c, messages: h }, betas: u };
                })({
                  prompt: t,
                  sendReasoning: null == (m = this.settings.sendReasoning) || m,
                  warnings: b,
                }),
                w = (0, i.xI)({
                  provider: "anthropic",
                  providerOptions: f,
                  schema: h,
                }),
                _ =
                  (null == (g = null == w ? void 0 : w.thinking)
                    ? void 0
                    : g.type) === "enabled",
                O =
                  null == (y = null == w ? void 0 : w.thinking)
                    ? void 0
                    : y.budgetTokens,
                T = {
                  model: this.modelId,
                  max_tokens: n,
                  temperature: s,
                  top_k: a,
                  top_p: o,
                  stop_sequences: u,
                  ...(_ && { thinking: { type: "enabled", budget_tokens: O } }),
                  system: x.system,
                  messages: x.messages,
                };
              if (_) {
                if (null == O)
                  throw new r.b8({
                    functionality: "thinking requires a budget",
                  });
                null != T.temperature &&
                  ((T.temperature = void 0),
                  b.push({
                    type: "unsupported-setting",
                    setting: "temperature",
                    details:
                      "temperature is not supported when thinking is enabled",
                  })),
                  null != a &&
                    ((T.top_k = void 0),
                    b.push({
                      type: "unsupported-setting",
                      setting: "topK",
                      details: "topK is not supported when thinking is enabled",
                    })),
                  null != o &&
                    ((T.top_p = void 0),
                    b.push({
                      type: "unsupported-setting",
                      setting: "topP",
                      details: "topP is not supported when thinking is enabled",
                    })),
                  (T.max_tokens = n + O);
              }
              switch (v) {
                case "regular": {
                  let {
                    tools: t,
                    tool_choice: n,
                    toolWarnings: i,
                    betas: s,
                  } = (function (e) {
                    var t;
                    let n = (null == (t = e.tools) ? void 0 : t.length)
                        ? e.tools
                        : void 0,
                      i = [],
                      s = new Set();
                    if (null == n)
                      return {
                        tools: void 0,
                        tool_choice: void 0,
                        toolWarnings: i,
                        betas: s,
                      };
                    let o = [];
                    for (let e of n)
                      switch (e.type) {
                        case "function":
                          o.push({
                            name: e.name,
                            description: e.description,
                            input_schema: e.parameters,
                          });
                          break;
                        case "provider-defined":
                          switch (e.id) {
                            case "anthropic.computer_20250124":
                              s.add("computer-use-2025-01-24"),
                                o.push({
                                  name: e.name,
                                  type: "computer_20250124",
                                  display_width_px: e.args.displayWidthPx,
                                  display_height_px: e.args.displayHeightPx,
                                  display_number: e.args.displayNumber,
                                });
                              break;
                            case "anthropic.computer_20241022":
                              s.add("computer-use-2024-10-22"),
                                o.push({
                                  name: e.name,
                                  type: "computer_20241022",
                                  display_width_px: e.args.displayWidthPx,
                                  display_height_px: e.args.displayHeightPx,
                                  display_number: e.args.displayNumber,
                                });
                              break;
                            case "anthropic.text_editor_20250124":
                              s.add("computer-use-2025-01-24"),
                                o.push({
                                  name: e.name,
                                  type: "text_editor_20250124",
                                });
                              break;
                            case "anthropic.text_editor_20241022":
                              s.add("computer-use-2024-10-22"),
                                o.push({
                                  name: e.name,
                                  type: "text_editor_20241022",
                                });
                              break;
                            case "anthropic.bash_20250124":
                              s.add("computer-use-2025-01-24"),
                                o.push({ name: e.name, type: "bash_20250124" });
                              break;
                            case "anthropic.bash_20241022":
                              s.add("computer-use-2024-10-22"),
                                o.push({ name: e.name, type: "bash_20241022" });
                              break;
                            default:
                              i.push({ type: "unsupported-tool", tool: e });
                          }
                          break;
                        default:
                          i.push({ type: "unsupported-tool", tool: e });
                      }
                    let a = e.toolChoice;
                    if (null == a)
                      return {
                        tools: o,
                        tool_choice: void 0,
                        toolWarnings: i,
                        betas: s,
                      };
                    let l = a.type;
                    switch (l) {
                      case "auto":
                        return {
                          tools: o,
                          tool_choice: { type: "auto" },
                          toolWarnings: i,
                          betas: s,
                        };
                      case "required":
                        return {
                          tools: o,
                          tool_choice: { type: "any" },
                          toolWarnings: i,
                          betas: s,
                        };
                      case "none":
                        return {
                          tools: void 0,
                          tool_choice: void 0,
                          toolWarnings: i,
                          betas: s,
                        };
                      case "tool":
                        return {
                          tools: o,
                          tool_choice: { type: "tool", name: a.toolName },
                          toolWarnings: i,
                          betas: s,
                        };
                      default:
                        throw new r.b8({
                          functionality: `Unsupported tool choice type: ${l}`,
                        });
                    }
                  })(e);
                  return {
                    args: { ...T, tools: t, tool_choice: n },
                    warnings: [...b, ...i],
                    betas: new Set([...k, ...s]),
                  };
                }
                case "object-json":
                  throw new r.b8({
                    functionality: "json-mode object generation",
                  });
                case "object-tool": {
                  let { name: t, description: n, parameters: r } = e.tool;
                  return {
                    args: {
                      ...T,
                      tools: [{ name: t, description: n, input_schema: r }],
                      tool_choice: { type: "tool", name: t },
                    },
                    warnings: b,
                    betas: k,
                  };
                }
                default:
                  throw Error(`Unsupported type: ${v}`);
              }
            }
            async getHeaders({ betas: e, headers: t }) {
              return (0, i.m2)(
                await (0, i.hd)(this.config.headers),
                e.size > 0 ? { "anthropic-beta": Array.from(e).join(",") } : {},
                t,
              );
            }
            buildRequestUrl(e) {
              var t, n, r;
              return null !=
                (r =
                  null == (n = (t = this.config).buildRequestUrl)
                    ? void 0
                    : n.call(t, this.config.baseURL, e))
                ? r
                : `${this.config.baseURL}/messages`;
            }
            transformRequestBody(e) {
              var t, n, r;
              return null !=
                (r =
                  null == (n = (t = this.config).transformRequestBody)
                    ? void 0
                    : n.call(t, e))
                ? r
                : e;
            }
            async doGenerate(e) {
              var t, n, r, s;
              let o,
                { args: c, warnings: d, betas: h } = await this.getArgs(e),
                {
                  responseHeaders: p,
                  value: f,
                  rawValue: m,
                } = await (0, i.GU)({
                  url: this.buildRequestUrl(!1),
                  headers: await this.getHeaders({
                    betas: h,
                    headers: e.headers,
                  }),
                  body: this.transformRequestBody(c),
                  failedResponseHandler: a,
                  successfulResponseHandler: (0, i.cV)(u),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { messages: g, ...y } = c,
                v = "";
              for (let e of f.content) "text" === e.type && (v += e.text);
              if (f.content.some((e) => "tool_use" === e.type))
                for (let e of ((o = []), f.content))
                  "tool_use" === e.type &&
                    o.push({
                      toolCallType: "function",
                      toolCallId: e.id,
                      toolName: e.name,
                      args: JSON.stringify(e.input),
                    });
              let b = f.content
                .filter(
                  (e) =>
                    "redacted_thinking" === e.type || "thinking" === e.type,
                )
                .map((e) =>
                  "thinking" === e.type
                    ? { type: "text", text: e.thinking, signature: e.signature }
                    : { type: "redacted", data: e.data },
                );
              return {
                text: v,
                reasoning: b.length > 0 ? b : void 0,
                toolCalls: o,
                finishReason: l(f.stop_reason),
                usage: {
                  promptTokens: f.usage.input_tokens,
                  completionTokens: f.usage.output_tokens,
                },
                rawCall: { rawPrompt: g, rawSettings: y },
                rawResponse: { headers: p, body: m },
                response: {
                  id: null != (t = f.id) ? t : void 0,
                  modelId: null != (n = f.model) ? n : void 0,
                },
                warnings: d,
                providerMetadata: {
                  anthropic: {
                    cacheCreationInputTokens:
                      null != (r = f.usage.cache_creation_input_tokens)
                        ? r
                        : null,
                    cacheReadInputTokens:
                      null != (s = f.usage.cache_read_input_tokens) ? s : null,
                  },
                },
                request: { body: JSON.stringify(c) },
              };
            }
            async doStream(e) {
              let t,
                n,
                { args: r, warnings: s, betas: o } = await this.getArgs(e),
                c = { ...r, stream: !0 },
                { responseHeaders: u, value: h } = await (0, i.GU)({
                  url: this.buildRequestUrl(!0),
                  headers: await this.getHeaders({
                    betas: o,
                    headers: e.headers,
                  }),
                  body: this.transformRequestBody(c),
                  failedResponseHandler: a,
                  successfulResponseHandler: (0, i.Ds)(d),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { messages: p, ...f } = r,
                m = "unknown",
                g = { promptTokens: Number.NaN, completionTokens: Number.NaN },
                y = {};
              return {
                stream: h.pipeThrough(
                  new TransformStream({
                    transform(e, r) {
                      var i, s, o, a;
                      if (!e.success)
                        return void r.enqueue({
                          type: "error",
                          error: e.error,
                        });
                      let c = e.value;
                      switch (c.type) {
                        case "ping":
                          return;
                        case "content_block_start": {
                          let e = c.content_block.type;
                          switch (((n = e), e)) {
                            case "text":
                            case "thinking":
                              return;
                            case "redacted_thinking":
                              return void r.enqueue({
                                type: "redacted-reasoning",
                                data: c.content_block.data,
                              });
                            case "tool_use":
                              y[c.index] = {
                                toolCallId: c.content_block.id,
                                toolName: c.content_block.name,
                                jsonText: "",
                              };
                              return;
                            default:
                              throw Error(
                                `Unsupported content block type: ${e}`,
                              );
                          }
                        }
                        case "content_block_stop":
                          if (null != y[c.index]) {
                            let e = y[c.index];
                            r.enqueue({
                              type: "tool-call",
                              toolCallType: "function",
                              toolCallId: e.toolCallId,
                              toolName: e.toolName,
                              args: e.jsonText,
                            }),
                              delete y[c.index];
                          }
                          n = void 0;
                          return;
                        case "content_block_delta": {
                          let e = c.delta.type;
                          switch (e) {
                            case "text_delta":
                              return void r.enqueue({
                                type: "text-delta",
                                textDelta: c.delta.text,
                              });
                            case "thinking_delta":
                              return void r.enqueue({
                                type: "reasoning",
                                textDelta: c.delta.thinking,
                              });
                            case "signature_delta":
                              "thinking" === n &&
                                r.enqueue({
                                  type: "reasoning-signature",
                                  signature: c.delta.signature,
                                });
                              return;
                            case "input_json_delta": {
                              let e = y[c.index];
                              r.enqueue({
                                type: "tool-call-delta",
                                toolCallType: "function",
                                toolCallId: e.toolCallId,
                                toolName: e.toolName,
                                argsTextDelta: c.delta.partial_json,
                              }),
                                (e.jsonText += c.delta.partial_json);
                              return;
                            }
                            default:
                              throw Error(`Unsupported delta type: ${e}`);
                          }
                        }
                        case "message_start":
                          (g.promptTokens = c.message.usage.input_tokens),
                            (g.completionTokens =
                              c.message.usage.output_tokens),
                            (t = {
                              anthropic: {
                                cacheCreationInputTokens:
                                  null !=
                                  (i =
                                    c.message.usage.cache_creation_input_tokens)
                                    ? i
                                    : null,
                                cacheReadInputTokens:
                                  null !=
                                  (s = c.message.usage.cache_read_input_tokens)
                                    ? s
                                    : null,
                              },
                            }),
                            r.enqueue({
                              type: "response-metadata",
                              id: null != (o = c.message.id) ? o : void 0,
                              modelId:
                                null != (a = c.message.model) ? a : void 0,
                            });
                          return;
                        case "message_delta":
                          (g.completionTokens = c.usage.output_tokens),
                            (m = l(c.delta.stop_reason));
                          return;
                        case "message_stop":
                          return void r.enqueue({
                            type: "finish",
                            finishReason: m,
                            usage: g,
                            providerMetadata: t,
                          });
                        case "error":
                          return void r.enqueue({
                            type: "error",
                            error: c.error,
                          });
                        default:
                          throw Error(`Unsupported chunk type: ${c}`);
                      }
                    },
                  }),
                ),
                rawCall: { rawPrompt: p, rawSettings: f },
                rawResponse: { headers: u },
                warnings: s,
                request: { body: JSON.stringify(c) },
              };
            }
          },
          u = s.Ik({
            type: s.eu("message"),
            id: s.Yj().nullish(),
            model: s.Yj().nullish(),
            content: s.YO(
              s.gM("type", [
                s.Ik({ type: s.eu("text"), text: s.Yj() }),
                s.Ik({
                  type: s.eu("thinking"),
                  thinking: s.Yj(),
                  signature: s.Yj(),
                }),
                s.Ik({ type: s.eu("redacted_thinking"), data: s.Yj() }),
                s.Ik({
                  type: s.eu("tool_use"),
                  id: s.Yj(),
                  name: s.Yj(),
                  input: s.L5(),
                }),
              ]),
            ),
            stop_reason: s.Yj().nullish(),
            usage: s.Ik({
              input_tokens: s.ai(),
              output_tokens: s.ai(),
              cache_creation_input_tokens: s.ai().nullish(),
              cache_read_input_tokens: s.ai().nullish(),
            }),
          }),
          d = s.gM("type", [
            s.Ik({
              type: s.eu("message_start"),
              message: s.Ik({
                id: s.Yj().nullish(),
                model: s.Yj().nullish(),
                usage: s.Ik({
                  input_tokens: s.ai(),
                  output_tokens: s.ai(),
                  cache_creation_input_tokens: s.ai().nullish(),
                  cache_read_input_tokens: s.ai().nullish(),
                }),
              }),
            }),
            s.Ik({
              type: s.eu("content_block_start"),
              index: s.ai(),
              content_block: s.gM("type", [
                s.Ik({ type: s.eu("text"), text: s.Yj() }),
                s.Ik({ type: s.eu("thinking"), thinking: s.Yj() }),
                s.Ik({ type: s.eu("tool_use"), id: s.Yj(), name: s.Yj() }),
                s.Ik({ type: s.eu("redacted_thinking"), data: s.Yj() }),
              ]),
            }),
            s.Ik({
              type: s.eu("content_block_delta"),
              index: s.ai(),
              delta: s.gM("type", [
                s.Ik({ type: s.eu("input_json_delta"), partial_json: s.Yj() }),
                s.Ik({ type: s.eu("text_delta"), text: s.Yj() }),
                s.Ik({ type: s.eu("thinking_delta"), thinking: s.Yj() }),
                s.Ik({ type: s.eu("signature_delta"), signature: s.Yj() }),
              ]),
            }),
            s.Ik({ type: s.eu("content_block_stop"), index: s.ai() }),
            s.Ik({
              type: s.eu("error"),
              error: s.Ik({ type: s.Yj(), message: s.Yj() }),
            }),
            s.Ik({
              type: s.eu("message_delta"),
              delta: s.Ik({ stop_reason: s.Yj().nullish() }),
              usage: s.Ik({ output_tokens: s.ai() }),
            }),
            s.Ik({ type: s.eu("message_stop") }),
            s.Ik({ type: s.eu("ping") }),
          ]),
          h = s.Ik({
            thinking: s
              .Ik({
                type: s.KC([s.eu("enabled"), s.eu("disabled")]),
                budgetTokens: s.ai().optional(),
              })
              .optional(),
          }),
          p = s.Ik({ command: s.Yj(), restart: s.zM().optional() }),
          f = s.Ik({ command: s.Yj(), restart: s.zM().optional() }),
          m = s.Ik({
            command: s.k5([
              "view",
              "create",
              "str_replace",
              "insert",
              "undo_edit",
            ]),
            path: s.Yj(),
            file_text: s.Yj().optional(),
            insert_line: s.ai().int().optional(),
            new_str: s.Yj().optional(),
            old_str: s.Yj().optional(),
            view_range: s.YO(s.ai().int()).optional(),
          }),
          g = s.Ik({
            command: s.k5([
              "view",
              "create",
              "str_replace",
              "insert",
              "undo_edit",
            ]),
            path: s.Yj(),
            file_text: s.Yj().optional(),
            insert_line: s.ai().int().optional(),
            new_str: s.Yj().optional(),
            old_str: s.Yj().optional(),
            view_range: s.YO(s.ai().int()).optional(),
          }),
          y = s.Ik({
            action: s.k5([
              "key",
              "type",
              "mouse_move",
              "left_click",
              "left_click_drag",
              "right_click",
              "middle_click",
              "double_click",
              "screenshot",
              "cursor_position",
            ]),
            coordinate: s.YO(s.ai().int()).optional(),
            text: s.Yj().optional(),
          }),
          v = s.Ik({
            action: s.k5([
              "key",
              "hold_key",
              "type",
              "cursor_position",
              "mouse_move",
              "left_mouse_down",
              "left_mouse_up",
              "left_click",
              "left_click_drag",
              "right_click",
              "middle_click",
              "double_click",
              "triple_click",
              "scroll",
              "wait",
              "screenshot",
            ]),
            coordinate: s.PV([s.ai().int(), s.ai().int()]).optional(),
            duration: s.ai().optional(),
            scroll_amount: s.ai().optional(),
            scroll_direction: s.k5(["up", "down", "left", "right"]).optional(),
            start_coordinate: s.PV([s.ai().int(), s.ai().int()]).optional(),
            text: s.Yj().optional(),
          }),
          b = {
            bash_20241022: function (e = {}) {
              return {
                type: "provider-defined",
                id: "anthropic.bash_20241022",
                args: {},
                parameters: p,
                execute: e.execute,
                experimental_toToolResultContent:
                  e.experimental_toToolResultContent,
              };
            },
            bash_20250124: function (e = {}) {
              return {
                type: "provider-defined",
                id: "anthropic.bash_20250124",
                args: {},
                parameters: f,
                execute: e.execute,
                experimental_toToolResultContent:
                  e.experimental_toToolResultContent,
              };
            },
            textEditor_20241022: function (e = {}) {
              return {
                type: "provider-defined",
                id: "anthropic.text_editor_20241022",
                args: {},
                parameters: m,
                execute: e.execute,
                experimental_toToolResultContent:
                  e.experimental_toToolResultContent,
              };
            },
            textEditor_20250124: function (e = {}) {
              return {
                type: "provider-defined",
                id: "anthropic.text_editor_20250124",
                args: {},
                parameters: g,
                execute: e.execute,
                experimental_toToolResultContent:
                  e.experimental_toToolResultContent,
              };
            },
            computer_20241022: function (e) {
              return {
                type: "provider-defined",
                id: "anthropic.computer_20241022",
                args: {
                  displayWidthPx: e.displayWidthPx,
                  displayHeightPx: e.displayHeightPx,
                  displayNumber: e.displayNumber,
                },
                parameters: y,
                execute: e.execute,
                experimental_toToolResultContent:
                  e.experimental_toToolResultContent,
              };
            },
            computer_20250124: function (e) {
              return {
                type: "provider-defined",
                id: "anthropic.computer_20250124",
                args: {
                  displayWidthPx: e.displayWidthPx,
                  displayHeightPx: e.displayHeightPx,
                  displayNumber: e.displayNumber,
                },
                parameters: v,
                execute: e.execute,
                experimental_toToolResultContent:
                  e.experimental_toToolResultContent,
              };
            },
          },
          x = (function (e = {}) {
            var t;
            let n =
                null != (t = (0, i.ae)(e.baseURL))
                  ? t
                  : "https://api.anthropic.com/v1",
              s = () => ({
                "anthropic-version": "2023-06-01",
                "x-api-key": (0, i.WL)({
                  apiKey: e.apiKey,
                  environmentVariableName: "ANTHROPIC_API_KEY",
                  description: "Anthropic",
                }),
                ...e.headers,
              }),
              o = (t, r = {}) =>
                new c(t, r, {
                  provider: "anthropic.messages",
                  baseURL: n,
                  headers: s,
                  fetch: e.fetch,
                  supportsImageUrls: !0,
                }),
              a = function (e, t) {
                if (new.target)
                  throw Error(
                    "The Anthropic model function cannot be called with the new keyword.",
                  );
                return o(e, t);
              };
            return (
              (a.languageModel = o),
              (a.chat = o),
              (a.messages = o),
              (a.textEmbeddingModel = (e) => {
                throw new r.eM({ modelId: e, modelType: "textEmbeddingModel" });
              }),
              (a.tools = b),
              a
            );
          })();
      },
      67486: (e, t, n) => {
        "use strict";
        var r;
        let i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.discriminatedUnion =
            t.date =
            t.boolean =
            t.bigint =
            t.array =
            t.any =
            t.coerce =
            t.ZodFirstPartyTypeKind =
            t.late =
            t.ZodSchema =
            t.Schema =
            t.ZodReadonly =
            t.ZodPipeline =
            t.ZodBranded =
            t.BRAND =
            t.ZodNaN =
            t.ZodCatch =
            t.ZodDefault =
            t.ZodNullable =
            t.ZodOptional =
            t.ZodTransformer =
            t.ZodEffects =
            t.ZodPromise =
            t.ZodNativeEnum =
            t.ZodEnum =
            t.ZodLiteral =
            t.ZodLazy =
            t.ZodFunction =
            t.ZodSet =
            t.ZodMap =
            t.ZodRecord =
            t.ZodTuple =
            t.ZodIntersection =
            t.ZodDiscriminatedUnion =
            t.ZodUnion =
            t.ZodObject =
            t.ZodArray =
            t.ZodVoid =
            t.ZodNever =
            t.ZodUnknown =
            t.ZodAny =
            t.ZodNull =
            t.ZodUndefined =
            t.ZodSymbol =
            t.ZodDate =
            t.ZodBoolean =
            t.ZodBigInt =
            t.ZodNumber =
            t.ZodString =
            t.ZodType =
              void 0),
          (t.NEVER =
            t.void =
            t.unknown =
            t.union =
            t.undefined =
            t.tuple =
            t.transformer =
            t.symbol =
            t.string =
            t.strictObject =
            t.set =
            t.record =
            t.promise =
            t.preprocess =
            t.pipeline =
            t.ostring =
            t.optional =
            t.onumber =
            t.oboolean =
            t.object =
            t.number =
            t.nullable =
            t.null =
            t.never =
            t.nativeEnum =
            t.nan =
            t.map =
            t.literal =
            t.lazy =
            t.intersection =
            t.instanceof =
            t.function =
            t.enum =
            t.effect =
              void 0),
          (t.datetimeRegex = I),
          (t.custom = ey);
        let s = n(70964),
          o = n(43338),
          a = n(48509),
          l = n(48866),
          c = n(77749);
        class u {
          constructor(e, t, n, r) {
            (this._cachedPath = []),
              (this.parent = e),
              (this.data = t),
              (this._path = n),
              (this._key = r);
          }
          get path() {
            return (
              this._cachedPath.length ||
                (Array.isArray(this._key)
                  ? this._cachedPath.push(...this._path, ...this._key)
                  : this._cachedPath.push(...this._path, this._key)),
              this._cachedPath
            );
          }
        }
        let d = (e, t) => {
          if ((0, l.isValid)(t)) return { success: !0, data: t.value };
          if (!e.common.issues.length)
            throw Error("Validation failed but no issues detected.");
          return {
            success: !1,
            get error() {
              if (this._error) return this._error;
              let t = new s.ZodError(e.common.issues);
              return (this._error = t), this._error;
            },
          };
        };
        function h(e) {
          if (!e) return {};
          let {
            errorMap: t,
            invalid_type_error: n,
            required_error: r,
            description: i,
          } = e;
          if (t && (n || r))
            throw Error(
              'Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.',
            );
          return t
            ? { errorMap: t, description: i }
            : {
                errorMap: (t, i) => {
                  let { message: s } = e;
                  return "invalid_enum_value" === t.code
                    ? { message: s ?? i.defaultError }
                    : void 0 === i.data
                      ? { message: s ?? r ?? i.defaultError }
                      : "invalid_type" !== t.code
                        ? { message: i.defaultError }
                        : { message: s ?? n ?? i.defaultError };
                },
                description: i,
              };
        }
        class p {
          get description() {
            return this._def.description;
          }
          _getType(e) {
            return (0, c.getParsedType)(e.data);
          }
          _getOrReturnCtx(e, t) {
            return (
              t || {
                common: e.parent.common,
                data: e.data,
                parsedType: (0, c.getParsedType)(e.data),
                schemaErrorMap: this._def.errorMap,
                path: e.path,
                parent: e.parent,
              }
            );
          }
          _processInputParams(e) {
            return {
              status: new l.ParseStatus(),
              ctx: {
                common: e.parent.common,
                data: e.data,
                parsedType: (0, c.getParsedType)(e.data),
                schemaErrorMap: this._def.errorMap,
                path: e.path,
                parent: e.parent,
              },
            };
          }
          _parseSync(e) {
            let t = this._parse(e);
            if ((0, l.isAsync)(t))
              throw Error("Synchronous parse encountered promise.");
            return t;
          }
          _parseAsync(e) {
            return Promise.resolve(this._parse(e));
          }
          parse(e, t) {
            let n = this.safeParse(e, t);
            if (n.success) return n.data;
            throw n.error;
          }
          safeParse(e, t) {
            let n = {
                common: {
                  issues: [],
                  async: t?.async ?? !1,
                  contextualErrorMap: t?.errorMap,
                },
                path: t?.path || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data: e,
                parsedType: (0, c.getParsedType)(e),
              },
              r = this._parseSync({ data: e, path: n.path, parent: n });
            return d(n, r);
          }
          "~validate"(e) {
            let t = {
              common: { issues: [], async: !!this["~standard"].async },
              path: [],
              schemaErrorMap: this._def.errorMap,
              parent: null,
              data: e,
              parsedType: (0, c.getParsedType)(e),
            };
            if (!this["~standard"].async)
              try {
                let n = this._parseSync({ data: e, path: [], parent: t });
                return (0, l.isValid)(n)
                  ? { value: n.value }
                  : { issues: t.common.issues };
              } catch (e) {
                e?.message?.toLowerCase()?.includes("encountered") &&
                  (this["~standard"].async = !0),
                  (t.common = { issues: [], async: !0 });
              }
            return this._parseAsync({ data: e, path: [], parent: t }).then(
              (e) =>
                (0, l.isValid)(e)
                  ? { value: e.value }
                  : { issues: t.common.issues },
            );
          }
          async parseAsync(e, t) {
            let n = await this.safeParseAsync(e, t);
            if (n.success) return n.data;
            throw n.error;
          }
          async safeParseAsync(e, t) {
            let n = {
                common: {
                  issues: [],
                  contextualErrorMap: t?.errorMap,
                  async: !0,
                },
                path: t?.path || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data: e,
                parsedType: (0, c.getParsedType)(e),
              },
              r = this._parse({ data: e, path: n.path, parent: n });
            return d(n, await ((0, l.isAsync)(r) ? r : Promise.resolve(r)));
          }
          refine(e, t) {
            let n = (e) =>
              "string" == typeof t || void 0 === t
                ? { message: t }
                : "function" == typeof t
                  ? t(e)
                  : t;
            return this._refinement((t, r) => {
              let i = e(t),
                o = () => r.addIssue({ code: s.ZodIssueCode.custom, ...n(t) });
              return "undefined" != typeof Promise && i instanceof Promise
                ? i.then((e) => !!e || (o(), !1))
                : !!i || (o(), !1);
            });
          }
          refinement(e, t) {
            return this._refinement(
              (n, r) =>
                !!e(n) ||
                (r.addIssue("function" == typeof t ? t(n, r) : t), !1),
            );
          }
          _refinement(e) {
            return new ea({
              schema: this,
              typeName: r.ZodEffects,
              effect: { type: "refinement", refinement: e },
            });
          }
          superRefine(e) {
            return this._refinement(e);
          }
          constructor(e) {
            (this.spa = this.safeParseAsync),
              (this._def = e),
              (this.parse = this.parse.bind(this)),
              (this.safeParse = this.safeParse.bind(this)),
              (this.parseAsync = this.parseAsync.bind(this)),
              (this.safeParseAsync = this.safeParseAsync.bind(this)),
              (this.spa = this.spa.bind(this)),
              (this.refine = this.refine.bind(this)),
              (this.refinement = this.refinement.bind(this)),
              (this.superRefine = this.superRefine.bind(this)),
              (this.optional = this.optional.bind(this)),
              (this.nullable = this.nullable.bind(this)),
              (this.nullish = this.nullish.bind(this)),
              (this.array = this.array.bind(this)),
              (this.promise = this.promise.bind(this)),
              (this.or = this.or.bind(this)),
              (this.and = this.and.bind(this)),
              (this.transform = this.transform.bind(this)),
              (this.brand = this.brand.bind(this)),
              (this.default = this.default.bind(this)),
              (this.catch = this.catch.bind(this)),
              (this.describe = this.describe.bind(this)),
              (this.pipe = this.pipe.bind(this)),
              (this.readonly = this.readonly.bind(this)),
              (this.isNullable = this.isNullable.bind(this)),
              (this.isOptional = this.isOptional.bind(this)),
              (this["~standard"] = {
                version: 1,
                vendor: "zod",
                validate: (e) => this["~validate"](e),
              });
          }
          optional() {
            return el.create(this, this._def);
          }
          nullable() {
            return ec.create(this, this._def);
          }
          nullish() {
            return this.nullable().optional();
          }
          array() {
            return H.create(this);
          }
          promise() {
            return eo.create(this, this._def);
          }
          or(e) {
            return V.create([this, e], this._def);
          }
          and(e) {
            return G.create(this, e, this._def);
          }
          transform(e) {
            return new ea({
              ...h(this._def),
              schema: this,
              typeName: r.ZodEffects,
              effect: { type: "transform", transform: e },
            });
          }
          default(e) {
            return new eu({
              ...h(this._def),
              innerType: this,
              defaultValue: "function" == typeof e ? e : () => e,
              typeName: r.ZodDefault,
            });
          }
          brand() {
            return new ep({
              typeName: r.ZodBranded,
              type: this,
              ...h(this._def),
            });
          }
          catch(e) {
            return new ed({
              ...h(this._def),
              innerType: this,
              catchValue: "function" == typeof e ? e : () => e,
              typeName: r.ZodCatch,
            });
          }
          describe(e) {
            return new this.constructor({ ...this._def, description: e });
          }
          pipe(e) {
            return ef.create(this, e);
          }
          readonly() {
            return em.create(this);
          }
          isOptional() {
            return this.safeParse(void 0).success;
          }
          isNullable() {
            return this.safeParse(null).success;
          }
        }
        (t.ZodType = p), (t.Schema = p), (t.ZodSchema = p);
        let f = /^c[^\s-]{8,}$/i,
          m = /^[0-9a-z]+$/,
          g = /^[0-9A-HJKMNP-TV-Z]{26}$/i,
          y =
            /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,
          v = /^[a-z0-9_-]{21}$/i,
          b = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,
          x =
            /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,
          k =
            /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,
          w =
            /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
          _ =
            /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
          O =
            /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,
          T =
            /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
          S =
            /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
          E =
            /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
          C =
            "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",
          A = RegExp(`^${C}$`);
        function N(e) {
          let t = "[0-5]\\d";
          e.precision
            ? (t = `${t}\\.\\d{${e.precision}}`)
            : null == e.precision && (t = `${t}(\\.\\d+)?`);
          let n = e.precision ? "+" : "?";
          return `([01]\\d|2[0-3]):[0-5]\\d(:${t})${n}`;
        }
        function I(e) {
          let t = `${C}T${N(e)}`,
            n = [];
          return (
            n.push(e.local ? "Z?" : "Z"),
            e.offset && n.push("([+-]\\d{2}:?\\d{2})"),
            (t = `${t}(${n.join("|")})`),
            RegExp(`^${t}$`)
          );
        }
        class D extends p {
          _parse(e) {
            var t, n, r, o;
            let a;
            if (
              (this._def.coerce && (e.data = String(e.data)),
              this._getType(e) !== c.ZodParsedType.string)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.string,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            let u = new l.ParseStatus();
            for (let d of this._def.checks)
              if ("min" === d.kind)
                e.data.length < d.value &&
                  ((a = this._getOrReturnCtx(e, a)),
                  (0, l.addIssueToContext)(a, {
                    code: s.ZodIssueCode.too_small,
                    minimum: d.value,
                    type: "string",
                    inclusive: !0,
                    exact: !1,
                    message: d.message,
                  }),
                  u.dirty());
              else if ("max" === d.kind)
                e.data.length > d.value &&
                  ((a = this._getOrReturnCtx(e, a)),
                  (0, l.addIssueToContext)(a, {
                    code: s.ZodIssueCode.too_big,
                    maximum: d.value,
                    type: "string",
                    inclusive: !0,
                    exact: !1,
                    message: d.message,
                  }),
                  u.dirty());
              else if ("length" === d.kind) {
                let t = e.data.length > d.value,
                  n = e.data.length < d.value;
                (t || n) &&
                  ((a = this._getOrReturnCtx(e, a)),
                  t
                    ? (0, l.addIssueToContext)(a, {
                        code: s.ZodIssueCode.too_big,
                        maximum: d.value,
                        type: "string",
                        inclusive: !0,
                        exact: !0,
                        message: d.message,
                      })
                    : n &&
                      (0, l.addIssueToContext)(a, {
                        code: s.ZodIssueCode.too_small,
                        minimum: d.value,
                        type: "string",
                        inclusive: !0,
                        exact: !0,
                        message: d.message,
                      }),
                  u.dirty());
              } else if ("email" === d.kind)
                k.test(e.data) ||
                  ((a = this._getOrReturnCtx(e, a)),
                  (0, l.addIssueToContext)(a, {
                    validation: "email",
                    code: s.ZodIssueCode.invalid_string,
                    message: d.message,
                  }),
                  u.dirty());
              else if ("emoji" === d.kind)
                i ||
                  (i = RegExp(
                    "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$",
                    "u",
                  )),
                  i.test(e.data) ||
                    ((a = this._getOrReturnCtx(e, a)),
                    (0, l.addIssueToContext)(a, {
                      validation: "emoji",
                      code: s.ZodIssueCode.invalid_string,
                      message: d.message,
                    }),
                    u.dirty());
              else if ("uuid" === d.kind)
                y.test(e.data) ||
                  ((a = this._getOrReturnCtx(e, a)),
                  (0, l.addIssueToContext)(a, {
                    validation: "uuid",
                    code: s.ZodIssueCode.invalid_string,
                    message: d.message,
                  }),
                  u.dirty());
              else if ("nanoid" === d.kind)
                v.test(e.data) ||
                  ((a = this._getOrReturnCtx(e, a)),
                  (0, l.addIssueToContext)(a, {
                    validation: "nanoid",
                    code: s.ZodIssueCode.invalid_string,
                    message: d.message,
                  }),
                  u.dirty());
              else if ("cuid" === d.kind)
                f.test(e.data) ||
                  ((a = this._getOrReturnCtx(e, a)),
                  (0, l.addIssueToContext)(a, {
                    validation: "cuid",
                    code: s.ZodIssueCode.invalid_string,
                    message: d.message,
                  }),
                  u.dirty());
              else if ("cuid2" === d.kind)
                m.test(e.data) ||
                  ((a = this._getOrReturnCtx(e, a)),
                  (0, l.addIssueToContext)(a, {
                    validation: "cuid2",
                    code: s.ZodIssueCode.invalid_string,
                    message: d.message,
                  }),
                  u.dirty());
              else if ("ulid" === d.kind)
                g.test(e.data) ||
                  ((a = this._getOrReturnCtx(e, a)),
                  (0, l.addIssueToContext)(a, {
                    validation: "ulid",
                    code: s.ZodIssueCode.invalid_string,
                    message: d.message,
                  }),
                  u.dirty());
              else if ("url" === d.kind)
                try {
                  new URL(e.data);
                } catch {
                  (a = this._getOrReturnCtx(e, a)),
                    (0, l.addIssueToContext)(a, {
                      validation: "url",
                      code: s.ZodIssueCode.invalid_string,
                      message: d.message,
                    }),
                    u.dirty();
                }
              else
                "regex" === d.kind
                  ? ((d.regex.lastIndex = 0),
                    d.regex.test(e.data) ||
                      ((a = this._getOrReturnCtx(e, a)),
                      (0, l.addIssueToContext)(a, {
                        validation: "regex",
                        code: s.ZodIssueCode.invalid_string,
                        message: d.message,
                      }),
                      u.dirty()))
                  : "trim" === d.kind
                    ? (e.data = e.data.trim())
                    : "includes" === d.kind
                      ? e.data.includes(d.value, d.position) ||
                        ((a = this._getOrReturnCtx(e, a)),
                        (0, l.addIssueToContext)(a, {
                          code: s.ZodIssueCode.invalid_string,
                          validation: {
                            includes: d.value,
                            position: d.position,
                          },
                          message: d.message,
                        }),
                        u.dirty())
                      : "toLowerCase" === d.kind
                        ? (e.data = e.data.toLowerCase())
                        : "toUpperCase" === d.kind
                          ? (e.data = e.data.toUpperCase())
                          : "startsWith" === d.kind
                            ? e.data.startsWith(d.value) ||
                              ((a = this._getOrReturnCtx(e, a)),
                              (0, l.addIssueToContext)(a, {
                                code: s.ZodIssueCode.invalid_string,
                                validation: { startsWith: d.value },
                                message: d.message,
                              }),
                              u.dirty())
                            : "endsWith" === d.kind
                              ? e.data.endsWith(d.value) ||
                                ((a = this._getOrReturnCtx(e, a)),
                                (0, l.addIssueToContext)(a, {
                                  code: s.ZodIssueCode.invalid_string,
                                  validation: { endsWith: d.value },
                                  message: d.message,
                                }),
                                u.dirty())
                              : "datetime" === d.kind
                                ? I(d).test(e.data) ||
                                  ((a = this._getOrReturnCtx(e, a)),
                                  (0, l.addIssueToContext)(a, {
                                    code: s.ZodIssueCode.invalid_string,
                                    validation: "datetime",
                                    message: d.message,
                                  }),
                                  u.dirty())
                                : "date" === d.kind
                                  ? A.test(e.data) ||
                                    ((a = this._getOrReturnCtx(e, a)),
                                    (0, l.addIssueToContext)(a, {
                                      code: s.ZodIssueCode.invalid_string,
                                      validation: "date",
                                      message: d.message,
                                    }),
                                    u.dirty())
                                  : "time" === d.kind
                                    ? RegExp(`^${N(d)}$`).test(e.data) ||
                                      ((a = this._getOrReturnCtx(e, a)),
                                      (0, l.addIssueToContext)(a, {
                                        code: s.ZodIssueCode.invalid_string,
                                        validation: "time",
                                        message: d.message,
                                      }),
                                      u.dirty())
                                    : "duration" === d.kind
                                      ? x.test(e.data) ||
                                        ((a = this._getOrReturnCtx(e, a)),
                                        (0, l.addIssueToContext)(a, {
                                          validation: "duration",
                                          code: s.ZodIssueCode.invalid_string,
                                          message: d.message,
                                        }),
                                        u.dirty())
                                      : "ip" === d.kind
                                        ? ((t = e.data),
                                          !(
                                            (("v4" === (n = d.version) || !n) &&
                                              w.test(t)) ||
                                            (("v6" === n || !n) && O.test(t))
                                          ) &&
                                            1 &&
                                            ((a = this._getOrReturnCtx(e, a)),
                                            (0, l.addIssueToContext)(a, {
                                              validation: "ip",
                                              code: s.ZodIssueCode
                                                .invalid_string,
                                              message: d.message,
                                            }),
                                            u.dirty()))
                                        : "jwt" === d.kind
                                          ? !(function (e, t) {
                                              if (!b.test(e)) return !1;
                                              try {
                                                let [n] = e.split(".");
                                                if (!n) return !1;
                                                let r = n
                                                    .replace(/-/g, "+")
                                                    .replace(/_/g, "/")
                                                    .padEnd(
                                                      n.length +
                                                        ((4 - (n.length % 4)) %
                                                          4),
                                                      "=",
                                                    ),
                                                  i = JSON.parse(atob(r));
                                                if (
                                                  "object" != typeof i ||
                                                  null === i ||
                                                  ("typ" in i &&
                                                    i?.typ !== "JWT") ||
                                                  !i.alg ||
                                                  (t && i.alg !== t)
                                                )
                                                  return !1;
                                                return !0;
                                              } catch {
                                                return !1;
                                              }
                                            })(e.data, d.alg) &&
                                            ((a = this._getOrReturnCtx(e, a)),
                                            (0, l.addIssueToContext)(a, {
                                              validation: "jwt",
                                              code: s.ZodIssueCode
                                                .invalid_string,
                                              message: d.message,
                                            }),
                                            u.dirty())
                                          : "cidr" === d.kind
                                            ? ((r = e.data),
                                              !(
                                                (("v4" === (o = d.version) ||
                                                  !o) &&
                                                  _.test(r)) ||
                                                (("v6" === o || !o) &&
                                                  T.test(r))
                                              ) &&
                                                1 &&
                                                ((a = this._getOrReturnCtx(
                                                  e,
                                                  a,
                                                )),
                                                (0, l.addIssueToContext)(a, {
                                                  validation: "cidr",
                                                  code: s.ZodIssueCode
                                                    .invalid_string,
                                                  message: d.message,
                                                }),
                                                u.dirty()))
                                            : "base64" === d.kind
                                              ? S.test(e.data) ||
                                                ((a = this._getOrReturnCtx(
                                                  e,
                                                  a,
                                                )),
                                                (0, l.addIssueToContext)(a, {
                                                  validation: "base64",
                                                  code: s.ZodIssueCode
                                                    .invalid_string,
                                                  message: d.message,
                                                }),
                                                u.dirty())
                                              : "base64url" === d.kind
                                                ? E.test(e.data) ||
                                                  ((a = this._getOrReturnCtx(
                                                    e,
                                                    a,
                                                  )),
                                                  (0, l.addIssueToContext)(a, {
                                                    validation: "base64url",
                                                    code: s.ZodIssueCode
                                                      .invalid_string,
                                                    message: d.message,
                                                  }),
                                                  u.dirty())
                                                : c.util.assertNever(d);
            return { status: u.value, value: e.data };
          }
          _regex(e, t, n) {
            return this.refinement((t) => e.test(t), {
              validation: t,
              code: s.ZodIssueCode.invalid_string,
              ...a.errorUtil.errToObj(n),
            });
          }
          _addCheck(e) {
            return new D({ ...this._def, checks: [...this._def.checks, e] });
          }
          email(e) {
            return this._addCheck({
              kind: "email",
              ...a.errorUtil.errToObj(e),
            });
          }
          url(e) {
            return this._addCheck({ kind: "url", ...a.errorUtil.errToObj(e) });
          }
          emoji(e) {
            return this._addCheck({
              kind: "emoji",
              ...a.errorUtil.errToObj(e),
            });
          }
          uuid(e) {
            return this._addCheck({ kind: "uuid", ...a.errorUtil.errToObj(e) });
          }
          nanoid(e) {
            return this._addCheck({
              kind: "nanoid",
              ...a.errorUtil.errToObj(e),
            });
          }
          cuid(e) {
            return this._addCheck({ kind: "cuid", ...a.errorUtil.errToObj(e) });
          }
          cuid2(e) {
            return this._addCheck({
              kind: "cuid2",
              ...a.errorUtil.errToObj(e),
            });
          }
          ulid(e) {
            return this._addCheck({ kind: "ulid", ...a.errorUtil.errToObj(e) });
          }
          base64(e) {
            return this._addCheck({
              kind: "base64",
              ...a.errorUtil.errToObj(e),
            });
          }
          base64url(e) {
            return this._addCheck({
              kind: "base64url",
              ...a.errorUtil.errToObj(e),
            });
          }
          jwt(e) {
            return this._addCheck({ kind: "jwt", ...a.errorUtil.errToObj(e) });
          }
          ip(e) {
            return this._addCheck({ kind: "ip", ...a.errorUtil.errToObj(e) });
          }
          cidr(e) {
            return this._addCheck({ kind: "cidr", ...a.errorUtil.errToObj(e) });
          }
          datetime(e) {
            return "string" == typeof e
              ? this._addCheck({
                  kind: "datetime",
                  precision: null,
                  offset: !1,
                  local: !1,
                  message: e,
                })
              : this._addCheck({
                  kind: "datetime",
                  precision: void 0 === e?.precision ? null : e?.precision,
                  offset: e?.offset ?? !1,
                  local: e?.local ?? !1,
                  ...a.errorUtil.errToObj(e?.message),
                });
          }
          date(e) {
            return this._addCheck({ kind: "date", message: e });
          }
          time(e) {
            return "string" == typeof e
              ? this._addCheck({ kind: "time", precision: null, message: e })
              : this._addCheck({
                  kind: "time",
                  precision: void 0 === e?.precision ? null : e?.precision,
                  ...a.errorUtil.errToObj(e?.message),
                });
          }
          duration(e) {
            return this._addCheck({
              kind: "duration",
              ...a.errorUtil.errToObj(e),
            });
          }
          regex(e, t) {
            return this._addCheck({
              kind: "regex",
              regex: e,
              ...a.errorUtil.errToObj(t),
            });
          }
          includes(e, t) {
            return this._addCheck({
              kind: "includes",
              value: e,
              position: t?.position,
              ...a.errorUtil.errToObj(t?.message),
            });
          }
          startsWith(e, t) {
            return this._addCheck({
              kind: "startsWith",
              value: e,
              ...a.errorUtil.errToObj(t),
            });
          }
          endsWith(e, t) {
            return this._addCheck({
              kind: "endsWith",
              value: e,
              ...a.errorUtil.errToObj(t),
            });
          }
          min(e, t) {
            return this._addCheck({
              kind: "min",
              value: e,
              ...a.errorUtil.errToObj(t),
            });
          }
          max(e, t) {
            return this._addCheck({
              kind: "max",
              value: e,
              ...a.errorUtil.errToObj(t),
            });
          }
          length(e, t) {
            return this._addCheck({
              kind: "length",
              value: e,
              ...a.errorUtil.errToObj(t),
            });
          }
          nonempty(e) {
            return this.min(1, a.errorUtil.errToObj(e));
          }
          trim() {
            return new D({
              ...this._def,
              checks: [...this._def.checks, { kind: "trim" }],
            });
          }
          toLowerCase() {
            return new D({
              ...this._def,
              checks: [...this._def.checks, { kind: "toLowerCase" }],
            });
          }
          toUpperCase() {
            return new D({
              ...this._def,
              checks: [...this._def.checks, { kind: "toUpperCase" }],
            });
          }
          get isDatetime() {
            return !!this._def.checks.find((e) => "datetime" === e.kind);
          }
          get isDate() {
            return !!this._def.checks.find((e) => "date" === e.kind);
          }
          get isTime() {
            return !!this._def.checks.find((e) => "time" === e.kind);
          }
          get isDuration() {
            return !!this._def.checks.find((e) => "duration" === e.kind);
          }
          get isEmail() {
            return !!this._def.checks.find((e) => "email" === e.kind);
          }
          get isURL() {
            return !!this._def.checks.find((e) => "url" === e.kind);
          }
          get isEmoji() {
            return !!this._def.checks.find((e) => "emoji" === e.kind);
          }
          get isUUID() {
            return !!this._def.checks.find((e) => "uuid" === e.kind);
          }
          get isNANOID() {
            return !!this._def.checks.find((e) => "nanoid" === e.kind);
          }
          get isCUID() {
            return !!this._def.checks.find((e) => "cuid" === e.kind);
          }
          get isCUID2() {
            return !!this._def.checks.find((e) => "cuid2" === e.kind);
          }
          get isULID() {
            return !!this._def.checks.find((e) => "ulid" === e.kind);
          }
          get isIP() {
            return !!this._def.checks.find((e) => "ip" === e.kind);
          }
          get isCIDR() {
            return !!this._def.checks.find((e) => "cidr" === e.kind);
          }
          get isBase64() {
            return !!this._def.checks.find((e) => "base64" === e.kind);
          }
          get isBase64url() {
            return !!this._def.checks.find((e) => "base64url" === e.kind);
          }
          get minLength() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxLength() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
        }
        (t.ZodString = D),
          (D.create = (e) =>
            new D({
              checks: [],
              typeName: r.ZodString,
              coerce: e?.coerce ?? !1,
              ...h(e),
            }));
        class P extends p {
          constructor() {
            super(...arguments),
              (this.min = this.gte),
              (this.max = this.lte),
              (this.step = this.multipleOf);
          }
          _parse(e) {
            let t;
            if (
              (this._def.coerce && (e.data = Number(e.data)),
              this._getType(e) !== c.ZodParsedType.number)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.number,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            let n = new l.ParseStatus();
            for (let r of this._def.checks)
              "int" === r.kind
                ? c.util.isInteger(e.data) ||
                  ((t = this._getOrReturnCtx(e, t)),
                  (0, l.addIssueToContext)(t, {
                    code: s.ZodIssueCode.invalid_type,
                    expected: "integer",
                    received: "float",
                    message: r.message,
                  }),
                  n.dirty())
                : "min" === r.kind
                  ? (r.inclusive ? e.data < r.value : e.data <= r.value) &&
                    ((t = this._getOrReturnCtx(e, t)),
                    (0, l.addIssueToContext)(t, {
                      code: s.ZodIssueCode.too_small,
                      minimum: r.value,
                      type: "number",
                      inclusive: r.inclusive,
                      exact: !1,
                      message: r.message,
                    }),
                    n.dirty())
                  : "max" === r.kind
                    ? (r.inclusive ? e.data > r.value : e.data >= r.value) &&
                      ((t = this._getOrReturnCtx(e, t)),
                      (0, l.addIssueToContext)(t, {
                        code: s.ZodIssueCode.too_big,
                        maximum: r.value,
                        type: "number",
                        inclusive: r.inclusive,
                        exact: !1,
                        message: r.message,
                      }),
                      n.dirty())
                    : "multipleOf" === r.kind
                      ? 0 !==
                          (function (e, t) {
                            let n = (e.toString().split(".")[1] || "").length,
                              r = (t.toString().split(".")[1] || "").length,
                              i = n > r ? n : r;
                            return (
                              (Number.parseInt(e.toFixed(i).replace(".", "")) %
                                Number.parseInt(
                                  t.toFixed(i).replace(".", ""),
                                )) /
                              10 ** i
                            );
                          })(e.data, r.value) &&
                        ((t = this._getOrReturnCtx(e, t)),
                        (0, l.addIssueToContext)(t, {
                          code: s.ZodIssueCode.not_multiple_of,
                          multipleOf: r.value,
                          message: r.message,
                        }),
                        n.dirty())
                      : "finite" === r.kind
                        ? Number.isFinite(e.data) ||
                          ((t = this._getOrReturnCtx(e, t)),
                          (0, l.addIssueToContext)(t, {
                            code: s.ZodIssueCode.not_finite,
                            message: r.message,
                          }),
                          n.dirty())
                        : c.util.assertNever(r);
            return { status: n.value, value: e.data };
          }
          gte(e, t) {
            return this.setLimit("min", e, !0, a.errorUtil.toString(t));
          }
          gt(e, t) {
            return this.setLimit("min", e, !1, a.errorUtil.toString(t));
          }
          lte(e, t) {
            return this.setLimit("max", e, !0, a.errorUtil.toString(t));
          }
          lt(e, t) {
            return this.setLimit("max", e, !1, a.errorUtil.toString(t));
          }
          setLimit(e, t, n, r) {
            return new P({
              ...this._def,
              checks: [
                ...this._def.checks,
                {
                  kind: e,
                  value: t,
                  inclusive: n,
                  message: a.errorUtil.toString(r),
                },
              ],
            });
          }
          _addCheck(e) {
            return new P({ ...this._def, checks: [...this._def.checks, e] });
          }
          int(e) {
            return this._addCheck({
              kind: "int",
              message: a.errorUtil.toString(e),
            });
          }
          positive(e) {
            return this._addCheck({
              kind: "min",
              value: 0,
              inclusive: !1,
              message: a.errorUtil.toString(e),
            });
          }
          negative(e) {
            return this._addCheck({
              kind: "max",
              value: 0,
              inclusive: !1,
              message: a.errorUtil.toString(e),
            });
          }
          nonpositive(e) {
            return this._addCheck({
              kind: "max",
              value: 0,
              inclusive: !0,
              message: a.errorUtil.toString(e),
            });
          }
          nonnegative(e) {
            return this._addCheck({
              kind: "min",
              value: 0,
              inclusive: !0,
              message: a.errorUtil.toString(e),
            });
          }
          multipleOf(e, t) {
            return this._addCheck({
              kind: "multipleOf",
              value: e,
              message: a.errorUtil.toString(t),
            });
          }
          finite(e) {
            return this._addCheck({
              kind: "finite",
              message: a.errorUtil.toString(e),
            });
          }
          safe(e) {
            return this._addCheck({
              kind: "min",
              inclusive: !0,
              value: Number.MIN_SAFE_INTEGER,
              message: a.errorUtil.toString(e),
            })._addCheck({
              kind: "max",
              inclusive: !0,
              value: Number.MAX_SAFE_INTEGER,
              message: a.errorUtil.toString(e),
            });
          }
          get minValue() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxValue() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
          get isInt() {
            return !!this._def.checks.find(
              (e) =>
                "int" === e.kind ||
                ("multipleOf" === e.kind && c.util.isInteger(e.value)),
            );
          }
          get isFinite() {
            let e = null,
              t = null;
            for (let n of this._def.checks)
              if (
                "finite" === n.kind ||
                "int" === n.kind ||
                "multipleOf" === n.kind
              )
                return !0;
              else
                "min" === n.kind
                  ? (null === t || n.value > t) && (t = n.value)
                  : "max" === n.kind &&
                    (null === e || n.value < e) &&
                    (e = n.value);
            return Number.isFinite(t) && Number.isFinite(e);
          }
        }
        (t.ZodNumber = P),
          (P.create = (e) =>
            new P({
              checks: [],
              typeName: r.ZodNumber,
              coerce: e?.coerce || !1,
              ...h(e),
            }));
        class R extends p {
          constructor() {
            super(...arguments), (this.min = this.gte), (this.max = this.lte);
          }
          _parse(e) {
            let t;
            if (this._def.coerce)
              try {
                e.data = BigInt(e.data);
              } catch {
                return this._getInvalidInput(e);
              }
            if (this._getType(e) !== c.ZodParsedType.bigint)
              return this._getInvalidInput(e);
            let n = new l.ParseStatus();
            for (let r of this._def.checks)
              "min" === r.kind
                ? (r.inclusive ? e.data < r.value : e.data <= r.value) &&
                  ((t = this._getOrReturnCtx(e, t)),
                  (0, l.addIssueToContext)(t, {
                    code: s.ZodIssueCode.too_small,
                    type: "bigint",
                    minimum: r.value,
                    inclusive: r.inclusive,
                    message: r.message,
                  }),
                  n.dirty())
                : "max" === r.kind
                  ? (r.inclusive ? e.data > r.value : e.data >= r.value) &&
                    ((t = this._getOrReturnCtx(e, t)),
                    (0, l.addIssueToContext)(t, {
                      code: s.ZodIssueCode.too_big,
                      type: "bigint",
                      maximum: r.value,
                      inclusive: r.inclusive,
                      message: r.message,
                    }),
                    n.dirty())
                  : "multipleOf" === r.kind
                    ? e.data % r.value !== BigInt(0) &&
                      ((t = this._getOrReturnCtx(e, t)),
                      (0, l.addIssueToContext)(t, {
                        code: s.ZodIssueCode.not_multiple_of,
                        multipleOf: r.value,
                        message: r.message,
                      }),
                      n.dirty())
                    : c.util.assertNever(r);
            return { status: n.value, value: e.data };
          }
          _getInvalidInput(e) {
            let t = this._getOrReturnCtx(e);
            return (
              (0, l.addIssueToContext)(t, {
                code: s.ZodIssueCode.invalid_type,
                expected: c.ZodParsedType.bigint,
                received: t.parsedType,
              }),
              l.INVALID
            );
          }
          gte(e, t) {
            return this.setLimit("min", e, !0, a.errorUtil.toString(t));
          }
          gt(e, t) {
            return this.setLimit("min", e, !1, a.errorUtil.toString(t));
          }
          lte(e, t) {
            return this.setLimit("max", e, !0, a.errorUtil.toString(t));
          }
          lt(e, t) {
            return this.setLimit("max", e, !1, a.errorUtil.toString(t));
          }
          setLimit(e, t, n, r) {
            return new R({
              ...this._def,
              checks: [
                ...this._def.checks,
                {
                  kind: e,
                  value: t,
                  inclusive: n,
                  message: a.errorUtil.toString(r),
                },
              ],
            });
          }
          _addCheck(e) {
            return new R({ ...this._def, checks: [...this._def.checks, e] });
          }
          positive(e) {
            return this._addCheck({
              kind: "min",
              value: BigInt(0),
              inclusive: !1,
              message: a.errorUtil.toString(e),
            });
          }
          negative(e) {
            return this._addCheck({
              kind: "max",
              value: BigInt(0),
              inclusive: !1,
              message: a.errorUtil.toString(e),
            });
          }
          nonpositive(e) {
            return this._addCheck({
              kind: "max",
              value: BigInt(0),
              inclusive: !0,
              message: a.errorUtil.toString(e),
            });
          }
          nonnegative(e) {
            return this._addCheck({
              kind: "min",
              value: BigInt(0),
              inclusive: !0,
              message: a.errorUtil.toString(e),
            });
          }
          multipleOf(e, t) {
            return this._addCheck({
              kind: "multipleOf",
              value: e,
              message: a.errorUtil.toString(t),
            });
          }
          get minValue() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxValue() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
        }
        (t.ZodBigInt = R),
          (R.create = (e) =>
            new R({
              checks: [],
              typeName: r.ZodBigInt,
              coerce: e?.coerce ?? !1,
              ...h(e),
            }));
        class M extends p {
          _parse(e) {
            if (
              (this._def.coerce && (e.data = !!e.data),
              this._getType(e) !== c.ZodParsedType.boolean)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.boolean,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            return (0, l.OK)(e.data);
          }
        }
        (t.ZodBoolean = M),
          (M.create = (e) =>
            new M({
              typeName: r.ZodBoolean,
              coerce: e?.coerce || !1,
              ...h(e),
            }));
        class L extends p {
          _parse(e) {
            let t;
            if (
              (this._def.coerce && (e.data = new Date(e.data)),
              this._getType(e) !== c.ZodParsedType.date)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.date,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            if (Number.isNaN(e.data.getTime())) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_date,
                }),
                l.INVALID
              );
            }
            let n = new l.ParseStatus();
            for (let r of this._def.checks)
              "min" === r.kind
                ? e.data.getTime() < r.value &&
                  ((t = this._getOrReturnCtx(e, t)),
                  (0, l.addIssueToContext)(t, {
                    code: s.ZodIssueCode.too_small,
                    message: r.message,
                    inclusive: !0,
                    exact: !1,
                    minimum: r.value,
                    type: "date",
                  }),
                  n.dirty())
                : "max" === r.kind
                  ? e.data.getTime() > r.value &&
                    ((t = this._getOrReturnCtx(e, t)),
                    (0, l.addIssueToContext)(t, {
                      code: s.ZodIssueCode.too_big,
                      message: r.message,
                      inclusive: !0,
                      exact: !1,
                      maximum: r.value,
                      type: "date",
                    }),
                    n.dirty())
                  : c.util.assertNever(r);
            return { status: n.value, value: new Date(e.data.getTime()) };
          }
          _addCheck(e) {
            return new L({ ...this._def, checks: [...this._def.checks, e] });
          }
          min(e, t) {
            return this._addCheck({
              kind: "min",
              value: e.getTime(),
              message: a.errorUtil.toString(t),
            });
          }
          max(e, t) {
            return this._addCheck({
              kind: "max",
              value: e.getTime(),
              message: a.errorUtil.toString(t),
            });
          }
          get minDate() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return null != e ? new Date(e) : null;
          }
          get maxDate() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return null != e ? new Date(e) : null;
          }
        }
        (t.ZodDate = L),
          (L.create = (e) =>
            new L({
              checks: [],
              coerce: e?.coerce || !1,
              typeName: r.ZodDate,
              ...h(e),
            }));
        class j extends p {
          _parse(e) {
            if (this._getType(e) !== c.ZodParsedType.symbol) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.symbol,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            return (0, l.OK)(e.data);
          }
        }
        (t.ZodSymbol = j),
          (j.create = (e) => new j({ typeName: r.ZodSymbol, ...h(e) }));
        class F extends p {
          _parse(e) {
            if (this._getType(e) !== c.ZodParsedType.undefined) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.undefined,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            return (0, l.OK)(e.data);
          }
        }
        (t.ZodUndefined = F),
          (F.create = (e) => new F({ typeName: r.ZodUndefined, ...h(e) }));
        class B extends p {
          _parse(e) {
            if (this._getType(e) !== c.ZodParsedType.null) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.null,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            return (0, l.OK)(e.data);
          }
        }
        (t.ZodNull = B),
          (B.create = (e) => new B({ typeName: r.ZodNull, ...h(e) }));
        class z extends p {
          constructor() {
            super(...arguments), (this._any = !0);
          }
          _parse(e) {
            return (0, l.OK)(e.data);
          }
        }
        (t.ZodAny = z),
          (z.create = (e) => new z({ typeName: r.ZodAny, ...h(e) }));
        class $ extends p {
          constructor() {
            super(...arguments), (this._unknown = !0);
          }
          _parse(e) {
            return (0, l.OK)(e.data);
          }
        }
        (t.ZodUnknown = $),
          ($.create = (e) => new $({ typeName: r.ZodUnknown, ...h(e) }));
        class q extends p {
          _parse(e) {
            let t = this._getOrReturnCtx(e);
            return (
              (0, l.addIssueToContext)(t, {
                code: s.ZodIssueCode.invalid_type,
                expected: c.ZodParsedType.never,
                received: t.parsedType,
              }),
              l.INVALID
            );
          }
        }
        (t.ZodNever = q),
          (q.create = (e) => new q({ typeName: r.ZodNever, ...h(e) }));
        class U extends p {
          _parse(e) {
            if (this._getType(e) !== c.ZodParsedType.undefined) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.void,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            return (0, l.OK)(e.data);
          }
        }
        (t.ZodVoid = U),
          (U.create = (e) => new U({ typeName: r.ZodVoid, ...h(e) }));
        class H extends p {
          _parse(e) {
            let { ctx: t, status: n } = this._processInputParams(e),
              r = this._def;
            if (t.parsedType !== c.ZodParsedType.array)
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.array,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            if (null !== r.exactLength) {
              let e = t.data.length > r.exactLength.value,
                i = t.data.length < r.exactLength.value;
              (e || i) &&
                ((0, l.addIssueToContext)(t, {
                  code: e ? s.ZodIssueCode.too_big : s.ZodIssueCode.too_small,
                  minimum: i ? r.exactLength.value : void 0,
                  maximum: e ? r.exactLength.value : void 0,
                  type: "array",
                  inclusive: !0,
                  exact: !0,
                  message: r.exactLength.message,
                }),
                n.dirty());
            }
            if (
              (null !== r.minLength &&
                t.data.length < r.minLength.value &&
                ((0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.too_small,
                  minimum: r.minLength.value,
                  type: "array",
                  inclusive: !0,
                  exact: !1,
                  message: r.minLength.message,
                }),
                n.dirty()),
              null !== r.maxLength &&
                t.data.length > r.maxLength.value &&
                ((0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.too_big,
                  maximum: r.maxLength.value,
                  type: "array",
                  inclusive: !0,
                  exact: !1,
                  message: r.maxLength.message,
                }),
                n.dirty()),
              t.common.async)
            )
              return Promise.all(
                [...t.data].map((e, n) =>
                  r.type._parseAsync(new u(t, e, t.path, n)),
                ),
              ).then((e) => l.ParseStatus.mergeArray(n, e));
            let i = [...t.data].map((e, n) =>
              r.type._parseSync(new u(t, e, t.path, n)),
            );
            return l.ParseStatus.mergeArray(n, i);
          }
          get element() {
            return this._def.type;
          }
          min(e, t) {
            return new H({
              ...this._def,
              minLength: { value: e, message: a.errorUtil.toString(t) },
            });
          }
          max(e, t) {
            return new H({
              ...this._def,
              maxLength: { value: e, message: a.errorUtil.toString(t) },
            });
          }
          length(e, t) {
            return new H({
              ...this._def,
              exactLength: { value: e, message: a.errorUtil.toString(t) },
            });
          }
          nonempty(e) {
            return this.min(1, e);
          }
        }
        (t.ZodArray = H),
          (H.create = (e, t) =>
            new H({
              type: e,
              minLength: null,
              maxLength: null,
              exactLength: null,
              typeName: r.ZodArray,
              ...h(t),
            }));
        class Q extends p {
          constructor() {
            super(...arguments),
              (this._cached = null),
              (this.nonstrict = this.passthrough),
              (this.augment = this.extend);
          }
          _getCached() {
            if (null !== this._cached) return this._cached;
            let e = this._def.shape(),
              t = c.util.objectKeys(e);
            return (this._cached = { shape: e, keys: t }), this._cached;
          }
          _parse(e) {
            if (this._getType(e) !== c.ZodParsedType.object) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.object,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            let { status: t, ctx: n } = this._processInputParams(e),
              { shape: r, keys: i } = this._getCached(),
              o = [];
            if (
              !(
                this._def.catchall instanceof q &&
                "strip" === this._def.unknownKeys
              )
            )
              for (let e in n.data) i.includes(e) || o.push(e);
            let a = [];
            for (let e of i) {
              let t = r[e],
                i = n.data[e];
              a.push({
                key: { status: "valid", value: e },
                value: t._parse(new u(n, i, n.path, e)),
                alwaysSet: e in n.data,
              });
            }
            if (this._def.catchall instanceof q) {
              let e = this._def.unknownKeys;
              if ("passthrough" === e)
                for (let e of o)
                  a.push({
                    key: { status: "valid", value: e },
                    value: { status: "valid", value: n.data[e] },
                  });
              else if ("strict" === e)
                o.length > 0 &&
                  ((0, l.addIssueToContext)(n, {
                    code: s.ZodIssueCode.unrecognized_keys,
                    keys: o,
                  }),
                  t.dirty());
              else if ("strip" === e);
              else
                throw Error(
                  "Internal ZodObject error: invalid unknownKeys value.",
                );
            } else {
              let e = this._def.catchall;
              for (let t of o) {
                let r = n.data[t];
                a.push({
                  key: { status: "valid", value: t },
                  value: e._parse(new u(n, r, n.path, t)),
                  alwaysSet: t in n.data,
                });
              }
            }
            return n.common.async
              ? Promise.resolve()
                  .then(async () => {
                    let e = [];
                    for (let t of a) {
                      let n = await t.key,
                        r = await t.value;
                      e.push({ key: n, value: r, alwaysSet: t.alwaysSet });
                    }
                    return e;
                  })
                  .then((e) => l.ParseStatus.mergeObjectSync(t, e))
              : l.ParseStatus.mergeObjectSync(t, a);
          }
          get shape() {
            return this._def.shape();
          }
          strict(e) {
            return (
              a.errorUtil.errToObj,
              new Q({
                ...this._def,
                unknownKeys: "strict",
                ...(void 0 !== e
                  ? {
                      errorMap: (t, n) => {
                        let r =
                          this._def.errorMap?.(t, n).message ?? n.defaultError;
                        return "unrecognized_keys" === t.code
                          ? { message: a.errorUtil.errToObj(e).message ?? r }
                          : { message: r };
                      },
                    }
                  : {}),
              })
            );
          }
          strip() {
            return new Q({ ...this._def, unknownKeys: "strip" });
          }
          passthrough() {
            return new Q({ ...this._def, unknownKeys: "passthrough" });
          }
          extend(e) {
            return new Q({
              ...this._def,
              shape: () => ({ ...this._def.shape(), ...e }),
            });
          }
          merge(e) {
            return new Q({
              unknownKeys: e._def.unknownKeys,
              catchall: e._def.catchall,
              shape: () => ({ ...this._def.shape(), ...e._def.shape() }),
              typeName: r.ZodObject,
            });
          }
          setKey(e, t) {
            return this.augment({ [e]: t });
          }
          catchall(e) {
            return new Q({ ...this._def, catchall: e });
          }
          pick(e) {
            let t = {};
            for (let n of c.util.objectKeys(e))
              e[n] && this.shape[n] && (t[n] = this.shape[n]);
            return new Q({ ...this._def, shape: () => t });
          }
          omit(e) {
            let t = {};
            for (let n of c.util.objectKeys(this.shape))
              e[n] || (t[n] = this.shape[n]);
            return new Q({ ...this._def, shape: () => t });
          }
          deepPartial() {
            return (function e(t) {
              if (t instanceof Q) {
                let n = {};
                for (let r in t.shape) {
                  let i = t.shape[r];
                  n[r] = el.create(e(i));
                }
                return new Q({ ...t._def, shape: () => n });
              }
              if (t instanceof H)
                return new H({ ...t._def, type: e(t.element) });
              if (t instanceof el) return el.create(e(t.unwrap()));
              if (t instanceof ec) return ec.create(e(t.unwrap()));
              if (t instanceof Y) return Y.create(t.items.map((t) => e(t)));
              else return t;
            })(this);
          }
          partial(e) {
            let t = {};
            for (let n of c.util.objectKeys(this.shape)) {
              let r = this.shape[n];
              e && !e[n] ? (t[n] = r) : (t[n] = r.optional());
            }
            return new Q({ ...this._def, shape: () => t });
          }
          required(e) {
            let t = {};
            for (let n of c.util.objectKeys(this.shape))
              if (e && !e[n]) t[n] = this.shape[n];
              else {
                let e = this.shape[n];
                for (; e instanceof el; ) e = e._def.innerType;
                t[n] = e;
              }
            return new Q({ ...this._def, shape: () => t });
          }
          keyof() {
            return er(c.util.objectKeys(this.shape));
          }
        }
        (t.ZodObject = Q),
          (Q.create = (e, t) =>
            new Q({
              shape: () => e,
              unknownKeys: "strip",
              catchall: q.create(),
              typeName: r.ZodObject,
              ...h(t),
            })),
          (Q.strictCreate = (e, t) =>
            new Q({
              shape: () => e,
              unknownKeys: "strict",
              catchall: q.create(),
              typeName: r.ZodObject,
              ...h(t),
            })),
          (Q.lazycreate = (e, t) =>
            new Q({
              shape: e,
              unknownKeys: "strip",
              catchall: q.create(),
              typeName: r.ZodObject,
              ...h(t),
            }));
        class V extends p {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = this._def.options;
            if (t.common.async)
              return Promise.all(
                n.map(async (e) => {
                  let n = {
                    ...t,
                    common: { ...t.common, issues: [] },
                    parent: null,
                  };
                  return {
                    result: await e._parseAsync({
                      data: t.data,
                      path: t.path,
                      parent: n,
                    }),
                    ctx: n,
                  };
                }),
              ).then(function (e) {
                for (let t of e)
                  if ("valid" === t.result.status) return t.result;
                for (let n of e)
                  if ("dirty" === n.result.status)
                    return (
                      t.common.issues.push(...n.ctx.common.issues), n.result
                    );
                let n = e.map((e) => new s.ZodError(e.ctx.common.issues));
                return (
                  (0, l.addIssueToContext)(t, {
                    code: s.ZodIssueCode.invalid_union,
                    unionErrors: n,
                  }),
                  l.INVALID
                );
              });
            {
              let e,
                r = [];
              for (let i of n) {
                let n = {
                    ...t,
                    common: { ...t.common, issues: [] },
                    parent: null,
                  },
                  s = i._parseSync({ data: t.data, path: t.path, parent: n });
                if ("valid" === s.status) return s;
                "dirty" !== s.status || e || (e = { result: s, ctx: n }),
                  n.common.issues.length && r.push(n.common.issues);
              }
              if (e)
                return t.common.issues.push(...e.ctx.common.issues), e.result;
              let i = r.map((e) => new s.ZodError(e));
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_union,
                  unionErrors: i,
                }),
                l.INVALID
              );
            }
          }
          get options() {
            return this._def.options;
          }
        }
        (t.ZodUnion = V),
          (V.create = (e, t) =>
            new V({ options: e, typeName: r.ZodUnion, ...h(t) }));
        let W = (e) => {
          if (e instanceof et) return W(e.schema);
          if (e instanceof ea) return W(e.innerType());
          if (e instanceof en) return [e.value];
          if (e instanceof ei) return e.options;
          if (e instanceof es) return c.util.objectValues(e.enum);
          else if (e instanceof eu) return W(e._def.innerType);
          else if (e instanceof F) return [void 0];
          else if (e instanceof B) return [null];
          else if (e instanceof el) return [void 0, ...W(e.unwrap())];
          else if (e instanceof ec) return [null, ...W(e.unwrap())];
          else if (e instanceof ep) return W(e.unwrap());
          else if (e instanceof em) return W(e.unwrap());
          else if (e instanceof ed) return W(e._def.innerType);
          else return [];
        };
        class Z extends p {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            if (t.parsedType !== c.ZodParsedType.object)
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.object,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            let n = this.discriminator,
              r = t.data[n],
              i = this.optionsMap.get(r);
            return i
              ? t.common.async
                ? i._parseAsync({ data: t.data, path: t.path, parent: t })
                : i._parseSync({ data: t.data, path: t.path, parent: t })
              : ((0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_union_discriminator,
                  options: Array.from(this.optionsMap.keys()),
                  path: [n],
                }),
                l.INVALID);
          }
          get discriminator() {
            return this._def.discriminator;
          }
          get options() {
            return this._def.options;
          }
          get optionsMap() {
            return this._def.optionsMap;
          }
          static create(e, t, n) {
            let i = new Map();
            for (let n of t) {
              let t = W(n.shape[e]);
              if (!t.length)
                throw Error(
                  `A discriminator value for key \`${e}\` could not be extracted from all schema options`,
                );
              for (let r of t) {
                if (i.has(r))
                  throw Error(
                    `Discriminator property ${String(e)} has duplicate value ${String(r)}`,
                  );
                i.set(r, n);
              }
            }
            return new Z({
              typeName: r.ZodDiscriminatedUnion,
              discriminator: e,
              options: t,
              optionsMap: i,
              ...h(n),
            });
          }
        }
        t.ZodDiscriminatedUnion = Z;
        class G extends p {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e),
              r = (e, r) => {
                if ((0, l.isAborted)(e) || (0, l.isAborted)(r))
                  return l.INVALID;
                let i = (function e(t, n) {
                  let r = (0, c.getParsedType)(t),
                    i = (0, c.getParsedType)(n);
                  if (t === n) return { valid: !0, data: t };
                  if (
                    r === c.ZodParsedType.object &&
                    i === c.ZodParsedType.object
                  ) {
                    let r = c.util.objectKeys(n),
                      i = c.util
                        .objectKeys(t)
                        .filter((e) => -1 !== r.indexOf(e)),
                      s = { ...t, ...n };
                    for (let r of i) {
                      let i = e(t[r], n[r]);
                      if (!i.valid) return { valid: !1 };
                      s[r] = i.data;
                    }
                    return { valid: !0, data: s };
                  }
                  if (
                    r === c.ZodParsedType.array &&
                    i === c.ZodParsedType.array
                  ) {
                    if (t.length !== n.length) return { valid: !1 };
                    let r = [];
                    for (let i = 0; i < t.length; i++) {
                      let s = e(t[i], n[i]);
                      if (!s.valid) return { valid: !1 };
                      r.push(s.data);
                    }
                    return { valid: !0, data: r };
                  }
                  if (
                    r === c.ZodParsedType.date &&
                    i === c.ZodParsedType.date &&
                    +t == +n
                  )
                    return { valid: !0, data: t };
                  return { valid: !1 };
                })(e.value, r.value);
                return i.valid
                  ? (((0, l.isDirty)(e) || (0, l.isDirty)(r)) && t.dirty(),
                    { status: t.value, value: i.data })
                  : ((0, l.addIssueToContext)(n, {
                      code: s.ZodIssueCode.invalid_intersection_types,
                    }),
                    l.INVALID);
              };
            return n.common.async
              ? Promise.all([
                  this._def.left._parseAsync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                  this._def.right._parseAsync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                ]).then(([e, t]) => r(e, t))
              : r(
                  this._def.left._parseSync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                  this._def.right._parseSync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                );
          }
        }
        (t.ZodIntersection = G),
          (G.create = (e, t, n) =>
            new G({ left: e, right: t, typeName: r.ZodIntersection, ...h(n) }));
        class Y extends p {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== c.ZodParsedType.array)
              return (
                (0, l.addIssueToContext)(n, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.array,
                  received: n.parsedType,
                }),
                l.INVALID
              );
            if (n.data.length < this._def.items.length)
              return (
                (0, l.addIssueToContext)(n, {
                  code: s.ZodIssueCode.too_small,
                  minimum: this._def.items.length,
                  inclusive: !0,
                  exact: !1,
                  type: "array",
                }),
                l.INVALID
              );
            !this._def.rest &&
              n.data.length > this._def.items.length &&
              ((0, l.addIssueToContext)(n, {
                code: s.ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: !0,
                exact: !1,
                type: "array",
              }),
              t.dirty());
            let r = [...n.data]
              .map((e, t) => {
                let r = this._def.items[t] || this._def.rest;
                return r ? r._parse(new u(n, e, n.path, t)) : null;
              })
              .filter((e) => !!e);
            return n.common.async
              ? Promise.all(r).then((e) => l.ParseStatus.mergeArray(t, e))
              : l.ParseStatus.mergeArray(t, r);
          }
          get items() {
            return this._def.items;
          }
          rest(e) {
            return new Y({ ...this._def, rest: e });
          }
        }
        (t.ZodTuple = Y),
          (Y.create = (e, t) => {
            if (!Array.isArray(e))
              throw Error(
                "You must pass an array of schemas to z.tuple([ ... ])",
              );
            return new Y({
              items: e,
              typeName: r.ZodTuple,
              rest: null,
              ...h(t),
            });
          });
        class K extends p {
          get keySchema() {
            return this._def.keyType;
          }
          get valueSchema() {
            return this._def.valueType;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== c.ZodParsedType.object)
              return (
                (0, l.addIssueToContext)(n, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.object,
                  received: n.parsedType,
                }),
                l.INVALID
              );
            let r = [],
              i = this._def.keyType,
              o = this._def.valueType;
            for (let e in n.data)
              r.push({
                key: i._parse(new u(n, e, n.path, e)),
                value: o._parse(new u(n, n.data[e], n.path, e)),
                alwaysSet: e in n.data,
              });
            return n.common.async
              ? l.ParseStatus.mergeObjectAsync(t, r)
              : l.ParseStatus.mergeObjectSync(t, r);
          }
          get element() {
            return this._def.valueType;
          }
          static create(e, t, n) {
            return new K(
              t instanceof p
                ? { keyType: e, valueType: t, typeName: r.ZodRecord, ...h(n) }
                : {
                    keyType: D.create(),
                    valueType: e,
                    typeName: r.ZodRecord,
                    ...h(t),
                  },
            );
          }
        }
        t.ZodRecord = K;
        class X extends p {
          get keySchema() {
            return this._def.keyType;
          }
          get valueSchema() {
            return this._def.valueType;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== c.ZodParsedType.map)
              return (
                (0, l.addIssueToContext)(n, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.map,
                  received: n.parsedType,
                }),
                l.INVALID
              );
            let r = this._def.keyType,
              i = this._def.valueType,
              o = [...n.data.entries()].map(([e, t], s) => ({
                key: r._parse(new u(n, e, n.path, [s, "key"])),
                value: i._parse(new u(n, t, n.path, [s, "value"])),
              }));
            if (n.common.async) {
              let e = new Map();
              return Promise.resolve().then(async () => {
                for (let n of o) {
                  let r = await n.key,
                    i = await n.value;
                  if ("aborted" === r.status || "aborted" === i.status)
                    return l.INVALID;
                  ("dirty" === r.status || "dirty" === i.status) && t.dirty(),
                    e.set(r.value, i.value);
                }
                return { status: t.value, value: e };
              });
            }
            {
              let e = new Map();
              for (let n of o) {
                let r = n.key,
                  i = n.value;
                if ("aborted" === r.status || "aborted" === i.status)
                  return l.INVALID;
                ("dirty" === r.status || "dirty" === i.status) && t.dirty(),
                  e.set(r.value, i.value);
              }
              return { status: t.value, value: e };
            }
          }
        }
        (t.ZodMap = X),
          (X.create = (e, t, n) =>
            new X({ valueType: t, keyType: e, typeName: r.ZodMap, ...h(n) }));
        class J extends p {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== c.ZodParsedType.set)
              return (
                (0, l.addIssueToContext)(n, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.set,
                  received: n.parsedType,
                }),
                l.INVALID
              );
            let r = this._def;
            null !== r.minSize &&
              n.data.size < r.minSize.value &&
              ((0, l.addIssueToContext)(n, {
                code: s.ZodIssueCode.too_small,
                minimum: r.minSize.value,
                type: "set",
                inclusive: !0,
                exact: !1,
                message: r.minSize.message,
              }),
              t.dirty()),
              null !== r.maxSize &&
                n.data.size > r.maxSize.value &&
                ((0, l.addIssueToContext)(n, {
                  code: s.ZodIssueCode.too_big,
                  maximum: r.maxSize.value,
                  type: "set",
                  inclusive: !0,
                  exact: !1,
                  message: r.maxSize.message,
                }),
                t.dirty());
            let i = this._def.valueType;
            function o(e) {
              let n = new Set();
              for (let r of e) {
                if ("aborted" === r.status) return l.INVALID;
                "dirty" === r.status && t.dirty(), n.add(r.value);
              }
              return { status: t.value, value: n };
            }
            let a = [...n.data.values()].map((e, t) =>
              i._parse(new u(n, e, n.path, t)),
            );
            return n.common.async ? Promise.all(a).then((e) => o(e)) : o(a);
          }
          min(e, t) {
            return new J({
              ...this._def,
              minSize: { value: e, message: a.errorUtil.toString(t) },
            });
          }
          max(e, t) {
            return new J({
              ...this._def,
              maxSize: { value: e, message: a.errorUtil.toString(t) },
            });
          }
          size(e, t) {
            return this.min(e, t).max(e, t);
          }
          nonempty(e) {
            return this.min(1, e);
          }
        }
        (t.ZodSet = J),
          (J.create = (e, t) =>
            new J({
              valueType: e,
              minSize: null,
              maxSize: null,
              typeName: r.ZodSet,
              ...h(t),
            }));
        class ee extends p {
          constructor() {
            super(...arguments), (this.validate = this.implement);
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            if (t.parsedType !== c.ZodParsedType.function)
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.function,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            function n(e, n) {
              return (0, l.makeIssue)({
                data: e,
                path: t.path,
                errorMaps: [
                  t.common.contextualErrorMap,
                  t.schemaErrorMap,
                  (0, o.getErrorMap)(),
                  o.defaultErrorMap,
                ].filter((e) => !!e),
                issueData: {
                  code: s.ZodIssueCode.invalid_arguments,
                  argumentsError: n,
                },
              });
            }
            function r(e, n) {
              return (0, l.makeIssue)({
                data: e,
                path: t.path,
                errorMaps: [
                  t.common.contextualErrorMap,
                  t.schemaErrorMap,
                  (0, o.getErrorMap)(),
                  o.defaultErrorMap,
                ].filter((e) => !!e),
                issueData: {
                  code: s.ZodIssueCode.invalid_return_type,
                  returnTypeError: n,
                },
              });
            }
            let i = { errorMap: t.common.contextualErrorMap },
              a = t.data;
            if (this._def.returns instanceof eo) {
              let e = this;
              return (0, l.OK)(async function (...t) {
                let o = new s.ZodError([]),
                  l = await e._def.args.parseAsync(t, i).catch((e) => {
                    throw (o.addIssue(n(t, e)), o);
                  }),
                  c = await Reflect.apply(a, this, l);
                return await e._def.returns._def.type
                  .parseAsync(c, i)
                  .catch((e) => {
                    throw (o.addIssue(r(c, e)), o);
                  });
              });
            }
            {
              let e = this;
              return (0, l.OK)(function (...t) {
                let o = e._def.args.safeParse(t, i);
                if (!o.success) throw new s.ZodError([n(t, o.error)]);
                let l = Reflect.apply(a, this, o.data),
                  c = e._def.returns.safeParse(l, i);
                if (!c.success) throw new s.ZodError([r(l, c.error)]);
                return c.data;
              });
            }
          }
          parameters() {
            return this._def.args;
          }
          returnType() {
            return this._def.returns;
          }
          args(...e) {
            return new ee({ ...this._def, args: Y.create(e).rest($.create()) });
          }
          returns(e) {
            return new ee({ ...this._def, returns: e });
          }
          implement(e) {
            return this.parse(e);
          }
          strictImplement(e) {
            return this.parse(e);
          }
          static create(e, t, n) {
            return new ee({
              args: e || Y.create([]).rest($.create()),
              returns: t || $.create(),
              typeName: r.ZodFunction,
              ...h(n),
            });
          }
        }
        t.ZodFunction = ee;
        class et extends p {
          get schema() {
            return this._def.getter();
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            return this._def
              .getter()
              ._parse({ data: t.data, path: t.path, parent: t });
          }
        }
        (t.ZodLazy = et),
          (et.create = (e, t) =>
            new et({ getter: e, typeName: r.ZodLazy, ...h(t) }));
        class en extends p {
          _parse(e) {
            if (e.data !== this._def.value) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  received: t.data,
                  code: s.ZodIssueCode.invalid_literal,
                  expected: this._def.value,
                }),
                l.INVALID
              );
            }
            return { status: "valid", value: e.data };
          }
          get value() {
            return this._def.value;
          }
        }
        function er(e, t) {
          return new ei({ values: e, typeName: r.ZodEnum, ...h(t) });
        }
        (t.ZodLiteral = en),
          (en.create = (e, t) =>
            new en({ value: e, typeName: r.ZodLiteral, ...h(t) }));
        class ei extends p {
          _parse(e) {
            if ("string" != typeof e.data) {
              let t = this._getOrReturnCtx(e),
                n = this._def.values;
              return (
                (0, l.addIssueToContext)(t, {
                  expected: c.util.joinValues(n),
                  received: t.parsedType,
                  code: s.ZodIssueCode.invalid_type,
                }),
                l.INVALID
              );
            }
            if (
              (this._cache || (this._cache = new Set(this._def.values)),
              !this._cache.has(e.data))
            ) {
              let t = this._getOrReturnCtx(e),
                n = this._def.values;
              return (
                (0, l.addIssueToContext)(t, {
                  received: t.data,
                  code: s.ZodIssueCode.invalid_enum_value,
                  options: n,
                }),
                l.INVALID
              );
            }
            return (0, l.OK)(e.data);
          }
          get options() {
            return this._def.values;
          }
          get enum() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          get Values() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          get Enum() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          extract(e, t = this._def) {
            return ei.create(e, { ...this._def, ...t });
          }
          exclude(e, t = this._def) {
            return ei.create(
              this.options.filter((t) => !e.includes(t)),
              { ...this._def, ...t },
            );
          }
        }
        (t.ZodEnum = ei), (ei.create = er);
        class es extends p {
          _parse(e) {
            let t = c.util.getValidEnumValues(this._def.values),
              n = this._getOrReturnCtx(e);
            if (
              n.parsedType !== c.ZodParsedType.string &&
              n.parsedType !== c.ZodParsedType.number
            ) {
              let e = c.util.objectValues(t);
              return (
                (0, l.addIssueToContext)(n, {
                  expected: c.util.joinValues(e),
                  received: n.parsedType,
                  code: s.ZodIssueCode.invalid_type,
                }),
                l.INVALID
              );
            }
            if (
              (this._cache ||
                (this._cache = new Set(
                  c.util.getValidEnumValues(this._def.values),
                )),
              !this._cache.has(e.data))
            ) {
              let e = c.util.objectValues(t);
              return (
                (0, l.addIssueToContext)(n, {
                  received: n.data,
                  code: s.ZodIssueCode.invalid_enum_value,
                  options: e,
                }),
                l.INVALID
              );
            }
            return (0, l.OK)(e.data);
          }
          get enum() {
            return this._def.values;
          }
        }
        (t.ZodNativeEnum = es),
          (es.create = (e, t) =>
            new es({ values: e, typeName: r.ZodNativeEnum, ...h(t) }));
        class eo extends p {
          unwrap() {
            return this._def.type;
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            if (
              t.parsedType !== c.ZodParsedType.promise &&
              !1 === t.common.async
            )
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.promise,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            let n =
              t.parsedType === c.ZodParsedType.promise
                ? t.data
                : Promise.resolve(t.data);
            return (0, l.OK)(
              n.then((e) =>
                this._def.type.parseAsync(e, {
                  path: t.path,
                  errorMap: t.common.contextualErrorMap,
                }),
              ),
            );
          }
        }
        (t.ZodPromise = eo),
          (eo.create = (e, t) =>
            new eo({ type: e, typeName: r.ZodPromise, ...h(t) }));
        class ea extends p {
          innerType() {
            return this._def.schema;
          }
          sourceType() {
            return this._def.schema._def.typeName === r.ZodEffects
              ? this._def.schema.sourceType()
              : this._def.schema;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e),
              r = this._def.effect || null,
              i = {
                addIssue: (e) => {
                  (0, l.addIssueToContext)(n, e),
                    e.fatal ? t.abort() : t.dirty();
                },
                get path() {
                  return n.path;
                },
              };
            if (((i.addIssue = i.addIssue.bind(i)), "preprocess" === r.type)) {
              let e = r.transform(n.data, i);
              if (n.common.async)
                return Promise.resolve(e).then(async (e) => {
                  if ("aborted" === t.value) return l.INVALID;
                  let r = await this._def.schema._parseAsync({
                    data: e,
                    path: n.path,
                    parent: n,
                  });
                  return "aborted" === r.status
                    ? l.INVALID
                    : "dirty" === r.status || "dirty" === t.value
                      ? (0, l.DIRTY)(r.value)
                      : r;
                });
              {
                if ("aborted" === t.value) return l.INVALID;
                let r = this._def.schema._parseSync({
                  data: e,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === r.status
                  ? l.INVALID
                  : "dirty" === r.status || "dirty" === t.value
                    ? (0, l.DIRTY)(r.value)
                    : r;
              }
            }
            if ("refinement" === r.type) {
              let e = (e) => {
                let t = r.refinement(e, i);
                if (n.common.async) return Promise.resolve(t);
                if (t instanceof Promise)
                  throw Error(
                    "Async refinement encountered during synchronous parse operation. Use .parseAsync instead.",
                  );
                return e;
              };
              if (!1 !== n.common.async)
                return this._def.schema
                  ._parseAsync({ data: n.data, path: n.path, parent: n })
                  .then((n) =>
                    "aborted" === n.status
                      ? l.INVALID
                      : ("dirty" === n.status && t.dirty(),
                        e(n.value).then(() => ({
                          status: t.value,
                          value: n.value,
                        }))),
                  );
              {
                let r = this._def.schema._parseSync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === r.status
                  ? l.INVALID
                  : ("dirty" === r.status && t.dirty(),
                    e(r.value),
                    { status: t.value, value: r.value });
              }
            }
            if ("transform" === r.type)
              if (!1 !== n.common.async)
                return this._def.schema
                  ._parseAsync({ data: n.data, path: n.path, parent: n })
                  .then((e) =>
                    (0, l.isValid)(e)
                      ? Promise.resolve(r.transform(e.value, i)).then((e) => ({
                          status: t.value,
                          value: e,
                        }))
                      : l.INVALID,
                  );
              else {
                let e = this._def.schema._parseSync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                if (!(0, l.isValid)(e)) return l.INVALID;
                let s = r.transform(e.value, i);
                if (s instanceof Promise)
                  throw Error(
                    "Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.",
                  );
                return { status: t.value, value: s };
              }
            c.util.assertNever(r);
          }
        }
        (t.ZodEffects = ea),
          (t.ZodTransformer = ea),
          (ea.create = (e, t, n) =>
            new ea({ schema: e, typeName: r.ZodEffects, effect: t, ...h(n) })),
          (ea.createWithPreprocess = (e, t, n) =>
            new ea({
              schema: t,
              effect: { type: "preprocess", transform: e },
              typeName: r.ZodEffects,
              ...h(n),
            }));
        class el extends p {
          _parse(e) {
            return this._getType(e) === c.ZodParsedType.undefined
              ? (0, l.OK)(void 0)
              : this._def.innerType._parse(e);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        (t.ZodOptional = el),
          (el.create = (e, t) =>
            new el({ innerType: e, typeName: r.ZodOptional, ...h(t) }));
        class ec extends p {
          _parse(e) {
            return this._getType(e) === c.ZodParsedType.null
              ? (0, l.OK)(null)
              : this._def.innerType._parse(e);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        (t.ZodNullable = ec),
          (ec.create = (e, t) =>
            new ec({ innerType: e, typeName: r.ZodNullable, ...h(t) }));
        class eu extends p {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = t.data;
            return (
              t.parsedType === c.ZodParsedType.undefined &&
                (n = this._def.defaultValue()),
              this._def.innerType._parse({ data: n, path: t.path, parent: t })
            );
          }
          removeDefault() {
            return this._def.innerType;
          }
        }
        (t.ZodDefault = eu),
          (eu.create = (e, t) =>
            new eu({
              innerType: e,
              typeName: r.ZodDefault,
              defaultValue:
                "function" == typeof t.default ? t.default : () => t.default,
              ...h(t),
            }));
        class ed extends p {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = { ...t, common: { ...t.common, issues: [] } },
              r = this._def.innerType._parse({
                data: n.data,
                path: n.path,
                parent: { ...n },
              });
            return (0, l.isAsync)(r)
              ? r.then((e) => ({
                  status: "valid",
                  value:
                    "valid" === e.status
                      ? e.value
                      : this._def.catchValue({
                          get error() {
                            return new s.ZodError(n.common.issues);
                          },
                          input: n.data,
                        }),
                }))
              : {
                  status: "valid",
                  value:
                    "valid" === r.status
                      ? r.value
                      : this._def.catchValue({
                          get error() {
                            return new s.ZodError(n.common.issues);
                          },
                          input: n.data,
                        }),
                };
          }
          removeCatch() {
            return this._def.innerType;
          }
        }
        (t.ZodCatch = ed),
          (ed.create = (e, t) =>
            new ed({
              innerType: e,
              typeName: r.ZodCatch,
              catchValue:
                "function" == typeof t.catch ? t.catch : () => t.catch,
              ...h(t),
            }));
        class eh extends p {
          _parse(e) {
            if (this._getType(e) !== c.ZodParsedType.nan) {
              let t = this._getOrReturnCtx(e);
              return (
                (0, l.addIssueToContext)(t, {
                  code: s.ZodIssueCode.invalid_type,
                  expected: c.ZodParsedType.nan,
                  received: t.parsedType,
                }),
                l.INVALID
              );
            }
            return { status: "valid", value: e.data };
          }
        }
        (t.ZodNaN = eh),
          (eh.create = (e) => new eh({ typeName: r.ZodNaN, ...h(e) })),
          (t.BRAND = Symbol("zod_brand"));
        class ep extends p {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = t.data;
            return this._def.type._parse({ data: n, path: t.path, parent: t });
          }
          unwrap() {
            return this._def.type;
          }
        }
        t.ZodBranded = ep;
        class ef extends p {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.common.async)
              return (async () => {
                let e = await this._def.in._parseAsync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === e.status
                  ? l.INVALID
                  : "dirty" === e.status
                    ? (t.dirty(), (0, l.DIRTY)(e.value))
                    : this._def.out._parseAsync({
                        data: e.value,
                        path: n.path,
                        parent: n,
                      });
              })();
            {
              let e = this._def.in._parseSync({
                data: n.data,
                path: n.path,
                parent: n,
              });
              return "aborted" === e.status
                ? l.INVALID
                : "dirty" === e.status
                  ? (t.dirty(), { status: "dirty", value: e.value })
                  : this._def.out._parseSync({
                      data: e.value,
                      path: n.path,
                      parent: n,
                    });
            }
          }
          static create(e, t) {
            return new ef({ in: e, out: t, typeName: r.ZodPipeline });
          }
        }
        t.ZodPipeline = ef;
        class em extends p {
          _parse(e) {
            let t = this._def.innerType._parse(e),
              n = (e) => (
                (0, l.isValid)(e) && (e.value = Object.freeze(e.value)), e
              );
            return (0, l.isAsync)(t) ? t.then((e) => n(e)) : n(t);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        function eg(e, t) {
          let n =
            "function" == typeof e
              ? e(t)
              : "string" == typeof e
                ? { message: e }
                : e;
          return "string" == typeof n ? { message: n } : n;
        }
        function ey(e, t = {}, n) {
          return e
            ? z.create().superRefine((r, i) => {
                let s = e(r);
                if (s instanceof Promise)
                  return s.then((e) => {
                    if (!e) {
                      let e = eg(t, r),
                        s = e.fatal ?? n ?? !0;
                      i.addIssue({ code: "custom", ...e, fatal: s });
                    }
                  });
                if (!s) {
                  let e = eg(t, r),
                    s = e.fatal ?? n ?? !0;
                  i.addIssue({ code: "custom", ...e, fatal: s });
                }
              })
            : z.create();
        }
        (t.ZodReadonly = em),
          (em.create = (e, t) =>
            new em({ innerType: e, typeName: r.ZodReadonly, ...h(t) })),
          (t.late = { object: Q.lazycreate }),
          (function (e) {
            (e.ZodString = "ZodString"),
              (e.ZodNumber = "ZodNumber"),
              (e.ZodNaN = "ZodNaN"),
              (e.ZodBigInt = "ZodBigInt"),
              (e.ZodBoolean = "ZodBoolean"),
              (e.ZodDate = "ZodDate"),
              (e.ZodSymbol = "ZodSymbol"),
              (e.ZodUndefined = "ZodUndefined"),
              (e.ZodNull = "ZodNull"),
              (e.ZodAny = "ZodAny"),
              (e.ZodUnknown = "ZodUnknown"),
              (e.ZodNever = "ZodNever"),
              (e.ZodVoid = "ZodVoid"),
              (e.ZodArray = "ZodArray"),
              (e.ZodObject = "ZodObject"),
              (e.ZodUnion = "ZodUnion"),
              (e.ZodDiscriminatedUnion = "ZodDiscriminatedUnion"),
              (e.ZodIntersection = "ZodIntersection"),
              (e.ZodTuple = "ZodTuple"),
              (e.ZodRecord = "ZodRecord"),
              (e.ZodMap = "ZodMap"),
              (e.ZodSet = "ZodSet"),
              (e.ZodFunction = "ZodFunction"),
              (e.ZodLazy = "ZodLazy"),
              (e.ZodLiteral = "ZodLiteral"),
              (e.ZodEnum = "ZodEnum"),
              (e.ZodEffects = "ZodEffects"),
              (e.ZodNativeEnum = "ZodNativeEnum"),
              (e.ZodOptional = "ZodOptional"),
              (e.ZodNullable = "ZodNullable"),
              (e.ZodDefault = "ZodDefault"),
              (e.ZodCatch = "ZodCatch"),
              (e.ZodPromise = "ZodPromise"),
              (e.ZodBranded = "ZodBranded"),
              (e.ZodPipeline = "ZodPipeline"),
              (e.ZodReadonly = "ZodReadonly");
          })(r || (t.ZodFirstPartyTypeKind = r = {})),
          (t.instanceof = (
            e,
            t = { message: `Input not instance of ${e.name}` },
          ) => ey((t) => t instanceof e, t));
        let ev = D.create;
        t.string = ev;
        let eb = P.create;
        (t.number = eb), (t.nan = eh.create), (t.bigint = R.create);
        let ex = M.create;
        (t.boolean = ex),
          (t.date = L.create),
          (t.symbol = j.create),
          (t.undefined = F.create),
          (t.null = B.create),
          (t.any = z.create),
          (t.unknown = $.create),
          (t.never = q.create),
          (t.void = U.create),
          (t.array = H.create),
          (t.object = Q.create),
          (t.strictObject = Q.strictCreate),
          (t.union = V.create),
          (t.discriminatedUnion = Z.create),
          (t.intersection = G.create),
          (t.tuple = Y.create),
          (t.record = K.create),
          (t.map = X.create),
          (t.set = J.create),
          (t.function = ee.create),
          (t.lazy = et.create),
          (t.literal = en.create),
          (t.enum = ei.create),
          (t.nativeEnum = es.create),
          (t.promise = eo.create);
        let ek = ea.create;
        (t.effect = ek),
          (t.transformer = ek),
          (t.optional = el.create),
          (t.nullable = ec.create),
          (t.preprocess = ea.createWithPreprocess),
          (t.pipeline = ef.create),
          (t.ostring = () => ev().optional()),
          (t.onumber = () => eb().optional()),
          (t.oboolean = () => ex().optional()),
          (t.coerce = {
            string: (e) => D.create({ ...e, coerce: !0 }),
            number: (e) => P.create({ ...e, coerce: !0 }),
            boolean: (e) => M.create({ ...e, coerce: !0 }),
            bigint: (e) => R.create({ ...e, coerce: !0 }),
            date: (e) => L.create({ ...e, coerce: !0 }),
          }),
          (t.NEVER = l.INVALID);
      },
      67712: (e, t, n) => {
        "use strict";
        n.d(t, { hv: () => o, ie: () => s });
        var r = n(92858),
          i = n(8325);
        function s(...e) {
          return e[0].columns ? new o(e[0].columns, e[0].name) : new o(e);
        }
        class o {
          static [r.i] = "PgPrimaryKeyBuilder";
          columns;
          name;
          constructor(e, t) {
            (this.columns = e), (this.name = t);
          }
          build(e) {
            return new a(e, this.columns, this.name);
          }
        }
        class a {
          constructor(e, t, n) {
            (this.table = e), (this.columns = t), (this.name = n);
          }
          static [r.i] = "PgPrimaryKey";
          columns;
          name;
          getName() {
            return (
              this.name ??
              `${this.table[i.mu.Symbol.Name]}_${this.columns.map((e) => e.name).join("_")}_pk`
            );
          }
        }
      },
      68098: (e, t, n) => {
        "use strict";
        n.d(t, {
          Ch: () => er,
          Di: () => I,
          Kq: () => W,
          M3: () => M,
          Tt: () => S,
          b8: () => eh,
          eM: () => J,
          hL: () => w,
          iM: () => el,
          u6: () => U,
          xn: () => B,
        });
        var r,
          i,
          s,
          o,
          a,
          l,
          c,
          u,
          d,
          h,
          p,
          f,
          m = "vercel.ai.error",
          g = Symbol.for(m),
          y = class e extends Error {
            constructor({ name: e, message: t, cause: n }) {
              super(t), (this[r] = !0), (this.name = e), (this.cause = n);
            }
            static isInstance(t) {
              return e.hasMarker(t, m);
            }
            static hasMarker(e, t) {
              let n = Symbol.for(t);
              return (
                null != e &&
                "object" == typeof e &&
                n in e &&
                "boolean" == typeof e[n] &&
                !0 === e[n]
              );
            }
          };
        r = g;
        var v = y,
          b = "AI_APICallError",
          x = `vercel.ai.error.${b}`,
          k = Symbol.for(x),
          w = class extends v {
            constructor({
              message: e,
              url: t,
              requestBodyValues: n,
              statusCode: r,
              responseHeaders: s,
              responseBody: o,
              cause: a,
              isRetryable: l = null != r &&
                (408 === r || 409 === r || 429 === r || r >= 500),
              data: c,
            }) {
              super({ name: b, message: e, cause: a }),
                (this[i] = !0),
                (this.url = t),
                (this.requestBodyValues = n),
                (this.statusCode = r),
                (this.responseHeaders = s),
                (this.responseBody = o),
                (this.isRetryable = l),
                (this.data = c);
            }
            static isInstance(e) {
              return v.hasMarker(e, x);
            }
          };
        i = k;
        var _ = "AI_EmptyResponseBodyError",
          O = `vercel.ai.error.${_}`,
          T = Symbol.for(O),
          S = class extends v {
            constructor({ message: e = "Empty response body" } = {}) {
              super({ name: _, message: e }), (this[s] = !0);
            }
            static isInstance(e) {
              return v.hasMarker(e, O);
            }
          };
        function E(e) {
          return null == e
            ? "unknown error"
            : "string" == typeof e
              ? e
              : e instanceof Error
                ? e.message
                : JSON.stringify(e);
        }
        s = T;
        var C = "AI_InvalidArgumentError",
          A = `vercel.ai.error.${C}`,
          N = Symbol.for(A),
          I = class extends v {
            constructor({ message: e, cause: t, argument: n }) {
              super({ name: C, message: e, cause: t }),
                (this[o] = !0),
                (this.argument = n);
            }
            static isInstance(e) {
              return v.hasMarker(e, A);
            }
          };
        o = N;
        var D = "AI_InvalidPromptError",
          P = `vercel.ai.error.${D}`,
          R = Symbol.for(P),
          M = class extends v {
            constructor({ prompt: e, message: t, cause: n }) {
              super({ name: D, message: `Invalid prompt: ${t}`, cause: n }),
                (this[a] = !0),
                (this.prompt = e);
            }
            static isInstance(e) {
              return v.hasMarker(e, P);
            }
          };
        a = R;
        var L = "AI_InvalidResponseDataError",
          j = `vercel.ai.error.${L}`,
          F = Symbol.for(j),
          B = class extends v {
            constructor({
              data: e,
              message: t = `Invalid response data: ${JSON.stringify(e)}.`,
            }) {
              super({ name: L, message: t }), (this[l] = !0), (this.data = e);
            }
            static isInstance(e) {
              return v.hasMarker(e, j);
            }
          };
        l = F;
        var z = "AI_JSONParseError",
          $ = `vercel.ai.error.${z}`,
          q = Symbol.for($),
          U = class extends v {
            constructor({ text: e, cause: t }) {
              super({
                name: z,
                message: `JSON parsing failed: Text: ${e}.
Error message: ${E(t)}`,
                cause: t,
              }),
                (this[c] = !0),
                (this.text = e);
            }
            static isInstance(e) {
              return v.hasMarker(e, $);
            }
          };
        c = q;
        var H = "AI_LoadAPIKeyError",
          Q = `vercel.ai.error.${H}`,
          V = Symbol.for(Q),
          W = class extends v {
            constructor({ message: e }) {
              super({ name: H, message: e }), (this[u] = !0);
            }
            static isInstance(e) {
              return v.hasMarker(e, Q);
            }
          };
        u = V;
        var Z = Symbol.for("vercel.ai.error.AI_LoadSettingError"),
          G = Symbol.for("vercel.ai.error.AI_NoContentGeneratedError"),
          Y = "AI_NoSuchModelError",
          K = `vercel.ai.error.${Y}`,
          X = Symbol.for(K),
          J = class extends v {
            constructor({
              errorName: e = Y,
              modelId: t,
              modelType: n,
              message: r = `No such ${n}: ${t}`,
            }) {
              super({ name: e, message: r }),
                (this[d] = !0),
                (this.modelId = t),
                (this.modelType = n);
            }
            static isInstance(e) {
              return v.hasMarker(e, K);
            }
          };
        d = X;
        var ee = "AI_TooManyEmbeddingValuesForCallError",
          et = `vercel.ai.error.${ee}`,
          en = Symbol.for(et),
          er = class extends v {
            constructor(e) {
              super({
                name: ee,
                message: `Too many values for a single embedding call. The ${e.provider} model "${e.modelId}" can only embed up to ${e.maxEmbeddingsPerCall} values per call, but ${e.values.length} values were provided.`,
              }),
                (this[h] = !0),
                (this.provider = e.provider),
                (this.modelId = e.modelId),
                (this.maxEmbeddingsPerCall = e.maxEmbeddingsPerCall),
                (this.values = e.values);
            }
            static isInstance(e) {
              return v.hasMarker(e, et);
            }
          };
        h = en;
        var ei = "AI_TypeValidationError",
          es = `vercel.ai.error.${ei}`,
          eo = Symbol.for(es),
          ea = class e extends v {
            constructor({ value: e, cause: t }) {
              super({
                name: ei,
                message: `Type validation failed: Value: ${JSON.stringify(e)}.
Error message: ${E(t)}`,
                cause: t,
              }),
                (this[p] = !0),
                (this.value = e);
            }
            static isInstance(e) {
              return v.hasMarker(e, es);
            }
            static wrap({ value: t, cause: n }) {
              return e.isInstance(n) && n.value === t
                ? n
                : new e({ value: t, cause: n });
            }
          };
        p = eo;
        var el = ea,
          ec = "AI_UnsupportedFunctionalityError",
          eu = `vercel.ai.error.${ec}`,
          ed = Symbol.for(eu),
          eh = class extends v {
            constructor({
              functionality: e,
              message: t = `'${e}' functionality not supported.`,
            }) {
              super({ name: ec, message: t }),
                (this[f] = !0),
                (this.functionality = e);
            }
            static isInstance(e) {
              return v.hasMarker(e, eu);
            }
          };
        function ep(e) {
          return (
            null === e ||
            "string" == typeof e ||
            "number" == typeof e ||
            "boolean" == typeof e ||
            (Array.isArray(e)
              ? e.every(ep)
              : "object" == typeof e &&
                Object.entries(e).every(
                  ([e, t]) => "string" == typeof e && ep(t),
                ))
          );
        }
        f = ed;
      },
      68426: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { O: () => l });
            var i = n(61268);
            n(84205);
            var s = n(5451),
              o = n(66321),
              a = e([s, o]);
            [s, o] = a.then ? (await a)() : a;
            let l = ({ artifact: e }) => {
              let t = e.content || { columns: [], rows: [] },
                n = t.columns || [],
                r = t.rows || [];
              return (0, i.jsxs)(s.Zp, {
                className: "h-full flex flex-col",
                children: [
                  (0, i.jsx)(s.aR, {
                    children: (0, i.jsx)(s.ZB, {
                      children: e.title || "Data Sheet",
                    }),
                  }),
                  (0, i.jsx)(s.Wu, {
                    className: "flex-1 overflow-auto",
                    children:
                      n.length > 0
                        ? (0, i.jsxs)(o.XI, {
                            children: [
                              (0, i.jsx)(o.A0, {
                                children: (0, i.jsx)(o.Hj, {
                                  children: n.map((e, t) =>
                                    (0, i.jsx)(
                                      o.nd,
                                      { children: e },
                                      `header-${t}`,
                                    ),
                                  ),
                                }),
                              }),
                              (0, i.jsx)(o.BF, {
                                children: r.map((e, t) =>
                                  (0, i.jsx)(
                                    o.Hj,
                                    {
                                      children: n.map((n, r) =>
                                        (0, i.jsx)(
                                          o.nA,
                                          { children: String(e[n] ?? "") },
                                          `cell-${t}-${r}`,
                                        ),
                                      ),
                                    },
                                    `row-${t}`,
                                  ),
                                ),
                              }),
                              0 === r.length &&
                                "streaming" !== e.status &&
                                (0, i.jsx)(o.r6, {
                                  children: "No data rows available.",
                                }),
                              "streaming" === e.status &&
                                (0, i.jsx)(o.r6, {
                                  children: "Streaming data...",
                                }),
                            ],
                          })
                        : (0, i.jsx)("p", {
                            className: "text-sm text-muted-foreground p-4",
                            children:
                              "streaming" === e.status
                                ? "Waiting for sheet data..."
                                : "No sheet data available.",
                          }),
                  }),
                ],
              });
            };
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      69127: (e, t, n) => {
        "use strict";
        n.d(t, { I: () => l });
        var r = n(84205),
          i = n(16235),
          s = n(17407),
          o = n(23708);
        let a = (0, o.createServerReference)(
          "40735dc6111b525c561108795f1f8685d756e21bff",
          o.callServer,
          void 0,
          o.findSourceMapURL,
          "updateChatVisibility",
        );
        function l({ chatId: e, initialVisibility: t }) {
          let { mutate: n, cache: o } = (0, i.iX)(),
            l = o.get("/api/history")?.data,
            { data: c, mutate: u } = (0, s.Ay)(`${e}-visibility`, null, {
              fallbackData: t,
            });
          return {
            visibilityType: (0, r.useMemo)(() => {
              if (!l) return c;
              let t = l.find((t) => t.id === e);
              return t ? t.visibility : "private";
            }, [l, e, c]),
            setVisibilityType: (t) => {
              u(t),
                n(
                  "/api/history",
                  (n) =>
                    n
                      ? n.map((n) => (n.id === e ? { ...n, visibility: t } : n))
                      : [],
                  { revalidate: !1 },
                ),
                a({ chatId: e, visibility: t });
            },
          };
        }
      },
      69409: (e, t, n) => {
        "use strict";
        n.d(t, { WX: () => eH });
        var r,
          i = n(64105),
          s = n(34088);
        let o =
            "undefined" != typeof navigator &&
            /Mac|iP(hone|[oa]d)/.test(navigator.platform),
          a = "undefined" != typeof navigator && /Win/.test(navigator.platform);
        function l(e, t, n = !0) {
          return (
            t.altKey && (e = "Alt-" + e),
            t.ctrlKey && (e = "Ctrl-" + e),
            t.metaKey && (e = "Meta-" + e),
            n && t.shiftKey && (e = "Shift-" + e),
            e
          );
        }
        function c(e) {
          return new s.k_({ props: { handleKeyDown: u(e) } });
        }
        function u(e) {
          let t = (function (e) {
            let t = Object.create(null);
            for (let n in e)
              t[
                (function (e) {
                  let t,
                    n,
                    r,
                    i,
                    s = e.split(/-(?!$)/),
                    a = s[s.length - 1];
                  "Space" == a && (a = " ");
                  for (let e = 0; e < s.length - 1; e++) {
                    let a = s[e];
                    if (/^(cmd|meta|m)$/i.test(a)) i = !0;
                    else if (/^a(lt)?$/i.test(a)) t = !0;
                    else if (/^(c|ctrl|control)$/i.test(a)) n = !0;
                    else if (/^s(hift)?$/i.test(a)) r = !0;
                    else if (/^mod$/i.test(a)) o ? (i = !0) : (n = !0);
                    else throw Error("Unrecognized modifier name: " + a);
                  }
                  return (
                    t && (a = "Alt-" + a),
                    n && (a = "Ctrl-" + a),
                    i && (a = "Meta-" + a),
                    r && (a = "Shift-" + a),
                    a
                  );
                })(n)
              ] = e[n];
            return t;
          })(e);
          return function (e, n) {
            let r = (0, i.xT)(n),
              s,
              o = t[l(r, n)];
            if (o && o(e.state, e.dispatch, e)) return !0;
            if (1 == r.length && " " != r) {
              if (n.shiftKey) {
                let i = t[l(r, n, !1)];
                if (i && i(e.state, e.dispatch, e)) return !0;
              }
              if (
                (n.altKey || n.metaKey || n.ctrlKey) &&
                !(a && n.ctrlKey && n.altKey) &&
                (s = i.E3[n.keyCode]) &&
                s != r
              ) {
                let r = t[l(s, n)];
                if (r && r(e.state, e.dispatch, e)) return !0;
              }
            }
            return !1;
          };
        }
        var d = function () {};
        (d.prototype.append = function (e) {
          return e.length
            ? ((e = d.from(e)),
              (!this.length && e) ||
                (e.length < 200 && this.leafAppend(e)) ||
                (this.length < 200 && e.leafPrepend(this)) ||
                this.appendInner(e))
            : this;
        }),
          (d.prototype.prepend = function (e) {
            return e.length ? d.from(e).append(this) : this;
          }),
          (d.prototype.appendInner = function (e) {
            return new p(this, e);
          }),
          (d.prototype.slice = function (e, t) {
            return (void 0 === e && (e = 0),
            void 0 === t && (t = this.length),
            e >= t)
              ? d.empty
              : this.sliceInner(Math.max(0, e), Math.min(this.length, t));
          }),
          (d.prototype.get = function (e) {
            if (!(e < 0) && !(e >= this.length)) return this.getInner(e);
          }),
          (d.prototype.forEach = function (e, t, n) {
            void 0 === t && (t = 0),
              void 0 === n && (n = this.length),
              t <= n
                ? this.forEachInner(e, t, n, 0)
                : this.forEachInvertedInner(e, t, n, 0);
          }),
          (d.prototype.map = function (e, t, n) {
            void 0 === t && (t = 0), void 0 === n && (n = this.length);
            var r = [];
            return (
              this.forEach(
                function (t, n) {
                  return r.push(e(t, n));
                },
                t,
                n,
              ),
              r
            );
          }),
          (d.from = function (e) {
            return e instanceof d ? e : e && e.length ? new h(e) : d.empty;
          });
        var h = (function (e) {
          function t(t) {
            e.call(this), (this.values = t);
          }
          e && (t.__proto__ = e),
            (t.prototype = Object.create(e && e.prototype)),
            (t.prototype.constructor = t);
          var n = { length: { configurable: !0 }, depth: { configurable: !0 } };
          return (
            (t.prototype.flatten = function () {
              return this.values;
            }),
            (t.prototype.sliceInner = function (e, n) {
              return 0 == e && n == this.length
                ? this
                : new t(this.values.slice(e, n));
            }),
            (t.prototype.getInner = function (e) {
              return this.values[e];
            }),
            (t.prototype.forEachInner = function (e, t, n, r) {
              for (var i = t; i < n; i++)
                if (!1 === e(this.values[i], r + i)) return !1;
            }),
            (t.prototype.forEachInvertedInner = function (e, t, n, r) {
              for (var i = t - 1; i >= n; i--)
                if (!1 === e(this.values[i], r + i)) return !1;
            }),
            (t.prototype.leafAppend = function (e) {
              if (this.length + e.length <= 200)
                return new t(this.values.concat(e.flatten()));
            }),
            (t.prototype.leafPrepend = function (e) {
              if (this.length + e.length <= 200)
                return new t(e.flatten().concat(this.values));
            }),
            (n.length.get = function () {
              return this.values.length;
            }),
            (n.depth.get = function () {
              return 0;
            }),
            Object.defineProperties(t.prototype, n),
            t
          );
        })(d);
        d.empty = new h([]);
        var p = (function (e) {
            function t(t, n) {
              e.call(this),
                (this.left = t),
                (this.right = n),
                (this.length = t.length + n.length),
                (this.depth = Math.max(t.depth, n.depth) + 1);
            }
            return (
              e && (t.__proto__ = e),
              (t.prototype = Object.create(e && e.prototype)),
              (t.prototype.constructor = t),
              (t.prototype.flatten = function () {
                return this.left.flatten().concat(this.right.flatten());
              }),
              (t.prototype.getInner = function (e) {
                return e < this.left.length
                  ? this.left.get(e)
                  : this.right.get(e - this.left.length);
              }),
              (t.prototype.forEachInner = function (e, t, n, r) {
                var i = this.left.length;
                if (
                  (t < i &&
                    !1 === this.left.forEachInner(e, t, Math.min(n, i), r)) ||
                  (n > i &&
                    !1 ===
                      this.right.forEachInner(
                        e,
                        Math.max(t - i, 0),
                        Math.min(this.length, n) - i,
                        r + i,
                      ))
                )
                  return !1;
              }),
              (t.prototype.forEachInvertedInner = function (e, t, n, r) {
                var i = this.left.length;
                if (
                  (t > i &&
                    !1 ===
                      this.right.forEachInvertedInner(
                        e,
                        t - i,
                        Math.max(n, i) - i,
                        r + i,
                      )) ||
                  (n < i &&
                    !1 ===
                      this.left.forEachInvertedInner(e, Math.min(t, i), n, r))
                )
                  return !1;
              }),
              (t.prototype.sliceInner = function (e, t) {
                if (0 == e && t == this.length) return this;
                var n = this.left.length;
                return t <= n
                  ? this.left.slice(e, t)
                  : e >= n
                    ? this.right.slice(e - n, t - n)
                    : this.left.slice(e, n).append(this.right.slice(0, t - n));
              }),
              (t.prototype.leafAppend = function (e) {
                var n = this.right.leafAppend(e);
                if (n) return new t(this.left, n);
              }),
              (t.prototype.leafPrepend = function (e) {
                var n = this.left.leafPrepend(e);
                if (n) return new t(n, this.right);
              }),
              (t.prototype.appendInner = function (e) {
                return this.left.depth >=
                  Math.max(this.right.depth, e.depth) + 1
                  ? new t(this.left, new t(this.right, e))
                  : new t(this, e);
              }),
              t
            );
          })(d),
          f = n(64680);
        class m {
          constructor(e, t) {
            (this.items = e), (this.eventCount = t);
          }
          popEvent(e, t) {
            let n, r, i, s;
            if (0 == this.eventCount) return null;
            let o = this.items.length;
            for (; ; o--)
              if (this.items.get(o - 1).selection) {
                --o;
                break;
              }
            t && (r = (n = this.remapping(o, this.items.length)).maps.length);
            let a = e.tr,
              l = [],
              c = [];
            return (
              this.items.forEach(
                (e, t) => {
                  if (!e.step) {
                    n || (r = (n = this.remapping(o, t + 1)).maps.length),
                      r--,
                      c.push(e);
                    return;
                  }
                  if (n) {
                    c.push(new g(e.map));
                    let t = e.step.map(n.slice(r)),
                      i;
                    t &&
                      a.maybeStep(t).doc &&
                      ((i = a.mapping.maps[a.mapping.maps.length - 1]),
                      l.push(new g(i, void 0, void 0, l.length + c.length))),
                      r--,
                      i && n.appendMap(i, r);
                  } else a.maybeStep(e.step);
                  if (e.selection)
                    return (
                      (i = n ? e.selection.map(n.slice(r)) : e.selection),
                      (s = new m(
                        this.items.slice(0, o).append(c.reverse().concat(l)),
                        this.eventCount - 1,
                      )),
                      !1
                    );
                },
                this.items.length,
                0,
              ),
              { remaining: s, transform: a, selection: i }
            );
          }
          addTransform(e, t, n, r) {
            var i, s;
            let o,
              a = [],
              l = this.eventCount,
              c = this.items,
              u = !r && c.length ? c.get(c.length - 1) : null;
            for (let n = 0; n < e.steps.length; n++) {
              let i = e.steps[n].invert(e.docs[n]),
                s = new g(e.mapping.maps[n], i, t),
                o;
              (o = u && u.merge(s)) &&
                ((s = o), n ? a.pop() : (c = c.slice(0, c.length - 1))),
                a.push(s),
                t && (l++, (t = void 0)),
                r || (u = s);
            }
            let d = l - n.depth;
            return (
              d > v &&
                ((i = c),
                (s = d),
                i.forEach((e, t) => {
                  if (e.selection && 0 == s--) return (o = t), !1;
                }),
                (c = i.slice(o)),
                (l -= d)),
              new m(c.append(a), l)
            );
          }
          remapping(e, t) {
            let n = new f.X9();
            return (
              this.items.forEach(
                (t, r) => {
                  let i =
                    null != t.mirrorOffset && r - t.mirrorOffset >= e
                      ? n.maps.length - t.mirrorOffset
                      : void 0;
                  n.appendMap(t.map, i);
                },
                e,
                t,
              ),
              n
            );
          }
          addMaps(e) {
            return 0 == this.eventCount
              ? this
              : new m(
                  this.items.append(e.map((e) => new g(e))),
                  this.eventCount,
                );
          }
          rebased(e, t) {
            if (!this.eventCount) return this;
            let n = [],
              r = Math.max(0, this.items.length - t),
              i = e.mapping,
              s = e.steps.length,
              o = this.eventCount;
            this.items.forEach((e) => {
              e.selection && o--;
            }, r);
            let a = t;
            this.items.forEach((t) => {
              let r = i.getMirror(--a);
              if (null == r) return;
              s = Math.min(s, r);
              let l = i.maps[r];
              if (t.step) {
                let s = e.steps[r].invert(e.docs[r]),
                  c = t.selection && t.selection.map(i.slice(a + 1, r));
                c && o++, n.push(new g(l, s, c));
              } else n.push(new g(l));
            }, r);
            let l = [];
            for (let e = t; e < s; e++) l.push(new g(i.maps[e]));
            let c = new m(this.items.slice(0, r).append(l).append(n), o);
            return (
              c.emptyItemCount() > 500 &&
                (c = c.compress(this.items.length - n.length)),
              c
            );
          }
          emptyItemCount() {
            let e = 0;
            return (
              this.items.forEach((t) => {
                !t.step && e++;
              }),
              e
            );
          }
          compress(e = this.items.length) {
            let t = this.remapping(0, e),
              n = t.maps.length,
              r = [],
              i = 0;
            return (
              this.items.forEach(
                (s, o) => {
                  if (o >= e) r.push(s), s.selection && i++;
                  else if (s.step) {
                    let e = s.step.map(t.slice(n)),
                      o = e && e.getMap();
                    if ((n--, o && t.appendMap(o, n), e)) {
                      let a = s.selection && s.selection.map(t.slice(n));
                      a && i++;
                      let l = new g(o.invert(), e, a),
                        c,
                        u = r.length - 1;
                      (c = r.length && r[u].merge(l)) ? (r[u] = c) : r.push(l);
                    }
                  } else s.map && n--;
                },
                this.items.length,
                0,
              ),
              new m(d.from(r.reverse()), i)
            );
          }
        }
        m.empty = new m(d.empty, 0);
        class g {
          constructor(e, t, n, r) {
            (this.map = e),
              (this.step = t),
              (this.selection = n),
              (this.mirrorOffset = r);
          }
          merge(e) {
            if (this.step && e.step && !e.selection) {
              let t = e.step.merge(this.step);
              if (t) return new g(t.getMap().invert(), t, this.selection);
            }
          }
        }
        class y {
          constructor(e, t, n, r, i) {
            (this.done = e),
              (this.undone = t),
              (this.prevRanges = n),
              (this.prevTime = r),
              (this.prevComposition = i);
          }
        }
        let v = 20;
        function b(e) {
          let t = [];
          for (let n = e.length - 1; n >= 0 && 0 == t.length; n--)
            e[n].forEach((e, n, r, i) => t.push(r, i));
          return t;
        }
        function x(e, t) {
          if (!e) return null;
          let n = [];
          for (let r = 0; r < e.length; r += 2) {
            let i = t.map(e[r], 1),
              s = t.map(e[r + 1], -1);
            i <= s && n.push(i, s);
          }
          return n;
        }
        let k = !1,
          w = null;
        function _(e) {
          let t = e.plugins;
          if (w != t) {
            (k = !1), (w = t);
            for (let e = 0; e < t.length; e++)
              if (t[e].spec.historyPreserveItems) {
                k = !0;
                break;
              }
          }
          return k;
        }
        let O = new s.hs("history"),
          T = new s.hs("closeHistory");
        function S(e, t) {
          return (n, r) => {
            let i = O.getState(n);
            if (!i || 0 == (e ? i.undone : i.done).eventCount) return !1;
            if (r) {
              let s = (function (e, t, n) {
                let r = _(t),
                  i = O.get(t).spec.config,
                  s = (n ? e.undone : e.done).popEvent(t, r);
                if (!s) return null;
                let o = s.selection.resolve(s.transform.doc),
                  a = (n ? e.done : e.undone).addTransform(
                    s.transform,
                    t.selection.getBookmark(),
                    i,
                    r,
                  ),
                  l = new y(
                    n ? a : s.remaining,
                    n ? s.remaining : a,
                    null,
                    0,
                    -1,
                  );
                return s.transform
                  .setSelection(o)
                  .setMeta(O, { redo: n, historyState: l });
              })(i, n, e);
              s && r(t ? s.scrollIntoView() : s);
            }
            return !0;
          };
        }
        let E = S(!1, !0),
          C = S(!0, !0);
        S(!1, !1), S(!0, !1);
        var A = n(14077);
        let N = (e, t) =>
          !e.selection.empty &&
          (t && t(e.tr.deleteSelection().scrollIntoView()), !0);
        function I(e, t, n = !1) {
          for (let r = e; r; r = "start" == t ? r.firstChild : r.lastChild) {
            if (r.isTextblock) return !0;
            if (n && 1 != r.childCount) break;
          }
          return !1;
        }
        function D(e) {
          if (!e.parent.type.spec.isolating)
            for (let t = e.depth - 1; t >= 0; t--) {
              if (e.index(t) > 0) return e.doc.resolve(e.before(t + 1));
              if (e.node(t).type.spec.isolating) break;
            }
          return null;
        }
        function P(e) {
          if (!e.parent.type.spec.isolating)
            for (let t = e.depth - 1; t >= 0; t--) {
              let n = e.node(t);
              if (e.index(t) + 1 < n.childCount)
                return e.doc.resolve(e.after(t + 1));
              if (n.type.spec.isolating) break;
            }
          return null;
        }
        let R = (e, t) => {
            let n = e.selection,
              r = n instanceof s.nh,
              i;
            if (r) {
              if (n.node.isTextblock || !(0, f.n9)(e.doc, n.from)) return !1;
              i = n.from;
            } else if (null == (i = (0, f.N0)(e.doc, n.from, -1))) return !1;
            if (t) {
              let n = e.tr.join(i);
              r &&
                n.setSelection(
                  s.nh.create(n.doc, i - e.doc.resolve(i).nodeBefore.nodeSize),
                ),
                t(n.scrollIntoView());
            }
            return !0;
          },
          M = (e, t) => {
            let n = e.selection,
              r;
            if (n instanceof s.nh) {
              if (n.node.isTextblock || !(0, f.n9)(e.doc, n.to)) return !1;
              r = n.to;
            } else if (null == (r = (0, f.N0)(e.doc, n.to, 1))) return !1;
            return t && t(e.tr.join(r).scrollIntoView()), !0;
          },
          L = (e, t) => {
            let { $from: n, $to: r } = e.selection,
              i = n.blockRange(r),
              s = i && (0, f.jP)(i);
            return null != s && (t && t(e.tr.lift(i, s).scrollIntoView()), !0);
          };
        function j(e) {
          for (let t = 0; t < e.edgeCount; t++) {
            let { type: n } = e.edge(t);
            if (n.isTextblock && !n.hasRequiredAttrs()) return n;
          }
          return null;
        }
        let F = (e, t) => {
            let { $head: n, $anchor: r } = e.selection;
            if (!n.parent.type.spec.code || !n.sameParent(r)) return !1;
            let i = n.node(-1),
              o = n.indexAfter(-1),
              a = j(i.contentMatchAt(o));
            if (!a || !i.canReplaceWith(o, o, a)) return !1;
            if (t) {
              let r = n.after(),
                i = e.tr.replaceWith(r, r, a.createAndFill());
              i.setSelection(s.LN.near(i.doc.resolve(r), 1)),
                t(i.scrollIntoView());
            }
            return !0;
          },
          B = (e, t) => {
            let { $from: n, to: r } = e.selection,
              i,
              o = n.sharedDepth(r);
            return (
              0 != o &&
              ((i = n.before(o)),
              t && t(e.tr.setSelection(s.nh.create(e.doc, i))),
              !0)
            );
          };
        function z(e, t, n, r) {
          let i,
            o,
            a,
            l = t.nodeBefore,
            c = t.nodeAfter,
            u,
            d,
            h = l.type.spec.isolating || c.type.spec.isolating;
          if (
            !h &&
            ((i = t.nodeBefore),
            (o = t.nodeAfter),
            (a = t.index()),
            i &&
              o &&
              i.type.compatibleContent(o.type) &&
              (!i.content.size && t.parent.canReplace(a - 1, a)
                ? (n &&
                    n(e.tr.delete(t.pos - i.nodeSize, t.pos).scrollIntoView()),
                  !0)
                : !!t.parent.canReplace(a, a + 1) &&
                  !!(o.isTextblock || (0, f.n9)(e.doc, t.pos)) &&
                  (n && n(e.tr.join(t.pos).scrollIntoView()), !0)))
          )
            return !0;
          let p = !h && t.parent.canReplace(t.index(), t.index() + 1);
          if (
            p &&
            (u = (d = l.contentMatchAt(l.childCount)).findWrapping(c.type)) &&
            d.matchType(u[0] || c.type).validEnd
          ) {
            if (n) {
              let r = t.pos + c.nodeSize,
                i = A.FK.empty;
              for (let e = u.length - 1; e >= 0; e--)
                i = A.FK.from(u[e].create(null, i));
              i = A.FK.from(l.copy(i));
              let s = e.tr.step(
                  new f.Wg(
                    t.pos - 1,
                    r,
                    t.pos,
                    r,
                    new A.Ji(i, 1, 0),
                    u.length,
                    !0,
                  ),
                ),
                o = s.doc.resolve(r + 2 * u.length);
              o.nodeAfter &&
                o.nodeAfter.type == l.type &&
                (0, f.n9)(s.doc, o.pos) &&
                s.join(o.pos),
                n(s.scrollIntoView());
            }
            return !0;
          }
          let m =
              c.type.spec.isolating || (r > 0 && h)
                ? null
                : s.LN.findFrom(t, 1),
            g = m && m.$from.blockRange(m.$to),
            y = g && (0, f.jP)(g);
          if (null != y && y >= t.depth)
            return n && n(e.tr.lift(g, y).scrollIntoView()), !0;
          if (p && I(c, "start", !0) && I(l, "end")) {
            let r = l,
              i = [];
            for (; i.push(r), !r.isTextblock; ) r = r.lastChild;
            let s = c,
              o = 1;
            for (; !s.isTextblock; s = s.firstChild) o++;
            if (r.canReplace(r.childCount, r.childCount, s.content)) {
              if (n) {
                let r = A.FK.empty;
                for (let e = i.length - 1; e >= 0; e--)
                  r = A.FK.from(i[e].copy(r));
                n(
                  e.tr
                    .step(
                      new f.Wg(
                        t.pos - i.length,
                        t.pos + c.nodeSize,
                        t.pos + o,
                        t.pos + c.nodeSize - o,
                        new A.Ji(r, i.length, 0),
                        0,
                        !0,
                      ),
                    )
                    .scrollIntoView(),
                );
              }
              return !0;
            }
          }
          return !1;
        }
        function $(e) {
          return function (t, n) {
            let r = t.selection,
              i = e < 0 ? r.$from : r.$to,
              o = i.depth;
            for (; i.node(o).isInline; ) {
              if (!o) return !1;
              o--;
            }
            return (
              !!i.node(o).isTextblock &&
              (n &&
                n(
                  t.tr.setSelection(
                    s.U3.create(t.doc, e < 0 ? i.start(o) : i.end(o)),
                  ),
                ),
              !0)
            );
          };
        }
        let q = $(-1),
          U = $(1);
        function H(e, t = null) {
          return function (n, r) {
            let { $from: i, $to: s } = n.selection,
              o = i.blockRange(s),
              a = o && (0, f.oM)(o, e, t);
            return !!a && (r && r(n.tr.wrap(o, a).scrollIntoView()), !0);
          };
        }
        function Q(e, t = null) {
          return function (n, r) {
            let i = !1;
            for (let r = 0; r < n.selection.ranges.length && !i; r++) {
              let {
                $from: { pos: s },
                $to: { pos: o },
              } = n.selection.ranges[r];
              n.doc.nodesBetween(s, o, (r, s) => {
                if (i) return !1;
                if (!(!r.isTextblock || r.hasMarkup(e, t)))
                  if (r.type == e) i = !0;
                  else {
                    let t = n.doc.resolve(s),
                      r = t.index();
                    i = t.parent.canReplaceWith(r, r + 1, e);
                  }
              });
            }
            if (!i) return !1;
            if (r) {
              let i = n.tr;
              for (let r = 0; r < n.selection.ranges.length; r++) {
                let {
                  $from: { pos: s },
                  $to: { pos: o },
                } = n.selection.ranges[r];
                i.setBlockType(s, o, e, t);
              }
              r(i.scrollIntoView());
            }
            return !0;
          };
        }
        function V(e, t = null, n) {
          let r = !1 !== (n && n.removeWhenPresent),
            i = !1 !== (n && n.enterInlineAtoms),
            o = !(n && n.includeWhitespace);
          return function (n, a) {
            let { empty: l, $cursor: c, ranges: u } = n.selection;
            if (
              (l && !c) ||
              !(function (e, t, n, r) {
                for (let i = 0; i < t.length; i++) {
                  let { $from: s, $to: o } = t[i],
                    a =
                      0 == s.depth &&
                      e.inlineContent &&
                      e.type.allowsMarkType(n);
                  if (
                    (e.nodesBetween(s.pos, o.pos, (e, t) => {
                      if (
                        a ||
                        (!r &&
                          e.isAtom &&
                          e.isInline &&
                          t >= s.pos &&
                          t + e.nodeSize <= o.pos)
                      )
                        return !1;
                      a = e.inlineContent && e.type.allowsMarkType(n);
                    }),
                    a)
                  )
                    return !0;
                }
                return !1;
              })(n.doc, u, e, i)
            )
              return !1;
            if (a)
              if (c)
                a(
                  e.isInSet(n.storedMarks || c.marks())
                    ? n.tr.removeStoredMark(e)
                    : n.tr.addStoredMark(e.create(t)),
                );
              else {
                let l,
                  c = n.tr;
                i ||
                  (u = (function (e) {
                    let t = [];
                    for (let n = 0; n < e.length; n++) {
                      let { $from: r, $to: i } = e[n];
                      r.doc.nodesBetween(r.pos, i.pos, (e, n) => {
                        if (
                          e.isAtom &&
                          e.content.size &&
                          e.isInline &&
                          n >= r.pos &&
                          n + e.nodeSize <= i.pos
                        )
                          return (
                            n + 1 > r.pos &&
                              t.push(new s.yn(r, r.doc.resolve(n + 1))),
                            (r = r.doc.resolve(n + 1 + e.content.size)),
                            !1
                          );
                      }),
                        r.pos < i.pos && t.push(new s.yn(r, i));
                    }
                    return t;
                  })(u)),
                  (l = r
                    ? !u.some((t) =>
                        n.doc.rangeHasMark(t.$from.pos, t.$to.pos, e),
                      )
                    : !u.every((t) => {
                        let n = !1;
                        return (
                          c.doc.nodesBetween(
                            t.$from.pos,
                            t.$to.pos,
                            (r, i, s) => {
                              if (n) return !1;
                              n =
                                !e.isInSet(r.marks) &&
                                !!s &&
                                s.type.allowsMarkType(e) &&
                                !(
                                  r.isText &&
                                  /^\s*$/.test(
                                    r.textBetween(
                                      Math.max(0, t.$from.pos - i),
                                      Math.min(r.nodeSize, t.$to.pos - i),
                                    ),
                                  )
                                );
                            },
                          ),
                          !n
                        );
                      }));
                for (let n = 0; n < u.length; n++) {
                  let { $from: r, $to: i } = u[n];
                  if (l) {
                    let n = r.pos,
                      s = i.pos,
                      a = r.nodeAfter,
                      l = i.nodeBefore,
                      u =
                        o && a && a.isText ? /^\s*/.exec(a.text)[0].length : 0,
                      d =
                        o && l && l.isText ? /\s*$/.exec(l.text)[0].length : 0;
                    n + u < s && ((n += u), (s -= d)),
                      c.addMark(n, s, e.create(t));
                  } else c.removeMark(r.pos, i.pos, e);
                }
                a(c.scrollIntoView());
              }
            return !0;
          };
        }
        function W(...e) {
          return function (t, n, r) {
            for (let i = 0; i < e.length; i++) if (e[i](t, n, r)) return !0;
            return !1;
          };
        }
        let Z = W(
            N,
            (e, t, n) => {
              let r = (function (e, t) {
                let { $cursor: n } = e.selection;
                return n &&
                  (t ? t.endOfTextblock("backward", e) : !(n.parentOffset > 0))
                  ? n
                  : null;
              })(e, n);
              if (!r) return !1;
              let i = D(r);
              if (!i) {
                let n = r.blockRange(),
                  i = n && (0, f.jP)(n);
                return (
                  null != i && (t && t(e.tr.lift(n, i).scrollIntoView()), !0)
                );
              }
              let o = i.nodeBefore;
              if (z(e, i, t, -1)) return !0;
              if (
                0 == r.parent.content.size &&
                (I(o, "end") || s.nh.isSelectable(o))
              )
                for (let n = r.depth; ; n--) {
                  let a = (0, f.$L)(e.doc, r.before(n), r.after(n), A.Ji.empty);
                  if (a && a.slice.size < a.to - a.from) {
                    if (t) {
                      let n = e.tr.step(a);
                      n.setSelection(
                        I(o, "end")
                          ? s.LN.findFrom(
                              n.doc.resolve(n.mapping.map(i.pos, -1)),
                              -1,
                            )
                          : s.nh.create(n.doc, i.pos - o.nodeSize),
                      ),
                        t(n.scrollIntoView());
                    }
                    return !0;
                  }
                  if (1 == n || r.node(n - 1).childCount > 1) break;
                }
              return (
                !!o.isAtom &&
                i.depth == r.depth - 1 &&
                (t &&
                  t(e.tr.delete(i.pos - o.nodeSize, i.pos).scrollIntoView()),
                !0)
              );
            },
            (e, t, n) => {
              let { $head: r, empty: i } = e.selection,
                o = r;
              if (!i) return !1;
              if (r.parent.isTextblock) {
                if (n ? !n.endOfTextblock("backward", e) : r.parentOffset > 0)
                  return !1;
                o = D(r);
              }
              let a = o && o.nodeBefore;
              return (
                !!a &&
                !!s.nh.isSelectable(a) &&
                (t &&
                  t(
                    e.tr
                      .setSelection(s.nh.create(e.doc, o.pos - a.nodeSize))
                      .scrollIntoView(),
                  ),
                !0)
              );
            },
          ),
          G = W(
            N,
            (e, t, n) => {
              let r = (function (e, t) {
                let { $cursor: n } = e.selection;
                return n &&
                  (t
                    ? t.endOfTextblock("forward", e)
                    : !(n.parentOffset < n.parent.content.size))
                  ? n
                  : null;
              })(e, n);
              if (!r) return !1;
              let i = P(r);
              if (!i) return !1;
              let o = i.nodeAfter;
              if (z(e, i, t, 1)) return !0;
              if (
                0 == r.parent.content.size &&
                (I(o, "start") || s.nh.isSelectable(o))
              ) {
                let n = (0, f.$L)(e.doc, r.before(), r.after(), A.Ji.empty);
                if (n && n.slice.size < n.to - n.from) {
                  if (t) {
                    let r = e.tr.step(n);
                    r.setSelection(
                      I(o, "start")
                        ? s.LN.findFrom(r.doc.resolve(r.mapping.map(i.pos)), 1)
                        : s.nh.create(r.doc, r.mapping.map(i.pos)),
                    ),
                      t(r.scrollIntoView());
                  }
                  return !0;
                }
              }
              return (
                !!o.isAtom &&
                i.depth == r.depth - 1 &&
                (t &&
                  t(e.tr.delete(i.pos, i.pos + o.nodeSize).scrollIntoView()),
                !0)
              );
            },
            (e, t, n) => {
              let { $head: r, empty: i } = e.selection,
                o = r;
              if (!i) return !1;
              if (r.parent.isTextblock) {
                if (
                  n
                    ? !n.endOfTextblock("forward", e)
                    : r.parentOffset < r.parent.content.size
                )
                  return !1;
                o = P(r);
              }
              let a = o && o.nodeAfter;
              return (
                !!a &&
                !!s.nh.isSelectable(a) &&
                (t &&
                  t(
                    e.tr
                      .setSelection(s.nh.create(e.doc, o.pos))
                      .scrollIntoView(),
                  ),
                !0)
              );
            },
          ),
          Y = {
            Enter: W(
              (e, t) => {
                let { $head: n, $anchor: r } = e.selection;
                return (
                  !!n.parent.type.spec.code &&
                  !!n.sameParent(r) &&
                  (t && t(e.tr.insertText("\n").scrollIntoView()), !0)
                );
              },
              (e, t) => {
                let n = e.selection,
                  { $from: r, $to: i } = n;
                if (
                  n instanceof s.i5 ||
                  r.parent.inlineContent ||
                  i.parent.inlineContent
                )
                  return !1;
                let o = j(i.parent.contentMatchAt(i.indexAfter()));
                if (!o || !o.isTextblock) return !1;
                if (t) {
                  let n = (
                      !r.parentOffset && i.index() < i.parent.childCount ? r : i
                    ).pos,
                    a = e.tr.insert(n, o.createAndFill());
                  a.setSelection(s.U3.create(a.doc, n + 1)),
                    t(a.scrollIntoView());
                }
                return !0;
              },
              (e, t) => {
                let { $cursor: n } = e.selection;
                if (!n || n.parent.content.size) return !1;
                if (n.depth > 1 && n.after() != n.end(-1)) {
                  let r = n.before();
                  if ((0, f.zy)(e.doc, r))
                    return t && t(e.tr.split(r).scrollIntoView()), !0;
                }
                let r = n.blockRange(),
                  i = r && (0, f.jP)(r);
                return (
                  null != i && (t && t(e.tr.lift(r, i).scrollIntoView()), !0)
                );
              },
              (e, t) => {
                let { $from: n, $to: r } = e.selection;
                if (e.selection instanceof s.nh && e.selection.node.isBlock)
                  return (
                    !!n.parentOffset &&
                    !!(0, f.zy)(e.doc, n.pos) &&
                    (t && t(e.tr.split(n.pos).scrollIntoView()), !0)
                  );
                if (!n.depth) return !1;
                let i = [],
                  o,
                  a,
                  l = !1,
                  c = !1;
                for (let e = n.depth; ; e--) {
                  if (n.node(e).isBlock) {
                    let t;
                    (l = n.end(e) == n.pos + (n.depth - e)),
                      (c = n.start(e) == n.pos - (n.depth - e)),
                      (a = j(
                        n.node(e - 1).contentMatchAt(n.indexAfter(e - 1)),
                      ));
                    i.unshift(t || (l && a ? { type: a } : null)), (o = e);
                    break;
                  }
                  if (1 == e) return !1;
                  i.unshift(null);
                }
                let u = e.tr;
                (e.selection instanceof s.U3 || e.selection instanceof s.i5) &&
                  u.deleteSelection();
                let d = u.mapping.map(n.pos),
                  h = (0, f.zy)(u.doc, d, i.length, i);
                if (
                  (h ||
                    ((i[0] = a ? { type: a } : null),
                    (h = (0, f.zy)(u.doc, d, i.length, i))),
                  !h)
                )
                  return !1;
                if ((u.split(d, i.length, i), !l && c && n.node(o).type != a)) {
                  let e = u.mapping.map(n.before(o)),
                    t = u.doc.resolve(e);
                  a &&
                    n.node(o - 1).canReplaceWith(t.index(), t.index() + 1, a) &&
                    u.setNodeMarkup(u.mapping.map(n.before(o)), a);
                }
                return t && t(u.scrollIntoView()), !0;
              },
            ),
            "Mod-Enter": F,
            Backspace: Z,
            "Mod-Backspace": Z,
            "Shift-Backspace": Z,
            Delete: G,
            "Mod-Delete": G,
            "Mod-a": (e, t) => (t && t(e.tr.setSelection(new s.i5(e.doc))), !0),
          },
          K = {
            "Ctrl-h": Y.Backspace,
            "Alt-Backspace": Y["Mod-Backspace"],
            "Ctrl-d": Y.Delete,
            "Ctrl-Alt-Backspace": Y["Mod-Delete"],
            "Alt-Delete": Y["Mod-Delete"],
            "Alt-d": Y["Mod-Delete"],
            "Ctrl-a": q,
            "Ctrl-e": U,
          };
        for (let e in Y) K[e] = Y[e];
        let X = (
          "undefined" != typeof navigator
            ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)
            : "undefined" != typeof os &&
              !!os.platform &&
              "darwin" == os.platform()
        )
          ? K
          : Y;
        class J {
          constructor(e, t) {
            var n;
            (this.editorView = e),
              (this.cursorPos = null),
              (this.element = null),
              (this.timeout = -1),
              (this.width = null != (n = t.width) ? n : 1),
              (this.color = !1 === t.color ? void 0 : t.color || "black"),
              (this.class = t.class),
              (this.handlers = ["dragover", "dragend", "drop", "dragleave"].map(
                (t) => {
                  let n = (e) => {
                    this[t](e);
                  };
                  return e.dom.addEventListener(t, n), { name: t, handler: n };
                },
              ));
          }
          destroy() {
            this.handlers.forEach(({ name: e, handler: t }) =>
              this.editorView.dom.removeEventListener(e, t),
            );
          }
          update(e, t) {
            null != this.cursorPos &&
              t.doc != e.state.doc &&
              (this.cursorPos > e.state.doc.content.size
                ? this.setCursor(null)
                : this.updateOverlay());
          }
          setCursor(e) {
            e != this.cursorPos &&
              ((this.cursorPos = e),
              null == e
                ? (this.element.parentNode.removeChild(this.element),
                  (this.element = null))
                : this.updateOverlay());
          }
          updateOverlay() {
            let e,
              t,
              n = this.editorView.state.doc.resolve(this.cursorPos),
              r = !n.parent.inlineContent,
              i,
              s = this.editorView.dom,
              o = s.getBoundingClientRect(),
              a = o.width / s.offsetWidth,
              l = o.height / s.offsetHeight;
            if (r) {
              let e = n.nodeBefore,
                t = n.nodeAfter;
              if (e || t) {
                let n = this.editorView.nodeDOM(
                  this.cursorPos - (e ? e.nodeSize : 0),
                );
                if (n) {
                  let r = n.getBoundingClientRect(),
                    s = e ? r.bottom : r.top;
                  e &&
                    t &&
                    (s =
                      (s +
                        this.editorView
                          .nodeDOM(this.cursorPos)
                          .getBoundingClientRect().top) /
                      2);
                  let o = (this.width / 2) * l;
                  i = {
                    left: r.left,
                    right: r.right,
                    top: s - o,
                    bottom: s + o,
                  };
                }
              }
            }
            if (!i) {
              let e = this.editorView.coordsAtPos(this.cursorPos),
                t = (this.width / 2) * a;
              i = {
                left: e.left - t,
                right: e.left + t,
                top: e.top,
                bottom: e.bottom,
              };
            }
            let c = this.editorView.dom.offsetParent;
            if (
              (!this.element &&
                ((this.element = c.appendChild(document.createElement("div"))),
                this.class && (this.element.className = this.class),
                (this.element.style.cssText =
                  "position: absolute; z-index: 50; pointer-events: none;"),
                this.color &&
                  (this.element.style.backgroundColor = this.color)),
              this.element.classList.toggle("prosemirror-dropcursor-block", r),
              this.element.classList.toggle(
                "prosemirror-dropcursor-inline",
                !r,
              ),
              c &&
                (c != document.body ||
                  "static" != getComputedStyle(c).position))
            ) {
              let n = c.getBoundingClientRect(),
                r = n.width / c.offsetWidth,
                i = n.height / c.offsetHeight;
              (e = n.left - c.scrollLeft * r), (t = n.top - c.scrollTop * i);
            } else (e = -pageXOffset), (t = -pageYOffset);
            (this.element.style.left = (i.left - e) / a + "px"),
              (this.element.style.top = (i.top - t) / l + "px"),
              (this.element.style.width = (i.right - i.left) / a + "px"),
              (this.element.style.height = (i.bottom - i.top) / l + "px");
          }
          scheduleRemoval(e) {
            clearTimeout(this.timeout),
              (this.timeout = setTimeout(() => this.setCursor(null), e));
          }
          dragover(e) {
            if (!this.editorView.editable) return;
            let t = this.editorView.posAtCoords({
                left: e.clientX,
                top: e.clientY,
              }),
              n =
                t &&
                t.inside >= 0 &&
                this.editorView.state.doc.nodeAt(t.inside),
              r = n && n.type.spec.disableDropCursor,
              i = "function" == typeof r ? r(this.editorView, t, e) : r;
            if (t && !i) {
              let e = t.pos;
              if (this.editorView.dragging && this.editorView.dragging.slice) {
                let t = (0, f.Um)(
                  this.editorView.state.doc,
                  e,
                  this.editorView.dragging.slice,
                );
                null != t && (e = t);
              }
              this.setCursor(e), this.scheduleRemoval(5e3);
            }
          }
          dragend() {
            this.scheduleRemoval(20);
          }
          drop() {
            this.scheduleRemoval(20);
          }
          dragleave(e) {
            this.editorView.dom.contains(e.relatedTarget) ||
              this.setCursor(null);
          }
        }
        var ee = n(76503);
        class et extends s.LN {
          constructor(e) {
            super(e, e);
          }
          map(e, t) {
            let n = e.resolve(t.map(this.head));
            return et.valid(n) ? new et(n) : s.LN.near(n);
          }
          content() {
            return A.Ji.empty;
          }
          eq(e) {
            return e instanceof et && e.head == this.head;
          }
          toJSON() {
            return { type: "gapcursor", pos: this.head };
          }
          static fromJSON(e, t) {
            if ("number" != typeof t.pos)
              throw RangeError("Invalid input for GapCursor.fromJSON");
            return new et(e.resolve(t.pos));
          }
          getBookmark() {
            return new en(this.anchor);
          }
          static valid(e) {
            let t = e.parent;
            if (
              t.isTextblock ||
              !(function (e) {
                for (let t = e.depth; t >= 0; t--) {
                  let n = e.index(t),
                    r = e.node(t);
                  if (0 == n) {
                    if (r.type.spec.isolating) return !0;
                    continue;
                  }
                  for (let e = r.child(n - 1); ; e = e.lastChild) {
                    if (
                      (0 == e.childCount && !e.inlineContent) ||
                      e.isAtom ||
                      e.type.spec.isolating
                    )
                      return !0;
                    if (e.inlineContent) return !1;
                  }
                }
                return !0;
              })(e) ||
              !(function (e) {
                for (let t = e.depth; t >= 0; t--) {
                  let n = e.indexAfter(t),
                    r = e.node(t);
                  if (n == r.childCount) {
                    if (r.type.spec.isolating) return !0;
                    continue;
                  }
                  for (let e = r.child(n); ; e = e.firstChild) {
                    if (
                      (0 == e.childCount && !e.inlineContent) ||
                      e.isAtom ||
                      e.type.spec.isolating
                    )
                      return !0;
                    if (e.inlineContent) return !1;
                  }
                }
                return !0;
              })(e)
            )
              return !1;
            let n = t.type.spec.allowGapCursor;
            if (null != n) return n;
            let r = t.contentMatchAt(e.index()).defaultType;
            return r && r.isTextblock;
          }
          static findGapCursorFrom(e, t, n = !1) {
            n: for (;;) {
              if (!n && et.valid(e)) return e;
              let r = e.pos,
                i = null;
              for (let n = e.depth; ; n--) {
                let s = e.node(n);
                if (t > 0 ? e.indexAfter(n) < s.childCount : e.index(n) > 0) {
                  i = s.child(t > 0 ? e.indexAfter(n) : e.index(n) - 1);
                  break;
                }
                if (0 == n) return null;
                r += t;
                let o = e.doc.resolve(r);
                if (et.valid(o)) return o;
              }
              for (;;) {
                let o = t > 0 ? i.firstChild : i.lastChild;
                if (!o) {
                  if (i.isAtom && !i.isText && !s.nh.isSelectable(i)) {
                    (e = e.doc.resolve(r + i.nodeSize * t)), (n = !1);
                    continue n;
                  }
                  break;
                }
                (i = o), (r += t);
                let a = e.doc.resolve(r);
                if (et.valid(a)) return a;
              }
              return null;
            }
          }
        }
        (et.prototype.visible = !1),
          (et.findFrom = et.findGapCursorFrom),
          s.LN.jsonID("gapcursor", et);
        class en {
          constructor(e) {
            this.pos = e;
          }
          map(e) {
            return new en(e.map(this.pos));
          }
          resolve(e) {
            let t = e.resolve(this.pos);
            return et.valid(t) ? new et(t) : s.LN.near(t);
          }
        }
        let er = u({
          ArrowLeft: ei("horiz", -1),
          ArrowRight: ei("horiz", 1),
          ArrowUp: ei("vert", -1),
          ArrowDown: ei("vert", 1),
        });
        function ei(e, t) {
          let n =
            "vert" == e ? (t > 0 ? "down" : "up") : t > 0 ? "right" : "left";
          return function (e, r, i) {
            let o = e.selection,
              a = t > 0 ? o.$to : o.$from,
              l = o.empty;
            if (o instanceof s.U3) {
              if (!i.endOfTextblock(n) || 0 == a.depth) return !1;
              (l = !1), (a = e.doc.resolve(t > 0 ? a.after() : a.before()));
            }
            let c = et.findGapCursorFrom(a, t, l);
            return !!c && (r && r(e.tr.setSelection(new et(c))), !0);
          };
        }
        function es(e, t, n) {
          if (!e || !e.editable) return !1;
          let r = e.state.doc.resolve(t);
          if (!et.valid(r)) return !1;
          let i = e.posAtCoords({ left: n.clientX, top: n.clientY });
          return (
            !(
              i &&
              i.inside > -1 &&
              s.nh.isSelectable(e.state.doc.nodeAt(i.inside))
            ) && (e.dispatch(e.state.tr.setSelection(new et(r))), !0)
          );
        }
        function eo(e, t) {
          if (
            "insertCompositionText" != t.inputType ||
            !(e.state.selection instanceof et)
          )
            return !1;
          let { $from: n } = e.state.selection,
            r = n.parent
              .contentMatchAt(n.index())
              .findWrapping(e.state.schema.nodes.text);
          if (!r) return !1;
          let i = A.FK.empty;
          for (let e = r.length - 1; e >= 0; e--)
            i = A.FK.from(r[e].createAndFill(null, i));
          let o = e.state.tr.replace(n.pos, n.pos, new A.Ji(i, 0, 0));
          return (
            o.setSelection(s.U3.near(o.doc.resolve(n.pos + 1))),
            e.dispatch(o),
            !1
          );
        }
        function ea(e) {
          if (!(e.selection instanceof et)) return null;
          let t = document.createElement("div");
          return (
            (t.className = "ProseMirror-gapcursor"),
            ee.zF.create(e.doc, [
              ee.NZ.widget(e.selection.head, t, { key: "gapcursor" }),
            ])
          );
        }
        var el = n(47602);
        let ec = "http://www.w3.org/2000/svg",
          eu = "ProseMirror-icon",
          ed = "ProseMirror-menu";
        class eh {
          constructor(e) {
            this.spec = e;
          }
          render(e) {
            let t = this.spec,
              n = t.render
                ? t.render(e)
                : t.icon
                  ? (function (e, t) {
                      let n =
                          (9 == e.nodeType ? e : e.ownerDocument) || document,
                        r = n.createElement("div");
                      if (((r.className = eu), t.path)) {
                        let { path: i, width: s, height: o } = t,
                          a =
                            "pm-icon-" +
                            (function (e) {
                              let t = 0;
                              for (let n = 0; n < e.length; n++)
                                t = ((t << 5) - t + e.charCodeAt(n)) | 0;
                              return t;
                            })(i).toString(16);
                        n.getElementById(a) ||
                          (function (e, t, n) {
                            let [r, i] =
                                9 == e.nodeType
                                  ? [e, e.body]
                                  : [e.ownerDocument || document, e],
                              s = r.getElementById(eu + "-collection");
                            s ||
                              (((s = r.createElementNS(ec, "svg")).id =
                                eu + "-collection"),
                              (s.style.display = "none"),
                              i.insertBefore(s, i.firstChild));
                            let o = r.createElementNS(ec, "symbol");
                            (o.id = t),
                              o.setAttribute(
                                "viewBox",
                                "0 0 " + n.width + " " + n.height,
                              ),
                              o
                                .appendChild(r.createElementNS(ec, "path"))
                                .setAttribute("d", n.path),
                              s.appendChild(o);
                          })(e, a, t);
                        let l = r.appendChild(n.createElementNS(ec, "svg"));
                        (l.style.width = s / o + "em"),
                          l
                            .appendChild(n.createElementNS(ec, "use"))
                            .setAttributeNS(
                              "http://www.w3.org/1999/xlink",
                              "href",
                              /([^#]*)/.exec(n.location.toString())[1] +
                                "#" +
                                a,
                            );
                      } else if (t.dom) r.appendChild(t.dom.cloneNode(!0));
                      else {
                        let { text: e, css: i } = t;
                        (r.appendChild(n.createElement("span")).textContent =
                          e || ""),
                          i && (r.firstChild.style.cssText = i);
                      }
                      return r;
                    })(e.root, t.icon)
                  : t.label
                    ? (0, el.A)("div", null, ep(e, t.label))
                    : null;
            if (!n) throw RangeError("MenuItem without icon or label property");
            if (t.title) {
              let r = "function" == typeof t.title ? t.title(e.state) : t.title;
              n.setAttribute("title", ep(e, r));
            }
            return (
              t.class && n.classList.add(t.class),
              t.css && (n.style.cssText += t.css),
              n.addEventListener("mousedown", (r) => {
                r.preventDefault(),
                  n.classList.contains(ed + "-disabled") ||
                    t.run(e.state, e.dispatch, e, r);
              }),
              {
                dom: n,
                update: function (e) {
                  if (t.select) {
                    let r = t.select(e);
                    if (((n.style.display = r ? "" : "none"), !r)) return !1;
                  }
                  let r = !0;
                  return (
                    t.enable &&
                      eA(n, ed + "-disabled", !(r = t.enable(e) || !1)),
                    t.active && eA(n, ed + "-active", (r && t.active(e)) || !1),
                    !0
                  );
                },
              }
            );
          }
        }
        function ep(e, t) {
          return e._props.translate ? e._props.translate(t) : t;
        }
        let ef = { time: 0, node: null };
        function em(e) {
          (ef.time = Date.now()), (ef.node = e.target);
        }
        function eg(e) {
          return Date.now() - 100 < ef.time && ef.node && e.contains(ef.node);
        }
        class ey {
          constructor(e, t = {}) {
            (this.options = t),
              (this.options = t || {}),
              (this.content = Array.isArray(e) ? e : [e]);
          }
          render(e) {
            let t = ev(this.content, e),
              n = e.dom.ownerDocument.defaultView || window,
              r = (0, el.A)(
                "div",
                {
                  class: ed + "-dropdown " + (this.options.class || ""),
                  style: this.options.css,
                },
                ep(e, this.options.label || ""),
              );
            this.options.title &&
              r.setAttribute("title", ep(e, this.options.title));
            let i = (0, el.A)("div", { class: ed + "-dropdown-wrap" }, r),
              s = null,
              o = null,
              a = () => {
                s &&
                  s.close() &&
                  ((s = null), n.removeEventListener("mousedown", o));
              };
            return (
              r.addEventListener("mousedown", (e) => {
                e.preventDefault(),
                  em(e),
                  s
                    ? a()
                    : ((s = this.expand(i, t.dom)),
                      n.addEventListener(
                        "mousedown",
                        (o = () => {
                          eg(i) || a();
                        }),
                      ));
              }),
              {
                dom: i,
                update: function (e) {
                  let n = t.update(e);
                  return (i.style.display = n ? "" : "none"), n;
                },
              }
            );
          }
          expand(e, t) {
            let n = (0, el.A)(
                "div",
                { class: ed + "-dropdown-menu " + (this.options.class || "") },
                t,
              ),
              r = !1;
            return (
              e.appendChild(n),
              {
                close: function () {
                  return !r && ((r = !0), e.removeChild(n), !0);
                },
                node: n,
              }
            );
          }
        }
        function ev(e, t) {
          let n = [],
            r = [];
          for (let i = 0; i < e.length; i++) {
            let { dom: s, update: o } = e[i].render(t);
            n.push((0, el.A)("div", { class: ed + "-dropdown-item" }, s)),
              r.push(o);
          }
          return { dom: n, update: eb(r, n) };
        }
        function eb(e, t) {
          return (n) => {
            let r = !1;
            for (let i = 0; i < e.length; i++) {
              let s = e[i](n);
              (t[i].style.display = s ? "" : "none"), s && (r = !0);
            }
            return r;
          };
        }
        class ex {
          constructor(e, t = {}) {
            (this.options = t), (this.content = Array.isArray(e) ? e : [e]);
          }
          render(e) {
            let t = ev(this.content, e),
              n = e.dom.ownerDocument.defaultView || window,
              r = (0, el.A)(
                "div",
                { class: ed + "-submenu-label" },
                ep(e, this.options.label || ""),
              ),
              i = (0, el.A)(
                "div",
                { class: ed + "-submenu-wrap" },
                r,
                (0, el.A)("div", { class: ed + "-submenu" }, t.dom),
              ),
              s = null;
            return (
              r.addEventListener("mousedown", (e) => {
                e.preventDefault(),
                  em(e),
                  eA(i, ed + "-submenu-wrap-active", !1),
                  s ||
                    n.addEventListener(
                      "mousedown",
                      (s = () => {
                        eg(i) ||
                          (i.classList.remove(ed + "-submenu-wrap-active"),
                          n.removeEventListener("mousedown", s),
                          (s = null));
                      }),
                    );
              }),
              {
                dom: i,
                update: function (e) {
                  let n = t.update(e);
                  return (i.style.display = n ? "" : "none"), n;
                },
              }
            );
          }
        }
        function ek(e, t) {
          let n = document.createDocumentFragment(),
            r = [],
            i = [];
          for (let s = 0; s < t.length; s++) {
            let o = t[s],
              a = [],
              l = [];
            for (let t = 0; t < o.length; t++) {
              let { dom: r, update: i } = o[t].render(e),
                s = (0, el.A)("span", { class: ed + "item" }, r);
              n.appendChild(s), l.push(s), a.push(i);
            }
            a.length &&
              (r.push(eb(a, l)),
              s < t.length - 1 &&
                i.push(
                  n.appendChild((0, el.A)("span", { class: ed + "separator" })),
                ));
          }
          return {
            dom: n,
            update: function (e) {
              let t = !1,
                n = !1;
              for (let s = 0; s < r.length; s++) {
                let o = r[s](e);
                s && (i[s - 1].style.display = n && o ? "" : "none"),
                  (n = o),
                  o && (t = !0);
              }
              return t;
            },
          };
        }
        let ew = {
            join: {
              width: 800,
              height: 900,
              path: "M0 75h800v125h-800z M0 825h800v-125h-800z M250 400h100v-100h100v100h100v100h-100v100h-100v-100h-100z",
            },
            lift: {
              width: 1024,
              height: 1024,
              path: "M219 310v329q0 7-5 12t-12 5q-8 0-13-5l-164-164q-5-5-5-13t5-13l164-164q5-5 13-5 7 0 12 5t5 12zM1024 749v109q0 7-5 12t-12 5h-987q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h987q7 0 12 5t5 12zM1024 530v109q0 7-5 12t-12 5h-621q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h621q7 0 12 5t5 12zM1024 310v109q0 7-5 12t-12 5h-621q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h621q7 0 12 5t5 12zM1024 91v109q0 7-5 12t-12 5h-987q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h987q7 0 12 5t5 12z",
            },
            selectParentNode: { text: "⬚", css: "font-weight: bold" },
            undo: {
              width: 1024,
              height: 1024,
              path: "M761 1024c113-206 132-520-313-509v253l-384-384 384-384v248c534-13 594 472 313 775z",
            },
            redo: {
              width: 1024,
              height: 1024,
              path: "M576 248v-248l384 384-384 384v-253c-446-10-427 303-313 509-280-303-221-789 313-775z",
            },
            strong: {
              width: 805,
              height: 1024,
              path: "M317 869q42 18 80 18 214 0 214-191 0-65-23-102-15-25-35-42t-38-26-46-14-48-6-54-1q-41 0-57 5 0 30-0 90t-0 90q0 4-0 38t-0 55 2 47 6 38zM309 442q24 4 62 4 46 0 81-7t62-25 42-51 14-81q0-40-16-70t-45-46-61-24-70-8q-28 0-74 7 0 28 2 86t2 86q0 15-0 45t-0 45q0 26 0 39zM0 950l1-53q8-2 48-9t60-15q4-6 7-15t4-19 3-18 1-21 0-19v-37q0-561-12-585-2-4-12-8t-25-6-28-4-27-2-17-1l-2-47q56-1 194-6t213-5q13 0 39 0t38 0q40 0 78 7t73 24 61 40 42 59 16 78q0 29-9 54t-22 41-36 32-41 25-48 22q88 20 146 76t58 141q0 57-20 102t-53 74-78 48-93 27-100 8q-25 0-75-1t-75-1q-60 0-175 6t-132 6z",
            },
            em: {
              width: 585,
              height: 1024,
              path: "M0 949l9-48q3-1 46-12t63-21q16-20 23-57 0-4 35-165t65-310 29-169v-14q-13-7-31-10t-39-4-33-3l10-58q18 1 68 3t85 4 68 1q27 0 56-1t69-4 56-3q-2 22-10 50-17 5-58 16t-62 19q-4 10-8 24t-5 22-4 26-3 24q-15 84-50 239t-44 203q-1 5-7 33t-11 51-9 47-3 32l0 10q9 2 105 17-1 25-9 56-6 0-18 0t-18 0q-16 0-49-5t-49-5q-78-1-117-1-29 0-81 5t-69 6z",
            },
            code: {
              width: 896,
              height: 1024,
              path: "M608 192l-96 96 224 224-224 224 96 96 288-320-288-320zM288 192l-288 320 288 320 96-96-224-224 224-224-96-96z",
            },
            link: {
              width: 951,
              height: 1024,
              path: "M832 694q0-22-16-38l-118-118q-16-16-38-16-24 0-41 18 1 1 10 10t12 12 8 10 7 14 2 15q0 22-16 38t-38 16q-8 0-15-2t-14-7-10-8-12-12-10-10q-18 17-18 41 0 22 16 38l117 118q15 15 38 15 22 0 38-14l84-83q16-16 16-38zM430 292q0-22-16-38l-117-118q-16-16-38-16-22 0-38 15l-84 83q-16 16-16 38 0 22 16 38l118 118q15 15 38 15 24 0 41-17-1-1-10-10t-12-12-8-10-7-14-2-15q0-22 16-38t38-16q8 0 15 2t14 7 10 8 12 12 10 10q18-17 18-41zM941 694q0 68-48 116l-84 83q-47 47-116 47-69 0-116-48l-117-118q-47-47-47-116 0-70 50-119l-50-50q-49 50-118 50-68 0-116-48l-118-118q-48-48-48-116t48-116l84-83q47-47 116-47 69 0 116 48l117 118q47 47 47 116 0 70-50 119l50 50q49-50 118-50 68 0 116 48l118 118q48 48 48 116z",
            },
            bulletList: {
              width: 768,
              height: 896,
              path: "M0 512h128v-128h-128v128zM0 256h128v-128h-128v128zM0 768h128v-128h-128v128zM256 512h512v-128h-512v128zM256 256h512v-128h-512v128zM256 768h512v-128h-512v128z",
            },
            orderedList: {
              width: 768,
              height: 896,
              path: "M320 512h448v-128h-448v128zM320 768h448v-128h-448v128zM320 128v128h448v-128h-448zM79 384h78v-256h-36l-85 23v50l43-2v185zM189 590c0-36-12-78-96-78-33 0-64 6-83 16l1 66c21-10 42-15 67-15s32 11 32 28c0 26-30 58-110 112v50h192v-67l-91 2c49-30 87-66 87-113l1-1z",
            },
            blockquote: {
              width: 640,
              height: 896,
              path: "M0 448v256h256v-256h-128c0 0 0-128 128-128v-128c0 0-256 0-256 256zM640 320v-128c0 0-256 0-256 256v256h256v-256h-128c0 0 0-128 128-128z",
            },
          },
          e_ = new eh({
            title: "Join with above block",
            run: R,
            select: (e) => R(e),
            icon: ew.join,
          }),
          eO = new eh({
            title: "Lift out of enclosing block",
            run: L,
            select: (e) => L(e),
            icon: ew.lift,
          }),
          eT = new eh({
            title: "Select parent node",
            run: B,
            select: (e) => B(e),
            icon: ew.selectParentNode,
          }),
          eS = new eh({
            title: "Undo last change",
            run: E,
            enable: (e) => E(e),
            icon: ew.undo,
          }),
          eE = new eh({
            title: "Redo last undone change",
            run: C,
            enable: (e) => C(e),
            icon: ew.redo,
          });
        function eC(e, t) {
          let n = Q(e, t.attrs),
            r = {
              run: n,
              enable: (e) => n(e),
              active(n) {
                let { $from: r, to: i, node: s } = n.selection;
                return s
                  ? s.hasMarkup(e, t.attrs)
                  : i <= r.end() && r.parent.hasMarkup(e, t.attrs);
              },
            };
          for (let e in t) r[e] = t[e];
          return new eh(r);
        }
        function eA(e, t, n) {
          n ? e.classList.add(t) : e.classList.remove(t);
        }
        let eN = "ProseMirror-menubar";
        class eI {
          constructor(e, t) {
            (this.editorView = e),
              (this.options = t),
              (this.spacer = null),
              (this.maxHeight = 0),
              (this.widthForMaxHeight = 0),
              (this.floating = !1),
              (this.scrollHandler = null),
              (this.root = e.root),
              (this.wrapper = (0, el.A)("div", { class: eN + "-wrapper" })),
              (this.menu = this.wrapper.appendChild(
                (0, el.A)("div", { class: eN }),
              )),
              (this.menu.className = eN),
              e.dom.parentNode &&
                e.dom.parentNode.replaceChild(this.wrapper, e.dom),
              this.wrapper.appendChild(e.dom);
            let { dom: n, update: r } = ek(
              this.editorView,
              this.options.content,
            );
            if (
              ((this.contentUpdate = r),
              this.menu.appendChild(n),
              this.update(),
              t.floating &&
                !(function () {
                  if ("undefined" == typeof navigator) return !1;
                  let e = navigator.userAgent;
                  return (
                    !/Edge\/\d/.test(e) &&
                    /AppleWebKit/.test(e) &&
                    /Mobile\/\w+/.test(e)
                  );
                })())
            ) {
              this.updateFloat();
              let e = (function (e) {
                let t = [e.ownerDocument.defaultView || window];
                for (let n = e.parentNode; n; n = n.parentNode) t.push(n);
                return t;
              })(this.wrapper);
              (this.scrollHandler = (t) => {
                let n = this.editorView.root;
                (n.body || n).contains(this.wrapper)
                  ? this.updateFloat(
                      t.target.getBoundingClientRect ? t.target : void 0,
                    )
                  : e.forEach((e) =>
                      e.removeEventListener("scroll", this.scrollHandler),
                    );
              }),
                e.forEach((e) =>
                  e.addEventListener("scroll", this.scrollHandler),
                );
            }
          }
          update() {
            if (this.editorView.root != this.root) {
              let { dom: e, update: t } = ek(
                this.editorView,
                this.options.content,
              );
              (this.contentUpdate = t),
                this.menu.replaceChild(e, this.menu.firstChild),
                (this.root = this.editorView.root);
            }
            this.contentUpdate(this.editorView.state),
              this.floating
                ? this.updateScrollCursor()
                : (this.menu.offsetWidth != this.widthForMaxHeight &&
                    ((this.widthForMaxHeight = this.menu.offsetWidth),
                    (this.maxHeight = 0)),
                  this.menu.offsetHeight > this.maxHeight &&
                    ((this.maxHeight = this.menu.offsetHeight),
                    (this.menu.style.minHeight = this.maxHeight + "px")));
          }
          updateScrollCursor() {
            var e;
            let t = this.editorView.root.getSelection();
            if (!t.focusNode) return;
            let n = t.getRangeAt(0).getClientRects(),
              r =
                n[
                  (
                    (e = t).anchorNode == e.focusNode
                      ? e.anchorOffset > e.focusOffset
                      : e.anchorNode.compareDocumentPosition(e.focusNode) ==
                        Node.DOCUMENT_POSITION_FOLLOWING
                  )
                    ? 0
                    : n.length - 1
                ];
            if (!r) return;
            let i = this.menu.getBoundingClientRect();
            if (r.top < i.bottom && r.bottom > i.top) {
              let e = (function (e) {
                for (let t = e.parentNode; t; t = t.parentNode)
                  if (t.scrollHeight > t.clientHeight) return t;
              })(this.wrapper);
              e && (e.scrollTop -= i.bottom - r.top);
            }
          }
          updateFloat(e) {
            let t = this.wrapper,
              n = t.getBoundingClientRect(),
              r = e ? Math.max(0, e.getBoundingClientRect().top) : 0;
            if (this.floating)
              if (n.top >= r || n.bottom < this.menu.offsetHeight + 10)
                (this.floating = !1),
                  (this.menu.style.position =
                    this.menu.style.left =
                    this.menu.style.top =
                    this.menu.style.width =
                      ""),
                  (this.menu.style.display = ""),
                  this.spacer.parentNode.removeChild(this.spacer),
                  (this.spacer = null);
              else {
                let i = (t.offsetWidth - t.clientWidth) / 2;
                (this.menu.style.left = n.left + i + "px"),
                  (this.menu.style.display =
                    n.top >
                    (this.editorView.dom.ownerDocument.defaultView || window)
                      .innerHeight
                      ? "none"
                      : ""),
                  e && (this.menu.style.top = r + "px");
              }
            else if (n.top < r && n.bottom >= this.menu.offsetHeight + 10) {
              this.floating = !0;
              let n = this.menu.getBoundingClientRect();
              (this.menu.style.left = n.left + "px"),
                (this.menu.style.width = n.width + "px"),
                e && (this.menu.style.top = r + "px"),
                (this.menu.style.position = "fixed"),
                (this.spacer = (0, el.A)("div", {
                  class: eN + "-spacer",
                  style: `height: ${n.height}px`,
                })),
                t.insertBefore(this.spacer, this.menu);
            }
          }
          destroy() {
            this.wrapper.parentNode &&
              this.wrapper.parentNode.replaceChild(
                this.editorView.dom,
                this.wrapper,
              );
          }
        }
        var eD = n(3647),
          eP = n(14230);
        let eR = "ProseMirror-prompt";
        function eM(e) {
          let t = document.body.appendChild(document.createElement("div"));
          t.className = eR;
          let n = (e) => {
            t.contains(e.target) || r();
          };
          setTimeout(() => window.addEventListener("mousedown", n), 50);
          let r = () => {
              window.removeEventListener("mousedown", n),
                t.parentNode && t.parentNode.removeChild(t);
            },
            i = [];
          for (let t in e.fields) i.push(e.fields[t].render());
          let s = document.createElement("button");
          (s.type = "submit"),
            (s.className = eR + "-submit"),
            (s.textContent = "OK");
          let o = document.createElement("button");
          (o.type = "button"),
            (o.className = eR + "-cancel"),
            (o.textContent = "Cancel"),
            o.addEventListener("click", r);
          let a = t.appendChild(document.createElement("form"));
          e.title &&
            (a.appendChild(document.createElement("h5")).textContent = e.title),
            i.forEach((e) => {
              a.appendChild(document.createElement("div")).appendChild(e);
            });
          let l = a.appendChild(document.createElement("div"));
          (l.className = eR + "-buttons"),
            l.appendChild(s),
            l.appendChild(document.createTextNode(" ")),
            l.appendChild(o);
          let c = t.getBoundingClientRect();
          (t.style.top = (window.innerHeight - c.height) / 2 + "px"),
            (t.style.left = (window.innerWidth - c.width) / 2 + "px");
          let u = () => {
            let t = (function (e, t) {
              let n = Object.create(null),
                r = 0;
              for (let i in e) {
                let s = e[i],
                  o = t[r++],
                  a = s.read(o),
                  l = s.validate(a);
                if (l)
                  return (
                    (function (e, t) {
                      let n = e.parentNode,
                        r = n.appendChild(document.createElement("div"));
                      (r.style.left = e.offsetLeft + e.offsetWidth + 2 + "px"),
                        (r.style.top = e.offsetTop - 5 + "px"),
                        (r.className = "ProseMirror-invalid"),
                        (r.textContent = t),
                        setTimeout(() => n.removeChild(r), 1500);
                    })(o, l),
                    null
                  );
                n[i] = s.clean(a);
              }
              return n;
            })(e.fields, i);
            t && (r(), e.callback(t));
          };
          a.addEventListener("submit", (e) => {
            e.preventDefault(), u();
          }),
            a.addEventListener("keydown", (e) => {
              27 == e.keyCode
                ? (e.preventDefault(), r())
                : 13 != e.keyCode || e.ctrlKey || e.metaKey || e.shiftKey
                  ? 9 == e.keyCode &&
                    window.setTimeout(() => {
                      t.contains(document.activeElement) || r();
                    }, 500)
                  : (e.preventDefault(), u());
            });
          let d = a.elements[0];
          d && d.focus();
        }
        class eL {
          constructor(e) {
            this.options = e;
          }
          read(e) {
            return e.value;
          }
          validateType(e) {
            return null;
          }
          validate(e) {
            return !e && this.options.required
              ? "Required field"
              : this.validateType(e) ||
                  (this.options.validate ? this.options.validate(e) : null);
          }
          clean(e) {
            return this.options.clean ? this.options.clean(e) : e;
          }
        }
        class ej extends eL {
          render() {
            let e = document.createElement("input");
            return (
              (e.type = "text"),
              (e.placeholder = this.options.label),
              (e.value = this.options.value || ""),
              (e.autocomplete = "off"),
              e
            );
          }
        }
        function eF(e, t) {
          let n = e.selection.$from;
          for (let e = n.depth; e >= 0; e--) {
            let r = n.index(e);
            if (n.node(e).canReplaceWith(r, r, t)) return !0;
          }
          return !1;
        }
        function eB(e, t) {
          let n = { label: t.title, run: e };
          for (let e in t) n[e] = t[e];
          return (
            t.enable ||
              t.select ||
              (n[t.enable ? "enable" : "select"] = (t) => e(t)),
            new eh(n)
          );
        }
        function ez(e, t) {
          let { from: n, $from: r, to: i, empty: s } = e.selection;
          return s
            ? !!t.isInSet(e.storedMarks || r.marks())
            : e.doc.rangeHasMark(n, i, t);
        }
        function e$(e, t) {
          let n = { active: (t) => ez(t, e) };
          for (let e in t) n[e] = t[e];
          return eB(V(e), n);
        }
        function eq(e, t) {
          return eB((0, eD.Sd)(e, t.attrs), t);
        }
        let eU =
          "undefined" != typeof navigator &&
          /Mac|iP(hone|[oa]d)/.test(navigator.platform);
        function eH(e) {
          var t, n, r, i, o, a, l;
          let u,
            d,
            h = [
              ((t = e.schema),
              (u = eP.Fr.concat(eP.gO, eP.P8)),
              (d = t.nodes.blockquote) &&
                u.push(((n = d), (0, eP.tG)(/^\s*>\s$/, n))),
              (d = t.nodes.ordered_list) &&
                u.push(
                  ((r = d),
                  (0, eP.tG)(
                    /^(\d+)\.\s$/,
                    r,
                    (e) => ({ order: +e[1] }),
                    (e, t) => t.childCount + t.attrs.order == +e[1],
                  )),
                ),
              (d = t.nodes.bullet_list) &&
                u.push(((i = d), (0, eP.tG)(/^\s*([-+*])\s$/, i))),
              (d = t.nodes.code_block) &&
                u.push(((o = d), (0, eP.JJ)(/^```$/, o))),
              (d = t.nodes.heading) &&
                u.push(
                  ((a = d),
                  (0, eP.JJ)(RegExp("^(#{1,6})\\s$"), a, (e) => ({
                    level: e[1].length,
                  }))),
                ),
              (0, eP.sM)({ rules: u })),
              c(
                (function (e, t) {
                  let n = {},
                    r;
                  function i(e, r) {
                    if (t) {
                      let n = t[e];
                      if (!1 === n) return;
                      n && (e = n);
                    }
                    n[e] = r;
                  }
                  if (
                    (i("Mod-z", E),
                    i("Shift-Mod-z", C),
                    i("Backspace", eP.dv),
                    eU || i("Mod-y", C),
                    i("Alt-ArrowUp", R),
                    i("Alt-ArrowDown", M),
                    i("Mod-BracketLeft", L),
                    i("Escape", B),
                    (r = e.marks.strong) &&
                      (i("Mod-b", V(r)), i("Mod-B", V(r))),
                    (r = e.marks.em) && (i("Mod-i", V(r)), i("Mod-I", V(r))),
                    (r = e.marks.code) && i("Mod-`", V(r)),
                    (r = e.nodes.bullet_list) &&
                      i("Shift-Ctrl-8", (0, eD.Sd)(r)),
                    (r = e.nodes.ordered_list) &&
                      i("Shift-Ctrl-9", (0, eD.Sd)(r)),
                    (r = e.nodes.blockquote) && i("Ctrl->", H(r)),
                    (r = e.nodes.hard_break))
                  ) {
                    let e = r,
                      t = W(
                        F,
                        (t, n) => (
                          n &&
                            n(
                              t.tr
                                .replaceSelectionWith(e.create())
                                .scrollIntoView(),
                            ),
                          !0
                        ),
                      );
                    i("Mod-Enter", t),
                      i("Shift-Enter", t),
                      eU && i("Ctrl-Enter", t);
                  }
                  if (
                    ((r = e.nodes.list_item) &&
                      (i("Enter", (0, eD.wn)(r)),
                      i("Mod-[", (0, eD.T2)(r)),
                      i("Mod-]", (0, eD.$B)(r))),
                    (r = e.nodes.paragraph) && i("Shift-Ctrl-0", Q(r)),
                    (r = e.nodes.code_block) && i("Shift-Ctrl-\\", Q(r)),
                    (r = e.nodes.heading))
                  )
                    for (let e = 1; e <= 6; e++)
                      i("Shift-Ctrl-" + e, Q(r, { level: e }));
                  if ((r = e.nodes.horizontal_rule)) {
                    let e = r;
                    i(
                      "Mod-_",
                      (t, n) => (
                        n &&
                          n(
                            t.tr
                              .replaceSelectionWith(e.create())
                              .scrollIntoView(),
                          ),
                        !0
                      ),
                    );
                  }
                  return n;
                })(e.schema, e.mapKeys),
              ),
              c(X),
              (function (e = {}) {
                return new s.k_({ view: (t) => new J(t, e) });
              })(),
              new s.k_({
                props: {
                  decorations: ea,
                  createSelectionBetween: (e, t, n) =>
                    t.pos == n.pos && et.valid(n) ? new et(n) : null,
                  handleClick: es,
                  handleKeyDown: er,
                  handleDOMEvents: { beforeinput: eo },
                },
              }),
            ];
          return (
            !1 !== e.menuBar &&
              h.push(
                ((l = {
                  floating: !1 !== e.floatingMenu,
                  content:
                    e.menuContent ||
                    (function (e) {
                      var t, n;
                      let r,
                        i,
                        o = {};
                      if (
                        ((r = e.marks.strong) &&
                          (o.toggleStrong = e$(r, {
                            title: "Toggle strong style",
                            icon: ew.strong,
                          })),
                        (r = e.marks.em) &&
                          (o.toggleEm = e$(r, {
                            title: "Toggle emphasis",
                            icon: ew.em,
                          })),
                        (r = e.marks.code) &&
                          (o.toggleCode = e$(r, {
                            title: "Toggle code font",
                            icon: ew.code,
                          })),
                        (r = e.marks.link) &&
                          ((t = r),
                          (o.toggleLink = new eh({
                            title: "Add or remove link",
                            icon: ew.link,
                            active: (e) => ez(e, t),
                            enable: (e) => !e.selection.empty,
                            run(e, n, r) {
                              if (ez(e, t)) return V(t)(e, n), !0;
                              eM({
                                title: "Create a link",
                                fields: {
                                  href: new ej({
                                    label: "Link target",
                                    required: !0,
                                  }),
                                  title: new ej({ label: "Title" }),
                                },
                                callback(e) {
                                  V(t, e)(r.state, r.dispatch), r.focus();
                                },
                              });
                            },
                          }))),
                        (i = e.nodes.image) &&
                          ((n = i),
                          (o.insertImage = new eh({
                            title: "Insert image",
                            label: "Image",
                            enable: (e) => eF(e, n),
                            run(e, t, r) {
                              let { from: i, to: o } = e.selection,
                                a = null;
                              e.selection instanceof s.nh &&
                                e.selection.node.type == n &&
                                (a = e.selection.node.attrs),
                                eM({
                                  title: "Insert image",
                                  fields: {
                                    src: new ej({
                                      label: "Location",
                                      required: !0,
                                      value: a && a.src,
                                    }),
                                    title: new ej({
                                      label: "Title",
                                      value: a && a.title,
                                    }),
                                    alt: new ej({
                                      label: "Description",
                                      value: a
                                        ? a.alt
                                        : e.doc.textBetween(i, o, " "),
                                    }),
                                  },
                                  callback(e) {
                                    r.dispatch(
                                      r.state.tr.replaceSelectionWith(
                                        n.createAndFill(e),
                                      ),
                                    ),
                                      r.focus();
                                  },
                                });
                            },
                          }))),
                        (i = e.nodes.bullet_list) &&
                          (o.wrapBulletList = eq(i, {
                            title: "Wrap in bullet list",
                            icon: ew.bulletList,
                          })),
                        (i = e.nodes.ordered_list) &&
                          (o.wrapOrderedList = eq(i, {
                            title: "Wrap in ordered list",
                            icon: ew.orderedList,
                          })),
                        (i = e.nodes.blockquote) &&
                          (o.wrapBlockQuote = (function (e, t) {
                            let n = {
                              run: (n, r) => H(e, t.attrs)(n, r),
                              select: (n) => H(e, t.attrs)(n),
                            };
                            for (let e in t) n[e] = t[e];
                            return new eh(n);
                          })(i, {
                            title: "Wrap in block quote",
                            icon: ew.blockquote,
                          })),
                        (i = e.nodes.paragraph) &&
                          (o.makeParagraph = eC(i, {
                            title: "Change to paragraph",
                            label: "Plain",
                          })),
                        (i = e.nodes.code_block) &&
                          (o.makeCodeBlock = eC(i, {
                            title: "Change to code block",
                            label: "Code",
                          })),
                        (i = e.nodes.heading))
                      )
                        for (let e = 1; e <= 10; e++)
                          o["makeHead" + e] = eC(i, {
                            title: "Change to heading " + e,
                            label: "Level " + e,
                            attrs: { level: e },
                          });
                      if ((i = e.nodes.horizontal_rule)) {
                        let e = i;
                        o.insertHorizontalRule = new eh({
                          title: "Insert horizontal rule",
                          label: "Horizontal rule",
                          enable: (t) => eF(t, e),
                          run(t, n) {
                            n(t.tr.replaceSelectionWith(e.create()));
                          },
                        });
                      }
                      let a = (e) => e.filter((e) => e);
                      return (
                        (o.insertMenu = new ey(
                          a([o.insertImage, o.insertHorizontalRule]),
                          { label: "Insert" },
                        )),
                        (o.typeMenu = new ey(
                          a([
                            o.makeParagraph,
                            o.makeCodeBlock,
                            o.makeHead1 &&
                              new ex(
                                a([
                                  o.makeHead1,
                                  o.makeHead2,
                                  o.makeHead3,
                                  o.makeHead4,
                                  o.makeHead5,
                                  o.makeHead6,
                                ]),
                                { label: "Heading" },
                              ),
                          ]),
                          { label: "Type..." },
                        )),
                        (o.inlineMenu = [
                          a([
                            o.toggleStrong,
                            o.toggleEm,
                            o.toggleCode,
                            o.toggleLink,
                          ]),
                        ]),
                        (o.blockMenu = [
                          a([
                            o.wrapBulletList,
                            o.wrapOrderedList,
                            o.wrapBlockQuote,
                            e_,
                            eO,
                            eT,
                          ]),
                        ]),
                        (o.fullMenu = o.inlineMenu.concat(
                          [[o.insertMenu, o.typeMenu]],
                          [[eS, eE]],
                          o.blockMenu,
                        )),
                        o
                      );
                    })(e.schema).fullMenu,
                }),
                new s.k_({ view: (e) => new eI(e, l) })),
              ),
            !1 !== e.history &&
              h.push(
                (function (e = {}) {
                  return (
                    (e = {
                      depth: e.depth || 100,
                      newGroupDelay: e.newGroupDelay || 500,
                    }),
                    new s.k_({
                      key: O,
                      state: {
                        init: () => new y(m.empty, m.empty, null, 0, -1),
                        apply: (t, n, r) =>
                          (function (e, t, n, r) {
                            let i = n.getMeta(O),
                              s;
                            if (i) return i.historyState;
                            n.getMeta(T) &&
                              (e = new y(e.done, e.undone, null, 0, -1));
                            let o = n.getMeta("appendedTransaction");
                            if (0 == n.steps.length) return e;
                            if (o && o.getMeta(O))
                              if (o.getMeta(O).redo)
                                return new y(
                                  e.done.addTransform(n, void 0, r, _(t)),
                                  e.undone,
                                  b(n.mapping.maps),
                                  e.prevTime,
                                  e.prevComposition,
                                );
                              else
                                return new y(
                                  e.done,
                                  e.undone.addTransform(n, void 0, r, _(t)),
                                  null,
                                  e.prevTime,
                                  e.prevComposition,
                                );
                            if (
                              !1 === n.getMeta("addToHistory") ||
                              (o && !1 === o.getMeta("addToHistory"))
                            )
                              if ((s = n.getMeta("rebased")))
                                return new y(
                                  e.done.rebased(n, s),
                                  e.undone.rebased(n, s),
                                  x(e.prevRanges, n.mapping),
                                  e.prevTime,
                                  e.prevComposition,
                                );
                              else
                                return new y(
                                  e.done.addMaps(n.mapping.maps),
                                  e.undone.addMaps(n.mapping.maps),
                                  x(e.prevRanges, n.mapping),
                                  e.prevTime,
                                  e.prevComposition,
                                );
                            {
                              let i = n.getMeta("composition"),
                                s =
                                  0 == e.prevTime ||
                                  (!o &&
                                    e.prevComposition != i &&
                                    (e.prevTime <
                                      (n.time || 0) - r.newGroupDelay ||
                                      !(function (e, t) {
                                        if (!t) return !1;
                                        if (!e.docChanged) return !0;
                                        let n = !1;
                                        return (
                                          e.mapping.maps[0].forEach((e, r) => {
                                            for (
                                              let i = 0;
                                              i < t.length;
                                              i += 2
                                            )
                                              e <= t[i + 1] &&
                                                r >= t[i] &&
                                                (n = !0);
                                          }),
                                          n
                                        );
                                      })(n, e.prevRanges))),
                                a = o
                                  ? x(e.prevRanges, n.mapping)
                                  : b(n.mapping.maps);
                              return new y(
                                e.done.addTransform(
                                  n,
                                  s ? t.selection.getBookmark() : void 0,
                                  r,
                                  _(t),
                                ),
                                m.empty,
                                a,
                                n.time,
                                null == i ? e.prevComposition : i,
                              );
                            }
                          })(n, r, t, e),
                      },
                      config: e,
                      props: {
                        handleDOMEvents: {
                          beforeinput(e, t) {
                            let n = t.inputType,
                              r =
                                "historyUndo" == n
                                  ? E
                                  : "historyRedo" == n
                                    ? C
                                    : null;
                            return (
                              !!r &&
                              (t.preventDefault(), r(e.state, e.dispatch))
                            );
                          },
                        },
                      },
                    })
                  );
                })(),
              ),
            h.concat(
              new s.k_({
                props: {
                  attributes: { class: "ProseMirror-example-setup-style" },
                },
              }),
            )
          );
        }
      },
      69621: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 94745));
      },
      70417: (e, t, n) => {
        "use strict";
        var r = Object.create,
          i = Object.defineProperty,
          s = Object.getOwnPropertyDescriptor,
          o = Object.getOwnPropertyNames,
          a = Object.getPrototypeOf,
          l = Object.prototype.hasOwnProperty,
          c = (e, t, n, r) => {
            if ((t && "object" == typeof t) || "function" == typeof t)
              for (let a of o(t))
                l.call(e, a) ||
                  a === n ||
                  i(e, a, {
                    get: () => t[a],
                    enumerable: !(r = s(t, a)) || r.enumerable,
                  });
            return e;
          },
          u = {};
        function d(...e) {
          return e.reduce((e, t) => ({ ...e, ...(null != t ? t : {}) }), {});
        }
        function h(e) {
          return new ReadableStream({
            async pull(t) {
              try {
                let { value: n, done: r } = await e.next();
                r ? t.close() : t.enqueue(n);
              } catch (e) {
                t.error(e);
              }
            },
            cancel() {},
          });
        }
        async function p(e) {
          return null == e
            ? Promise.resolve()
            : new Promise((t) => setTimeout(t, e));
        }
        function f() {
          let e,
            t,
            n,
            r = "",
            i = [];
          function s(e, t) {
            if ("" === e) return void o(t);
            if (e.startsWith(":")) return;
            let n = e.indexOf(":");
            if (-1 === n) return void a(e, "");
            let r = e.slice(0, n),
              i = n + 1;
            a(r, i < e.length && " " === e[i] ? e.slice(i + 1) : e.slice(i));
          }
          function o(r) {
            i.length > 0 &&
              (r.enqueue({ event: e, data: i.join("\n"), id: t, retry: n }),
              (i = []),
              (e = void 0),
              (n = void 0));
          }
          function a(r, s) {
            switch (r) {
              case "event":
                e = s;
                break;
              case "data":
                i.push(s);
                break;
              case "id":
                t = s;
                break;
              case "retry":
                let o = parseInt(s, 10);
                isNaN(o) || (n = o);
            }
          }
          return new TransformStream({
            transform(e, t) {
              let { lines: n, incompleteLine: i } = (function (e, t) {
                let n = [],
                  r = e;
                for (let e = 0; e < t.length; ) {
                  let i = t[e++];
                  "\n" === i
                    ? (n.push(r), (r = ""))
                    : "\r" === i
                      ? (n.push(r), (r = ""), "\n" === t[e] && e++)
                      : (r += i);
                }
                return { lines: n, incompleteLine: r };
              })(r, e);
              r = i;
              for (let e = 0; e < n.length; e++) s(n[e], t);
            },
            flush(e) {
              s(r, e), o(e);
            },
          });
        }
        function m(e) {
          let t = {};
          return (
            e.headers.forEach((e, n) => {
              t[n] = e;
            }),
            t
          );
        }
        ((e, t) => {
          for (var n in t) i(e, n, { get: t[n], enumerable: !0 });
        })(u, {
          asValidator: () => j,
          combineHeaders: () => d,
          convertAsyncIteratorToReadableStream: () => h,
          convertBase64ToUint8Array: () => ea,
          convertUint8ArrayToBase64: () => el,
          createBinaryResponseHandler: () => er,
          createEventSourceParserStream: () => f,
          createEventSourceResponseHandler: () => ee,
          createIdGenerator: () => v,
          createJsonErrorResponseHandler: () => J,
          createJsonResponseHandler: () => en,
          createJsonStreamResponseHandler: () => et,
          createStatusCodeErrorResponseHandler: () => ei,
          delay: () => p,
          extractResponseHeaders: () => m,
          generateId: () => b,
          getErrorMessage: () => x,
          getFromApi: () => T,
          isAbortError: () => _,
          isParsableJson: () => U,
          isValidator: () => L,
          loadApiKey: () => E,
          loadOptionalSetting: () => C,
          loadSetting: () => N,
          parseJSON: () => $,
          parseProviderOptions: () => Q,
          postFormDataToApi: () => G,
          postJsonToApi: () => Z,
          postToApi: () => Y,
          removeUndefinedEntries: () => w,
          resolve: () => K,
          safeParseJSON: () => q,
          safeValidateTypes: () => z,
          validateTypes: () => B,
          validator: () => M,
          validatorSymbol: () => R,
          withoutTrailingSlash: () => ec,
          zodValidator: () => F,
        }),
          (e.exports = c(i({}, "__esModule", { value: !0 }), u));
        var g = n(50289),
          y = n(13004),
          v = ({
            prefix: e,
            size: t = 16,
            alphabet:
              n = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
            separator: r = "-",
          } = {}) => {
            let i = (0, y.customAlphabet)(n, t);
            if (null == e) return i;
            if (n.includes(r))
              throw new g.InvalidArgumentError({
                argument: "separator",
                message: `The separator "${r}" must not be part of the alphabet "${n}".`,
              });
            return (t) => `${e}${r}${i(t)}`;
          },
          b = v();
        function x(e) {
          return null == e
            ? "unknown error"
            : "string" == typeof e
              ? e
              : e instanceof Error
                ? e.message
                : JSON.stringify(e);
        }
        var k = n(50289);
        function w(e) {
          return Object.fromEntries(
            Object.entries(e).filter(([e, t]) => null != t),
          );
        }
        function _(e) {
          return (
            e instanceof Error &&
            ("AbortError" === e.name || "TimeoutError" === e.name)
          );
        }
        var O = () => globalThis.fetch,
          T = async ({
            url: e,
            headers: t = {},
            successfulResponseHandler: n,
            failedResponseHandler: r,
            abortSignal: i,
            fetch: s = O(),
          }) => {
            try {
              let o = await s(e, { method: "GET", headers: w(t), signal: i }),
                a = m(o);
              if (!o.ok) {
                let t;
                try {
                  t = await r({ response: o, url: e, requestBodyValues: {} });
                } catch (t) {
                  if (_(t) || k.APICallError.isInstance(t)) throw t;
                  throw new k.APICallError({
                    message: "Failed to process error response",
                    cause: t,
                    statusCode: o.status,
                    url: e,
                    responseHeaders: a,
                    requestBodyValues: {},
                  });
                }
                throw t.value;
              }
              try {
                return await n({ response: o, url: e, requestBodyValues: {} });
              } catch (t) {
                if (
                  t instanceof Error &&
                  (_(t) || k.APICallError.isInstance(t))
                )
                  throw t;
                throw new k.APICallError({
                  message: "Failed to process successful response",
                  cause: t,
                  statusCode: o.status,
                  url: e,
                  responseHeaders: a,
                  requestBodyValues: {},
                });
              }
            } catch (t) {
              if (_(t)) throw t;
              if (t instanceof TypeError && "fetch failed" === t.message) {
                let n = t.cause;
                if (null != n)
                  throw new k.APICallError({
                    message: `Cannot connect to API: ${n.message}`,
                    cause: n,
                    url: e,
                    isRetryable: !0,
                    requestBodyValues: {},
                  });
              }
              throw t;
            }
          },
          S = n(50289);
        function E({
          apiKey: e,
          environmentVariableName: t,
          apiKeyParameterName: n = "apiKey",
          description: r,
        }) {
          if ("string" == typeof e) return e;
          if (null != e)
            throw new S.LoadAPIKeyError({
              message: `${r} API key must be a string.`,
            });
          if ("undefined" == typeof process)
            throw new S.LoadAPIKeyError({
              message: `${r} API key is missing. Pass it using the '${n}' parameter. Environment variables is not supported in this environment.`,
            });
          if (null == (e = process.env[t]))
            throw new S.LoadAPIKeyError({
              message: `${r} API key is missing. Pass it using the '${n}' parameter or the ${t} environment variable.`,
            });
          if ("string" != typeof e)
            throw new S.LoadAPIKeyError({
              message: `${r} API key must be a string. The value of the ${t} environment variable is not a string.`,
            });
          return e;
        }
        function C({ settingValue: e, environmentVariableName: t }) {
          return "string" == typeof e
            ? e
            : null != e || "undefined" == typeof process
              ? void 0
              : null != (e = process.env[t]) && "string" == typeof e
                ? e
                : void 0;
        }
        var A = n(50289);
        function N({
          settingValue: e,
          environmentVariableName: t,
          settingName: n,
          description: r,
        }) {
          if ("string" == typeof e) return e;
          if (null != e)
            throw new A.LoadSettingError({
              message: `${r} setting must be a string.`,
            });
          if ("undefined" == typeof process)
            throw new A.LoadSettingError({
              message: `${r} setting is missing. Pass it using the '${n}' parameter. Environment variables is not supported in this environment.`,
            });
          if (null == (e = process.env[t]))
            throw new A.LoadSettingError({
              message: `${r} setting is missing. Pass it using the '${n}' parameter or the ${t} environment variable.`,
            });
          if ("string" != typeof e)
            throw new A.LoadSettingError({
              message: `${r} setting must be a string. The value of the ${t} environment variable is not a string.`,
            });
          return e;
        }
        var I = n(50289),
          D = ((e, t, n) => (
            (n = null != e ? r(a(e)) : {}),
            c(
              !t && e && e.__esModule
                ? n
                : i(n, "default", { value: e, enumerable: !0 }),
              e,
            )
          ))(n(54220)),
          P = n(50289),
          R = Symbol.for("vercel.ai.validator");
        function M(e) {
          return { [R]: !0, validate: e };
        }
        function L(e) {
          return (
            "object" == typeof e &&
            null !== e &&
            R in e &&
            !0 === e[R] &&
            "validate" in e
          );
        }
        function j(e) {
          return L(e) ? e : F(e);
        }
        function F(e) {
          return M((t) => {
            let n = e.safeParse(t);
            return n.success
              ? { success: !0, value: n.data }
              : { success: !1, error: n.error };
          });
        }
        function B({ value: e, schema: t }) {
          let n = z({ value: e, schema: t });
          if (!n.success)
            throw P.TypeValidationError.wrap({ value: e, cause: n.error });
          return n.value;
        }
        function z({ value: e, schema: t }) {
          let n = j(t);
          try {
            if (null == n.validate) return { success: !0, value: e };
            let t = n.validate(e);
            if (t.success) return t;
            return {
              success: !1,
              error: P.TypeValidationError.wrap({ value: e, cause: t.error }),
            };
          } catch (t) {
            return {
              success: !1,
              error: P.TypeValidationError.wrap({ value: e, cause: t }),
            };
          }
        }
        function $({ text: e, schema: t }) {
          try {
            let n = D.default.parse(e);
            if (null == t) return n;
            return B({ value: n, schema: t });
          } catch (t) {
            if (
              I.JSONParseError.isInstance(t) ||
              I.TypeValidationError.isInstance(t)
            )
              throw t;
            throw new I.JSONParseError({ text: e, cause: t });
          }
        }
        function q({ text: e, schema: t }) {
          try {
            let n = D.default.parse(e);
            if (null == t) return { success: !0, value: n, rawValue: n };
            let r = z({ value: n, schema: t });
            return r.success ? { ...r, rawValue: n } : r;
          } catch (t) {
            return {
              success: !1,
              error: I.JSONParseError.isInstance(t)
                ? t
                : new I.JSONParseError({ text: e, cause: t }),
            };
          }
        }
        function U(e) {
          try {
            return D.default.parse(e), !0;
          } catch (e) {
            return !1;
          }
        }
        var H = n(50289);
        function Q({ provider: e, providerOptions: t, schema: n }) {
          if ((null == t ? void 0 : t[e]) == null) return;
          let r = z({ value: t[e], schema: n });
          if (!r.success)
            throw new H.InvalidArgumentError({
              argument: "providerOptions",
              message: `invalid ${e} provider options`,
              cause: r.error,
            });
          return r.value;
        }
        var V = n(50289),
          W = () => globalThis.fetch,
          Z = async ({
            url: e,
            headers: t,
            body: n,
            failedResponseHandler: r,
            successfulResponseHandler: i,
            abortSignal: s,
            fetch: o,
          }) =>
            Y({
              url: e,
              headers: { "Content-Type": "application/json", ...t },
              body: { content: JSON.stringify(n), values: n },
              failedResponseHandler: r,
              successfulResponseHandler: i,
              abortSignal: s,
              fetch: o,
            }),
          G = async ({
            url: e,
            headers: t,
            formData: n,
            failedResponseHandler: r,
            successfulResponseHandler: i,
            abortSignal: s,
            fetch: o,
          }) =>
            Y({
              url: e,
              headers: t,
              body: { content: n, values: Object.fromEntries(n.entries()) },
              failedResponseHandler: r,
              successfulResponseHandler: i,
              abortSignal: s,
              fetch: o,
            }),
          Y = async ({
            url: e,
            headers: t = {},
            body: n,
            successfulResponseHandler: r,
            failedResponseHandler: i,
            abortSignal: s,
            fetch: o = W(),
          }) => {
            try {
              let a = await o(e, {
                  method: "POST",
                  headers: w(t),
                  body: n.content,
                  signal: s,
                }),
                l = m(a);
              if (!a.ok) {
                let t;
                try {
                  t = await i({
                    response: a,
                    url: e,
                    requestBodyValues: n.values,
                  });
                } catch (t) {
                  if (_(t) || V.APICallError.isInstance(t)) throw t;
                  throw new V.APICallError({
                    message: "Failed to process error response",
                    cause: t,
                    statusCode: a.status,
                    url: e,
                    responseHeaders: l,
                    requestBodyValues: n.values,
                  });
                }
                throw t.value;
              }
              try {
                return await r({
                  response: a,
                  url: e,
                  requestBodyValues: n.values,
                });
              } catch (t) {
                if (
                  t instanceof Error &&
                  (_(t) || V.APICallError.isInstance(t))
                )
                  throw t;
                throw new V.APICallError({
                  message: "Failed to process successful response",
                  cause: t,
                  statusCode: a.status,
                  url: e,
                  responseHeaders: l,
                  requestBodyValues: n.values,
                });
              }
            } catch (t) {
              if (_(t)) throw t;
              if (t instanceof TypeError && "fetch failed" === t.message) {
                let r = t.cause;
                if (null != r)
                  throw new V.APICallError({
                    message: `Cannot connect to API: ${r.message}`,
                    cause: r,
                    url: e,
                    requestBodyValues: n.values,
                    isRetryable: !0,
                  });
              }
              throw t;
            }
          };
        async function K(e) {
          return "function" == typeof e && (e = e()), Promise.resolve(e);
        }
        var X = n(50289),
          J =
            ({ errorSchema: e, errorToMessage: t, isRetryable: n }) =>
            async ({ response: r, url: i, requestBodyValues: s }) => {
              let o = await r.text(),
                a = m(r);
              if ("" === o.trim())
                return {
                  responseHeaders: a,
                  value: new X.APICallError({
                    message: r.statusText,
                    url: i,
                    requestBodyValues: s,
                    statusCode: r.status,
                    responseHeaders: a,
                    responseBody: o,
                    isRetryable: null == n ? void 0 : n(r),
                  }),
                };
              try {
                let l = $({ text: o, schema: e });
                return {
                  responseHeaders: a,
                  value: new X.APICallError({
                    message: t(l),
                    url: i,
                    requestBodyValues: s,
                    statusCode: r.status,
                    responseHeaders: a,
                    responseBody: o,
                    data: l,
                    isRetryable: null == n ? void 0 : n(r, l),
                  }),
                };
              } catch (e) {
                return {
                  responseHeaders: a,
                  value: new X.APICallError({
                    message: r.statusText,
                    url: i,
                    requestBodyValues: s,
                    statusCode: r.status,
                    responseHeaders: a,
                    responseBody: o,
                    isRetryable: null == n ? void 0 : n(r),
                  }),
                };
              }
            },
          ee =
            (e) =>
            async ({ response: t }) => {
              let n = m(t);
              if (null == t.body) throw new X.EmptyResponseBodyError({});
              return {
                responseHeaders: n,
                value: t.body
                  .pipeThrough(new TextDecoderStream())
                  .pipeThrough(f())
                  .pipeThrough(
                    new TransformStream({
                      transform({ data: t }, n) {
                        "[DONE]" !== t && n.enqueue(q({ text: t, schema: e }));
                      },
                    }),
                  ),
              };
            },
          et =
            (e) =>
            async ({ response: t }) => {
              let n = m(t);
              if (null == t.body) throw new X.EmptyResponseBodyError({});
              let r = "";
              return {
                responseHeaders: n,
                value: t.body.pipeThrough(new TextDecoderStream()).pipeThrough(
                  new TransformStream({
                    transform(t, n) {
                      t.endsWith("\n")
                        ? (n.enqueue(q({ text: r + t, schema: e })), (r = ""))
                        : (r += t);
                    },
                  }),
                ),
              };
            },
          en =
            (e) =>
            async ({ response: t, url: n, requestBodyValues: r }) => {
              let i = await t.text(),
                s = q({ text: i, schema: e }),
                o = m(t);
              if (!s.success)
                throw new X.APICallError({
                  message: "Invalid JSON response",
                  cause: s.error,
                  statusCode: t.status,
                  responseHeaders: o,
                  responseBody: i,
                  url: n,
                  requestBodyValues: r,
                });
              return {
                responseHeaders: o,
                value: s.value,
                rawValue: s.rawValue,
              };
            },
          er =
            () =>
            async ({ response: e, url: t, requestBodyValues: n }) => {
              let r = m(e);
              if (!e.body)
                throw new X.APICallError({
                  message: "Response body is empty",
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: r,
                  responseBody: void 0,
                });
              try {
                let t = await e.arrayBuffer();
                return { responseHeaders: r, value: new Uint8Array(t) };
              } catch (i) {
                throw new X.APICallError({
                  message: "Failed to read response as array buffer",
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: r,
                  responseBody: void 0,
                  cause: i,
                });
              }
            },
          ei =
            () =>
            async ({ response: e, url: t, requestBodyValues: n }) => {
              let r = m(e),
                i = await e.text();
              return {
                responseHeaders: r,
                value: new X.APICallError({
                  message: e.statusText,
                  url: t,
                  requestBodyValues: n,
                  statusCode: e.status,
                  responseHeaders: r,
                  responseBody: i,
                }),
              };
            },
          { btoa: es, atob: eo } = globalThis;
        function ea(e) {
          let t = eo(e.replace(/-/g, "+").replace(/_/g, "/"));
          return Uint8Array.from(t, (e) => e.codePointAt(0));
        }
        function el(e) {
          let t = "";
          for (let n = 0; n < e.length; n++) t += String.fromCodePoint(e[n]);
          return es(t);
        }
        function ec(e) {
          return null == e ? void 0 : e.replace(/\/$/, "");
        }
      },
      70542: (e, t, n) => {
        "use strict";
        n.d(t, { _: () => s });
        var r = n(58342);
        let i = r.Ik({
            NEXT_PUBLIC_SUPABASE_URL: r.Yj().url(),
            NEXT_PUBLIC_SUPABASE_ANON_KEY: r.Yj().min(1),
            NEXT_PUBLIC_APP_URL: r.Yj().url().optional(),
            STRIPE_SECRET_KEY: r.Yj().optional(),
            STRIPE_WEBHOOK_SECRET: r.Yj().optional(),
            OPENAI_API_KEY: r.Yj().optional(),
            ANTHROPIC_API_KEY: r.Yj().optional(),
            GOOGLE_AI_API_KEY: r.Yj().optional(),
            NEXT_PUBLIC_ANALYTICS_ID: r.Yj().optional(),
          }),
          s = (() => {
            let e = i.safeParse(process.env);
            if (!e.success)
              throw (
                (console.error(
                  "❌ Invalid environment variables:",
                  e.error.flatten().fieldErrors,
                ),
                Error("Invalid environment variables"))
              );
            return e.data;
          })();
      },
      70964: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ZodError = t.quotelessJson = t.ZodIssueCode = void 0);
        let r = n(77749);
        (t.ZodIssueCode = r.util.arrayToEnum([
          "invalid_type",
          "invalid_literal",
          "custom",
          "invalid_union",
          "invalid_union_discriminator",
          "invalid_enum_value",
          "unrecognized_keys",
          "invalid_arguments",
          "invalid_return_type",
          "invalid_date",
          "invalid_string",
          "too_small",
          "too_big",
          "invalid_intersection_types",
          "not_multiple_of",
          "not_finite",
        ])),
          (t.quotelessJson = (e) =>
            JSON.stringify(e, null, 2).replace(/"([^"]+)":/g, "$1:"));
        class i extends Error {
          get errors() {
            return this.issues;
          }
          constructor(e) {
            super(),
              (this.issues = []),
              (this.addIssue = (e) => {
                this.issues = [...this.issues, e];
              }),
              (this.addIssues = (e = []) => {
                this.issues = [...this.issues, ...e];
              });
            let t = new.target.prototype;
            Object.setPrototypeOf
              ? Object.setPrototypeOf(this, t)
              : (this.__proto__ = t),
              (this.name = "ZodError"),
              (this.issues = e);
          }
          format(e) {
            let t =
                e ||
                function (e) {
                  return e.message;
                },
              n = { _errors: [] },
              r = (e) => {
                for (let i of e.issues)
                  if ("invalid_union" === i.code) i.unionErrors.map(r);
                  else if ("invalid_return_type" === i.code)
                    r(i.returnTypeError);
                  else if ("invalid_arguments" === i.code) r(i.argumentsError);
                  else if (0 === i.path.length) n._errors.push(t(i));
                  else {
                    let e = n,
                      r = 0;
                    for (; r < i.path.length; ) {
                      let n = i.path[r];
                      r === i.path.length - 1
                        ? ((e[n] = e[n] || { _errors: [] }),
                          e[n]._errors.push(t(i)))
                        : (e[n] = e[n] || { _errors: [] }),
                        (e = e[n]),
                        r++;
                    }
                  }
              };
            return r(this), n;
          }
          static assert(e) {
            if (!(e instanceof i)) throw Error(`Not a ZodError: ${e}`);
          }
          toString() {
            return this.message;
          }
          get message() {
            return JSON.stringify(this.issues, r.util.jsonStringifyReplacer, 2);
          }
          get isEmpty() {
            return 0 === this.issues.length;
          }
          flatten(e = (e) => e.message) {
            let t = {},
              n = [];
            for (let r of this.issues)
              if (r.path.length > 0) {
                let n = r.path[0];
                (t[n] = t[n] || []), t[n].push(e(r));
              } else n.push(e(r));
            return { formErrors: n, fieldErrors: t };
          }
          get formErrors() {
            return this.flatten();
          }
        }
        (t.ZodError = i), (i.create = (e) => new i(e));
      },
      71269: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { $: () => h });
            var i = n(61268),
              s = n(415),
              o = n(98638),
              a = n(84205),
              l = n(65638),
              c = n(28909),
              u = n(15942),
              d = e([c, u]);
            function h({ language: e, code: t, className: n }) {
              let [r, d] = (0, a.useState)(!1),
                h = async () => {
                  await navigator.clipboard.writeText(t),
                    d(!0),
                    setTimeout(() => d(!1), 2e3);
                };
              return (0, i.jsxs)("div", {
                className: (0, u.cn)("relative my-4 rounded-md bg-muted", n),
                children: [
                  (0, i.jsxs)("div", {
                    className:
                      "flex items-center justify-between rounded-t-md bg-muted px-4 py-2 font-mono text-xs",
                    children: [
                      (0, i.jsx)("div", {
                        className: "text-muted-foreground",
                        children: e,
                      }),
                      (0, i.jsxs)(c.$, {
                        variant: "ghost",
                        size: "icon",
                        className: "h-7 w-7",
                        onClick: h,
                        children: [
                          r
                            ? (0, i.jsx)(s.A, {
                                className: "h-3.5 w-3.5 text-primary",
                              })
                            : (0, i.jsx)(o.A, { className: "h-3.5 w-3.5" }),
                          (0, i.jsx)("span", {
                            className: "sr-only",
                            children: "Copy code",
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, i.jsx)(l.Prism, {
                    language: e,
                    customStyle: {
                      margin: 0,
                      borderRadius: "0 0 0.375rem 0.375rem",
                    },
                    children: t,
                  }),
                ],
              });
            }
            ([c, u] = d.then ? (await d)() : d), r();
          } catch (e) {
            r(e);
          }
        });
      },
      71721: (e, t, n) => {
        "use strict";
        n.d(t, { KM: () => l, vE: () => d, xQ: () => u });
        var r = n(92858),
          i = n(43326),
          s = n(43758),
          o = n(13504);
        class a extends o.u {
          static [r.i] = "PgTimestampBuilder";
          constructor(e, t, n) {
            super(e, "date", "PgTimestamp"),
              (this.config.withTimezone = t),
              (this.config.precision = n);
          }
          build(e) {
            return new l(e, this.config);
          }
        }
        class l extends s.Kl {
          static [r.i] = "PgTimestamp";
          withTimezone;
          precision;
          constructor(e, t) {
            super(e, t),
              (this.withTimezone = t.withTimezone),
              (this.precision = t.precision);
          }
          getSQLType() {
            let e = void 0 === this.precision ? "" : ` (${this.precision})`;
            return `timestamp${e}${this.withTimezone ? " with time zone" : ""}`;
          }
          mapFromDriverValue = (e) =>
            new Date(this.withTimezone ? e : e + "+0000");
          mapToDriverValue = (e) => e.toISOString();
        }
        class c extends o.u {
          static [r.i] = "PgTimestampStringBuilder";
          constructor(e, t, n) {
            super(e, "string", "PgTimestampString"),
              (this.config.withTimezone = t),
              (this.config.precision = n);
          }
          build(e) {
            return new u(e, this.config);
          }
        }
        class u extends s.Kl {
          static [r.i] = "PgTimestampString";
          withTimezone;
          precision;
          constructor(e, t) {
            super(e, t),
              (this.withTimezone = t.withTimezone),
              (this.precision = t.precision);
          }
          getSQLType() {
            let e = void 0 === this.precision ? "" : `(${this.precision})`;
            return `timestamp${e}${this.withTimezone ? " with time zone" : ""}`;
          }
        }
        function d(e, t = {}) {
          let { name: n, config: r } = (0, i.Ll)(e, t);
          return r?.mode === "string"
            ? new c(n, r.withTimezone ?? !1, r.precision)
            : new a(n, r?.withTimezone ?? !1, r?.precision);
        }
      },
      71808: (e, t, n) => {
        "use strict";
        n.d(t, { V: () => d });
        var r = n(61268),
          i = n(98849),
          s = n.n(i),
          o = n(46837),
          a = n(81578),
          l = n(84205);
        let c = {
          latitude: 37.763283,
          longitude: -122.41286,
          generationtime_ms: 0.027894973754882813,
          utc_offset_seconds: 0,
          timezone: "GMT",
          timezone_abbreviation: "GMT",
          elevation: 18,
          current_units: {
            time: "iso8601",
            interval: "seconds",
            temperature_2m: "\xb0C",
          },
          current: {
            time: "2024-10-07T19:30",
            interval: 900,
            temperature_2m: 29.3,
          },
          hourly_units: { time: "iso8601", temperature_2m: "\xb0C" },
          hourly: {
            time: [
              "2024-10-07T00:00",
              "2024-10-07T01:00",
              "2024-10-07T02:00",
              "2024-10-07T03:00",
              "2024-10-07T04:00",
              "2024-10-07T05:00",
              "2024-10-07T06:00",
              "2024-10-07T07:00",
              "2024-10-07T08:00",
              "2024-10-07T09:00",
              "2024-10-07T10:00",
              "2024-10-07T11:00",
              "2024-10-07T12:00",
              "2024-10-07T13:00",
              "2024-10-07T14:00",
              "2024-10-07T15:00",
              "2024-10-07T16:00",
              "2024-10-07T17:00",
              "2024-10-07T18:00",
              "2024-10-07T19:00",
              "2024-10-07T20:00",
              "2024-10-07T21:00",
              "2024-10-07T22:00",
              "2024-10-07T23:00",
              "2024-10-08T00:00",
              "2024-10-08T01:00",
              "2024-10-08T02:00",
              "2024-10-08T03:00",
              "2024-10-08T04:00",
              "2024-10-08T05:00",
              "2024-10-08T06:00",
              "2024-10-08T07:00",
              "2024-10-08T08:00",
              "2024-10-08T09:00",
              "2024-10-08T10:00",
              "2024-10-08T11:00",
              "2024-10-08T12:00",
              "2024-10-08T13:00",
              "2024-10-08T14:00",
              "2024-10-08T15:00",
              "2024-10-08T16:00",
              "2024-10-08T17:00",
              "2024-10-08T18:00",
              "2024-10-08T19:00",
              "2024-10-08T20:00",
              "2024-10-08T21:00",
              "2024-10-08T22:00",
              "2024-10-08T23:00",
              "2024-10-09T00:00",
              "2024-10-09T01:00",
              "2024-10-09T02:00",
              "2024-10-09T03:00",
              "2024-10-09T04:00",
              "2024-10-09T05:00",
              "2024-10-09T06:00",
              "2024-10-09T07:00",
              "2024-10-09T08:00",
              "2024-10-09T09:00",
              "2024-10-09T10:00",
              "2024-10-09T11:00",
              "2024-10-09T12:00",
              "2024-10-09T13:00",
              "2024-10-09T14:00",
              "2024-10-09T15:00",
              "2024-10-09T16:00",
              "2024-10-09T17:00",
              "2024-10-09T18:00",
              "2024-10-09T19:00",
              "2024-10-09T20:00",
              "2024-10-09T21:00",
              "2024-10-09T22:00",
              "2024-10-09T23:00",
              "2024-10-10T00:00",
              "2024-10-10T01:00",
              "2024-10-10T02:00",
              "2024-10-10T03:00",
              "2024-10-10T04:00",
              "2024-10-10T05:00",
              "2024-10-10T06:00",
              "2024-10-10T07:00",
              "2024-10-10T08:00",
              "2024-10-10T09:00",
              "2024-10-10T10:00",
              "2024-10-10T11:00",
              "2024-10-10T12:00",
              "2024-10-10T13:00",
              "2024-10-10T14:00",
              "2024-10-10T15:00",
              "2024-10-10T16:00",
              "2024-10-10T17:00",
              "2024-10-10T18:00",
              "2024-10-10T19:00",
              "2024-10-10T20:00",
              "2024-10-10T21:00",
              "2024-10-10T22:00",
              "2024-10-10T23:00",
              "2024-10-11T00:00",
              "2024-10-11T01:00",
              "2024-10-11T02:00",
              "2024-10-11T03:00",
            ],
            temperature_2m: [
              36.6, 32.8, 29.5, 28.6, 29.2, 28.2, 27.5, 26.6, 26.5, 26, 25,
              23.5, 23.9, 24.2, 22.9, 21, 24, 28.1, 31.4, 33.9, 32.1, 28.9,
              26.9, 25.2, 23, 21.1, 19.6, 18.6, 17.7, 16.8, 16.2, 15.5, 14.9,
              14.4, 14.2, 13.7, 13.3, 12.9, 12.5, 13.5, 15.8, 17.7, 19.6, 21,
              21.9, 22.3, 22, 20.7, 18.9, 17.9, 17.3, 17, 16.7, 16.2, 15.6,
              15.2, 15, 15, 15.1, 14.8, 14.8, 14.9, 14.7, 14.8, 15.3, 16.2,
              17.9, 19.6, 20.5, 21.6, 21, 20.7, 19.3, 18.7, 18.4, 17.9, 17.3,
              17, 17, 16.8, 16.4, 16.2, 16, 15.8, 15.7, 15.4, 15.4, 16.1, 16.7,
              17, 18.6, 19, 19.5, 19.4, 18.5, 17.9, 17.5, 16.7, 16.3, 16.1,
            ],
          },
          daily_units: {
            time: "iso8601",
            sunrise: "iso8601",
            sunset: "iso8601",
          },
          daily: {
            time: [
              "2024-10-07",
              "2024-10-08",
              "2024-10-09",
              "2024-10-10",
              "2024-10-11",
            ],
            sunrise: [
              "2024-10-07T07:15",
              "2024-10-08T07:16",
              "2024-10-09T07:17",
              "2024-10-10T07:18",
              "2024-10-11T07:19",
            ],
            sunset: [
              "2024-10-07T19:00",
              "2024-10-08T18:58",
              "2024-10-09T18:57",
              "2024-10-10T18:55",
              "2024-10-11T18:54",
            ],
          },
        };
        function u(e) {
          return Math.ceil(e);
        }
        function d({ weatherAtLocation: e = c }) {
          let t = Math.max(...e.hourly.temperature_2m.slice(0, 24)),
            n = Math.min(...e.hourly.temperature_2m.slice(0, 24)),
            i = (function (e, t, n) {
              let r = +(0, o.a)(e, void 0),
                [i, s] = [
                  +(0, o.a)(t.start, void 0),
                  +(0, o.a)(t.end, n?.in),
                ].sort((e, t) => e - t);
              return r >= i && r <= s;
            })(new Date(e.current.time), {
              start: new Date(e.daily.sunrise[0]),
              end: new Date(e.daily.sunset[0]),
            }),
            [d, h] = (0, l.useState)(!1),
            p = d ? 5 : 6,
            f = e.hourly.time.findIndex(
              (t) => new Date(t) >= new Date(e.current.time),
            ),
            m = e.hourly.time.slice(f, f + p),
            g = e.hourly.temperature_2m.slice(f, f + p);
          return (0, r.jsxs)("div", {
            className: s()(
              "flex flex-col gap-4 rounded-2xl p-4 skeleton-bg max-w-[500px]",
              { "bg-blue-400": i },
              { "bg-indigo-900": !i },
            ),
            children: [
              (0, r.jsxs)("div", {
                className: "flex flex-row justify-between items-center",
                children: [
                  (0, r.jsxs)("div", {
                    className: "flex flex-row gap-2 items-center",
                    children: [
                      (0, r.jsx)("div", {
                        className: s()(
                          "size-10 rounded-full skeleton-div",
                          { "bg-yellow-300": i },
                          { "bg-indigo-100": !i },
                        ),
                      }),
                      (0, r.jsxs)("div", {
                        className: "text-4xl font-medium text-blue-50",
                        children: [
                          u(e.current.temperature_2m),
                          e.current_units.temperature_2m,
                        ],
                      }),
                    ],
                  }),
                  (0, r.jsx)("div", {
                    className: "text-blue-50",
                    children: `H:${u(t)}\xb0 L:${u(n)}\xb0`,
                  }),
                ],
              }),
              (0, r.jsx)("div", {
                className: "flex flex-row justify-between",
                children: m.map((t, n) =>
                  (0, r.jsxs)(
                    "div",
                    {
                      className: "flex flex-col items-center gap-1",
                      children: [
                        (0, r.jsx)("div", {
                          className: "text-blue-100 text-xs",
                          children: (0, a.GP)(new Date(t), "ha"),
                        }),
                        (0, r.jsx)("div", {
                          className: s()(
                            "size-6 rounded-full skeleton-div",
                            { "bg-yellow-300": i },
                            { "bg-indigo-200": !i },
                          ),
                        }),
                        (0, r.jsxs)("div", {
                          className: "text-blue-50 text-sm",
                          children: [u(g[n]), e.hourly_units.temperature_2m],
                        }),
                      ],
                    },
                    t,
                  ),
                ),
              }),
            ],
          });
        }
      },
      71850: (e, t, n) => {
        "use strict";
        var r,
          i = n(22115),
          s = n(82681),
          o = n(44048);
        function a(e) {
          var t = "https://react.dev/errors/" + e;
          if (1 < arguments.length) {
            t += "?args[]=" + encodeURIComponent(arguments[1]);
            for (var n = 2; n < arguments.length; n++)
              t += "&args[]=" + encodeURIComponent(arguments[n]);
          }
          return (
            "Minified React error #" +
            e +
            "; visit " +
            t +
            " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
          );
        }
        function l(e) {
          var t = e,
            n = e;
          if (e.alternate) for (; t.return; ) t = t.return;
          else {
            e = t;
            do 0 != (4098 & (t = e).flags) && (n = t.return), (e = t.return);
            while (e);
          }
          return 3 === t.tag ? n : null;
        }
        function c(e) {
          if (13 === e.tag) {
            var t = e.memoizedState;
            if (
              (null === t &&
                null !== (e = e.alternate) &&
                (t = e.memoizedState),
              null !== t)
            )
              return t.dehydrated;
          }
          return null;
        }
        function u(e) {
          if (l(e) !== e) throw Error(a(188));
        }
        var d = Object.assign,
          h = Symbol.for("react.element"),
          p = Symbol.for("react.transitional.element"),
          f = Symbol.for("react.portal"),
          m = Symbol.for("react.fragment"),
          g = Symbol.for("react.strict_mode"),
          y = Symbol.for("react.profiler"),
          v = Symbol.for("react.provider"),
          b = Symbol.for("react.consumer"),
          x = Symbol.for("react.context"),
          k = Symbol.for("react.forward_ref"),
          w = Symbol.for("react.suspense"),
          _ = Symbol.for("react.suspense_list"),
          O = Symbol.for("react.memo"),
          T = Symbol.for("react.lazy");
        Symbol.for("react.scope");
        var S = Symbol.for("react.activity");
        Symbol.for("react.legacy_hidden"), Symbol.for("react.tracing_marker");
        var E = Symbol.for("react.memo_cache_sentinel");
        Symbol.for("react.view_transition");
        var C = Symbol.iterator;
        function A(e) {
          return null === e || "object" != typeof e
            ? null
            : "function" == typeof (e = (C && e[C]) || e["@@iterator"])
              ? e
              : null;
        }
        var N = Symbol.for("react.client.reference"),
          I = Array.isArray,
          D = s.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
          P = o.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
          R = { pending: !1, data: null, method: null, action: null },
          M = [],
          L = -1;
        function j(e) {
          return { current: e };
        }
        function F(e) {
          0 > L || ((e.current = M[L]), (M[L] = null), L--);
        }
        function B(e, t) {
          (M[++L] = e.current), (e.current = t);
        }
        var z = j(null),
          $ = j(null),
          q = j(null),
          U = j(null);
        function H(e, t) {
          switch ((B(q, t), B($, e), B(z, null), t.nodeType)) {
            case 9:
            case 11:
              e = (e = t.documentElement) && (e = e.namespaceURI) ? cs(e) : 0;
              break;
            default:
              if (((e = t.tagName), (t = t.namespaceURI)))
                e = co((t = cs(t)), e);
              else
                switch (e) {
                  case "svg":
                    e = 1;
                    break;
                  case "math":
                    e = 2;
                    break;
                  default:
                    e = 0;
                }
          }
          F(z), B(z, e);
        }
        function Q() {
          F(z), F($), F(q);
        }
        function V(e) {
          null !== e.memoizedState && B(U, e);
          var t = z.current,
            n = co(t, e.type);
          t !== n && (B($, e), B(z, n));
        }
        function W(e) {
          $.current === e && (F(z), F($)),
            U.current === e && (F(U), (cG._currentValue = R));
        }
        var Z = Object.prototype.hasOwnProperty,
          G = i.unstable_scheduleCallback,
          Y = i.unstable_cancelCallback,
          K = i.unstable_shouldYield,
          X = i.unstable_requestPaint,
          J = i.unstable_now,
          ee = i.unstable_getCurrentPriorityLevel,
          et = i.unstable_ImmediatePriority,
          en = i.unstable_UserBlockingPriority,
          er = i.unstable_NormalPriority,
          ei = i.unstable_LowPriority,
          es = i.unstable_IdlePriority,
          eo = i.log,
          ea = i.unstable_setDisableYieldValue,
          el = null,
          ec = null;
        function eu(e) {
          if (
            ("function" == typeof eo && ea(e),
            ec && "function" == typeof ec.setStrictMode)
          )
            try {
              ec.setStrictMode(el, e);
            } catch (e) {}
        }
        var ed = Math.clz32
            ? Math.clz32
            : function (e) {
                return 0 == (e >>>= 0) ? 32 : (31 - ((eh(e) / ep) | 0)) | 0;
              },
          eh = Math.log,
          ep = Math.LN2,
          ef = 256,
          em = 4194304;
        function eg(e) {
          var t = 42 & e;
          if (0 !== t) return t;
          switch (e & -e) {
            case 1:
              return 1;
            case 2:
              return 2;
            case 4:
              return 4;
            case 8:
              return 8;
            case 16:
              return 16;
            case 32:
              return 32;
            case 64:
              return 64;
            case 128:
              return 128;
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return 4194048 & e;
            case 4194304:
            case 8388608:
            case 0x1000000:
            case 0x2000000:
              return 0x3c00000 & e;
            case 0x4000000:
              return 0x4000000;
            case 0x8000000:
              return 0x8000000;
            case 0x10000000:
              return 0x10000000;
            case 0x20000000:
              return 0x20000000;
            case 0x40000000:
              return 0;
            default:
              return e;
          }
        }
        function ey(e, t, n) {
          var r = e.pendingLanes;
          if (0 === r) return 0;
          var i = 0,
            s = e.suspendedLanes,
            o = e.pingedLanes;
          e = e.warmLanes;
          var a = 0x7ffffff & r;
          return (
            0 !== a
              ? 0 != (r = a & ~s)
                ? (i = eg(r))
                : 0 != (o &= a)
                  ? (i = eg(o))
                  : n || (0 != (n = a & ~e) && (i = eg(n)))
              : 0 != (a = r & ~s)
                ? (i = eg(a))
                : 0 !== o
                  ? (i = eg(o))
                  : n || (0 != (n = r & ~e) && (i = eg(n))),
            0 === i
              ? 0
              : 0 !== t &&
                  t !== i &&
                  0 == (t & s) &&
                  ((s = i & -i) >= (n = t & -t) ||
                    (32 === s && 0 != (4194048 & n)))
                ? t
                : i
          );
        }
        function ev(e, t) {
          return (
            0 == (e.pendingLanes & ~(e.suspendedLanes & ~e.pingedLanes) & t)
          );
        }
        function eb() {
          var e = ef;
          return 0 == (4194048 & (ef <<= 1)) && (ef = 256), e;
        }
        function ex() {
          var e = em;
          return 0 == (0x3c00000 & (em <<= 1)) && (em = 4194304), e;
        }
        function ek(e) {
          for (var t = [], n = 0; 31 > n; n++) t.push(e);
          return t;
        }
        function ew(e, t) {
          (e.pendingLanes |= t),
            0x10000000 !== t &&
              ((e.suspendedLanes = 0), (e.pingedLanes = 0), (e.warmLanes = 0));
        }
        function e_(e, t, n) {
          (e.pendingLanes |= t), (e.suspendedLanes &= ~t);
          var r = 31 - ed(t);
          (e.entangledLanes |= t),
            (e.entanglements[r] =
              0x40000000 | e.entanglements[r] | (4194090 & n));
        }
        function eO(e, t) {
          var n = (e.entangledLanes |= t);
          for (e = e.entanglements; n; ) {
            var r = 31 - ed(n),
              i = 1 << r;
            (i & t) | (e[r] & t) && (e[r] |= t), (n &= ~i);
          }
        }
        function eT(e) {
          switch (e) {
            case 2:
              e = 1;
              break;
            case 8:
              e = 4;
              break;
            case 32:
              e = 16;
              break;
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 0x1000000:
            case 0x2000000:
              e = 128;
              break;
            case 0x10000000:
              e = 0x8000000;
              break;
            default:
              e = 0;
          }
          return e;
        }
        function eS(e) {
          return 2 < (e &= -e)
            ? 8 < e
              ? 0 != (0x7ffffff & e)
                ? 32
                : 0x10000000
              : 8
            : 2;
        }
        function eE() {
          var e = P.p;
          return 0 !== e ? e : void 0 === (e = window.event) ? 32 : c9(e.type);
        }
        var eC = Math.random().toString(36).slice(2),
          eA = "__reactFiber$" + eC,
          eN = "__reactProps$" + eC,
          eI = "__reactContainer$" + eC,
          eD = "__reactEvents$" + eC,
          eP = "__reactListeners$" + eC,
          eR = "__reactHandles$" + eC,
          eM = "__reactResources$" + eC,
          eL = "__reactMarker$" + eC;
        function ej(e) {
          delete e[eA], delete e[eN], delete e[eD], delete e[eP], delete e[eR];
        }
        function eF(e) {
          var t = e[eA];
          if (t) return t;
          for (var n = e.parentNode; n; ) {
            if ((t = n[eI] || n[eA])) {
              if (
                ((n = t.alternate),
                null !== t.child || (null !== n && null !== n.child))
              )
                for (e = cx(e); null !== e; ) {
                  if ((n = e[eA])) return n;
                  e = cx(e);
                }
              return t;
            }
            n = (e = n).parentNode;
          }
          return null;
        }
        function eB(e) {
          if ((e = e[eA] || e[eI])) {
            var t = e.tag;
            if (
              5 === t ||
              6 === t ||
              13 === t ||
              26 === t ||
              27 === t ||
              3 === t
            )
              return e;
          }
          return null;
        }
        function ez(e) {
          var t = e.tag;
          if (5 === t || 26 === t || 27 === t || 6 === t) return e.stateNode;
          throw Error(a(33));
        }
        function e$(e) {
          var t = e[eM];
          return (
            t ||
              (t = e[eM] =
                { hoistableStyles: new Map(), hoistableScripts: new Map() }),
            t
          );
        }
        function eq(e) {
          e[eL] = !0;
        }
        var eU = new Set(),
          eH = {};
        function eQ(e, t) {
          eV(e, t), eV(e + "Capture", t);
        }
        function eV(e, t) {
          for (eH[e] = t, e = 0; e < t.length; e++) eU.add(t[e]);
        }
        var eW = RegExp(
            "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$",
          ),
          eZ = {},
          eG = {};
        function eY(e, t, n) {
          if (
            Z.call(eG, t) ||
            (!Z.call(eZ, t) && (eW.test(t) ? (eG[t] = !0) : ((eZ[t] = !0), !1)))
          )
            if (null === n) e.removeAttribute(t);
            else {
              switch (typeof n) {
                case "undefined":
                case "function":
                case "symbol":
                  e.removeAttribute(t);
                  return;
                case "boolean":
                  var r = t.toLowerCase().slice(0, 5);
                  if ("data-" !== r && "aria-" !== r)
                    return void e.removeAttribute(t);
              }
              e.setAttribute(t, "" + n);
            }
        }
        function eK(e, t, n) {
          if (null === n) e.removeAttribute(t);
          else {
            switch (typeof n) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                e.removeAttribute(t);
                return;
            }
            e.setAttribute(t, "" + n);
          }
        }
        function eX(e, t, n, r) {
          if (null === r) e.removeAttribute(n);
          else {
            switch (typeof r) {
              case "undefined":
              case "function":
              case "symbol":
              case "boolean":
                e.removeAttribute(n);
                return;
            }
            e.setAttributeNS(t, n, "" + r);
          }
        }
        function eJ(e) {
          if (void 0 === tP)
            try {
              throw Error();
            } catch (e) {
              var t = e.stack.trim().match(/\n( *(at )?)/);
              (tP = (t && t[1]) || ""),
                (tR =
                  -1 < e.stack.indexOf("\n    at")
                    ? " (<anonymous>)"
                    : -1 < e.stack.indexOf("@")
                      ? "@unknown:0:0"
                      : "");
            }
          return "\n" + tP + e + tR;
        }
        var e0 = !1;
        function e1(e, t) {
          if (!e || e0) return "";
          e0 = !0;
          var n = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          try {
            var r = {
              DetermineComponentFrameRoot: function () {
                try {
                  if (t) {
                    var n = function () {
                      throw Error();
                    };
                    if (
                      (Object.defineProperty(n.prototype, "props", {
                        set: function () {
                          throw Error();
                        },
                      }),
                      "object" == typeof Reflect && Reflect.construct)
                    ) {
                      try {
                        Reflect.construct(n, []);
                      } catch (e) {
                        var r = e;
                      }
                      Reflect.construct(e, [], n);
                    } else {
                      try {
                        n.call();
                      } catch (e) {
                        r = e;
                      }
                      e.call(n.prototype);
                    }
                  } else {
                    try {
                      throw Error();
                    } catch (e) {
                      r = e;
                    }
                    (n = e()) &&
                      "function" == typeof n.catch &&
                      n.catch(function () {});
                  }
                } catch (e) {
                  if (e && r && "string" == typeof e.stack)
                    return [e.stack, r.stack];
                }
                return [null, null];
              },
            };
            r.DetermineComponentFrameRoot.displayName =
              "DetermineComponentFrameRoot";
            var i = Object.getOwnPropertyDescriptor(
              r.DetermineComponentFrameRoot,
              "name",
            );
            i &&
              i.configurable &&
              Object.defineProperty(r.DetermineComponentFrameRoot, "name", {
                value: "DetermineComponentFrameRoot",
              });
            var s = r.DetermineComponentFrameRoot(),
              o = s[0],
              a = s[1];
            if (o && a) {
              var l = o.split("\n"),
                c = a.split("\n");
              for (
                i = r = 0;
                r < l.length && !l[r].includes("DetermineComponentFrameRoot");

              )
                r++;
              for (
                ;
                i < c.length && !c[i].includes("DetermineComponentFrameRoot");

              )
                i++;
              if (r === l.length || i === c.length)
                for (
                  r = l.length - 1, i = c.length - 1;
                  1 <= r && 0 <= i && l[r] !== c[i];

                )
                  i--;
              for (; 1 <= r && 0 <= i; r--, i--)
                if (l[r] !== c[i]) {
                  if (1 !== r || 1 !== i)
                    do
                      if ((r--, i--, 0 > i || l[r] !== c[i])) {
                        var u = "\n" + l[r].replace(" at new ", " at ");
                        return (
                          e.displayName &&
                            u.includes("<anonymous>") &&
                            (u = u.replace("<anonymous>", e.displayName)),
                          u
                        );
                      }
                    while (1 <= r && 0 <= i);
                  break;
                }
            }
          } finally {
            (e0 = !1), (Error.prepareStackTrace = n);
          }
          return (n = e ? e.displayName || e.name : "") ? eJ(n) : "";
        }
        function e2(e) {
          try {
            var t = "";
            do
              (t += (function (e) {
                switch (e.tag) {
                  case 26:
                  case 27:
                  case 5:
                    return eJ(e.type);
                  case 16:
                    return eJ("Lazy");
                  case 13:
                    return eJ("Suspense");
                  case 19:
                    return eJ("SuspenseList");
                  case 0:
                  case 15:
                    return e1(e.type, !1);
                  case 11:
                    return e1(e.type.render, !1);
                  case 1:
                    return e1(e.type, !0);
                  case 31:
                    return eJ("Activity");
                  default:
                    return "";
                }
              })(e)),
                (e = e.return);
            while (e);
            return t;
          } catch (e) {
            return "\nError generating stack: " + e.message + "\n" + e.stack;
          }
        }
        function e5(e) {
          switch (typeof e) {
            case "bigint":
            case "boolean":
            case "number":
            case "string":
            case "undefined":
            case "object":
              return e;
            default:
              return "";
          }
        }
        function e3(e) {
          var t = e.type;
          return (
            (e = e.nodeName) &&
            "input" === e.toLowerCase() &&
            ("checkbox" === t || "radio" === t)
          );
        }
        function e4(e) {
          e._valueTracker ||
            (e._valueTracker = (function (e) {
              var t = e3(e) ? "checked" : "value",
                n = Object.getOwnPropertyDescriptor(e.constructor.prototype, t),
                r = "" + e[t];
              if (
                !e.hasOwnProperty(t) &&
                void 0 !== n &&
                "function" == typeof n.get &&
                "function" == typeof n.set
              ) {
                var i = n.get,
                  s = n.set;
                return (
                  Object.defineProperty(e, t, {
                    configurable: !0,
                    get: function () {
                      return i.call(this);
                    },
                    set: function (e) {
                      (r = "" + e), s.call(this, e);
                    },
                  }),
                  Object.defineProperty(e, t, { enumerable: n.enumerable }),
                  {
                    getValue: function () {
                      return r;
                    },
                    setValue: function (e) {
                      r = "" + e;
                    },
                    stopTracking: function () {
                      (e._valueTracker = null), delete e[t];
                    },
                  }
                );
              }
            })(e));
        }
        function e8(e) {
          if (!e) return !1;
          var t = e._valueTracker;
          if (!t) return !0;
          var n = t.getValue(),
            r = "";
          return (
            e && (r = e3(e) ? (e.checked ? "true" : "false") : e.value),
            (e = r) !== n && (t.setValue(e), !0)
          );
        }
        function e6(e) {
          if (
            void 0 ===
            (e = e || ("undefined" != typeof document ? document : void 0))
          )
            return null;
          try {
            return e.activeElement || e.body;
          } catch (t) {
            return e.body;
          }
        }
        var e9 = /[\n"\\]/g;
        function e7(e) {
          return e.replace(e9, function (e) {
            return "\\" + e.charCodeAt(0).toString(16) + " ";
          });
        }
        function te(e, t, n, r, i, s, o, a) {
          (e.name = ""),
            null != o &&
            "function" != typeof o &&
            "symbol" != typeof o &&
            "boolean" != typeof o
              ? (e.type = o)
              : e.removeAttribute("type"),
            null != t
              ? "number" === o
                ? ((0 === t && "" === e.value) || e.value != t) &&
                  (e.value = "" + e5(t))
                : e.value !== "" + e5(t) && (e.value = "" + e5(t))
              : ("submit" !== o && "reset" !== o) || e.removeAttribute("value"),
            null != t
              ? tn(e, o, e5(t))
              : null != n
                ? tn(e, o, e5(n))
                : null != r && e.removeAttribute("value"),
            null == i && null != s && (e.defaultChecked = !!s),
            null != i &&
              (e.checked = i && "function" != typeof i && "symbol" != typeof i),
            null != a &&
            "function" != typeof a &&
            "symbol" != typeof a &&
            "boolean" != typeof a
              ? (e.name = "" + e5(a))
              : e.removeAttribute("name");
        }
        function tt(e, t, n, r, i, s, o, a) {
          if (
            (null != s &&
              "function" != typeof s &&
              "symbol" != typeof s &&
              "boolean" != typeof s &&
              (e.type = s),
            null != t || null != n)
          ) {
            if (("submit" === s || "reset" === s) && null == t) return;
            (n = null != n ? "" + e5(n) : ""),
              (t = null != t ? "" + e5(t) : n),
              a || t === e.value || (e.value = t),
              (e.defaultValue = t);
          }
          (r =
            "function" != typeof (r = null != r ? r : i) &&
            "symbol" != typeof r &&
            !!r),
            (e.checked = a ? e.checked : !!r),
            (e.defaultChecked = !!r),
            null != o &&
              "function" != typeof o &&
              "symbol" != typeof o &&
              "boolean" != typeof o &&
              (e.name = o);
        }
        function tn(e, t, n) {
          ("number" === t && e6(e.ownerDocument) === e) ||
            e.defaultValue === "" + n ||
            (e.defaultValue = "" + n);
        }
        function tr(e, t, n, r) {
          if (((e = e.options), t)) {
            t = {};
            for (var i = 0; i < n.length; i++) t["$" + n[i]] = !0;
            for (n = 0; n < e.length; n++)
              (i = t.hasOwnProperty("$" + e[n].value)),
                e[n].selected !== i && (e[n].selected = i),
                i && r && (e[n].defaultSelected = !0);
          } else {
            for (i = 0, n = "" + e5(n), t = null; i < e.length; i++) {
              if (e[i].value === n) {
                (e[i].selected = !0), r && (e[i].defaultSelected = !0);
                return;
              }
              null !== t || e[i].disabled || (t = e[i]);
            }
            null !== t && (t.selected = !0);
          }
        }
        function ti(e, t, n) {
          if (
            null != t &&
            ((t = "" + e5(t)) !== e.value && (e.value = t), null == n)
          ) {
            e.defaultValue !== t && (e.defaultValue = t);
            return;
          }
          e.defaultValue = null != n ? "" + e5(n) : "";
        }
        function ts(e, t, n, r) {
          if (null == t) {
            if (null != r) {
              if (null != n) throw Error(a(92));
              if (I(r)) {
                if (1 < r.length) throw Error(a(93));
                r = r[0];
              }
              n = r;
            }
            null == n && (n = ""), (t = n);
          }
          (e.defaultValue = n = e5(t)),
            (r = e.textContent) === n &&
              "" !== r &&
              null !== r &&
              (e.value = r);
        }
        function to(e, t) {
          if (t) {
            var n = e.firstChild;
            if (n && n === e.lastChild && 3 === n.nodeType) {
              n.nodeValue = t;
              return;
            }
          }
          e.textContent = t;
        }
        var ta = new Set(
          "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
            " ",
          ),
        );
        function tl(e, t, n) {
          var r = 0 === t.indexOf("--");
          null == n || "boolean" == typeof n || "" === n
            ? r
              ? e.setProperty(t, "")
              : "float" === t
                ? (e.cssFloat = "")
                : (e[t] = "")
            : r
              ? e.setProperty(t, n)
              : "number" != typeof n || 0 === n || ta.has(t)
                ? "float" === t
                  ? (e.cssFloat = n)
                  : (e[t] = ("" + n).trim())
                : (e[t] = n + "px");
        }
        function tc(e, t, n) {
          if (null != t && "object" != typeof t) throw Error(a(62));
          if (((e = e.style), null != n)) {
            for (var r in n)
              !n.hasOwnProperty(r) ||
                (null != t && t.hasOwnProperty(r)) ||
                (0 === r.indexOf("--")
                  ? e.setProperty(r, "")
                  : "float" === r
                    ? (e.cssFloat = "")
                    : (e[r] = ""));
            for (var i in t)
              (r = t[i]), t.hasOwnProperty(i) && n[i] !== r && tl(e, i, r);
          } else for (var s in t) t.hasOwnProperty(s) && tl(e, s, t[s]);
        }
        function tu(e) {
          if (-1 === e.indexOf("-")) return !1;
          switch (e) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return !1;
            default:
              return !0;
          }
        }
        var td = new Map([
            ["acceptCharset", "accept-charset"],
            ["htmlFor", "for"],
            ["httpEquiv", "http-equiv"],
            ["crossOrigin", "crossorigin"],
            ["accentHeight", "accent-height"],
            ["alignmentBaseline", "alignment-baseline"],
            ["arabicForm", "arabic-form"],
            ["baselineShift", "baseline-shift"],
            ["capHeight", "cap-height"],
            ["clipPath", "clip-path"],
            ["clipRule", "clip-rule"],
            ["colorInterpolation", "color-interpolation"],
            ["colorInterpolationFilters", "color-interpolation-filters"],
            ["colorProfile", "color-profile"],
            ["colorRendering", "color-rendering"],
            ["dominantBaseline", "dominant-baseline"],
            ["enableBackground", "enable-background"],
            ["fillOpacity", "fill-opacity"],
            ["fillRule", "fill-rule"],
            ["floodColor", "flood-color"],
            ["floodOpacity", "flood-opacity"],
            ["fontFamily", "font-family"],
            ["fontSize", "font-size"],
            ["fontSizeAdjust", "font-size-adjust"],
            ["fontStretch", "font-stretch"],
            ["fontStyle", "font-style"],
            ["fontVariant", "font-variant"],
            ["fontWeight", "font-weight"],
            ["glyphName", "glyph-name"],
            ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
            ["glyphOrientationVertical", "glyph-orientation-vertical"],
            ["horizAdvX", "horiz-adv-x"],
            ["horizOriginX", "horiz-origin-x"],
            ["imageRendering", "image-rendering"],
            ["letterSpacing", "letter-spacing"],
            ["lightingColor", "lighting-color"],
            ["markerEnd", "marker-end"],
            ["markerMid", "marker-mid"],
            ["markerStart", "marker-start"],
            ["overlinePosition", "overline-position"],
            ["overlineThickness", "overline-thickness"],
            ["paintOrder", "paint-order"],
            ["panose-1", "panose-1"],
            ["pointerEvents", "pointer-events"],
            ["renderingIntent", "rendering-intent"],
            ["shapeRendering", "shape-rendering"],
            ["stopColor", "stop-color"],
            ["stopOpacity", "stop-opacity"],
            ["strikethroughPosition", "strikethrough-position"],
            ["strikethroughThickness", "strikethrough-thickness"],
            ["strokeDasharray", "stroke-dasharray"],
            ["strokeDashoffset", "stroke-dashoffset"],
            ["strokeLinecap", "stroke-linecap"],
            ["strokeLinejoin", "stroke-linejoin"],
            ["strokeMiterlimit", "stroke-miterlimit"],
            ["strokeOpacity", "stroke-opacity"],
            ["strokeWidth", "stroke-width"],
            ["textAnchor", "text-anchor"],
            ["textDecoration", "text-decoration"],
            ["textRendering", "text-rendering"],
            ["transformOrigin", "transform-origin"],
            ["underlinePosition", "underline-position"],
            ["underlineThickness", "underline-thickness"],
            ["unicodeBidi", "unicode-bidi"],
            ["unicodeRange", "unicode-range"],
            ["unitsPerEm", "units-per-em"],
            ["vAlphabetic", "v-alphabetic"],
            ["vHanging", "v-hanging"],
            ["vIdeographic", "v-ideographic"],
            ["vMathematical", "v-mathematical"],
            ["vectorEffect", "vector-effect"],
            ["vertAdvY", "vert-adv-y"],
            ["vertOriginX", "vert-origin-x"],
            ["vertOriginY", "vert-origin-y"],
            ["wordSpacing", "word-spacing"],
            ["writingMode", "writing-mode"],
            ["xmlnsXlink", "xmlns:xlink"],
            ["xHeight", "x-height"],
          ]),
          th =
            /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
        function tp(e) {
          return th.test("" + e)
            ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')"
            : e;
        }
        var tf = null;
        function tm(e) {
          return (
            (e = e.target || e.srcElement || window).correspondingUseElement &&
              (e = e.correspondingUseElement),
            3 === e.nodeType ? e.parentNode : e
          );
        }
        var tg = null,
          ty = null;
        function tv(e) {
          var t = eB(e);
          if (t && (e = t.stateNode)) {
            var n = e[eN] || null;
            switch (((e = t.stateNode), t.type)) {
              case "input":
                if (
                  (te(
                    e,
                    n.value,
                    n.defaultValue,
                    n.defaultValue,
                    n.checked,
                    n.defaultChecked,
                    n.type,
                    n.name,
                  ),
                  (t = n.name),
                  "radio" === n.type && null != t)
                ) {
                  for (n = e; n.parentNode; ) n = n.parentNode;
                  for (
                    n = n.querySelectorAll(
                      'input[name="' + e7("" + t) + '"][type="radio"]',
                    ),
                      t = 0;
                    t < n.length;
                    t++
                  ) {
                    var r = n[t];
                    if (r !== e && r.form === e.form) {
                      var i = r[eN] || null;
                      if (!i) throw Error(a(90));
                      te(
                        r,
                        i.value,
                        i.defaultValue,
                        i.defaultValue,
                        i.checked,
                        i.defaultChecked,
                        i.type,
                        i.name,
                      );
                    }
                  }
                  for (t = 0; t < n.length; t++)
                    (r = n[t]).form === e.form && e8(r);
                }
                break;
              case "textarea":
                ti(e, n.value, n.defaultValue);
                break;
              case "select":
                null != (t = n.value) && tr(e, !!n.multiple, t, !1);
            }
          }
        }
        var tb = !1;
        function tx(e, t, n) {
          if (tb) return e(t, n);
          tb = !0;
          try {
            return e(t);
          } finally {
            if (
              ((tb = !1),
              (null !== tg || null !== ty) &&
                (le(), tg && ((t = tg), (e = ty), (ty = tg = null), tv(t), e)))
            )
              for (t = 0; t < e.length; t++) tv(e[t]);
          }
        }
        function tk(e, t) {
          var n = e.stateNode;
          if (null === n) return null;
          var r = n[eN] || null;
          if (null === r) return null;
          switch (((n = r[t]), t)) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (r = !r.disabled) ||
                (r =
                  "button" !== (e = e.type) &&
                  "input" !== e &&
                  "select" !== e &&
                  "textarea" !== e),
                (e = !r);
              break;
            default:
              e = !1;
          }
          if (e) return null;
          if (n && "function" != typeof n) throw Error(a(231, t, typeof n));
          return n;
        }
        var tw =
            "undefined" != typeof window &&
            void 0 !== window.document &&
            void 0 !== window.document.createElement,
          t_ = !1;
        if (tw)
          try {
            var tO = {};
            Object.defineProperty(tO, "passive", {
              get: function () {
                t_ = !0;
              },
            }),
              window.addEventListener("test", tO, tO),
              window.removeEventListener("test", tO, tO);
          } catch (e) {
            t_ = !1;
          }
        var tT = null,
          tS = null,
          tE = null;
        function tC() {
          if (tE) return tE;
          var e,
            t,
            n = tS,
            r = n.length,
            i = "value" in tT ? tT.value : tT.textContent,
            s = i.length;
          for (e = 0; e < r && n[e] === i[e]; e++);
          var o = r - e;
          for (t = 1; t <= o && n[r - t] === i[s - t]; t++);
          return (tE = i.slice(e, 1 < t ? 1 - t : void 0));
        }
        function tA(e) {
          var t = e.keyCode;
          return (
            "charCode" in e
              ? 0 === (e = e.charCode) && 13 === t && (e = 13)
              : (e = t),
            10 === e && (e = 13),
            32 <= e || 13 === e ? e : 0
          );
        }
        function tN() {
          return !0;
        }
        function tI() {
          return !1;
        }
        function tD(e) {
          function t(t, n, r, i, s) {
            for (var o in ((this._reactName = t),
            (this._targetInst = r),
            (this.type = n),
            (this.nativeEvent = i),
            (this.target = s),
            (this.currentTarget = null),
            e))
              e.hasOwnProperty(o) && ((t = e[o]), (this[o] = t ? t(i) : i[o]));
            return (
              (this.isDefaultPrevented = (
                null != i.defaultPrevented
                  ? i.defaultPrevented
                  : !1 === i.returnValue
              )
                ? tN
                : tI),
              (this.isPropagationStopped = tI),
              this
            );
          }
          return (
            d(t.prototype, {
              preventDefault: function () {
                this.defaultPrevented = !0;
                var e = this.nativeEvent;
                e &&
                  (e.preventDefault
                    ? e.preventDefault()
                    : "unknown" != typeof e.returnValue && (e.returnValue = !1),
                  (this.isDefaultPrevented = tN));
              },
              stopPropagation: function () {
                var e = this.nativeEvent;
                e &&
                  (e.stopPropagation
                    ? e.stopPropagation()
                    : "unknown" != typeof e.cancelBubble &&
                      (e.cancelBubble = !0),
                  (this.isPropagationStopped = tN));
              },
              persist: function () {},
              isPersistent: tN,
            }),
            t
          );
        }
        var tP,
          tR,
          tM,
          tL,
          tj,
          tF = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function (e) {
              return e.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0,
          },
          tB = tD(tF),
          tz = d({}, tF, { view: 0, detail: 0 }),
          t$ = tD(tz),
          tq = d({}, tz, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: tJ,
            button: 0,
            buttons: 0,
            relatedTarget: function (e) {
              return void 0 === e.relatedTarget
                ? e.fromElement === e.srcElement
                  ? e.toElement
                  : e.fromElement
                : e.relatedTarget;
            },
            movementX: function (e) {
              return "movementX" in e
                ? e.movementX
                : (e !== tj &&
                    (tj && "mousemove" === e.type
                      ? ((tM = e.screenX - tj.screenX),
                        (tL = e.screenY - tj.screenY))
                      : (tL = tM = 0),
                    (tj = e)),
                  tM);
            },
            movementY: function (e) {
              return "movementY" in e ? e.movementY : tL;
            },
          }),
          tU = tD(tq),
          tH = tD(d({}, tq, { dataTransfer: 0 })),
          tQ = tD(d({}, tz, { relatedTarget: 0 })),
          tV = tD(
            d({}, tF, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }),
          ),
          tW = tD(
            d({}, tF, {
              clipboardData: function (e) {
                return "clipboardData" in e
                  ? e.clipboardData
                  : window.clipboardData;
              },
            }),
          ),
          tZ = tD(d({}, tF, { data: 0 })),
          tG = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified",
          },
          tY = {
            8: "Backspace",
            9: "Tab",
            12: "Clear",
            13: "Enter",
            16: "Shift",
            17: "Control",
            18: "Alt",
            19: "Pause",
            20: "CapsLock",
            27: "Escape",
            32: " ",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "ArrowLeft",
            38: "ArrowUp",
            39: "ArrowRight",
            40: "ArrowDown",
            45: "Insert",
            46: "Delete",
            112: "F1",
            113: "F2",
            114: "F3",
            115: "F4",
            116: "F5",
            117: "F6",
            118: "F7",
            119: "F8",
            120: "F9",
            121: "F10",
            122: "F11",
            123: "F12",
            144: "NumLock",
            145: "ScrollLock",
            224: "Meta",
          },
          tK = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey",
          };
        function tX(e) {
          var t = this.nativeEvent;
          return t.getModifierState
            ? t.getModifierState(e)
            : !!(e = tK[e]) && !!t[e];
        }
        function tJ() {
          return tX;
        }
        var t0 = tD(
            d({}, tz, {
              key: function (e) {
                if (e.key) {
                  var t = tG[e.key] || e.key;
                  if ("Unidentified" !== t) return t;
                }
                return "keypress" === e.type
                  ? 13 === (e = tA(e))
                    ? "Enter"
                    : String.fromCharCode(e)
                  : "keydown" === e.type || "keyup" === e.type
                    ? tY[e.keyCode] || "Unidentified"
                    : "";
              },
              code: 0,
              location: 0,
              ctrlKey: 0,
              shiftKey: 0,
              altKey: 0,
              metaKey: 0,
              repeat: 0,
              locale: 0,
              getModifierState: tJ,
              charCode: function (e) {
                return "keypress" === e.type ? tA(e) : 0;
              },
              keyCode: function (e) {
                return "keydown" === e.type || "keyup" === e.type
                  ? e.keyCode
                  : 0;
              },
              which: function (e) {
                return "keypress" === e.type
                  ? tA(e)
                  : "keydown" === e.type || "keyup" === e.type
                    ? e.keyCode
                    : 0;
              },
            }),
          ),
          t1 = tD(
            d({}, tq, {
              pointerId: 0,
              width: 0,
              height: 0,
              pressure: 0,
              tangentialPressure: 0,
              tiltX: 0,
              tiltY: 0,
              twist: 0,
              pointerType: 0,
              isPrimary: 0,
            }),
          ),
          t2 = tD(
            d({}, tz, {
              touches: 0,
              targetTouches: 0,
              changedTouches: 0,
              altKey: 0,
              metaKey: 0,
              ctrlKey: 0,
              shiftKey: 0,
              getModifierState: tJ,
            }),
          ),
          t5 = tD(
            d({}, tF, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }),
          ),
          t3 = tD(
            d({}, tq, {
              deltaX: function (e) {
                return "deltaX" in e
                  ? e.deltaX
                  : "wheelDeltaX" in e
                    ? -e.wheelDeltaX
                    : 0;
              },
              deltaY: function (e) {
                return "deltaY" in e
                  ? e.deltaY
                  : "wheelDeltaY" in e
                    ? -e.wheelDeltaY
                    : "wheelDelta" in e
                      ? -e.wheelDelta
                      : 0;
              },
              deltaZ: 0,
              deltaMode: 0,
            }),
          ),
          t4 = tD(d({}, tF, { newState: 0, oldState: 0 })),
          t8 = [9, 13, 27, 32],
          t6 = tw && "CompositionEvent" in window,
          t9 = null;
        tw && "documentMode" in document && (t9 = document.documentMode);
        var t7 = tw && "TextEvent" in window && !t9,
          ne = tw && (!t6 || (t9 && 8 < t9 && 11 >= t9)),
          nt = !1;
        function nn(e, t) {
          switch (e) {
            case "keyup":
              return -1 !== t8.indexOf(t.keyCode);
            case "keydown":
              return 229 !== t.keyCode;
            case "keypress":
            case "mousedown":
            case "focusout":
              return !0;
            default:
              return !1;
          }
        }
        function nr(e) {
          return "object" == typeof (e = e.detail) && "data" in e
            ? e.data
            : null;
        }
        var ni = !1,
          ns = {
            color: !0,
            date: !0,
            datetime: !0,
            "datetime-local": !0,
            email: !0,
            month: !0,
            number: !0,
            password: !0,
            range: !0,
            search: !0,
            tel: !0,
            text: !0,
            time: !0,
            url: !0,
            week: !0,
          };
        function no(e) {
          var t = e && e.nodeName && e.nodeName.toLowerCase();
          return "input" === t ? !!ns[e.type] : "textarea" === t;
        }
        function na(e, t, n, r) {
          tg ? (ty ? ty.push(r) : (ty = [r])) : (tg = r),
            0 < (t = l1(t, "onChange")).length &&
              ((n = new tB("onChange", "change", null, n, r)),
              e.push({ event: n, listeners: t }));
        }
        var nl = null,
          nc = null;
        function nu(e) {
          lW(e, 0);
        }
        function nd(e) {
          if (e8(ez(e))) return e;
        }
        function nh(e, t) {
          if ("change" === e) return t;
        }
        var np = !1;
        if (tw) {
          if (tw) {
            var nf = "oninput" in document;
            if (!nf) {
              var nm = document.createElement("div");
              nm.setAttribute("oninput", "return;"),
                (nf = "function" == typeof nm.oninput);
            }
            r = nf;
          } else r = !1;
          np = r && (!document.documentMode || 9 < document.documentMode);
        }
        function ng() {
          nl && (nl.detachEvent("onpropertychange", ny), (nc = nl = null));
        }
        function ny(e) {
          if ("value" === e.propertyName && nd(nc)) {
            var t = [];
            na(t, nc, e, tm(e)), tx(nu, t);
          }
        }
        function nv(e, t, n) {
          "focusin" === e
            ? (ng(), (nl = t), (nc = n), nl.attachEvent("onpropertychange", ny))
            : "focusout" === e && ng();
        }
        function nb(e) {
          if ("selectionchange" === e || "keyup" === e || "keydown" === e)
            return nd(nc);
        }
        function nx(e, t) {
          if ("click" === e) return nd(t);
        }
        function nk(e, t) {
          if ("input" === e || "change" === e) return nd(t);
        }
        var nw =
          "function" == typeof Object.is
            ? Object.is
            : function (e, t) {
                return (
                  (e === t && (0 !== e || 1 / e == 1 / t)) || (e != e && t != t)
                );
              };
        function n_(e, t) {
          if (nw(e, t)) return !0;
          if (
            "object" != typeof e ||
            null === e ||
            "object" != typeof t ||
            null === t
          )
            return !1;
          var n = Object.keys(e),
            r = Object.keys(t);
          if (n.length !== r.length) return !1;
          for (r = 0; r < n.length; r++) {
            var i = n[r];
            if (!Z.call(t, i) || !nw(e[i], t[i])) return !1;
          }
          return !0;
        }
        function nO(e) {
          for (; e && e.firstChild; ) e = e.firstChild;
          return e;
        }
        function nT(e, t) {
          var n,
            r = nO(e);
          for (e = 0; r; ) {
            if (3 === r.nodeType) {
              if (((n = e + r.textContent.length), e <= t && n >= t))
                return { node: r, offset: t - e };
              e = n;
            }
            r: {
              for (; r; ) {
                if (r.nextSibling) {
                  r = r.nextSibling;
                  break r;
                }
                r = r.parentNode;
              }
              r = void 0;
            }
            r = nO(r);
          }
        }
        function nS(e) {
          e =
            null != e &&
            null != e.ownerDocument &&
            null != e.ownerDocument.defaultView
              ? e.ownerDocument.defaultView
              : window;
          for (var t = e6(e.document); t instanceof e.HTMLIFrameElement; ) {
            try {
              var n = "string" == typeof t.contentWindow.location.href;
            } catch (e) {
              n = !1;
            }
            if (n) e = t.contentWindow;
            else break;
            t = e6(e.document);
          }
          return t;
        }
        function nE(e) {
          var t = e && e.nodeName && e.nodeName.toLowerCase();
          return (
            t &&
            (("input" === t &&
              ("text" === e.type ||
                "search" === e.type ||
                "tel" === e.type ||
                "url" === e.type ||
                "password" === e.type)) ||
              "textarea" === t ||
              "true" === e.contentEditable)
          );
        }
        var nC =
            tw && "documentMode" in document && 11 >= document.documentMode,
          nA = null,
          nN = null,
          nI = null,
          nD = !1;
        function nP(e, t, n) {
          var r =
            n.window === n
              ? n.document
              : 9 === n.nodeType
                ? n
                : n.ownerDocument;
          nD ||
            null == nA ||
            nA !== e6(r) ||
            ((r =
              "selectionStart" in (r = nA) && nE(r)
                ? { start: r.selectionStart, end: r.selectionEnd }
                : {
                    anchorNode: (r = (
                      (r.ownerDocument && r.ownerDocument.defaultView) ||
                      window
                    ).getSelection()).anchorNode,
                    anchorOffset: r.anchorOffset,
                    focusNode: r.focusNode,
                    focusOffset: r.focusOffset,
                  }),
            (nI && n_(nI, r)) ||
              ((nI = r),
              0 < (r = l1(nN, "onSelect")).length &&
                ((t = new tB("onSelect", "select", null, t, n)),
                e.push({ event: t, listeners: r }),
                (t.target = nA))));
        }
        function nR(e, t) {
          var n = {};
          return (
            (n[e.toLowerCase()] = t.toLowerCase()),
            (n["Webkit" + e] = "webkit" + t),
            (n["Moz" + e] = "moz" + t),
            n
          );
        }
        var nM = {
            animationend: nR("Animation", "AnimationEnd"),
            animationiteration: nR("Animation", "AnimationIteration"),
            animationstart: nR("Animation", "AnimationStart"),
            transitionrun: nR("Transition", "TransitionRun"),
            transitionstart: nR("Transition", "TransitionStart"),
            transitioncancel: nR("Transition", "TransitionCancel"),
            transitionend: nR("Transition", "TransitionEnd"),
          },
          nL = {},
          nj = {};
        function nF(e) {
          if (nL[e]) return nL[e];
          if (!nM[e]) return e;
          var t,
            n = nM[e];
          for (t in n)
            if (n.hasOwnProperty(t) && t in nj) return (nL[e] = n[t]);
          return e;
        }
        tw &&
          ((nj = document.createElement("div").style),
          "AnimationEvent" in window ||
            (delete nM.animationend.animation,
            delete nM.animationiteration.animation,
            delete nM.animationstart.animation),
          "TransitionEvent" in window || delete nM.transitionend.transition);
        var nB = nF("animationend"),
          nz = nF("animationiteration"),
          n$ = nF("animationstart"),
          nq = nF("transitionrun"),
          nU = nF("transitionstart"),
          nH = nF("transitioncancel"),
          nQ = nF("transitionend"),
          nV = new Map(),
          nW =
            "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
              " ",
            );
        function nZ(e, t) {
          nV.set(e, t), eQ(t, [e]);
        }
        nW.push("scrollEnd");
        var nG = new WeakMap();
        function nY(e, t) {
          if ("object" == typeof e && null !== e) {
            var n = nG.get(e);
            return void 0 !== n
              ? n
              : ((t = { value: e, source: t, stack: e2(t) }), nG.set(e, t), t);
          }
          return { value: e, source: t, stack: e2(t) };
        }
        var nK = [],
          nX = 0,
          nJ = 0;
        function n0() {
          for (var e = nX, t = (nJ = nX = 0); t < e; ) {
            var n = nK[t];
            nK[t++] = null;
            var r = nK[t];
            nK[t++] = null;
            var i = nK[t];
            nK[t++] = null;
            var s = nK[t];
            if (((nK[t++] = null), null !== r && null !== i)) {
              var o = r.pending;
              null === o ? (i.next = i) : ((i.next = o.next), (o.next = i)),
                (r.pending = i);
            }
            0 !== s && n3(n, i, s);
          }
        }
        function n1(e, t, n, r) {
          (nK[nX++] = e),
            (nK[nX++] = t),
            (nK[nX++] = n),
            (nK[nX++] = r),
            (nJ |= r),
            (e.lanes |= r),
            null !== (e = e.alternate) && (e.lanes |= r);
        }
        function n2(e, t, n, r) {
          return n1(e, t, n, r), n4(e);
        }
        function n5(e, t) {
          return n1(e, null, null, t), n4(e);
        }
        function n3(e, t, n) {
          e.lanes |= n;
          var r = e.alternate;
          null !== r && (r.lanes |= n);
          for (var i = !1, s = e.return; null !== s; )
            (s.childLanes |= n),
              null !== (r = s.alternate) && (r.childLanes |= n),
              22 === s.tag &&
                (null === (e = s.stateNode) || 1 & e._visibility || (i = !0)),
              (e = s),
              (s = s.return);
          return 3 === e.tag
            ? ((s = e.stateNode),
              i &&
                null !== t &&
                ((i = 31 - ed(n)),
                null === (r = (e = s.hiddenUpdates)[i])
                  ? (e[i] = [t])
                  : r.push(t),
                (t.lane = 0x20000000 | n)),
              s)
            : null;
        }
        function n4(e) {
          if (50 < a2) throw ((a2 = 0), (a5 = null), Error(a(185)));
          for (var t = e.return; null !== t; ) t = (e = t).return;
          return 3 === e.tag ? e.stateNode : null;
        }
        var n8 = {};
        function n6(e, t, n, r) {
          (this.tag = e),
            (this.key = n),
            (this.sibling =
              this.child =
              this.return =
              this.stateNode =
              this.type =
              this.elementType =
                null),
            (this.index = 0),
            (this.refCleanup = this.ref = null),
            (this.pendingProps = t),
            (this.dependencies =
              this.memoizedState =
              this.updateQueue =
              this.memoizedProps =
                null),
            (this.mode = r),
            (this.subtreeFlags = this.flags = 0),
            (this.deletions = null),
            (this.childLanes = this.lanes = 0),
            (this.alternate = null);
        }
        function n9(e, t, n, r) {
          return new n6(e, t, n, r);
        }
        function n7(e) {
          return !(!(e = e.prototype) || !e.isReactComponent);
        }
        function re(e, t) {
          var n = e.alternate;
          return (
            null === n
              ? (((n = n9(e.tag, t, e.key, e.mode)).elementType =
                  e.elementType),
                (n.type = e.type),
                (n.stateNode = e.stateNode),
                (n.alternate = e),
                (e.alternate = n))
              : ((n.pendingProps = t),
                (n.type = e.type),
                (n.flags = 0),
                (n.subtreeFlags = 0),
                (n.deletions = null)),
            (n.flags = 0x3e00000 & e.flags),
            (n.childLanes = e.childLanes),
            (n.lanes = e.lanes),
            (n.child = e.child),
            (n.memoizedProps = e.memoizedProps),
            (n.memoizedState = e.memoizedState),
            (n.updateQueue = e.updateQueue),
            (t = e.dependencies),
            (n.dependencies =
              null === t
                ? null
                : { lanes: t.lanes, firstContext: t.firstContext }),
            (n.sibling = e.sibling),
            (n.index = e.index),
            (n.ref = e.ref),
            (n.refCleanup = e.refCleanup),
            n
          );
        }
        function rt(e, t) {
          e.flags &= 0x3e00002;
          var n = e.alternate;
          return (
            null === n
              ? ((e.childLanes = 0),
                (e.lanes = t),
                (e.child = null),
                (e.subtreeFlags = 0),
                (e.memoizedProps = null),
                (e.memoizedState = null),
                (e.updateQueue = null),
                (e.dependencies = null),
                (e.stateNode = null))
              : ((e.childLanes = n.childLanes),
                (e.lanes = n.lanes),
                (e.child = n.child),
                (e.subtreeFlags = 0),
                (e.deletions = null),
                (e.memoizedProps = n.memoizedProps),
                (e.memoizedState = n.memoizedState),
                (e.updateQueue = n.updateQueue),
                (e.type = n.type),
                (e.dependencies =
                  null === (t = n.dependencies)
                    ? null
                    : { lanes: t.lanes, firstContext: t.firstContext })),
            e
          );
        }
        function rn(e, t, n, r, i, s) {
          var o = 0;
          if (((r = e), "function" == typeof e)) n7(e) && (o = 1);
          else if ("string" == typeof e)
            o = !(function (e, t, n) {
              if (1 === n || null != t.itemProp) return !1;
              switch (e) {
                case "meta":
                case "title":
                  return !0;
                case "style":
                  if (
                    "string" != typeof t.precedence ||
                    "string" != typeof t.href ||
                    "" === t.href
                  )
                    break;
                  return !0;
                case "link":
                  if (
                    "string" != typeof t.rel ||
                    "string" != typeof t.href ||
                    "" === t.href ||
                    t.onLoad ||
                    t.onError
                  )
                    break;
                  if ("stylesheet" === t.rel)
                    return (
                      (e = t.disabled),
                      "string" == typeof t.precedence && null == e
                    );
                  return !0;
                case "script":
                  if (
                    t.async &&
                    "function" != typeof t.async &&
                    "symbol" != typeof t.async &&
                    !t.onLoad &&
                    !t.onError &&
                    t.src &&
                    "string" == typeof t.src
                  )
                    return !0;
              }
              return !1;
            })(e, n, z.current)
              ? "html" === e || "head" === e || "body" === e
                ? 27
                : 5
              : 26;
          else
            r: switch (e) {
              case S:
                return (
                  ((e = n9(31, n, t, i)).elementType = S), (e.lanes = s), e
                );
              case m:
                return rr(n.children, i, s, t);
              case g:
                (o = 8), (i |= 24);
                break;
              case y:
                return (
                  ((e = n9(12, n, t, 2 | i)).elementType = y), (e.lanes = s), e
                );
              case w:
                return (
                  ((e = n9(13, n, t, i)).elementType = w), (e.lanes = s), e
                );
              case _:
                return (
                  ((e = n9(19, n, t, i)).elementType = _), (e.lanes = s), e
                );
              default:
                if ("object" == typeof e && null !== e)
                  switch (e.$$typeof) {
                    case v:
                    case x:
                      o = 10;
                      break r;
                    case b:
                      o = 9;
                      break r;
                    case k:
                      o = 11;
                      break r;
                    case O:
                      o = 14;
                      break r;
                    case T:
                      (o = 16), (r = null);
                      break r;
                  }
                (o = 29),
                  (n = Error(a(130, null === e ? "null" : typeof e, ""))),
                  (r = null);
            }
          return (
            ((t = n9(o, n, t, i)).elementType = e),
            (t.type = r),
            (t.lanes = s),
            t
          );
        }
        function rr(e, t, n, r) {
          return ((e = n9(7, e, r, t)).lanes = n), e;
        }
        function ri(e, t, n) {
          return ((e = n9(6, e, null, t)).lanes = n), e;
        }
        function rs(e, t, n) {
          return (
            ((t = n9(
              4,
              null !== e.children ? e.children : [],
              e.key,
              t,
            )).lanes = n),
            (t.stateNode = {
              containerInfo: e.containerInfo,
              pendingChildren: null,
              implementation: e.implementation,
            }),
            t
          );
        }
        var ro = [],
          ra = 0,
          rl = null,
          rc = 0,
          ru = [],
          rd = 0,
          rh = null,
          rp = 1,
          rf = "";
        function rm(e, t) {
          (ro[ra++] = rc), (ro[ra++] = rl), (rl = e), (rc = t);
        }
        function rg(e, t, n) {
          (ru[rd++] = rp), (ru[rd++] = rf), (ru[rd++] = rh), (rh = e);
          var r = rp;
          e = rf;
          var i = 32 - ed(r) - 1;
          (r &= ~(1 << i)), (n += 1);
          var s = 32 - ed(t) + i;
          if (30 < s) {
            var o = i - (i % 5);
            (s = (r & ((1 << o) - 1)).toString(32)),
              (r >>= o),
              (i -= o),
              (rp = (1 << (32 - ed(t) + i)) | (n << i) | r),
              (rf = s + e);
          } else (rp = (1 << s) | (n << i) | r), (rf = e);
        }
        function ry(e) {
          null !== e.return && (rm(e, 1), rg(e, 1, 0));
        }
        function rv(e) {
          for (; e === rl; )
            (rl = ro[--ra]), (ro[ra] = null), (rc = ro[--ra]), (ro[ra] = null);
          for (; e === rh; )
            (rh = ru[--rd]),
              (ru[rd] = null),
              (rf = ru[--rd]),
              (ru[rd] = null),
              (rp = ru[--rd]),
              (ru[rd] = null);
        }
        var rb = null,
          rx = null,
          rk = !1,
          rw = null,
          r_ = !1,
          rO = Error(a(519));
        function rT(e) {
          var t = Error(
            a(
              418,
              1 < arguments.length && void 0 !== arguments[1] && arguments[1]
                ? "text"
                : "HTML",
              "",
            ),
          );
          throw (rI(nY(t, e)), rO);
        }
        function rS(e) {
          var t = e.stateNode,
            n = e.type,
            r = e.memoizedProps;
          switch (((t[eA] = e), (t[eN] = r), n)) {
            case "dialog":
              lZ("cancel", t), lZ("close", t);
              break;
            case "iframe":
            case "object":
            case "embed":
              lZ("load", t);
              break;
            case "video":
            case "audio":
              for (n = 0; n < lQ.length; n++) lZ(lQ[n], t);
              break;
            case "source":
              lZ("error", t);
              break;
            case "img":
            case "image":
            case "link":
              lZ("error", t), lZ("load", t);
              break;
            case "details":
              lZ("toggle", t);
              break;
            case "input":
              lZ("invalid", t),
                tt(
                  t,
                  r.value,
                  r.defaultValue,
                  r.checked,
                  r.defaultChecked,
                  r.type,
                  r.name,
                  !0,
                ),
                e4(t);
              break;
            case "select":
              lZ("invalid", t);
              break;
            case "textarea":
              lZ("invalid", t),
                ts(t, r.value, r.defaultValue, r.children),
                e4(t);
          }
          ("string" != typeof (n = r.children) &&
            "number" != typeof n &&
            "bigint" != typeof n) ||
          t.textContent === "" + n ||
          !0 === r.suppressHydrationWarning ||
          l6(t.textContent, n)
            ? (null != r.popover && (lZ("beforetoggle", t), lZ("toggle", t)),
              null != r.onScroll && lZ("scroll", t),
              null != r.onScrollEnd && lZ("scrollend", t),
              null != r.onClick && (t.onclick = l9),
              (t = !0))
            : (t = !1),
            t || rT(e, !0);
        }
        function rE(e) {
          for (rb = e.return; rb; )
            switch (rb.tag) {
              case 5:
              case 13:
                r_ = !1;
                return;
              case 27:
              case 3:
                r_ = !0;
                return;
              default:
                rb = rb.return;
            }
        }
        function rC(e) {
          if (e !== rb) return !1;
          if (!rk) return rE(e), (rk = !0), !1;
          var t,
            n = e.tag;
          if (
            ((t = 3 !== n && 27 !== n) &&
              ((t = 5 === n) &&
                (t =
                  "form" === (t = e.type) ||
                  "button" === t ||
                  ca(e.type, e.memoizedProps)),
              (t = !t)),
            t && rx && rT(e),
            rE(e),
            13 === n)
          ) {
            if (!(e = null !== (e = e.memoizedState) ? e.dehydrated : null))
              throw Error(a(317));
            r: {
              for (n = 0, e = e.nextSibling; e; ) {
                if (8 === e.nodeType)
                  if ("/$" === (t = e.data)) {
                    if (0 === n) {
                      rx = cv(e.nextSibling);
                      break r;
                    }
                    n--;
                  } else ("$" !== t && "$!" !== t && "$?" !== t) || n++;
                e = e.nextSibling;
              }
              rx = null;
            }
          } else
            27 === n
              ? ((n = rx),
                cf(e.type) ? ((e = cb), (cb = null), (rx = e)) : (rx = n))
              : (rx = rb ? cv(e.stateNode.nextSibling) : null);
          return !0;
        }
        function rA() {
          (rx = rb = null), (rk = !1);
        }
        function rN() {
          var e = rw;
          return (
            null !== e &&
              (null === aU ? (aU = e) : aU.push.apply(aU, e), (rw = null)),
            e
          );
        }
        function rI(e) {
          null === rw ? (rw = [e]) : rw.push(e);
        }
        var rD = j(null),
          rP = null,
          rR = null;
        function rM(e, t, n) {
          B(rD, t._currentValue), (t._currentValue = n);
        }
        function rL(e) {
          (e._currentValue = rD.current), F(rD);
        }
        function rj(e, t, n) {
          for (; null !== e; ) {
            var r = e.alternate;
            if (
              ((e.childLanes & t) !== t
                ? ((e.childLanes |= t), null !== r && (r.childLanes |= t))
                : null !== r && (r.childLanes & t) !== t && (r.childLanes |= t),
              e === n)
            )
              break;
            e = e.return;
          }
        }
        function rF(e, t, n, r) {
          var i = e.child;
          for (null !== i && (i.return = e); null !== i; ) {
            var s = i.dependencies;
            if (null !== s) {
              var o = i.child;
              s = s.firstContext;
              r: for (; null !== s; ) {
                var l = s;
                s = i;
                for (var c = 0; c < t.length; c++)
                  if (l.context === t[c]) {
                    (s.lanes |= n),
                      null !== (l = s.alternate) && (l.lanes |= n),
                      rj(s.return, n, e),
                      r || (o = null);
                    break r;
                  }
                s = l.next;
              }
            } else if (18 === i.tag) {
              if (null === (o = i.return)) throw Error(a(341));
              (o.lanes |= n),
                null !== (s = o.alternate) && (s.lanes |= n),
                rj(o, n, e),
                (o = null);
            } else o = i.child;
            if (null !== o) o.return = i;
            else
              for (o = i; null !== o; ) {
                if (o === e) {
                  o = null;
                  break;
                }
                if (null !== (i = o.sibling)) {
                  (i.return = o.return), (o = i);
                  break;
                }
                o = o.return;
              }
            i = o;
          }
        }
        function rB(e, t, n, r) {
          e = null;
          for (var i = t, s = !1; null !== i; ) {
            if (!s) {
              if (0 != (524288 & i.flags)) s = !0;
              else if (0 != (262144 & i.flags)) break;
            }
            if (10 === i.tag) {
              var o = i.alternate;
              if (null === o) throw Error(a(387));
              if (null !== (o = o.memoizedProps)) {
                var l = i.type;
                nw(i.pendingProps.value, o.value) ||
                  (null !== e ? e.push(l) : (e = [l]));
              }
            } else if (i === U.current) {
              if (null === (o = i.alternate)) throw Error(a(387));
              o.memoizedState.memoizedState !== i.memoizedState.memoizedState &&
                (null !== e ? e.push(cG) : (e = [cG]));
            }
            i = i.return;
          }
          null !== e && rF(t, e, n, r), (t.flags |= 262144);
        }
        function rz(e) {
          for (e = e.firstContext; null !== e; ) {
            if (!nw(e.context._currentValue, e.memoizedValue)) return !0;
            e = e.next;
          }
          return !1;
        }
        function r$(e) {
          (rP = e),
            (rR = null),
            null !== (e = e.dependencies) && (e.firstContext = null);
        }
        function rq(e) {
          return rH(rP, e);
        }
        function rU(e, t) {
          return null === rP && r$(e), rH(e, t);
        }
        function rH(e, t) {
          var n = t._currentValue;
          if (
            ((t = { context: t, memoizedValue: n, next: null }), null === rR)
          ) {
            if (null === e) throw Error(a(308));
            (rR = t),
              (e.dependencies = { lanes: 0, firstContext: t }),
              (e.flags |= 524288);
          } else rR = rR.next = t;
          return n;
        }
        var rQ =
            "undefined" != typeof AbortController
              ? AbortController
              : function () {
                  var e = [],
                    t = (this.signal = {
                      aborted: !1,
                      addEventListener: function (t, n) {
                        e.push(n);
                      },
                    });
                  this.abort = function () {
                    (t.aborted = !0),
                      e.forEach(function (e) {
                        return e();
                      });
                  };
                },
          rV = i.unstable_scheduleCallback,
          rW = i.unstable_NormalPriority,
          rZ = {
            $$typeof: x,
            Consumer: null,
            Provider: null,
            _currentValue: null,
            _currentValue2: null,
            _threadCount: 0,
          };
        function rG() {
          return { controller: new rQ(), data: new Map(), refCount: 0 };
        }
        function rY(e) {
          e.refCount--,
            0 === e.refCount &&
              rV(rW, function () {
                e.controller.abort();
              });
        }
        var rK = null,
          rX = 0,
          rJ = 0,
          r0 = null;
        function r1() {
          if (0 == --rX && null !== rK) {
            null !== r0 && (r0.status = "fulfilled");
            var e = rK;
            (rK = null), (rJ = 0), (r0 = null);
            for (var t = 0; t < e.length; t++) (0, e[t])();
          }
        }
        var r2 = D.S;
        D.S = function (e, t) {
          "object" == typeof t &&
            null !== t &&
            "function" == typeof t.then &&
            (function (e, t) {
              if (null === rK) {
                var n = (rK = []);
                (rX = 0),
                  (rJ = lz()),
                  (r0 = {
                    status: "pending",
                    value: void 0,
                    then: function (e) {
                      n.push(e);
                    },
                  });
              }
              rX++, t.then(r1, r1);
            })(0, t),
            null !== r2 && r2(e, t);
        };
        var r5 = j(null);
        function r3() {
          var e = r5.current;
          return null !== e ? e : aE.pooledCache;
        }
        function r4(e, t) {
          null === t ? B(r5, r5.current) : B(r5, t.pool);
        }
        function r8() {
          var e = r3();
          return null === e ? null : { parent: rZ._currentValue, pool: e };
        }
        var r6 = Error(a(460)),
          r9 = Error(a(474)),
          r7 = Error(a(542)),
          ie = { then: function () {} };
        function it(e) {
          return "fulfilled" === (e = e.status) || "rejected" === e;
        }
        function ir() {}
        function ii(e, t, n) {
          switch (
            (void 0 === (n = e[n])
              ? e.push(t)
              : n !== t && (t.then(ir, ir), (t = n)),
            t.status)
          ) {
            case "fulfilled":
              return t.value;
            case "rejected":
              throw (ia((e = t.reason)), e);
            default:
              if ("string" == typeof t.status) t.then(ir, ir);
              else {
                if (null !== (e = aE) && 100 < e.shellSuspendCounter)
                  throw Error(a(482));
                ((e = t).status = "pending"),
                  e.then(
                    function (e) {
                      if ("pending" === t.status) {
                        var n = t;
                        (n.status = "fulfilled"), (n.value = e);
                      }
                    },
                    function (e) {
                      if ("pending" === t.status) {
                        var n = t;
                        (n.status = "rejected"), (n.reason = e);
                      }
                    },
                  );
              }
              switch (t.status) {
                case "fulfilled":
                  return t.value;
                case "rejected":
                  throw (ia((e = t.reason)), e);
              }
              throw ((is = t), r6);
          }
        }
        var is = null;
        function io() {
          if (null === is) throw Error(a(459));
          var e = is;
          return (is = null), e;
        }
        function ia(e) {
          if (e === r6 || e === r7) throw Error(a(483));
        }
        var il = null,
          ic = 0;
        function iu(e) {
          var t = ic;
          return (ic += 1), null === il && (il = []), ii(il, e, t);
        }
        function id(e, t) {
          e.ref = void 0 !== (t = t.props.ref) ? t : null;
        }
        function ih(e, t) {
          if (t.$$typeof === h) throw Error(a(525));
          throw Error(
            a(
              31,
              "[object Object]" === (e = Object.prototype.toString.call(t))
                ? "object with keys {" + Object.keys(t).join(", ") + "}"
                : e,
            ),
          );
        }
        function ip(e) {
          return (0, e._init)(e._payload);
        }
        function im(e) {
          function t(t, n) {
            if (e) {
              var r = t.deletions;
              null === r ? ((t.deletions = [n]), (t.flags |= 16)) : r.push(n);
            }
          }
          function n(n, r) {
            if (!e) return null;
            for (; null !== r; ) t(n, r), (r = r.sibling);
            return null;
          }
          function r(e) {
            for (var t = new Map(); null !== e; )
              null !== e.key ? t.set(e.key, e) : t.set(e.index, e),
                (e = e.sibling);
            return t;
          }
          function i(e, t) {
            return ((e = re(e, t)).index = 0), (e.sibling = null), e;
          }
          function s(t, n, r) {
            return ((t.index = r), e)
              ? null !== (r = t.alternate)
                ? (r = r.index) < n
                  ? ((t.flags |= 0x4000002), n)
                  : r
                : ((t.flags |= 0x4000002), n)
              : ((t.flags |= 1048576), n);
          }
          function o(t) {
            return e && null === t.alternate && (t.flags |= 0x4000002), t;
          }
          function l(e, t, n, r) {
            return (
              null === t || 6 !== t.tag
                ? ((t = ri(n, e.mode, r)).return = e)
                : ((t = i(t, n)).return = e),
              t
            );
          }
          function c(e, t, n, r) {
            var s = n.type;
            return s === m
              ? d(e, t, n.props.children, r, n.key)
              : (null !== t &&
                (t.elementType === s ||
                  ("object" == typeof s &&
                    null !== s &&
                    s.$$typeof === T &&
                    ip(s) === t.type))
                  ? id((t = i(t, n.props)), n)
                  : id((t = rn(n.type, n.key, n.props, null, e.mode, r)), n),
                (t.return = e),
                t);
          }
          function u(e, t, n, r) {
            return (
              null === t ||
              4 !== t.tag ||
              t.stateNode.containerInfo !== n.containerInfo ||
              t.stateNode.implementation !== n.implementation
                ? ((t = rs(n, e.mode, r)).return = e)
                : ((t = i(t, n.children || [])).return = e),
              t
            );
          }
          function d(e, t, n, r, s) {
            return (
              null === t || 7 !== t.tag
                ? ((t = rr(n, e.mode, r, s)).return = e)
                : ((t = i(t, n)).return = e),
              t
            );
          }
          function h(e, t, n) {
            if (
              ("string" == typeof t && "" !== t) ||
              "number" == typeof t ||
              "bigint" == typeof t
            )
              return ((t = ri("" + t, e.mode, n)).return = e), t;
            if ("object" == typeof t && null !== t) {
              switch (t.$$typeof) {
                case p:
                  return (
                    id((n = rn(t.type, t.key, t.props, null, e.mode, n)), t),
                    (n.return = e),
                    n
                  );
                case f:
                  return ((t = rs(t, e.mode, n)).return = e), t;
                case T:
                  return h(e, (t = (0, t._init)(t._payload)), n);
              }
              if (I(t) || A(t))
                return ((t = rr(t, e.mode, n, null)).return = e), t;
              if ("function" == typeof t.then) return h(e, iu(t), n);
              if (t.$$typeof === x) return h(e, rU(e, t), n);
              ih(e, t);
            }
            return null;
          }
          function g(e, t, n, r) {
            var i = null !== t ? t.key : null;
            if (
              ("string" == typeof n && "" !== n) ||
              "number" == typeof n ||
              "bigint" == typeof n
            )
              return null !== i ? null : l(e, t, "" + n, r);
            if ("object" == typeof n && null !== n) {
              switch (n.$$typeof) {
                case p:
                  return n.key === i ? c(e, t, n, r) : null;
                case f:
                  return n.key === i ? u(e, t, n, r) : null;
                case T:
                  return g(e, t, (n = (i = n._init)(n._payload)), r);
              }
              if (I(n) || A(n)) return null !== i ? null : d(e, t, n, r, null);
              if ("function" == typeof n.then) return g(e, t, iu(n), r);
              if (n.$$typeof === x) return g(e, t, rU(e, n), r);
              ih(e, n);
            }
            return null;
          }
          function y(e, t, n, r, i) {
            if (
              ("string" == typeof r && "" !== r) ||
              "number" == typeof r ||
              "bigint" == typeof r
            )
              return l(t, (e = e.get(n) || null), "" + r, i);
            if ("object" == typeof r && null !== r) {
              switch (r.$$typeof) {
                case p:
                  return c(
                    t,
                    (e = e.get(null === r.key ? n : r.key) || null),
                    r,
                    i,
                  );
                case f:
                  return u(
                    t,
                    (e = e.get(null === r.key ? n : r.key) || null),
                    r,
                    i,
                  );
                case T:
                  return y(e, t, n, (r = (0, r._init)(r._payload)), i);
              }
              if (I(r) || A(r)) return d(t, (e = e.get(n) || null), r, i, null);
              if ("function" == typeof r.then) return y(e, t, n, iu(r), i);
              if (r.$$typeof === x) return y(e, t, n, rU(t, r), i);
              ih(t, r);
            }
            return null;
          }
          return function (l, c, u, d) {
            try {
              ic = 0;
              var v = (function l(c, u, d, v) {
                if (
                  ("object" == typeof d &&
                    null !== d &&
                    d.type === m &&
                    null === d.key &&
                    (d = d.props.children),
                  "object" == typeof d && null !== d)
                ) {
                  switch (d.$$typeof) {
                    case p:
                      r: {
                        for (var b = d.key; null !== u; ) {
                          if (u.key === b) {
                            if ((b = d.type) === m) {
                              if (7 === u.tag) {
                                n(c, u.sibling),
                                  ((v = i(u, d.props.children)).return = c),
                                  (c = v);
                                break r;
                              }
                            } else if (
                              u.elementType === b ||
                              ("object" == typeof b &&
                                null !== b &&
                                b.$$typeof === T &&
                                ip(b) === u.type)
                            ) {
                              n(c, u.sibling),
                                id((v = i(u, d.props)), d),
                                (v.return = c),
                                (c = v);
                              break r;
                            }
                            n(c, u);
                            break;
                          }
                          t(c, u), (u = u.sibling);
                        }
                        d.type === m
                          ? ((v = rr(
                              d.props.children,
                              c.mode,
                              v,
                              d.key,
                            )).return = c)
                          : (id(
                              (v = rn(d.type, d.key, d.props, null, c.mode, v)),
                              d,
                            ),
                            (v.return = c)),
                          (c = v);
                      }
                      return o(c);
                    case f:
                      r: {
                        for (b = d.key; null !== u; ) {
                          if (u.key === b)
                            if (
                              4 === u.tag &&
                              u.stateNode.containerInfo === d.containerInfo &&
                              u.stateNode.implementation === d.implementation
                            ) {
                              n(c, u.sibling),
                                ((v = i(u, d.children || [])).return = c),
                                (c = v);
                              break r;
                            } else {
                              n(c, u);
                              break;
                            }
                          t(c, u), (u = u.sibling);
                        }
                        ((v = rs(d, c.mode, v)).return = c), (c = v);
                      }
                      return o(c);
                    case T:
                      return l(c, u, (d = (b = d._init)(d._payload)), v);
                  }
                  if (I(d))
                    return (function (i, o, a, l) {
                      for (
                        var c = null, u = null, d = o, p = (o = 0), f = null;
                        null !== d && p < a.length;
                        p++
                      ) {
                        d.index > p ? ((f = d), (d = null)) : (f = d.sibling);
                        var m = g(i, d, a[p], l);
                        if (null === m) {
                          null === d && (d = f);
                          break;
                        }
                        e && d && null === m.alternate && t(i, d),
                          (o = s(m, o, p)),
                          null === u ? (c = m) : (u.sibling = m),
                          (u = m),
                          (d = f);
                      }
                      if (p === a.length) return n(i, d), rk && rm(i, p), c;
                      if (null === d) {
                        for (; p < a.length; p++)
                          null !== (d = h(i, a[p], l)) &&
                            ((o = s(d, o, p)),
                            null === u ? (c = d) : (u.sibling = d),
                            (u = d));
                        return rk && rm(i, p), c;
                      }
                      for (d = r(d); p < a.length; p++)
                        null !== (f = y(d, i, p, a[p], l)) &&
                          (e &&
                            null !== f.alternate &&
                            d.delete(null === f.key ? p : f.key),
                          (o = s(f, o, p)),
                          null === u ? (c = f) : (u.sibling = f),
                          (u = f));
                      return (
                        e &&
                          d.forEach(function (e) {
                            return t(i, e);
                          }),
                        rk && rm(i, p),
                        c
                      );
                    })(c, u, d, v);
                  if (A(d)) {
                    if ("function" != typeof (b = A(d))) throw Error(a(150));
                    return (function (i, o, l, c) {
                      if (null == l) throw Error(a(151));
                      for (
                        var u = null,
                          d = null,
                          p = o,
                          f = (o = 0),
                          m = null,
                          v = l.next();
                        null !== p && !v.done;
                        f++, v = l.next()
                      ) {
                        p.index > f ? ((m = p), (p = null)) : (m = p.sibling);
                        var b = g(i, p, v.value, c);
                        if (null === b) {
                          null === p && (p = m);
                          break;
                        }
                        e && p && null === b.alternate && t(i, p),
                          (o = s(b, o, f)),
                          null === d ? (u = b) : (d.sibling = b),
                          (d = b),
                          (p = m);
                      }
                      if (v.done) return n(i, p), rk && rm(i, f), u;
                      if (null === p) {
                        for (; !v.done; f++, v = l.next())
                          null !== (v = h(i, v.value, c)) &&
                            ((o = s(v, o, f)),
                            null === d ? (u = v) : (d.sibling = v),
                            (d = v));
                        return rk && rm(i, f), u;
                      }
                      for (p = r(p); !v.done; f++, v = l.next())
                        null !== (v = y(p, i, f, v.value, c)) &&
                          (e &&
                            null !== v.alternate &&
                            p.delete(null === v.key ? f : v.key),
                          (o = s(v, o, f)),
                          null === d ? (u = v) : (d.sibling = v),
                          (d = v));
                      return (
                        e &&
                          p.forEach(function (e) {
                            return t(i, e);
                          }),
                        rk && rm(i, f),
                        u
                      );
                    })(c, u, (d = b.call(d)), v);
                  }
                  if ("function" == typeof d.then) return l(c, u, iu(d), v);
                  if (d.$$typeof === x) return l(c, u, rU(c, d), v);
                  ih(c, d);
                }
                return ("string" == typeof d && "" !== d) ||
                  "number" == typeof d ||
                  "bigint" == typeof d
                  ? ((d = "" + d),
                    null !== u && 6 === u.tag
                      ? (n(c, u.sibling), ((v = i(u, d)).return = c))
                      : (n(c, u), ((v = ri(d, c.mode, v)).return = c)),
                    o((c = v)))
                  : n(c, u);
              })(l, c, u, d);
              return (il = null), v;
            } catch (e) {
              if (e === r6 || e === r7) throw e;
              var b = n9(29, e, null, l.mode);
              return (b.lanes = d), (b.return = l), b;
            } finally {
            }
          };
        }
        var ig = im(!0),
          iy = im(!1),
          iv = !1;
        function ib(e) {
          e.updateQueue = {
            baseState: e.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: { pending: null, lanes: 0, hiddenCallbacks: null },
            callbacks: null,
          };
        }
        function ix(e, t) {
          (e = e.updateQueue),
            t.updateQueue === e &&
              (t.updateQueue = {
                baseState: e.baseState,
                firstBaseUpdate: e.firstBaseUpdate,
                lastBaseUpdate: e.lastBaseUpdate,
                shared: e.shared,
                callbacks: null,
              });
        }
        function ik(e) {
          return { lane: e, tag: 0, payload: null, callback: null, next: null };
        }
        function iw(e, t, n) {
          var r = e.updateQueue;
          if (null === r) return null;
          if (((r = r.shared), 0 != (2 & aS))) {
            var i = r.pending;
            return (
              null === i ? (t.next = t) : ((t.next = i.next), (i.next = t)),
              (r.pending = t),
              (t = n4(e)),
              n3(e, null, n),
              t
            );
          }
          return n1(e, r, t, n), n4(e);
        }
        function i_(e, t, n) {
          if (
            null !== (t = t.updateQueue) &&
            ((t = t.shared), 0 != (4194048 & n))
          ) {
            var r = t.lanes;
            (r &= e.pendingLanes), (n |= r), (t.lanes = n), eO(e, n);
          }
        }
        function iO(e, t) {
          var n = e.updateQueue,
            r = e.alternate;
          if (null !== r && n === (r = r.updateQueue)) {
            var i = null,
              s = null;
            if (null !== (n = n.firstBaseUpdate)) {
              do {
                var o = {
                  lane: n.lane,
                  tag: n.tag,
                  payload: n.payload,
                  callback: null,
                  next: null,
                };
                null === s ? (i = s = o) : (s = s.next = o), (n = n.next);
              } while (null !== n);
              null === s ? (i = s = t) : (s = s.next = t);
            } else i = s = t;
            (n = {
              baseState: r.baseState,
              firstBaseUpdate: i,
              lastBaseUpdate: s,
              shared: r.shared,
              callbacks: r.callbacks,
            }),
              (e.updateQueue = n);
            return;
          }
          null === (e = n.lastBaseUpdate)
            ? (n.firstBaseUpdate = t)
            : (e.next = t),
            (n.lastBaseUpdate = t);
        }
        var iT = !1;
        function iS() {
          if (iT) {
            var e = r0;
            if (null !== e) throw e;
          }
        }
        function iE(e, t, n, r) {
          iT = !1;
          var i = e.updateQueue;
          iv = !1;
          var s = i.firstBaseUpdate,
            o = i.lastBaseUpdate,
            a = i.shared.pending;
          if (null !== a) {
            i.shared.pending = null;
            var l = a,
              c = l.next;
            (l.next = null), null === o ? (s = c) : (o.next = c), (o = l);
            var u = e.alternate;
            null !== u &&
              (a = (u = u.updateQueue).lastBaseUpdate) !== o &&
              (null === a ? (u.firstBaseUpdate = c) : (a.next = c),
              (u.lastBaseUpdate = l));
          }
          if (null !== s) {
            var h = i.baseState;
            for (o = 0, u = c = l = null, a = s; ; ) {
              var p = -0x20000001 & a.lane,
                f = p !== a.lane;
              if (f ? (aA & p) === p : (r & p) === p) {
                0 !== p && p === rJ && (iT = !0),
                  null !== u &&
                    (u = u.next =
                      {
                        lane: 0,
                        tag: a.tag,
                        payload: a.payload,
                        callback: null,
                        next: null,
                      });
                r: {
                  var m = e,
                    g = a;
                  switch (((p = t), g.tag)) {
                    case 1:
                      if ("function" == typeof (m = g.payload)) {
                        h = m.call(n, h, p);
                        break r;
                      }
                      h = m;
                      break r;
                    case 3:
                      m.flags = (-65537 & m.flags) | 128;
                    case 0:
                      if (
                        null ==
                        (p =
                          "function" == typeof (m = g.payload)
                            ? m.call(n, h, p)
                            : m)
                      )
                        break r;
                      h = d({}, h, p);
                      break r;
                    case 2:
                      iv = !0;
                  }
                }
                null !== (p = a.callback) &&
                  ((e.flags |= 64),
                  f && (e.flags |= 8192),
                  null === (f = i.callbacks) ? (i.callbacks = [p]) : f.push(p));
              } else
                (f = {
                  lane: p,
                  tag: a.tag,
                  payload: a.payload,
                  callback: a.callback,
                  next: null,
                }),
                  null === u ? ((c = u = f), (l = h)) : (u = u.next = f),
                  (o |= p);
              if (null === (a = a.next))
                if (null === (a = i.shared.pending)) break;
                else
                  (a = (f = a).next),
                    (f.next = null),
                    (i.lastBaseUpdate = f),
                    (i.shared.pending = null);
            }
            null === u && (l = h),
              (i.baseState = l),
              (i.firstBaseUpdate = c),
              (i.lastBaseUpdate = u),
              null === s && (i.shared.lanes = 0),
              (aj |= o),
              (e.lanes = o),
              (e.memoizedState = h);
          }
        }
        function iC(e, t) {
          if ("function" != typeof e) throw Error(a(191, e));
          e.call(t);
        }
        function iA(e, t) {
          var n = e.callbacks;
          if (null !== n)
            for (e.callbacks = null, e = 0; e < n.length; e++) iC(n[e], t);
        }
        var iN = j(null),
          iI = j(0);
        function iD(e, t) {
          B(iI, (e = aM)), B(iN, t), (aM = e | t.baseLanes);
        }
        function iP() {
          B(iI, aM), B(iN, iN.current);
        }
        function iR() {
          (aM = iI.current), F(iN), F(iI);
        }
        var iM = j(null),
          iL = null;
        function ij(e) {
          var t = e.alternate;
          B(i$, 1 & i$.current),
            B(iM, e),
            null === iL &&
              (null === t || null !== iN.current
                ? (iL = e)
                : null !== t.memoizedState && (iL = e));
        }
        function iF(e) {
          if (22 === e.tag) {
            if ((B(i$, i$.current), B(iM, e), null === iL)) {
              var t = e.alternate;
              null !== t && null !== t.memoizedState && (iL = e);
            }
          } else iB(e);
        }
        function iB() {
          B(i$, i$.current), B(iM, iM.current);
        }
        function iz(e) {
          F(iM), iL === e && (iL = null), F(i$);
        }
        var i$ = j(0);
        function iq(e) {
          for (var t = e; null !== t; ) {
            if (13 === t.tag) {
              var n = t.memoizedState;
              if (
                null !== n &&
                (null === (n = n.dehydrated) || "$?" === n.data || cy(n))
              )
                return t;
            } else if (19 === t.tag && void 0 !== t.memoizedProps.revealOrder) {
              if (0 != (128 & t.flags)) return t;
            } else if (null !== t.child) {
              (t.child.return = t), (t = t.child);
              continue;
            }
            if (t === e) break;
            for (; null === t.sibling; ) {
              if (null === t.return || t.return === e) return null;
              t = t.return;
            }
            (t.sibling.return = t.return), (t = t.sibling);
          }
          return null;
        }
        var iU = 0,
          iH = null,
          iQ = null,
          iV = null,
          iW = !1,
          iZ = !1,
          iG = !1,
          iY = 0,
          iK = 0,
          iX = null,
          iJ = 0;
        function i0() {
          throw Error(a(321));
        }
        function i1(e, t) {
          if (null === t) return !1;
          for (var n = 0; n < t.length && n < e.length; n++)
            if (!nw(e[n], t[n])) return !1;
          return !0;
        }
        function i2(e, t, n, r, i, s) {
          return (
            (iU = s),
            (iH = t),
            (t.memoizedState = null),
            (t.updateQueue = null),
            (t.lanes = 0),
            (D.H = null === e || null === e.memoizedState ? s6 : s9),
            (iG = !1),
            (s = n(r, i)),
            (iG = !1),
            iZ && (s = i3(t, n, r, i)),
            i5(e),
            s
          );
        }
        function i5(e) {
          D.H = s8;
          var t = null !== iQ && null !== iQ.next;
          if (
            ((iU = 0),
            (iV = iQ = iH = null),
            (iW = !1),
            (iK = 0),
            (iX = null),
            t)
          )
            throw Error(a(300));
          null === e ||
            og ||
            (null !== (e = e.dependencies) && rz(e) && (og = !0));
        }
        function i3(e, t, n, r) {
          iH = e;
          var i = 0;
          do {
            if ((iZ && (iX = null), (iK = 0), (iZ = !1), 25 <= i))
              throw Error(a(301));
            if (((i += 1), (iV = iQ = null), null != e.updateQueue)) {
              var s = e.updateQueue;
              (s.lastEffect = null),
                (s.events = null),
                (s.stores = null),
                null != s.memoCache && (s.memoCache.index = 0);
            }
            (D.H = s7), (s = t(n, r));
          } while (iZ);
          return s;
        }
        function i4() {
          var e = D.H,
            t = e.useState()[0];
          return (
            (t = "function" == typeof t.then ? sn(t) : t),
            (e = e.useState()[0]),
            (null !== iQ ? iQ.memoizedState : null) !== e && (iH.flags |= 1024),
            t
          );
        }
        function i8() {
          var e = 0 !== iY;
          return (iY = 0), e;
        }
        function i6(e, t, n) {
          (t.updateQueue = e.updateQueue), (t.flags &= -2053), (e.lanes &= ~n);
        }
        function i9(e) {
          if (iW) {
            for (e = e.memoizedState; null !== e; ) {
              var t = e.queue;
              null !== t && (t.pending = null), (e = e.next);
            }
            iW = !1;
          }
          (iU = 0),
            (iV = iQ = iH = null),
            (iZ = !1),
            (iK = iY = 0),
            (iX = null);
        }
        function i7() {
          var e = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null,
          };
          return (
            null === iV ? (iH.memoizedState = iV = e) : (iV = iV.next = e), iV
          );
        }
        function se() {
          if (null === iQ) {
            var e = iH.alternate;
            e = null !== e ? e.memoizedState : null;
          } else e = iQ.next;
          var t = null === iV ? iH.memoizedState : iV.next;
          if (null !== t) (iV = t), (iQ = e);
          else {
            if (null === e) {
              if (null === iH.alternate) throw Error(a(467));
              throw Error(a(310));
            }
            (e = {
              memoizedState: (iQ = e).memoizedState,
              baseState: iQ.baseState,
              baseQueue: iQ.baseQueue,
              queue: iQ.queue,
              next: null,
            }),
              null === iV ? (iH.memoizedState = iV = e) : (iV = iV.next = e);
          }
          return iV;
        }
        function st() {
          return {
            lastEffect: null,
            events: null,
            stores: null,
            memoCache: null,
          };
        }
        function sn(e) {
          var t = iK;
          return (
            (iK += 1),
            null === iX && (iX = []),
            (e = ii(iX, e, t)),
            (t = iH),
            null === (null === iV ? t.memoizedState : iV.next) &&
              (D.H =
                null === (t = t.alternate) || null === t.memoizedState
                  ? s6
                  : s9),
            e
          );
        }
        function sr(e) {
          if (null !== e && "object" == typeof e) {
            if ("function" == typeof e.then) return sn(e);
            if (e.$$typeof === x) return rq(e);
          }
          throw Error(a(438, String(e)));
        }
        function si(e) {
          var t = null,
            n = iH.updateQueue;
          if ((null !== n && (t = n.memoCache), null == t)) {
            var r = iH.alternate;
            null !== r &&
              null !== (r = r.updateQueue) &&
              null != (r = r.memoCache) &&
              (t = {
                data: r.data.map(function (e) {
                  return e.slice();
                }),
                index: 0,
              });
          }
          if (
            (null == t && (t = { data: [], index: 0 }),
            null === n && ((n = st()), (iH.updateQueue = n)),
            (n.memoCache = t),
            void 0 === (n = t.data[t.index]))
          )
            for (n = t.data[t.index] = Array(e), r = 0; r < e; r++) n[r] = E;
          return t.index++, n;
        }
        function ss(e, t) {
          return "function" == typeof t ? t(e) : t;
        }
        function so(e) {
          return sa(se(), iQ, e);
        }
        function sa(e, t, n) {
          var r = e.queue;
          if (null === r) throw Error(a(311));
          r.lastRenderedReducer = n;
          var i = e.baseQueue,
            s = r.pending;
          if (null !== s) {
            if (null !== i) {
              var o = i.next;
              (i.next = s.next), (s.next = o);
            }
            (t.baseQueue = i = s), (r.pending = null);
          }
          if (((s = e.baseState), null === i)) e.memoizedState = s;
          else {
            t = i.next;
            var l = (o = null),
              c = null,
              u = t,
              d = !1;
            do {
              var h = -0x20000001 & u.lane;
              if (h !== u.lane ? (aA & h) === h : (iU & h) === h) {
                var p = u.revertLane;
                if (0 === p)
                  null !== c &&
                    (c = c.next =
                      {
                        lane: 0,
                        revertLane: 0,
                        action: u.action,
                        hasEagerState: u.hasEagerState,
                        eagerState: u.eagerState,
                        next: null,
                      }),
                    h === rJ && (d = !0);
                else if ((iU & p) === p) {
                  (u = u.next), p === rJ && (d = !0);
                  continue;
                } else
                  (h = {
                    lane: 0,
                    revertLane: u.revertLane,
                    action: u.action,
                    hasEagerState: u.hasEagerState,
                    eagerState: u.eagerState,
                    next: null,
                  }),
                    null === c ? ((l = c = h), (o = s)) : (c = c.next = h),
                    (iH.lanes |= p),
                    (aj |= p);
                (h = u.action),
                  iG && n(s, h),
                  (s = u.hasEagerState ? u.eagerState : n(s, h));
              } else
                (p = {
                  lane: h,
                  revertLane: u.revertLane,
                  action: u.action,
                  hasEagerState: u.hasEagerState,
                  eagerState: u.eagerState,
                  next: null,
                }),
                  null === c ? ((l = c = p), (o = s)) : (c = c.next = p),
                  (iH.lanes |= h),
                  (aj |= h);
              u = u.next;
            } while (null !== u && u !== t);
            if (
              (null === c ? (o = s) : (c.next = l),
              !nw(s, e.memoizedState) && ((og = !0), d && null !== (n = r0)))
            )
              throw n;
            (e.memoizedState = s),
              (e.baseState = o),
              (e.baseQueue = c),
              (r.lastRenderedState = s);
          }
          return null === i && (r.lanes = 0), [e.memoizedState, r.dispatch];
        }
        function sl(e) {
          var t = se(),
            n = t.queue;
          if (null === n) throw Error(a(311));
          n.lastRenderedReducer = e;
          var r = n.dispatch,
            i = n.pending,
            s = t.memoizedState;
          if (null !== i) {
            n.pending = null;
            var o = (i = i.next);
            do (s = e(s, o.action)), (o = o.next);
            while (o !== i);
            nw(s, t.memoizedState) || (og = !0),
              (t.memoizedState = s),
              null === t.baseQueue && (t.baseState = s),
              (n.lastRenderedState = s);
          }
          return [s, r];
        }
        function sc(e, t, n) {
          var r = iH,
            i = se(),
            s = rk;
          if (s) {
            if (void 0 === n) throw Error(a(407));
            n = n();
          } else n = t();
          var o = !nw((iQ || i).memoizedState, n);
          if (
            (o && ((i.memoizedState = n), (og = !0)),
            (i = i.queue),
            sR(sh.bind(null, r, i, e), [e]),
            i.getSnapshot !== t ||
              o ||
              (null !== iV && 1 & iV.memoizedState.tag))
          ) {
            if (
              ((r.flags |= 2048),
              sA(9, { destroy: void 0 }, sd.bind(null, r, i, n, t), null),
              null === aE)
            )
              throw Error(a(349));
            s || 0 != (124 & iU) || su(r, t, n);
          }
          return n;
        }
        function su(e, t, n) {
          (e.flags |= 16384),
            (e = { getSnapshot: t, value: n }),
            null === (t = iH.updateQueue)
              ? ((t = st()), (iH.updateQueue = t), (t.stores = [e]))
              : null === (n = t.stores)
                ? (t.stores = [e])
                : n.push(e);
        }
        function sd(e, t, n, r) {
          (t.value = n), (t.getSnapshot = r), sp(t) && sf(e);
        }
        function sh(e, t, n) {
          return n(function () {
            sp(t) && sf(e);
          });
        }
        function sp(e) {
          var t = e.getSnapshot;
          e = e.value;
          try {
            var n = t();
            return !nw(e, n);
          } catch (e) {
            return !0;
          }
        }
        function sf(e) {
          var t = n5(e, 2);
          null !== t && a8(t, e, 2);
        }
        function sm(e) {
          var t = i7();
          if ("function" == typeof e) {
            var n = e;
            if (((e = n()), iG)) {
              eu(!0);
              try {
                n();
              } finally {
                eu(!1);
              }
            }
          }
          return (
            (t.memoizedState = t.baseState = e),
            (t.queue = {
              pending: null,
              lanes: 0,
              dispatch: null,
              lastRenderedReducer: ss,
              lastRenderedState: e,
            }),
            t
          );
        }
        function sg(e, t, n, r) {
          return (e.baseState = n), sa(e, iQ, "function" == typeof r ? r : ss);
        }
        function sy(e, t, n, r, i) {
          if (s5(e)) throw Error(a(485));
          if (null !== (e = t.action)) {
            var s = {
              payload: i,
              action: e,
              next: null,
              isTransition: !0,
              status: "pending",
              value: null,
              reason: null,
              listeners: [],
              then: function (e) {
                s.listeners.push(e);
              },
            };
            null !== D.T ? n(!0) : (s.isTransition = !1),
              r(s),
              null === (n = t.pending)
                ? ((s.next = t.pending = s), sv(t, s))
                : ((s.next = n.next), (t.pending = n.next = s));
          }
        }
        function sv(e, t) {
          var n = t.action,
            r = t.payload,
            i = e.state;
          if (t.isTransition) {
            var s = D.T,
              o = {};
            D.T = o;
            try {
              var a = n(i, r),
                l = D.S;
              null !== l && l(o, a), sb(e, t, a);
            } catch (n) {
              sk(e, t, n);
            } finally {
              D.T = s;
            }
          } else
            try {
              (s = n(i, r)), sb(e, t, s);
            } catch (n) {
              sk(e, t, n);
            }
        }
        function sb(e, t, n) {
          null !== n && "object" == typeof n && "function" == typeof n.then
            ? n.then(
                function (n) {
                  sx(e, t, n);
                },
                function (n) {
                  return sk(e, t, n);
                },
              )
            : sx(e, t, n);
        }
        function sx(e, t, n) {
          (t.status = "fulfilled"),
            (t.value = n),
            sw(t),
            (e.state = n),
            null !== (t = e.pending) &&
              ((n = t.next) === t
                ? (e.pending = null)
                : ((n = n.next), (t.next = n), sv(e, n)));
        }
        function sk(e, t, n) {
          var r = e.pending;
          if (((e.pending = null), null !== r)) {
            r = r.next;
            do (t.status = "rejected"), (t.reason = n), sw(t), (t = t.next);
            while (t !== r);
          }
          e.action = null;
        }
        function sw(e) {
          e = e.listeners;
          for (var t = 0; t < e.length; t++) (0, e[t])();
        }
        function s_(e, t) {
          return t;
        }
        function sO(e, t) {
          if (rk) {
            var n = aE.formState;
            if (null !== n) {
              r: {
                var r = iH;
                if (rk) {
                  if (rx) {
                    i: {
                      for (var i = rx, s = r_; 8 !== i.nodeType; )
                        if (!s || null === (i = cv(i.nextSibling))) {
                          i = null;
                          break i;
                        }
                      i = "F!" === (s = i.data) || "F" === s ? i : null;
                    }
                    if (i) {
                      (rx = cv(i.nextSibling)), (r = "F!" === i.data);
                      break r;
                    }
                  }
                  rT(r);
                }
                r = !1;
              }
              r && (t = n[0]);
            }
          }
          return (
            ((n = i7()).memoizedState = n.baseState = t),
            (r = {
              pending: null,
              lanes: 0,
              dispatch: null,
              lastRenderedReducer: s_,
              lastRenderedState: t,
            }),
            (n.queue = r),
            (n = s0.bind(null, iH, r)),
            (r.dispatch = n),
            (r = sm(!1)),
            (s = s2.bind(null, iH, !1, r.queue)),
            (r = i7()),
            (i = { state: t, dispatch: null, action: e, pending: null }),
            (r.queue = i),
            (n = sy.bind(null, iH, i, s, n)),
            (i.dispatch = n),
            (r.memoizedState = e),
            [t, n, !1]
          );
        }
        function sT(e) {
          return sS(se(), iQ, e);
        }
        function sS(e, t, n) {
          if (
            ((t = sa(e, t, s_)[0]),
            (e = so(ss)[0]),
            "object" == typeof t && null !== t && "function" == typeof t.then)
          )
            try {
              var r = sn(t);
            } catch (e) {
              if (e === r6) throw r7;
              throw e;
            }
          else r = t;
          var i = (t = se()).queue,
            s = i.dispatch;
          return (
            n !== t.memoizedState &&
              ((iH.flags |= 2048),
              sA(9, { destroy: void 0 }, sE.bind(null, i, n), null)),
            [r, s, e]
          );
        }
        function sE(e, t) {
          e.action = t;
        }
        function sC(e) {
          var t = se(),
            n = iQ;
          if (null !== n) return sS(t, n, e);
          se(), (t = t.memoizedState);
          var r = (n = se()).queue.dispatch;
          return (n.memoizedState = e), [t, r, !1];
        }
        function sA(e, t, n, r) {
          return (
            (e = { tag: e, create: n, deps: r, inst: t, next: null }),
            null === (t = iH.updateQueue) && ((t = st()), (iH.updateQueue = t)),
            null === (n = t.lastEffect)
              ? (t.lastEffect = e.next = e)
              : ((r = n.next), (n.next = e), (e.next = r), (t.lastEffect = e)),
            e
          );
        }
        function sN() {
          return se().memoizedState;
        }
        function sI(e, t, n, r) {
          var i = i7();
          (iH.flags |= e),
            (i.memoizedState = sA(
              1 | t,
              { destroy: void 0 },
              n,
              void 0 === r ? null : r,
            ));
        }
        function sD(e, t, n, r) {
          var i = se();
          r = void 0 === r ? null : r;
          var s = i.memoizedState.inst;
          null !== iQ && null !== r && i1(r, iQ.memoizedState.deps)
            ? (i.memoizedState = sA(t, s, n, r))
            : ((iH.flags |= e), (i.memoizedState = sA(1 | t, s, n, r)));
        }
        function sP(e, t) {
          sI(8390656, 8, e, t);
        }
        function sR(e, t) {
          sD(2048, 8, e, t);
        }
        function sM(e, t) {
          return sD(4, 2, e, t);
        }
        function sL(e, t) {
          return sD(4, 4, e, t);
        }
        function sj(e, t) {
          if ("function" == typeof t) {
            var n = t((e = e()));
            return function () {
              "function" == typeof n ? n() : t(null);
            };
          }
          if (null != t)
            return (
              (t.current = e = e()),
              function () {
                t.current = null;
              }
            );
        }
        function sF(e, t, n) {
          (n = null != n ? n.concat([e]) : null),
            sD(4, 4, sj.bind(null, t, e), n);
        }
        function sB() {}
        function sz(e, t) {
          var n = se();
          t = void 0 === t ? null : t;
          var r = n.memoizedState;
          return null !== t && i1(t, r[1])
            ? r[0]
            : ((n.memoizedState = [e, t]), e);
        }
        function s$(e, t) {
          var n = se();
          t = void 0 === t ? null : t;
          var r = n.memoizedState;
          if (null !== t && i1(t, r[1])) return r[0];
          if (((r = e()), iG)) {
            eu(!0);
            try {
              e();
            } finally {
              eu(!1);
            }
          }
          return (n.memoizedState = [r, t]), r;
        }
        function sq(e, t, n) {
          return void 0 === n || 0 != (0x40000000 & iU)
            ? (e.memoizedState = t)
            : ((e.memoizedState = n),
              (e = a4()),
              (iH.lanes |= e),
              (aj |= e),
              n);
        }
        function sU(e, t, n, r) {
          return nw(n, t)
            ? n
            : null !== iN.current
              ? (nw((e = sq(e, n, r)), t) || (og = !0), e)
              : 0 == (42 & iU)
                ? ((og = !0), (e.memoizedState = n))
                : ((e = a4()), (iH.lanes |= e), (aj |= e), t);
        }
        function sH(e, t, n, r, i) {
          var s = P.p;
          P.p = 0 !== s && 8 > s ? s : 8;
          var o = D.T,
            a = {};
          (D.T = a), s2(e, !1, t, n);
          try {
            var l = i(),
              c = D.S;
            if (
              (null !== c && c(a, l),
              null !== l && "object" == typeof l && "function" == typeof l.then)
            ) {
              var u,
                d,
                h =
                  ((u = []),
                  (d = {
                    status: "pending",
                    value: null,
                    reason: null,
                    then: function (e) {
                      u.push(e);
                    },
                  }),
                  l.then(
                    function () {
                      (d.status = "fulfilled"), (d.value = r);
                      for (var e = 0; e < u.length; e++) (0, u[e])(r);
                    },
                    function (e) {
                      for (
                        d.status = "rejected", d.reason = e, e = 0;
                        e < u.length;
                        e++
                      )
                        (0, u[e])(void 0);
                    },
                  ),
                  d);
              s1(e, t, h, a3(e));
            } else s1(e, t, r, a3(e));
          } catch (n) {
            s1(
              e,
              t,
              { then: function () {}, status: "rejected", reason: n },
              a3(),
            );
          } finally {
            (P.p = s), (D.T = o);
          }
        }
        function sQ() {}
        function sV(e, t, n, r) {
          if (5 !== e.tag) throw Error(a(476));
          var i = sW(e).queue;
          sH(
            e,
            i,
            t,
            R,
            null === n
              ? sQ
              : function () {
                  return sZ(e), n(r);
                },
          );
        }
        function sW(e) {
          var t = e.memoizedState;
          if (null !== t) return t;
          var n = {};
          return (
            ((t = {
              memoizedState: R,
              baseState: R,
              baseQueue: null,
              queue: {
                pending: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: ss,
                lastRenderedState: R,
              },
              next: null,
            }).next = {
              memoizedState: n,
              baseState: n,
              baseQueue: null,
              queue: {
                pending: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: ss,
                lastRenderedState: n,
              },
              next: null,
            }),
            (e.memoizedState = t),
            null !== (e = e.alternate) && (e.memoizedState = t),
            t
          );
        }
        function sZ(e) {
          var t = sW(e).next.queue;
          s1(e, t, {}, a3());
        }
        function sG() {
          return rq(cG);
        }
        function sY() {
          return se().memoizedState;
        }
        function sK() {
          return se().memoizedState;
        }
        function sX(e) {
          for (var t = e.return; null !== t; ) {
            switch (t.tag) {
              case 24:
              case 3:
                var n = a3(),
                  r = iw(t, (e = ik(n)), n);
                null !== r && (a8(r, t, n), i_(r, t, n)),
                  (t = { cache: rG() }),
                  (e.payload = t);
                return;
            }
            t = t.return;
          }
        }
        function sJ(e, t, n) {
          var r = a3();
          (n = {
            lane: r,
            revertLane: 0,
            action: n,
            hasEagerState: !1,
            eagerState: null,
            next: null,
          }),
            s5(e)
              ? s3(t, n)
              : null !== (n = n2(e, t, n, r)) && (a8(n, e, r), s4(n, t, r));
        }
        function s0(e, t, n) {
          s1(e, t, n, a3());
        }
        function s1(e, t, n, r) {
          var i = {
            lane: r,
            revertLane: 0,
            action: n,
            hasEagerState: !1,
            eagerState: null,
            next: null,
          };
          if (s5(e)) s3(t, i);
          else {
            var s = e.alternate;
            if (
              0 === e.lanes &&
              (null === s || 0 === s.lanes) &&
              null !== (s = t.lastRenderedReducer)
            )
              try {
                var o = t.lastRenderedState,
                  a = s(o, n);
                if (((i.hasEagerState = !0), (i.eagerState = a), nw(a, o)))
                  return n1(e, t, i, 0), null === aE && n0(), !1;
              } catch (e) {
              } finally {
              }
            if (null !== (n = n2(e, t, i, r)))
              return a8(n, e, r), s4(n, t, r), !0;
          }
          return !1;
        }
        function s2(e, t, n, r) {
          if (
            ((r = {
              lane: 2,
              revertLane: lz(),
              action: r,
              hasEagerState: !1,
              eagerState: null,
              next: null,
            }),
            s5(e))
          ) {
            if (t) throw Error(a(479));
          } else null !== (t = n2(e, n, r, 2)) && a8(t, e, 2);
        }
        function s5(e) {
          var t = e.alternate;
          return e === iH || (null !== t && t === iH);
        }
        function s3(e, t) {
          iZ = iW = !0;
          var n = e.pending;
          null === n ? (t.next = t) : ((t.next = n.next), (n.next = t)),
            (e.pending = t);
        }
        function s4(e, t, n) {
          if (0 != (4194048 & n)) {
            var r = t.lanes;
            (r &= e.pendingLanes), (t.lanes = n |= r), eO(e, n);
          }
        }
        var s8 = {
            readContext: rq,
            use: sr,
            useCallback: i0,
            useContext: i0,
            useEffect: i0,
            useImperativeHandle: i0,
            useLayoutEffect: i0,
            useInsertionEffect: i0,
            useMemo: i0,
            useReducer: i0,
            useRef: i0,
            useState: i0,
            useDebugValue: i0,
            useDeferredValue: i0,
            useTransition: i0,
            useSyncExternalStore: i0,
            useId: i0,
            useHostTransitionStatus: i0,
            useFormState: i0,
            useActionState: i0,
            useOptimistic: i0,
            useMemoCache: i0,
            useCacheRefresh: i0,
          },
          s6 = {
            readContext: rq,
            use: sr,
            useCallback: function (e, t) {
              return (i7().memoizedState = [e, void 0 === t ? null : t]), e;
            },
            useContext: rq,
            useEffect: sP,
            useImperativeHandle: function (e, t, n) {
              (n = null != n ? n.concat([e]) : null),
                sI(4194308, 4, sj.bind(null, t, e), n);
            },
            useLayoutEffect: function (e, t) {
              return sI(4194308, 4, e, t);
            },
            useInsertionEffect: function (e, t) {
              sI(4, 2, e, t);
            },
            useMemo: function (e, t) {
              var n = i7();
              t = void 0 === t ? null : t;
              var r = e();
              if (iG) {
                eu(!0);
                try {
                  e();
                } finally {
                  eu(!1);
                }
              }
              return (n.memoizedState = [r, t]), r;
            },
            useReducer: function (e, t, n) {
              var r = i7();
              if (void 0 !== n) {
                var i = n(t);
                if (iG) {
                  eu(!0);
                  try {
                    n(t);
                  } finally {
                    eu(!1);
                  }
                }
              } else i = t;
              return (
                (r.memoizedState = r.baseState = i),
                (r.queue = e =
                  {
                    pending: null,
                    lanes: 0,
                    dispatch: null,
                    lastRenderedReducer: e,
                    lastRenderedState: i,
                  }),
                (e = e.dispatch = sJ.bind(null, iH, e)),
                [r.memoizedState, e]
              );
            },
            useRef: function (e) {
              return (i7().memoizedState = e = { current: e });
            },
            useState: function (e) {
              var t = (e = sm(e)).queue,
                n = s0.bind(null, iH, t);
              return (t.dispatch = n), [e.memoizedState, n];
            },
            useDebugValue: sB,
            useDeferredValue: function (e, t) {
              return sq(i7(), e, t);
            },
            useTransition: function () {
              var e = sm(!1);
              return (
                (e = sH.bind(null, iH, e.queue, !0, !1)),
                (i7().memoizedState = e),
                [!1, e]
              );
            },
            useSyncExternalStore: function (e, t, n) {
              var r = iH,
                i = i7();
              if (rk) {
                if (void 0 === n) throw Error(a(407));
                n = n();
              } else {
                if (((n = t()), null === aE)) throw Error(a(349));
                0 != (124 & aA) || su(r, t, n);
              }
              i.memoizedState = n;
              var s = { value: n, getSnapshot: t };
              return (
                (i.queue = s),
                sP(sh.bind(null, r, s, e), [e]),
                (r.flags |= 2048),
                sA(9, { destroy: void 0 }, sd.bind(null, r, s, n, t), null),
                n
              );
            },
            useId: function () {
              var e = i7(),
                t = aE.identifierPrefix;
              if (rk) {
                var n = rf,
                  r = rp;
                (t =
                  "\xab" +
                  t +
                  "R" +
                  (n = (r & ~(1 << (32 - ed(r) - 1))).toString(32) + n)),
                  0 < (n = iY++) && (t += "H" + n.toString(32)),
                  (t += "\xbb");
              } else t = "\xab" + t + "r" + (n = iJ++).toString(32) + "\xbb";
              return (e.memoizedState = t);
            },
            useHostTransitionStatus: sG,
            useFormState: sO,
            useActionState: sO,
            useOptimistic: function (e) {
              var t = i7();
              t.memoizedState = t.baseState = e;
              var n = {
                pending: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: null,
                lastRenderedState: null,
              };
              return (
                (t.queue = n),
                (t = s2.bind(null, iH, !0, n)),
                (n.dispatch = t),
                [e, t]
              );
            },
            useMemoCache: si,
            useCacheRefresh: function () {
              return (i7().memoizedState = sX.bind(null, iH));
            },
          },
          s9 = {
            readContext: rq,
            use: sr,
            useCallback: sz,
            useContext: rq,
            useEffect: sR,
            useImperativeHandle: sF,
            useInsertionEffect: sM,
            useLayoutEffect: sL,
            useMemo: s$,
            useReducer: so,
            useRef: sN,
            useState: function () {
              return so(ss);
            },
            useDebugValue: sB,
            useDeferredValue: function (e, t) {
              return sU(se(), iQ.memoizedState, e, t);
            },
            useTransition: function () {
              var e = so(ss)[0],
                t = se().memoizedState;
              return ["boolean" == typeof e ? e : sn(e), t];
            },
            useSyncExternalStore: sc,
            useId: sY,
            useHostTransitionStatus: sG,
            useFormState: sT,
            useActionState: sT,
            useOptimistic: function (e, t) {
              return sg(se(), iQ, e, t);
            },
            useMemoCache: si,
            useCacheRefresh: sK,
          },
          s7 = {
            readContext: rq,
            use: sr,
            useCallback: sz,
            useContext: rq,
            useEffect: sR,
            useImperativeHandle: sF,
            useInsertionEffect: sM,
            useLayoutEffect: sL,
            useMemo: s$,
            useReducer: sl,
            useRef: sN,
            useState: function () {
              return sl(ss);
            },
            useDebugValue: sB,
            useDeferredValue: function (e, t) {
              var n = se();
              return null === iQ ? sq(n, e, t) : sU(n, iQ.memoizedState, e, t);
            },
            useTransition: function () {
              var e = sl(ss)[0],
                t = se().memoizedState;
              return ["boolean" == typeof e ? e : sn(e), t];
            },
            useSyncExternalStore: sc,
            useId: sY,
            useHostTransitionStatus: sG,
            useFormState: sC,
            useActionState: sC,
            useOptimistic: function (e, t) {
              var n = se();
              return null !== iQ
                ? sg(n, iQ, e, t)
                : ((n.baseState = e), [e, n.queue.dispatch]);
            },
            useMemoCache: si,
            useCacheRefresh: sK,
          };
        function oe(e, t, n, r) {
          (n = null == (n = n(r, (t = e.memoizedState))) ? t : d({}, t, n)),
            (e.memoizedState = n),
            0 === e.lanes && (e.updateQueue.baseState = n);
        }
        var ot = {
          enqueueSetState: function (e, t, n) {
            e = e._reactInternals;
            var r = a3(),
              i = ik(r);
            (i.payload = t),
              null != n && (i.callback = n),
              null !== (t = iw(e, i, r)) && (a8(t, e, r), i_(t, e, r));
          },
          enqueueReplaceState: function (e, t, n) {
            e = e._reactInternals;
            var r = a3(),
              i = ik(r);
            (i.tag = 1),
              (i.payload = t),
              null != n && (i.callback = n),
              null !== (t = iw(e, i, r)) && (a8(t, e, r), i_(t, e, r));
          },
          enqueueForceUpdate: function (e, t) {
            e = e._reactInternals;
            var n = a3(),
              r = ik(n);
            (r.tag = 2),
              null != t && (r.callback = t),
              null !== (t = iw(e, r, n)) && (a8(t, e, n), i_(t, e, n));
          },
        };
        function on(e, t, n, r, i, s, o) {
          return "function" == typeof (e = e.stateNode).shouldComponentUpdate
            ? e.shouldComponentUpdate(r, s, o)
            : !t.prototype ||
                !t.prototype.isPureReactComponent ||
                !n_(n, r) ||
                !n_(i, s);
        }
        function or(e, t, n, r) {
          (e = t.state),
            "function" == typeof t.componentWillReceiveProps &&
              t.componentWillReceiveProps(n, r),
            "function" == typeof t.UNSAFE_componentWillReceiveProps &&
              t.UNSAFE_componentWillReceiveProps(n, r),
            t.state !== e && ot.enqueueReplaceState(t, t.state, null);
        }
        function oi(e, t) {
          var n = t;
          if ("ref" in t)
            for (var r in ((n = {}), t)) "ref" !== r && (n[r] = t[r]);
          if ((e = e.defaultProps))
            for (var i in (n === t && (n = d({}, n)), e))
              void 0 === n[i] && (n[i] = e[i]);
          return n;
        }
        var oo =
          "function" == typeof reportError
            ? reportError
            : function (e) {
                if (
                  "object" == typeof window &&
                  "function" == typeof window.ErrorEvent
                ) {
                  var t = new window.ErrorEvent("error", {
                    bubbles: !0,
                    cancelable: !0,
                    message:
                      "object" == typeof e &&
                      null !== e &&
                      "string" == typeof e.message
                        ? String(e.message)
                        : String(e),
                    error: e,
                  });
                  if (!window.dispatchEvent(t)) return;
                } else if (
                  "object" == typeof process &&
                  "function" == typeof process.emit
                )
                  return void process.emit("uncaughtException", e);
                console.error(e);
              };
        function oa(e) {
          oo(e);
        }
        function ol(e) {
          console.error(e);
        }
        function oc(e) {
          oo(e);
        }
        function ou(e, t) {
          try {
            (0, e.onUncaughtError)(t.value, { componentStack: t.stack });
          } catch (e) {
            setTimeout(function () {
              throw e;
            });
          }
        }
        function od(e, t, n) {
          try {
            (0, e.onCaughtError)(n.value, {
              componentStack: n.stack,
              errorBoundary: 1 === t.tag ? t.stateNode : null,
            });
          } catch (e) {
            setTimeout(function () {
              throw e;
            });
          }
        }
        function oh(e, t, n) {
          return (
            ((n = ik(n)).tag = 3),
            (n.payload = { element: null }),
            (n.callback = function () {
              ou(e, t);
            }),
            n
          );
        }
        function op(e) {
          return ((e = ik(e)).tag = 3), e;
        }
        function of(e, t, n, r) {
          var i = n.type.getDerivedStateFromError;
          if ("function" == typeof i) {
            var s = r.value;
            (e.payload = function () {
              return i(s);
            }),
              (e.callback = function () {
                od(t, n, r);
              });
          }
          var o = n.stateNode;
          null !== o &&
            "function" == typeof o.componentDidCatch &&
            (e.callback = function () {
              od(t, n, r),
                "function" != typeof i &&
                  (null === aZ ? (aZ = new Set([this])) : aZ.add(this));
              var e = r.stack;
              this.componentDidCatch(r.value, {
                componentStack: null !== e ? e : "",
              });
            });
        }
        var om = Error(a(461)),
          og = !1;
        function oy(e, t, n, r) {
          t.child = null === e ? iy(t, null, n, r) : ig(t, e.child, n, r);
        }
        function ov(e, t, n, r, i) {
          n = n.render;
          var s = t.ref;
          if ("ref" in r) {
            var o = {};
            for (var a in r) "ref" !== a && (o[a] = r[a]);
          } else o = r;
          return (r$(t),
          (r = i2(e, t, n, o, s, i)),
          (a = i8()),
          null === e || og)
            ? (rk && a && ry(t), (t.flags |= 1), oy(e, t, r, i), t.child)
            : (i6(e, t, i), oF(e, t, i));
        }
        function ob(e, t, n, r, i) {
          if (null === e) {
            var s = n.type;
            return "function" != typeof s ||
              n7(s) ||
              void 0 !== s.defaultProps ||
              null !== n.compare
              ? (((e = rn(n.type, null, r, t, t.mode, i)).ref = t.ref),
                (e.return = t),
                (t.child = e))
              : ((t.tag = 15), (t.type = s), ox(e, t, s, r, i));
          }
          if (((s = e.child), !oB(e, i))) {
            var o = s.memoizedProps;
            if (
              (n = null !== (n = n.compare) ? n : n_)(o, r) &&
              e.ref === t.ref
            )
              return oF(e, t, i);
          }
          return (
            (t.flags |= 1),
            ((e = re(s, r)).ref = t.ref),
            (e.return = t),
            (t.child = e)
          );
        }
        function ox(e, t, n, r, i) {
          if (null !== e) {
            var s = e.memoizedProps;
            if (n_(s, r) && e.ref === t.ref)
              if (((og = !1), (t.pendingProps = r = s), !oB(e, i)))
                return (t.lanes = e.lanes), oF(e, t, i);
              else 0 != (131072 & e.flags) && (og = !0);
          }
          return oO(e, t, n, r, i);
        }
        function ok(e, t, n) {
          var r = t.pendingProps,
            i = r.children,
            s = null !== e ? e.memoizedState : null;
          if ("hidden" === r.mode) {
            if (0 != (128 & t.flags)) {
              if (((r = null !== s ? s.baseLanes | n : n), null !== e)) {
                for (s = 0, i = t.child = e.child; null !== i; )
                  (s = s | i.lanes | i.childLanes), (i = i.sibling);
                t.childLanes = s & ~r;
              } else (t.childLanes = 0), (t.child = null);
              return ow(e, t, r, n);
            }
            if (0 == (0x20000000 & n))
              return (
                (t.lanes = t.childLanes = 0x20000000),
                ow(e, t, null !== s ? s.baseLanes | n : n, n)
              );
            (t.memoizedState = { baseLanes: 0, cachePool: null }),
              null !== e && r4(t, null !== s ? s.cachePool : null),
              null !== s ? iD(t, s) : iP(),
              iF(t);
          } else
            null !== s
              ? (r4(t, s.cachePool), iD(t, s), iB(t), (t.memoizedState = null))
              : (null !== e && r4(t, null), iP(), iB(t));
          return oy(e, t, i, n), t.child;
        }
        function ow(e, t, n, r) {
          var i = r3();
          return (
            (t.memoizedState = {
              baseLanes: n,
              cachePool: (i =
                null === i ? null : { parent: rZ._currentValue, pool: i }),
            }),
            null !== e && r4(t, null),
            iP(),
            iF(t),
            null !== e && rB(e, t, r, !0),
            null
          );
        }
        function o_(e, t) {
          var n = t.ref;
          if (null === n) null !== e && null !== e.ref && (t.flags |= 4194816);
          else {
            if ("function" != typeof n && "object" != typeof n)
              throw Error(a(284));
            (null === e || e.ref !== n) && (t.flags |= 4194816);
          }
        }
        function oO(e, t, n, r, i) {
          return (r$(t),
          (n = i2(e, t, n, r, void 0, i)),
          (r = i8()),
          null === e || og)
            ? (rk && r && ry(t), (t.flags |= 1), oy(e, t, n, i), t.child)
            : (i6(e, t, i), oF(e, t, i));
        }
        function oT(e, t, n, r, i, s) {
          return (r$(t),
          (t.updateQueue = null),
          (n = i3(t, r, n, i)),
          i5(e),
          (r = i8()),
          null === e || og)
            ? (rk && r && ry(t), (t.flags |= 1), oy(e, t, n, s), t.child)
            : (i6(e, t, s), oF(e, t, s));
        }
        function oS(e, t, n, r, i) {
          if ((r$(t), null === t.stateNode)) {
            var s = n8,
              o = n.contextType;
            "object" == typeof o && null !== o && (s = rq(o)),
              (t.memoizedState =
                null !== (s = new n(r, s)).state && void 0 !== s.state
                  ? s.state
                  : null),
              (s.updater = ot),
              (t.stateNode = s),
              (s._reactInternals = t),
              ((s = t.stateNode).props = r),
              (s.state = t.memoizedState),
              (s.refs = {}),
              ib(t),
              (o = n.contextType),
              (s.context = "object" == typeof o && null !== o ? rq(o) : n8),
              (s.state = t.memoizedState),
              "function" == typeof (o = n.getDerivedStateFromProps) &&
                (oe(t, n, o, r), (s.state = t.memoizedState)),
              "function" == typeof n.getDerivedStateFromProps ||
                "function" == typeof s.getSnapshotBeforeUpdate ||
                ("function" != typeof s.UNSAFE_componentWillMount &&
                  "function" != typeof s.componentWillMount) ||
                ((o = s.state),
                "function" == typeof s.componentWillMount &&
                  s.componentWillMount(),
                "function" == typeof s.UNSAFE_componentWillMount &&
                  s.UNSAFE_componentWillMount(),
                o !== s.state && ot.enqueueReplaceState(s, s.state, null),
                iE(t, r, s, i),
                iS(),
                (s.state = t.memoizedState)),
              "function" == typeof s.componentDidMount && (t.flags |= 4194308),
              (r = !0);
          } else if (null === e) {
            s = t.stateNode;
            var a = t.memoizedProps,
              l = oi(n, a);
            s.props = l;
            var c = s.context,
              u = n.contextType;
            (o = n8), "object" == typeof u && null !== u && (o = rq(u));
            var d = n.getDerivedStateFromProps;
            (u =
              "function" == typeof d ||
              "function" == typeof s.getSnapshotBeforeUpdate),
              (a = t.pendingProps !== a),
              u ||
                ("function" != typeof s.UNSAFE_componentWillReceiveProps &&
                  "function" != typeof s.componentWillReceiveProps) ||
                ((a || c !== o) && or(t, s, r, o)),
              (iv = !1);
            var h = t.memoizedState;
            (s.state = h),
              iE(t, r, s, i),
              iS(),
              (c = t.memoizedState),
              a || h !== c || iv
                ? ("function" == typeof d &&
                    (oe(t, n, d, r), (c = t.memoizedState)),
                  (l = iv || on(t, n, l, r, h, c, o))
                    ? (u ||
                        ("function" != typeof s.UNSAFE_componentWillMount &&
                          "function" != typeof s.componentWillMount) ||
                        ("function" == typeof s.componentWillMount &&
                          s.componentWillMount(),
                        "function" == typeof s.UNSAFE_componentWillMount &&
                          s.UNSAFE_componentWillMount()),
                      "function" == typeof s.componentDidMount &&
                        (t.flags |= 4194308))
                    : ("function" == typeof s.componentDidMount &&
                        (t.flags |= 4194308),
                      (t.memoizedProps = r),
                      (t.memoizedState = c)),
                  (s.props = r),
                  (s.state = c),
                  (s.context = o),
                  (r = l))
                : ("function" == typeof s.componentDidMount &&
                    (t.flags |= 4194308),
                  (r = !1));
          } else {
            (s = t.stateNode),
              ix(e, t),
              (u = oi(n, (o = t.memoizedProps))),
              (s.props = u),
              (d = t.pendingProps),
              (h = s.context),
              (c = n.contextType),
              (l = n8),
              "object" == typeof c && null !== c && (l = rq(c)),
              (c =
                "function" == typeof (a = n.getDerivedStateFromProps) ||
                "function" == typeof s.getSnapshotBeforeUpdate) ||
                ("function" != typeof s.UNSAFE_componentWillReceiveProps &&
                  "function" != typeof s.componentWillReceiveProps) ||
                ((o !== d || h !== l) && or(t, s, r, l)),
              (iv = !1),
              (h = t.memoizedState),
              (s.state = h),
              iE(t, r, s, i),
              iS();
            var p = t.memoizedState;
            o !== d ||
            h !== p ||
            iv ||
            (null !== e && null !== e.dependencies && rz(e.dependencies))
              ? ("function" == typeof a &&
                  (oe(t, n, a, r), (p = t.memoizedState)),
                (u =
                  iv ||
                  on(t, n, u, r, h, p, l) ||
                  (null !== e && null !== e.dependencies && rz(e.dependencies)))
                  ? (c ||
                      ("function" != typeof s.UNSAFE_componentWillUpdate &&
                        "function" != typeof s.componentWillUpdate) ||
                      ("function" == typeof s.componentWillUpdate &&
                        s.componentWillUpdate(r, p, l),
                      "function" == typeof s.UNSAFE_componentWillUpdate &&
                        s.UNSAFE_componentWillUpdate(r, p, l)),
                    "function" == typeof s.componentDidUpdate && (t.flags |= 4),
                    "function" == typeof s.getSnapshotBeforeUpdate &&
                      (t.flags |= 1024))
                  : ("function" != typeof s.componentDidUpdate ||
                      (o === e.memoizedProps && h === e.memoizedState) ||
                      (t.flags |= 4),
                    "function" != typeof s.getSnapshotBeforeUpdate ||
                      (o === e.memoizedProps && h === e.memoizedState) ||
                      (t.flags |= 1024),
                    (t.memoizedProps = r),
                    (t.memoizedState = p)),
                (s.props = r),
                (s.state = p),
                (s.context = l),
                (r = u))
              : ("function" != typeof s.componentDidUpdate ||
                  (o === e.memoizedProps && h === e.memoizedState) ||
                  (t.flags |= 4),
                "function" != typeof s.getSnapshotBeforeUpdate ||
                  (o === e.memoizedProps && h === e.memoizedState) ||
                  (t.flags |= 1024),
                (r = !1));
          }
          return (
            (s = r),
            o_(e, t),
            (r = 0 != (128 & t.flags)),
            s || r
              ? ((s = t.stateNode),
                (n =
                  r && "function" != typeof n.getDerivedStateFromError
                    ? null
                    : s.render()),
                (t.flags |= 1),
                null !== e && r
                  ? ((t.child = ig(t, e.child, null, i)),
                    (t.child = ig(t, null, n, i)))
                  : oy(e, t, n, i),
                (t.memoizedState = s.state),
                (e = t.child))
              : (e = oF(e, t, i)),
            e
          );
        }
        function oE(e, t, n, r) {
          return rA(), (t.flags |= 256), oy(e, t, n, r), t.child;
        }
        var oC = {
          dehydrated: null,
          treeContext: null,
          retryLane: 0,
          hydrationErrors: null,
        };
        function oA(e) {
          return { baseLanes: e, cachePool: r8() };
        }
        function oN(e, t, n) {
          return (e = null !== e ? e.childLanes & ~n : 0), t && (e |= az), e;
        }
        function oI(e, t, n) {
          var r,
            i = t.pendingProps,
            s = !1,
            o = 0 != (128 & t.flags);
          if (
            ((r = o) ||
              (r =
                (null === e || null !== e.memoizedState) &&
                0 != (2 & i$.current)),
            r && ((s = !0), (t.flags &= -129)),
            (r = 0 != (32 & t.flags)),
            (t.flags &= -33),
            null === e)
          ) {
            if (rk) {
              if ((s ? ij(t) : iB(t), rk)) {
                var l,
                  c = rx;
                if ((l = c)) {
                  s: {
                    for (l = c, c = r_; 8 !== l.nodeType; )
                      if (!c || null === (l = cv(l.nextSibling))) {
                        c = null;
                        break s;
                      }
                    c = l;
                  }
                  null !== c
                    ? ((t.memoizedState = {
                        dehydrated: c,
                        treeContext:
                          null !== rh ? { id: rp, overflow: rf } : null,
                        retryLane: 0x20000000,
                        hydrationErrors: null,
                      }),
                      ((l = n9(18, null, null, 0)).stateNode = c),
                      (l.return = t),
                      (t.child = l),
                      (rb = t),
                      (rx = null),
                      (l = !0))
                    : (l = !1);
                }
                l || rT(t);
              }
              if (null !== (c = t.memoizedState) && null !== (c = c.dehydrated))
                return cy(c) ? (t.lanes = 32) : (t.lanes = 0x20000000), null;
              iz(t);
            }
            return ((c = i.children), (i = i.fallback), s)
              ? (iB(t),
                (c = oP({ mode: "hidden", children: c }, (s = t.mode))),
                (i = rr(i, s, n, null)),
                (c.return = t),
                (i.return = t),
                (c.sibling = i),
                (t.child = c),
                ((s = t.child).memoizedState = oA(n)),
                (s.childLanes = oN(e, r, n)),
                (t.memoizedState = oC),
                i)
              : (ij(t), oD(t, c));
          }
          if (null !== (l = e.memoizedState) && null !== (c = l.dehydrated)) {
            if (o)
              256 & t.flags
                ? (ij(t), (t.flags &= -257), (t = oR(e, t, n)))
                : null !== t.memoizedState
                  ? (iB(t), (t.child = e.child), (t.flags |= 128), (t = null))
                  : (iB(t),
                    (s = i.fallback),
                    (c = t.mode),
                    (i = oP({ mode: "visible", children: i.children }, c)),
                    (s = rr(s, c, n, null)),
                    (s.flags |= 2),
                    (i.return = t),
                    (s.return = t),
                    (i.sibling = s),
                    (t.child = i),
                    ig(t, e.child, null, n),
                    ((i = t.child).memoizedState = oA(n)),
                    (i.childLanes = oN(e, r, n)),
                    (t.memoizedState = oC),
                    (t = s));
            else if ((ij(t), cy(c))) {
              if ((r = c.nextSibling && c.nextSibling.dataset)) var u = r.dgst;
              (r = u),
                ((i = Error(a(419))).stack = ""),
                (i.digest = r),
                rI({ value: i, source: null, stack: null }),
                (t = oR(e, t, n));
            } else if (
              (og || rB(e, t, n, !1), (r = 0 != (n & e.childLanes)), og || r)
            ) {
              if (
                null !== (r = aE) &&
                0 !==
                  (i =
                    0 !=
                    ((i = 0 != (42 & (i = n & -n)) ? 1 : eT(i)) &
                      (r.suspendedLanes | n))
                      ? 0
                      : i) &&
                i !== l.retryLane
              )
                throw ((l.retryLane = i), n5(e, i), a8(r, e, i), om);
              "$?" === c.data || lo(), (t = oR(e, t, n));
            } else
              "$?" === c.data
                ? ((t.flags |= 192), (t.child = e.child), (t = null))
                : ((e = l.treeContext),
                  (rx = cv(c.nextSibling)),
                  (rb = t),
                  (rk = !0),
                  (rw = null),
                  (r_ = !1),
                  null !== e &&
                    ((ru[rd++] = rp),
                    (ru[rd++] = rf),
                    (ru[rd++] = rh),
                    (rp = e.id),
                    (rf = e.overflow),
                    (rh = t)),
                  (t = oD(t, i.children)),
                  (t.flags |= 4096));
            return t;
          }
          return s
            ? (iB(t),
              (s = i.fallback),
              (c = t.mode),
              (u = (l = e.child).sibling),
              ((i = re(l, {
                mode: "hidden",
                children: i.children,
              })).subtreeFlags = 0x3e00000 & l.subtreeFlags),
              null !== u
                ? (s = re(u, s))
                : ((s = rr(s, c, n, null)), (s.flags |= 2)),
              (s.return = t),
              (i.return = t),
              (i.sibling = s),
              (t.child = i),
              (i = s),
              (s = t.child),
              null === (c = e.child.memoizedState)
                ? (c = oA(n))
                : (null !== (l = c.cachePool)
                    ? ((u = rZ._currentValue),
                      (l = l.parent !== u ? { parent: u, pool: u } : l))
                    : (l = r8()),
                  (c = { baseLanes: c.baseLanes | n, cachePool: l })),
              (s.memoizedState = c),
              (s.childLanes = oN(e, r, n)),
              (t.memoizedState = oC),
              i)
            : (ij(t),
              (e = (n = e.child).sibling),
              ((n = re(n, { mode: "visible", children: i.children })).return =
                t),
              (n.sibling = null),
              null !== e &&
                (null === (r = t.deletions)
                  ? ((t.deletions = [e]), (t.flags |= 16))
                  : r.push(e)),
              (t.child = n),
              (t.memoizedState = null),
              n);
        }
        function oD(e, t) {
          return (
            ((t = oP({ mode: "visible", children: t }, e.mode)).return = e),
            (e.child = t)
          );
        }
        function oP(e, t) {
          return (
            ((e = n9(22, e, null, t)).lanes = 0),
            (e.stateNode = {
              _visibility: 1,
              _pendingMarkers: null,
              _retryCache: null,
              _transitions: null,
            }),
            e
          );
        }
        function oR(e, t, n) {
          return (
            ig(t, e.child, null, n),
            (e = oD(t, t.pendingProps.children)),
            (e.flags |= 2),
            (t.memoizedState = null),
            e
          );
        }
        function oM(e, t, n) {
          e.lanes |= t;
          var r = e.alternate;
          null !== r && (r.lanes |= t), rj(e.return, t, n);
        }
        function oL(e, t, n, r, i) {
          var s = e.memoizedState;
          null === s
            ? (e.memoizedState = {
                isBackwards: t,
                rendering: null,
                renderingStartTime: 0,
                last: r,
                tail: n,
                tailMode: i,
              })
            : ((s.isBackwards = t),
              (s.rendering = null),
              (s.renderingStartTime = 0),
              (s.last = r),
              (s.tail = n),
              (s.tailMode = i));
        }
        function oj(e, t, n) {
          var r = t.pendingProps,
            i = r.revealOrder,
            s = r.tail;
          if ((oy(e, t, r.children, n), 0 != (2 & (r = i$.current))))
            (r = (1 & r) | 2), (t.flags |= 128);
          else {
            if (null !== e && 0 != (128 & e.flags))
              r: for (e = t.child; null !== e; ) {
                if (13 === e.tag) null !== e.memoizedState && oM(e, n, t);
                else if (19 === e.tag) oM(e, n, t);
                else if (null !== e.child) {
                  (e.child.return = e), (e = e.child);
                  continue;
                }
                if (e === t) break;
                for (; null === e.sibling; ) {
                  if (null === e.return || e.return === t) break r;
                  e = e.return;
                }
                (e.sibling.return = e.return), (e = e.sibling);
              }
            r &= 1;
          }
          switch ((B(i$, r), i)) {
            case "forwards":
              for (i = null, n = t.child; null !== n; )
                null !== (e = n.alternate) && null === iq(e) && (i = n),
                  (n = n.sibling);
              null === (n = i)
                ? ((i = t.child), (t.child = null))
                : ((i = n.sibling), (n.sibling = null)),
                oL(t, !1, i, n, s);
              break;
            case "backwards":
              for (n = null, i = t.child, t.child = null; null !== i; ) {
                if (null !== (e = i.alternate) && null === iq(e)) {
                  t.child = i;
                  break;
                }
                (e = i.sibling), (i.sibling = n), (n = i), (i = e);
              }
              oL(t, !0, n, null, s);
              break;
            case "together":
              oL(t, !1, null, null, void 0);
              break;
            default:
              t.memoizedState = null;
          }
          return t.child;
        }
        function oF(e, t, n) {
          if (
            (null !== e && (t.dependencies = e.dependencies),
            (aj |= t.lanes),
            0 == (n & t.childLanes))
          ) {
            if (null === e) return null;
            else if ((rB(e, t, n, !1), 0 == (n & t.childLanes))) return null;
          }
          if (null !== e && t.child !== e.child) throw Error(a(153));
          if (null !== t.child) {
            for (
              n = re((e = t.child), e.pendingProps), t.child = n, n.return = t;
              null !== e.sibling;

            )
              (e = e.sibling),
                ((n = n.sibling = re(e, e.pendingProps)).return = t);
            n.sibling = null;
          }
          return t.child;
        }
        function oB(e, t) {
          return (
            0 != (e.lanes & t) || !!(null !== (e = e.dependencies) && rz(e))
          );
        }
        function oz(e, t, n) {
          if (null !== e)
            if (e.memoizedProps !== t.pendingProps) og = !0;
            else {
              if (!oB(e, n) && 0 == (128 & t.flags))
                return (
                  (og = !1),
                  (function (e, t, n) {
                    switch (t.tag) {
                      case 3:
                        H(t, t.stateNode.containerInfo),
                          rM(t, rZ, e.memoizedState.cache),
                          rA();
                        break;
                      case 27:
                      case 5:
                        V(t);
                        break;
                      case 4:
                        H(t, t.stateNode.containerInfo);
                        break;
                      case 10:
                        rM(t, t.type, t.memoizedProps.value);
                        break;
                      case 13:
                        var r = t.memoizedState;
                        if (null !== r) {
                          if (null !== r.dehydrated)
                            return ij(t), (t.flags |= 128), null;
                          if (0 != (n & t.child.childLanes)) return oI(e, t, n);
                          return (
                            ij(t), null !== (e = oF(e, t, n)) ? e.sibling : null
                          );
                        }
                        ij(t);
                        break;
                      case 19:
                        var i = 0 != (128 & e.flags);
                        if (
                          ((r = 0 != (n & t.childLanes)) ||
                            (rB(e, t, n, !1), (r = 0 != (n & t.childLanes))),
                          i)
                        ) {
                          if (r) return oj(e, t, n);
                          t.flags |= 128;
                        }
                        if (
                          (null !== (i = t.memoizedState) &&
                            ((i.rendering = null),
                            (i.tail = null),
                            (i.lastEffect = null)),
                          B(i$, i$.current),
                          !r)
                        )
                          return null;
                        break;
                      case 22:
                      case 23:
                        return (t.lanes = 0), ok(e, t, n);
                      case 24:
                        rM(t, rZ, e.memoizedState.cache);
                    }
                    return oF(e, t, n);
                  })(e, t, n)
                );
              og = 0 != (131072 & e.flags);
            }
          else (og = !1), rk && 0 != (1048576 & t.flags) && rg(t, rc, t.index);
          switch (((t.lanes = 0), t.tag)) {
            case 16:
              r: {
                e = t.pendingProps;
                var r = t.elementType,
                  i = r._init;
                if (((r = i(r._payload)), (t.type = r), "function" == typeof r))
                  n7(r)
                    ? ((e = oi(r, e)), (t.tag = 1), (t = oS(null, t, r, e, n)))
                    : ((t.tag = 0), (t = oO(null, t, r, e, n)));
                else {
                  if (null != r) {
                    if ((i = r.$$typeof) === k) {
                      (t.tag = 11), (t = ov(null, t, r, e, n));
                      break r;
                    } else if (i === O) {
                      (t.tag = 14), (t = ob(null, t, r, e, n));
                      break r;
                    }
                  }
                  throw Error(
                    a(
                      306,
                      (t =
                        (function e(t) {
                          if (null == t) return null;
                          if ("function" == typeof t)
                            return t.$$typeof === N
                              ? null
                              : t.displayName || t.name || null;
                          if ("string" == typeof t) return t;
                          switch (t) {
                            case m:
                              return "Fragment";
                            case y:
                              return "Profiler";
                            case g:
                              return "StrictMode";
                            case w:
                              return "Suspense";
                            case _:
                              return "SuspenseList";
                            case S:
                              return "Activity";
                          }
                          if ("object" == typeof t)
                            switch (t.$$typeof) {
                              case f:
                                return "Portal";
                              case x:
                                return (
                                  (t.displayName || "Context") + ".Provider"
                                );
                              case b:
                                return (
                                  (t._context.displayName || "Context") +
                                  ".Consumer"
                                );
                              case k:
                                var n = t.render;
                                return (
                                  (t = t.displayName) ||
                                    (t =
                                      "" !== (t = n.displayName || n.name || "")
                                        ? "ForwardRef(" + t + ")"
                                        : "ForwardRef"),
                                  t
                                );
                              case O:
                                return null !== (n = t.displayName || null)
                                  ? n
                                  : e(t.type) || "Memo";
                              case T:
                                (n = t._payload), (t = t._init);
                                try {
                                  return e(t(n));
                                } catch (e) {}
                            }
                          return null;
                        })(r) || r),
                      "",
                    ),
                  );
                }
              }
              return t;
            case 0:
              return oO(e, t, t.type, t.pendingProps, n);
            case 1:
              return (i = oi((r = t.type), t.pendingProps)), oS(e, t, r, i, n);
            case 3:
              r: {
                if ((H(t, t.stateNode.containerInfo), null === e))
                  throw Error(a(387));
                r = t.pendingProps;
                var s = t.memoizedState;
                (i = s.element), ix(e, t), iE(t, r, null, n);
                var o = t.memoizedState;
                if (
                  (rM(t, rZ, (r = o.cache)),
                  r !== s.cache && rF(t, [rZ], n, !0),
                  iS(),
                  (r = o.element),
                  s.isDehydrated)
                )
                  if (
                    ((s = { element: r, isDehydrated: !1, cache: o.cache }),
                    (t.updateQueue.baseState = s),
                    (t.memoizedState = s),
                    256 & t.flags)
                  ) {
                    t = oE(e, t, r, n);
                    break r;
                  } else if (r !== i) {
                    rI((i = nY(Error(a(424)), t))), (t = oE(e, t, r, n));
                    break r;
                  } else
                    for (
                      rx = cv(
                        (e =
                          9 === (e = t.stateNode.containerInfo).nodeType
                            ? e.body
                            : "HTML" === e.nodeName
                              ? e.ownerDocument.body
                              : e).firstChild,
                      ),
                        rb = t,
                        rk = !0,
                        rw = null,
                        r_ = !0,
                        n = iy(t, null, r, n),
                        t.child = n;
                      n;

                    )
                      (n.flags = (-3 & n.flags) | 4096), (n = n.sibling);
                else {
                  if ((rA(), r === i)) {
                    t = oF(e, t, n);
                    break r;
                  }
                  oy(e, t, r, n);
                }
                t = t.child;
              }
              return t;
            case 26:
              return (
                o_(e, t),
                null === e
                  ? (n = cA(t.type, null, t.pendingProps, null))
                    ? (t.memoizedState = n)
                    : rk ||
                      ((n = t.type),
                      (e = t.pendingProps),
                      ((r = ci(q.current).createElement(n))[eA] = t),
                      (r[eN] = e),
                      ct(r, n, e),
                      eq(r),
                      (t.stateNode = r))
                  : (t.memoizedState = cA(
                      t.type,
                      e.memoizedProps,
                      t.pendingProps,
                      e.memoizedState,
                    )),
                null
              );
            case 27:
              return (
                V(t),
                null === e &&
                  rk &&
                  ((r = t.stateNode = ck(t.type, t.pendingProps, q.current)),
                  (rb = t),
                  (r_ = !0),
                  (i = rx),
                  cf(t.type) ? ((cb = i), (rx = cv(r.firstChild))) : (rx = i)),
                oy(e, t, t.pendingProps.children, n),
                o_(e, t),
                null === e && (t.flags |= 4194304),
                t.child
              );
            case 5:
              return (
                null === e &&
                  rk &&
                  ((i = r = rx) &&
                    (null !==
                    (r = (function (e, t, n, r) {
                      for (; 1 === e.nodeType; ) {
                        if (e.nodeName.toLowerCase() !== t.toLowerCase()) {
                          if (
                            !r &&
                            ("INPUT" !== e.nodeName || "hidden" !== e.type)
                          )
                            break;
                        } else if (r) {
                          if (!e[eL])
                            switch (t) {
                              case "meta":
                                if (!e.hasAttribute("itemprop")) break;
                                return e;
                              case "link":
                                if (
                                  ("stylesheet" ===
                                    (i = e.getAttribute("rel")) &&
                                    e.hasAttribute("data-precedence")) ||
                                  i !== n.rel ||
                                  e.getAttribute("href") !==
                                    (null == n.href || "" === n.href
                                      ? null
                                      : n.href) ||
                                  e.getAttribute("crossorigin") !==
                                    (null == n.crossOrigin
                                      ? null
                                      : n.crossOrigin) ||
                                  e.getAttribute("title") !==
                                    (null == n.title ? null : n.title)
                                )
                                  break;
                                return e;
                              case "style":
                                if (e.hasAttribute("data-precedence")) break;
                                return e;
                              case "script":
                                if (
                                  ((i = e.getAttribute("src")) !==
                                    (null == n.src ? null : n.src) ||
                                    e.getAttribute("type") !==
                                      (null == n.type ? null : n.type) ||
                                    e.getAttribute("crossorigin") !==
                                      (null == n.crossOrigin
                                        ? null
                                        : n.crossOrigin)) &&
                                  i &&
                                  e.hasAttribute("async") &&
                                  !e.hasAttribute("itemprop")
                                )
                                  break;
                                return e;
                              default:
                                return e;
                            }
                        } else {
                          if ("input" !== t || "hidden" !== e.type) return e;
                          var i = null == n.name ? null : "" + n.name;
                          if (
                            "hidden" === n.type &&
                            e.getAttribute("name") === i
                          )
                            return e;
                        }
                        if (null === (e = cv(e.nextSibling))) break;
                      }
                      return null;
                    })(r, t.type, t.pendingProps, r_))
                      ? ((t.stateNode = r),
                        (rb = t),
                        (rx = cv(r.firstChild)),
                        (r_ = !1),
                        (i = !0))
                      : (i = !1)),
                  i || rT(t)),
                V(t),
                (i = t.type),
                (s = t.pendingProps),
                (o = null !== e ? e.memoizedProps : null),
                (r = s.children),
                ca(i, s)
                  ? (r = null)
                  : null !== o && ca(i, o) && (t.flags |= 32),
                null !== t.memoizedState &&
                  (cG._currentValue = i = i2(e, t, i4, null, null, n)),
                o_(e, t),
                oy(e, t, r, n),
                t.child
              );
            case 6:
              return (
                null === e &&
                  rk &&
                  ((e = n = rx) &&
                    (null !==
                    (n = (function (e, t, n) {
                      if ("" === t) return null;
                      for (; 3 !== e.nodeType; )
                        if (
                          ((1 !== e.nodeType ||
                            "INPUT" !== e.nodeName ||
                            "hidden" !== e.type) &&
                            !n) ||
                          null === (e = cv(e.nextSibling))
                        )
                          return null;
                      return e;
                    })(n, t.pendingProps, r_))
                      ? ((t.stateNode = n), (rb = t), (rx = null), (e = !0))
                      : (e = !1)),
                  e || rT(t)),
                null
              );
            case 13:
              return oI(e, t, n);
            case 4:
              return (
                H(t, t.stateNode.containerInfo),
                (r = t.pendingProps),
                null === e ? (t.child = ig(t, null, r, n)) : oy(e, t, r, n),
                t.child
              );
            case 11:
              return ov(e, t, t.type, t.pendingProps, n);
            case 7:
              return oy(e, t, t.pendingProps, n), t.child;
            case 8:
            case 12:
              return oy(e, t, t.pendingProps.children, n), t.child;
            case 10:
              return (
                (r = t.pendingProps),
                rM(t, t.type, r.value),
                oy(e, t, r.children, n),
                t.child
              );
            case 9:
              return (
                (i = t.type._context),
                (r = t.pendingProps.children),
                r$(t),
                (r = r((i = rq(i)))),
                (t.flags |= 1),
                oy(e, t, r, n),
                t.child
              );
            case 14:
              return ob(e, t, t.type, t.pendingProps, n);
            case 15:
              return ox(e, t, t.type, t.pendingProps, n);
            case 19:
              return oj(e, t, n);
            case 31:
              return (
                (r = t.pendingProps),
                (n = t.mode),
                (r = { mode: r.mode, children: r.children }),
                null === e
                  ? ((n = oP(r, n)).ref = t.ref)
                  : ((n = re(e.child, r)).ref = t.ref),
                (t.child = n),
                (n.return = t),
                (t = n)
              );
            case 22:
              return ok(e, t, n);
            case 24:
              return (
                r$(t),
                (r = rq(rZ)),
                null === e
                  ? (null === (i = r3()) &&
                      ((i = aE),
                      (s = rG()),
                      (i.pooledCache = s),
                      s.refCount++,
                      null !== s && (i.pooledCacheLanes |= n),
                      (i = s)),
                    (t.memoizedState = { parent: r, cache: i }),
                    ib(t),
                    rM(t, rZ, i))
                  : (0 != (e.lanes & n) &&
                      (ix(e, t), iE(t, null, null, n), iS()),
                    (i = e.memoizedState),
                    (s = t.memoizedState),
                    i.parent !== r
                      ? ((i = { parent: r, cache: r }),
                        (t.memoizedState = i),
                        0 === t.lanes &&
                          (t.memoizedState = t.updateQueue.baseState = i),
                        rM(t, rZ, r))
                      : (rM(t, rZ, (r = s.cache)),
                        r !== i.cache && rF(t, [rZ], n, !0))),
                oy(e, t, t.pendingProps.children, n),
                t.child
              );
            case 29:
              throw t.pendingProps;
          }
          throw Error(a(156, t.tag));
        }
        function o$(e) {
          e.flags |= 4;
        }
        function oq(e, t) {
          if ("stylesheet" !== t.type || 0 != (4 & t.state.loading))
            e.flags &= -0x1000001;
          else if (((e.flags |= 0x1000000), !cq(t))) {
            if (
              null !== (t = iM.current) &&
              ((4194048 & aA) === aA
                ? null !== iL
                : ((0x3c00000 & aA) !== aA && 0 == (0x20000000 & aA)) ||
                  t !== iL)
            )
              throw ((is = ie), r9);
            e.flags |= 8192;
          }
        }
        function oU(e, t) {
          null !== t && (e.flags |= 4),
            16384 & e.flags &&
              ((t = 22 !== e.tag ? ex() : 0x20000000),
              (e.lanes |= t),
              (a$ |= t));
        }
        function oH(e, t) {
          if (!rk)
            switch (e.tailMode) {
              case "hidden":
                t = e.tail;
                for (var n = null; null !== t; )
                  null !== t.alternate && (n = t), (t = t.sibling);
                null === n ? (e.tail = null) : (n.sibling = null);
                break;
              case "collapsed":
                n = e.tail;
                for (var r = null; null !== n; )
                  null !== n.alternate && (r = n), (n = n.sibling);
                null === r
                  ? t || null === e.tail
                    ? (e.tail = null)
                    : (e.tail.sibling = null)
                  : (r.sibling = null);
            }
        }
        function oQ(e) {
          var t = null !== e.alternate && e.alternate.child === e.child,
            n = 0,
            r = 0;
          if (t)
            for (var i = e.child; null !== i; )
              (n |= i.lanes | i.childLanes),
                (r |= 0x3e00000 & i.subtreeFlags),
                (r |= 0x3e00000 & i.flags),
                (i.return = e),
                (i = i.sibling);
          else
            for (i = e.child; null !== i; )
              (n |= i.lanes | i.childLanes),
                (r |= i.subtreeFlags),
                (r |= i.flags),
                (i.return = e),
                (i = i.sibling);
          return (e.subtreeFlags |= r), (e.childLanes = n), t;
        }
        function oV(e, t) {
          switch ((rv(t), t.tag)) {
            case 3:
              rL(rZ), Q();
              break;
            case 26:
            case 27:
            case 5:
              W(t);
              break;
            case 4:
              Q();
              break;
            case 13:
              iz(t);
              break;
            case 19:
              F(i$);
              break;
            case 10:
              rL(t.type);
              break;
            case 22:
            case 23:
              iz(t), iR(), null !== e && F(r5);
              break;
            case 24:
              rL(rZ);
          }
        }
        function oW(e, t) {
          try {
            var n = t.updateQueue,
              r = null !== n ? n.lastEffect : null;
            if (null !== r) {
              var i = r.next;
              n = i;
              do {
                if ((n.tag & e) === e) {
                  r = void 0;
                  var s = n.create;
                  n.inst.destroy = r = s();
                }
                n = n.next;
              } while (n !== i);
            }
          } catch (e) {
            lk(t, t.return, e);
          }
        }
        function oZ(e, t, n) {
          try {
            var r = t.updateQueue,
              i = null !== r ? r.lastEffect : null;
            if (null !== i) {
              var s = i.next;
              r = s;
              do {
                if ((r.tag & e) === e) {
                  var o = r.inst,
                    a = o.destroy;
                  if (void 0 !== a) {
                    (o.destroy = void 0), (i = t);
                    try {
                      a();
                    } catch (e) {
                      lk(i, n, e);
                    }
                  }
                }
                r = r.next;
              } while (r !== s);
            }
          } catch (e) {
            lk(t, t.return, e);
          }
        }
        function oG(e) {
          var t = e.updateQueue;
          if (null !== t) {
            var n = e.stateNode;
            try {
              iA(t, n);
            } catch (t) {
              lk(e, e.return, t);
            }
          }
        }
        function oY(e, t, n) {
          (n.props = oi(e.type, e.memoizedProps)), (n.state = e.memoizedState);
          try {
            n.componentWillUnmount();
          } catch (n) {
            lk(e, t, n);
          }
        }
        function oK(e, t) {
          try {
            var n = e.ref;
            if (null !== n) {
              switch (e.tag) {
                case 26:
                case 27:
                case 5:
                  var r = e.stateNode;
                  break;
                default:
                  r = e.stateNode;
              }
              "function" == typeof n ? (e.refCleanup = n(r)) : (n.current = r);
            }
          } catch (n) {
            lk(e, t, n);
          }
        }
        function oX(e, t) {
          var n = e.ref,
            r = e.refCleanup;
          if (null !== n)
            if ("function" == typeof r)
              try {
                r();
              } catch (n) {
                lk(e, t, n);
              } finally {
                (e.refCleanup = null),
                  null != (e = e.alternate) && (e.refCleanup = null);
              }
            else if ("function" == typeof n)
              try {
                n(null);
              } catch (n) {
                lk(e, t, n);
              }
            else n.current = null;
        }
        function oJ(e) {
          var t = e.type,
            n = e.memoizedProps,
            r = e.stateNode;
          try {
            switch (t) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                n.autoFocus && r.focus();
                break;
              case "img":
                n.src ? (r.src = n.src) : n.srcSet && (r.srcset = n.srcSet);
            }
          } catch (t) {
            lk(e, e.return, t);
          }
        }
        function o0(e, t, n) {
          try {
            var r = e.stateNode;
            (function (e, t, n, r) {
              switch (t) {
                case "div":
                case "span":
                case "svg":
                case "path":
                case "a":
                case "g":
                case "p":
                case "li":
                  break;
                case "input":
                  var i = null,
                    s = null,
                    o = null,
                    l = null,
                    c = null,
                    u = null,
                    d = null;
                  for (f in n) {
                    var h = n[f];
                    if (n.hasOwnProperty(f) && null != h)
                      switch (f) {
                        case "checked":
                        case "value":
                          break;
                        case "defaultValue":
                          c = h;
                        default:
                          r.hasOwnProperty(f) || l7(e, t, f, null, r, h);
                      }
                  }
                  for (var p in r) {
                    var f = r[p];
                    if (
                      ((h = n[p]),
                      r.hasOwnProperty(p) && (null != f || null != h))
                    )
                      switch (p) {
                        case "type":
                          s = f;
                          break;
                        case "name":
                          i = f;
                          break;
                        case "checked":
                          u = f;
                          break;
                        case "defaultChecked":
                          d = f;
                          break;
                        case "value":
                          o = f;
                          break;
                        case "defaultValue":
                          l = f;
                          break;
                        case "children":
                        case "dangerouslySetInnerHTML":
                          if (null != f) throw Error(a(137, t));
                          break;
                        default:
                          f !== h && l7(e, t, p, f, r, h);
                      }
                  }
                  te(e, o, l, c, u, d, s, i);
                  return;
                case "select":
                  for (s in ((f = o = l = p = null), n))
                    if (((c = n[s]), n.hasOwnProperty(s) && null != c))
                      switch (s) {
                        case "value":
                          break;
                        case "multiple":
                          f = c;
                        default:
                          r.hasOwnProperty(s) || l7(e, t, s, null, r, c);
                      }
                  for (i in r)
                    if (
                      ((s = r[i]),
                      (c = n[i]),
                      r.hasOwnProperty(i) && (null != s || null != c))
                    )
                      switch (i) {
                        case "value":
                          p = s;
                          break;
                        case "defaultValue":
                          l = s;
                          break;
                        case "multiple":
                          o = s;
                        default:
                          s !== c && l7(e, t, i, s, r, c);
                      }
                  (t = l),
                    (n = o),
                    (r = f),
                    null != p
                      ? tr(e, !!n, p, !1)
                      : !!r != !!n &&
                        (null != t
                          ? tr(e, !!n, t, !0)
                          : tr(e, !!n, n ? [] : "", !1));
                  return;
                case "textarea":
                  for (l in ((f = p = null), n))
                    if (
                      ((i = n[l]),
                      n.hasOwnProperty(l) && null != i && !r.hasOwnProperty(l))
                    )
                      switch (l) {
                        case "value":
                        case "children":
                          break;
                        default:
                          l7(e, t, l, null, r, i);
                      }
                  for (o in r)
                    if (
                      ((i = r[o]),
                      (s = n[o]),
                      r.hasOwnProperty(o) && (null != i || null != s))
                    )
                      switch (o) {
                        case "value":
                          p = i;
                          break;
                        case "defaultValue":
                          f = i;
                          break;
                        case "children":
                          break;
                        case "dangerouslySetInnerHTML":
                          if (null != i) throw Error(a(91));
                          break;
                        default:
                          i !== s && l7(e, t, o, i, r, s);
                      }
                  ti(e, p, f);
                  return;
                case "option":
                  for (var m in n)
                    (p = n[m]),
                      n.hasOwnProperty(m) &&
                        null != p &&
                        !r.hasOwnProperty(m) &&
                        ("selected" === m
                          ? (e.selected = !1)
                          : l7(e, t, m, null, r, p));
                  for (c in r)
                    (p = r[c]),
                      (f = n[c]),
                      r.hasOwnProperty(c) &&
                        p !== f &&
                        (null != p || null != f) &&
                        ("selected" === c
                          ? (e.selected =
                              p &&
                              "function" != typeof p &&
                              "symbol" != typeof p)
                          : l7(e, t, c, p, r, f));
                  return;
                case "img":
                case "link":
                case "area":
                case "base":
                case "br":
                case "col":
                case "embed":
                case "hr":
                case "keygen":
                case "meta":
                case "param":
                case "source":
                case "track":
                case "wbr":
                case "menuitem":
                  for (var g in n)
                    (p = n[g]),
                      n.hasOwnProperty(g) &&
                        null != p &&
                        !r.hasOwnProperty(g) &&
                        l7(e, t, g, null, r, p);
                  for (u in r)
                    if (
                      ((p = r[u]),
                      (f = n[u]),
                      r.hasOwnProperty(u) &&
                        p !== f &&
                        (null != p || null != f))
                    )
                      switch (u) {
                        case "children":
                        case "dangerouslySetInnerHTML":
                          if (null != p) throw Error(a(137, t));
                          break;
                        default:
                          l7(e, t, u, p, r, f);
                      }
                  return;
                default:
                  if (tu(t)) {
                    for (var y in n)
                      (p = n[y]),
                        n.hasOwnProperty(y) &&
                          void 0 !== p &&
                          !r.hasOwnProperty(y) &&
                          ce(e, t, y, void 0, r, p);
                    for (d in r)
                      (p = r[d]),
                        (f = n[d]),
                        r.hasOwnProperty(d) &&
                          p !== f &&
                          (void 0 !== p || void 0 !== f) &&
                          ce(e, t, d, p, r, f);
                    return;
                  }
              }
              for (var v in n)
                (p = n[v]),
                  n.hasOwnProperty(v) &&
                    null != p &&
                    !r.hasOwnProperty(v) &&
                    l7(e, t, v, null, r, p);
              for (h in r)
                (p = r[h]),
                  (f = n[h]),
                  r.hasOwnProperty(h) &&
                    p !== f &&
                    (null != p || null != f) &&
                    l7(e, t, h, p, r, f);
            })(r, e.type, n, t),
              (r[eN] = t);
          } catch (t) {
            lk(e, e.return, t);
          }
        }
        function o1(e) {
          return (
            5 === e.tag ||
            3 === e.tag ||
            26 === e.tag ||
            (27 === e.tag && cf(e.type)) ||
            4 === e.tag
          );
        }
        function o2(e) {
          r: for (;;) {
            for (; null === e.sibling; ) {
              if (null === e.return || o1(e.return)) return null;
              e = e.return;
            }
            for (
              e.sibling.return = e.return, e = e.sibling;
              5 !== e.tag && 6 !== e.tag && 18 !== e.tag;

            ) {
              if (
                (27 === e.tag && cf(e.type)) ||
                2 & e.flags ||
                null === e.child ||
                4 === e.tag
              )
                continue r;
              (e.child.return = e), (e = e.child);
            }
            if (!(2 & e.flags)) return e.stateNode;
          }
        }
        function o5(e, t, n) {
          var r = e.tag;
          if (5 === r || 6 === r)
            (e = e.stateNode), t ? n.insertBefore(e, t) : n.appendChild(e);
          else if (
            4 !== r &&
            (27 === r && cf(e.type) && (n = e.stateNode),
            null !== (e = e.child))
          )
            for (o5(e, t, n), e = e.sibling; null !== e; )
              o5(e, t, n), (e = e.sibling);
        }
        function o3(e) {
          var t = e.stateNode,
            n = e.memoizedProps;
          try {
            for (var r = e.type, i = t.attributes; i.length; )
              t.removeAttributeNode(i[0]);
            ct(t, r, n), (t[eA] = e), (t[eN] = n);
          } catch (t) {
            lk(e, e.return, t);
          }
        }
        var o4 = !1,
          o8 = !1,
          o6 = !1,
          o9 = "function" == typeof WeakSet ? WeakSet : Set,
          o7 = null;
        function ae(e, t, n) {
          var r = n.flags;
          switch (n.tag) {
            case 0:
            case 11:
            case 15:
              ad(e, n), 4 & r && oW(5, n);
              break;
            case 1:
              if ((ad(e, n), 4 & r))
                if (((e = n.stateNode), null === t))
                  try {
                    e.componentDidMount();
                  } catch (e) {
                    lk(n, n.return, e);
                  }
                else {
                  var i = oi(n.type, t.memoizedProps);
                  t = t.memoizedState;
                  try {
                    e.componentDidUpdate(
                      i,
                      t,
                      e.__reactInternalSnapshotBeforeUpdate,
                    );
                  } catch (e) {
                    lk(n, n.return, e);
                  }
                }
              64 & r && oG(n), 512 & r && oK(n, n.return);
              break;
            case 3:
              if ((ad(e, n), 64 & r && null !== (e = n.updateQueue))) {
                if (((t = null), null !== n.child))
                  switch (n.child.tag) {
                    case 27:
                    case 5:
                    case 1:
                      t = n.child.stateNode;
                  }
                try {
                  iA(e, t);
                } catch (e) {
                  lk(n, n.return, e);
                }
              }
              break;
            case 27:
              null === t && 4 & r && o3(n);
            case 26:
            case 5:
              ad(e, n),
                null === t && 4 & r && oJ(n),
                512 & r && oK(n, n.return);
              break;
            case 12:
            default:
              ad(e, n);
              break;
            case 13:
              ad(e, n),
                4 & r && as(e, n),
                64 & r &&
                  null !== (e = n.memoizedState) &&
                  null !== (e = e.dehydrated) &&
                  (function (e, t) {
                    var n = e.ownerDocument;
                    if ("$?" !== e.data || "complete" === n.readyState) t();
                    else {
                      var r = function () {
                        t(), n.removeEventListener("DOMContentLoaded", r);
                      };
                      n.addEventListener("DOMContentLoaded", r),
                        (e._reactRetry = r);
                    }
                  })(e, (n = lT.bind(null, n)));
              break;
            case 22:
              if (!(r = null !== n.memoizedState || o4)) {
                (t = (null !== t && null !== t.memoizedState) || o8), (i = o4);
                var s = o8;
                (o4 = r),
                  (o8 = t) && !s
                    ? (function e(t, n, r) {
                        for (
                          r = r && 0 != (8772 & n.subtreeFlags), n = n.child;
                          null !== n;

                        ) {
                          var i = n.alternate,
                            s = t,
                            o = n,
                            a = o.flags;
                          switch (o.tag) {
                            case 0:
                            case 11:
                            case 15:
                              e(s, o, r), oW(4, o);
                              break;
                            case 1:
                              if (
                                (e(s, o, r),
                                "function" ==
                                  typeof (s = (i = o).stateNode)
                                    .componentDidMount)
                              )
                                try {
                                  s.componentDidMount();
                                } catch (e) {
                                  lk(i, i.return, e);
                                }
                              if (null !== (s = (i = o).updateQueue)) {
                                var l = i.stateNode;
                                try {
                                  var c = s.shared.hiddenCallbacks;
                                  if (null !== c)
                                    for (
                                      s.shared.hiddenCallbacks = null, s = 0;
                                      s < c.length;
                                      s++
                                    )
                                      iC(c[s], l);
                                } catch (e) {
                                  lk(i, i.return, e);
                                }
                              }
                              r && 64 & a && oG(o), oK(o, o.return);
                              break;
                            case 27:
                              o3(o);
                            case 26:
                            case 5:
                              e(s, o, r),
                                r && null === i && 4 & a && oJ(o),
                                oK(o, o.return);
                              break;
                            case 12:
                            default:
                              e(s, o, r);
                              break;
                            case 13:
                              e(s, o, r), r && 4 & a && as(s, o);
                              break;
                            case 22:
                              null === o.memoizedState && e(s, o, r),
                                oK(o, o.return);
                            case 30:
                          }
                          n = n.sibling;
                        }
                      })(e, n, 0 != (8772 & n.subtreeFlags))
                    : ad(e, n),
                  (o4 = i),
                  (o8 = s);
              }
            case 30:
          }
        }
        var at = null,
          an = !1;
        function ar(e, t, n) {
          for (n = n.child; null !== n; ) ai(e, t, n), (n = n.sibling);
        }
        function ai(e, t, n) {
          if (ec && "function" == typeof ec.onCommitFiberUnmount)
            try {
              ec.onCommitFiberUnmount(el, n);
            } catch (e) {}
          switch (n.tag) {
            case 26:
              o8 || oX(n, t),
                ar(e, t, n),
                n.memoizedState
                  ? n.memoizedState.count--
                  : n.stateNode && (n = n.stateNode).parentNode.removeChild(n);
              break;
            case 27:
              o8 || oX(n, t);
              var r = at,
                i = an;
              cf(n.type) && ((at = n.stateNode), (an = !1)),
                ar(e, t, n),
                cw(n.stateNode),
                (at = r),
                (an = i);
              break;
            case 5:
              o8 || oX(n, t);
            case 6:
              if (
                ((r = at),
                (i = an),
                (at = null),
                ar(e, t, n),
                (at = r),
                (an = i),
                null !== at)
              )
                if (an)
                  try {
                    (9 === at.nodeType
                      ? at.body
                      : "HTML" === at.nodeName
                        ? at.ownerDocument.body
                        : at
                    ).removeChild(n.stateNode);
                  } catch (e) {
                    lk(n, t, e);
                  }
                else
                  try {
                    at.removeChild(n.stateNode);
                  } catch (e) {
                    lk(n, t, e);
                  }
              break;
            case 18:
              null !== at &&
                (an
                  ? (cm(
                      9 === (e = at).nodeType
                        ? e.body
                        : "HTML" === e.nodeName
                          ? e.ownerDocument.body
                          : e,
                      n.stateNode,
                    ),
                    ug(e))
                  : cm(at, n.stateNode));
              break;
            case 4:
              (r = at),
                (i = an),
                (at = n.stateNode.containerInfo),
                (an = !0),
                ar(e, t, n),
                (at = r),
                (an = i);
              break;
            case 0:
            case 11:
            case 14:
            case 15:
              o8 || oZ(2, n, t), o8 || oZ(4, n, t), ar(e, t, n);
              break;
            case 1:
              o8 ||
                (oX(n, t),
                "function" == typeof (r = n.stateNode).componentWillUnmount &&
                  oY(n, t, r)),
                ar(e, t, n);
              break;
            case 21:
            default:
              ar(e, t, n);
              break;
            case 22:
              (o8 = (r = o8) || null !== n.memoizedState),
                ar(e, t, n),
                (o8 = r);
          }
        }
        function as(e, t) {
          if (
            null === t.memoizedState &&
            null !== (e = t.alternate) &&
            null !== (e = e.memoizedState) &&
            null !== (e = e.dehydrated)
          )
            try {
              ug(e);
            } catch (e) {
              lk(t, t.return, e);
            }
        }
        function ao(e, t) {
          var n = (function (e) {
            switch (e.tag) {
              case 13:
              case 19:
                var t = e.stateNode;
                return null === t && (t = e.stateNode = new o9()), t;
              case 22:
                return (
                  null === (t = (e = e.stateNode)._retryCache) &&
                    (t = e._retryCache = new o9()),
                  t
                );
              default:
                throw Error(a(435, e.tag));
            }
          })(e);
          t.forEach(function (t) {
            var r = lS.bind(null, e, t);
            n.has(t) || (n.add(t), t.then(r, r));
          });
        }
        function aa(e, t) {
          var n = t.deletions;
          if (null !== n)
            for (var r = 0; r < n.length; r++) {
              var i = n[r],
                s = e,
                o = t,
                l = o;
              r: for (; null !== l; ) {
                switch (l.tag) {
                  case 27:
                    if (cf(l.type)) {
                      (at = l.stateNode), (an = !1);
                      break r;
                    }
                    break;
                  case 5:
                    (at = l.stateNode), (an = !1);
                    break r;
                  case 3:
                  case 4:
                    (at = l.stateNode.containerInfo), (an = !0);
                    break r;
                }
                l = l.return;
              }
              if (null === at) throw Error(a(160));
              ai(s, o, i),
                (at = null),
                (an = !1),
                null !== (s = i.alternate) && (s.return = null),
                (i.return = null);
            }
          if (13878 & t.subtreeFlags)
            for (t = t.child; null !== t; ) ac(t, e), (t = t.sibling);
        }
        var al = null;
        function ac(e, t) {
          var n = e.alternate,
            r = e.flags;
          switch (e.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              aa(t, e),
                au(e),
                4 & r && (oZ(3, e, e.return), oW(3, e), oZ(5, e, e.return));
              break;
            case 1:
              aa(t, e),
                au(e),
                512 & r && (o8 || null === n || oX(n, n.return)),
                64 & r &&
                  o4 &&
                  null !== (e = e.updateQueue) &&
                  null !== (r = e.callbacks) &&
                  ((n = e.shared.hiddenCallbacks),
                  (e.shared.hiddenCallbacks = null === n ? r : n.concat(r)));
              break;
            case 26:
              var i = al;
              if (
                (aa(t, e),
                au(e),
                512 & r && (o8 || null === n || oX(n, n.return)),
                4 & r)
              ) {
                var s = null !== n ? n.memoizedState : null;
                if (((r = e.memoizedState), null === n))
                  if (null === r)
                    if (null === e.stateNode) {
                      r: {
                        (r = e.type),
                          (n = e.memoizedProps),
                          (i = i.ownerDocument || i);
                        i: switch (r) {
                          case "title":
                            (!(s = i.getElementsByTagName("title")[0]) ||
                              s[eL] ||
                              s[eA] ||
                              "http://www.w3.org/2000/svg" === s.namespaceURI ||
                              s.hasAttribute("itemprop")) &&
                              ((s = i.createElement(r)),
                              i.head.insertBefore(
                                s,
                                i.querySelector("head > title"),
                              )),
                              ct(s, r, n),
                              (s[eA] = e),
                              eq(s),
                              (r = s);
                            break r;
                          case "link":
                            var o = cz("link", "href", i).get(
                              r + (n.href || ""),
                            );
                            if (o) {
                              for (var l = 0; l < o.length; l++)
                                if (
                                  (s = o[l]).getAttribute("href") ===
                                    (null == n.href || "" === n.href
                                      ? null
                                      : n.href) &&
                                  s.getAttribute("rel") ===
                                    (null == n.rel ? null : n.rel) &&
                                  s.getAttribute("title") ===
                                    (null == n.title ? null : n.title) &&
                                  s.getAttribute("crossorigin") ===
                                    (null == n.crossOrigin
                                      ? null
                                      : n.crossOrigin)
                                ) {
                                  o.splice(l, 1);
                                  break i;
                                }
                            }
                            ct((s = i.createElement(r)), r, n),
                              i.head.appendChild(s);
                            break;
                          case "meta":
                            if (
                              (o = cz("meta", "content", i).get(
                                r + (n.content || ""),
                              ))
                            ) {
                              for (l = 0; l < o.length; l++)
                                if (
                                  (s = o[l]).getAttribute("content") ===
                                    (null == n.content
                                      ? null
                                      : "" + n.content) &&
                                  s.getAttribute("name") ===
                                    (null == n.name ? null : n.name) &&
                                  s.getAttribute("property") ===
                                    (null == n.property ? null : n.property) &&
                                  s.getAttribute("http-equiv") ===
                                    (null == n.httpEquiv
                                      ? null
                                      : n.httpEquiv) &&
                                  s.getAttribute("charset") ===
                                    (null == n.charSet ? null : n.charSet)
                                ) {
                                  o.splice(l, 1);
                                  break i;
                                }
                            }
                            ct((s = i.createElement(r)), r, n),
                              i.head.appendChild(s);
                            break;
                          default:
                            throw Error(a(468, r));
                        }
                        (s[eA] = e), eq(s), (r = s);
                      }
                      e.stateNode = r;
                    } else c$(i, e.type, e.stateNode);
                  else e.stateNode = cM(i, r, e.memoizedProps);
                else
                  s !== r
                    ? (null === s
                        ? null !== n.stateNode &&
                          (n = n.stateNode).parentNode.removeChild(n)
                        : s.count--,
                      null === r
                        ? c$(i, e.type, e.stateNode)
                        : cM(i, r, e.memoizedProps))
                    : null === r &&
                      null !== e.stateNode &&
                      o0(e, e.memoizedProps, n.memoizedProps);
              }
              break;
            case 27:
              aa(t, e),
                au(e),
                512 & r && (o8 || null === n || oX(n, n.return)),
                null !== n && 4 & r && o0(e, e.memoizedProps, n.memoizedProps);
              break;
            case 5:
              if (
                (aa(t, e),
                au(e),
                512 & r && (o8 || null === n || oX(n, n.return)),
                32 & e.flags)
              ) {
                i = e.stateNode;
                try {
                  to(i, "");
                } catch (t) {
                  lk(e, e.return, t);
                }
              }
              4 & r &&
                null != e.stateNode &&
                ((i = e.memoizedProps),
                o0(e, i, null !== n ? n.memoizedProps : i)),
                1024 & r && (o6 = !0);
              break;
            case 6:
              if ((aa(t, e), au(e), 4 & r)) {
                if (null === e.stateNode) throw Error(a(162));
                (r = e.memoizedProps), (n = e.stateNode);
                try {
                  n.nodeValue = r;
                } catch (t) {
                  lk(e, e.return, t);
                }
              }
              break;
            case 3:
              if (
                ((cB = null),
                (i = al),
                (al = cT(t.containerInfo)),
                aa(t, e),
                (al = i),
                au(e),
                4 & r && null !== n && n.memoizedState.isDehydrated)
              )
                try {
                  ug(t.containerInfo);
                } catch (t) {
                  lk(e, e.return, t);
                }
              o6 &&
                ((o6 = !1),
                (function e(t) {
                  if (1024 & t.subtreeFlags)
                    for (t = t.child; null !== t; ) {
                      var n = t;
                      e(n),
                        5 === n.tag && 1024 & n.flags && n.stateNode.reset(),
                        (t = t.sibling);
                    }
                })(e));
              break;
            case 4:
              (r = al),
                (al = cT(e.stateNode.containerInfo)),
                aa(t, e),
                au(e),
                (al = r);
              break;
            case 12:
            default:
              aa(t, e), au(e);
              break;
            case 13:
              aa(t, e),
                au(e),
                8192 & e.child.flags &&
                  (null !== e.memoizedState) !=
                    (null !== n && null !== n.memoizedState) &&
                  (aQ = J()),
                4 & r &&
                  null !== (r = e.updateQueue) &&
                  ((e.updateQueue = null), ao(e, r));
              break;
            case 22:
              i = null !== e.memoizedState;
              var c = null !== n && null !== n.memoizedState,
                u = o4,
                d = o8;
              if (
                ((o4 = u || i),
                (o8 = d || c),
                aa(t, e),
                (o8 = d),
                (o4 = u),
                au(e),
                8192 & r)
              )
                r: for (
                  (t = e.stateNode)._visibility = i
                    ? -2 & t._visibility
                    : 1 | t._visibility,
                    i &&
                      (null === n ||
                        c ||
                        o4 ||
                        o8 ||
                        (function e(t) {
                          for (t = t.child; null !== t; ) {
                            var n = t;
                            switch (n.tag) {
                              case 0:
                              case 11:
                              case 14:
                              case 15:
                                oZ(4, n, n.return), e(n);
                                break;
                              case 1:
                                oX(n, n.return);
                                var r = n.stateNode;
                                "function" == typeof r.componentWillUnmount &&
                                  oY(n, n.return, r),
                                  e(n);
                                break;
                              case 27:
                                cw(n.stateNode);
                              case 26:
                              case 5:
                                oX(n, n.return), e(n);
                                break;
                              case 22:
                                null === n.memoizedState && e(n);
                                break;
                              default:
                                e(n);
                            }
                            t = t.sibling;
                          }
                        })(e)),
                    n = null,
                    t = e;
                  ;

                ) {
                  if (5 === t.tag || 26 === t.tag) {
                    if (null === n) {
                      c = n = t;
                      try {
                        if (((s = c.stateNode), i))
                          (o = s.style),
                            "function" == typeof o.setProperty
                              ? o.setProperty("display", "none", "important")
                              : (o.display = "none");
                        else {
                          l = c.stateNode;
                          var h = c.memoizedProps.style,
                            p =
                              null != h && h.hasOwnProperty("display")
                                ? h.display
                                : null;
                          l.style.display =
                            null == p || "boolean" == typeof p
                              ? ""
                              : ("" + p).trim();
                        }
                      } catch (e) {
                        lk(c, c.return, e);
                      }
                    }
                  } else if (6 === t.tag) {
                    if (null === n) {
                      c = t;
                      try {
                        c.stateNode.nodeValue = i ? "" : c.memoizedProps;
                      } catch (e) {
                        lk(c, c.return, e);
                      }
                    }
                  } else if (
                    ((22 !== t.tag && 23 !== t.tag) ||
                      null === t.memoizedState ||
                      t === e) &&
                    null !== t.child
                  ) {
                    (t.child.return = t), (t = t.child);
                    continue;
                  }
                  if (t === e) break;
                  for (; null === t.sibling; ) {
                    if (null === t.return || t.return === e) break r;
                    n === t && (n = null), (t = t.return);
                  }
                  n === t && (n = null),
                    (t.sibling.return = t.return),
                    (t = t.sibling);
                }
              4 & r &&
                null !== (r = e.updateQueue) &&
                null !== (n = r.retryQueue) &&
                ((r.retryQueue = null), ao(e, n));
              break;
            case 19:
              aa(t, e),
                au(e),
                4 & r &&
                  null !== (r = e.updateQueue) &&
                  ((e.updateQueue = null), ao(e, r));
            case 30:
            case 21:
          }
        }
        function au(e) {
          var t = e.flags;
          if (2 & t) {
            try {
              for (var n, r = e.return; null !== r; ) {
                if (o1(r)) {
                  n = r;
                  break;
                }
                r = r.return;
              }
              if (null == n) throw Error(a(160));
              switch (n.tag) {
                case 27:
                  var i = n.stateNode,
                    s = o2(e);
                  o5(e, s, i);
                  break;
                case 5:
                  var o = n.stateNode;
                  32 & n.flags && (to(o, ""), (n.flags &= -33));
                  var l = o2(e);
                  o5(e, l, o);
                  break;
                case 3:
                case 4:
                  var c = n.stateNode.containerInfo,
                    u = o2(e);
                  !(function e(t, n, r) {
                    var i = t.tag;
                    if (5 === i || 6 === i)
                      (t = t.stateNode),
                        n
                          ? (9 === r.nodeType
                              ? r.body
                              : "HTML" === r.nodeName
                                ? r.ownerDocument.body
                                : r
                            ).insertBefore(t, n)
                          : ((n =
                              9 === r.nodeType
                                ? r.body
                                : "HTML" === r.nodeName
                                  ? r.ownerDocument.body
                                  : r).appendChild(t),
                            null != (r = r._reactRootContainer) ||
                              null !== n.onclick ||
                              (n.onclick = l9));
                    else if (
                      4 !== i &&
                      (27 === i &&
                        cf(t.type) &&
                        ((r = t.stateNode), (n = null)),
                      null !== (t = t.child))
                    )
                      for (e(t, n, r), t = t.sibling; null !== t; )
                        e(t, n, r), (t = t.sibling);
                  })(e, u, c);
                  break;
                default:
                  throw Error(a(161));
              }
            } catch (t) {
              lk(e, e.return, t);
            }
            e.flags &= -3;
          }
          4096 & t && (e.flags &= -4097);
        }
        function ad(e, t) {
          if (8772 & t.subtreeFlags)
            for (t = t.child; null !== t; )
              ae(e, t.alternate, t), (t = t.sibling);
        }
        function ah(e, t) {
          var n = null;
          null !== e &&
            null !== e.memoizedState &&
            null !== e.memoizedState.cachePool &&
            (n = e.memoizedState.cachePool.pool),
            (e = null),
            null !== t.memoizedState &&
              null !== t.memoizedState.cachePool &&
              (e = t.memoizedState.cachePool.pool),
            e !== n && (null != e && e.refCount++, null != n && rY(n));
        }
        function ap(e, t) {
          (e = null),
            null !== t.alternate && (e = t.alternate.memoizedState.cache),
            (t = t.memoizedState.cache) !== e &&
              (t.refCount++, null != e && rY(e));
        }
        function af(e, t, n, r) {
          if (10256 & t.subtreeFlags)
            for (t = t.child; null !== t; ) am(e, t, n, r), (t = t.sibling);
        }
        function am(e, t, n, r) {
          var i = t.flags;
          switch (t.tag) {
            case 0:
            case 11:
            case 15:
              af(e, t, n, r), 2048 & i && oW(9, t);
              break;
            case 1:
            case 13:
            default:
              af(e, t, n, r);
              break;
            case 3:
              af(e, t, n, r),
                2048 & i &&
                  ((e = null),
                  null !== t.alternate && (e = t.alternate.memoizedState.cache),
                  (t = t.memoizedState.cache) !== e &&
                    (t.refCount++, null != e && rY(e)));
              break;
            case 12:
              if (2048 & i) {
                af(e, t, n, r), (e = t.stateNode);
                try {
                  var s = t.memoizedProps,
                    o = s.id,
                    a = s.onPostCommit;
                  "function" == typeof a &&
                    a(
                      o,
                      null === t.alternate ? "mount" : "update",
                      e.passiveEffectDuration,
                      -0,
                    );
                } catch (e) {
                  lk(t, t.return, e);
                }
              } else af(e, t, n, r);
              break;
            case 23:
              break;
            case 22:
              (s = t.stateNode),
                (o = t.alternate),
                null !== t.memoizedState
                  ? 2 & s._visibility
                    ? af(e, t, n, r)
                    : ag(e, t)
                  : 2 & s._visibility
                    ? af(e, t, n, r)
                    : ((s._visibility |= 2),
                      (function e(t, n, r, i, s) {
                        for (
                          s = s && 0 != (10256 & n.subtreeFlags), n = n.child;
                          null !== n;

                        ) {
                          var o = n,
                            a = o.flags;
                          switch (o.tag) {
                            case 0:
                            case 11:
                            case 15:
                              e(t, o, r, i, s), oW(8, o);
                              break;
                            case 23:
                              break;
                            case 22:
                              var l = o.stateNode;
                              null !== o.memoizedState
                                ? 2 & l._visibility
                                  ? e(t, o, r, i, s)
                                  : ag(t, o)
                                : ((l._visibility |= 2), e(t, o, r, i, s)),
                                s && 2048 & a && ah(o.alternate, o);
                              break;
                            case 24:
                              e(t, o, r, i, s),
                                s && 2048 & a && ap(o.alternate, o);
                              break;
                            default:
                              e(t, o, r, i, s);
                          }
                          n = n.sibling;
                        }
                      })(e, t, n, r, 0 != (10256 & t.subtreeFlags))),
                2048 & i && ah(o, t);
              break;
            case 24:
              af(e, t, n, r), 2048 & i && ap(t.alternate, t);
          }
        }
        function ag(e, t) {
          if (10256 & t.subtreeFlags)
            for (t = t.child; null !== t; ) {
              var n = t,
                r = n.flags;
              switch (n.tag) {
                case 22:
                  ag(e, n), 2048 & r && ah(n.alternate, n);
                  break;
                case 24:
                  ag(e, n), 2048 & r && ap(n.alternate, n);
                  break;
                default:
                  ag(e, n);
              }
              t = t.sibling;
            }
        }
        var ay = 8192;
        function av(e) {
          if (e.subtreeFlags & ay)
            for (e = e.child; null !== e; ) ab(e), (e = e.sibling);
        }
        function ab(e) {
          switch (e.tag) {
            case 26:
              av(e),
                e.flags & ay &&
                  null !== e.memoizedState &&
                  (function (e, t, n) {
                    if (null === cU) throw Error(a(475));
                    var r = cU;
                    if (
                      "stylesheet" === t.type &&
                      ("string" != typeof n.media ||
                        !1 !== matchMedia(n.media).matches) &&
                      0 == (4 & t.state.loading)
                    ) {
                      if (null === t.instance) {
                        var i = cN(n.href),
                          s = e.querySelector(cI(i));
                        if (s) {
                          null !== (e = s._p) &&
                            "object" == typeof e &&
                            "function" == typeof e.then &&
                            (r.count++, (r = cQ.bind(r)), e.then(r, r)),
                            (t.state.loading |= 4),
                            (t.instance = s),
                            eq(s);
                          return;
                        }
                        (s = e.ownerDocument || e),
                          (n = cD(n)),
                          (i = c_.get(i)) && cj(n, i),
                          eq((s = s.createElement("link")));
                        var o = s;
                        (o._p = new Promise(function (e, t) {
                          (o.onload = e), (o.onerror = t);
                        })),
                          ct(s, "link", n),
                          (t.instance = s);
                      }
                      null === r.stylesheets && (r.stylesheets = new Map()),
                        r.stylesheets.set(t, e),
                        (e = t.state.preload) &&
                          0 == (3 & t.state.loading) &&
                          (r.count++,
                          (t = cQ.bind(r)),
                          e.addEventListener("load", t),
                          e.addEventListener("error", t));
                    }
                  })(al, e.memoizedState, e.memoizedProps);
              break;
            case 5:
            default:
              av(e);
              break;
            case 3:
            case 4:
              var t = al;
              (al = cT(e.stateNode.containerInfo)), av(e), (al = t);
              break;
            case 22:
              null === e.memoizedState &&
                (null !== (t = e.alternate) && null !== t.memoizedState
                  ? ((t = ay), (ay = 0x1000000), av(e), (ay = t))
                  : av(e));
          }
        }
        function ax(e) {
          var t = e.alternate;
          if (null !== t && null !== (e = t.child)) {
            t.child = null;
            do (t = e.sibling), (e.sibling = null), (e = t);
            while (null !== e);
          }
        }
        function ak(e) {
          var t = e.deletions;
          if (0 != (16 & e.flags)) {
            if (null !== t)
              for (var n = 0; n < t.length; n++) {
                var r = t[n];
                (o7 = r), a_(r, e);
              }
            ax(e);
          }
          if (10256 & e.subtreeFlags)
            for (e = e.child; null !== e; ) aw(e), (e = e.sibling);
        }
        function aw(e) {
          switch (e.tag) {
            case 0:
            case 11:
            case 15:
              ak(e), 2048 & e.flags && oZ(9, e, e.return);
              break;
            case 3:
            case 12:
            default:
              ak(e);
              break;
            case 22:
              var t = e.stateNode;
              null !== e.memoizedState &&
              2 & t._visibility &&
              (null === e.return || 13 !== e.return.tag)
                ? ((t._visibility &= -3),
                  (function e(t) {
                    var n = t.deletions;
                    if (0 != (16 & t.flags)) {
                      if (null !== n)
                        for (var r = 0; r < n.length; r++) {
                          var i = n[r];
                          (o7 = i), a_(i, t);
                        }
                      ax(t);
                    }
                    for (t = t.child; null !== t; ) {
                      switch ((n = t).tag) {
                        case 0:
                        case 11:
                        case 15:
                          oZ(8, n, n.return), e(n);
                          break;
                        case 22:
                          2 & (r = n.stateNode)._visibility &&
                            ((r._visibility &= -3), e(n));
                          break;
                        default:
                          e(n);
                      }
                      t = t.sibling;
                    }
                  })(e))
                : ak(e);
          }
        }
        function a_(e, t) {
          for (; null !== o7; ) {
            var n = o7;
            switch (n.tag) {
              case 0:
              case 11:
              case 15:
                oZ(8, n, t);
                break;
              case 23:
              case 22:
                if (
                  null !== n.memoizedState &&
                  null !== n.memoizedState.cachePool
                ) {
                  var r = n.memoizedState.cachePool.pool;
                  null != r && r.refCount++;
                }
                break;
              case 24:
                rY(n.memoizedState.cache);
            }
            if (null !== (r = n.child)) (r.return = n), (o7 = r);
            else
              for (n = e; null !== o7; ) {
                var i = (r = o7).sibling,
                  s = r.return;
                if (
                  (!(function e(t) {
                    var n = t.alternate;
                    null !== n && ((t.alternate = null), e(n)),
                      (t.child = null),
                      (t.deletions = null),
                      (t.sibling = null),
                      5 === t.tag && null !== (n = t.stateNode) && ej(n),
                      (t.stateNode = null),
                      (t.return = null),
                      (t.dependencies = null),
                      (t.memoizedProps = null),
                      (t.memoizedState = null),
                      (t.pendingProps = null),
                      (t.stateNode = null),
                      (t.updateQueue = null);
                  })(r),
                  r === n)
                ) {
                  o7 = null;
                  break;
                }
                if (null !== i) {
                  (i.return = s), (o7 = i);
                  break;
                }
                o7 = s;
              }
          }
        }
        var aO = {
            getCacheForType: function (e) {
              var t = rq(rZ),
                n = t.data.get(e);
              return void 0 === n && ((n = e()), t.data.set(e, n)), n;
            },
          },
          aT = "function" == typeof WeakMap ? WeakMap : Map,
          aS = 0,
          aE = null,
          aC = null,
          aA = 0,
          aN = 0,
          aI = null,
          aD = !1,
          aP = !1,
          aR = !1,
          aM = 0,
          aL = 0,
          aj = 0,
          aF = 0,
          aB = 0,
          az = 0,
          a$ = 0,
          aq = null,
          aU = null,
          aH = !1,
          aQ = 0,
          aV = 1 / 0,
          aW = null,
          aZ = null,
          aG = 0,
          aY = null,
          aK = null,
          aX = 0,
          aJ = 0,
          a0 = null,
          a1 = null,
          a2 = 0,
          a5 = null;
        function a3() {
          if (0 != (2 & aS) && 0 !== aA) return aA & -aA;
          if (null !== D.T) {
            var e = rJ;
            return 0 !== e ? e : lz();
          }
          return eE();
        }
        function a4() {
          0 === az && (az = 0 == (0x20000000 & aA) || rk ? eb() : 0x20000000);
          var e = iM.current;
          return null !== e && (e.flags |= 32), az;
        }
        function a8(e, t, n) {
          ((e === aE && (2 === aN || 9 === aN)) ||
            null !== e.cancelPendingCommit) &&
            (ln(e, 0), a7(e, aA, az, !1)),
            ew(e, n),
            (0 == (2 & aS) || e !== aE) &&
              (e === aE &&
                (0 == (2 & aS) && (aF |= n), 4 === aL && a7(e, aA, az, !1)),
              lP(e));
        }
        function a6(e, t, n) {
          if (0 != (6 & aS)) throw Error(a(327));
          for (
            var r =
                (!n && 0 == (124 & t) && 0 == (t & e.expiredLanes)) || ev(e, t),
              i = r
                ? (function (e, t) {
                    var n = aS;
                    aS |= 2;
                    var r = li(),
                      i = ls();
                    aE !== e || aA !== t
                      ? ((aW = null), (aV = J() + 500), ln(e, t))
                      : (aP = ev(e, t));
                    r: for (;;)
                      try {
                        if (0 !== aN && null !== aC) {
                          t = aC;
                          var s = aI;
                          i: switch (aN) {
                            case 1:
                              (aN = 0), (aI = null), lu(e, t, s, 1);
                              break;
                            case 2:
                            case 9:
                              if (it(s)) {
                                (aN = 0), (aI = null), lc(t);
                                break;
                              }
                              (t = function () {
                                (2 !== aN && 9 !== aN) || aE !== e || (aN = 7),
                                  lP(e);
                              }),
                                s.then(t, t);
                              break r;
                            case 3:
                              aN = 7;
                              break r;
                            case 4:
                              aN = 5;
                              break r;
                            case 7:
                              it(s)
                                ? ((aN = 0), (aI = null), lc(t))
                                : ((aN = 0), (aI = null), lu(e, t, s, 7));
                              break;
                            case 5:
                              var o = null;
                              switch (aC.tag) {
                                case 26:
                                  o = aC.memoizedState;
                                case 5:
                                case 27:
                                  var l = aC;
                                  if (o ? cq(o) : 1) {
                                    (aN = 0), (aI = null);
                                    var c = l.sibling;
                                    if (null !== c) aC = c;
                                    else {
                                      var u = l.return;
                                      null !== u
                                        ? ((aC = u), ld(u))
                                        : (aC = null);
                                    }
                                    break i;
                                  }
                              }
                              (aN = 0), (aI = null), lu(e, t, s, 5);
                              break;
                            case 6:
                              (aN = 0), (aI = null), lu(e, t, s, 6);
                              break;
                            case 8:
                              lt(), (aL = 6);
                              break r;
                            default:
                              throw Error(a(462));
                          }
                        }
                        for (; null !== aC && !K(); ) ll(aC);
                        break;
                      } catch (t) {
                        lr(e, t);
                      }
                    return ((rR = rP = null),
                    (D.H = r),
                    (D.A = i),
                    (aS = n),
                    null !== aC)
                      ? 0
                      : ((aE = null), (aA = 0), n0(), aL);
                  })(e, t)
                : la(e, t, !0),
              s = r;
            ;

          ) {
            if (0 === i) aP && !r && a7(e, t, 0, !1);
            else {
              if (
                ((n = e.current.alternate),
                s &&
                  !(function (e) {
                    for (var t = e; ; ) {
                      var n = t.tag;
                      if (
                        (0 === n || 11 === n || 15 === n) &&
                        16384 & t.flags &&
                        null !== (n = t.updateQueue) &&
                        null !== (n = n.stores)
                      )
                        for (var r = 0; r < n.length; r++) {
                          var i = n[r],
                            s = i.getSnapshot;
                          i = i.value;
                          try {
                            if (!nw(s(), i)) return !1;
                          } catch (e) {
                            return !1;
                          }
                        }
                      if (((n = t.child), 16384 & t.subtreeFlags && null !== n))
                        (n.return = t), (t = n);
                      else {
                        if (t === e) break;
                        for (; null === t.sibling; ) {
                          if (null === t.return || t.return === e) return !0;
                          t = t.return;
                        }
                        (t.sibling.return = t.return), (t = t.sibling);
                      }
                    }
                    return !0;
                  })(n))
              ) {
                (i = la(e, t, !1)), (s = !1);
                continue;
              }
              if (2 === i) {
                if (((s = t), e.errorRecoveryDisabledLanes & s)) var o = 0;
                else
                  o =
                    0 != (o = -0x20000001 & e.pendingLanes)
                      ? o
                      : 0x20000000 & o
                        ? 0x20000000
                        : 0;
                if (0 !== o) {
                  t = o;
                  r: {
                    i = aq;
                    var l = e.current.memoizedState.isDehydrated;
                    if (
                      (l && (ln(e, o).flags |= 256), 2 !== (o = la(e, o, !1)))
                    ) {
                      if (aR && !l) {
                        (e.errorRecoveryDisabledLanes |= s), (aF |= s), (i = 4);
                        break r;
                      }
                      (s = aU),
                        (aU = i),
                        null !== s &&
                          (null === aU ? (aU = s) : aU.push.apply(aU, s));
                    }
                    i = o;
                  }
                  if (((s = !1), 2 !== i)) continue;
                }
              }
              if (1 === i) {
                ln(e, 0), a7(e, t, 0, !0);
                break;
              }
              r: {
                switch (((r = e), (s = i))) {
                  case 0:
                  case 1:
                    throw Error(a(345));
                  case 4:
                    if ((4194048 & t) !== t) break;
                  case 6:
                    a7(r, t, az, !aD);
                    break r;
                  case 2:
                    aU = null;
                    break;
                  case 3:
                  case 5:
                    break;
                  default:
                    throw Error(a(329));
                }
                if ((0x3c00000 & t) === t && 10 < (i = aQ + 300 - J())) {
                  if ((a7(r, t, az, !aD), 0 !== ey(r, 0, !0))) break r;
                  r.timeoutHandle = cc(
                    a9.bind(
                      null,
                      r,
                      n,
                      aU,
                      aW,
                      aH,
                      t,
                      az,
                      aF,
                      a$,
                      aD,
                      s,
                      2,
                      -0,
                      0,
                    ),
                    i,
                  );
                  break r;
                }
                a9(r, n, aU, aW, aH, t, az, aF, a$, aD, s, 0, -0, 0);
              }
            }
            break;
          }
          lP(e);
        }
        function a9(e, t, n, r, i, s, o, l, c, u, d, h, p, f) {
          if (
            ((e.timeoutHandle = -1),
            (8192 & (h = t.subtreeFlags) || 0x1002000 == (0x1002000 & h)) &&
              ((cU = { stylesheets: null, count: 0, unsuspend: cH }),
              ab(t),
              null !==
                (h = (function () {
                  if (null === cU) throw Error(a(475));
                  var e = cU;
                  return (
                    e.stylesheets && 0 === e.count && cW(e, e.stylesheets),
                    0 < e.count
                      ? function (t) {
                          var n = setTimeout(function () {
                            if (
                              (e.stylesheets && cW(e, e.stylesheets),
                              e.unsuspend)
                            ) {
                              var t = e.unsuspend;
                              (e.unsuspend = null), t();
                            }
                          }, 6e4);
                          return (
                            (e.unsuspend = t),
                            function () {
                              (e.unsuspend = null), clearTimeout(n);
                            }
                          );
                        }
                      : null
                  );
                })())))
          ) {
            (e.cancelPendingCommit = h(
              lp.bind(null, e, t, s, n, r, i, o, l, c, d, 1, p, f),
            )),
              a7(e, s, o, !u);
            return;
          }
          lp(e, t, s, n, r, i, o, l, c);
        }
        function a7(e, t, n, r) {
          (t &= ~aB),
            (t &= ~aF),
            (e.suspendedLanes |= t),
            (e.pingedLanes &= ~t),
            r && (e.warmLanes |= t),
            (r = e.expirationTimes);
          for (var i = t; 0 < i; ) {
            var s = 31 - ed(i),
              o = 1 << s;
            (r[s] = -1), (i &= ~o);
          }
          0 !== n && e_(e, n, t);
        }
        function le() {
          return 0 != (6 & aS) || (lR(0, !1), !1);
        }
        function lt() {
          if (null !== aC) {
            if (0 === aN) var e = aC.return;
            else
              (e = aC),
                (rR = rP = null),
                i9(e),
                (il = null),
                (ic = 0),
                (e = aC);
            for (; null !== e; ) oV(e.alternate, e), (e = e.return);
            aC = null;
          }
        }
        function ln(e, t) {
          var n = e.timeoutHandle;
          -1 !== n && ((e.timeoutHandle = -1), cu(n)),
            null !== (n = e.cancelPendingCommit) &&
              ((e.cancelPendingCommit = null), n()),
            lt(),
            (aE = e),
            (aC = n = re(e.current, null)),
            (aA = t),
            (aN = 0),
            (aI = null),
            (aD = !1),
            (aP = ev(e, t)),
            (aR = !1),
            (a$ = az = aB = aF = aj = aL = 0),
            (aU = aq = null),
            (aH = !1),
            0 != (8 & t) && (t |= 32 & t);
          var r = e.entangledLanes;
          if (0 !== r)
            for (e = e.entanglements, r &= t; 0 < r; ) {
              var i = 31 - ed(r),
                s = 1 << i;
              (t |= e[i]), (r &= ~s);
            }
          return (aM = t), n0(), n;
        }
        function lr(e, t) {
          (iH = null),
            (D.H = s8),
            t === r6 || t === r7
              ? ((t = io()), (aN = 3))
              : t === r9
                ? ((t = io()), (aN = 4))
                : (aN =
                    t === om
                      ? 8
                      : null !== t &&
                          "object" == typeof t &&
                          "function" == typeof t.then
                        ? 6
                        : 1),
            (aI = t),
            null === aC && ((aL = 1), ou(e, nY(t, e.current)));
        }
        function li() {
          var e = D.H;
          return (D.H = s8), null === e ? s8 : e;
        }
        function ls() {
          var e = D.A;
          return (D.A = aO), e;
        }
        function lo() {
          (aL = 4),
            aD || ((4194048 & aA) !== aA && null !== iM.current) || (aP = !0),
            (0 == (0x7ffffff & aj) && 0 == (0x7ffffff & aF)) ||
              null === aE ||
              a7(aE, aA, az, !1);
        }
        function la(e, t, n) {
          var r = aS;
          aS |= 2;
          var i = li(),
            s = ls();
          (aE !== e || aA !== t) && ((aW = null), ln(e, t)), (t = !1);
          var o = aL;
          r: for (;;)
            try {
              if (0 !== aN && null !== aC) {
                var a = aC,
                  l = aI;
                switch (aN) {
                  case 8:
                    lt(), (o = 6);
                    break r;
                  case 3:
                  case 2:
                  case 9:
                  case 6:
                    null === iM.current && (t = !0);
                    var c = aN;
                    if (((aN = 0), (aI = null), lu(e, a, l, c), n && aP)) {
                      o = 0;
                      break r;
                    }
                    break;
                  default:
                    (c = aN), (aN = 0), (aI = null), lu(e, a, l, c);
                }
              }
              (function () {
                for (; null !== aC; ) ll(aC);
              })(),
                (o = aL);
              break;
            } catch (t) {
              lr(e, t);
            }
          return (
            t && e.shellSuspendCounter++,
            (rR = rP = null),
            (aS = r),
            (D.H = i),
            (D.A = s),
            null === aC && ((aE = null), (aA = 0), n0()),
            o
          );
        }
        function ll(e) {
          var t = oz(e.alternate, e, aM);
          (e.memoizedProps = e.pendingProps), null === t ? ld(e) : (aC = t);
        }
        function lc(e) {
          var t = e,
            n = t.alternate;
          switch (t.tag) {
            case 15:
            case 0:
              t = oT(n, t, t.pendingProps, t.type, void 0, aA);
              break;
            case 11:
              t = oT(n, t, t.pendingProps, t.type.render, t.ref, aA);
              break;
            case 5:
              i9(t);
            default:
              oV(n, t), (t = oz(n, (t = aC = rt(t, aM)), aM));
          }
          (e.memoizedProps = e.pendingProps), null === t ? ld(e) : (aC = t);
        }
        function lu(e, t, n, r) {
          (rR = rP = null), i9(t), (il = null), (ic = 0);
          var i = t.return;
          try {
            if (
              (function (e, t, n, r, i) {
                if (
                  ((n.flags |= 32768),
                  null !== r &&
                    "object" == typeof r &&
                    "function" == typeof r.then)
                ) {
                  if (
                    (null !== (t = n.alternate) && rB(t, n, i, !0),
                    null !== (n = iM.current))
                  ) {
                    switch (n.tag) {
                      case 13:
                        return (
                          null === iL
                            ? lo()
                            : null === n.alternate && 0 === aL && (aL = 3),
                          (n.flags &= -257),
                          (n.flags |= 65536),
                          (n.lanes = i),
                          r === ie
                            ? (n.flags |= 16384)
                            : (null === (t = n.updateQueue)
                                ? (n.updateQueue = new Set([r]))
                                : t.add(r),
                              lw(e, r, i)),
                          !1
                        );
                      case 22:
                        return (
                          (n.flags |= 65536),
                          r === ie
                            ? (n.flags |= 16384)
                            : (null === (t = n.updateQueue)
                                ? ((t = {
                                    transitions: null,
                                    markerInstances: null,
                                    retryQueue: new Set([r]),
                                  }),
                                  (n.updateQueue = t))
                                : null === (n = t.retryQueue)
                                  ? (t.retryQueue = new Set([r]))
                                  : n.add(r),
                              lw(e, r, i)),
                          !1
                        );
                    }
                    throw Error(a(435, n.tag));
                  }
                  return lw(e, r, i), lo(), !1;
                }
                if (rk)
                  return (
                    null !== (t = iM.current)
                      ? (0 == (65536 & t.flags) && (t.flags |= 256),
                        (t.flags |= 65536),
                        (t.lanes = i),
                        r !== rO &&
                          rI(nY((e = Error(a(422), { cause: r })), n)))
                      : (r !== rO &&
                          rI(nY((t = Error(a(423), { cause: r })), n)),
                        (e = e.current.alternate),
                        (e.flags |= 65536),
                        (i &= -i),
                        (e.lanes |= i),
                        (r = nY(r, n)),
                        (i = oh(e.stateNode, r, i)),
                        iO(e, i),
                        4 !== aL && (aL = 2)),
                    !1
                  );
                var s = Error(a(520), { cause: r });
                if (
                  ((s = nY(s, n)),
                  null === aq ? (aq = [s]) : aq.push(s),
                  4 !== aL && (aL = 2),
                  null === t)
                )
                  return !0;
                (r = nY(r, n)), (n = t);
                do {
                  switch (n.tag) {
                    case 3:
                      return (
                        (n.flags |= 65536),
                        (e = i & -i),
                        (n.lanes |= e),
                        (e = oh(n.stateNode, r, e)),
                        iO(n, e),
                        !1
                      );
                    case 1:
                      if (
                        ((t = n.type),
                        (s = n.stateNode),
                        0 == (128 & n.flags) &&
                          ("function" == typeof t.getDerivedStateFromError ||
                            (null !== s &&
                              "function" == typeof s.componentDidCatch &&
                              (null === aZ || !aZ.has(s)))))
                      )
                        return (
                          (n.flags |= 65536),
                          (i &= -i),
                          (n.lanes |= i),
                          of((i = op(i)), e, n, r),
                          iO(n, i),
                          !1
                        );
                  }
                  n = n.return;
                } while (null !== n);
                return !1;
              })(e, i, t, n, aA)
            ) {
              (aL = 1), ou(e, nY(n, e.current)), (aC = null);
              return;
            }
          } catch (t) {
            if (null !== i) throw ((aC = i), t);
            (aL = 1), ou(e, nY(n, e.current)), (aC = null);
            return;
          }
          32768 & t.flags
            ? (rk || 1 === r
                ? (e = !0)
                : aP || 0 != (0x20000000 & aA)
                  ? (e = !1)
                  : ((aD = e = !0),
                    (2 === r || 9 === r || 3 === r || 6 === r) &&
                      null !== (r = iM.current) &&
                      13 === r.tag &&
                      (r.flags |= 16384)),
              lh(t, e))
            : ld(t);
        }
        function ld(e) {
          var t = e;
          do {
            if (0 != (32768 & t.flags)) return void lh(t, aD);
            e = t.return;
            var n = (function (e, t, n) {
              var r = t.pendingProps;
              switch ((rv(t), t.tag)) {
                case 31:
                case 16:
                case 15:
                case 0:
                case 11:
                case 7:
                case 8:
                case 12:
                case 9:
                case 14:
                case 1:
                  return oQ(t), null;
                case 3:
                  return (
                    (n = t.stateNode),
                    (r = null),
                    null !== e && (r = e.memoizedState.cache),
                    t.memoizedState.cache !== r && (t.flags |= 2048),
                    rL(rZ),
                    Q(),
                    n.pendingContext &&
                      ((n.context = n.pendingContext),
                      (n.pendingContext = null)),
                    (null === e || null === e.child) &&
                      (rC(t)
                        ? o$(t)
                        : null === e ||
                          (e.memoizedState.isDehydrated &&
                            0 == (256 & t.flags)) ||
                          ((t.flags |= 1024), rN())),
                    oQ(t),
                    null
                  );
                case 26:
                  return (
                    (n = t.memoizedState),
                    null === e
                      ? (o$(t),
                        null !== n
                          ? (oQ(t), oq(t, n))
                          : (oQ(t), (t.flags &= -0x1000001)))
                      : n
                        ? n !== e.memoizedState
                          ? (o$(t), oQ(t), oq(t, n))
                          : (oQ(t), (t.flags &= -0x1000001))
                        : (e.memoizedProps !== r && o$(t),
                          oQ(t),
                          (t.flags &= -0x1000001)),
                    null
                  );
                case 27:
                  W(t), (n = q.current);
                  var i = t.type;
                  if (null !== e && null != t.stateNode)
                    e.memoizedProps !== r && o$(t);
                  else {
                    if (!r) {
                      if (null === t.stateNode) throw Error(a(166));
                      return oQ(t), null;
                    }
                    (e = z.current),
                      rC(t)
                        ? rS(t, e)
                        : ((e = ck(i, r, n)), (t.stateNode = e), o$(t));
                  }
                  return oQ(t), null;
                case 5:
                  if ((W(t), (n = t.type), null !== e && null != t.stateNode))
                    e.memoizedProps !== r && o$(t);
                  else {
                    if (!r) {
                      if (null === t.stateNode) throw Error(a(166));
                      return oQ(t), null;
                    }
                    if (((e = z.current), rC(t))) rS(t, e);
                    else {
                      switch (((i = ci(q.current)), e)) {
                        case 1:
                          e = i.createElementNS(
                            "http://www.w3.org/2000/svg",
                            n,
                          );
                          break;
                        case 2:
                          e = i.createElementNS(
                            "http://www.w3.org/1998/Math/MathML",
                            n,
                          );
                          break;
                        default:
                          switch (n) {
                            case "svg":
                              e = i.createElementNS(
                                "http://www.w3.org/2000/svg",
                                n,
                              );
                              break;
                            case "math":
                              e = i.createElementNS(
                                "http://www.w3.org/1998/Math/MathML",
                                n,
                              );
                              break;
                            case "script":
                              ((e = i.createElement("div")).innerHTML =
                                "<script><\/script>"),
                                (e = e.removeChild(e.firstChild));
                              break;
                            case "select":
                              (e =
                                "string" == typeof r.is
                                  ? i.createElement("select", { is: r.is })
                                  : i.createElement("select")),
                                r.multiple
                                  ? (e.multiple = !0)
                                  : r.size && (e.size = r.size);
                              break;
                            default:
                              e =
                                "string" == typeof r.is
                                  ? i.createElement(n, { is: r.is })
                                  : i.createElement(n);
                          }
                      }
                      (e[eA] = t), (e[eN] = r);
                      r: for (i = t.child; null !== i; ) {
                        if (5 === i.tag || 6 === i.tag)
                          e.appendChild(i.stateNode);
                        else if (
                          4 !== i.tag &&
                          27 !== i.tag &&
                          null !== i.child
                        ) {
                          (i.child.return = i), (i = i.child);
                          continue;
                        }
                        if (i === t) break;
                        for (; null === i.sibling; ) {
                          if (null === i.return || i.return === t) break r;
                          i = i.return;
                        }
                        (i.sibling.return = i.return), (i = i.sibling);
                      }
                      switch (((t.stateNode = e), ct(e, n, r), n)) {
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                          e = !!r.autoFocus;
                          break;
                        case "img":
                          e = !0;
                          break;
                        default:
                          e = !1;
                      }
                      e && o$(t);
                    }
                  }
                  return oQ(t), (t.flags &= -0x1000001), null;
                case 6:
                  if (e && null != t.stateNode) e.memoizedProps !== r && o$(t);
                  else {
                    if ("string" != typeof r && null === t.stateNode)
                      throw Error(a(166));
                    if (((e = q.current), rC(t))) {
                      if (
                        ((e = t.stateNode),
                        (n = t.memoizedProps),
                        (r = null),
                        null !== (i = rb))
                      )
                        switch (i.tag) {
                          case 27:
                          case 5:
                            r = i.memoizedProps;
                        }
                      (e[eA] = t),
                        (e = !!(
                          e.nodeValue === n ||
                          (null !== r && !0 === r.suppressHydrationWarning) ||
                          l6(e.nodeValue, n)
                        )) || rT(t, !0);
                    } else
                      ((e = ci(e).createTextNode(r))[eA] = t),
                        (t.stateNode = e);
                  }
                  return oQ(t), null;
                case 13:
                  if (
                    ((r = t.memoizedState),
                    null === e ||
                      (null !== e.memoizedState &&
                        null !== e.memoizedState.dehydrated))
                  ) {
                    if (((i = rC(t)), null !== r && null !== r.dehydrated)) {
                      if (null === e) {
                        if (!i) throw Error(a(318));
                        if (
                          !(i =
                            null !== (i = t.memoizedState)
                              ? i.dehydrated
                              : null)
                        )
                          throw Error(a(317));
                        i[eA] = t;
                      } else
                        rA(),
                          0 == (128 & t.flags) && (t.memoizedState = null),
                          (t.flags |= 4);
                      oQ(t), (i = !1);
                    } else
                      (i = rN()),
                        null !== e &&
                          null !== e.memoizedState &&
                          (e.memoizedState.hydrationErrors = i),
                        (i = !0);
                    if (!i) {
                      if (256 & t.flags) return iz(t), t;
                      return iz(t), null;
                    }
                  }
                  if ((iz(t), 0 != (128 & t.flags))) return (t.lanes = n), t;
                  if (
                    ((n = null !== r),
                    (e = null !== e && null !== e.memoizedState),
                    n)
                  ) {
                    (r = t.child),
                      (i = null),
                      null !== r.alternate &&
                        null !== r.alternate.memoizedState &&
                        null !== r.alternate.memoizedState.cachePool &&
                        (i = r.alternate.memoizedState.cachePool.pool);
                    var s = null;
                    null !== r.memoizedState &&
                      null !== r.memoizedState.cachePool &&
                      (s = r.memoizedState.cachePool.pool),
                      s !== i && (r.flags |= 2048);
                  }
                  return (
                    n !== e && n && (t.child.flags |= 8192),
                    oU(t, t.updateQueue),
                    oQ(t),
                    null
                  );
                case 4:
                  return (
                    Q(),
                    null === e && lK(t.stateNode.containerInfo),
                    oQ(t),
                    null
                  );
                case 10:
                  return rL(t.type), oQ(t), null;
                case 19:
                  if ((F(i$), null === (i = t.memoizedState)))
                    return oQ(t), null;
                  if (((r = 0 != (128 & t.flags)), null === (s = i.rendering)))
                    if (r) oH(i, !1);
                    else {
                      if (0 !== aL || (null !== e && 0 != (128 & e.flags)))
                        for (e = t.child; null !== e; ) {
                          if (null !== (s = iq(e))) {
                            for (
                              t.flags |= 128,
                                oH(i, !1),
                                e = s.updateQueue,
                                t.updateQueue = e,
                                oU(t, e),
                                t.subtreeFlags = 0,
                                e = n,
                                n = t.child;
                              null !== n;

                            )
                              rt(n, e), (n = n.sibling);
                            return B(i$, (1 & i$.current) | 2), t.child;
                          }
                          e = e.sibling;
                        }
                      null !== i.tail &&
                        J() > aV &&
                        ((t.flags |= 128),
                        (r = !0),
                        oH(i, !1),
                        (t.lanes = 4194304));
                    }
                  else {
                    if (!r)
                      if (null !== (e = iq(s))) {
                        if (
                          ((t.flags |= 128),
                          (r = !0),
                          (e = e.updateQueue),
                          (t.updateQueue = e),
                          oU(t, e),
                          oH(i, !0),
                          null === i.tail &&
                            "hidden" === i.tailMode &&
                            !s.alternate &&
                            !rk)
                        )
                          return oQ(t), null;
                      } else
                        2 * J() - i.renderingStartTime > aV &&
                          0x20000000 !== n &&
                          ((t.flags |= 128),
                          (r = !0),
                          oH(i, !1),
                          (t.lanes = 4194304));
                    i.isBackwards
                      ? ((s.sibling = t.child), (t.child = s))
                      : (null !== (e = i.last)
                          ? (e.sibling = s)
                          : (t.child = s),
                        (i.last = s));
                  }
                  if (null !== i.tail)
                    return (
                      (t = i.tail),
                      (i.rendering = t),
                      (i.tail = t.sibling),
                      (i.renderingStartTime = J()),
                      (t.sibling = null),
                      (e = i$.current),
                      B(i$, r ? (1 & e) | 2 : 1 & e),
                      t
                    );
                  return oQ(t), null;
                case 22:
                case 23:
                  return (
                    iz(t),
                    iR(),
                    (r = null !== t.memoizedState),
                    null !== e
                      ? (null !== e.memoizedState) !== r && (t.flags |= 8192)
                      : r && (t.flags |= 8192),
                    r
                      ? 0 != (0x20000000 & n) &&
                        0 == (128 & t.flags) &&
                        (oQ(t), 6 & t.subtreeFlags && (t.flags |= 8192))
                      : oQ(t),
                    null !== (n = t.updateQueue) && oU(t, n.retryQueue),
                    (n = null),
                    null !== e &&
                      null !== e.memoizedState &&
                      null !== e.memoizedState.cachePool &&
                      (n = e.memoizedState.cachePool.pool),
                    (r = null),
                    null !== t.memoizedState &&
                      null !== t.memoizedState.cachePool &&
                      (r = t.memoizedState.cachePool.pool),
                    r !== n && (t.flags |= 2048),
                    null !== e && F(r5),
                    null
                  );
                case 24:
                  return (
                    (n = null),
                    null !== e && (n = e.memoizedState.cache),
                    t.memoizedState.cache !== n && (t.flags |= 2048),
                    rL(rZ),
                    oQ(t),
                    null
                  );
                case 25:
                case 30:
                  return null;
              }
              throw Error(a(156, t.tag));
            })(t.alternate, t, aM);
            if (null !== n) {
              aC = n;
              return;
            }
            if (null !== (t = t.sibling)) {
              aC = t;
              return;
            }
            aC = t = e;
          } while (null !== t);
          0 === aL && (aL = 5);
        }
        function lh(e, t) {
          do {
            var n = (function (e, t) {
              switch ((rv(t), t.tag)) {
                case 1:
                  return 65536 & (e = t.flags)
                    ? ((t.flags = (-65537 & e) | 128), t)
                    : null;
                case 3:
                  return (
                    rL(rZ),
                    Q(),
                    0 != (65536 & (e = t.flags)) && 0 == (128 & e)
                      ? ((t.flags = (-65537 & e) | 128), t)
                      : null
                  );
                case 26:
                case 27:
                case 5:
                  return W(t), null;
                case 13:
                  if (
                    (iz(t),
                    null !== (e = t.memoizedState) && null !== e.dehydrated)
                  ) {
                    if (null === t.alternate) throw Error(a(340));
                    rA();
                  }
                  return 65536 & (e = t.flags)
                    ? ((t.flags = (-65537 & e) | 128), t)
                    : null;
                case 19:
                  return F(i$), null;
                case 4:
                  return Q(), null;
                case 10:
                  return rL(t.type), null;
                case 22:
                case 23:
                  return (
                    iz(t),
                    iR(),
                    null !== e && F(r5),
                    65536 & (e = t.flags)
                      ? ((t.flags = (-65537 & e) | 128), t)
                      : null
                  );
                case 24:
                  return rL(rZ), null;
                default:
                  return null;
              }
            })(e.alternate, e);
            if (null !== n) {
              (n.flags &= 32767), (aC = n);
              return;
            }
            if (
              (null !== (n = e.return) &&
                ((n.flags |= 32768),
                (n.subtreeFlags = 0),
                (n.deletions = null)),
              !t && null !== (e = e.sibling))
            ) {
              aC = e;
              return;
            }
            aC = e = n;
          } while (null !== e);
          (aL = 6), (aC = null);
        }
        function lp(e, t, n, r, i, s, o, l, c) {
          e.cancelPendingCommit = null;
          do lv();
          while (0 !== aG);
          if (0 != (6 & aS)) throw Error(a(327));
          if (null !== t) {
            if (t === e.current) throw Error(a(177));
            if (
              (!(function (e, t, n, r, i, s) {
                var o = e.pendingLanes;
                (e.pendingLanes = n),
                  (e.suspendedLanes = 0),
                  (e.pingedLanes = 0),
                  (e.warmLanes = 0),
                  (e.expiredLanes &= n),
                  (e.entangledLanes &= n),
                  (e.errorRecoveryDisabledLanes &= n),
                  (e.shellSuspendCounter = 0);
                var a = e.entanglements,
                  l = e.expirationTimes,
                  c = e.hiddenUpdates;
                for (n = o & ~n; 0 < n; ) {
                  var u = 31 - ed(n),
                    d = 1 << u;
                  (a[u] = 0), (l[u] = -1);
                  var h = c[u];
                  if (null !== h)
                    for (c[u] = null, u = 0; u < h.length; u++) {
                      var p = h[u];
                      null !== p && (p.lane &= -0x20000001);
                    }
                  n &= ~d;
                }
                0 !== r && e_(e, r, 0),
                  0 !== s &&
                    0 === i &&
                    0 !== e.tag &&
                    (e.suspendedLanes |= s & ~(o & ~t));
              })(e, n, (s = t.lanes | t.childLanes | nJ), o, l, c),
              e === aE && ((aC = aE = null), (aA = 0)),
              (aK = t),
              (aY = e),
              (aX = n),
              (aJ = s),
              (a0 = i),
              (a1 = r),
              0 != (10256 & t.subtreeFlags) || 0 != (10256 & t.flags)
                ? ((e.callbackNode = null),
                  (e.callbackPriority = 0),
                  G(er, function () {
                    return lb(!0), null;
                  }))
                : ((e.callbackNode = null), (e.callbackPriority = 0)),
              (r = 0 != (13878 & t.flags)),
              0 != (13878 & t.subtreeFlags) || r)
            ) {
              (r = D.T),
                (D.T = null),
                (i = P.p),
                (P.p = 2),
                (o = aS),
                (aS |= 4);
              try {
                !(function (e, t) {
                  if (((e = e.containerInfo), (cn = c1), nE((e = nS(e))))) {
                    if ("selectionStart" in e)
                      var n = { start: e.selectionStart, end: e.selectionEnd };
                    else
                      r: {
                        var r =
                          (n =
                            ((n = e.ownerDocument) && n.defaultView) || window)
                            .getSelection && n.getSelection();
                        if (r && 0 !== r.rangeCount) {
                          n = r.anchorNode;
                          var i,
                            s = r.anchorOffset,
                            o = r.focusNode;
                          r = r.focusOffset;
                          try {
                            n.nodeType, o.nodeType;
                          } catch (e) {
                            n = null;
                            break r;
                          }
                          var l = 0,
                            c = -1,
                            u = -1,
                            d = 0,
                            h = 0,
                            p = e,
                            f = null;
                          i: for (;;) {
                            for (
                              ;
                              p !== n ||
                                (0 !== s && 3 !== p.nodeType) ||
                                (c = l + s),
                                p !== o ||
                                  (0 !== r && 3 !== p.nodeType) ||
                                  (u = l + r),
                                3 === p.nodeType && (l += p.nodeValue.length),
                                null !== (i = p.firstChild);

                            )
                              (f = p), (p = i);
                            for (;;) {
                              if (p === e) break i;
                              if (
                                (f === n && ++d === s && (c = l),
                                f === o && ++h === r && (u = l),
                                null !== (i = p.nextSibling))
                              )
                                break;
                              f = (p = f).parentNode;
                            }
                            p = i;
                          }
                          n =
                            -1 === c || -1 === u ? null : { start: c, end: u };
                        } else n = null;
                      }
                    n = n || { start: 0, end: 0 };
                  } else n = null;
                  for (
                    cr = { focusedElem: e, selectionRange: n }, c1 = !1, o7 = t;
                    null !== o7;

                  )
                    if (
                      ((e = (t = o7).child),
                      0 != (1024 & t.subtreeFlags) && null !== e)
                    )
                      (e.return = t), (o7 = e);
                    else
                      for (; null !== o7; ) {
                        switch (
                          ((o = (t = o7).alternate), (e = t.flags), t.tag)
                        ) {
                          case 0:
                          case 11:
                          case 15:
                          case 5:
                          case 26:
                          case 27:
                          case 6:
                          case 4:
                          case 17:
                            break;
                          case 1:
                            if (0 != (1024 & e) && null !== o) {
                              (e = void 0),
                                (n = t),
                                (s = o.memoizedProps),
                                (o = o.memoizedState),
                                (r = n.stateNode);
                              try {
                                var m = oi(n.type, s, n.elementType === n.type);
                                (e = r.getSnapshotBeforeUpdate(m, o)),
                                  (r.__reactInternalSnapshotBeforeUpdate = e);
                              } catch (e) {
                                lk(n, n.return, e);
                              }
                            }
                            break;
                          case 3:
                            if (0 != (1024 & e)) {
                              if (
                                9 ===
                                (n = (e = t.stateNode.containerInfo).nodeType)
                              )
                                cg(e);
                              else if (1 === n)
                                switch (e.nodeName) {
                                  case "HEAD":
                                  case "HTML":
                                  case "BODY":
                                    cg(e);
                                    break;
                                  default:
                                    e.textContent = "";
                                }
                            }
                            break;
                          default:
                            if (0 != (1024 & e)) throw Error(a(163));
                        }
                        if (null !== (e = t.sibling)) {
                          (e.return = t.return), (o7 = e);
                          break;
                        }
                        o7 = t.return;
                      }
                })(e, t, n);
              } finally {
                (aS = o), (P.p = i), (D.T = r);
              }
            }
            (aG = 1), lf(), lm(), lg();
          }
        }
        function lf() {
          if (1 === aG) {
            aG = 0;
            var e = aY,
              t = aK,
              n = 0 != (13878 & t.flags);
            if (0 != (13878 & t.subtreeFlags) || n) {
              (n = D.T), (D.T = null);
              var r = P.p;
              P.p = 2;
              var i = aS;
              aS |= 4;
              try {
                ac(t, e);
                var s = cr,
                  o = nS(e.containerInfo),
                  a = s.focusedElem,
                  l = s.selectionRange;
                if (
                  o !== a &&
                  a &&
                  a.ownerDocument &&
                  (function e(t, n) {
                    return (
                      !!t &&
                      !!n &&
                      (t === n ||
                        ((!t || 3 !== t.nodeType) &&
                          (n && 3 === n.nodeType
                            ? e(t, n.parentNode)
                            : "contains" in t
                              ? t.contains(n)
                              : !!t.compareDocumentPosition &&
                                !!(16 & t.compareDocumentPosition(n)))))
                    );
                  })(a.ownerDocument.documentElement, a)
                ) {
                  if (null !== l && nE(a)) {
                    var c = l.start,
                      u = l.end;
                    if ((void 0 === u && (u = c), "selectionStart" in a))
                      (a.selectionStart = c),
                        (a.selectionEnd = Math.min(u, a.value.length));
                    else {
                      var d = a.ownerDocument || document,
                        h = (d && d.defaultView) || window;
                      if (h.getSelection) {
                        var p = h.getSelection(),
                          f = a.textContent.length,
                          m = Math.min(l.start, f),
                          g = void 0 === l.end ? m : Math.min(l.end, f);
                        !p.extend && m > g && ((o = g), (g = m), (m = o));
                        var y = nT(a, m),
                          v = nT(a, g);
                        if (
                          y &&
                          v &&
                          (1 !== p.rangeCount ||
                            p.anchorNode !== y.node ||
                            p.anchorOffset !== y.offset ||
                            p.focusNode !== v.node ||
                            p.focusOffset !== v.offset)
                        ) {
                          var b = d.createRange();
                          b.setStart(y.node, y.offset),
                            p.removeAllRanges(),
                            m > g
                              ? (p.addRange(b), p.extend(v.node, v.offset))
                              : (b.setEnd(v.node, v.offset), p.addRange(b));
                        }
                      }
                    }
                  }
                  for (d = [], p = a; (p = p.parentNode); )
                    1 === p.nodeType &&
                      d.push({
                        element: p,
                        left: p.scrollLeft,
                        top: p.scrollTop,
                      });
                  for (
                    "function" == typeof a.focus && a.focus(), a = 0;
                    a < d.length;
                    a++
                  ) {
                    var x = d[a];
                    (x.element.scrollLeft = x.left),
                      (x.element.scrollTop = x.top);
                  }
                }
                (c1 = !!cn), (cr = cn = null);
              } finally {
                (aS = i), (P.p = r), (D.T = n);
              }
            }
            (e.current = t), (aG = 2);
          }
        }
        function lm() {
          if (2 === aG) {
            aG = 0;
            var e = aY,
              t = aK,
              n = 0 != (8772 & t.flags);
            if (0 != (8772 & t.subtreeFlags) || n) {
              (n = D.T), (D.T = null);
              var r = P.p;
              P.p = 2;
              var i = aS;
              aS |= 4;
              try {
                ae(e, t.alternate, t);
              } finally {
                (aS = i), (P.p = r), (D.T = n);
              }
            }
            aG = 3;
          }
        }
        function lg() {
          if (4 === aG || 3 === aG) {
            (aG = 0), X();
            var e = aY,
              t = aK,
              n = aX,
              r = a1;
            0 != (10256 & t.subtreeFlags) || 0 != (10256 & t.flags)
              ? (aG = 5)
              : ((aG = 0), (aK = aY = null), ly(e, e.pendingLanes));
            var i = e.pendingLanes;
            if (
              (0 === i && (aZ = null),
              eS(n),
              (t = t.stateNode),
              ec && "function" == typeof ec.onCommitFiberRoot)
            )
              try {
                ec.onCommitFiberRoot(
                  el,
                  t,
                  void 0,
                  128 == (128 & t.current.flags),
                );
              } catch (e) {}
            if (null !== r) {
              (t = D.T), (i = P.p), (P.p = 2), (D.T = null);
              try {
                for (var s = e.onRecoverableError, o = 0; o < r.length; o++) {
                  var a = r[o];
                  s(a.value, { componentStack: a.stack });
                }
              } finally {
                (D.T = t), (P.p = i);
              }
            }
            0 != (3 & aX) && lv(),
              lP(e),
              (i = e.pendingLanes),
              0 != (4194090 & n) && 0 != (42 & i)
                ? e === a5
                  ? a2++
                  : ((a2 = 0), (a5 = e))
                : (a2 = 0),
              lR(0, !1);
          }
        }
        function ly(e, t) {
          0 == (e.pooledCacheLanes &= t) &&
            null != (t = e.pooledCache) &&
            ((e.pooledCache = null), rY(t));
        }
        function lv(e) {
          return lf(), lm(), lg(), lb(e);
        }
        function lb() {
          if (5 !== aG) return !1;
          var e = aY,
            t = aJ;
          aJ = 0;
          var n = eS(aX),
            r = D.T,
            i = P.p;
          try {
            (P.p = 32 > n ? 32 : n), (D.T = null), (n = a0), (a0 = null);
            var s = aY,
              o = aX;
            if (((aG = 0), (aK = aY = null), (aX = 0), 0 != (6 & aS)))
              throw Error(a(331));
            var l = aS;
            if (
              ((aS |= 4),
              aw(s.current),
              am(s, s.current, o, n),
              (aS = l),
              lR(0, !1),
              ec && "function" == typeof ec.onPostCommitFiberRoot)
            )
              try {
                ec.onPostCommitFiberRoot(el, s);
              } catch (e) {}
            return !0;
          } finally {
            (P.p = i), (D.T = r), ly(e, t);
          }
        }
        function lx(e, t, n) {
          (t = nY(n, t)),
            (t = oh(e.stateNode, t, 2)),
            null !== (e = iw(e, t, 2)) && (ew(e, 2), lP(e));
        }
        function lk(e, t, n) {
          if (3 === e.tag) lx(e, e, n);
          else
            for (; null !== t; ) {
              if (3 === t.tag) {
                lx(t, e, n);
                break;
              }
              if (1 === t.tag) {
                var r = t.stateNode;
                if (
                  "function" == typeof t.type.getDerivedStateFromError ||
                  ("function" == typeof r.componentDidCatch &&
                    (null === aZ || !aZ.has(r)))
                ) {
                  (e = nY(n, e)),
                    null !== (r = iw(t, (n = op(2)), 2)) &&
                      (of(n, r, t, e), ew(r, 2), lP(r));
                  break;
                }
              }
              t = t.return;
            }
        }
        function lw(e, t, n) {
          var r = e.pingCache;
          if (null === r) {
            r = e.pingCache = new aT();
            var i = new Set();
            r.set(t, i);
          } else void 0 === (i = r.get(t)) && ((i = new Set()), r.set(t, i));
          i.has(n) ||
            ((aR = !0), i.add(n), (e = l_.bind(null, e, t, n)), t.then(e, e));
        }
        function l_(e, t, n) {
          var r = e.pingCache;
          null !== r && r.delete(t),
            (e.pingedLanes |= e.suspendedLanes & n),
            (e.warmLanes &= ~n),
            aE === e &&
              (aA & n) === n &&
              (4 === aL ||
              (3 === aL && (0x3c00000 & aA) === aA && 300 > J() - aQ)
                ? 0 == (2 & aS) && ln(e, 0)
                : (aB |= n),
              a$ === aA && (a$ = 0)),
            lP(e);
        }
        function lO(e, t) {
          0 === t && (t = ex()), null !== (e = n5(e, t)) && (ew(e, t), lP(e));
        }
        function lT(e) {
          var t = e.memoizedState,
            n = 0;
          null !== t && (n = t.retryLane), lO(e, n);
        }
        function lS(e, t) {
          var n = 0;
          switch (e.tag) {
            case 13:
              var r = e.stateNode,
                i = e.memoizedState;
              null !== i && (n = i.retryLane);
              break;
            case 19:
              r = e.stateNode;
              break;
            case 22:
              r = e.stateNode._retryCache;
              break;
            default:
              throw Error(a(314));
          }
          null !== r && r.delete(t), lO(e, n);
        }
        var lE = null,
          lC = null,
          lA = !1,
          lN = !1,
          lI = !1,
          lD = 0;
        function lP(e) {
          e !== lC &&
            null === e.next &&
            (null === lC ? (lE = lC = e) : (lC = lC.next = e)),
            (lN = !0),
            lA ||
              ((lA = !0),
              ch(function () {
                0 != (6 & aS) ? G(et, lM) : lL();
              }));
        }
        function lR(e, t) {
          if (!lI && lN) {
            lI = !0;
            do
              for (var n = !1, r = lE; null !== r; ) {
                if (!t)
                  if (0 !== e) {
                    var i = r.pendingLanes;
                    if (0 === i) var s = 0;
                    else {
                      var o = r.suspendedLanes,
                        a = r.pingedLanes;
                      s =
                        0xc000095 &
                        (s =
                          ((1 << (31 - ed(42 | e) + 1)) - 1) & (i & ~(o & ~a)))
                          ? (0xc000095 & s) | 1
                          : s
                            ? 2 | s
                            : 0;
                    }
                    0 !== s && ((n = !0), lB(r, s));
                  } else
                    (s = aA),
                      0 ==
                        (3 &
                          (s = ey(
                            r,
                            r === aE ? s : 0,
                            null !== r.cancelPendingCommit ||
                              -1 !== r.timeoutHandle,
                          ))) ||
                        ev(r, s) ||
                        ((n = !0), lB(r, s));
                r = r.next;
              }
            while (n);
            lI = !1;
          }
        }
        function lM() {
          lL();
        }
        function lL() {
          lN = lA = !1;
          var e,
            t = 0;
          0 !== lD &&
            (((e = window.event) && "popstate" === e.type
              ? e === cl || ((cl = e), 0)
              : ((cl = null), 1)) || (t = lD),
            (lD = 0));
          for (var n = J(), r = null, i = lE; null !== i; ) {
            var s = i.next,
              o = lj(i, n);
            0 === o
              ? ((i.next = null),
                null === r ? (lE = s) : (r.next = s),
                null === s && (lC = r))
              : ((r = i), (0 !== t || 0 != (3 & o)) && (lN = !0)),
              (i = s);
          }
          (0 !== aG && 5 !== aG) || lR(t, !1);
        }
        function lj(e, t) {
          for (
            var n = e.suspendedLanes,
              r = e.pingedLanes,
              i = e.expirationTimes,
              s = -0x3c00001 & e.pendingLanes;
            0 < s;

          ) {
            var o = 31 - ed(s),
              a = 1 << o,
              l = i[o];
            -1 === l
              ? (0 == (a & n) || 0 != (a & r)) &&
                (i[o] = (function (e, t) {
                  switch (e) {
                    case 1:
                    case 2:
                    case 4:
                    case 8:
                    case 64:
                      return t + 250;
                    case 16:
                    case 32:
                    case 128:
                    case 256:
                    case 512:
                    case 1024:
                    case 2048:
                    case 4096:
                    case 8192:
                    case 16384:
                    case 32768:
                    case 65536:
                    case 131072:
                    case 262144:
                    case 524288:
                    case 1048576:
                    case 2097152:
                      return t + 5e3;
                    default:
                      return -1;
                  }
                })(a, t))
              : l <= t && (e.expiredLanes |= a),
              (s &= ~a);
          }
          if (
            ((t = aE),
            (n = aA),
            (n = ey(
              e,
              e === t ? n : 0,
              null !== e.cancelPendingCommit || -1 !== e.timeoutHandle,
            )),
            (r = e.callbackNode),
            0 === n ||
              (e === t && (2 === aN || 9 === aN)) ||
              null !== e.cancelPendingCommit)
          )
            return (
              null !== r && null !== r && Y(r),
              (e.callbackNode = null),
              (e.callbackPriority = 0)
            );
          if (0 == (3 & n) || ev(e, n)) {
            if ((t = n & -n) === e.callbackPriority) return t;
            switch ((null !== r && Y(r), eS(n))) {
              case 2:
              case 8:
                n = en;
                break;
              case 32:
              default:
                n = er;
                break;
              case 0x10000000:
                n = es;
            }
            return (
              (n = G(n, (r = lF.bind(null, e)))),
              (e.callbackPriority = t),
              (e.callbackNode = n),
              t
            );
          }
          return (
            null !== r && null !== r && Y(r),
            (e.callbackPriority = 2),
            (e.callbackNode = null),
            2
          );
        }
        function lF(e, t) {
          if (0 !== aG && 5 !== aG)
            return (e.callbackNode = null), (e.callbackPriority = 0), null;
          var n = e.callbackNode;
          if (lv(!0) && e.callbackNode !== n) return null;
          var r = aA;
          return 0 ===
            (r = ey(
              e,
              e === aE ? r : 0,
              null !== e.cancelPendingCommit || -1 !== e.timeoutHandle,
            ))
            ? null
            : (a6(e, r, t),
              lj(e, J()),
              null != e.callbackNode && e.callbackNode === n
                ? lF.bind(null, e)
                : null);
        }
        function lB(e, t) {
          if (lv()) return null;
          a6(e, t, !0);
        }
        function lz() {
          return 0 === lD && (lD = eb()), lD;
        }
        function l$(e) {
          return null == e || "symbol" == typeof e || "boolean" == typeof e
            ? null
            : "function" == typeof e
              ? e
              : tp("" + e);
        }
        function lq(e, t) {
          var n = t.ownerDocument.createElement("input");
          return (
            (n.name = t.name),
            (n.value = t.value),
            e.id && n.setAttribute("form", e.id),
            t.parentNode.insertBefore(n, t),
            (e = new FormData(e)),
            n.parentNode.removeChild(n),
            e
          );
        }
        for (var lU = 0; lU < nW.length; lU++) {
          var lH = nW[lU];
          nZ(lH.toLowerCase(), "on" + (lH[0].toUpperCase() + lH.slice(1)));
        }
        nZ(nB, "onAnimationEnd"),
          nZ(nz, "onAnimationIteration"),
          nZ(n$, "onAnimationStart"),
          nZ("dblclick", "onDoubleClick"),
          nZ("focusin", "onFocus"),
          nZ("focusout", "onBlur"),
          nZ(nq, "onTransitionRun"),
          nZ(nU, "onTransitionStart"),
          nZ(nH, "onTransitionCancel"),
          nZ(nQ, "onTransitionEnd"),
          eV("onMouseEnter", ["mouseout", "mouseover"]),
          eV("onMouseLeave", ["mouseout", "mouseover"]),
          eV("onPointerEnter", ["pointerout", "pointerover"]),
          eV("onPointerLeave", ["pointerout", "pointerover"]),
          eQ(
            "onChange",
            "change click focusin focusout input keydown keyup selectionchange".split(
              " ",
            ),
          ),
          eQ(
            "onSelect",
            "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
              " ",
            ),
          ),
          eQ("onBeforeInput", [
            "compositionend",
            "keypress",
            "textInput",
            "paste",
          ]),
          eQ(
            "onCompositionEnd",
            "compositionend focusout keydown keypress keyup mousedown".split(
              " ",
            ),
          ),
          eQ(
            "onCompositionStart",
            "compositionstart focusout keydown keypress keyup mousedown".split(
              " ",
            ),
          ),
          eQ(
            "onCompositionUpdate",
            "compositionupdate focusout keydown keypress keyup mousedown".split(
              " ",
            ),
          );
        var lQ =
            "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
              " ",
            ),
          lV = new Set(
            "beforetoggle cancel close invalid load scroll scrollend toggle"
              .split(" ")
              .concat(lQ),
          );
        function lW(e, t) {
          t = 0 != (4 & t);
          for (var n = 0; n < e.length; n++) {
            var r = e[n],
              i = r.event;
            r = r.listeners;
            r: {
              var s = void 0;
              if (t)
                for (var o = r.length - 1; 0 <= o; o--) {
                  var a = r[o],
                    l = a.instance,
                    c = a.currentTarget;
                  if (((a = a.listener), l !== s && i.isPropagationStopped()))
                    break r;
                  (s = a), (i.currentTarget = c);
                  try {
                    s(i);
                  } catch (e) {
                    oo(e);
                  }
                  (i.currentTarget = null), (s = l);
                }
              else
                for (o = 0; o < r.length; o++) {
                  if (
                    ((l = (a = r[o]).instance),
                    (c = a.currentTarget),
                    (a = a.listener),
                    l !== s && i.isPropagationStopped())
                  )
                    break r;
                  (s = a), (i.currentTarget = c);
                  try {
                    s(i);
                  } catch (e) {
                    oo(e);
                  }
                  (i.currentTarget = null), (s = l);
                }
            }
          }
        }
        function lZ(e, t) {
          var n = t[eD];
          void 0 === n && (n = t[eD] = new Set());
          var r = e + "__bubble";
          n.has(r) || (lX(t, e, 2, !1), n.add(r));
        }
        function lG(e, t, n) {
          var r = 0;
          t && (r |= 4), lX(n, e, r, t);
        }
        var lY = "_reactListening" + Math.random().toString(36).slice(2);
        function lK(e) {
          if (!e[lY]) {
            (e[lY] = !0),
              eU.forEach(function (t) {
                "selectionchange" !== t &&
                  (lV.has(t) || lG(t, !1, e), lG(t, !0, e));
              });
            var t = 9 === e.nodeType ? e : e.ownerDocument;
            null === t || t[lY] || ((t[lY] = !0), lG("selectionchange", !1, t));
          }
        }
        function lX(e, t, n, r) {
          switch (c9(t)) {
            case 2:
              var i = c2;
              break;
            case 8:
              i = c5;
              break;
            default:
              i = c3;
          }
          (n = i.bind(null, t, n, e)),
            (i = void 0),
            t_ &&
              ("touchstart" === t || "touchmove" === t || "wheel" === t) &&
              (i = !0),
            r
              ? void 0 !== i
                ? e.addEventListener(t, n, { capture: !0, passive: i })
                : e.addEventListener(t, n, !0)
              : void 0 !== i
                ? e.addEventListener(t, n, { passive: i })
                : e.addEventListener(t, n, !1);
        }
        function lJ(e, t, n, r, i) {
          var s = r;
          if (0 == (1 & t) && 0 == (2 & t) && null !== r)
            r: for (;;) {
              if (null === r) return;
              var o = r.tag;
              if (3 === o || 4 === o) {
                var a = r.stateNode.containerInfo;
                if (a === i) break;
                if (4 === o)
                  for (o = r.return; null !== o; ) {
                    var c = o.tag;
                    if ((3 === c || 4 === c) && o.stateNode.containerInfo === i)
                      return;
                    o = o.return;
                  }
                for (; null !== a; ) {
                  if (null === (o = eF(a))) return;
                  if (5 === (c = o.tag) || 6 === c || 26 === c || 27 === c) {
                    r = s = o;
                    continue r;
                  }
                  a = a.parentNode;
                }
              }
              r = r.return;
            }
          tx(function () {
            var r = s,
              i = tm(n),
              o = [];
            r: {
              var a = nV.get(e);
              if (void 0 !== a) {
                var c = tB,
                  u = e;
                switch (e) {
                  case "keypress":
                    if (0 === tA(n)) break r;
                  case "keydown":
                  case "keyup":
                    c = t0;
                    break;
                  case "focusin":
                    (u = "focus"), (c = tQ);
                    break;
                  case "focusout":
                    (u = "blur"), (c = tQ);
                    break;
                  case "beforeblur":
                  case "afterblur":
                    c = tQ;
                    break;
                  case "click":
                    if (2 === n.button) break r;
                  case "auxclick":
                  case "dblclick":
                  case "mousedown":
                  case "mousemove":
                  case "mouseup":
                  case "mouseout":
                  case "mouseover":
                  case "contextmenu":
                    c = tU;
                    break;
                  case "drag":
                  case "dragend":
                  case "dragenter":
                  case "dragexit":
                  case "dragleave":
                  case "dragover":
                  case "dragstart":
                  case "drop":
                    c = tH;
                    break;
                  case "touchcancel":
                  case "touchend":
                  case "touchmove":
                  case "touchstart":
                    c = t2;
                    break;
                  case nB:
                  case nz:
                  case n$:
                    c = tV;
                    break;
                  case nQ:
                    c = t5;
                    break;
                  case "scroll":
                  case "scrollend":
                    c = t$;
                    break;
                  case "wheel":
                    c = t3;
                    break;
                  case "copy":
                  case "cut":
                  case "paste":
                    c = tW;
                    break;
                  case "gotpointercapture":
                  case "lostpointercapture":
                  case "pointercancel":
                  case "pointerdown":
                  case "pointermove":
                  case "pointerout":
                  case "pointerover":
                  case "pointerup":
                    c = t1;
                    break;
                  case "toggle":
                  case "beforetoggle":
                    c = t4;
                }
                var d = 0 != (4 & t),
                  h = !d && ("scroll" === e || "scrollend" === e),
                  p = d ? (null !== a ? a + "Capture" : null) : a;
                d = [];
                for (var f, m = r; null !== m; ) {
                  var g = m;
                  if (
                    ((f = g.stateNode),
                    (5 !== (g = g.tag) && 26 !== g && 27 !== g) ||
                      null === f ||
                      null === p ||
                      (null != (g = tk(m, p)) && d.push(l0(m, g, f))),
                    h)
                  )
                    break;
                  m = m.return;
                }
                0 < d.length &&
                  ((a = new c(a, u, null, n, i)),
                  o.push({ event: a, listeners: d }));
              }
            }
            if (0 == (7 & t)) {
              if (
                ((a = "mouseover" === e || "pointerover" === e),
                (c = "mouseout" === e || "pointerout" === e),
                !(
                  a &&
                  n !== tf &&
                  (u = n.relatedTarget || n.fromElement) &&
                  (eF(u) || u[eI])
                )) &&
                (c || a) &&
                ((a =
                  i.window === i
                    ? i
                    : (a = i.ownerDocument)
                      ? a.defaultView || a.parentWindow
                      : window),
                c
                  ? ((u = n.relatedTarget || n.toElement),
                    (c = r),
                    null !== (u = u ? eF(u) : null) &&
                      ((h = l(u)),
                      (d = u.tag),
                      u !== h || (5 !== d && 27 !== d && 6 !== d)) &&
                      (u = null))
                  : ((c = null), (u = r)),
                c !== u)
              ) {
                if (
                  ((d = tU),
                  (g = "onMouseLeave"),
                  (p = "onMouseEnter"),
                  (m = "mouse"),
                  ("pointerout" === e || "pointerover" === e) &&
                    ((d = t1),
                    (g = "onPointerLeave"),
                    (p = "onPointerEnter"),
                    (m = "pointer")),
                  (h = null == c ? a : ez(c)),
                  (f = null == u ? a : ez(u)),
                  ((a = new d(g, m + "leave", c, n, i)).target = h),
                  (a.relatedTarget = f),
                  (g = null),
                  eF(i) === r &&
                    (((d = new d(p, m + "enter", u, n, i)).target = f),
                    (d.relatedTarget = h),
                    (g = d)),
                  (h = g),
                  c && u)
                )
                  i: {
                    for (d = c, p = u, m = 0, f = d; f; f = l2(f)) m++;
                    for (f = 0, g = p; g; g = l2(g)) f++;
                    for (; 0 < m - f; ) (d = l2(d)), m--;
                    for (; 0 < f - m; ) (p = l2(p)), f--;
                    for (; m--; ) {
                      if (d === p || (null !== p && d === p.alternate)) break i;
                      (d = l2(d)), (p = l2(p));
                    }
                    d = null;
                  }
                else d = null;
                null !== c && l5(o, a, c, d, !1),
                  null !== u && null !== h && l5(o, h, u, d, !0);
              }
              r: {
                if (
                  "select" ===
                    (c =
                      (a = r ? ez(r) : window).nodeName &&
                      a.nodeName.toLowerCase()) ||
                  ("input" === c && "file" === a.type)
                )
                  var y,
                    v = nh;
                else if (no(a))
                  if (np) v = nk;
                  else {
                    v = nb;
                    var b = nv;
                  }
                else
                  (c = a.nodeName) &&
                  "input" === c.toLowerCase() &&
                  ("checkbox" === a.type || "radio" === a.type)
                    ? (v = nx)
                    : r && tu(r.elementType) && (v = nh);
                if (v && (v = v(e, r))) {
                  na(o, v, n, i);
                  break r;
                }
                b && b(e, a, r),
                  "focusout" === e &&
                    r &&
                    "number" === a.type &&
                    null != r.memoizedProps.value &&
                    tn(a, "number", a.value);
              }
              switch (((b = r ? ez(r) : window), e)) {
                case "focusin":
                  (no(b) || "true" === b.contentEditable) &&
                    ((nA = b), (nN = r), (nI = null));
                  break;
                case "focusout":
                  nI = nN = nA = null;
                  break;
                case "mousedown":
                  nD = !0;
                  break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                  (nD = !1), nP(o, n, i);
                  break;
                case "selectionchange":
                  if (nC) break;
                case "keydown":
                case "keyup":
                  nP(o, n, i);
              }
              if (t6)
                i: {
                  switch (e) {
                    case "compositionstart":
                      var x = "onCompositionStart";
                      break i;
                    case "compositionend":
                      x = "onCompositionEnd";
                      break i;
                    case "compositionupdate":
                      x = "onCompositionUpdate";
                      break i;
                  }
                  x = void 0;
                }
              else
                ni
                  ? nn(e, n) && (x = "onCompositionEnd")
                  : "keydown" === e &&
                    229 === n.keyCode &&
                    (x = "onCompositionStart");
              x &&
                (ne &&
                  "ko" !== n.locale &&
                  (ni || "onCompositionStart" !== x
                    ? "onCompositionEnd" === x && ni && (y = tC())
                    : ((tS = "value" in (tT = i) ? tT.value : tT.textContent),
                      (ni = !0))),
                0 < (b = l1(r, x)).length &&
                  ((x = new tZ(x, e, null, n, i)),
                  o.push({ event: x, listeners: b }),
                  y ? (x.data = y) : null !== (y = nr(n)) && (x.data = y))),
                (y = t7
                  ? (function (e, t) {
                      switch (e) {
                        case "compositionend":
                          return nr(t);
                        case "keypress":
                          if (32 !== t.which) return null;
                          return (nt = !0), " ";
                        case "textInput":
                          return " " === (e = t.data) && nt ? null : e;
                        default:
                          return null;
                      }
                    })(e, n)
                  : (function (e, t) {
                      if (ni)
                        return "compositionend" === e || (!t6 && nn(e, t))
                          ? ((e = tC()), (tE = tS = tT = null), (ni = !1), e)
                          : null;
                      switch (e) {
                        case "paste":
                        default:
                          return null;
                        case "keypress":
                          if (
                            !(t.ctrlKey || t.altKey || t.metaKey) ||
                            (t.ctrlKey && t.altKey)
                          ) {
                            if (t.char && 1 < t.char.length) return t.char;
                            if (t.which) return String.fromCharCode(t.which);
                          }
                          return null;
                        case "compositionend":
                          return ne && "ko" !== t.locale ? null : t.data;
                      }
                    })(e, n)) &&
                  0 < (x = l1(r, "onBeforeInput")).length &&
                  ((b = new tZ("onBeforeInput", "beforeinput", null, n, i)),
                  o.push({ event: b, listeners: x }),
                  (b.data = y));
              var k = e;
              if ("submit" === k && r && r.stateNode === i) {
                var w = l$((i[eN] || null).action),
                  _ = n.submitter;
                _ &&
                  null !==
                    (k = (k = _[eN] || null)
                      ? l$(k.formAction)
                      : _.getAttribute("formAction")) &&
                  ((w = k), (_ = null));
                var O = new tB("action", "action", null, n, i);
                o.push({
                  event: O,
                  listeners: [
                    {
                      instance: null,
                      listener: function () {
                        if (n.defaultPrevented) {
                          if (0 !== lD) {
                            var e = _ ? lq(i, _) : new FormData(i);
                            sV(
                              r,
                              {
                                pending: !0,
                                data: e,
                                method: i.method,
                                action: w,
                              },
                              null,
                              e,
                            );
                          }
                        } else
                          "function" == typeof w &&
                            (O.preventDefault(),
                            sV(
                              r,
                              {
                                pending: !0,
                                data: (e = _ ? lq(i, _) : new FormData(i)),
                                method: i.method,
                                action: w,
                              },
                              w,
                              e,
                            ));
                      },
                      currentTarget: i,
                    },
                  ],
                });
              }
            }
            lW(o, t);
          });
        }
        function l0(e, t, n) {
          return { instance: e, listener: t, currentTarget: n };
        }
        function l1(e, t) {
          for (var n = t + "Capture", r = []; null !== e; ) {
            var i = e,
              s = i.stateNode;
            if (
              ((5 !== (i = i.tag) && 26 !== i && 27 !== i) ||
                null === s ||
                (null != (i = tk(e, n)) && r.unshift(l0(e, i, s)),
                null != (i = tk(e, t)) && r.push(l0(e, i, s))),
              3 === e.tag)
            )
              return r;
            e = e.return;
          }
          return [];
        }
        function l2(e) {
          if (null === e) return null;
          do e = e.return;
          while (e && 5 !== e.tag && 27 !== e.tag);
          return e || null;
        }
        function l5(e, t, n, r, i) {
          for (var s = t._reactName, o = []; null !== n && n !== r; ) {
            var a = n,
              l = a.alternate,
              c = a.stateNode;
            if (((a = a.tag), null !== l && l === r)) break;
            (5 !== a && 26 !== a && 27 !== a) ||
              null === c ||
              ((l = c),
              i
                ? null != (c = tk(n, s)) && o.unshift(l0(n, c, l))
                : i || (null != (c = tk(n, s)) && o.push(l0(n, c, l)))),
              (n = n.return);
          }
          0 !== o.length && e.push({ event: t, listeners: o });
        }
        var l3 = /\r\n?/g,
          l4 = /\u0000|\uFFFD/g;
        function l8(e) {
          return ("string" == typeof e ? e : "" + e)
            .replace(l3, "\n")
            .replace(l4, "");
        }
        function l6(e, t) {
          return (t = l8(t)), l8(e) === t;
        }
        function l9() {}
        function l7(e, t, n, r, i, s) {
          switch (n) {
            case "children":
              "string" == typeof r
                ? "body" === t || ("textarea" === t && "" === r) || to(e, r)
                : ("number" == typeof r || "bigint" == typeof r) &&
                  "body" !== t &&
                  to(e, "" + r);
              break;
            case "className":
              eK(e, "class", r);
              break;
            case "tabIndex":
              eK(e, "tabindex", r);
              break;
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height":
              eK(e, n, r);
              break;
            case "style":
              tc(e, r, s);
              break;
            case "data":
              if ("object" !== t) {
                eK(e, "data", r);
                break;
              }
            case "src":
            case "href":
              if (
                ("" === r && ("a" !== t || "href" !== n)) ||
                null == r ||
                "function" == typeof r ||
                "symbol" == typeof r ||
                "boolean" == typeof r
              ) {
                e.removeAttribute(n);
                break;
              }
              (r = tp("" + r)), e.setAttribute(n, r);
              break;
            case "action":
            case "formAction":
              if ("function" == typeof r) {
                e.setAttribute(
                  n,
                  "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')",
                );
                break;
              }
              if (
                ("function" == typeof s &&
                  ("formAction" === n
                    ? ("input" !== t && l7(e, t, "name", i.name, i, null),
                      l7(e, t, "formEncType", i.formEncType, i, null),
                      l7(e, t, "formMethod", i.formMethod, i, null),
                      l7(e, t, "formTarget", i.formTarget, i, null))
                    : (l7(e, t, "encType", i.encType, i, null),
                      l7(e, t, "method", i.method, i, null),
                      l7(e, t, "target", i.target, i, null))),
                null == r || "symbol" == typeof r || "boolean" == typeof r)
              ) {
                e.removeAttribute(n);
                break;
              }
              (r = tp("" + r)), e.setAttribute(n, r);
              break;
            case "onClick":
              null != r && (e.onclick = l9);
              break;
            case "onScroll":
              null != r && lZ("scroll", e);
              break;
            case "onScrollEnd":
              null != r && lZ("scrollend", e);
              break;
            case "dangerouslySetInnerHTML":
              if (null != r) {
                if ("object" != typeof r || !("__html" in r))
                  throw Error(a(61));
                if (null != (n = r.__html)) {
                  if (null != i.children) throw Error(a(60));
                  e.innerHTML = n;
                }
              }
              break;
            case "multiple":
              e.multiple = r && "function" != typeof r && "symbol" != typeof r;
              break;
            case "muted":
              e.muted = r && "function" != typeof r && "symbol" != typeof r;
              break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
            case "autoFocus":
            case "innerText":
            case "textContent":
              break;
            case "xlinkHref":
              if (
                null == r ||
                "function" == typeof r ||
                "boolean" == typeof r ||
                "symbol" == typeof r
              ) {
                e.removeAttribute("xlink:href");
                break;
              }
              (n = tp("" + r)),
                e.setAttributeNS(
                  "http://www.w3.org/1999/xlink",
                  "xlink:href",
                  n,
                );
              break;
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha":
              null != r && "function" != typeof r && "symbol" != typeof r
                ? e.setAttribute(n, "" + r)
                : e.removeAttribute(n);
              break;
            case "inert":
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope":
              r && "function" != typeof r && "symbol" != typeof r
                ? e.setAttribute(n, "")
                : e.removeAttribute(n);
              break;
            case "capture":
            case "download":
              !0 === r
                ? e.setAttribute(n, "")
                : !1 !== r &&
                    null != r &&
                    "function" != typeof r &&
                    "symbol" != typeof r
                  ? e.setAttribute(n, r)
                  : e.removeAttribute(n);
              break;
            case "cols":
            case "rows":
            case "size":
            case "span":
              null != r &&
              "function" != typeof r &&
              "symbol" != typeof r &&
              !isNaN(r) &&
              1 <= r
                ? e.setAttribute(n, r)
                : e.removeAttribute(n);
              break;
            case "rowSpan":
            case "start":
              null == r ||
              "function" == typeof r ||
              "symbol" == typeof r ||
              isNaN(r)
                ? e.removeAttribute(n)
                : e.setAttribute(n, r);
              break;
            case "popover":
              lZ("beforetoggle", e), lZ("toggle", e), eY(e, "popover", r);
              break;
            case "xlinkActuate":
              eX(e, "http://www.w3.org/1999/xlink", "xlink:actuate", r);
              break;
            case "xlinkArcrole":
              eX(e, "http://www.w3.org/1999/xlink", "xlink:arcrole", r);
              break;
            case "xlinkRole":
              eX(e, "http://www.w3.org/1999/xlink", "xlink:role", r);
              break;
            case "xlinkShow":
              eX(e, "http://www.w3.org/1999/xlink", "xlink:show", r);
              break;
            case "xlinkTitle":
              eX(e, "http://www.w3.org/1999/xlink", "xlink:title", r);
              break;
            case "xlinkType":
              eX(e, "http://www.w3.org/1999/xlink", "xlink:type", r);
              break;
            case "xmlBase":
              eX(e, "http://www.w3.org/XML/1998/namespace", "xml:base", r);
              break;
            case "xmlLang":
              eX(e, "http://www.w3.org/XML/1998/namespace", "xml:lang", r);
              break;
            case "xmlSpace":
              eX(e, "http://www.w3.org/XML/1998/namespace", "xml:space", r);
              break;
            case "is":
              eY(e, "is", r);
              break;
            default:
              (2 < n.length &&
                ("o" === n[0] || "O" === n[0]) &&
                ("n" === n[1] || "N" === n[1])) ||
                eY(e, (n = td.get(n) || n), r);
          }
        }
        function ce(e, t, n, r, i, s) {
          switch (n) {
            case "style":
              tc(e, r, s);
              break;
            case "dangerouslySetInnerHTML":
              if (null != r) {
                if ("object" != typeof r || !("__html" in r))
                  throw Error(a(61));
                if (null != (n = r.__html)) {
                  if (null != i.children) throw Error(a(60));
                  e.innerHTML = n;
                }
              }
              break;
            case "children":
              "string" == typeof r
                ? to(e, r)
                : ("number" == typeof r || "bigint" == typeof r) &&
                  to(e, "" + r);
              break;
            case "onScroll":
              null != r && lZ("scroll", e);
              break;
            case "onScrollEnd":
              null != r && lZ("scrollend", e);
              break;
            case "onClick":
              null != r && (e.onclick = l9);
              break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "innerHTML":
            case "ref":
            case "innerText":
            case "textContent":
              break;
            default:
              if (!eH.hasOwnProperty(n))
                r: {
                  if (
                    "o" === n[0] &&
                    "n" === n[1] &&
                    ((i = n.endsWith("Capture")),
                    (t = n.slice(2, i ? n.length - 7 : void 0)),
                    "function" ==
                      typeof (s = null != (s = e[eN] || null) ? s[n] : null) &&
                      e.removeEventListener(t, s, i),
                    "function" == typeof r)
                  ) {
                    "function" != typeof s &&
                      null !== s &&
                      (n in e
                        ? (e[n] = null)
                        : e.hasAttribute(n) && e.removeAttribute(n)),
                      e.addEventListener(t, r, i);
                    break r;
                  }
                  n in e
                    ? (e[n] = r)
                    : !0 === r
                      ? e.setAttribute(n, "")
                      : eY(e, n, r);
                }
          }
        }
        function ct(e, t, n) {
          switch (t) {
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
              break;
            case "img":
              lZ("error", e), lZ("load", e);
              var r,
                i = !1,
                s = !1;
              for (r in n)
                if (n.hasOwnProperty(r)) {
                  var o = n[r];
                  if (null != o)
                    switch (r) {
                      case "src":
                        i = !0;
                        break;
                      case "srcSet":
                        s = !0;
                        break;
                      case "children":
                      case "dangerouslySetInnerHTML":
                        throw Error(a(137, t));
                      default:
                        l7(e, t, r, o, n, null);
                    }
                }
              s && l7(e, t, "srcSet", n.srcSet, n, null),
                i && l7(e, t, "src", n.src, n, null);
              return;
            case "input":
              lZ("invalid", e);
              var l = (r = o = s = null),
                c = null,
                u = null;
              for (i in n)
                if (n.hasOwnProperty(i)) {
                  var d = n[i];
                  if (null != d)
                    switch (i) {
                      case "name":
                        s = d;
                        break;
                      case "type":
                        o = d;
                        break;
                      case "checked":
                        c = d;
                        break;
                      case "defaultChecked":
                        u = d;
                        break;
                      case "value":
                        r = d;
                        break;
                      case "defaultValue":
                        l = d;
                        break;
                      case "children":
                      case "dangerouslySetInnerHTML":
                        if (null != d) throw Error(a(137, t));
                        break;
                      default:
                        l7(e, t, i, d, n, null);
                    }
                }
              tt(e, r, l, c, u, o, s, !1), e4(e);
              return;
            case "select":
              for (s in (lZ("invalid", e), (i = o = r = null), n))
                if (n.hasOwnProperty(s) && null != (l = n[s]))
                  switch (s) {
                    case "value":
                      r = l;
                      break;
                    case "defaultValue":
                      o = l;
                      break;
                    case "multiple":
                      i = l;
                    default:
                      l7(e, t, s, l, n, null);
                  }
              (t = r),
                (n = o),
                (e.multiple = !!i),
                null != t ? tr(e, !!i, t, !1) : null != n && tr(e, !!i, n, !0);
              return;
            case "textarea":
              for (o in (lZ("invalid", e), (r = s = i = null), n))
                if (n.hasOwnProperty(o) && null != (l = n[o]))
                  switch (o) {
                    case "value":
                      i = l;
                      break;
                    case "defaultValue":
                      s = l;
                      break;
                    case "children":
                      r = l;
                      break;
                    case "dangerouslySetInnerHTML":
                      if (null != l) throw Error(a(91));
                      break;
                    default:
                      l7(e, t, o, l, n, null);
                  }
              ts(e, i, s, r), e4(e);
              return;
            case "option":
              for (c in n)
                n.hasOwnProperty(c) &&
                  null != (i = n[c]) &&
                  ("selected" === c
                    ? (e.selected =
                        i && "function" != typeof i && "symbol" != typeof i)
                    : l7(e, t, c, i, n, null));
              return;
            case "dialog":
              lZ("beforetoggle", e),
                lZ("toggle", e),
                lZ("cancel", e),
                lZ("close", e);
              break;
            case "iframe":
            case "object":
              lZ("load", e);
              break;
            case "video":
            case "audio":
              for (i = 0; i < lQ.length; i++) lZ(lQ[i], e);
              break;
            case "image":
              lZ("error", e), lZ("load", e);
              break;
            case "details":
              lZ("toggle", e);
              break;
            case "embed":
            case "source":
            case "link":
              lZ("error", e), lZ("load", e);
            case "area":
            case "base":
            case "br":
            case "col":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "track":
            case "wbr":
            case "menuitem":
              for (u in n)
                if (n.hasOwnProperty(u) && null != (i = n[u]))
                  switch (u) {
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error(a(137, t));
                    default:
                      l7(e, t, u, i, n, null);
                  }
              return;
            default:
              if (tu(t)) {
                for (d in n)
                  n.hasOwnProperty(d) &&
                    void 0 !== (i = n[d]) &&
                    ce(e, t, d, i, n, void 0);
                return;
              }
          }
          for (l in n)
            n.hasOwnProperty(l) &&
              null != (i = n[l]) &&
              l7(e, t, l, i, n, null);
        }
        var cn = null,
          cr = null;
        function ci(e) {
          return 9 === e.nodeType ? e : e.ownerDocument;
        }
        function cs(e) {
          switch (e) {
            case "http://www.w3.org/2000/svg":
              return 1;
            case "http://www.w3.org/1998/Math/MathML":
              return 2;
            default:
              return 0;
          }
        }
        function co(e, t) {
          if (0 === e)
            switch (t) {
              case "svg":
                return 1;
              case "math":
                return 2;
              default:
                return 0;
            }
          return 1 === e && "foreignObject" === t ? 0 : e;
        }
        function ca(e, t) {
          return (
            "textarea" === e ||
            "noscript" === e ||
            "string" == typeof t.children ||
            "number" == typeof t.children ||
            "bigint" == typeof t.children ||
            ("object" == typeof t.dangerouslySetInnerHTML &&
              null !== t.dangerouslySetInnerHTML &&
              null != t.dangerouslySetInnerHTML.__html)
          );
        }
        var cl = null,
          cc = "function" == typeof setTimeout ? setTimeout : void 0,
          cu = "function" == typeof clearTimeout ? clearTimeout : void 0,
          cd = "function" == typeof Promise ? Promise : void 0,
          ch =
            "function" == typeof queueMicrotask
              ? queueMicrotask
              : void 0 !== cd
                ? function (e) {
                    return cd.resolve(null).then(e).catch(cp);
                  }
                : cc;
        function cp(e) {
          setTimeout(function () {
            throw e;
          });
        }
        function cf(e) {
          return "head" === e;
        }
        function cm(e, t) {
          var n = t,
            r = 0,
            i = 0;
          do {
            var s = n.nextSibling;
            if ((e.removeChild(n), s && 8 === s.nodeType))
              if ("/$" === (n = s.data)) {
                if (0 < r && 8 > r) {
                  n = r;
                  var o = e.ownerDocument;
                  if (
                    (1 & n && cw(o.documentElement), 2 & n && cw(o.body), 4 & n)
                  )
                    for (cw((n = o.head)), o = n.firstChild; o; ) {
                      var a = o.nextSibling,
                        l = o.nodeName;
                      o[eL] ||
                        "SCRIPT" === l ||
                        "STYLE" === l ||
                        ("LINK" === l &&
                          "stylesheet" === o.rel.toLowerCase()) ||
                        n.removeChild(o),
                        (o = a);
                    }
                }
                if (0 === i) {
                  e.removeChild(s), ug(t);
                  return;
                }
                i--;
              } else
                "$" === n || "$?" === n || "$!" === n
                  ? i++
                  : (r = n.charCodeAt(0) - 48);
            else r = 0;
            n = s;
          } while (n);
          ug(t);
        }
        function cg(e) {
          var t = e.firstChild;
          for (t && 10 === t.nodeType && (t = t.nextSibling); t; ) {
            var n = t;
            switch (((t = t.nextSibling), n.nodeName)) {
              case "HTML":
              case "HEAD":
              case "BODY":
                cg(n), ej(n);
                continue;
              case "SCRIPT":
              case "STYLE":
                continue;
              case "LINK":
                if ("stylesheet" === n.rel.toLowerCase()) continue;
            }
            e.removeChild(n);
          }
        }
        function cy(e) {
          return (
            "$!" === e.data ||
            ("$?" === e.data && "complete" === e.ownerDocument.readyState)
          );
        }
        function cv(e) {
          for (; null != e; e = e.nextSibling) {
            var t = e.nodeType;
            if (1 === t || 3 === t) break;
            if (8 === t) {
              if (
                "$" === (t = e.data) ||
                "$!" === t ||
                "$?" === t ||
                "F!" === t ||
                "F" === t
              )
                break;
              if ("/$" === t) return null;
            }
          }
          return e;
        }
        var cb = null;
        function cx(e) {
          e = e.previousSibling;
          for (var t = 0; e; ) {
            if (8 === e.nodeType) {
              var n = e.data;
              if ("$" === n || "$!" === n || "$?" === n) {
                if (0 === t) return e;
                t--;
              } else "/$" === n && t++;
            }
            e = e.previousSibling;
          }
          return null;
        }
        function ck(e, t, n) {
          switch (((t = ci(n)), e)) {
            case "html":
              if (!(e = t.documentElement)) throw Error(a(452));
              return e;
            case "head":
              if (!(e = t.head)) throw Error(a(453));
              return e;
            case "body":
              if (!(e = t.body)) throw Error(a(454));
              return e;
            default:
              throw Error(a(451));
          }
        }
        function cw(e) {
          for (var t = e.attributes; t.length; ) e.removeAttributeNode(t[0]);
          ej(e);
        }
        var c_ = new Map(),
          cO = new Set();
        function cT(e) {
          return "function" == typeof e.getRootNode
            ? e.getRootNode()
            : 9 === e.nodeType
              ? e
              : e.ownerDocument;
        }
        var cS = P.d;
        P.d = {
          f: function () {
            var e = cS.f(),
              t = le();
            return e || t;
          },
          r: function (e) {
            var t = eB(e);
            null !== t && 5 === t.tag && "form" === t.type ? sZ(t) : cS.r(e);
          },
          D: function (e) {
            cS.D(e), cC("dns-prefetch", e, null);
          },
          C: function (e, t) {
            cS.C(e, t), cC("preconnect", e, t);
          },
          L: function (e, t, n) {
            if ((cS.L(e, t, n), cE && e && t)) {
              var r = 'link[rel="preload"][as="' + e7(t) + '"]';
              "image" === t && n && n.imageSrcSet
                ? ((r += '[imagesrcset="' + e7(n.imageSrcSet) + '"]'),
                  "string" == typeof n.imageSizes &&
                    (r += '[imagesizes="' + e7(n.imageSizes) + '"]'))
                : (r += '[href="' + e7(e) + '"]');
              var i = r;
              switch (t) {
                case "style":
                  i = cN(e);
                  break;
                case "script":
                  i = cP(e);
              }
              c_.has(i) ||
                ((e = d(
                  {
                    rel: "preload",
                    href: "image" === t && n && n.imageSrcSet ? void 0 : e,
                    as: t,
                  },
                  n,
                )),
                c_.set(i, e),
                null !== cE.querySelector(r) ||
                  ("style" === t && cE.querySelector(cI(i))) ||
                  ("script" === t && cE.querySelector(cR(i))) ||
                  (ct((t = cE.createElement("link")), "link", e),
                  eq(t),
                  cE.head.appendChild(t)));
            }
          },
          m: function (e, t) {
            if ((cS.m(e, t), cE && e)) {
              var n = t && "string" == typeof t.as ? t.as : "script",
                r =
                  'link[rel="modulepreload"][as="' +
                  e7(n) +
                  '"][href="' +
                  e7(e) +
                  '"]',
                i = r;
              switch (n) {
                case "audioworklet":
                case "paintworklet":
                case "serviceworker":
                case "sharedworker":
                case "worker":
                case "script":
                  i = cP(e);
              }
              if (
                !c_.has(i) &&
                ((e = d({ rel: "modulepreload", href: e }, t)),
                c_.set(i, e),
                null === cE.querySelector(r))
              ) {
                switch (n) {
                  case "audioworklet":
                  case "paintworklet":
                  case "serviceworker":
                  case "sharedworker":
                  case "worker":
                  case "script":
                    if (cE.querySelector(cR(i))) return;
                }
                ct((n = cE.createElement("link")), "link", e),
                  eq(n),
                  cE.head.appendChild(n);
              }
            }
          },
          X: function (e, t) {
            if ((cS.X(e, t), cE && e)) {
              var n = e$(cE).hoistableScripts,
                r = cP(e),
                i = n.get(r);
              i ||
                ((i = cE.querySelector(cR(r))) ||
                  ((e = d({ src: e, async: !0 }, t)),
                  (t = c_.get(r)) && cF(e, t),
                  eq((i = cE.createElement("script"))),
                  ct(i, "link", e),
                  cE.head.appendChild(i)),
                (i = { type: "script", instance: i, count: 1, state: null }),
                n.set(r, i));
            }
          },
          S: function (e, t, n) {
            if ((cS.S(e, t, n), cE && e)) {
              var r = e$(cE).hoistableStyles,
                i = cN(e);
              t = t || "default";
              var s = r.get(i);
              if (!s) {
                var o = { loading: 0, preload: null };
                if ((s = cE.querySelector(cI(i)))) o.loading = 5;
                else {
                  (e = d(
                    { rel: "stylesheet", href: e, "data-precedence": t },
                    n,
                  )),
                    (n = c_.get(i)) && cj(e, n);
                  var a = (s = cE.createElement("link"));
                  eq(a),
                    ct(a, "link", e),
                    (a._p = new Promise(function (e, t) {
                      (a.onload = e), (a.onerror = t);
                    })),
                    a.addEventListener("load", function () {
                      o.loading |= 1;
                    }),
                    a.addEventListener("error", function () {
                      o.loading |= 2;
                    }),
                    (o.loading |= 4),
                    cL(s, t, cE);
                }
                (s = { type: "stylesheet", instance: s, count: 1, state: o }),
                  r.set(i, s);
              }
            }
          },
          M: function (e, t) {
            if ((cS.M(e, t), cE && e)) {
              var n = e$(cE).hoistableScripts,
                r = cP(e),
                i = n.get(r);
              i ||
                ((i = cE.querySelector(cR(r))) ||
                  ((e = d({ src: e, async: !0, type: "module" }, t)),
                  (t = c_.get(r)) && cF(e, t),
                  eq((i = cE.createElement("script"))),
                  ct(i, "link", e),
                  cE.head.appendChild(i)),
                (i = { type: "script", instance: i, count: 1, state: null }),
                n.set(r, i));
            }
          },
        };
        var cE = "undefined" == typeof document ? null : document;
        function cC(e, t, n) {
          if (cE && "string" == typeof t && t) {
            var r = e7(t);
            (r = 'link[rel="' + e + '"][href="' + r + '"]'),
              "string" == typeof n && (r += '[crossorigin="' + n + '"]'),
              cO.has(r) ||
                (cO.add(r),
                (e = { rel: e, crossOrigin: n, href: t }),
                null === cE.querySelector(r) &&
                  (ct((t = cE.createElement("link")), "link", e),
                  eq(t),
                  cE.head.appendChild(t)));
          }
        }
        function cA(e, t, n, r) {
          var i = (i = q.current) ? cT(i) : null;
          if (!i) throw Error(a(446));
          switch (e) {
            case "meta":
            case "title":
              return null;
            case "style":
              return "string" == typeof n.precedence &&
                "string" == typeof n.href
                ? ((t = cN(n.href)),
                  (r = (n = e$(i).hoistableStyles).get(t)) ||
                    ((r = {
                      type: "style",
                      instance: null,
                      count: 0,
                      state: null,
                    }),
                    n.set(t, r)),
                  r)
                : { type: "void", instance: null, count: 0, state: null };
            case "link":
              if (
                "stylesheet" === n.rel &&
                "string" == typeof n.href &&
                "string" == typeof n.precedence
              ) {
                e = cN(n.href);
                var s,
                  o,
                  l,
                  c,
                  u = e$(i).hoistableStyles,
                  d = u.get(e);
                if (
                  (d ||
                    ((i = i.ownerDocument || i),
                    (d = {
                      type: "stylesheet",
                      instance: null,
                      count: 0,
                      state: { loading: 0, preload: null },
                    }),
                    u.set(e, d),
                    (u = i.querySelector(cI(e))) &&
                      !u._p &&
                      ((d.instance = u), (d.state.loading = 5)),
                    c_.has(e) ||
                      ((n = {
                        rel: "preload",
                        as: "style",
                        href: n.href,
                        crossOrigin: n.crossOrigin,
                        integrity: n.integrity,
                        media: n.media,
                        hrefLang: n.hrefLang,
                        referrerPolicy: n.referrerPolicy,
                      }),
                      c_.set(e, n),
                      u ||
                        ((s = i),
                        (o = e),
                        (l = n),
                        (c = d.state),
                        s.querySelector(
                          'link[rel="preload"][as="style"][' + o + "]",
                        )
                          ? (c.loading = 1)
                          : ((c.preload = o = s.createElement("link")),
                            o.addEventListener("load", function () {
                              return (c.loading |= 1);
                            }),
                            o.addEventListener("error", function () {
                              return (c.loading |= 2);
                            }),
                            ct(o, "link", l),
                            eq(o),
                            s.head.appendChild(o))))),
                  t && null === r)
                )
                  throw Error(a(528, ""));
                return d;
              }
              if (t && null !== r) throw Error(a(529, ""));
              return null;
            case "script":
              return (
                (t = n.async),
                "string" == typeof (n = n.src) &&
                t &&
                "function" != typeof t &&
                "symbol" != typeof t
                  ? ((t = cP(n)),
                    (r = (n = e$(i).hoistableScripts).get(t)) ||
                      ((r = {
                        type: "script",
                        instance: null,
                        count: 0,
                        state: null,
                      }),
                      n.set(t, r)),
                    r)
                  : { type: "void", instance: null, count: 0, state: null }
              );
            default:
              throw Error(a(444, e));
          }
        }
        function cN(e) {
          return 'href="' + e7(e) + '"';
        }
        function cI(e) {
          return 'link[rel="stylesheet"][' + e + "]";
        }
        function cD(e) {
          return d({}, e, {
            "data-precedence": e.precedence,
            precedence: null,
          });
        }
        function cP(e) {
          return '[src="' + e7(e) + '"]';
        }
        function cR(e) {
          return "script[async]" + e;
        }
        function cM(e, t, n) {
          if ((t.count++, null === t.instance))
            switch (t.type) {
              case "style":
                var r = e.querySelector(
                  'style[data-href~="' + e7(n.href) + '"]',
                );
                if (r) return (t.instance = r), eq(r), r;
                var i = d({}, n, {
                  "data-href": n.href,
                  "data-precedence": n.precedence,
                  href: null,
                  precedence: null,
                });
                return (
                  eq((r = (e.ownerDocument || e).createElement("style"))),
                  ct(r, "style", i),
                  cL(r, n.precedence, e),
                  (t.instance = r)
                );
              case "stylesheet":
                i = cN(n.href);
                var s = e.querySelector(cI(i));
                if (s)
                  return (t.state.loading |= 4), (t.instance = s), eq(s), s;
                (r = cD(n)),
                  (i = c_.get(i)) && cj(r, i),
                  eq((s = (e.ownerDocument || e).createElement("link")));
                var o = s;
                return (
                  (o._p = new Promise(function (e, t) {
                    (o.onload = e), (o.onerror = t);
                  })),
                  ct(s, "link", r),
                  (t.state.loading |= 4),
                  cL(s, n.precedence, e),
                  (t.instance = s)
                );
              case "script":
                if (((s = cP(n.src)), (i = e.querySelector(cR(s)))))
                  return (t.instance = i), eq(i), i;
                return (
                  (r = n),
                  (i = c_.get(s)) && cF((r = d({}, n)), i),
                  eq((i = (e = e.ownerDocument || e).createElement("script"))),
                  ct(i, "link", r),
                  e.head.appendChild(i),
                  (t.instance = i)
                );
              case "void":
                return null;
              default:
                throw Error(a(443, t.type));
            }
          return (
            "stylesheet" === t.type &&
              0 == (4 & t.state.loading) &&
              ((r = t.instance),
              (t.state.loading |= 4),
              cL(r, n.precedence, e)),
            t.instance
          );
        }
        function cL(e, t, n) {
          for (
            var r = n.querySelectorAll(
                'link[rel="stylesheet"][data-precedence],style[data-precedence]',
              ),
              i = r.length ? r[r.length - 1] : null,
              s = i,
              o = 0;
            o < r.length;
            o++
          ) {
            var a = r[o];
            if (a.dataset.precedence === t) s = a;
            else if (s !== i) break;
          }
          s
            ? s.parentNode.insertBefore(e, s.nextSibling)
            : (t = 9 === n.nodeType ? n.head : n).insertBefore(e, t.firstChild);
        }
        function cj(e, t) {
          null == e.crossOrigin && (e.crossOrigin = t.crossOrigin),
            null == e.referrerPolicy && (e.referrerPolicy = t.referrerPolicy),
            null == e.title && (e.title = t.title);
        }
        function cF(e, t) {
          null == e.crossOrigin && (e.crossOrigin = t.crossOrigin),
            null == e.referrerPolicy && (e.referrerPolicy = t.referrerPolicy),
            null == e.integrity && (e.integrity = t.integrity);
        }
        var cB = null;
        function cz(e, t, n) {
          if (null === cB) {
            var r = new Map(),
              i = (cB = new Map());
            i.set(n, r);
          } else (r = (i = cB).get(n)) || ((r = new Map()), i.set(n, r));
          if (r.has(e)) return r;
          for (
            r.set(e, null), n = n.getElementsByTagName(e), i = 0;
            i < n.length;
            i++
          ) {
            var s = n[i];
            if (
              !(
                s[eL] ||
                s[eA] ||
                ("link" === e && "stylesheet" === s.getAttribute("rel"))
              ) &&
              "http://www.w3.org/2000/svg" !== s.namespaceURI
            ) {
              var o = s.getAttribute(t) || "";
              o = e + o;
              var a = r.get(o);
              a ? a.push(s) : r.set(o, [s]);
            }
          }
          return r;
        }
        function c$(e, t, n) {
          (e = e.ownerDocument || e).head.insertBefore(
            n,
            "title" === t ? e.querySelector("head > title") : null,
          );
        }
        function cq(e) {
          return "stylesheet" !== e.type || 0 != (3 & e.state.loading);
        }
        var cU = null;
        function cH() {}
        function cQ() {
          if ((this.count--, 0 === this.count)) {
            if (this.stylesheets) cW(this, this.stylesheets);
            else if (this.unsuspend) {
              var e = this.unsuspend;
              (this.unsuspend = null), e();
            }
          }
        }
        var cV = null;
        function cW(e, t) {
          (e.stylesheets = null),
            null !== e.unsuspend &&
              (e.count++,
              (cV = new Map()),
              t.forEach(cZ, e),
              (cV = null),
              cQ.call(e));
        }
        function cZ(e, t) {
          if (!(4 & t.state.loading)) {
            var n = cV.get(e);
            if (n) var r = n.get(null);
            else {
              (n = new Map()), cV.set(e, n);
              for (
                var i = e.querySelectorAll(
                    "link[data-precedence],style[data-precedence]",
                  ),
                  s = 0;
                s < i.length;
                s++
              ) {
                var o = i[s];
                ("LINK" === o.nodeName ||
                  "not all" !== o.getAttribute("media")) &&
                  (n.set(o.dataset.precedence, o), (r = o));
              }
              r && n.set(null, r);
            }
            (o = (i = t.instance).getAttribute("data-precedence")),
              (s = n.get(o) || r) === r && n.set(null, i),
              n.set(o, i),
              this.count++,
              (r = cQ.bind(this)),
              i.addEventListener("load", r),
              i.addEventListener("error", r),
              s
                ? s.parentNode.insertBefore(i, s.nextSibling)
                : (e = 9 === e.nodeType ? e.head : e).insertBefore(
                    i,
                    e.firstChild,
                  ),
              (t.state.loading |= 4);
          }
        }
        var cG = {
          $$typeof: x,
          Provider: null,
          Consumer: null,
          _currentValue: R,
          _currentValue2: R,
          _threadCount: 0,
        };
        function cY(e, t, n, r, i, s, o, a) {
          (this.tag = 1),
            (this.containerInfo = e),
            (this.pingCache = this.current = this.pendingChildren = null),
            (this.timeoutHandle = -1),
            (this.callbackNode =
              this.next =
              this.pendingContext =
              this.context =
              this.cancelPendingCommit =
                null),
            (this.callbackPriority = 0),
            (this.expirationTimes = ek(-1)),
            (this.entangledLanes =
              this.shellSuspendCounter =
              this.errorRecoveryDisabledLanes =
              this.expiredLanes =
              this.warmLanes =
              this.pingedLanes =
              this.suspendedLanes =
              this.pendingLanes =
                0),
            (this.entanglements = ek(0)),
            (this.hiddenUpdates = ek(null)),
            (this.identifierPrefix = r),
            (this.onUncaughtError = i),
            (this.onCaughtError = s),
            (this.onRecoverableError = o),
            (this.pooledCache = null),
            (this.pooledCacheLanes = 0),
            (this.formState = a),
            (this.incompleteTransitions = new Map());
        }
        function cK(e, t, n, r, i, s) {
          var o;
          (i = (o = i) ? (o = n8) : n8),
            null === r.context ? (r.context = i) : (r.pendingContext = i),
            ((r = ik(t)).payload = { element: n }),
            null !== (s = void 0 === s ? null : s) && (r.callback = s),
            null !== (n = iw(e, r, t)) && (a8(n, e, t), i_(n, e, t));
        }
        function cX(e, t) {
          if (null !== (e = e.memoizedState) && null !== e.dehydrated) {
            var n = e.retryLane;
            e.retryLane = 0 !== n && n < t ? n : t;
          }
        }
        function cJ(e, t) {
          cX(e, t), (e = e.alternate) && cX(e, t);
        }
        function c0(e) {
          if (13 === e.tag) {
            var t = n5(e, 0x4000000);
            null !== t && a8(t, e, 0x4000000), cJ(e, 0x4000000);
          }
        }
        var c1 = !0;
        function c2(e, t, n, r) {
          var i = D.T;
          D.T = null;
          var s = P.p;
          try {
            (P.p = 2), c3(e, t, n, r);
          } finally {
            (P.p = s), (D.T = i);
          }
        }
        function c5(e, t, n, r) {
          var i = D.T;
          D.T = null;
          var s = P.p;
          try {
            (P.p = 8), c3(e, t, n, r);
          } finally {
            (P.p = s), (D.T = i);
          }
        }
        function c3(e, t, n, r) {
          if (c1) {
            var i = c4(r);
            if (null === i) lJ(e, t, r, c8, n), ua(e, r);
            else if (
              (function (e, t, n, r, i) {
                switch (t) {
                  case "focusin":
                    return (ue = ul(ue, e, t, n, r, i)), !0;
                  case "dragenter":
                    return (ut = ul(ut, e, t, n, r, i)), !0;
                  case "mouseover":
                    return (un = ul(un, e, t, n, r, i)), !0;
                  case "pointerover":
                    var s = i.pointerId;
                    return ur.set(s, ul(ur.get(s) || null, e, t, n, r, i)), !0;
                  case "gotpointercapture":
                    return (
                      (s = i.pointerId),
                      ui.set(s, ul(ui.get(s) || null, e, t, n, r, i)),
                      !0
                    );
                }
                return !1;
              })(i, e, t, n, r)
            )
              r.stopPropagation();
            else if ((ua(e, r), 4 & t && -1 < uo.indexOf(e))) {
              for (; null !== i; ) {
                var s = eB(i);
                if (null !== s)
                  switch (s.tag) {
                    case 3:
                      if (
                        (s = s.stateNode).current.memoizedState.isDehydrated
                      ) {
                        var o = eg(s.pendingLanes);
                        if (0 !== o) {
                          var a = s;
                          for (
                            a.pendingLanes |= 2, a.entangledLanes |= 2;
                            o;

                          ) {
                            var l = 1 << (31 - ed(o));
                            (a.entanglements[1] |= l), (o &= ~l);
                          }
                          lP(s), 0 == (6 & aS) && ((aV = J() + 500), lR(0, !1));
                        }
                      }
                      break;
                    case 13:
                      null !== (a = n5(s, 2)) && a8(a, s, 2), le(), cJ(s, 2);
                  }
                if ((null === (s = c4(r)) && lJ(e, t, r, c8, n), s === i))
                  break;
                i = s;
              }
              null !== i && r.stopPropagation();
            } else lJ(e, t, r, null, n);
          }
        }
        function c4(e) {
          return c6((e = tm(e)));
        }
        var c8 = null;
        function c6(e) {
          if (((c8 = null), null !== (e = eF(e)))) {
            var t = l(e);
            if (null === t) e = null;
            else {
              var n = t.tag;
              if (13 === n) {
                if (null !== (e = c(t))) return e;
                e = null;
              } else if (3 === n) {
                if (t.stateNode.current.memoizedState.isDehydrated)
                  return 3 === t.tag ? t.stateNode.containerInfo : null;
                e = null;
              } else t !== e && (e = null);
            }
          }
          return (c8 = e), null;
        }
        function c9(e) {
          switch (e) {
            case "beforetoggle":
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "toggle":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return 2;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return 8;
            case "message":
              switch (ee()) {
                case et:
                  return 2;
                case en:
                  return 8;
                case er:
                case ei:
                  return 32;
                case es:
                  return 0x10000000;
                default:
                  return 32;
              }
            default:
              return 32;
          }
        }
        var c7 = !1,
          ue = null,
          ut = null,
          un = null,
          ur = new Map(),
          ui = new Map(),
          us = [],
          uo =
            "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
              " ",
            );
        function ua(e, t) {
          switch (e) {
            case "focusin":
            case "focusout":
              ue = null;
              break;
            case "dragenter":
            case "dragleave":
              ut = null;
              break;
            case "mouseover":
            case "mouseout":
              un = null;
              break;
            case "pointerover":
            case "pointerout":
              ur.delete(t.pointerId);
              break;
            case "gotpointercapture":
            case "lostpointercapture":
              ui.delete(t.pointerId);
          }
        }
        function ul(e, t, n, r, i, s) {
          return (
            null === e || e.nativeEvent !== s
              ? ((e = {
                  blockedOn: t,
                  domEventName: n,
                  eventSystemFlags: r,
                  nativeEvent: s,
                  targetContainers: [i],
                }),
                null !== t && null !== (t = eB(t)) && c0(t))
              : ((e.eventSystemFlags |= r),
                (t = e.targetContainers),
                null !== i && -1 === t.indexOf(i) && t.push(i)),
            e
          );
        }
        function uc(e) {
          var t = eF(e.target);
          if (null !== t) {
            var n = l(t);
            if (null !== n) {
              if (13 === (t = n.tag)) {
                if (null !== (t = c(n))) {
                  (e.blockedOn = t),
                    (function (e, t) {
                      var n = P.p;
                      try {
                        return (P.p = e), t();
                      } finally {
                        P.p = n;
                      }
                    })(e.priority, function () {
                      if (13 === n.tag) {
                        var e = a3(),
                          t = n5(n, (e = eT(e)));
                        null !== t && a8(t, n, e), cJ(n, e);
                      }
                    });
                  return;
                }
              } else if (
                3 === t &&
                n.stateNode.current.memoizedState.isDehydrated
              ) {
                e.blockedOn = 3 === n.tag ? n.stateNode.containerInfo : null;
                return;
              }
            }
          }
          e.blockedOn = null;
        }
        function uu(e) {
          if (null !== e.blockedOn) return !1;
          for (var t = e.targetContainers; 0 < t.length; ) {
            var n = c4(e.nativeEvent);
            if (null !== n)
              return null !== (t = eB(n)) && c0(t), (e.blockedOn = n), !1;
            var r = new (n = e.nativeEvent).constructor(n.type, n);
            (tf = r), n.target.dispatchEvent(r), (tf = null), t.shift();
          }
          return !0;
        }
        function ud(e, t, n) {
          uu(e) && n.delete(t);
        }
        function uh() {
          (c7 = !1),
            null !== ue && uu(ue) && (ue = null),
            null !== ut && uu(ut) && (ut = null),
            null !== un && uu(un) && (un = null),
            ur.forEach(ud),
            ui.forEach(ud);
        }
        function up(e, t) {
          e.blockedOn === t &&
            ((e.blockedOn = null),
            c7 ||
              ((c7 = !0),
              i.unstable_scheduleCallback(i.unstable_NormalPriority, uh)));
        }
        var uf = null;
        function um(e) {
          uf !== e &&
            ((uf = e),
            i.unstable_scheduleCallback(i.unstable_NormalPriority, function () {
              uf === e && (uf = null);
              for (var t = 0; t < e.length; t += 3) {
                var n = e[t],
                  r = e[t + 1],
                  i = e[t + 2];
                if ("function" != typeof r)
                  if (null === c6(r || n)) continue;
                  else break;
                var s = eB(n);
                null !== s &&
                  (e.splice(t, 3),
                  (t -= 3),
                  sV(
                    s,
                    { pending: !0, data: i, method: n.method, action: r },
                    r,
                    i,
                  ));
              }
            }));
        }
        function ug(e) {
          function t(t) {
            return up(t, e);
          }
          null !== ue && up(ue, e),
            null !== ut && up(ut, e),
            null !== un && up(un, e),
            ur.forEach(t),
            ui.forEach(t);
          for (var n = 0; n < us.length; n++) {
            var r = us[n];
            r.blockedOn === e && (r.blockedOn = null);
          }
          for (; 0 < us.length && null === (n = us[0]).blockedOn; )
            uc(n), null === n.blockedOn && us.shift();
          if (null != (n = (e.ownerDocument || e).$$reactFormReplay))
            for (r = 0; r < n.length; r += 3) {
              var i = n[r],
                s = n[r + 1],
                o = i[eN] || null;
              if ("function" == typeof s) o || um(n);
              else if (o) {
                var a = null;
                if (s && s.hasAttribute("formAction")) {
                  if (((i = s), (o = s[eN] || null))) a = o.formAction;
                  else if (null !== c6(i)) continue;
                } else a = o.action;
                "function" == typeof a
                  ? (n[r + 1] = a)
                  : (n.splice(r, 3), (r -= 3)),
                  um(n);
              }
            }
        }
        function uy(e) {
          this._internalRoot = e;
        }
        function uv(e) {
          this._internalRoot = e;
        }
        (uv.prototype.render = uy.prototype.render =
          function (e) {
            var t = this._internalRoot;
            if (null === t) throw Error(a(409));
            cK(t.current, a3(), e, t, null, null);
          }),
          (uv.prototype.unmount = uy.prototype.unmount =
            function () {
              var e = this._internalRoot;
              if (null !== e) {
                this._internalRoot = null;
                var t = e.containerInfo;
                cK(e.current, 2, null, e, null, null), le(), (t[eI] = null);
              }
            }),
          (uv.prototype.unstable_scheduleHydration = function (e) {
            if (e) {
              var t = eE();
              e = { blockedOn: null, target: e, priority: t };
              for (
                var n = 0;
                n < us.length && 0 !== t && t < us[n].priority;
                n++
              );
              us.splice(n, 0, e), 0 === n && uc(e);
            }
          });
        var ub = s.version;
        if ("19.2.0-canary-63779030-20250328" !== ub)
          throw Error(a(527, ub, "19.2.0-canary-63779030-20250328"));
        if (
          ((P.findDOMNode = function (e) {
            var t = e._reactInternals;
            if (void 0 === t) {
              if ("function" == typeof e.render) throw Error(a(188));
              throw Error(a(268, (e = Object.keys(e).join(","))));
            }
            return (e =
              null ===
              (e =
                null !==
                (e = (function (e) {
                  var t = e.alternate;
                  if (!t) {
                    if (null === (t = l(e))) throw Error(a(188));
                    return t !== e ? null : e;
                  }
                  for (var n = e, r = t; ; ) {
                    var i = n.return;
                    if (null === i) break;
                    var s = i.alternate;
                    if (null === s) {
                      if (null !== (r = i.return)) {
                        n = r;
                        continue;
                      }
                      break;
                    }
                    if (i.child === s.child) {
                      for (s = i.child; s; ) {
                        if (s === n) return u(i), e;
                        if (s === r) return u(i), t;
                        s = s.sibling;
                      }
                      throw Error(a(188));
                    }
                    if (n.return !== r.return) (n = i), (r = s);
                    else {
                      for (var o = !1, c = i.child; c; ) {
                        if (c === n) {
                          (o = !0), (n = i), (r = s);
                          break;
                        }
                        if (c === r) {
                          (o = !0), (r = i), (n = s);
                          break;
                        }
                        c = c.sibling;
                      }
                      if (!o) {
                        for (c = s.child; c; ) {
                          if (c === n) {
                            (o = !0), (n = s), (r = i);
                            break;
                          }
                          if (c === r) {
                            (o = !0), (r = s), (n = i);
                            break;
                          }
                          c = c.sibling;
                        }
                        if (!o) throw Error(a(189));
                      }
                    }
                    if (n.alternate !== r) throw Error(a(190));
                  }
                  if (3 !== n.tag) throw Error(a(188));
                  return n.stateNode.current === n ? e : t;
                })(t))
                  ? (function e(t) {
                      var n = t.tag;
                      if (5 === n || 26 === n || 27 === n || 6 === n) return t;
                      for (t = t.child; null !== t; ) {
                        if (null !== (n = e(t))) return n;
                        t = t.sibling;
                      }
                      return null;
                    })(e)
                  : null)
                ? null
                : e.stateNode);
          }),
          "undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
        ) {
          var ux = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (!ux.isDisabled && ux.supportsFiber)
            try {
              (el = ux.inject({
                bundleType: 0,
                version: "19.2.0-canary-63779030-20250328",
                rendererPackageName: "react-dom",
                currentDispatcherRef: D,
                reconcilerVersion: "19.2.0-canary-63779030-20250328",
              })),
                (ec = ux);
            } catch (e) {}
        }
        t.createRoot = function (e, t) {
          if (
            !(n = e) ||
            (1 !== n.nodeType && 9 !== n.nodeType && 11 !== n.nodeType)
          )
            throw Error(a(299));
          var n,
            r,
            i,
            s,
            o,
            l,
            c,
            u,
            d,
            h = !1,
            p = "",
            f = oa,
            m = ol,
            g = oc,
            y = null;
          return (
            null != t &&
              (!0 === t.unstable_strictMode && (h = !0),
              void 0 !== t.identifierPrefix && (p = t.identifierPrefix),
              void 0 !== t.onUncaughtError && (f = t.onUncaughtError),
              void 0 !== t.onCaughtError && (m = t.onCaughtError),
              void 0 !== t.onRecoverableError && (g = t.onRecoverableError),
              void 0 !== t.unstable_transitionCallbacks &&
                (y = t.unstable_transitionCallbacks)),
            (r = e),
            (i = 1),
            (s = !1),
            (o = null),
            (l = 0),
            (c = h),
            (u = 0),
            (d = null),
            (r = new cY(r, i, s, p, f, m, g, null)),
            (i = 1),
            !0 === c && (i |= 24),
            (c = n9(3, null, null, i)),
            (r.current = c),
            (c.stateNode = r),
            (i = rG()),
            i.refCount++,
            (r.pooledCache = i),
            i.refCount++,
            (c.memoizedState = { element: null, isDehydrated: s, cache: i }),
            ib(c),
            (t = r),
            (e[eI] = t.current),
            lK(e),
            new uy(t)
          );
        };
      },
      72859: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { HV: () => d, I8: () => h, Yc: () => f, er: () => p });
            var i = n(61120);
            n(94046);
            var s = n(85488),
              o = n(47391),
              a = n(97579),
              l = n(33007),
              c = n(31706),
              u = e([s, a, l]);
            async function d(e) {
              (await (0, o.UL)()).set("chat-model", e);
            }
            async function h({ message: e }) {
              let { text: t } = await (0, s.generateText)({
                model: a.m.languageModel("title-model"),
                system: `

    - you will generate a short title based on the first message a user begins a conversation with
    - ensure it is not more than 80 characters long
    - the title should be a summary of the user's message
    - do not use quotes or colons`,
                prompt: JSON.stringify(e),
              });
              return t;
            }
            async function p({ id: e }) {
              let [t] = await (0, l.kA)({ id: e });
              t
                ? await (0, l.wA)({ chatId: t.chatId, timestamp: t.createdAt })
                : console.error(`Message with id ${e} not found for deletion.`);
            }
            async function f({ chatId: e, visibility: t }) {
              await (0, l.$)({ chatId: e, visibility: t });
            }
            ([s, a, l] = u.then ? (await u)() : u),
              (0, c.D)([d, h, p, f]),
              (0, i.A)(d, "400124e62bdb6c0bda9491300242483c2e3f7585dc", null),
              (0, i.A)(h, "40c8e4d0a0b142228792a85e0695f7964561b4b27d", null),
              (0, i.A)(p, "40126ff470a43535ad3f3b5edbf6a896ae355d2d69", null),
              (0, i.A)(f, "40735dc6111b525c561108795f1f8685d756e21bff", null),
              r();
          } catch (e) {
            r(e);
          }
        });
      },
      73024: (e) => {
        "use strict";
        e.exports = require("node:fs");
      },
      73136: (e) => {
        "use strict";
        e.exports = require("node:url");
      },
      73566: (e) => {
        "use strict";
        e.exports = require("worker_threads");
      },
      73638: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, {
              $v: () => v,
              EO: () => f,
              Lt: () => u,
              Rx: () => b,
              Zr: () => x,
              ck: () => g,
              r7: () => y,
              tv: () => d,
              wd: () => m,
            });
            var i = n(61268),
              s = n(56414),
              o = n(84205),
              a = n(15942),
              l = n(28909),
              c = e([a, l]);
            [a, l] = c.then ? (await c)() : c;
            let u = s.bL,
              d = s.l9,
              h = s.ZL,
              p = o.forwardRef(({ className: e, ...t }, n) =>
                (0, i.jsx)(s.hJ, {
                  className: (0, a.cn)(
                    "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
                    e,
                  ),
                  ...t,
                  ref: n,
                }),
              );
            p.displayName = s.hJ.displayName;
            let f = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsxs)(h, {
                children: [
                  (0, i.jsx)(p, {}),
                  (0, i.jsx)(s.UC, {
                    ref: n,
                    className: (0, a.cn)(
                      "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
                      e,
                    ),
                    ...t,
                  }),
                ],
              }),
            );
            f.displayName = s.UC.displayName;
            let m = ({ className: e, ...t }) =>
              (0, i.jsx)("div", {
                className: (0, a.cn)(
                  "flex flex-col space-y-2 text-center sm:text-left",
                  e,
                ),
                ...t,
              });
            m.displayName = "AlertDialogHeader";
            let g = ({ className: e, ...t }) =>
              (0, i.jsx)("div", {
                className: (0, a.cn)(
                  "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
                  e,
                ),
                ...t,
              });
            g.displayName = "AlertDialogFooter";
            let y = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.hE, {
                ref: n,
                className: (0, a.cn)("text-lg font-semibold", e),
                ...t,
              }),
            );
            y.displayName = s.hE.displayName;
            let v = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.VY, {
                ref: n,
                className: (0, a.cn)("text-sm text-muted-foreground", e),
                ...t,
              }),
            );
            v.displayName = s.VY.displayName;
            let b = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.rc, {
                ref: n,
                className: (0, a.cn)((0, l.r)(), e),
                ...t,
              }),
            );
            b.displayName = s.rc.displayName;
            let x = o.forwardRef(({ className: e, ...t }, n) =>
              (0, i.jsx)(s.ZD, {
                ref: n,
                className: (0, a.cn)(
                  (0, l.r)({ variant: "outline" }),
                  "mt-2 sm:mt-0",
                  e,
                ),
                ...t,
              }),
            );
            (x.displayName = s.ZD.displayName), r();
          } catch (e) {
            r(e);
          }
        });
      },
      73912: (e, t, n) => {
        "use strict";
        let r, i;
        n.d(t, { B: () => uV });
        var s,
          o,
          a,
          l,
          c = n(61268);
        let u = 0;
        class d {
          constructor(e, t) {
            (this.from = e), (this.to = t);
          }
        }
        class h {
          constructor(e = {}) {
            (this.id = u++),
              (this.perNode = !!e.perNode),
              (this.deserialize =
                e.deserialize ||
                (() => {
                  throw Error(
                    "This node type doesn't define a deserialize function",
                  );
                }));
          }
          add(e) {
            if (this.perNode)
              throw RangeError("Can't add per-node props to node types");
            return (
              "function" != typeof e && (e = m.match(e)),
              (t) => {
                let n = e(t);
                return void 0 === n ? null : [this, n];
              }
            );
          }
        }
        (h.closedBy = new h({ deserialize: (e) => e.split(" ") })),
          (h.openedBy = new h({ deserialize: (e) => e.split(" ") })),
          (h.group = new h({ deserialize: (e) => e.split(" ") })),
          (h.isolate = new h({
            deserialize: (e) => {
              if (e && "rtl" != e && "ltr" != e && "auto" != e)
                throw RangeError("Invalid value for isolate: " + e);
              return e || "auto";
            },
          })),
          (h.contextHash = new h({ perNode: !0 })),
          (h.lookAhead = new h({ perNode: !0 })),
          (h.mounted = new h({ perNode: !0 }));
        class p {
          constructor(e, t, n) {
            (this.tree = e), (this.overlay = t), (this.parser = n);
          }
          static get(e) {
            return e && e.props && e.props[h.mounted.id];
          }
        }
        let f = Object.create(null);
        class m {
          constructor(e, t, n, r = 0) {
            (this.name = e), (this.props = t), (this.id = n), (this.flags = r);
          }
          static define(e) {
            let t = e.props && e.props.length ? Object.create(null) : f,
              n =
                +!!e.top |
                (2 * !!e.skipped) |
                (4 * !!e.error) |
                (8 * (null == e.name)),
              r = new m(e.name || "", t, e.id, n);
            if (e.props) {
              for (let n of e.props)
                if ((Array.isArray(n) || (n = n(r)), n)) {
                  if (n[0].perNode)
                    throw RangeError(
                      "Can't store a per-node prop on a node type",
                    );
                  t[n[0].id] = n[1];
                }
            }
            return r;
          }
          prop(e) {
            return this.props[e.id];
          }
          get isTop() {
            return (1 & this.flags) > 0;
          }
          get isSkipped() {
            return (2 & this.flags) > 0;
          }
          get isError() {
            return (4 & this.flags) > 0;
          }
          get isAnonymous() {
            return (8 & this.flags) > 0;
          }
          is(e) {
            if ("string" == typeof e) {
              if (this.name == e) return !0;
              let t = this.prop(h.group);
              return !!t && t.indexOf(e) > -1;
            }
            return this.id == e;
          }
          static match(e) {
            let t = Object.create(null);
            for (let n in e) for (let r of n.split(" ")) t[r] = e[n];
            return (e) => {
              for (
                let n = e.prop(h.group), r = -1;
                r < (n ? n.length : 0);
                r++
              ) {
                let i = t[r < 0 ? e.name : n[r]];
                if (i) return i;
              }
            };
          }
        }
        m.none = new m("", Object.create(null), 0, 8);
        class g {
          constructor(e) {
            this.types = e;
            for (let t = 0; t < e.length; t++)
              if (e[t].id != t)
                throw RangeError(
                  "Node type ids should correspond to array positions when creating a node set",
                );
          }
          extend(...e) {
            let t = [];
            for (let n of this.types) {
              let r = null;
              for (let t of e) {
                let e = t(n);
                e &&
                  (r || (r = Object.assign({}, n.props)), (r[e[0].id] = e[1]));
              }
              t.push(r ? new m(n.name, r, n.id, n.flags) : n);
            }
            return new g(t);
          }
        }
        let y = new WeakMap(),
          v = new WeakMap();
        !(function (e) {
          (e[(e.ExcludeBuffers = 1)] = "ExcludeBuffers"),
            (e[(e.IncludeAnonymous = 2)] = "IncludeAnonymous"),
            (e[(e.IgnoreMounts = 4)] = "IgnoreMounts"),
            (e[(e.IgnoreOverlays = 8)] = "IgnoreOverlays");
        })(a || (a = {}));
        class b {
          constructor(e, t, n, r, i) {
            if (
              ((this.type = e),
              (this.children = t),
              (this.positions = n),
              (this.length = r),
              (this.props = null),
              i && i.length)
            )
              for (let [e, t] of ((this.props = Object.create(null)), i))
                this.props["number" == typeof e ? e : e.id] = t;
          }
          toString() {
            let e = p.get(this);
            if (e && !e.overlay) return e.tree.toString();
            let t = "";
            for (let e of this.children) {
              let n = e.toString();
              n && (t && (t += ","), (t += n));
            }
            return this.type.name
              ? (/\W/.test(this.type.name) && !this.type.isError
                  ? JSON.stringify(this.type.name)
                  : this.type.name) + (t.length ? "(" + t + ")" : "")
              : t;
          }
          cursor(e = 0) {
            return new D(this.topNode, e);
          }
          cursorAt(e, t = 0, n = 0) {
            let r = new D(y.get(this) || this.topNode);
            return r.moveTo(e, t), y.set(this, r._tree), r;
          }
          get topNode() {
            return new T(this, 0, 0, null);
          }
          resolve(e, t = 0) {
            let n = _(y.get(this) || this.topNode, e, t, !1);
            return y.set(this, n), n;
          }
          resolveInner(e, t = 0) {
            let n = _(v.get(this) || this.topNode, e, t, !0);
            return v.set(this, n), n;
          }
          resolveStack(e, t = 0) {
            return (function (e, t, n) {
              let r = e.resolveInner(t, n),
                i = null;
              for (
                let e = r instanceof T ? r : r.context.parent;
                e;
                e = e.parent
              )
                if (e.index < 0) {
                  let s = e.parent;
                  (i || (i = [r])).push(s.resolve(t, n)), (e = s);
                } else {
                  let s = p.get(e.tree);
                  if (
                    s &&
                    s.overlay &&
                    s.overlay[0].from <= t &&
                    s.overlay[s.overlay.length - 1].to >= t
                  ) {
                    let o = new T(s.tree, s.overlay[0].from + e.from, -1, e);
                    (i || (i = [r])).push(_(o, t, n, !1));
                  }
                }
              return i ? N(i) : r;
            })(this, e, t);
          }
          iterate(e) {
            let { enter: t, leave: n, from: r = 0, to: i = this.length } = e,
              s = e.mode || 0,
              o = (s & a.IncludeAnonymous) > 0;
            for (let e = this.cursor(s | a.IncludeAnonymous); ; ) {
              let s = !1;
              if (
                e.from <= i &&
                e.to >= r &&
                ((!o && e.type.isAnonymous) || !1 !== t(e))
              ) {
                if (e.firstChild()) continue;
                s = !0;
              }
              for (
                ;
                s && n && (o || !e.type.isAnonymous) && n(e), !e.nextSibling();

              ) {
                if (!e.parent()) return;
                s = !0;
              }
            }
          }
          prop(e) {
            return e.perNode
              ? this.props
                ? this.props[e.id]
                : void 0
              : this.type.prop(e);
          }
          get propValues() {
            let e = [];
            if (this.props)
              for (let t in this.props) e.push([+t, this.props[t]]);
            return e;
          }
          balance(e = {}) {
            return this.children.length <= 8
              ? this
              : L(
                  m.none,
                  this.children,
                  this.positions,
                  0,
                  this.children.length,
                  0,
                  this.length,
                  (e, t, n) => new b(this.type, e, t, n, this.propValues),
                  e.makeTree || ((e, t, n) => new b(m.none, e, t, n)),
                );
          }
          static build(e) {
            return (function (e) {
              var t;
              let {
                  buffer: n,
                  nodeSet: r,
                  maxBufferLength: i = 1024,
                  reused: s = [],
                  minRepeatType: o = r.types.length,
                } = e,
                a = Array.isArray(n) ? new x(n, n.length) : n,
                l = r.types,
                c = 0,
                u = 0;
              function d(e, t, n, i, s, o, a, l, c) {
                let u = [],
                  d = [];
                for (; e.length > i; ) u.push(e.pop()), d.push(t.pop() + n - s);
                e.push(p(r.types[a], u, d, o - s, l - o, c)), t.push(s - n);
              }
              function p(e, t, n, r, i, s, o) {
                if (s) {
                  let e = [h.contextHash, s];
                  o = o ? [e].concat(o) : [e];
                }
                if (i > 25) {
                  let e = [h.lookAhead, i];
                  o = o ? [e].concat(o) : [e];
                }
                return new b(e, t, n, r, o);
              }
              let f = [],
                m = [];
              for (; a.pos > 0; )
                !(function e(t, n, f, m, g, y) {
                  let { id: v, start: x, end: w, size: _ } = a,
                    O = u,
                    T = c;
                  for (; _ < 0; ) {
                    if ((a.next(), -1 == _)) {
                      let e = s[v];
                      f.push(e), m.push(x - t);
                      return;
                    }
                    if (-3 == _) {
                      c = v;
                      return;
                    }
                    if (-4 == _) {
                      u = v;
                      return;
                    } else throw RangeError(`Unrecognized record size: ${_}`);
                  }
                  let S = l[v],
                    E,
                    C,
                    A = x - t;
                  if (
                    w - x <= i &&
                    (C = (function (e, t) {
                      let n = a.fork(),
                        r = 0,
                        s = 0,
                        l = 0,
                        c = n.end - i,
                        u = { size: 0, start: 0, skip: 0 };
                      t: for (let i = n.pos - e; n.pos > i; ) {
                        let e = n.size;
                        if (n.id == t && e >= 0) {
                          (u.size = r),
                            (u.start = s),
                            (u.skip = l),
                            (l += 4),
                            (r += 4),
                            n.next();
                          continue;
                        }
                        let a = n.pos - e;
                        if (e < 0 || a < i || n.start < c) break;
                        let d = 4 * (n.id >= o),
                          h = n.start;
                        for (n.next(); n.pos > a; ) {
                          if (n.size < 0)
                            if (-3 == n.size) d += 4;
                            else break t;
                          else n.id >= o && (d += 4);
                          n.next();
                        }
                        (s = h), (r += e), (l += d);
                      }
                      return (
                        (t < 0 || r == e) &&
                          ((u.size = r), (u.start = s), (u.skip = l)),
                        u.size > 4 ? u : void 0
                      );
                    })(a.pos - n, g))
                  ) {
                    let e = new Uint16Array(C.size - C.skip),
                      n = a.pos - C.size,
                      i = e.length;
                    for (; a.pos > n; )
                      i = (function e(t, n, r) {
                        let { id: i, start: s, end: l, size: d } = a;
                        if ((a.next(), d >= 0 && i < o)) {
                          let o = r;
                          if (d > 4) {
                            let i = a.pos - (d - 4);
                            for (; a.pos > i; ) r = e(t, n, r);
                          }
                          (n[--r] = o),
                            (n[--r] = l - t),
                            (n[--r] = s - t),
                            (n[--r] = i);
                        } else -3 == d ? (c = i) : -4 == d && (u = i);
                        return r;
                      })(C.start, e, i);
                    (E = new k(e, w - C.start, r)), (A = C.start - t);
                  } else {
                    let t = a.pos - _;
                    a.next();
                    let n = [],
                      s = [],
                      l = v >= o ? v : -1,
                      c = 0,
                      u = w;
                    for (; a.pos > t; )
                      l >= 0 && a.id == l && a.size >= 0
                        ? (a.end <= u - i &&
                            (d(n, s, x, c, a.end, u, l, O, T),
                            (c = n.length),
                            (u = a.end)),
                          a.next())
                        : y > 2500
                          ? (function (e, t, n, s) {
                              let o = [],
                                l = 0,
                                c = -1;
                              for (; a.pos > t; ) {
                                let { id: e, start: t, end: n, size: r } = a;
                                if (r > 4) a.next();
                                else if (c > -1 && t < c) break;
                                else
                                  c < 0 && (c = n - i),
                                    o.push(e, t, n),
                                    l++,
                                    a.next();
                              }
                              if (l) {
                                let t = new Uint16Array(4 * l),
                                  i = o[o.length - 2];
                                for (
                                  let e = o.length - 3, n = 0;
                                  e >= 0;
                                  e -= 3
                                )
                                  (t[n++] = o[e]),
                                    (t[n++] = o[e + 1] - i),
                                    (t[n++] = o[e + 2] - i),
                                    (t[n++] = n);
                                n.push(new k(t, o[2] - i, r)), s.push(i - e);
                              }
                            })(x, t, n, s)
                          : e(x, t, n, s, l, y + 1);
                    if (
                      (l >= 0 &&
                        c > 0 &&
                        c < n.length &&
                        d(n, s, x, c, x, u, l, O, T),
                      n.reverse(),
                      s.reverse(),
                      l > -1 && c > 0)
                    ) {
                      let e = (function (e, t) {
                        return (n, r, i) => {
                          let s = 0,
                            o = n.length - 1,
                            a,
                            l;
                          if (o >= 0 && (a = n[o]) instanceof b) {
                            if (!o && a.type == e && a.length == i) return a;
                            (l = a.prop(h.lookAhead)) &&
                              (s = r[o] + a.length + l);
                          }
                          return p(e, n, r, i, s, t);
                        };
                      })(S, T);
                      E = L(S, n, s, 0, n.length, 0, w - x, e, e);
                    } else E = p(S, n, s, w - x, O - w, T);
                  }
                  f.push(E), m.push(A);
                })(e.start || 0, e.bufferStart || 0, f, m, -1, 0);
              let g =
                null != (t = e.length) ? t : f.length ? m[0] + f[0].length : 0;
              return new b(l[e.topID], f.reverse(), m.reverse(), g);
            })(e);
          }
        }
        b.empty = new b(m.none, [], [], 0);
        class x {
          constructor(e, t) {
            (this.buffer = e), (this.index = t);
          }
          get id() {
            return this.buffer[this.index - 4];
          }
          get start() {
            return this.buffer[this.index - 3];
          }
          get end() {
            return this.buffer[this.index - 2];
          }
          get size() {
            return this.buffer[this.index - 1];
          }
          get pos() {
            return this.index;
          }
          next() {
            this.index -= 4;
          }
          fork() {
            return new x(this.buffer, this.index);
          }
        }
        class k {
          constructor(e, t, n) {
            (this.buffer = e), (this.length = t), (this.set = n);
          }
          get type() {
            return m.none;
          }
          toString() {
            let e = [];
            for (let t = 0; t < this.buffer.length; )
              e.push(this.childString(t)), (t = this.buffer[t + 3]);
            return e.join(",");
          }
          childString(e) {
            let t = this.buffer[e],
              n = this.buffer[e + 3],
              r = this.set.types[t],
              i = r.name;
            if (
              (/\W/.test(i) && !r.isError && (i = JSON.stringify(i)),
              n == (e += 4))
            )
              return i;
            let s = [];
            for (; e < n; )
              s.push(this.childString(e)), (e = this.buffer[e + 3]);
            return i + "(" + s.join(",") + ")";
          }
          findChild(e, t, n, r, i) {
            let { buffer: s } = this,
              o = -1;
            for (
              let a = e;
              a != t && (!w(i, r, s[a + 1], s[a + 2]) || ((o = a), !(n > 0)));
              a = s[a + 3]
            );
            return o;
          }
          slice(e, t, n) {
            let r = this.buffer,
              i = new Uint16Array(t - e),
              s = 0;
            for (let o = e, a = 0; o < t; ) {
              (i[a++] = r[o++]), (i[a++] = r[o++] - n);
              let t = (i[a++] = r[o++] - n);
              (i[a++] = r[o++] - e), (s = Math.max(s, t));
            }
            return new k(i, s, this.set);
          }
        }
        function w(e, t, n, r) {
          switch (e) {
            case -2:
              return n < t;
            case -1:
              return r >= t && n < t;
            case 0:
              return n < t && r > t;
            case 1:
              return n <= t && r > t;
            case 2:
              return r > t;
            case 4:
              return !0;
          }
        }
        function _(e, t, n, r) {
          for (
            var i;
            e.from == e.to ||
            (n < 1 ? e.from >= t : e.from > t) ||
            (n > -1 ? e.to <= t : e.to < t);

          ) {
            let t = !r && e instanceof T && e.index < 0 ? null : e.parent;
            if (!t) return e;
            e = t;
          }
          let s = r ? 0 : a.IgnoreOverlays;
          if (r)
            for (let r = e, o = r.parent; o; o = (r = o).parent)
              r instanceof T &&
                r.index < 0 &&
                (null == (i = o.enter(t, n, s)) ? void 0 : i.from) != r.from &&
                (e = o);
          for (;;) {
            let r = e.enter(t, n, s);
            if (!r) return e;
            e = r;
          }
        }
        class O {
          cursor(e = 0) {
            return new D(this, e);
          }
          getChild(e, t = null, n = null) {
            let r = S(this, e, t, n);
            return r.length ? r[0] : null;
          }
          getChildren(e, t = null, n = null) {
            return S(this, e, t, n);
          }
          resolve(e, t = 0) {
            return _(this, e, t, !1);
          }
          resolveInner(e, t = 0) {
            return _(this, e, t, !0);
          }
          matchContext(e) {
            return E(this.parent, e);
          }
          enterUnfinishedNodesBefore(e) {
            let t = this.childBefore(e),
              n = this;
            for (; t; ) {
              let e = t.lastChild;
              if (!e || e.to != t.to) break;
              e.type.isError && e.from == e.to
                ? ((n = t), (t = e.prevSibling))
                : (t = e);
            }
            return n;
          }
          get node() {
            return this;
          }
          get next() {
            return this.parent;
          }
        }
        class T extends O {
          constructor(e, t, n, r) {
            super(),
              (this._tree = e),
              (this.from = t),
              (this.index = n),
              (this._parent = r);
          }
          get type() {
            return this._tree.type;
          }
          get name() {
            return this._tree.type.name;
          }
          get to() {
            return this.from + this._tree.length;
          }
          nextChild(e, t, n, r, i = 0) {
            for (let s = this; ; ) {
              for (
                let { children: o, positions: l } = s._tree,
                  c = t > 0 ? o.length : -1;
                e != c;
                e += t
              ) {
                let c = o[e],
                  u = l[e] + s.from;
                if (w(r, n, u, u + c.length)) {
                  if (c instanceof k) {
                    if (i & a.ExcludeBuffers) continue;
                    let o = c.findChild(0, c.buffer.length, t, n - u, r);
                    if (o > -1) return new A(new C(s, c, e, u), null, o);
                  } else if (
                    i & a.IncludeAnonymous ||
                    !c.type.isAnonymous ||
                    P(c)
                  ) {
                    let o;
                    if (!(i & a.IgnoreMounts) && (o = p.get(c)) && !o.overlay)
                      return new T(o.tree, u, e, s);
                    let l = new T(c, u, e, s);
                    return i & a.IncludeAnonymous || !l.type.isAnonymous
                      ? l
                      : l.nextChild(t < 0 ? c.children.length - 1 : 0, t, n, r);
                  }
                }
              }
              if (
                i & a.IncludeAnonymous ||
                !s.type.isAnonymous ||
                ((e =
                  s.index >= 0
                    ? s.index + t
                    : t < 0
                      ? -1
                      : s._parent._tree.children.length),
                !(s = s._parent))
              )
                return null;
            }
          }
          get firstChild() {
            return this.nextChild(0, 1, 0, 4);
          }
          get lastChild() {
            return this.nextChild(this._tree.children.length - 1, -1, 0, 4);
          }
          childAfter(e) {
            return this.nextChild(0, 1, e, 2);
          }
          childBefore(e) {
            return this.nextChild(this._tree.children.length - 1, -1, e, -2);
          }
          enter(e, t, n = 0) {
            let r;
            if (
              !(n & a.IgnoreOverlays) &&
              (r = p.get(this._tree)) &&
              r.overlay
            ) {
              let n = e - this.from;
              for (let { from: e, to: i } of r.overlay)
                if ((t > 0 ? e <= n : e < n) && (t < 0 ? i >= n : i > n))
                  return new T(r.tree, r.overlay[0].from + this.from, -1, this);
            }
            return this.nextChild(0, 1, e, t, n);
          }
          nextSignificantParent() {
            let e = this;
            for (; e.type.isAnonymous && e._parent; ) e = e._parent;
            return e;
          }
          get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
          }
          get nextSibling() {
            return this._parent && this.index >= 0
              ? this._parent.nextChild(this.index + 1, 1, 0, 4)
              : null;
          }
          get prevSibling() {
            return this._parent && this.index >= 0
              ? this._parent.nextChild(this.index - 1, -1, 0, 4)
              : null;
          }
          get tree() {
            return this._tree;
          }
          toTree() {
            return this._tree;
          }
          toString() {
            return this._tree.toString();
          }
        }
        function S(e, t, n, r) {
          let i = e.cursor(),
            s = [];
          if (!i.firstChild()) return s;
          if (null != n) {
            for (let e = !1; !e; )
              if (((e = i.type.is(n)), !i.nextSibling())) return s;
          }
          for (;;) {
            if (null != r && i.type.is(r)) return s;
            if ((i.type.is(t) && s.push(i.node), !i.nextSibling()))
              return null == r ? s : [];
          }
        }
        function E(e, t, n = t.length - 1) {
          for (let r = e; n >= 0; r = r.parent) {
            if (!r) return !1;
            if (!r.type.isAnonymous) {
              if (t[n] && t[n] != r.name) return !1;
              n--;
            }
          }
          return !0;
        }
        class C {
          constructor(e, t, n, r) {
            (this.parent = e),
              (this.buffer = t),
              (this.index = n),
              (this.start = r);
          }
        }
        class A extends O {
          get name() {
            return this.type.name;
          }
          get from() {
            return (
              this.context.start + this.context.buffer.buffer[this.index + 1]
            );
          }
          get to() {
            return (
              this.context.start + this.context.buffer.buffer[this.index + 2]
            );
          }
          constructor(e, t, n) {
            super(),
              (this.context = e),
              (this._parent = t),
              (this.index = n),
              (this.type = e.buffer.set.types[e.buffer.buffer[n]]);
          }
          child(e, t, n) {
            let { buffer: r } = this.context,
              i = r.findChild(
                this.index + 4,
                r.buffer[this.index + 3],
                e,
                t - this.context.start,
                n,
              );
            return i < 0 ? null : new A(this.context, this, i);
          }
          get firstChild() {
            return this.child(1, 0, 4);
          }
          get lastChild() {
            return this.child(-1, 0, 4);
          }
          childAfter(e) {
            return this.child(1, e, 2);
          }
          childBefore(e) {
            return this.child(-1, e, -2);
          }
          enter(e, t, n = 0) {
            if (n & a.ExcludeBuffers) return null;
            let { buffer: r } = this.context,
              i = r.findChild(
                this.index + 4,
                r.buffer[this.index + 3],
                t > 0 ? 1 : -1,
                e - this.context.start,
                t,
              );
            return i < 0 ? null : new A(this.context, this, i);
          }
          get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
          }
          externalSibling(e) {
            return this._parent
              ? null
              : this.context.parent.nextChild(this.context.index + e, e, 0, 4);
          }
          get nextSibling() {
            let { buffer: e } = this.context,
              t = e.buffer[this.index + 3];
            return t <
              (this._parent
                ? e.buffer[this._parent.index + 3]
                : e.buffer.length)
              ? new A(this.context, this._parent, t)
              : this.externalSibling(1);
          }
          get prevSibling() {
            let { buffer: e } = this.context,
              t = this._parent ? this._parent.index + 4 : 0;
            return this.index == t
              ? this.externalSibling(-1)
              : new A(
                  this.context,
                  this._parent,
                  e.findChild(t, this.index, -1, 0, 4),
                );
          }
          get tree() {
            return null;
          }
          toTree() {
            let e = [],
              t = [],
              { buffer: n } = this.context,
              r = this.index + 4,
              i = n.buffer[this.index + 3];
            if (i > r) {
              let s = n.buffer[this.index + 1];
              e.push(n.slice(r, i, s)), t.push(0);
            }
            return new b(this.type, e, t, this.to - this.from);
          }
          toString() {
            return this.context.buffer.childString(this.index);
          }
        }
        function N(e) {
          if (!e.length) return null;
          let t = 0,
            n = e[0];
          for (let r = 1; r < e.length; r++) {
            let i = e[r];
            (i.from > n.from || i.to < n.to) && ((n = i), (t = r));
          }
          let r = n instanceof T && n.index < 0 ? null : n.parent,
            i = e.slice();
          return r ? (i[t] = r) : i.splice(t, 1), new I(i, n);
        }
        class I {
          constructor(e, t) {
            (this.heads = e), (this.node = t);
          }
          get next() {
            return N(this.heads);
          }
        }
        class D {
          get name() {
            return this.type.name;
          }
          constructor(e, t = 0) {
            if (
              ((this.mode = t),
              (this.buffer = null),
              (this.stack = []),
              (this.index = 0),
              (this.bufferNode = null),
              e instanceof T)
            )
              this.yieldNode(e);
            else {
              (this._tree = e.context.parent), (this.buffer = e.context);
              for (let t = e._parent; t; t = t._parent)
                this.stack.unshift(t.index);
              (this.bufferNode = e), this.yieldBuf(e.index);
            }
          }
          yieldNode(e) {
            return (
              !!e &&
              ((this._tree = e),
              (this.type = e.type),
              (this.from = e.from),
              (this.to = e.to),
              !0)
            );
          }
          yieldBuf(e, t) {
            this.index = e;
            let { start: n, buffer: r } = this.buffer;
            return (
              (this.type = t || r.set.types[r.buffer[e]]),
              (this.from = n + r.buffer[e + 1]),
              (this.to = n + r.buffer[e + 2]),
              !0
            );
          }
          yield(e) {
            return (
              !!e &&
              (e instanceof T
                ? ((this.buffer = null), this.yieldNode(e))
                : ((this.buffer = e.context), this.yieldBuf(e.index, e.type)))
            );
          }
          toString() {
            return this.buffer
              ? this.buffer.buffer.childString(this.index)
              : this._tree.toString();
          }
          enterChild(e, t, n) {
            if (!this.buffer)
              return this.yield(
                this._tree.nextChild(
                  e < 0 ? this._tree._tree.children.length - 1 : 0,
                  e,
                  t,
                  n,
                  this.mode,
                ),
              );
            let { buffer: r } = this.buffer,
              i = r.findChild(
                this.index + 4,
                r.buffer[this.index + 3],
                e,
                t - this.buffer.start,
                n,
              );
            return !(i < 0) && (this.stack.push(this.index), this.yieldBuf(i));
          }
          firstChild() {
            return this.enterChild(1, 0, 4);
          }
          lastChild() {
            return this.enterChild(-1, 0, 4);
          }
          childAfter(e) {
            return this.enterChild(1, e, 2);
          }
          childBefore(e) {
            return this.enterChild(-1, e, -2);
          }
          enter(e, t, n = this.mode) {
            return this.buffer
              ? !(n & a.ExcludeBuffers) && this.enterChild(1, e, t)
              : this.yield(this._tree.enter(e, t, n));
          }
          parent() {
            if (!this.buffer)
              return this.yieldNode(
                this.mode & a.IncludeAnonymous
                  ? this._tree._parent
                  : this._tree.parent,
              );
            if (this.stack.length) return this.yieldBuf(this.stack.pop());
            let e =
              this.mode & a.IncludeAnonymous
                ? this.buffer.parent
                : this.buffer.parent.nextSignificantParent();
            return (this.buffer = null), this.yieldNode(e);
          }
          sibling(e) {
            if (!this.buffer)
              return (
                !!this._tree._parent &&
                this.yield(
                  this._tree.index < 0
                    ? null
                    : this._tree._parent.nextChild(
                        this._tree.index + e,
                        e,
                        0,
                        4,
                        this.mode,
                      ),
                )
              );
            let { buffer: t } = this.buffer,
              n = this.stack.length - 1;
            if (e < 0) {
              let e = n < 0 ? 0 : this.stack[n] + 4;
              if (this.index != e)
                return this.yieldBuf(t.findChild(e, this.index, -1, 0, 4));
            } else {
              let e = t.buffer[this.index + 3];
              if (e < (n < 0 ? t.buffer.length : t.buffer[this.stack[n] + 3]))
                return this.yieldBuf(e);
            }
            return (
              n < 0 &&
              this.yield(
                this.buffer.parent.nextChild(
                  this.buffer.index + e,
                  e,
                  0,
                  4,
                  this.mode,
                ),
              )
            );
          }
          nextSibling() {
            return this.sibling(1);
          }
          prevSibling() {
            return this.sibling(-1);
          }
          atLastNode(e) {
            let t,
              n,
              { buffer: r } = this;
            if (r) {
              if (e > 0) {
                if (this.index < r.buffer.buffer.length) return !1;
              } else
                for (let e = 0; e < this.index; e++)
                  if (r.buffer.buffer[e + 3] < this.index) return !1;
              ({ index: t, parent: n } = r);
            } else ({ index: t, _parent: n } = this._tree);
            for (; n; { index: t, _parent: n } = n)
              if (t > -1)
                for (
                  let r = t + e, i = e < 0 ? -1 : n._tree.children.length;
                  r != i;
                  r += e
                ) {
                  let e = n._tree.children[r];
                  if (
                    this.mode & a.IncludeAnonymous ||
                    e instanceof k ||
                    !e.type.isAnonymous ||
                    P(e)
                  )
                    return !1;
                }
            return !0;
          }
          move(e, t) {
            if (t && this.enterChild(e, 0, 4)) return !0;
            for (;;) {
              if (this.sibling(e)) return !0;
              if (this.atLastNode(e) || !this.parent()) return !1;
            }
          }
          next(e = !0) {
            return this.move(1, e);
          }
          prev(e = !0) {
            return this.move(-1, e);
          }
          moveTo(e, t = 0) {
            for (
              ;
              (this.from == this.to ||
                (t < 1 ? this.from >= e : this.from > e) ||
                (t > -1 ? this.to <= e : this.to < e)) &&
              this.parent();

            );
            for (; this.enterChild(1, e, t); );
            return this;
          }
          get node() {
            if (!this.buffer) return this._tree;
            let e = this.bufferNode,
              t = null,
              n = 0;
            if (e && e.context == this.buffer)
              t: for (let r = this.index, i = this.stack.length; i >= 0; ) {
                for (let s = e; s; s = s._parent)
                  if (s.index == r) {
                    if (r == this.index) return s;
                    (t = s), (n = i + 1);
                    break t;
                  }
                r = this.stack[--i];
              }
            for (let e = n; e < this.stack.length; e++)
              t = new A(this.buffer, t, this.stack[e]);
            return (this.bufferNode = new A(this.buffer, t, this.index));
          }
          get tree() {
            return this.buffer ? null : this._tree._tree;
          }
          iterate(e, t) {
            for (let n = 0; ; ) {
              let r = !1;
              if (this.type.isAnonymous || !1 !== e(this)) {
                if (this.firstChild()) {
                  n++;
                  continue;
                }
                this.type.isAnonymous || (r = !0);
              }
              for (;;) {
                if ((r && t && t(this), (r = this.type.isAnonymous), !n))
                  return;
                if (this.nextSibling()) break;
                this.parent(), n--, (r = !0);
              }
            }
          }
          matchContext(e) {
            if (!this.buffer) return E(this.node.parent, e);
            let { buffer: t } = this.buffer,
              { types: n } = t.set;
            for (let r = e.length - 1, i = this.stack.length - 1; r >= 0; i--) {
              if (i < 0) return E(this._tree, e, r);
              let s = n[t.buffer[this.stack[i]]];
              if (!s.isAnonymous) {
                if (e[r] && e[r] != s.name) return !1;
                r--;
              }
            }
            return !0;
          }
        }
        function P(e) {
          return e.children.some(
            (e) => e instanceof k || !e.type.isAnonymous || P(e),
          );
        }
        let R = new WeakMap();
        function M(e, t) {
          if (!e.isAnonymous || t instanceof k || t.type != e) return 1;
          let n = R.get(t);
          if (null == n) {
            for (let r of ((n = 1), t.children)) {
              if (r.type != e || !(r instanceof b)) {
                n = 1;
                break;
              }
              n += M(e, r);
            }
            R.set(t, n);
          }
          return n;
        }
        function L(e, t, n, r, i, s, o, a, l) {
          let c = 0;
          for (let n = r; n < i; n++) c += M(e, t[n]);
          let u = Math.ceil((1.5 * c) / 8),
            d = [],
            h = [];
          return (
            !(function t(n, r, i, o, a) {
              for (let c = i; c < o; ) {
                let i = c,
                  p = r[c],
                  f = M(e, n[c]);
                for (c++; c < o; c++) {
                  let t = M(e, n[c]);
                  if (f + t >= u) break;
                  f += t;
                }
                if (c == i + 1) {
                  if (f > u) {
                    let e = n[i];
                    t(e.children, e.positions, 0, e.children.length, r[i] + a);
                    continue;
                  }
                  d.push(n[i]);
                } else {
                  let t = r[c - 1] + n[c - 1].length - p;
                  d.push(L(e, n, r, i, c, p, t, null, l));
                }
                h.push(p + a - s);
              }
            })(t, n, r, i, 0),
            (a || l)(d, h, o)
          );
        }
        class j {
          constructor() {
            this.map = new WeakMap();
          }
          setBuffer(e, t, n) {
            let r = this.map.get(e);
            r || this.map.set(e, (r = new Map())), r.set(t, n);
          }
          getBuffer(e, t) {
            let n = this.map.get(e);
            return n && n.get(t);
          }
          set(e, t) {
            e instanceof A
              ? this.setBuffer(e.context.buffer, e.index, t)
              : e instanceof T && this.map.set(e.tree, t);
          }
          get(e) {
            return e instanceof A
              ? this.getBuffer(e.context.buffer, e.index)
              : e instanceof T
                ? this.map.get(e.tree)
                : void 0;
          }
          cursorSet(e, t) {
            e.buffer
              ? this.setBuffer(e.buffer.buffer, e.index, t)
              : this.map.set(e.tree, t);
          }
          cursorGet(e) {
            return e.buffer
              ? this.getBuffer(e.buffer.buffer, e.index)
              : this.map.get(e.tree);
          }
        }
        class F {
          constructor(e, t, n, r, i = !1, s = !1) {
            (this.from = e),
              (this.to = t),
              (this.tree = n),
              (this.offset = r),
              (this.open = +!!i | (2 * !!s));
          }
          get openStart() {
            return (1 & this.open) > 0;
          }
          get openEnd() {
            return (2 & this.open) > 0;
          }
          static addTree(e, t = [], n = !1) {
            let r = [new F(0, e.length, e, 0, !1, n)];
            for (let n of t) n.to > e.length && r.push(n);
            return r;
          }
          static applyChanges(e, t, n = 128) {
            if (!t.length) return e;
            let r = [],
              i = 1,
              s = e.length ? e[0] : null;
            for (let o = 0, a = 0, l = 0; ; o++) {
              let c = o < t.length ? t[o] : null,
                u = c ? c.fromA : 1e9;
              if (u - a >= n)
                for (; s && s.from < u; ) {
                  let t = s;
                  if (a >= t.from || u <= t.to || l) {
                    let e = Math.max(t.from, a) - l,
                      n = Math.min(t.to, u) - l;
                    t =
                      e >= n
                        ? null
                        : new F(e, n, t.tree, t.offset + l, o > 0, !!c);
                  }
                  if ((t && r.push(t), s.to > u)) break;
                  s = i < e.length ? e[i++] : null;
                }
              if (!c) break;
              (a = c.toA), (l = c.toA - c.toB);
            }
            return r;
          }
        }
        class B {
          startParse(e, t, n) {
            return (
              "string" == typeof e && (e = new z(e)),
              (n = n
                ? n.length
                  ? n.map((e) => new d(e.from, e.to))
                  : [new d(0, 0)]
                : [new d(0, e.length)]),
              this.createParse(e, t || [], n)
            );
          }
          parse(e, t, n) {
            let r = this.startParse(e, t, n);
            for (;;) {
              let e = r.advance();
              if (e) return e;
            }
          }
        }
        class z {
          constructor(e) {
            this.string = e;
          }
          get length() {
            return this.string.length;
          }
          chunk(e) {
            return this.string.slice(e);
          }
          get lineChunks() {
            return !1;
          }
          read(e, t) {
            return this.string.slice(e, t);
          }
        }
        class $ {
          constructor(e, t, n, r, i) {
            (this.parser = e),
              (this.parse = t),
              (this.overlay = n),
              (this.target = r),
              (this.from = i);
          }
        }
        function q(e) {
          if (!e.length || e.some((e) => e.from >= e.to))
            throw RangeError(
              "Invalid inner parse ranges given: " + JSON.stringify(e),
            );
        }
        class U {
          constructor(e, t, n, r, i, s, o) {
            (this.parser = e),
              (this.predicate = t),
              (this.mounts = n),
              (this.index = r),
              (this.start = i),
              (this.target = s),
              (this.prev = o),
              (this.depth = 0),
              (this.ranges = []);
          }
        }
        let H = new h({ perNode: !0 });
        function Q(e, t, n, r, i, s) {
          if (t < n) {
            let o = e.buffer[t + 1];
            r.push(e.slice(t, n, o)), i.push(o - s);
          }
        }
        class V {
          constructor(e, t) {
            (this.offset = t),
              (this.done = !1),
              (this.cursor = e.cursor(a.IncludeAnonymous | a.IgnoreMounts));
          }
          moveTo(e) {
            let { cursor: t } = this,
              n = e - this.offset;
            for (; !this.done && t.from < n; )
              (t.to >= e &&
                t.enter(n, 1, a.IgnoreOverlays | a.ExcludeBuffers)) ||
                t.next(!1) ||
                (this.done = !0);
          }
          hasNode(e) {
            if (
              (this.moveTo(e.from),
              !this.done &&
                this.cursor.from + this.offset == e.from &&
                this.cursor.tree)
            )
              for (let t = this.cursor.tree; ; ) {
                if (t == e.tree) return !0;
                if (
                  t.children.length &&
                  0 == t.positions[0] &&
                  t.children[0] instanceof b
                )
                  t = t.children[0];
                else break;
              }
            return !1;
          }
        }
        class W {
          constructor(e) {
            var t;
            if (
              ((this.fragments = e),
              (this.curTo = 0),
              (this.fragI = 0),
              e.length)
            ) {
              let n = (this.curFrag = e[0]);
              (this.curTo = null != (t = n.tree.prop(H)) ? t : n.to),
                (this.inner = new V(n.tree, -n.offset));
            } else this.curFrag = this.inner = null;
          }
          hasNode(e) {
            for (; this.curFrag && e.from >= this.curTo; ) this.nextFrag();
            return (
              this.curFrag &&
              this.curFrag.from <= e.from &&
              this.curTo >= e.to &&
              this.inner.hasNode(e)
            );
          }
          nextFrag() {
            var e;
            if ((this.fragI++, this.fragI == this.fragments.length))
              this.curFrag = this.inner = null;
            else {
              let t = (this.curFrag = this.fragments[this.fragI]);
              (this.curTo = null != (e = t.tree.prop(H)) ? e : t.to),
                (this.inner = new V(t.tree, -t.offset));
            }
          }
          findMounts(e, t) {
            var n;
            let r = [];
            if (this.inner) {
              this.inner.cursor.moveTo(e, 1);
              for (let e = this.inner.cursor.node; e; e = e.parent) {
                let i = null == (n = e.tree) ? void 0 : n.prop(h.mounted);
                if (i && i.parser == t)
                  for (let t = this.fragI; t < this.fragments.length; t++) {
                    let n = this.fragments[t];
                    if (n.from >= e.to) break;
                    n.tree == this.curFrag.tree &&
                      r.push({ frag: n, pos: e.from - n.offset, mount: i });
                  }
              }
            }
            return r;
          }
        }
        function Z(e, t) {
          let n = null,
            r = t;
          for (let i = 1, s = 0; i < e.length; i++) {
            let o = e[i - 1].to,
              a = e[i].from;
            for (; s < r.length; s++) {
              let e = r[s];
              if (e.from >= a) break;
              !(e.to <= o) &&
                (n || (r = n = t.slice()),
                e.from < o
                  ? ((n[s] = new d(e.from, o)),
                    e.to > a && n.splice(s + 1, 0, new d(a, e.to)))
                  : e.to > a
                    ? (n[s--] = new d(a, e.to))
                    : n.splice(s--, 1));
            }
          }
          return r;
        }
        function G(e, t) {
          let n = [];
          for (let { pos: r, mount: i, frag: s } of e) {
            let e = r + (i.overlay ? i.overlay[0].from : 0),
              o = e + i.tree.length,
              a = Math.max(s.from, e),
              l = Math.min(s.to, o);
            if (i.overlay) {
              let o = (function (e, t, n, r) {
                let i = 0,
                  s = 0,
                  o = !1,
                  a = !1,
                  l = -1e9,
                  c = [];
                for (;;) {
                  let u = i == e.length ? 1e9 : o ? e[i].to : e[i].from,
                    h = s == t.length ? 1e9 : a ? t[s].to : t[s].from;
                  if (o != a) {
                    let e = Math.max(l, n),
                      t = Math.min(u, h, r);
                    e < t && c.push(new d(e, t));
                  }
                  if (1e9 == (l = Math.min(u, h))) break;
                  u == l && (o ? ((o = !1), i++) : (o = !0)),
                    h == l && (a ? ((a = !1), s++) : (a = !0));
                }
                return c;
              })(
                t,
                i.overlay.map((e) => new d(e.from + r, e.to + r)),
                a,
                l,
              );
              for (let t = 0, r = a; ; t++) {
                let a = t == o.length,
                  c = a ? l : o[t].from;
                if (
                  (c > r &&
                    n.push(
                      new F(
                        r,
                        c,
                        i.tree,
                        -e,
                        s.from >= r || s.openStart,
                        s.to <= c || s.openEnd,
                      ),
                    ),
                  a)
                )
                  break;
                r = o[t].to;
              }
            } else
              n.push(
                new F(
                  a,
                  l,
                  i.tree,
                  -e,
                  s.from >= e || s.openStart,
                  s.to <= o || s.openEnd,
                ),
              );
          }
          return n;
        }
        class Y {
          constructor(e, t, n, r, i, s, o, a, l, c = 0, u) {
            (this.p = e),
              (this.stack = t),
              (this.state = n),
              (this.reducePos = r),
              (this.pos = i),
              (this.score = s),
              (this.buffer = o),
              (this.bufferBase = a),
              (this.curContext = l),
              (this.lookAhead = c),
              (this.parent = u);
          }
          toString() {
            return `[${this.stack.filter((e, t) => t % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
          }
          static start(e, t, n = 0) {
            let r = e.parser.context;
            return new Y(
              e,
              [],
              t,
              n,
              n,
              0,
              [],
              0,
              r ? new K(r, r.start) : null,
              0,
              null,
            );
          }
          get context() {
            return this.curContext ? this.curContext.context : null;
          }
          pushState(e, t) {
            this.stack.push(
              this.state,
              t,
              this.bufferBase + this.buffer.length,
            ),
              (this.state = e);
          }
          reduce(e) {
            var t;
            let n = e >> 19,
              r = 65535 & e,
              { parser: i } = this.p,
              s = this.reducePos < this.pos - 25;
            s && this.setLookAhead(this.pos);
            let o = i.dynamicPrecedence(r);
            if ((o && (this.score += o), 0 == n)) {
              this.pushState(i.getGoto(this.state, r, !0), this.reducePos),
                r < i.minRepeatTerm &&
                  this.storeNode(
                    r,
                    this.reducePos,
                    this.reducePos,
                    s ? 8 : 4,
                    !0,
                  ),
                this.reduceContext(r, this.reducePos);
              return;
            }
            let a = this.stack.length - (n - 1) * 3 - (262144 & e ? 6 : 0),
              l = a ? this.stack[a - 2] : this.p.ranges[0].from,
              c = this.reducePos - l;
            c >= 2e3 &&
              !(null == (t = this.p.parser.nodeSet.types[r])
                ? void 0
                : t.isAnonymous) &&
              (l == this.p.lastBigReductionStart
                ? (this.p.bigReductionCount++,
                  (this.p.lastBigReductionSize = c))
                : this.p.lastBigReductionSize < c &&
                  ((this.p.bigReductionCount = 1),
                  (this.p.lastBigReductionStart = l),
                  (this.p.lastBigReductionSize = c)));
            let u = a ? this.stack[a - 1] : 0,
              d = this.bufferBase + this.buffer.length - u;
            if (r < i.minRepeatTerm || 131072 & e) {
              let e = i.stateFlag(this.state, 1) ? this.pos : this.reducePos;
              this.storeNode(r, l, e, d + 4, !0);
            }
            if (262144 & e) this.state = this.stack[a];
            else {
              let e = this.stack[a - 3];
              this.state = i.getGoto(e, r, !0);
            }
            for (; this.stack.length > a; ) this.stack.pop();
            this.reduceContext(r, l);
          }
          storeNode(e, t, n, r = 4, i = !1) {
            if (
              0 == e &&
              (!this.stack.length ||
                this.stack[this.stack.length - 1] <
                  this.buffer.length + this.bufferBase)
            ) {
              let e = this,
                r = this.buffer.length;
              if (
                (0 == r &&
                  e.parent &&
                  ((r = e.bufferBase - e.parent.bufferBase), (e = e.parent)),
                r > 0 && 0 == e.buffer[r - 4] && e.buffer[r - 1] > -1)
              ) {
                if (t == n) return;
                if (e.buffer[r - 2] >= t) {
                  e.buffer[r - 2] = n;
                  return;
                }
              }
            }
            if (i && this.pos != n) {
              let i = this.buffer.length;
              if (i > 0 && 0 != this.buffer[i - 4]) {
                let e = !1;
                for (let t = i; t > 0 && this.buffer[t - 2] > n; t -= 4)
                  if (this.buffer[t - 1] >= 0) {
                    e = !0;
                    break;
                  }
                if (e)
                  for (; i > 0 && this.buffer[i - 2] > n; )
                    (this.buffer[i] = this.buffer[i - 4]),
                      (this.buffer[i + 1] = this.buffer[i - 3]),
                      (this.buffer[i + 2] = this.buffer[i - 2]),
                      (this.buffer[i + 3] = this.buffer[i - 1]),
                      (i -= 4),
                      r > 4 && (r -= 4);
              }
              (this.buffer[i] = e),
                (this.buffer[i + 1] = t),
                (this.buffer[i + 2] = n),
                (this.buffer[i + 3] = r);
            } else this.buffer.push(e, t, n, r);
          }
          shift(e, t, n, r) {
            if (131072 & e) this.pushState(65535 & e, this.pos);
            else if ((262144 & e) == 0) {
              let { parser: i } = this.p;
              (r > this.pos || t <= i.maxNode) &&
                ((this.pos = r), i.stateFlag(e, 1) || (this.reducePos = r)),
                this.pushState(e, n),
                this.shiftContext(t, n),
                t <= i.maxNode && this.buffer.push(t, n, r, 4);
            } else
              (this.pos = r),
                this.shiftContext(t, n),
                t <= this.p.parser.maxNode && this.buffer.push(t, n, r, 4);
          }
          apply(e, t, n, r) {
            65536 & e ? this.reduce(e) : this.shift(e, t, n, r);
          }
          useNode(e, t) {
            let n = this.p.reused.length - 1;
            (n < 0 || this.p.reused[n] != e) && (this.p.reused.push(e), n++);
            let r = this.pos;
            (this.reducePos = this.pos = r + e.length),
              this.pushState(t, r),
              this.buffer.push(n, r, this.reducePos, -1),
              this.curContext &&
                this.updateContext(
                  this.curContext.tracker.reuse(
                    this.curContext.context,
                    e,
                    this,
                    this.p.stream.reset(this.pos - e.length),
                  ),
                );
          }
          split() {
            let e = this,
              t = e.buffer.length;
            for (; t > 0 && e.buffer[t - 2] > e.reducePos; ) t -= 4;
            let n = e.buffer.slice(t),
              r = e.bufferBase + t;
            for (; e && r == e.bufferBase; ) e = e.parent;
            return new Y(
              this.p,
              this.stack.slice(),
              this.state,
              this.reducePos,
              this.pos,
              this.score,
              n,
              r,
              this.curContext,
              this.lookAhead,
              e,
            );
          }
          recoverByDelete(e, t) {
            let n = e <= this.p.parser.maxNode;
            n && this.storeNode(e, this.pos, t, 4),
              this.storeNode(0, this.pos, t, n ? 8 : 4),
              (this.pos = this.reducePos = t),
              (this.score -= 190);
          }
          canShift(e) {
            for (let t = new X(this); ; ) {
              let n =
                this.p.parser.stateSlot(t.state, 4) ||
                this.p.parser.hasAction(t.state, e);
              if (0 == n) return !1;
              if ((65536 & n) == 0) return !0;
              t.reduce(n);
            }
          }
          recoverByInsert(e) {
            if (this.stack.length >= 300) return [];
            let t = this.p.parser.nextStates(this.state);
            if (t.length > 8 || this.stack.length >= 120) {
              let n = [];
              for (let r = 0, i; r < t.length; r += 2)
                (i = t[r + 1]) != this.state &&
                  this.p.parser.hasAction(i, e) &&
                  n.push(t[r], i);
              if (this.stack.length < 120)
                for (let e = 0; n.length < 8 && e < t.length; e += 2) {
                  let r = t[e + 1];
                  n.some((e, t) => 1 & t && e == r) || n.push(t[e], r);
                }
              t = n;
            }
            let n = [];
            for (let e = 0; e < t.length && n.length < 4; e += 2) {
              let r = t[e + 1];
              if (r == this.state) continue;
              let i = this.split();
              i.pushState(r, this.pos),
                i.storeNode(0, i.pos, i.pos, 4, !0),
                i.shiftContext(t[e], this.pos),
                (i.reducePos = this.pos),
                (i.score -= 200),
                n.push(i);
            }
            return n;
          }
          forceReduce() {
            let { parser: e } = this.p,
              t = e.stateSlot(this.state, 5);
            if ((65536 & t) == 0) return !1;
            if (!e.validAction(this.state, t)) {
              let n = t >> 19,
                r = 65535 & t,
                i = this.stack.length - 3 * n;
              if (i < 0 || 0 > e.getGoto(this.stack[i], r, !1)) {
                let e = this.findForcedReduction();
                if (null == e) return !1;
                t = e;
              }
              this.storeNode(0, this.pos, this.pos, 4, !0), (this.score -= 100);
            }
            return (this.reducePos = this.pos), this.reduce(t), !0;
          }
          findForcedReduction() {
            let { parser: e } = this.p,
              t = [],
              n = (r, i) => {
                if (!t.includes(r))
                  return (
                    t.push(r),
                    e.allActions(r, (t) => {
                      if (393216 & t);
                      else if (65536 & t) {
                        let n = (t >> 19) - i;
                        if (n > 1) {
                          let r = 65535 & t,
                            i = this.stack.length - 3 * n;
                          if (i >= 0 && e.getGoto(this.stack[i], r, !1) >= 0)
                            return (n << 19) | 65536 | r;
                        }
                      } else {
                        let e = n(t, i + 1);
                        if (null != e) return e;
                      }
                    })
                  );
              };
            return n(this.state, 0);
          }
          forceAll() {
            for (; !this.p.parser.stateFlag(this.state, 2); )
              if (!this.forceReduce()) {
                this.storeNode(0, this.pos, this.pos, 4, !0);
                break;
              }
            return this;
          }
          get deadEnd() {
            if (3 != this.stack.length) return !1;
            let { parser: e } = this.p;
            return (
              65535 == e.data[e.stateSlot(this.state, 1)] &&
              !e.stateSlot(this.state, 4)
            );
          }
          restart() {
            this.storeNode(0, this.pos, this.pos, 4, !0),
              (this.state = this.stack[0]),
              (this.stack.length = 0);
          }
          sameState(e) {
            if (this.state != e.state || this.stack.length != e.stack.length)
              return !1;
            for (let t = 0; t < this.stack.length; t += 3)
              if (this.stack[t] != e.stack[t]) return !1;
            return !0;
          }
          get parser() {
            return this.p.parser;
          }
          dialectEnabled(e) {
            return this.p.parser.dialect.flags[e];
          }
          shiftContext(e, t) {
            this.curContext &&
              this.updateContext(
                this.curContext.tracker.shift(
                  this.curContext.context,
                  e,
                  this,
                  this.p.stream.reset(t),
                ),
              );
          }
          reduceContext(e, t) {
            this.curContext &&
              this.updateContext(
                this.curContext.tracker.reduce(
                  this.curContext.context,
                  e,
                  this,
                  this.p.stream.reset(t),
                ),
              );
          }
          emitContext() {
            let e = this.buffer.length - 1;
            (e < 0 || -3 != this.buffer[e]) &&
              this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
          }
          emitLookAhead() {
            let e = this.buffer.length - 1;
            (e < 0 || -4 != this.buffer[e]) &&
              this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
          }
          updateContext(e) {
            if (e != this.curContext.context) {
              let t = new K(this.curContext.tracker, e);
              t.hash != this.curContext.hash && this.emitContext(),
                (this.curContext = t);
            }
          }
          setLookAhead(e) {
            e > this.lookAhead && (this.emitLookAhead(), (this.lookAhead = e));
          }
          close() {
            this.curContext &&
              this.curContext.tracker.strict &&
              this.emitContext(),
              this.lookAhead > 0 && this.emitLookAhead();
          }
        }
        class K {
          constructor(e, t) {
            (this.tracker = e),
              (this.context = t),
              (this.hash = e.strict ? e.hash(t) : 0);
          }
        }
        class X {
          constructor(e) {
            (this.start = e),
              (this.state = e.state),
              (this.stack = e.stack),
              (this.base = this.stack.length);
          }
          reduce(e) {
            let t = e >> 19;
            0 == t
              ? (this.stack == this.start.stack &&
                  (this.stack = this.stack.slice()),
                this.stack.push(this.state, 0, 0),
                (this.base += 3))
              : (this.base -= (t - 1) * 3);
            let n = this.start.p.parser.getGoto(
              this.stack[this.base - 3],
              65535 & e,
              !0,
            );
            this.state = n;
          }
        }
        class J {
          constructor(e, t, n) {
            (this.stack = e),
              (this.pos = t),
              (this.index = n),
              (this.buffer = e.buffer),
              0 == this.index && this.maybeNext();
          }
          static create(e, t = e.bufferBase + e.buffer.length) {
            return new J(e, t, t - e.bufferBase);
          }
          maybeNext() {
            let e = this.stack.parent;
            null != e &&
              ((this.index = this.stack.bufferBase - e.bufferBase),
              (this.stack = e),
              (this.buffer = e.buffer));
          }
          get id() {
            return this.buffer[this.index - 4];
          }
          get start() {
            return this.buffer[this.index - 3];
          }
          get end() {
            return this.buffer[this.index - 2];
          }
          get size() {
            return this.buffer[this.index - 1];
          }
          next() {
            (this.index -= 4),
              (this.pos -= 4),
              0 == this.index && this.maybeNext();
          }
          fork() {
            return new J(this.stack, this.pos, this.index);
          }
        }
        function ee(e, t = Uint16Array) {
          if ("string" != typeof e) return e;
          let n = null;
          for (let r = 0, i = 0; r < e.length; ) {
            let s = 0;
            for (;;) {
              let t = e.charCodeAt(r++),
                n = !1;
              if (126 == t) {
                s = 65535;
                break;
              }
              t >= 92 && t--, t >= 34 && t--;
              let i = t - 32;
              if ((i >= 46 && ((i -= 46), (n = !0)), (s += i), n)) break;
              s *= 46;
            }
            n ? (n[i++] = s) : (n = new t(s));
          }
          return n;
        }
        class et {
          constructor() {
            (this.start = -1),
              (this.value = -1),
              (this.end = -1),
              (this.extended = -1),
              (this.lookAhead = 0),
              (this.mask = 0),
              (this.context = 0);
          }
        }
        let en = new et();
        class er {
          constructor(e, t) {
            (this.input = e),
              (this.ranges = t),
              (this.chunk = ""),
              (this.chunkOff = 0),
              (this.chunk2 = ""),
              (this.chunk2Pos = 0),
              (this.next = -1),
              (this.token = en),
              (this.rangeIndex = 0),
              (this.pos = this.chunkPos = t[0].from),
              (this.range = t[0]),
              (this.end = t[t.length - 1].to),
              this.readNext();
          }
          resolveOffset(e, t) {
            let n = this.range,
              r = this.rangeIndex,
              i = this.pos + e;
            for (; i < n.from; ) {
              if (!r) return null;
              let e = this.ranges[--r];
              (i -= n.from - e.to), (n = e);
            }
            for (; t < 0 ? i > n.to : i >= n.to; ) {
              if (r == this.ranges.length - 1) return null;
              let e = this.ranges[++r];
              (i += e.from - n.to), (n = e);
            }
            return i;
          }
          clipPos(e) {
            if (e >= this.range.from && e < this.range.to) return e;
            for (let t of this.ranges) if (t.to > e) return Math.max(e, t.from);
            return this.end;
          }
          peek(e) {
            let t = this.chunkOff + e,
              n,
              r;
            if (t >= 0 && t < this.chunk.length)
              (n = this.pos + e), (r = this.chunk.charCodeAt(t));
            else {
              let t = this.resolveOffset(e, 1);
              if (null == t) return -1;
              if (
                (n = t) >= this.chunk2Pos &&
                n < this.chunk2Pos + this.chunk2.length
              )
                r = this.chunk2.charCodeAt(n - this.chunk2Pos);
              else {
                let e = this.rangeIndex,
                  t = this.range;
                for (; t.to <= n; ) t = this.ranges[++e];
                (this.chunk2 = this.input.chunk((this.chunk2Pos = n))),
                  n + this.chunk2.length > t.to &&
                    (this.chunk2 = this.chunk2.slice(0, t.to - n)),
                  (r = this.chunk2.charCodeAt(0));
              }
            }
            return (
              n >= this.token.lookAhead && (this.token.lookAhead = n + 1), r
            );
          }
          acceptToken(e, t = 0) {
            let n = t ? this.resolveOffset(t, -1) : this.pos;
            if (null == n || n < this.token.start)
              throw RangeError("Token end out of bounds");
            (this.token.value = e), (this.token.end = n);
          }
          acceptTokenTo(e, t) {
            (this.token.value = e), (this.token.end = t);
          }
          getChunk() {
            if (
              this.pos >= this.chunk2Pos &&
              this.pos < this.chunk2Pos + this.chunk2.length
            ) {
              let { chunk: e, chunkPos: t } = this;
              (this.chunk = this.chunk2),
                (this.chunkPos = this.chunk2Pos),
                (this.chunk2 = e),
                (this.chunk2Pos = t),
                (this.chunkOff = this.pos - this.chunkPos);
            } else {
              (this.chunk2 = this.chunk), (this.chunk2Pos = this.chunkPos);
              let e = this.input.chunk(this.pos),
                t = this.pos + e.length;
              (this.chunk =
                t > this.range.to ? e.slice(0, this.range.to - this.pos) : e),
                (this.chunkPos = this.pos),
                (this.chunkOff = 0);
            }
          }
          readNext() {
            return this.chunkOff >= this.chunk.length &&
              (this.getChunk(), this.chunkOff == this.chunk.length)
              ? (this.next = -1)
              : (this.next = this.chunk.charCodeAt(this.chunkOff));
          }
          advance(e = 1) {
            for (this.chunkOff += e; this.pos + e >= this.range.to; ) {
              if (this.rangeIndex == this.ranges.length - 1)
                return this.setDone();
              (e -= this.range.to - this.pos),
                (this.range = this.ranges[++this.rangeIndex]),
                (this.pos = this.range.from);
            }
            return (
              (this.pos += e),
              this.pos >= this.token.lookAhead &&
                (this.token.lookAhead = this.pos + 1),
              this.readNext()
            );
          }
          setDone() {
            return (
              (this.pos = this.chunkPos = this.end),
              (this.range =
                this.ranges[(this.rangeIndex = this.ranges.length - 1)]),
              (this.chunk = ""),
              (this.next = -1)
            );
          }
          reset(e, t) {
            if (
              (t
                ? ((this.token = t),
                  (t.start = e),
                  (t.lookAhead = e + 1),
                  (t.value = t.extended = -1))
                : (this.token = en),
              this.pos != e)
            ) {
              if (((this.pos = e), e == this.end)) return this.setDone(), this;
              for (; e < this.range.from; )
                this.range = this.ranges[--this.rangeIndex];
              for (; e >= this.range.to; )
                this.range = this.ranges[++this.rangeIndex];
              e >= this.chunkPos && e < this.chunkPos + this.chunk.length
                ? (this.chunkOff = e - this.chunkPos)
                : ((this.chunk = ""), (this.chunkOff = 0)),
                this.readNext();
            }
            return this;
          }
          read(e, t) {
            if (e >= this.chunkPos && t <= this.chunkPos + this.chunk.length)
              return this.chunk.slice(e - this.chunkPos, t - this.chunkPos);
            if (e >= this.chunk2Pos && t <= this.chunk2Pos + this.chunk2.length)
              return this.chunk2.slice(e - this.chunk2Pos, t - this.chunk2Pos);
            if (e >= this.range.from && t <= this.range.to)
              return this.input.read(e, t);
            let n = "";
            for (let r of this.ranges) {
              if (r.from >= t) break;
              r.to > e &&
                (n += this.input.read(Math.max(r.from, e), Math.min(r.to, t)));
            }
            return n;
          }
        }
        class ei {
          constructor(e, t) {
            (this.data = e), (this.id = t);
          }
          token(e, t) {
            let { parser: n } = t.p;
            ea(this.data, e, t, this.id, n.data, n.tokenPrecTable);
          }
        }
        ei.prototype.contextual =
          ei.prototype.fallback =
          ei.prototype.extend =
            !1;
        class es {
          constructor(e, t, n) {
            (this.precTable = t),
              (this.elseToken = n),
              (this.data = "string" == typeof e ? ee(e) : e);
          }
          token(e, t) {
            let n = e.pos,
              r = 0;
            for (;;) {
              let n = e.next < 0,
                i = e.resolveOffset(1, 1);
              if (
                (ea(this.data, e, t, 0, this.data, this.precTable),
                e.token.value > -1)
              )
                break;
              if (null == this.elseToken) return;
              if ((!n && r++, null == i)) break;
              e.reset(i, e.token);
            }
            r && (e.reset(n, e.token), e.acceptToken(this.elseToken, r));
          }
        }
        es.prototype.contextual =
          ei.prototype.fallback =
          ei.prototype.extend =
            !1;
        class eo {
          constructor(e, t = {}) {
            (this.token = e),
              (this.contextual = !!t.contextual),
              (this.fallback = !!t.fallback),
              (this.extend = !!t.extend);
          }
        }
        function ea(e, t, n, r, i, s) {
          let o = 0,
            a = 1 << r,
            { dialect: l } = n.p.parser;
          t: for (; (a & e[o]) != 0; ) {
            let n = e[o + 1];
            for (let r = o + 3; r < n; r += 2)
              if ((e[r + 1] & a) > 0) {
                let n = e[r];
                if (
                  l.allows(n) &&
                  (-1 == t.token.value ||
                    t.token.value == n ||
                    (function (e, t, n, r) {
                      let i = el(n, r, t);
                      return i < 0 || el(n, r, e) < i;
                    })(n, t.token.value, i, s))
                ) {
                  t.acceptToken(n);
                  break;
                }
              }
            let r = t.next,
              c = 0,
              u = e[o + 2];
            if (t.next < 0 && u > c && 65535 == e[n + 3 * u - 3]) {
              o = e[n + 3 * u - 1];
              continue;
            }
            for (; c < u; ) {
              let i = (c + u) >> 1,
                s = n + i + (i << 1),
                a = e[s],
                l = e[s + 1] || 65536;
              if (r < a) u = i;
              else if (r >= l) c = i + 1;
              else {
                (o = e[s + 2]), t.advance();
                continue t;
              }
            }
            break;
          }
        }
        function el(e, t, n) {
          for (let r = t, i; 65535 != (i = e[r]); r++) if (i == n) return r - t;
          return -1;
        }
        let ec =
            "undefined" != typeof process &&
            process.env &&
            /\bparse\b/.test(process.env.LOG),
          eu = null;
        function ed(e, t, n) {
          let r = e.cursor(a.IncludeAnonymous);
          for (r.moveTo(t); ; )
            if (!(n < 0 ? r.childBefore(t) : r.childAfter(t)))
              for (;;) {
                if ((n < 0 ? r.to < t : r.from > t) && !r.type.isError)
                  return n < 0
                    ? Math.max(0, Math.min(r.to - 1, t - 25))
                    : Math.min(e.length, Math.max(r.from + 1, t + 25));
                if (n < 0 ? r.prevSibling() : r.nextSibling()) break;
                if (!r.parent()) return n < 0 ? 0 : e.length;
              }
        }
        class eh {
          constructor(e, t) {
            (this.fragments = e),
              (this.nodeSet = t),
              (this.i = 0),
              (this.fragment = null),
              (this.safeFrom = -1),
              (this.safeTo = -1),
              (this.trees = []),
              (this.start = []),
              (this.index = []),
              this.nextFragment();
          }
          nextFragment() {
            let e = (this.fragment =
              this.i == this.fragments.length
                ? null
                : this.fragments[this.i++]);
            if (e) {
              for (
                this.safeFrom = e.openStart
                  ? ed(e.tree, e.from + e.offset, 1) - e.offset
                  : e.from,
                  this.safeTo = e.openEnd
                    ? ed(e.tree, e.to + e.offset, -1) - e.offset
                    : e.to;
                this.trees.length;

              )
                this.trees.pop(), this.start.pop(), this.index.pop();
              this.trees.push(e.tree),
                this.start.push(-e.offset),
                this.index.push(0),
                (this.nextStart = this.safeFrom);
            } else this.nextStart = 1e9;
          }
          nodeAt(e) {
            if (e < this.nextStart) return null;
            for (; this.fragment && this.safeTo <= e; ) this.nextFragment();
            if (!this.fragment) return null;
            for (;;) {
              let t = this.trees.length - 1;
              if (t < 0) return this.nextFragment(), null;
              let n = this.trees[t],
                r = this.index[t];
              if (r == n.children.length) {
                this.trees.pop(), this.start.pop(), this.index.pop();
                continue;
              }
              let i = n.children[r],
                s = this.start[t] + n.positions[r];
              if (s > e) return (this.nextStart = s), null;
              if (i instanceof b) {
                if (s == e) {
                  if (s < this.safeFrom) return null;
                  let e = s + i.length;
                  if (e <= this.safeTo) {
                    let t = i.prop(h.lookAhead);
                    if (!t || e + t < this.fragment.to) return i;
                  }
                }
                this.index[t]++,
                  s + i.length >= Math.max(this.safeFrom, e) &&
                    (this.trees.push(i),
                    this.start.push(s),
                    this.index.push(0));
              } else this.index[t]++, (this.nextStart = s + i.length);
            }
          }
        }
        class ep {
          constructor(e, t) {
            (this.stream = t),
              (this.tokens = []),
              (this.mainToken = null),
              (this.actions = []),
              (this.tokens = e.tokenizers.map((e) => new et()));
          }
          getActions(e) {
            let t = 0,
              n = null,
              { parser: r } = e.p,
              { tokenizers: i } = r,
              s = r.stateSlot(e.state, 3),
              o = e.curContext ? e.curContext.hash : 0,
              a = 0;
            for (let r = 0; r < i.length; r++) {
              if (((1 << r) & s) == 0) continue;
              let l = i[r],
                c = this.tokens[r];
              if (
                (!n || l.fallback) &&
                ((l.contextual ||
                  c.start != e.pos ||
                  c.mask != s ||
                  c.context != o) &&
                  (this.updateCachedToken(c, l, e),
                  (c.mask = s),
                  (c.context = o)),
                c.lookAhead > c.end + 25 && (a = Math.max(c.lookAhead, a)),
                0 != c.value)
              ) {
                let r = t;
                if (
                  (c.extended > -1 &&
                    (t = this.addActions(e, c.extended, c.end, t)),
                  (t = this.addActions(e, c.value, c.end, t)),
                  !l.extend && ((n = c), t > r))
                )
                  break;
              }
            }
            for (; this.actions.length > t; ) this.actions.pop();
            return (
              a && e.setLookAhead(a),
              n ||
                e.pos != this.stream.end ||
                (((n = new et()).value = e.p.parser.eofTerm),
                (n.start = n.end = e.pos),
                (t = this.addActions(e, n.value, n.end, t))),
              (this.mainToken = n),
              this.actions
            );
          }
          getMainToken(e) {
            if (this.mainToken) return this.mainToken;
            let t = new et(),
              { pos: n, p: r } = e;
            return (
              (t.start = n),
              (t.end = Math.min(n + 1, r.stream.end)),
              (t.value = n == r.stream.end ? r.parser.eofTerm : 0),
              t
            );
          }
          updateCachedToken(e, t, n) {
            let r = this.stream.clipPos(n.pos);
            if ((t.token(this.stream.reset(r, e), n), e.value > -1)) {
              let { parser: t } = n.p;
              for (let r = 0; r < t.specialized.length; r++)
                if (t.specialized[r] == e.value) {
                  let i = t.specializers[r](
                    this.stream.read(e.start, e.end),
                    n,
                  );
                  if (i >= 0 && n.p.parser.dialect.allows(i >> 1)) {
                    (1 & i) == 0 ? (e.value = i >> 1) : (e.extended = i >> 1);
                    break;
                  }
                }
            } else (e.value = 0), (e.end = this.stream.clipPos(r + 1));
          }
          putAction(e, t, n, r) {
            for (let t = 0; t < r; t += 3) if (this.actions[t] == e) return r;
            return (
              (this.actions[r++] = e),
              (this.actions[r++] = t),
              (this.actions[r++] = n),
              r
            );
          }
          addActions(e, t, n, r) {
            let { state: i } = e,
              { parser: s } = e.p,
              { data: o } = s;
            for (let e = 0; e < 2; e++)
              for (let a = s.stateSlot(i, e ? 2 : 1); ; a += 3) {
                if (65535 == o[a])
                  if (1 == o[a + 1]) a = ex(o, a + 2);
                  else {
                    0 == r &&
                      2 == o[a + 1] &&
                      (r = this.putAction(ex(o, a + 2), t, n, r));
                    break;
                  }
                o[a] == t && (r = this.putAction(ex(o, a + 1), t, n, r));
              }
            return r;
          }
        }
        class ef {
          constructor(e, t, n, r) {
            (this.parser = e),
              (this.input = t),
              (this.ranges = r),
              (this.recovering = 0),
              (this.nextStackID = 9812),
              (this.minStackPos = 0),
              (this.reused = []),
              (this.stoppedAt = null),
              (this.lastBigReductionStart = -1),
              (this.lastBigReductionSize = 0),
              (this.bigReductionCount = 0),
              (this.stream = new er(t, r)),
              (this.tokens = new ep(e, this.stream)),
              (this.topTerm = e.top[1]);
            let { from: i } = r[0];
            (this.stacks = [Y.start(this, e.top[0], i)]),
              (this.fragments =
                n.length && this.stream.end - i > 4 * e.bufferLength
                  ? new eh(n, e.nodeSet)
                  : null);
          }
          get parsedPos() {
            return this.minStackPos;
          }
          advance() {
            let e,
              t,
              n = this.stacks,
              r = this.minStackPos,
              i = (this.stacks = []);
            if (this.bigReductionCount > 300 && 1 == n.length) {
              let [e] = n;
              for (
                ;
                e.forceReduce() &&
                e.stack.length &&
                e.stack[e.stack.length - 2] >= this.lastBigReductionStart;

              );
              this.bigReductionCount = this.lastBigReductionSize = 0;
            }
            for (let s = 0; s < n.length; s++) {
              let o = n[s];
              for (;;) {
                if (((this.tokens.mainToken = null), o.pos > r)) i.push(o);
                else {
                  if (this.advanceStack(o, i, n)) continue;
                  e || ((e = []), (t = [])), e.push(o);
                  let r = this.tokens.getMainToken(o);
                  t.push(r.value, r.end);
                }
                break;
              }
            }
            if (!i.length) {
              let t =
                e &&
                (function (e) {
                  let t = null;
                  for (let n of e) {
                    let e = n.p.stoppedAt;
                    (n.pos == n.p.stream.end || (null != e && n.pos > e)) &&
                      n.p.parser.stateFlag(n.state, 2) &&
                      (!t || t.score < n.score) &&
                      (t = n);
                  }
                  return t;
                })(e);
              if (t)
                return (
                  ec && console.log("Finish with " + this.stackID(t)),
                  this.stackToTree(t)
                );
              if (this.parser.strict)
                throw (
                  (ec &&
                    e &&
                    console.log(
                      "Stuck with token " +
                        (this.tokens.mainToken
                          ? this.parser.getName(this.tokens.mainToken.value)
                          : "none"),
                    ),
                  SyntaxError("No parse at " + r))
                );
              this.recovering || (this.recovering = 5);
            }
            if (this.recovering && e) {
              let n =
                null != this.stoppedAt && e[0].pos > this.stoppedAt
                  ? e[0]
                  : this.runRecovery(e, t, i);
              if (n)
                return (
                  ec && console.log("Force-finish " + this.stackID(n)),
                  this.stackToTree(n.forceAll())
                );
            }
            if (this.recovering) {
              let e = 1 == this.recovering ? 1 : 3 * this.recovering;
              if (i.length > e)
                for (i.sort((e, t) => t.score - e.score); i.length > e; )
                  i.pop();
              i.some((e) => e.reducePos > r) && this.recovering--;
            } else if (i.length > 1) {
              o: for (let e = 0; e < i.length - 1; e++) {
                let t = i[e];
                for (let n = e + 1; n < i.length; n++) {
                  let r = i[n];
                  if (
                    t.sameState(r) ||
                    (t.buffer.length > 500 && r.buffer.length > 500)
                  )
                    if (
                      (t.score - r.score || t.buffer.length - r.buffer.length) >
                      0
                    )
                      i.splice(n--, 1);
                    else {
                      i.splice(e--, 1);
                      continue o;
                    }
                }
              }
              i.length > 12 && i.splice(12, i.length - 12);
            }
            this.minStackPos = i[0].pos;
            for (let e = 1; e < i.length; e++)
              i[e].pos < this.minStackPos && (this.minStackPos = i[e].pos);
            return null;
          }
          stopAt(e) {
            if (null != this.stoppedAt && this.stoppedAt < e)
              throw RangeError("Can't move stoppedAt forward");
            this.stoppedAt = e;
          }
          advanceStack(e, t, n) {
            let r = e.pos,
              { parser: i } = this,
              s = ec ? this.stackID(e) + " -> " : "";
            if (null != this.stoppedAt && r > this.stoppedAt)
              return e.forceReduce() ? e : null;
            if (this.fragments) {
              let t = e.curContext && e.curContext.tracker.strict,
                n = t ? e.curContext.hash : 0;
              for (let o = this.fragments.nodeAt(r); o; ) {
                let r =
                  this.parser.nodeSet.types[o.type.id] == o.type
                    ? i.getGoto(e.state, o.type.id)
                    : -1;
                if (
                  r > -1 &&
                  o.length &&
                  (!t || (o.prop(h.contextHash) || 0) == n)
                )
                  return (
                    e.useNode(o, r),
                    ec &&
                      console.log(
                        s +
                          this.stackID(e) +
                          ` (via reuse of ${i.getName(o.type.id)})`,
                      ),
                    !0
                  );
                if (
                  !(o instanceof b) ||
                  0 == o.children.length ||
                  o.positions[0] > 0
                )
                  break;
                let a = o.children[0];
                if (a instanceof b && 0 == o.positions[0]) o = a;
                else break;
              }
            }
            let o = i.stateSlot(e.state, 4);
            if (o > 0)
              return (
                e.reduce(o),
                ec &&
                  console.log(
                    s +
                      this.stackID(e) +
                      ` (via always-reduce ${i.getName(65535 & o)})`,
                  ),
                !0
              );
            if (e.stack.length >= 8400)
              for (; e.stack.length > 6e3 && e.forceReduce(); );
            let a = this.tokens.getActions(e);
            for (let o = 0; o < a.length; ) {
              let l = a[o++],
                c = a[o++],
                u = a[o++],
                d = o == a.length || !n,
                h = d ? e : e.split(),
                p = this.tokens.mainToken;
              if (
                (h.apply(l, c, p ? p.start : h.pos, u),
                ec &&
                  console.log(
                    s +
                      this.stackID(h) +
                      ` (via ${(65536 & l) == 0 ? "shift" : `reduce of ${i.getName(65535 & l)}`} for ${i.getName(c)} @ ${r}${h == e ? "" : ", split"})`,
                  ),
                d)
              )
                return !0;
              h.pos > r ? t.push(h) : n.push(h);
            }
            return !1;
          }
          advanceFully(e, t) {
            let n = e.pos;
            for (;;) {
              if (!this.advanceStack(e, null, null)) return !1;
              if (e.pos > n) return em(e, t), !0;
            }
          }
          runRecovery(e, t, n) {
            let r = null,
              i = !1;
            for (let s = 0; s < e.length; s++) {
              let o = e[s],
                a = t[s << 1],
                l = t[(s << 1) + 1],
                c = ec ? this.stackID(o) + " -> " : "";
              if (
                o.deadEnd &&
                (i ||
                  ((i = !0),
                  o.restart(),
                  ec && console.log(c + this.stackID(o) + " (restarted)"),
                  this.advanceFully(o, n)))
              )
                continue;
              let u = o.split(),
                d = c;
              for (
                let e = 0;
                u.forceReduce() &&
                e < 10 &&
                (ec && console.log(d + this.stackID(u) + " (via force-reduce)"),
                !this.advanceFully(u, n));
                e++
              )
                ec && (d = this.stackID(u) + " -> ");
              for (let e of o.recoverByInsert(a))
                ec &&
                  console.log(c + this.stackID(e) + " (via recover-insert)"),
                  this.advanceFully(e, n);
              this.stream.end > o.pos
                ? (l == o.pos && (l++, (a = 0)),
                  o.recoverByDelete(a, l),
                  ec &&
                    console.log(
                      c +
                        this.stackID(o) +
                        ` (via recover-delete ${this.parser.getName(a)})`,
                    ),
                  em(o, n))
                : (!r || r.score < o.score) && (r = o);
            }
            return r;
          }
          stackToTree(e) {
            return (
              e.close(),
              b.build({
                buffer: J.create(e),
                nodeSet: this.parser.nodeSet,
                topID: this.topTerm,
                maxBufferLength: this.parser.bufferLength,
                reused: this.reused,
                start: this.ranges[0].from,
                length: e.pos - this.ranges[0].from,
                minRepeatType: this.parser.minRepeatTerm,
              })
            );
          }
          stackID(e) {
            let t = (eu || (eu = new WeakMap())).get(e);
            return (
              t || eu.set(e, (t = String.fromCodePoint(this.nextStackID++))),
              t + e
            );
          }
        }
        function em(e, t) {
          for (let n = 0; n < t.length; n++) {
            let r = t[n];
            if (r.pos == e.pos && r.sameState(e)) {
              t[n].score < e.score && (t[n] = e);
              return;
            }
          }
          t.push(e);
        }
        class eg {
          constructor(e, t, n) {
            (this.source = e), (this.flags = t), (this.disabled = n);
          }
          allows(e) {
            return !this.disabled || 0 == this.disabled[e];
          }
        }
        let ey = (e) => e;
        class ev {
          constructor(e) {
            (this.start = e.start),
              (this.shift = e.shift || ey),
              (this.reduce = e.reduce || ey),
              (this.reuse = e.reuse || ey),
              (this.hash = e.hash || (() => 0)),
              (this.strict = !1 !== e.strict);
          }
        }
        class eb extends B {
          constructor(e) {
            if ((super(), (this.wrappers = []), 14 != e.version))
              throw RangeError(
                `Parser version (${e.version}) doesn't match runtime version (14)`,
              );
            let t = e.nodeNames.split(" ");
            this.minRepeatTerm = t.length;
            for (let n = 0; n < e.repeatNodeCount; n++) t.push("");
            let n = Object.keys(e.topRules).map((t) => e.topRules[t][1]),
              r = [];
            for (let e = 0; e < t.length; e++) r.push([]);
            function i(e, t, n) {
              r[e].push([t, t.deserialize(String(n))]);
            }
            if (e.nodeProps)
              for (let t of e.nodeProps) {
                let e = t[0];
                "string" == typeof e && (e = h[e]);
                for (let n = 1; n < t.length; ) {
                  let r = t[n++];
                  if (r >= 0) i(r, e, t[n++]);
                  else {
                    let s = t[n + -r];
                    for (let o = -r; o > 0; o--) i(t[n++], e, s);
                    n++;
                  }
                }
              }
            (this.nodeSet = new g(
              t.map((t, i) =>
                m.define({
                  name: i >= this.minRepeatTerm ? void 0 : t,
                  id: i,
                  props: r[i],
                  top: n.indexOf(i) > -1,
                  error: 0 == i,
                  skipped: e.skippedNodes && e.skippedNodes.indexOf(i) > -1,
                }),
              ),
            )),
              e.propSources &&
                (this.nodeSet = this.nodeSet.extend(...e.propSources)),
              (this.strict = !1),
              (this.bufferLength = 1024);
            let s = ee(e.tokenData);
            (this.context = e.context),
              (this.specializerSpecs = e.specialized || []),
              (this.specialized = new Uint16Array(
                this.specializerSpecs.length,
              ));
            for (let e = 0; e < this.specializerSpecs.length; e++)
              this.specialized[e] = this.specializerSpecs[e].term;
            (this.specializers = this.specializerSpecs.map(ek)),
              (this.states = ee(e.states, Uint32Array)),
              (this.data = ee(e.stateData)),
              (this.goto = ee(e.goto)),
              (this.maxTerm = e.maxTerm),
              (this.tokenizers = e.tokenizers.map((e) =>
                "number" == typeof e ? new ei(s, e) : e,
              )),
              (this.topRules = e.topRules),
              (this.dialects = e.dialects || {}),
              (this.dynamicPrecedences = e.dynamicPrecedences || null),
              (this.tokenPrecTable = e.tokenPrec),
              (this.termNames = e.termNames || null),
              (this.maxNode = this.nodeSet.types.length - 1),
              (this.dialect = this.parseDialect()),
              (this.top = this.topRules[Object.keys(this.topRules)[0]]);
          }
          createParse(e, t, n) {
            let r = new ef(this, e, t, n);
            for (let i of this.wrappers) r = i(r, e, t, n);
            return r;
          }
          getGoto(e, t, n = !1) {
            let r = this.goto;
            if (t >= r[0]) return -1;
            for (let i = r[t + 1]; ; ) {
              let t = r[i++],
                s = 1 & t,
                o = r[i++];
              if (s && n) return o;
              for (let n = i + (t >> 1); i < n; i++) if (r[i] == e) return o;
              if (s) return -1;
            }
          }
          hasAction(e, t) {
            let n = this.data;
            for (let r = 0; r < 2; r++)
              for (let i = this.stateSlot(e, r ? 2 : 1), s; ; i += 3) {
                if (65535 == (s = n[i]))
                  if (1 == n[i + 1]) s = n[(i = ex(n, i + 2))];
                  else if (2 == n[i + 1]) return ex(n, i + 2);
                  else break;
                if (s == t || 0 == s) return ex(n, i + 1);
              }
            return 0;
          }
          stateSlot(e, t) {
            return this.states[6 * e + t];
          }
          stateFlag(e, t) {
            return (this.stateSlot(e, 0) & t) > 0;
          }
          validAction(e, t) {
            return !!this.allActions(e, (e) => e == t || null);
          }
          allActions(e, t) {
            let n = this.stateSlot(e, 4),
              r = n ? t(n) : void 0;
            for (let n = this.stateSlot(e, 1); null == r; n += 3) {
              if (65535 == this.data[n])
                if (1 == this.data[n + 1]) n = ex(this.data, n + 2);
                else break;
              r = t(ex(this.data, n + 1));
            }
            return r;
          }
          nextStates(e) {
            let t = [];
            for (let n = this.stateSlot(e, 1); ; n += 3) {
              if (65535 == this.data[n])
                if (1 == this.data[n + 1]) n = ex(this.data, n + 2);
                else break;
              if ((1 & this.data[n + 2]) == 0) {
                let e = this.data[n + 1];
                t.some((t, n) => 1 & n && t == e) || t.push(this.data[n], e);
              }
            }
            return t;
          }
          configure(e) {
            let t = Object.assign(Object.create(eb.prototype), this);
            if (
              (e.props && (t.nodeSet = this.nodeSet.extend(...e.props)), e.top)
            ) {
              let n = this.topRules[e.top];
              if (!n) throw RangeError(`Invalid top rule name ${e.top}`);
              t.top = n;
            }
            return (
              e.tokenizers &&
                (t.tokenizers = this.tokenizers.map((t) => {
                  let n = e.tokenizers.find((e) => e.from == t);
                  return n ? n.to : t;
                })),
              e.specializers &&
                ((t.specializers = this.specializers.slice()),
                (t.specializerSpecs = this.specializerSpecs.map((n, r) => {
                  let i = e.specializers.find((e) => e.from == n.external);
                  if (!i) return n;
                  let s = Object.assign(Object.assign({}, n), {
                    external: i.to,
                  });
                  return (t.specializers[r] = ek(s)), s;
                }))),
              e.contextTracker && (t.context = e.contextTracker),
              e.dialect && (t.dialect = this.parseDialect(e.dialect)),
              null != e.strict && (t.strict = e.strict),
              e.wrap && (t.wrappers = t.wrappers.concat(e.wrap)),
              null != e.bufferLength && (t.bufferLength = e.bufferLength),
              t
            );
          }
          hasWrappers() {
            return this.wrappers.length > 0;
          }
          getName(e) {
            return this.termNames
              ? this.termNames[e]
              : String((e <= this.maxNode && this.nodeSet.types[e].name) || e);
          }
          get eofTerm() {
            return this.maxNode + 1;
          }
          get topNode() {
            return this.nodeSet.types[this.top[1]];
          }
          dynamicPrecedence(e) {
            let t = this.dynamicPrecedences;
            return null == t ? 0 : t[e] || 0;
          }
          parseDialect(e) {
            let t = Object.keys(this.dialects),
              n = t.map(() => !1);
            if (e)
              for (let r of e.split(" ")) {
                let e = t.indexOf(r);
                e >= 0 && (n[e] = !0);
              }
            let r = null;
            for (let e = 0; e < t.length; e++)
              if (!n[e])
                for (
                  let n = this.dialects[t[e]], i;
                  65535 != (i = this.data[n++]);

                )
                  (r || (r = new Uint8Array(this.maxTerm + 1)))[i] = 1;
            return new eg(e, n, r);
          }
          static deserialize(e) {
            return new eb(e);
          }
        }
        function ex(e, t) {
          return e[t] | (e[t + 1] << 16);
        }
        function ek(e) {
          if (e.external) {
            let t = +!!e.extend;
            return (n, r) => (e.external(n, r) << 1) | t;
          }
          return e.get;
        }
        let ew = 0;
        class e_ {
          constructor(e, t, n, r) {
            (this.name = e),
              (this.set = t),
              (this.base = n),
              (this.modified = r),
              (this.id = ew++);
          }
          toString() {
            let { name: e } = this;
            for (let t of this.modified) t.name && (e = `${t.name}(${e})`);
            return e;
          }
          static define(e, t) {
            if ((e instanceof e_ && (t = e), null == t ? void 0 : t.base))
              throw Error("Can not derive from a modified tag");
            let n = new e_("string" == typeof e ? e : "?", [], null, []);
            if ((n.set.push(n), t)) for (let e of t.set) n.set.push(e);
            return n;
          }
          static defineModifier(e) {
            let t = new eT(e);
            return (e) =>
              e.modified.indexOf(t) > -1
                ? e
                : eT.get(
                    e.base || e,
                    e.modified.concat(t).sort((e, t) => e.id - t.id),
                  );
          }
        }
        let eO = 0;
        class eT {
          constructor(e) {
            (this.name = e), (this.instances = []), (this.id = eO++);
          }
          static get(e, t) {
            if (!t.length) return e;
            let n = t[0].instances.find((n) => {
              var r, i;
              return (
                n.base == e &&
                ((r = t),
                (i = n.modified),
                r.length == i.length && r.every((e, t) => e == i[t]))
              );
            });
            if (n) return n;
            let r = [],
              i = new e_(e.name, r, e, t);
            for (let e of t) e.instances.push(i);
            let s = (function (e) {
              let t = [[]];
              for (let n = 0; n < e.length; n++)
                for (let r = 0, i = t.length; r < i; r++)
                  t.push(t[r].concat(e[n]));
              return t.sort((e, t) => t.length - e.length);
            })(t);
            for (let t of e.set)
              if (!t.modified.length) for (let e of s) r.push(eT.get(t, e));
            return i;
          }
        }
        function eS(e) {
          let t = Object.create(null);
          for (let n in e) {
            let r = e[n];
            for (let e of (Array.isArray(r) || (r = [r]), n.split(" ")))
              if (e) {
                let n = [],
                  i = 2,
                  s = e;
                for (let t = 0; ; ) {
                  if ("..." == s && t > 0 && t + 3 == e.length) {
                    i = 1;
                    break;
                  }
                  let r = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(s);
                  if (!r) throw RangeError("Invalid path: " + e);
                  if (
                    (n.push(
                      "*" == r[0]
                        ? ""
                        : '"' == r[0][0]
                          ? JSON.parse(r[0])
                          : r[0],
                    ),
                    (t += r[0].length) == e.length)
                  )
                    break;
                  let o = e[t++];
                  if (t == e.length && "!" == o) {
                    i = 0;
                    break;
                  }
                  if ("/" != o) throw RangeError("Invalid path: " + e);
                  s = e.slice(t);
                }
                let o = n.length - 1,
                  a = n[o];
                if (!a) throw RangeError("Invalid path: " + e);
                let l = new eC(r, i, o > 0 ? n.slice(0, o) : null);
                t[a] = l.sort(t[a]);
              }
          }
          return eE.add(t);
        }
        let eE = new h();
        class eC {
          constructor(e, t, n, r) {
            (this.tags = e),
              (this.mode = t),
              (this.context = n),
              (this.next = r);
          }
          get opaque() {
            return 0 == this.mode;
          }
          get inherit() {
            return 1 == this.mode;
          }
          sort(e) {
            return !e || e.depth < this.depth
              ? ((this.next = e), this)
              : ((e.next = this.sort(e.next)), e);
          }
          get depth() {
            return this.context ? this.context.length : 0;
          }
        }
        function eA(e, t) {
          let n = Object.create(null);
          for (let t of e)
            if (Array.isArray(t.tag)) for (let e of t.tag) n[e.id] = t.class;
            else n[t.tag.id] = t.class;
          let { scope: r, all: i = null } = t || {};
          return {
            style: (e) => {
              let t = i;
              for (let r of e)
                for (let e of r.set) {
                  let r = n[e.id];
                  if (r) {
                    t = t ? t + " " + r : r;
                    break;
                  }
                }
              return t;
            },
            scope: r,
          };
        }
        eC.empty = new eC([], 2, null);
        class eN {
          constructor(e, t, n) {
            (this.at = e),
              (this.highlighters = t),
              (this.span = n),
              (this.class = "");
          }
          startSpan(e, t) {
            t != this.class &&
              (this.flush(e), e > this.at && (this.at = e), (this.class = t));
          }
          flush(e) {
            e > this.at && this.class && this.span(this.at, e, this.class);
          }
          highlightRange(e, t, n, r, i) {
            let { type: s, from: o, to: a } = e;
            if (o >= n || a <= t) return;
            s.isTop &&
              (i = this.highlighters.filter((e) => !e.scope || e.scope(s)));
            let l = r,
              c =
                (function (e) {
                  let t = e.type.prop(eE);
                  for (; t && t.context && !e.matchContext(t.context); )
                    t = t.next;
                  return t || null;
                })(e) || eC.empty,
              u = (function (e, t) {
                let n = null;
                for (let r of e) {
                  let e = r.style(t);
                  e && (n = n ? n + " " + e : e);
                }
                return n;
              })(i, c.tags);
            if (
              (u &&
                (l && (l += " "),
                (l += u),
                1 == c.mode && (r += (r ? " " : "") + u)),
              this.startSpan(Math.max(t, o), l),
              c.opaque)
            )
              return;
            let d = e.tree && e.tree.prop(h.mounted);
            if (d && d.overlay) {
              let s = e.node.enter(d.overlay[0].from + o, 1),
                c = this.highlighters.filter(
                  (e) => !e.scope || e.scope(d.tree.type),
                ),
                u = e.firstChild();
              for (let h = 0, p = o; ; h++) {
                let f = h < d.overlay.length ? d.overlay[h] : null,
                  m = f ? f.from + o : a,
                  g = Math.max(t, p),
                  y = Math.min(n, m);
                if (g < y && u)
                  for (
                    ;
                    e.from < y &&
                    (this.highlightRange(e, g, y, r, i),
                    this.startSpan(Math.min(y, e.to), l),
                    !(e.to >= m) && e.nextSibling());

                  );
                if (!f || m > n) break;
                (p = f.to + o) > t &&
                  (this.highlightRange(
                    s.cursor(),
                    Math.max(t, f.from + o),
                    Math.min(n, p),
                    "",
                    c,
                  ),
                  this.startSpan(Math.min(n, p), l));
              }
              u && e.parent();
            } else if (e.firstChild()) {
              d && (r = "");
              do {
                if (e.to <= t) continue;
                if (e.from >= n) break;
                this.highlightRange(e, t, n, r, i),
                  this.startSpan(Math.min(n, e.to), l);
              } while (e.nextSibling());
              e.parent();
            }
          }
        }
        let eI = e_.define,
          eD = eI(),
          eP = eI(),
          eR = eI(eP),
          eM = eI(eP),
          eL = eI(),
          ej = eI(eL),
          eF = eI(eL),
          eB = eI(),
          ez = eI(eB),
          e$ = eI(),
          eq = eI(),
          eU = eI(),
          eH = eI(eU),
          eQ = eI(),
          eV = {
            comment: eD,
            lineComment: eI(eD),
            blockComment: eI(eD),
            docComment: eI(eD),
            name: eP,
            variableName: eI(eP),
            typeName: eR,
            tagName: eI(eR),
            propertyName: eM,
            attributeName: eI(eM),
            className: eI(eP),
            labelName: eI(eP),
            namespace: eI(eP),
            macroName: eI(eP),
            literal: eL,
            string: ej,
            docString: eI(ej),
            character: eI(ej),
            attributeValue: eI(ej),
            number: eF,
            integer: eI(eF),
            float: eI(eF),
            bool: eI(eL),
            regexp: eI(eL),
            escape: eI(eL),
            color: eI(eL),
            url: eI(eL),
            keyword: e$,
            self: eI(e$),
            null: eI(e$),
            atom: eI(e$),
            unit: eI(e$),
            modifier: eI(e$),
            operatorKeyword: eI(e$),
            controlKeyword: eI(e$),
            definitionKeyword: eI(e$),
            moduleKeyword: eI(e$),
            operator: eq,
            derefOperator: eI(eq),
            arithmeticOperator: eI(eq),
            logicOperator: eI(eq),
            bitwiseOperator: eI(eq),
            compareOperator: eI(eq),
            updateOperator: eI(eq),
            definitionOperator: eI(eq),
            typeOperator: eI(eq),
            controlOperator: eI(eq),
            punctuation: eU,
            separator: eI(eU),
            bracket: eH,
            angleBracket: eI(eH),
            squareBracket: eI(eH),
            paren: eI(eH),
            brace: eI(eH),
            content: eB,
            heading: ez,
            heading1: eI(ez),
            heading2: eI(ez),
            heading3: eI(ez),
            heading4: eI(ez),
            heading5: eI(ez),
            heading6: eI(ez),
            contentSeparator: eI(eB),
            list: eI(eB),
            quote: eI(eB),
            emphasis: eI(eB),
            strong: eI(eB),
            link: eI(eB),
            monospace: eI(eB),
            strikethrough: eI(eB),
            inserted: eI(),
            deleted: eI(),
            changed: eI(),
            invalid: eI(),
            meta: eQ,
            documentMeta: eI(eQ),
            annotation: eI(eQ),
            processingInstruction: eI(eQ),
            definition: e_.defineModifier("definition"),
            constant: e_.defineModifier("constant"),
            function: e_.defineModifier("function"),
            standard: e_.defineModifier("standard"),
            local: e_.defineModifier("local"),
            special: e_.defineModifier("special"),
          };
        for (let e in eV) {
          let t = eV[e];
          t instanceof e_ && (t.name = e);
        }
        eA([
          { tag: eV.link, class: "tok-link" },
          { tag: eV.heading, class: "tok-heading" },
          { tag: eV.emphasis, class: "tok-emphasis" },
          { tag: eV.strong, class: "tok-strong" },
          { tag: eV.keyword, class: "tok-keyword" },
          { tag: eV.atom, class: "tok-atom" },
          { tag: eV.bool, class: "tok-bool" },
          { tag: eV.url, class: "tok-url" },
          { tag: eV.labelName, class: "tok-labelName" },
          { tag: eV.inserted, class: "tok-inserted" },
          { tag: eV.deleted, class: "tok-deleted" },
          { tag: eV.literal, class: "tok-literal" },
          { tag: eV.string, class: "tok-string" },
          { tag: eV.number, class: "tok-number" },
          {
            tag: [eV.regexp, eV.escape, eV.special(eV.string)],
            class: "tok-string2",
          },
          { tag: eV.variableName, class: "tok-variableName" },
          {
            tag: eV.local(eV.variableName),
            class: "tok-variableName tok-local",
          },
          {
            tag: eV.definition(eV.variableName),
            class: "tok-variableName tok-definition",
          },
          { tag: eV.special(eV.variableName), class: "tok-variableName2" },
          {
            tag: eV.definition(eV.propertyName),
            class: "tok-propertyName tok-definition",
          },
          { tag: eV.typeName, class: "tok-typeName" },
          { tag: eV.namespace, class: "tok-namespace" },
          { tag: eV.className, class: "tok-className" },
          { tag: eV.macroName, class: "tok-macroName" },
          { tag: eV.propertyName, class: "tok-propertyName" },
          { tag: eV.operator, class: "tok-operator" },
          { tag: eV.comment, class: "tok-comment" },
          { tag: eV.meta, class: "tok-meta" },
          { tag: eV.invalid, class: "tok-invalid" },
          { tag: eV.punctuation, class: "tok-punctuation" },
        ]);
        let eW = new Set([
          25, 49, 50, 263, 65, 130, 56, 57, 238, 62, 63, 72, 73, 77, 60, 61,
          151, 152, 155, 112,
        ]);
        function eZ(e) {
          return 10 == e || 13 == e;
        }
        function eG(e) {
          return (
            (e >= 48 && e <= 57) ||
            (e >= 65 && e <= 70) ||
            (e >= 97 && e <= 102)
          );
        }
        let eY = new eo(
            (e, t) => {
              let n;
              if (e.next < 0) e.acceptToken(199);
              else if (t.context.flags & eX)
                eZ(e.next) && e.acceptToken(198, 1);
              else if (((n = e.peek(-1)) < 0 || eZ(n)) && t.canShift(197)) {
                let t = 0;
                for (; 32 == e.next || 9 == e.next; ) e.advance(), t++;
                (10 == e.next || 13 == e.next || 35 == e.next) &&
                  e.acceptToken(197, -t);
              } else eZ(e.next) && e.acceptToken(196, 1);
            },
            { contextual: !0 },
          ),
          eK = new eo((e, t) => {
            let n = t.context;
            if (n.flags) return;
            let r = e.peek(-1);
            if (10 == r || 13 == r) {
              let t = 0,
                r = 0;
              for (;;) {
                if (32 == e.next) t++;
                else if (9 == e.next) t += 8 - (t % 8);
                else break;
                e.advance(), r++;
              }
              t != n.indent &&
                10 != e.next &&
                13 != e.next &&
                35 != e.next &&
                (t < n.indent ? e.acceptToken(195, -r) : e.acceptToken(194));
            }
          }),
          eX = 1;
        function eJ(e, t, n) {
          (this.parent = e),
            (this.indent = t),
            (this.flags = n),
            (this.hash =
              (e ? (e.hash + e.hash) << 8 : 0) + t + (t << 4) + n + (n << 6));
        }
        let e0 = new eJ(null, 0, 0),
          e1 = new Map(
            [
              [241, 0],
              [242, 4],
              [243, 8],
              [244, 12],
              [245, 16],
              [246, 20],
              [247, 24],
              [248, 28],
              [249, 32],
              [250, 36],
              [251, 40],
              [252, 44],
              [253, 48],
              [254, 52],
              [255, 56],
              [256, 60],
            ].map(([e, t]) => [e, 2 | t]),
          ),
          e2 = new ev({
            start: e0,
            reduce: (e, t, n, r) =>
              (e.flags & eX && eW.has(t)) ||
              ((71 == t || 72 == t) && 2 & e.flags)
                ? e.parent
                : e,
            shift: (e, t, n, r) =>
              194 == t
                ? new eJ(
                    e,
                    (function (e) {
                      let t = 0;
                      for (let n = 0; n < e.length; n++)
                        t += 9 == e.charCodeAt(n) ? 8 - (t % 8) : 1;
                      return t;
                    })(r.read(r.pos, n.pos)),
                    0,
                  )
                : 195 == t
                  ? e.parent
                  : 24 == t || 55 == t || 59 == t || 3 == t
                    ? new eJ(e, 0, eX)
                    : e1.has(t)
                      ? new eJ(e, 0, e1.get(t) | (e.flags & eX))
                      : e,
            hash: (e) => e.hash,
          }),
          e5 = new eo((e) => {
            for (let t = 0; t < 5; t++) {
              if (e.next != "print".charCodeAt(t)) return;
              e.advance();
            }
            if (!/\w/.test(String.fromCharCode(e.next)))
              for (let t = 0; ; t++) {
                let n = e.peek(t);
                if (32 != n && 9 != n) {
                  40 != n &&
                    46 != n &&
                    10 != n &&
                    13 != n &&
                    35 != n &&
                    e.acceptToken(1);
                  return;
                }
              }
          }),
          e3 = new eo((e, t) => {
            let { flags: n } = t.context,
              r = 4 & n ? 34 : 39,
              i = (8 & n) > 0,
              s = !(16 & n),
              o = (32 & n) > 0,
              a = e.pos;
            for (;;)
              if (e.next < 0) break;
              else if (o && 123 == e.next)
                if (123 == e.peek(1)) e.advance(2);
                else {
                  if (e.pos == a) return void e.acceptToken(3, 1);
                  break;
                }
              else if (s && 92 == e.next) {
                if (e.pos == a) {
                  e.advance();
                  let t = e.next;
                  t >= 0 &&
                    (e.advance(),
                    (function (e, t) {
                      if (111 == t)
                        for (
                          let t = 0;
                          t < 2 && e.next >= 48 && e.next <= 55;
                          t++
                        )
                          e.advance();
                      else if (120 == t)
                        for (let t = 0; t < 2 && eG(e.next); t++) e.advance();
                      else if (117 == t)
                        for (let t = 0; t < 4 && eG(e.next); t++) e.advance();
                      else if (85 == t)
                        for (let t = 0; t < 8 && eG(e.next); t++) e.advance();
                      else if (78 == t && 123 == e.next) {
                        for (
                          e.advance();
                          e.next >= 0 &&
                          125 != e.next &&
                          39 != e.next &&
                          34 != e.next &&
                          10 != e.next;

                        )
                          e.advance();
                        125 == e.next && e.advance();
                      }
                    })(e, t)),
                    e.acceptToken(2);
                  return;
                }
                break;
              } else if (92 == e.next && !s && e.peek(1) > -1) e.advance(2);
              else if (e.next != r || (i && (e.peek(1) != r || e.peek(2) != r)))
                if (10 == e.next) {
                  if (i) e.advance();
                  else if (e.pos == a) return void e.acceptToken(201);
                  break;
                } else e.advance();
              else {
                if (e.pos == a) return void e.acceptToken(201, i ? 3 : 1);
                break;
              }
            e.pos > a && e.acceptToken(200);
          }),
          e4 = eS({
            'async "*" "**" FormatConversion FormatSpec': eV.modifier,
            "for while if elif else try except finally return raise break continue with pass assert await yield match case":
              eV.controlKeyword,
            "in not and or is del": eV.operatorKeyword,
            "from def class global nonlocal lambda": eV.definitionKeyword,
            import: eV.moduleKeyword,
            "with as print": eV.keyword,
            Boolean: eV.bool,
            None: eV.null,
            VariableName: eV.variableName,
            "CallExpression/VariableName": eV.function(eV.variableName),
            "FunctionDefinition/VariableName": eV.function(
              eV.definition(eV.variableName),
            ),
            "ClassDefinition/VariableName": eV.definition(eV.className),
            PropertyName: eV.propertyName,
            "CallExpression/MemberExpression/PropertyName": eV.function(
              eV.propertyName,
            ),
            Comment: eV.lineComment,
            Number: eV.number,
            String: eV.string,
            FormatString: eV.special(eV.string),
            Escape: eV.escape,
            UpdateOp: eV.updateOperator,
            "ArithOp!": eV.arithmeticOperator,
            BitOp: eV.bitwiseOperator,
            CompareOp: eV.compareOperator,
            AssignOp: eV.definitionOperator,
            Ellipsis: eV.punctuation,
            At: eV.meta,
            "( )": eV.paren,
            "[ ]": eV.squareBracket,
            "{ }": eV.brace,
            ".": eV.derefOperator,
            ", ;": eV.separator,
          }),
          e8 = {
            __proto__: null,
            await: 44,
            or: 54,
            and: 56,
            in: 60,
            not: 62,
            is: 64,
            if: 70,
            else: 72,
            lambda: 76,
            yield: 94,
            from: 96,
            async: 102,
            for: 104,
            None: 162,
            True: 164,
            False: 164,
            del: 178,
            pass: 182,
            break: 186,
            continue: 190,
            return: 194,
            raise: 202,
            import: 206,
            as: 208,
            global: 212,
            nonlocal: 214,
            assert: 218,
            type: 223,
            elif: 236,
            while: 240,
            try: 246,
            except: 248,
            finally: 250,
            with: 254,
            def: 258,
            class: 268,
            match: 279,
            case: 285,
          },
          e6 = eb.deserialize({
            version: 14,
            states:
              "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5TQdO'#DoOOQS,5:Y,5:YO5hQdO'#HdOOQS,5:],5:]O5uQ!fO,5:]O5zQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8jQdO,59bO8oQdO,59bO8vQdO,59jO8}QdO'#HTO:TQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:lQdO,59aO'vQdO,59aO:zQdO,59aOOQS,59y,59yO;PQdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;_QdO,5:QO;dQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;uQdO,5:UO;zQdO,5:WOOOW'#Fy'#FyO<POWO,5:aOOQS,5:a,5:aO<[QdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<lOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<zQtO,5:iO?lQtO,5=`O@VQ#xO,5=`O@vQtO,5=`OOQS,5:},5:}OA_QeO'#GWOBqQdO,5;^OOQV,5=^,5=^OB|QtO'#IPOCkQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCsQtO,59]OEzQtO,59iOFeQdO'#HVOFpQdO'#HVO1XQdO'#HVOF{QdO'#DTOGTQdO,59mOGYQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGwQdO'#GPOHXQdO,58|OHXQdO,58|O*xQdO,5:oOHgQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHzQdO,5;OOI]QdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOIqQtO,5;QOJPQdO,5;QOJUQdO'#IQOOQS,5;T,5;TOJdQdO'#H|OOQS,5;W,5;WOJuQdO,5;YO4iQdO,5;`O4iQdO,5;cOJ}QtO'#ITO'vQdO'#ITOKXQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOK^QeO'#EuOLjQgO,5;fO!!kQdO'#IUO4iQdO,5;jO!!vQdO,5;lO!#OQdO,5;qO!#ZQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#bOSO,5=[P!#jOdO,5=[O!&bQtO1G.jO!&iQtO1G.jO!)YQtO1G.jO!)dQtO1G.jO!+}QtO1G.jO!,bQtO1G.jO!,uQdO'#HcO!-TQtO'#GuO0rQdO'#HcO!-_QdO'#HbOOQS,5:Z,5:ZO!-gQdO,5:ZO!-lQdO'#HeO!-wQdO'#HeO!.[QdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/[QtO1G.|O!/cQtO1G.|O1lQdO1G.|O!0OQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!0VQdO1G/eO!0gQdO1G/eO!0oQdO1G/fO'vQdO'#H[O!0tQdO'#H[O!0yQtO1G.{O!1ZQdO,59iO!2aQdO,5=zO!2qQdO,5=zO!2yQdO1G/mO!3OQtO1G/mOOQS1G/l1G/lO!3`QdO,5=uO!4VQdO,5=uO0rQdO1G/qO!4tQdO1G/sO!4yQtO1G/sO!5ZQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5kQdO'#HxO0rQdO'#HxO!5|QdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6[Q#xO1G2zO!6{QtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7dQtO,5>kOOQS1G1`1G1`O!8RQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!8WQdO'#FrO!8cQdO,59oO!8kQdO1G/XO!8uQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9fQdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9wQdO1G.hOOQS1G0Z1G0ZO!:VQdO,5=wO!:gQdO,5=wO0rQdO1G0jO0rQdO1G0jO!:xQdO,5>jO!;ZQdO,5>jO1XQdO,5>jO!;lQdO,5>iOOQS-E:R-E:RO!;qQdO1G0lO!;|QdO1G0lO!<RQdO,5>lO!<aQdO,5>lO!<oQdO,5>hO!=VQdO,5>hO!=hQdO'#EpO0rQdO1G0tO!=sQdO1G0tO!=xQgO1G0zO!AvQgO1G0}O!EqQdO,5>oO!E{QdO,5>oO!FTQtO,5>oO0rQdO1G1PO!F_QdO1G1PO4iQdO1G1UO!!vQdO1G1WOOQV,5;a,5;aO!FdQfO,5;aO!FiQgO1G1QO!JjQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JzQdO,5>pO!KXQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KaQdO'#FSO!KrQ!fO1G1WO!KzQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!LPQdO1G1]O!LXQdO'#F^OOQV1G1b1G1bO!#ZQtO1G1bPOOO1G2v1G2vP!L^OSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LfQdO,5=|O!LyQdO,5=|OOQS1G/u1G/uO!MRQdO,5>PO!McQdO,5>PO!MkQdO,5>PO!NOQdO,5>PO!N`QdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8kQdO7+$pO#!RQdO1G.|O#!YQdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!aQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!qQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!vQdO7+%PO##OQdO7+%QO##TQdO1G3fOOQS7+%X7+%XO##eQdO1G3fO##mQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##rQdO1G3aOOQS-E9q-E9qO#$iQdO7+%]OOQS7+%_7+%_O#$wQdO1G3aO#%fQdO7+%_O#%kQdO1G3gO#%{QdO1G3gO#&TQdO7+%]O#&YQdO,5>dO#&sQdO,5>dO#&sQdO,5>dOOQS'#Dx'#DxO#'UO&jO'#DzO#'aO`O'#HyOOOW1G3}1G3}O#'fQdO1G3}O#'nQdO1G3}O#'yQ#xO7+(fO#(jQtO1G2UP#)TQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)bQdO,5=`O#){QdO,5=`O#*^QtO,5<aO#*qQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#+RQdO7+&UO#+aQdO,5<nO#+uQdO1G4UOOQS-E:Q-E:QO#,WQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,iQdO7+&WOOQS,5<p,5<pO#,tQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#-SQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-jQdO'#EqO#-uQdO'#IRO#-}QdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#.SQgO7+&fO!JmQdO'#GXO4iQdO7+&fO4iQdO7+&iO#2QQtO,5<tO'vQdO,5<tO#2[QdO1G4ZOOQS-E:W-E:WO#2fQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KrQ!fO7+&rO!KzQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2nQdO,5<uO!JmQdO,5<uOOQV7+&l7+&lO#2yQgO7+&lO#6tQdO,5<vO#7PQdO1G4[OOQS-E:Y-E:YO#7^QdO1G4[O#7fQdO'#IWO#7tQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#8PQdO'#IVOOQS,5;n,5;nO#8XQdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8^QfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8cQdO1G3iOOQS,5<c,5<cO#8qQdO1G3hOOQS-E9u-E9uO#9UQdO,5<dO#9aQdO,5<dO#9tQdO1G3kOOQS-E9v-E9vO#:UQdO1G3kO#:^QdO1G3kO#:nQdO1G3kO#:UQdO1G3kOOQS<<H[<<H[O#:yQtO1G1zOOQS<<Hk<<HkP#;WQdO'#FtO8vQdO1G3bO#;eQdO1G3bO#;jQdO<<HkOOQS<<Hl<<HlO#;zQdO7+)QOOQS<<Hs<<HsO#<[QtO1G1yP#<{QdO'#FsO#=YQdO7+)RO#=jQdO7+)RO#=rQdO<<HwO#=wQdO7+({OOQS<<Hy<<HyO#>nQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>sQdO1G4OOOQS-E9y-E9yO#?^QdO1G4OO<[QdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?oO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?zQdO7+)iO#@SQdO1G2zO#@mQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#AOQdO7+)pO#AaQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#ArQdO,5>mO#BQQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#BYQtO1G2`P#BdQdO'#GYO#BkQdO7+)uO#BuQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KrQ!fO<<J^O#FpQgO7+&gOOQV<<JW<<JWO#FzQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JuQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#KQQdO7+)vO#K_QdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KgQdO,5>rO#KrQdO,5>rO#K}QdO,5>qO#L`QdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LhQdO1G1dOOQS7+)T7+)TP#LmQdO'#FwO#L}QdO1G2OO#MbQdO1G2OO#MrQdO1G2OP#M}QdO'#FxO#N[QdO7+)VO#NlQdO7+)VO#NlQdO7+)VO#NtQdO7+)VO$ UQdO7+(|O8vQdO7+(|OOQSAN>VAN>VO$ oQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$!PQtO1G1|P$!ZQdO'#FvOOQS1G2R1G2RP$!hQdO'#F{O$!uQdO7+)jO$#`QdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#nQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$$XQdO<<M[OOQS,5<q,5<qO$$jQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$xQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$(sQdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$)QQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$)cQfO7+'OO$)nQdO'#F_O$*uQdO7+'jO$+VQdO7+'jOOQS7+'j7+'jO$+bQdO<<LqO$+rQdO<<LqO$+rQdO<<LqO$+zQdO'#H^OOQS<<Lh<<LhO$,UQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,oQdO1G4RO$,wQdO1G4RP!=hQdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$-SQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-vQtO'#FaOOQS'#Fc'#FcO$.WQdO'#FbO$.xQdO'#FbOOQS'#Fb'#FbO$.}QdO'#IYO$)nQdO'#FiO$)nQdO'#FiO$/fQdO'#FjO$)nQdO'#FkO$/mQdO'#IZOOQS'#IZ'#IZO$0[QdO,5;yOOQS<<KU<<KUO$0dQdO<<KUO$0tQdOANB]O$1UQdOANB]O$1^QdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1wQdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$2`QdO7+)mOOQVLD*wLD*wOOQVANARANARO5uQ!fO'#GaO$2hQtO,5<SO$)nQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$3YQdO,5;|O$3_QdO,5;|OOQS'#Fg'#FgO$)nQdO'#G`O$4PQdO,5<QO$4kQdO,5>tO$4{QdO,5>tO1XQdO,5<PO$5^QdO,5<TO$5cQdO,5<TO$)nQdO'#I[O$5hQdO'#I[O$5mQdO,5<UOOQS,5<V,5<VO0rQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5rQdOG27wO$6SQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$6XQtO'#FaO$6`QdO'#I]O$6nQdO'#I]O$6vQdO,5<XOOQS1G1h1G1hO$6{QdO1G1hO$7QQdO,5<zOOQS-E:^-E:^O$7lQdO,5=OO$8TQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$8eQdO,5>vO$)nQdO,5>vOOQS1G1p1G1pOOQS,5<[,5<[OOQU7+'P7+'PO$+zQdO1G/iO$)nQdO,5<YO$8sQdO,5>wO$8zQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)nQdO'#GdO$9SQdO1G4bO$9^QdO1G4bO$9fQdO1G4bOOQS7+%T7+%TO$9tQdO1G1tO$:SQtO'#FaO$:ZQdO,5<}OOQS,5<},5<}O$:iQdO1G4cOOQS-E:a-E:aO$)nQdO,5<|O$:pQdO,5<|O$:uQdO7+)|OOQS-E:`-E:`O$;PQdO7+)|O$)nQdO,5<ZP$)nQdO'#GcO$;XQdO1G2hO$)nQdO1G2hP$;gQdO'#GbO$;nQdO<<MhO$;xQdO1G1uO$<WQdO7+(SO8vQdO'#C}O8vQdO,59bO8vQdO,59bO8vQdO,59bO$<fQtO,5=`O8vQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<yQdO'#GOO'vQdO'#GtO$=WQdO,59bO$=]QdO,59bO$=dQdO,59mO$=iQdO1G/UO1sQdO'#DRO8vQdO,59j",
            stateData:
              "$>S~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%_$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PEcO%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO%_'hO~OS'iO%['hO%_'hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#uO%kWi~P!#uOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&pO%mWi%nWi~P!&pOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)nOVWi_Wi%qWi%rWi%sWi~P!)nO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.aOlji~P!.aOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/jOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PEcOV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO%_*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!NkOlji~P!NkOV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~O{#{Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/jOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/jO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$-bO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)zOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/jOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)nOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$-bOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)nOz/zO#[/OO%j.yO!['Oa~Og'Pa~P$)nOz0SOg'Pa~Oa0UO!['Oi~P$)zOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$-bO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)nO{0^O~Oa0UO!['Oq~P$)zOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)zOa0UO!['Oy~P$)zO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/jO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
            goto: "!=j'QPPPPPP'RP'Z*s+[+t,_,y-fP.SP'Z.r.r'ZPPP'Z2[PPPPPP2[5PPP5PP7b7k=sPP=v>h>kPP'Z'ZPP>zPP'Z'ZPP'Z'Z'Z'Z'Z?O?w'ZP?zP@QDXGuGyPG|HWH['ZPPPH_Hk'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHqH}IVPI^IdPI^PI^I^PPPI^PKrPK{LVL]KrPI^LfPI^PLmLsPLwM]MzNeLwLwNkNxLwLwLwLw! ^! d! g! l! o! y!!P!!]!!o!!u!#P!#V!#s!#y!$P!$Z!$a!$g!$y!%T!%Z!%a!%k!%q!%w!%}!&T!&Z!&e!&k!&u!&{!'U!'[!'k!'s!'}!(UPPPPPPPPPPP!([!(_!(e!(n!(x!)TPPPPPPPPPPPP!-u!/Z!3^!6oPP!6w!7W!7a!8Y!8P!8c!8i!8l!8o!8r!8z!9jPPPPPPPPPPPPPPPPP!9m!9q!9wP!:]!:a!:m!:v!;S!;j!;m!;p!;v!;|!<S!<VP!<_!<h!=d!=g]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r{!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g}!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!P!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!R!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!T!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!V!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!Z!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&eVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0r%oXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s!Y!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aQ,^*RR-e,_X#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&dQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uQ.S-fR/q/VhUOn#d#g$j%|&_'w(p(r)t,P%U!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!Z!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
            nodeNames:
              "⚠ print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
            maxTerm: 277,
            context: e2,
            nodeProps: [
              ["isolate", -5, 4, 71, 72, 73, 77, ""],
              [
                "group",
                -15,
                6,
                85,
                87,
                88,
                90,
                92,
                94,
                96,
                98,
                99,
                100,
                102,
                105,
                108,
                110,
                "Statement Statement",
                -22,
                8,
                18,
                21,
                25,
                40,
                49,
                50,
                56,
                57,
                60,
                61,
                62,
                63,
                64,
                67,
                70,
                71,
                72,
                79,
                80,
                81,
                82,
                "Expression",
                -10,
                114,
                116,
                119,
                121,
                122,
                126,
                128,
                133,
                135,
                138,
                "Statement",
                -9,
                143,
                144,
                147,
                148,
                150,
                151,
                152,
                153,
                154,
                "Pattern",
              ],
              ["openedBy", 23, "(", 54, "[", 58, "{"],
              ["closedBy", 24, ")", 55, "]", 59, "}"],
            ],
            propSources: [e4],
            skippedNodes: [0, 4],
            repeatNodeCount: 34,
            tokenData:
              "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
            tokenizers: [e5, eK, eY, e3, 0, 1, 2, 3, 4],
            topRules: { Script: [0, 5] },
            specialized: [{ term: 221, get: (e) => e8[e] || -1 }],
            tokenPrec: 7668,
          }),
          e9 = [],
          e7 = [];
        function te(e) {
          return e >= 127462 && e <= 127487;
        }
        function tt(e, t, n) {
          if (t == e.length) return t;
          t && tr(e.charCodeAt(t)) && ti(e.charCodeAt(t - 1)) && t--;
          let r = tn(e, t);
          for (t += ts(r); t < e.length; ) {
            let i = tn(e, t);
            if (
              8205 == r ||
              8205 == i ||
              (n &&
                (function (e) {
                  if (e < 768) return !1;
                  for (let t = 0, n = e9.length; ; ) {
                    let r = (t + n) >> 1;
                    if (e < e9[r]) n = r;
                    else {
                      if (!(e >= e7[r])) return !0;
                      t = r + 1;
                    }
                    if (t == n) return !1;
                  }
                })(i))
            )
              (t += ts(i)), (r = i);
            else if (te(i)) {
              let n = 0,
                r = t - 2;
              for (; r >= 0 && te(tn(e, r)); ) n++, (r -= 2);
              if (n % 2 == 0) break;
              t += 2;
            } else break;
          }
          return t;
        }
        function tn(e, t) {
          let n = e.charCodeAt(t);
          if (!ti(n) || t + 1 == e.length) return n;
          let r = e.charCodeAt(t + 1);
          return tr(r) ? ((n - 55296) << 10) + (r - 56320) + 65536 : n;
        }
        function tr(e) {
          return e >= 56320 && e < 57344;
        }
        function ti(e) {
          return e >= 55296 && e < 56320;
        }
        function ts(e) {
          return e < 65536 ? 1 : 2;
        }
        (() => {
          let e =
            "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o"
              .split(",")
              .map((e) => (e ? parseInt(e, 36) : 1));
          for (let t = 0, n = 0; t < e.length; t++)
            (t % 2 ? e7 : e9).push((n += e[t]));
        })();
        class to {
          lineAt(e) {
            if (e < 0 || e > this.length)
              throw RangeError(
                `Invalid position ${e} in document of length ${this.length}`,
              );
            return this.lineInner(e, !1, 1, 0);
          }
          line(e) {
            if (e < 1 || e > this.lines)
              throw RangeError(
                `Invalid line number ${e} in ${this.lines}-line document`,
              );
            return this.lineInner(e, !0, 1, 0);
          }
          replace(e, t, n) {
            [e, t] = tf(this, e, t);
            let r = [];
            return (
              this.decompose(0, e, r, 2),
              n.length && n.decompose(0, n.length, r, 3),
              this.decompose(t, this.length, r, 1),
              tl.from(r, this.length - (t - e) + n.length)
            );
          }
          append(e) {
            return this.replace(this.length, this.length, e);
          }
          slice(e, t = this.length) {
            [e, t] = tf(this, e, t);
            let n = [];
            return this.decompose(e, t, n, 0), tl.from(n, t - e);
          }
          eq(e) {
            if (e == this) return !0;
            if (e.length != this.length || e.lines != this.lines) return !1;
            let t = this.scanIdentical(e, 1),
              n = this.length - this.scanIdentical(e, -1),
              r = new tu(this),
              i = new tu(e);
            for (let e = t, s = t; ; ) {
              if (
                (r.next(e),
                i.next(e),
                (e = 0),
                r.lineBreak != i.lineBreak ||
                  r.done != i.done ||
                  r.value != i.value)
              )
                return !1;
              if (((s += r.value.length), r.done || s >= n)) return !0;
            }
          }
          iter(e = 1) {
            return new tu(this, e);
          }
          iterRange(e, t = this.length) {
            return new td(this, e, t);
          }
          iterLines(e, t) {
            let n;
            if (null == e) n = this.iter();
            else {
              null == t && (t = this.lines + 1);
              let r = this.line(e).from;
              n = this.iterRange(
                r,
                Math.max(
                  r,
                  t == this.lines + 1
                    ? this.length
                    : t <= 1
                      ? 0
                      : this.line(t - 1).to,
                ),
              );
            }
            return new th(n);
          }
          toString() {
            return this.sliceString(0);
          }
          toJSON() {
            let e = [];
            return this.flatten(e), e;
          }
          constructor() {}
          static of(e) {
            if (0 == e.length)
              throw RangeError("A document must have at least one line");
            return 1 != e.length || e[0]
              ? e.length <= 32
                ? new ta(e)
                : tl.from(ta.split(e, []))
              : to.empty;
          }
        }
        class ta extends to {
          constructor(
            e,
            t = (function (e) {
              let t = -1;
              for (let n of e) t += n.length + 1;
              return t;
            })(e),
          ) {
            super(), (this.text = e), (this.length = t);
          }
          get lines() {
            return this.text.length;
          }
          get children() {
            return null;
          }
          lineInner(e, t, n, r) {
            for (let i = 0; ; i++) {
              let s = this.text[i],
                o = r + s.length;
              if ((t ? n : o) >= e) return new tp(r, o, n, s);
              (r = o + 1), n++;
            }
          }
          decompose(e, t, n, r) {
            var i;
            let s =
              e <= 0 && t >= this.length
                ? this
                : new ta(
                    ((i = this.text), tc(i, [""], e, t)),
                    Math.min(t, this.length) - Math.max(0, e),
                  );
            if (1 & r) {
              let e = n.pop(),
                t = tc(s.text, e.text.slice(), 0, s.length);
              if (t.length <= 32) n.push(new ta(t, e.length + s.length));
              else {
                let e = t.length >> 1;
                n.push(new ta(t.slice(0, e)), new ta(t.slice(e)));
              }
            } else n.push(s);
          }
          replace(e, t, n) {
            var r, i;
            if (!(n instanceof ta)) return super.replace(e, t, n);
            [e, t] = tf(this, e, t);
            let s = tc(
                this.text,
                tc(n.text, ((r = this.text), (i = 0), tc(r, [""], 0, e))),
                t,
              ),
              o = this.length + n.length - (t - e);
            return s.length <= 32 ? new ta(s, o) : tl.from(ta.split(s, []), o);
          }
          sliceString(e, t = this.length, n = "\n") {
            [e, t] = tf(this, e, t);
            let r = "";
            for (let i = 0, s = 0; i <= t && s < this.text.length; s++) {
              let o = this.text[s],
                a = i + o.length;
              i > e && s && (r += n),
                e < a && t > i && (r += o.slice(Math.max(0, e - i), t - i)),
                (i = a + 1);
            }
            return r;
          }
          flatten(e) {
            for (let t of this.text) e.push(t);
          }
          scanIdentical() {
            return 0;
          }
          static split(e, t) {
            let n = [],
              r = -1;
            for (let i of e)
              n.push(i),
                (r += i.length + 1),
                32 == n.length && (t.push(new ta(n, r)), (n = []), (r = -1));
            return r > -1 && t.push(new ta(n, r)), t;
          }
        }
        class tl extends to {
          constructor(e, t) {
            for (let n of (super(),
            (this.children = e),
            (this.length = t),
            (this.lines = 0),
            e))
              this.lines += n.lines;
          }
          lineInner(e, t, n, r) {
            for (let i = 0; ; i++) {
              let s = this.children[i],
                o = r + s.length,
                a = n + s.lines - 1;
              if ((t ? a : o) >= e) return s.lineInner(e, t, n, r);
              (r = o + 1), (n = a + 1);
            }
          }
          decompose(e, t, n, r) {
            for (let i = 0, s = 0; s <= t && i < this.children.length; i++) {
              let o = this.children[i],
                a = s + o.length;
              if (e <= a && t >= s) {
                let i = r & (+(s <= e) | (2 * (a >= t)));
                s >= e && a <= t && !i
                  ? n.push(o)
                  : o.decompose(e - s, t - s, n, i);
              }
              s = a + 1;
            }
          }
          replace(e, t, n) {
            if ((([e, t] = tf(this, e, t)), n.lines < this.lines))
              for (let r = 0, i = 0; r < this.children.length; r++) {
                let s = this.children[r],
                  o = i + s.length;
                if (e >= i && t <= o) {
                  let a = s.replace(e - i, t - i, n),
                    l = this.lines - s.lines + a.lines;
                  if (a.lines < l >> 4 && a.lines > l >> 6) {
                    let i = this.children.slice();
                    return (
                      (i[r] = a), new tl(i, this.length - (t - e) + n.length)
                    );
                  }
                  return super.replace(i, o, a);
                }
                i = o + 1;
              }
            return super.replace(e, t, n);
          }
          sliceString(e, t = this.length, n = "\n") {
            [e, t] = tf(this, e, t);
            let r = "";
            for (let i = 0, s = 0; i < this.children.length && s <= t; i++) {
              let o = this.children[i],
                a = s + o.length;
              s > e && i && (r += n),
                e < a && t > s && (r += o.sliceString(e - s, t - s, n)),
                (s = a + 1);
            }
            return r;
          }
          flatten(e) {
            for (let t of this.children) t.flatten(e);
          }
          scanIdentical(e, t) {
            if (!(e instanceof tl)) return 0;
            let n = 0,
              [r, i, s, o] =
                t > 0
                  ? [0, 0, this.children.length, e.children.length]
                  : [this.children.length - 1, e.children.length - 1, -1, -1];
            for (; ; r += t, i += t) {
              if (r == s || i == o) return n;
              let a = this.children[r],
                l = e.children[i];
              if (a != l) return n + a.scanIdentical(l, t);
              n += a.length + 1;
            }
          }
          static from(e, t = e.reduce((e, t) => e + t.length + 1, -1)) {
            let n = 0;
            for (let t of e) n += t.lines;
            if (n < 32) {
              let n = [];
              for (let t of e) t.flatten(n);
              return new ta(n, t);
            }
            let r = Math.max(32, n >> 5),
              i = r << 1,
              s = r >> 1,
              o = [],
              a = 0,
              l = -1,
              c = [];
            function u() {
              0 != a &&
                (o.push(1 == c.length ? c[0] : tl.from(c, l)),
                (l = -1),
                (a = c.length = 0));
            }
            for (let t of e)
              !(function e(t) {
                let n;
                if (t.lines > i && t instanceof tl)
                  for (let n of t.children) e(n);
                else
                  t.lines > s && (a > s || !a)
                    ? (u(), o.push(t))
                    : t instanceof ta &&
                        a &&
                        (n = c[c.length - 1]) instanceof ta &&
                        t.lines + n.lines <= 32
                      ? ((a += t.lines),
                        (l += t.length + 1),
                        (c[c.length - 1] = new ta(
                          n.text.concat(t.text),
                          n.length + 1 + t.length,
                        )))
                      : (a + t.lines > r && u(),
                        (a += t.lines),
                        (l += t.length + 1),
                        c.push(t));
              })(t);
            return u(), 1 == o.length ? o[0] : new tl(o, t);
          }
        }
        function tc(e, t, n = 0, r = 1e9) {
          for (let i = 0, s = 0, o = !0; s < e.length && i <= r; s++) {
            let a = e[s],
              l = i + a.length;
            l >= n &&
              (l > r && (a = a.slice(0, r - i)),
              i < n && (a = a.slice(n - i)),
              o ? ((t[t.length - 1] += a), (o = !1)) : t.push(a)),
              (i = l + 1);
          }
          return t;
        }
        to.empty = new ta([""], 0);
        class tu {
          constructor(e, t = 1) {
            (this.dir = t),
              (this.done = !1),
              (this.lineBreak = !1),
              (this.value = ""),
              (this.nodes = [e]),
              (this.offsets = [
                t > 0
                  ? 1
                  : (e instanceof ta ? e.text.length : e.children.length) << 1,
              ]);
          }
          nextInner(e, t) {
            for (this.done = this.lineBreak = !1; ; ) {
              let n = this.nodes.length - 1,
                r = this.nodes[n],
                i = this.offsets[n],
                s = i >> 1,
                o = r instanceof ta ? r.text.length : r.children.length;
              if (s == (t > 0 ? o : 0)) {
                if (0 == n) return (this.done = !0), (this.value = ""), this;
                t > 0 && this.offsets[n - 1]++,
                  this.nodes.pop(),
                  this.offsets.pop();
              } else if ((1 & i) == (t > 0 ? 0 : 1)) {
                if (((this.offsets[n] += t), 0 == e))
                  return (this.lineBreak = !0), (this.value = "\n"), this;
                e--;
              } else if (r instanceof ta) {
                let i = r.text[s + (t < 0 ? -1 : 0)];
                if (((this.offsets[n] += t), i.length > Math.max(0, e)))
                  return (
                    (this.value =
                      0 == e
                        ? i
                        : t > 0
                          ? i.slice(e)
                          : i.slice(0, i.length - e)),
                    this
                  );
                e -= i.length;
              } else {
                let i = r.children[s + (t < 0 ? -1 : 0)];
                e > i.length
                  ? ((e -= i.length), (this.offsets[n] += t))
                  : (t < 0 && this.offsets[n]--,
                    this.nodes.push(i),
                    this.offsets.push(
                      t > 0
                        ? 1
                        : (i instanceof ta
                            ? i.text.length
                            : i.children.length) << 1,
                    ));
              }
            }
          }
          next(e = 0) {
            return (
              e < 0 && (this.nextInner(-e, -this.dir), (e = this.value.length)),
              this.nextInner(e, this.dir)
            );
          }
        }
        class td {
          constructor(e, t, n) {
            (this.value = ""),
              (this.done = !1),
              (this.cursor = new tu(e, t > n ? -1 : 1)),
              (this.pos = t > n ? e.length : 0),
              (this.from = Math.min(t, n)),
              (this.to = Math.max(t, n));
          }
          nextInner(e, t) {
            if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
              return (this.value = ""), (this.done = !0), this;
            e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos);
            let n = t < 0 ? this.pos - this.from : this.to - this.pos;
            e > n && (e = n), (n -= e);
            let { value: r } = this.cursor.next(e);
            return (
              (this.pos += (r.length + e) * t),
              (this.value =
                r.length <= n
                  ? r
                  : t < 0
                    ? r.slice(r.length - n)
                    : r.slice(0, n)),
              (this.done = !this.value),
              this
            );
          }
          next(e = 0) {
            return (
              e < 0
                ? (e = Math.max(e, this.from - this.pos))
                : e > 0 && (e = Math.min(e, this.to - this.pos)),
              this.nextInner(e, this.cursor.dir)
            );
          }
          get lineBreak() {
            return this.cursor.lineBreak && "" != this.value;
          }
        }
        class th {
          constructor(e) {
            (this.inner = e),
              (this.afterBreak = !0),
              (this.value = ""),
              (this.done = !1);
          }
          next(e = 0) {
            let { done: t, lineBreak: n, value: r } = this.inner.next(e);
            return (
              t && this.afterBreak
                ? ((this.value = ""), (this.afterBreak = !1))
                : t
                  ? ((this.done = !0), (this.value = ""))
                  : n
                    ? this.afterBreak
                      ? (this.value = "")
                      : ((this.afterBreak = !0), this.next())
                    : ((this.value = r), (this.afterBreak = !1)),
              this
            );
          }
          get lineBreak() {
            return !1;
          }
        }
        "undefined" != typeof Symbol &&
          ((to.prototype[Symbol.iterator] = function () {
            return this.iter();
          }),
          (tu.prototype[Symbol.iterator] =
            td.prototype[Symbol.iterator] =
            th.prototype[Symbol.iterator] =
              function () {
                return this;
              }));
        class tp {
          constructor(e, t, n, r) {
            (this.from = e), (this.to = t), (this.number = n), (this.text = r);
          }
          get length() {
            return this.to - this.from;
          }
        }
        function tf(e, t, n) {
          return [
            (t = Math.max(0, Math.min(e.length, t))),
            Math.max(t, Math.min(e.length, n)),
          ];
        }
        function tm(e, t, n = !0, r = !0) {
          return (function (e, t, n = !0, r = !0) {
            return (
              n
                ? tt
                : function (e, t, n) {
                    for (; t > 0; ) {
                      let r = tt(e, t - 2, n);
                      if (r < t) return r;
                      t--;
                    }
                    return 0;
                  }
            )(e, t, r);
          })(e, t, n, r);
        }
        function tg(e, t) {
          let n = e.charCodeAt(t);
          if (!(n >= 55296 && n < 56320) || t + 1 == e.length) return n;
          let r = e.charCodeAt(t + 1);
          return r >= 56320 && r < 57344
            ? ((n - 55296) << 10) + (r - 56320) + 65536
            : n;
        }
        function ty(e) {
          return e <= 65535
            ? String.fromCharCode(e)
            : String.fromCharCode(
                ((e -= 65536) >> 10) + 55296,
                (1023 & e) + 56320,
              );
        }
        function tv(e) {
          return e < 65536 ? 1 : 2;
        }
        let tb = /\r\n?|\n/;
        var tx = (function (e) {
          return (
            (e[(e.Simple = 0)] = "Simple"),
            (e[(e.TrackDel = 1)] = "TrackDel"),
            (e[(e.TrackBefore = 2)] = "TrackBefore"),
            (e[(e.TrackAfter = 3)] = "TrackAfter"),
            e
          );
        })(tx || (tx = {}));
        class tk {
          constructor(e) {
            this.sections = e;
          }
          get length() {
            let e = 0;
            for (let t = 0; t < this.sections.length; t += 2)
              e += this.sections[t];
            return e;
          }
          get newLength() {
            let e = 0;
            for (let t = 0; t < this.sections.length; t += 2) {
              let n = this.sections[t + 1];
              e += n < 0 ? this.sections[t] : n;
            }
            return e;
          }
          get empty() {
            return (
              0 == this.sections.length ||
              (2 == this.sections.length && this.sections[1] < 0)
            );
          }
          iterGaps(e) {
            for (let t = 0, n = 0, r = 0; t < this.sections.length; ) {
              let i = this.sections[t++],
                s = this.sections[t++];
              s < 0 ? (e(n, r, i), (r += i)) : (r += s), (n += i);
            }
          }
          iterChangedRanges(e, t = !1) {
            tT(this, e, t);
          }
          get invertedDesc() {
            let e = [];
            for (let t = 0; t < this.sections.length; ) {
              let n = this.sections[t++],
                r = this.sections[t++];
              r < 0 ? e.push(n, r) : e.push(r, n);
            }
            return new tk(e);
          }
          composeDesc(e) {
            return this.empty ? e : e.empty ? this : tE(this, e);
          }
          mapDesc(e, t = !1) {
            return e.empty ? this : tS(this, e, t);
          }
          mapPos(e, t = -1, n = tx.Simple) {
            let r = 0,
              i = 0;
            for (let s = 0; s < this.sections.length; ) {
              let o = this.sections[s++],
                a = this.sections[s++],
                l = r + o;
              if (a < 0) {
                if (l > e) return i + (e - r);
                i += o;
              } else {
                if (
                  n != tx.Simple &&
                  l >= e &&
                  ((n == tx.TrackDel && r < e && l > e) ||
                    (n == tx.TrackBefore && r < e) ||
                    (n == tx.TrackAfter && l > e))
                )
                  return null;
                if (l > e || (l == e && t < 0 && !o))
                  return e == r || t < 0 ? i : i + a;
                i += a;
              }
              r = l;
            }
            if (e > r)
              throw RangeError(
                `Position ${e} is out of range for changeset of length ${r}`,
              );
            return i;
          }
          touchesRange(e, t = e) {
            for (let n = 0, r = 0; n < this.sections.length && r <= t; ) {
              let i = this.sections[n++],
                s = this.sections[n++],
                o = r + i;
              if (s >= 0 && r <= t && o >= e)
                return !(r < e) || !(o > t) || "cover";
              r = o;
            }
            return !1;
          }
          toString() {
            let e = "";
            for (let t = 0; t < this.sections.length; ) {
              let n = this.sections[t++],
                r = this.sections[t++];
              e += (e ? " " : "") + n + (r >= 0 ? ":" + r : "");
            }
            return e;
          }
          toJSON() {
            return this.sections;
          }
          static fromJSON(e) {
            if (
              !Array.isArray(e) ||
              e.length % 2 ||
              e.some((e) => "number" != typeof e)
            )
              throw RangeError("Invalid JSON representation of ChangeDesc");
            return new tk(e);
          }
          static create(e) {
            return new tk(e);
          }
        }
        class tw extends tk {
          constructor(e, t) {
            super(e), (this.inserted = t);
          }
          apply(e) {
            if (this.length != e.length)
              throw RangeError(
                "Applying change set to a document with the wrong length",
              );
            return (
              tT(
                this,
                (t, n, r, i, s) => (e = e.replace(r, r + (n - t), s)),
                !1,
              ),
              e
            );
          }
          mapDesc(e, t = !1) {
            return tS(this, e, t, !0);
          }
          invert(e) {
            let t = this.sections.slice(),
              n = [];
            for (let r = 0, i = 0; r < t.length; r += 2) {
              let s = t[r],
                o = t[r + 1];
              if (o >= 0) {
                (t[r] = o), (t[r + 1] = s);
                let a = r >> 1;
                for (; n.length < a; ) n.push(to.empty);
                n.push(s ? e.slice(i, i + s) : to.empty);
              }
              i += s;
            }
            return new tw(t, n);
          }
          compose(e) {
            return this.empty ? e : e.empty ? this : tE(this, e, !0);
          }
          map(e, t = !1) {
            return e.empty ? this : tS(this, e, t, !0);
          }
          iterChanges(e, t = !1) {
            tT(this, e, t);
          }
          get desc() {
            return tk.create(this.sections);
          }
          filter(e) {
            let t = [],
              n = [],
              r = [],
              i = new tC(this);
            a: for (let s = 0, o = 0; ; ) {
              let a = s == e.length ? 1e9 : e[s++];
              for (; o < a || (o == a && 0 == i.len); ) {
                if (i.done) break a;
                let e = Math.min(i.len, a - o);
                t_(r, e, -1);
                let s = -1 == i.ins ? -1 : 0 == i.off ? i.ins : 0;
                t_(t, e, s), s > 0 && tO(n, t, i.text), i.forward(e), (o += e);
              }
              let l = e[s++];
              for (; o < l; ) {
                if (i.done) break a;
                let e = Math.min(i.len, l - o);
                t_(t, e, -1),
                  t_(r, e, -1 == i.ins ? -1 : 0 == i.off ? i.ins : 0),
                  i.forward(e),
                  (o += e);
              }
            }
            return { changes: new tw(t, n), filtered: tk.create(r) };
          }
          toJSON() {
            let e = [];
            for (let t = 0; t < this.sections.length; t += 2) {
              let n = this.sections[t],
                r = this.sections[t + 1];
              r < 0
                ? e.push(n)
                : 0 == r
                  ? e.push([n])
                  : e.push([n].concat(this.inserted[t >> 1].toJSON()));
            }
            return e;
          }
          static of(e, t, n) {
            let r = [],
              i = [],
              s = 0,
              o = null;
            function a(e = !1) {
              if (!e && !r.length) return;
              s < t && t_(r, t - s, -1);
              let n = new tw(r, i);
              (o = o ? o.compose(n.map(o)) : n), (r = []), (i = []), (s = 0);
            }
            return (
              !(function e(l) {
                if (Array.isArray(l)) for (let t of l) e(t);
                else if (l instanceof tw) {
                  if (l.length != t)
                    throw RangeError(
                      `Mismatched change set length (got ${l.length}, expected ${t})`,
                    );
                  a(), (o = o ? o.compose(l.map(o)) : l);
                } else {
                  let { from: e, to: o = e, insert: c } = l;
                  if (e > o || e < 0 || o > t)
                    throw RangeError(
                      `Invalid change range ${e} to ${o} (in doc of length ${t})`,
                    );
                  let u = c
                      ? "string" == typeof c
                        ? to.of(c.split(n || tb))
                        : c
                      : to.empty,
                    d = u.length;
                  if (e == o && 0 == d) return;
                  e < s && a(),
                    e > s && t_(r, e - s, -1),
                    t_(r, o - e, d),
                    tO(i, r, u),
                    (s = o);
                }
              })(e),
              a(!o),
              o
            );
          }
          static empty(e) {
            return new tw(e ? [e, -1] : [], []);
          }
          static fromJSON(e) {
            if (!Array.isArray(e))
              throw RangeError("Invalid JSON representation of ChangeSet");
            let t = [],
              n = [];
            for (let r = 0; r < e.length; r++) {
              let i = e[r];
              if ("number" == typeof i) t.push(i, -1);
              else if (
                !Array.isArray(i) ||
                "number" != typeof i[0] ||
                i.some((e, t) => t && "string" != typeof e)
              )
                throw RangeError("Invalid JSON representation of ChangeSet");
              else if (1 == i.length) t.push(i[0], 0);
              else {
                for (; n.length < r; ) n.push(to.empty);
                (n[r] = to.of(i.slice(1))), t.push(i[0], n[r].length);
              }
            }
            return new tw(t, n);
          }
          static createSet(e, t) {
            return new tw(e, t);
          }
        }
        function t_(e, t, n, r = !1) {
          if (0 == t && n <= 0) return;
          let i = e.length - 2;
          i >= 0 && n <= 0 && n == e[i + 1]
            ? (e[i] += t)
            : i >= 0 && 0 == t && 0 == e[i]
              ? (e[i + 1] += n)
              : r
                ? ((e[i] += t), (e[i + 1] += n))
                : e.push(t, n);
        }
        function tO(e, t, n) {
          if (0 == n.length) return;
          let r = (t.length - 2) >> 1;
          if (r < e.length) e[e.length - 1] = e[e.length - 1].append(n);
          else {
            for (; e.length < r; ) e.push(to.empty);
            e.push(n);
          }
        }
        function tT(e, t, n) {
          let r = e.inserted;
          for (let i = 0, s = 0, o = 0; o < e.sections.length; ) {
            let a = e.sections[o++],
              l = e.sections[o++];
            if (l < 0) (i += a), (s += a);
            else {
              let c = i,
                u = s,
                d = to.empty;
              for (
                ;
                (c += a),
                  (u += l),
                  l && r && (d = d.append(r[(o - 2) >> 1])),
                  !n && o != e.sections.length && !(e.sections[o + 1] < 0);

              )
                (a = e.sections[o++]), (l = e.sections[o++]);
              t(i, c, s, u, d), (i = c), (s = u);
            }
          }
        }
        function tS(e, t, n, r = !1) {
          let i = [],
            s = r ? [] : null,
            o = new tC(e),
            a = new tC(t);
          for (let e = -1; ; )
            if ((o.done && a.len) || (a.done && o.len))
              throw Error("Mismatched change set lengths");
            else if (-1 == o.ins && -1 == a.ins) {
              let e = Math.min(o.len, a.len);
              t_(i, e, -1), o.forward(e), a.forward(e);
            } else if (
              a.ins >= 0 &&
              (o.ins < 0 ||
                e == o.i ||
                (0 == o.off && (a.len < o.len || (a.len == o.len && !n))))
            ) {
              let t = a.len;
              for (t_(i, a.ins, -1); t; ) {
                let n = Math.min(o.len, t);
                o.ins >= 0 &&
                  e < o.i &&
                  o.len <= n &&
                  (t_(i, 0, o.ins), s && tO(s, i, o.text), (e = o.i)),
                  o.forward(n),
                  (t -= n);
              }
              a.next();
            } else if (o.ins >= 0) {
              let t = 0,
                n = o.len;
              for (; n; )
                if (-1 == a.ins) {
                  let e = Math.min(n, a.len);
                  (t += e), (n -= e), a.forward(e);
                } else if (0 == a.ins && a.len < n) (n -= a.len), a.next();
                else break;
              t_(i, t, e < o.i ? o.ins : 0),
                s && e < o.i && tO(s, i, o.text),
                (e = o.i),
                o.forward(o.len - n);
            } else if (o.done && a.done)
              return s ? tw.createSet(i, s) : tk.create(i);
            else throw Error("Mismatched change set lengths");
        }
        function tE(e, t, n = !1) {
          let r = [],
            i = n ? [] : null,
            s = new tC(e),
            o = new tC(t);
          for (let e = !1; ; )
            if (s.done && o.done) return i ? tw.createSet(r, i) : tk.create(r);
            else if (0 == s.ins) t_(r, s.len, 0, e), s.next();
            else if (0 != o.len || o.done)
              if (s.done || o.done)
                throw Error("Mismatched change set lengths");
              else {
                let t = Math.min(s.len2, o.len),
                  n = r.length;
                if (-1 == s.ins) {
                  let n = -1 == o.ins ? -1 : o.off ? 0 : o.ins;
                  t_(r, t, n, e), i && n && tO(i, r, o.text);
                } else
                  -1 == o.ins
                    ? (t_(r, s.off ? 0 : s.len, t, e),
                      i && tO(i, r, s.textBit(t)))
                    : (t_(r, s.off ? 0 : s.len, o.off ? 0 : o.ins, e),
                      i && !o.off && tO(i, r, o.text));
                (e =
                  (s.ins > t || (o.ins >= 0 && o.len > t)) &&
                  (e || r.length > n)),
                  s.forward2(t),
                  o.forward(t);
              }
            else t_(r, 0, o.ins, e), i && tO(i, r, o.text), o.next();
        }
        class tC {
          constructor(e) {
            (this.set = e), (this.i = 0), this.next();
          }
          next() {
            let { sections: e } = this.set;
            this.i < e.length
              ? ((this.len = e[this.i++]), (this.ins = e[this.i++]))
              : ((this.len = 0), (this.ins = -2)),
              (this.off = 0);
          }
          get done() {
            return -2 == this.ins;
          }
          get len2() {
            return this.ins < 0 ? this.len : this.ins;
          }
          get text() {
            let { inserted: e } = this.set,
              t = (this.i - 2) >> 1;
            return t >= e.length ? to.empty : e[t];
          }
          textBit(e) {
            let { inserted: t } = this.set,
              n = (this.i - 2) >> 1;
            return n >= t.length && !e
              ? to.empty
              : t[n].slice(this.off, null == e ? void 0 : this.off + e);
          }
          forward(e) {
            e == this.len ? this.next() : ((this.len -= e), (this.off += e));
          }
          forward2(e) {
            -1 == this.ins
              ? this.forward(e)
              : e == this.ins
                ? this.next()
                : ((this.ins -= e), (this.off += e));
          }
        }
        class tA {
          constructor(e, t, n) {
            (this.from = e), (this.to = t), (this.flags = n);
          }
          get anchor() {
            return 32 & this.flags ? this.to : this.from;
          }
          get head() {
            return 32 & this.flags ? this.from : this.to;
          }
          get empty() {
            return this.from == this.to;
          }
          get assoc() {
            return 8 & this.flags ? -1 : 16 & this.flags ? 1 : 0;
          }
          get bidiLevel() {
            let e = 7 & this.flags;
            return 7 == e ? null : e;
          }
          get goalColumn() {
            let e = this.flags >> 6;
            return 0xffffff == e ? void 0 : e;
          }
          map(e, t = -1) {
            let n, r;
            return (
              this.empty
                ? (n = r = e.mapPos(this.from, t))
                : ((n = e.mapPos(this.from, 1)), (r = e.mapPos(this.to, -1))),
              n == this.from && r == this.to ? this : new tA(n, r, this.flags)
            );
          }
          extend(e, t = e) {
            if (e <= this.anchor && t >= this.anchor) return tN.range(e, t);
            let n =
              Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t;
            return tN.range(this.anchor, n);
          }
          eq(e, t = !1) {
            return (
              this.anchor == e.anchor &&
              this.head == e.head &&
              (!t || !this.empty || this.assoc == e.assoc)
            );
          }
          toJSON() {
            return { anchor: this.anchor, head: this.head };
          }
          static fromJSON(e) {
            if (!e || "number" != typeof e.anchor || "number" != typeof e.head)
              throw RangeError(
                "Invalid JSON representation for SelectionRange",
              );
            return tN.range(e.anchor, e.head);
          }
          static create(e, t, n) {
            return new tA(e, t, n);
          }
        }
        class tN {
          constructor(e, t) {
            (this.ranges = e), (this.mainIndex = t);
          }
          map(e, t = -1) {
            return e.empty
              ? this
              : tN.create(
                  this.ranges.map((n) => n.map(e, t)),
                  this.mainIndex,
                );
          }
          eq(e, t = !1) {
            if (
              this.ranges.length != e.ranges.length ||
              this.mainIndex != e.mainIndex
            )
              return !1;
            for (let n = 0; n < this.ranges.length; n++)
              if (!this.ranges[n].eq(e.ranges[n], t)) return !1;
            return !0;
          }
          get main() {
            return this.ranges[this.mainIndex];
          }
          asSingle() {
            return 1 == this.ranges.length ? this : new tN([this.main], 0);
          }
          addRange(e, t = !0) {
            return tN.create(
              [e].concat(this.ranges),
              t ? 0 : this.mainIndex + 1,
            );
          }
          replaceRange(e, t = this.mainIndex) {
            let n = this.ranges.slice();
            return (n[t] = e), tN.create(n, this.mainIndex);
          }
          toJSON() {
            return {
              ranges: this.ranges.map((e) => e.toJSON()),
              main: this.mainIndex,
            };
          }
          static fromJSON(e) {
            if (
              !e ||
              !Array.isArray(e.ranges) ||
              "number" != typeof e.main ||
              e.main >= e.ranges.length
            )
              throw RangeError(
                "Invalid JSON representation for EditorSelection",
              );
            return new tN(
              e.ranges.map((e) => tA.fromJSON(e)),
              e.main,
            );
          }
          static single(e, t = e) {
            return new tN([tN.range(e, t)], 0);
          }
          static create(e, t = 0) {
            if (0 == e.length)
              throw RangeError("A selection needs at least one range");
            for (let n = 0, r = 0; r < e.length; r++) {
              let i = e[r];
              if (i.empty ? i.from <= n : i.from < n)
                return tN.normalized(e.slice(), t);
              n = i.to;
            }
            return new tN(e, t);
          }
          static cursor(e, t = 0, n, r) {
            return tA.create(
              e,
              e,
              (0 == t ? 0 : t < 0 ? 8 : 16) |
                (null == n ? 7 : Math.min(6, n)) |
                ((null != r ? r : 0xffffff) << 6),
            );
          }
          static range(e, t, n, r) {
            let i =
              ((null != n ? n : 0xffffff) << 6) |
              (null == r ? 7 : Math.min(6, r));
            return t < e
              ? tA.create(t, e, 48 | i)
              : tA.create(e, t, (8 * (t > e)) | i);
          }
          static normalized(e, t = 0) {
            let n = e[t];
            e.sort((e, t) => e.from - t.from), (t = e.indexOf(n));
            for (let n = 1; n < e.length; n++) {
              let r = e[n],
                i = e[n - 1];
              if (r.empty ? r.from <= i.to : r.from < i.to) {
                let s = i.from,
                  o = Math.max(r.to, i.to);
                n <= t && t--,
                  e.splice(
                    --n,
                    2,
                    r.anchor > r.head ? tN.range(o, s) : tN.range(s, o),
                  );
              }
            }
            return new tN(e, t);
          }
        }
        function tI(e, t) {
          for (let n of e.ranges)
            if (n.to > t)
              throw RangeError("Selection points outside of document");
        }
        let tD = 0;
        class tP {
          constructor(e, t, n, r, i) {
            (this.combine = e),
              (this.compareInput = t),
              (this.compare = n),
              (this.isStatic = r),
              (this.id = tD++),
              (this.default = e([])),
              (this.extensions = "function" == typeof i ? i(this) : i);
          }
          get reader() {
            return this;
          }
          static define(e = {}) {
            return new tP(
              e.combine || ((e) => e),
              e.compareInput || ((e, t) => e === t),
              e.compare || (!e.combine ? tR : (e, t) => e === t),
              !!e.static,
              e.enables,
            );
          }
          of(e) {
            return new tM([], this, 0, e);
          }
          compute(e, t) {
            if (this.isStatic) throw Error("Can't compute a static facet");
            return new tM(e, this, 1, t);
          }
          computeN(e, t) {
            if (this.isStatic) throw Error("Can't compute a static facet");
            return new tM(e, this, 2, t);
          }
          from(e, t) {
            return t || (t = (e) => e), this.compute([e], (n) => t(n.field(e)));
          }
        }
        function tR(e, t) {
          return (
            e == t || (e.length == t.length && e.every((e, n) => e === t[n]))
          );
        }
        class tM {
          constructor(e, t, n, r) {
            (this.dependencies = e),
              (this.facet = t),
              (this.type = n),
              (this.value = r),
              (this.id = tD++);
          }
          dynamicSlot(e) {
            var t;
            let n = this.value,
              r = this.facet.compareInput,
              i = this.id,
              s = e[i] >> 1,
              o = 2 == this.type,
              a = !1,
              l = !1,
              c = [];
            for (let n of this.dependencies)
              "doc" == n
                ? (a = !0)
                : "selection" == n
                  ? (l = !0)
                  : ((null != (t = e[n.id]) ? t : 1) & 1) == 0 &&
                    c.push(e[n.id]);
            return {
              create: (e) => ((e.values[s] = n(e)), 1),
              update(e, t) {
                if (
                  (a && t.docChanged) ||
                  (l && (t.docChanged || t.selection)) ||
                  tj(e, c)
                ) {
                  let t = n(e);
                  if (o ? !tL(t, e.values[s], r) : !r(t, e.values[s]))
                    return (e.values[s] = t), 1;
                }
                return 0;
              },
              reconfigure: (e, t) => {
                let a,
                  l = t.config.address[i];
                if (null != l) {
                  let i = tZ(t, l);
                  if (
                    this.dependencies.every((n) =>
                      n instanceof tP
                        ? t.facet(n) === e.facet(n)
                        : !(n instanceof tB) ||
                          t.field(n, !1) == e.field(n, !1),
                    ) ||
                    (o ? tL((a = n(e)), i, r) : r((a = n(e)), i))
                  )
                    return (e.values[s] = i), 0;
                } else a = n(e);
                return (e.values[s] = a), 1;
              },
            };
          }
        }
        function tL(e, t, n) {
          if (e.length != t.length) return !1;
          for (let r = 0; r < e.length; r++) if (!n(e[r], t[r])) return !1;
          return !0;
        }
        function tj(e, t) {
          let n = !1;
          for (let r of t) 1 & tW(e, r) && (n = !0);
          return n;
        }
        let tF = tP.define({ static: !0 });
        class tB {
          constructor(e, t, n, r, i) {
            (this.id = e),
              (this.createF = t),
              (this.updateF = n),
              (this.compareF = r),
              (this.spec = i),
              (this.provides = void 0);
          }
          static define(e) {
            let t = new tB(
              tD++,
              e.create,
              e.update,
              e.compare || ((e, t) => e === t),
              e,
            );
            return e.provide && (t.provides = e.provide(t)), t;
          }
          create(e) {
            let t = e.facet(tF).find((e) => e.field == this);
            return ((null == t ? void 0 : t.create) || this.createF)(e);
          }
          slot(e) {
            let t = e[this.id] >> 1;
            return {
              create: (e) => ((e.values[t] = this.create(e)), 1),
              update: (e, n) => {
                let r = e.values[t],
                  i = this.updateF(r, n);
                return this.compareF(r, i) ? 0 : ((e.values[t] = i), 1);
              },
              reconfigure: (e, n) => {
                let r = e.facet(tF),
                  i = n.facet(tF),
                  s;
                return (s = r.find((e) => e.field == this)) &&
                  s != i.find((e) => e.field == this)
                  ? ((e.values[t] = s.create(e)), 1)
                  : null != n.config.address[this.id]
                    ? ((e.values[t] = n.field(this)), 0)
                    : ((e.values[t] = this.create(e)), 1);
              },
            };
          }
          init(e) {
            return [this, tF.of({ field: this, create: e })];
          }
          get extension() {
            return this;
          }
        }
        let tz = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
        function t$(e) {
          return (t) => new tU(t, e);
        }
        let tq = {
          highest: t$(tz.highest),
          high: t$(tz.high),
          default: t$(tz.default),
          low: t$(tz.low),
          lowest: t$(tz.lowest),
        };
        class tU {
          constructor(e, t) {
            (this.inner = e), (this.prec = t);
          }
        }
        class tH {
          of(e) {
            return new tQ(this, e);
          }
          reconfigure(e) {
            return tH.reconfigure.of({ compartment: this, extension: e });
          }
          get(e) {
            return e.config.compartments.get(this);
          }
        }
        class tQ {
          constructor(e, t) {
            (this.compartment = e), (this.inner = t);
          }
        }
        class tV {
          constructor(e, t, n, r, i, s) {
            for (
              this.base = e,
                this.compartments = t,
                this.dynamicSlots = n,
                this.address = r,
                this.staticValues = i,
                this.facets = s,
                this.statusTemplate = [];
              this.statusTemplate.length < n.length;

            )
              this.statusTemplate.push(0);
          }
          staticFacet(e) {
            let t = this.address[e.id];
            return null == t ? e.default : this.staticValues[t >> 1];
          }
          static resolve(e, t, n) {
            var r, i, s;
            let o,
              a,
              l = [],
              c = Object.create(null),
              u = new Map();
            for (let n of ((r = e),
            (i = t),
            (s = u),
            (o = [[], [], [], [], []]),
            (a = new Map()),
            !(function e(t, n) {
              let r = a.get(t);
              if (null != r) {
                if (r <= n) return;
                let e = o[r].indexOf(t);
                e > -1 && o[r].splice(e, 1),
                  t instanceof tQ && s.delete(t.compartment);
              }
              if ((a.set(t, n), Array.isArray(t))) for (let r of t) e(r, n);
              else if (t instanceof tQ) {
                if (s.has(t.compartment))
                  throw RangeError(
                    "Duplicate use of compartment in extensions",
                  );
                let r = i.get(t.compartment) || t.inner;
                s.set(t.compartment, r), e(r, n);
              } else if (t instanceof tU) e(t.inner, t.prec);
              else if (t instanceof tB)
                o[n].push(t), t.provides && e(t.provides, n);
              else if (t instanceof tM)
                o[n].push(t),
                  t.facet.extensions && e(t.facet.extensions, tz.default);
              else {
                let r = t.extension;
                if (!r)
                  throw Error(
                    `Unrecognized extension value in extension set (${t}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`,
                  );
                e(r, n);
              }
            })(r, tz.default),
            o.reduce((e, t) => e.concat(t))))
              n instanceof tB
                ? l.push(n)
                : (c[n.facet.id] || (c[n.facet.id] = [])).push(n);
            let d = Object.create(null),
              h = [],
              p = [];
            for (let e of l)
              (d[e.id] = p.length << 1), p.push((t) => e.slot(t));
            let f = null == n ? void 0 : n.config.facets;
            for (let e in c) {
              let t = c[e],
                r = t[0].facet,
                i = (f && f[e]) || [];
              if (t.every((e) => 0 == e.type))
                if (((d[r.id] = (h.length << 1) | 1), tR(i, t)))
                  h.push(n.facet(r));
                else {
                  let e = r.combine(t.map((e) => e.value));
                  h.push(n && r.compare(e, n.facet(r)) ? n.facet(r) : e);
                }
              else {
                for (let e of t)
                  0 == e.type
                    ? ((d[e.id] = (h.length << 1) | 1), h.push(e.value))
                    : ((d[e.id] = p.length << 1),
                      p.push((t) => e.dynamicSlot(t)));
                (d[r.id] = p.length << 1),
                  p.push((e) =>
                    (function (e, t, n) {
                      let r = n.map((t) => e[t.id]),
                        i = n.map((e) => e.type),
                        s = r.filter((e) => !(1 & e)),
                        o = e[t.id] >> 1;
                      function a(e) {
                        let n = [];
                        for (let t = 0; t < r.length; t++) {
                          let s = tZ(e, r[t]);
                          if (2 == i[t]) for (let e of s) n.push(e);
                          else n.push(s);
                        }
                        return t.combine(n);
                      }
                      return {
                        create(e) {
                          for (let t of r) tW(e, t);
                          return (e.values[o] = a(e)), 1;
                        },
                        update(e, n) {
                          if (!tj(e, s)) return 0;
                          let r = a(e);
                          return t.compare(r, e.values[o])
                            ? 0
                            : ((e.values[o] = r), 1);
                        },
                        reconfigure(e, i) {
                          let s = tj(e, r),
                            l = i.config.facets[t.id],
                            c = i.facet(t);
                          if (l && !s && tR(n, l)) return (e.values[o] = c), 0;
                          let u = a(e);
                          return t.compare(u, c)
                            ? ((e.values[o] = c), 0)
                            : ((e.values[o] = u), 1);
                        },
                      };
                    })(e, r, t),
                  );
              }
            }
            return new tV(
              e,
              u,
              p.map((e) => e(d)),
              d,
              h,
              c,
            );
          }
        }
        function tW(e, t) {
          if (1 & t) return 2;
          let n = t >> 1,
            r = e.status[n];
          if (4 == r)
            throw Error("Cyclic dependency between fields and/or facets");
          if (2 & r) return r;
          e.status[n] = 4;
          let i = e.computeSlot(e, e.config.dynamicSlots[n]);
          return (e.status[n] = 2 | i);
        }
        function tZ(e, t) {
          return 1 & t ? e.config.staticValues[t >> 1] : e.values[t >> 1];
        }
        let tG = tP.define(),
          tY = tP.define({ combine: (e) => e.some((e) => e), static: !0 }),
          tK = tP.define({
            combine: (e) => (e.length ? e[0] : void 0),
            static: !0,
          }),
          tX = tP.define(),
          tJ = tP.define(),
          t0 = tP.define(),
          t1 = tP.define({ combine: (e) => !!e.length && e[0] });
        class t2 {
          constructor(e, t) {
            (this.type = e), (this.value = t);
          }
          static define() {
            return new t5();
          }
        }
        class t5 {
          of(e) {
            return new t2(this, e);
          }
        }
        class t3 {
          constructor(e) {
            this.map = e;
          }
          of(e) {
            return new t4(this, e);
          }
        }
        class t4 {
          constructor(e, t) {
            (this.type = e), (this.value = t);
          }
          map(e) {
            let t = this.type.map(this.value, e);
            return void 0 === t
              ? void 0
              : t == this.value
                ? this
                : new t4(this.type, t);
          }
          is(e) {
            return this.type == e;
          }
          static define(e = {}) {
            return new t3(e.map || ((e) => e));
          }
          static mapEffects(e, t) {
            if (!e.length) return e;
            let n = [];
            for (let r of e) {
              let e = r.map(t);
              e && n.push(e);
            }
            return n;
          }
        }
        (t4.reconfigure = t4.define()), (t4.appendConfig = t4.define());
        class t8 {
          constructor(e, t, n, r, i, s) {
            (this.startState = e),
              (this.changes = t),
              (this.selection = n),
              (this.effects = r),
              (this.annotations = i),
              (this.scrollIntoView = s),
              (this._doc = null),
              (this._state = null),
              n && tI(n, t.newLength),
              i.some((e) => e.type == t8.time) ||
                (this.annotations = i.concat(t8.time.of(Date.now())));
          }
          static create(e, t, n, r, i, s) {
            return new t8(e, t, n, r, i, s);
          }
          get newDoc() {
            return (
              this._doc || (this._doc = this.changes.apply(this.startState.doc))
            );
          }
          get newSelection() {
            return (
              this.selection || this.startState.selection.map(this.changes)
            );
          }
          get state() {
            return (
              this._state || this.startState.applyTransaction(this), this._state
            );
          }
          annotation(e) {
            for (let t of this.annotations) if (t.type == e) return t.value;
          }
          get docChanged() {
            return !this.changes.empty;
          }
          get reconfigured() {
            return this.startState.config != this.state.config;
          }
          isUserEvent(e) {
            let t = this.annotation(t8.userEvent);
            return !!(
              t &&
              (t == e ||
                (t.length > e.length &&
                  t.slice(0, e.length) == e &&
                  "." == t[e.length]))
            );
          }
        }
        function t6(e, t, n) {
          var r;
          let i, s, o;
          return (
            n
              ? ((i = t.changes),
                (s = tw.empty(t.changes.length)),
                (o = e.changes.compose(t.changes)))
              : ((i = t.changes.map(e.changes)),
                (s = e.changes.mapDesc(t.changes, !0)),
                (o = e.changes.compose(i))),
            {
              changes: o,
              selection: t.selection
                ? t.selection.map(s)
                : null == (r = e.selection)
                  ? void 0
                  : r.map(i),
              effects: t4
                .mapEffects(e.effects, i)
                .concat(t4.mapEffects(t.effects, s)),
              annotations: e.annotations.length
                ? e.annotations.concat(t.annotations)
                : t.annotations,
              scrollIntoView: e.scrollIntoView || t.scrollIntoView,
            }
          );
        }
        function t9(e, t, n) {
          let r = t.selection,
            i = ne(t.annotations);
          return (
            t.userEvent && (i = i.concat(t8.userEvent.of(t.userEvent))),
            {
              changes:
                t.changes instanceof tw
                  ? t.changes
                  : tw.of(t.changes || [], n, e.facet(tK)),
              selection:
                r && (r instanceof tN ? r : tN.single(r.anchor, r.head)),
              effects: ne(t.effects),
              annotations: i,
              scrollIntoView: !!t.scrollIntoView,
            }
          );
        }
        (t8.time = t2.define()),
          (t8.userEvent = t2.define()),
          (t8.addToHistory = t2.define()),
          (t8.remote = t2.define());
        let t7 = [];
        function ne(e) {
          return null == e ? t7 : Array.isArray(e) ? e : [e];
        }
        var nt = (function (e) {
          return (
            (e[(e.Word = 0)] = "Word"),
            (e[(e.Space = 1)] = "Space"),
            (e[(e.Other = 2)] = "Other"),
            e
          );
        })(nt || (nt = {}));
        let nn =
          /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
        try {
          r = RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
        } catch (e) {}
        class nr {
          constructor(e, t, n, r, i, s) {
            (this.config = e),
              (this.doc = t),
              (this.selection = n),
              (this.values = r),
              (this.status = e.statusTemplate.slice()),
              (this.computeSlot = i),
              s && (s._state = this);
            for (let e = 0; e < this.config.dynamicSlots.length; e++)
              tW(this, e << 1);
            this.computeSlot = null;
          }
          field(e, t = !0) {
            let n = this.config.address[e.id];
            if (null == n) {
              if (t) throw RangeError("Field is not present in this state");
              return;
            }
            return tW(this, n), tZ(this, n);
          }
          update(...e) {
            return (function e(t, n, r) {
              let i = t9(t, n.length ? n[0] : {}, t.doc.length);
              n.length && !1 === n[0].filter && (r = !1);
              for (let e = 1; e < n.length; e++) {
                !1 === n[e].filter && (r = !1);
                let s = !!n[e].sequential;
                i = t6(
                  i,
                  t9(t, n[e], s ? i.changes.newLength : t.doc.length),
                  s,
                );
              }
              let s = t8.create(
                t,
                i.changes,
                i.selection,
                i.effects,
                i.annotations,
                i.scrollIntoView,
              );
              return (function (e) {
                let t = e.startState,
                  n = t.facet(t0),
                  r = e;
                for (let i = n.length - 1; i >= 0; i--) {
                  let s = n[i](e);
                  s &&
                    Object.keys(s).length &&
                    (r = t6(r, t9(t, s, e.changes.newLength), !0));
                }
                return r == e
                  ? e
                  : t8.create(
                      t,
                      e.changes,
                      e.selection,
                      r.effects,
                      r.annotations,
                      r.scrollIntoView,
                    );
              })(
                r
                  ? (function (t) {
                      let n = t.startState,
                        r = !0;
                      for (let e of n.facet(tX)) {
                        let n = e(t);
                        if (!1 === n) {
                          r = !1;
                          break;
                        }
                        Array.isArray(n) &&
                          (r =
                            !0 === r
                              ? n
                              : (function (e, t) {
                                  let n = [];
                                  for (let r = 0, i = 0; ; ) {
                                    let s, o;
                                    if (
                                      r < e.length &&
                                      (i == t.length || t[i] >= e[r])
                                    )
                                      (s = e[r++]), (o = e[r++]);
                                    else {
                                      if (!(i < t.length)) return n;
                                      (s = t[i++]), (o = t[i++]);
                                    }
                                    !n.length || n[n.length - 1] < s
                                      ? n.push(s, o)
                                      : n[n.length - 1] < o &&
                                        (n[n.length - 1] = o);
                                  }
                                })(r, n));
                      }
                      if (!0 !== r) {
                        let e, i;
                        if (!1 === r)
                          (i = t.changes.invertedDesc),
                            (e = tw.empty(n.doc.length));
                        else {
                          let n = t.changes.filter(r);
                          (e = n.changes),
                            (i = n.filtered.mapDesc(n.changes).invertedDesc);
                        }
                        t = t8.create(
                          n,
                          e,
                          t.selection && t.selection.map(i),
                          t4.mapEffects(t.effects, i),
                          t.annotations,
                          t.scrollIntoView,
                        );
                      }
                      let i = n.facet(tJ);
                      for (let r = i.length - 1; r >= 0; r--) {
                        let s = i[r](t);
                        t =
                          s instanceof t8
                            ? s
                            : Array.isArray(s) &&
                                1 == s.length &&
                                s[0] instanceof t8
                              ? s[0]
                              : e(n, ne(s), !1);
                      }
                      return t;
                    })(s)
                  : s,
              );
            })(this, e, !0);
          }
          applyTransaction(e) {
            let t,
              n = this.config,
              { base: r, compartments: i } = n;
            for (let t of e.effects)
              t.is(tH.reconfigure)
                ? (n &&
                    ((i = new Map()),
                    n.compartments.forEach((e, t) => i.set(t, e)),
                    (n = null)),
                  i.set(t.value.compartment, t.value.extension))
                : t.is(t4.reconfigure)
                  ? ((n = null), (r = t.value))
                  : t.is(t4.appendConfig) &&
                    ((n = null), (r = ne(r).concat(t.value)));
            t = n
              ? e.startState.values.slice()
              : new nr(
                  (n = tV.resolve(r, i, this)),
                  this.doc,
                  this.selection,
                  n.dynamicSlots.map(() => null),
                  (e, t) => t.reconfigure(e, this),
                  null,
                ).values;
            let s = e.startState.facet(tY)
              ? e.newSelection
              : e.newSelection.asSingle();
            new nr(n, e.newDoc, s, t, (t, n) => n.update(t, e), e);
          }
          replaceSelection(e) {
            return (
              "string" == typeof e && (e = this.toText(e)),
              this.changeByRange((t) => ({
                changes: { from: t.from, to: t.to, insert: e },
                range: tN.cursor(t.from + e.length),
              }))
            );
          }
          changeByRange(e) {
            let t = this.selection,
              n = e(t.ranges[0]),
              r = this.changes(n.changes),
              i = [n.range],
              s = ne(n.effects);
            for (let n = 1; n < t.ranges.length; n++) {
              let o = e(t.ranges[n]),
                a = this.changes(o.changes),
                l = a.map(r);
              for (let e = 0; e < n; e++) i[e] = i[e].map(l);
              let c = r.mapDesc(a, !0);
              i.push(o.range.map(c)),
                (r = r.compose(l)),
                (s = t4
                  .mapEffects(s, l)
                  .concat(t4.mapEffects(ne(o.effects), c)));
            }
            return {
              changes: r,
              selection: tN.create(i, t.mainIndex),
              effects: s,
            };
          }
          changes(e = []) {
            return e instanceof tw
              ? e
              : tw.of(e, this.doc.length, this.facet(nr.lineSeparator));
          }
          toText(e) {
            return to.of(e.split(this.facet(nr.lineSeparator) || tb));
          }
          sliceDoc(e = 0, t = this.doc.length) {
            return this.doc.sliceString(e, t, this.lineBreak);
          }
          facet(e) {
            let t = this.config.address[e.id];
            return null == t ? e.default : (tW(this, t), tZ(this, t));
          }
          toJSON(e) {
            let t = {
              doc: this.sliceDoc(),
              selection: this.selection.toJSON(),
            };
            if (e)
              for (let n in e) {
                let r = e[n];
                r instanceof tB &&
                  null != this.config.address[r.id] &&
                  (t[n] = r.spec.toJSON(this.field(e[n]), this));
              }
            return t;
          }
          static fromJSON(e, t = {}, n) {
            if (!e || "string" != typeof e.doc)
              throw RangeError("Invalid JSON representation for EditorState");
            let r = [];
            if (n) {
              for (let t in n)
                if (Object.prototype.hasOwnProperty.call(e, t)) {
                  let i = n[t],
                    s = e[t];
                  r.push(i.init((e) => i.spec.fromJSON(s, e)));
                }
            }
            return nr.create({
              doc: e.doc,
              selection: tN.fromJSON(e.selection),
              extensions: t.extensions ? r.concat([t.extensions]) : r,
            });
          }
          static create(e = {}) {
            let t = tV.resolve(e.extensions || [], new Map()),
              n =
                e.doc instanceof to
                  ? e.doc
                  : to.of(
                      (e.doc || "").split(
                        t.staticFacet(nr.lineSeparator) || tb,
                      ),
                    ),
              r = e.selection
                ? e.selection instanceof tN
                  ? e.selection
                  : tN.single(e.selection.anchor, e.selection.head)
                : tN.single(0);
            return (
              tI(r, n.length),
              t.staticFacet(tY) || (r = r.asSingle()),
              new nr(
                t,
                n,
                r,
                t.dynamicSlots.map(() => null),
                (e, t) => t.create(e),
                null,
              )
            );
          }
          get tabSize() {
            return this.facet(nr.tabSize);
          }
          get lineBreak() {
            return this.facet(nr.lineSeparator) || "\n";
          }
          get readOnly() {
            return this.facet(t1);
          }
          phrase(e, ...t) {
            for (let t of this.facet(nr.phrases))
              if (Object.prototype.hasOwnProperty.call(t, e)) {
                e = t[e];
                break;
              }
            return (
              t.length &&
                (e = e.replace(/\$(\$|\d*)/g, (e, n) => {
                  if ("$" == n) return "$";
                  let r = +(n || 1);
                  return !r || r > t.length ? e : t[r - 1];
                })),
              e
            );
          }
          languageDataAt(e, t, n = -1) {
            let r = [];
            for (let i of this.facet(tG))
              for (let s of i(this, t, n))
                Object.prototype.hasOwnProperty.call(s, e) && r.push(s[e]);
            return r;
          }
          charCategorizer(e) {
            var t;
            return (
              (t = this.languageDataAt("wordChars", e).join("")),
              (e) => {
                if (!/\S/.test(e)) return nt.Space;
                if (
                  (function (e) {
                    if (r) return r.test(e);
                    for (let t = 0; t < e.length; t++) {
                      let n = e[t];
                      if (
                        /\w/.test(n) ||
                        (n > "\x80" &&
                          (n.toUpperCase() != n.toLowerCase() || nn.test(n)))
                      )
                        return !0;
                    }
                    return !1;
                  })(e)
                )
                  return nt.Word;
                for (let n = 0; n < t.length; n++)
                  if (e.indexOf(t[n]) > -1) return nt.Word;
                return nt.Other;
              }
            );
          }
          wordAt(e) {
            let { text: t, from: n, length: r } = this.doc.lineAt(e),
              i = this.charCategorizer(e),
              s = e - n,
              o = e - n;
            for (; s > 0; ) {
              let e = tm(t, s, !1);
              if (i(t.slice(e, s)) != nt.Word) break;
              s = e;
            }
            for (; o < r; ) {
              let e = tm(t, o);
              if (i(t.slice(o, e)) != nt.Word) break;
              o = e;
            }
            return s == o ? null : tN.range(s + n, o + n);
          }
        }
        function ni(e, t, n = {}) {
          let r = {};
          for (let t of e)
            for (let e of Object.keys(t)) {
              let i = t[e],
                s = r[e];
              if (void 0 === s) r[e] = i;
              else if (s === i || void 0 === i);
              else if (Object.hasOwnProperty.call(n, e)) r[e] = n[e](s, i);
              else throw Error("Config merge conflict for field " + e);
            }
          for (let e in t) void 0 === r[e] && (r[e] = t[e]);
          return r;
        }
        (nr.allowMultipleSelections = tY),
          (nr.tabSize = tP.define({ combine: (e) => (e.length ? e[0] : 4) })),
          (nr.lineSeparator = tK),
          (nr.readOnly = t1),
          (nr.phrases = tP.define({
            compare(e, t) {
              let n = Object.keys(e),
                r = Object.keys(t);
              return n.length == r.length && n.every((n) => e[n] == t[n]);
            },
          })),
          (nr.languageData = tG),
          (nr.changeFilter = tX),
          (nr.transactionFilter = tJ),
          (nr.transactionExtender = t0),
          (tH.reconfigure = t4.define());
        class ns {
          eq(e) {
            return this == e;
          }
          range(e, t = e) {
            return no.create(e, t, this);
          }
        }
        (ns.prototype.startSide = ns.prototype.endSide = 0),
          (ns.prototype.point = !1),
          (ns.prototype.mapMode = tx.TrackDel);
        class no {
          constructor(e, t, n) {
            (this.from = e), (this.to = t), (this.value = n);
          }
          static create(e, t, n) {
            return new no(e, t, n);
          }
        }
        function na(e, t) {
          return e.from - t.from || e.value.startSide - t.value.startSide;
        }
        class nl {
          constructor(e, t, n, r) {
            (this.from = e),
              (this.to = t),
              (this.value = n),
              (this.maxPoint = r);
          }
          get length() {
            return this.to[this.to.length - 1];
          }
          findIndex(e, t, n, r = 0) {
            let i = n ? this.to : this.from;
            for (let s = r, o = i.length; ; ) {
              if (s == o) return s;
              let r = (s + o) >> 1,
                a =
                  i[r] - e ||
                  (n ? this.value[r].endSide : this.value[r].startSide) - t;
              if (r == s) return a >= 0 ? s : o;
              a >= 0 ? (o = r) : (s = r + 1);
            }
          }
          between(e, t, n, r) {
            for (
              let i = this.findIndex(t, -1e9, !0),
                s = this.findIndex(n, 1e9, !1, i);
              i < s;
              i++
            )
              if (!1 === r(this.from[i] + e, this.to[i] + e, this.value[i]))
                return !1;
          }
          map(e, t) {
            let n = [],
              r = [],
              i = [],
              s = -1,
              o = -1;
            for (let a = 0; a < this.value.length; a++) {
              let l = this.value[a],
                c = this.from[a] + e,
                u = this.to[a] + e,
                d,
                h;
              if (c == u) {
                let e = t.mapPos(c, l.startSide, l.mapMode);
                if (
                  null == e ||
                  ((d = h = e),
                  l.startSide != l.endSide && (h = t.mapPos(c, l.endSide)) < d)
                )
                  continue;
              } else if (
                (d = t.mapPos(c, l.startSide)) > (h = t.mapPos(u, l.endSide)) ||
                (d == h && l.startSide > 0 && l.endSide <= 0)
              )
                continue;
              0 > (h - d || l.endSide - l.startSide) ||
                (s < 0 && (s = d),
                l.point && (o = Math.max(o, h - d)),
                n.push(l),
                r.push(d - s),
                i.push(h - s));
            }
            return { mapped: n.length ? new nl(r, i, n, o) : null, pos: s };
          }
        }
        class nc {
          constructor(e, t, n, r) {
            (this.chunkPos = e),
              (this.chunk = t),
              (this.nextLayer = n),
              (this.maxPoint = r);
          }
          static create(e, t, n, r) {
            return new nc(e, t, n, r);
          }
          get length() {
            let e = this.chunk.length - 1;
            return e < 0
              ? 0
              : Math.max(this.chunkEnd(e), this.nextLayer.length);
          }
          get size() {
            if (this.isEmpty) return 0;
            let e = this.nextLayer.size;
            for (let t of this.chunk) e += t.value.length;
            return e;
          }
          chunkEnd(e) {
            return this.chunkPos[e] + this.chunk[e].length;
          }
          update(e) {
            let {
                add: t = [],
                sort: n = !1,
                filterFrom: r = 0,
                filterTo: i = this.length,
              } = e,
              s = e.filter;
            if (0 == t.length && !s) return this;
            if ((n && (t = t.slice().sort(na)), this.isEmpty))
              return t.length ? nc.of(t) : this;
            let o = new nh(this, null, -1).goto(0),
              a = 0,
              l = [],
              c = new nu();
            for (; o.value || a < t.length; )
              if (
                a < t.length &&
                (o.from - t[a].from || o.startSide - t[a].value.startSide) >= 0
              ) {
                let e = t[a++];
                c.addInner(e.from, e.to, e.value) || l.push(e);
              } else
                1 == o.rangeIndex &&
                o.chunkIndex < this.chunk.length &&
                (a == t.length || this.chunkEnd(o.chunkIndex) < t[a].from) &&
                (!s ||
                  r > this.chunkEnd(o.chunkIndex) ||
                  i < this.chunkPos[o.chunkIndex]) &&
                c.addChunk(
                  this.chunkPos[o.chunkIndex],
                  this.chunk[o.chunkIndex],
                )
                  ? o.nextChunk()
                  : ((!s ||
                      r > o.to ||
                      i < o.from ||
                      s(o.from, o.to, o.value)) &&
                      !c.addInner(o.from, o.to, o.value) &&
                      l.push(no.create(o.from, o.to, o.value)),
                    o.next());
            return c.finishInner(
              this.nextLayer.isEmpty && !l.length
                ? nc.empty
                : this.nextLayer.update({
                    add: l,
                    filter: s,
                    filterFrom: r,
                    filterTo: i,
                  }),
            );
          }
          map(e) {
            if (e.empty || this.isEmpty) return this;
            let t = [],
              n = [],
              r = -1;
            for (let i = 0; i < this.chunk.length; i++) {
              let s = this.chunkPos[i],
                o = this.chunk[i],
                a = e.touchesRange(s, s + o.length);
              if (!1 === a)
                (r = Math.max(r, o.maxPoint)), t.push(o), n.push(e.mapPos(s));
              else if (!0 === a) {
                let { mapped: i, pos: a } = o.map(s, e);
                i && ((r = Math.max(r, i.maxPoint)), t.push(i), n.push(a));
              }
            }
            let i = this.nextLayer.map(e);
            return 0 == t.length ? i : new nc(n, t, i || nc.empty, r);
          }
          between(e, t, n) {
            if (!this.isEmpty) {
              for (let r = 0; r < this.chunk.length; r++) {
                let i = this.chunkPos[r],
                  s = this.chunk[r];
                if (
                  t >= i &&
                  e <= i + s.length &&
                  !1 === s.between(i, e - i, t - i, n)
                )
                  return;
              }
              this.nextLayer.between(e, t, n);
            }
          }
          iter(e = 0) {
            return np.from([this]).goto(e);
          }
          get isEmpty() {
            return this.nextLayer == this;
          }
          static iter(e, t = 0) {
            return np.from(e).goto(t);
          }
          static compare(e, t, n, r, i = -1) {
            let s = e.filter(
                (e) => e.maxPoint > 0 || (!e.isEmpty && e.maxPoint >= i),
              ),
              o = t.filter(
                (e) => e.maxPoint > 0 || (!e.isEmpty && e.maxPoint >= i),
              ),
              a = nd(s, o, n),
              l = new nm(s, a, i),
              c = new nm(o, a, i);
            n.iterGaps((e, t, n) => ng(l, e, c, t, n, r)),
              n.empty && 0 == n.length && ng(l, 0, c, 0, 0, r);
          }
          static eq(e, t, n = 0, r) {
            null == r && (r = 0x3b9ac9ff);
            let i = e.filter((e) => !e.isEmpty && 0 > t.indexOf(e)),
              s = t.filter((t) => !t.isEmpty && 0 > e.indexOf(t));
            if (i.length != s.length) return !1;
            if (!i.length) return !0;
            let o = nd(i, s),
              a = new nm(i, o, 0).goto(n),
              l = new nm(s, o, 0).goto(n);
            for (;;) {
              if (
                a.to != l.to ||
                !ny(a.active, l.active) ||
                (a.point && (!l.point || !a.point.eq(l.point)))
              )
                return !1;
              if (a.to > r) return !0;
              a.next(), l.next();
            }
          }
          static spans(e, t, n, r, i = -1) {
            let s = new nm(e, null, i).goto(t),
              o = t,
              a = s.openStart;
            for (;;) {
              let e = Math.min(s.to, n);
              if (s.point) {
                let n = s.activeForPoint(s.to),
                  i =
                    s.pointFrom < t
                      ? n.length + 1
                      : s.point.startSide < 0
                        ? n.length
                        : Math.min(n.length, a);
                r.point(o, e, s.point, n, i, s.pointRank),
                  (a = Math.min(s.openEnd(e), n.length));
              } else e > o && (r.span(o, e, s.active, a), (a = s.openEnd(e)));
              if (s.to > n) return a + (s.point && s.to > n ? 1 : 0);
              (o = s.to), s.next();
            }
          }
          static of(e, t = !1) {
            let n = new nu();
            for (let r of e instanceof no
              ? [e]
              : t
                ? (function (e) {
                    if (e.length > 1)
                      for (let t = e[0], n = 1; n < e.length; n++) {
                        let r = e[n];
                        if (na(t, r) > 0) return e.slice().sort(na);
                        t = r;
                      }
                    return e;
                  })(e)
                : e)
              n.add(r.from, r.to, r.value);
            return n.finish();
          }
          static join(e) {
            if (!e.length) return nc.empty;
            let t = e[e.length - 1];
            for (let n = e.length - 2; n >= 0; n--)
              for (let r = e[n]; r != nc.empty; r = r.nextLayer)
                t = new nc(
                  r.chunkPos,
                  r.chunk,
                  t,
                  Math.max(r.maxPoint, t.maxPoint),
                );
            return t;
          }
        }
        (nc.empty = new nc([], [], null, -1)), (nc.empty.nextLayer = nc.empty);
        class nu {
          finishChunk(e) {
            this.chunks.push(
              new nl(this.from, this.to, this.value, this.maxPoint),
            ),
              this.chunkPos.push(this.chunkStart),
              (this.chunkStart = -1),
              (this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint)),
              (this.maxPoint = -1),
              e && ((this.from = []), (this.to = []), (this.value = []));
          }
          constructor() {
            (this.chunks = []),
              (this.chunkPos = []),
              (this.chunkStart = -1),
              (this.last = null),
              (this.lastFrom = -1e9),
              (this.lastTo = -1e9),
              (this.from = []),
              (this.to = []),
              (this.value = []),
              (this.maxPoint = -1),
              (this.setMaxPoint = -1),
              (this.nextLayer = null);
          }
          add(e, t, n) {
            this.addInner(e, t, n) ||
              (this.nextLayer || (this.nextLayer = new nu())).add(e, t, n);
          }
          addInner(e, t, n) {
            let r = e - this.lastTo || n.startSide - this.last.endSide;
            if (
              r <= 0 &&
              0 > (e - this.lastFrom || n.startSide - this.last.startSide)
            )
              throw Error(
                "Ranges must be added sorted by `from` position and `startSide`",
              );
            return (
              !(r < 0) &&
              (250 == this.from.length && this.finishChunk(!0),
              this.chunkStart < 0 && (this.chunkStart = e),
              this.from.push(e - this.chunkStart),
              this.to.push(t - this.chunkStart),
              (this.last = n),
              (this.lastFrom = e),
              (this.lastTo = t),
              this.value.push(n),
              n.point && (this.maxPoint = Math.max(this.maxPoint, t - e)),
              !0)
            );
          }
          addChunk(e, t) {
            if (
              0 > (e - this.lastTo || t.value[0].startSide - this.last.endSide)
            )
              return !1;
            this.from.length && this.finishChunk(!0),
              (this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint)),
              this.chunks.push(t),
              this.chunkPos.push(e);
            let n = t.value.length - 1;
            return (
              (this.last = t.value[n]),
              (this.lastFrom = t.from[n] + e),
              (this.lastTo = t.to[n] + e),
              !0
            );
          }
          finish() {
            return this.finishInner(nc.empty);
          }
          finishInner(e) {
            if (
              (this.from.length && this.finishChunk(!1),
              0 == this.chunks.length)
            )
              return e;
            let t = nc.create(
              this.chunkPos,
              this.chunks,
              this.nextLayer ? this.nextLayer.finishInner(e) : e,
              this.setMaxPoint,
            );
            return (this.from = null), t;
          }
        }
        function nd(e, t, n) {
          let r = new Map();
          for (let t of e)
            for (let e = 0; e < t.chunk.length; e++)
              t.chunk[e].maxPoint <= 0 && r.set(t.chunk[e], t.chunkPos[e]);
          let i = new Set();
          for (let e of t)
            for (let t = 0; t < e.chunk.length; t++) {
              let s = r.get(e.chunk[t]);
              null == s ||
                (n ? n.mapPos(s) : s) != e.chunkPos[t] ||
                (null == n
                  ? void 0
                  : n.touchesRange(s, s + e.chunk[t].length)) ||
                i.add(e.chunk[t]);
            }
          return i;
        }
        class nh {
          constructor(e, t, n, r = 0) {
            (this.layer = e),
              (this.skip = t),
              (this.minPoint = n),
              (this.rank = r);
          }
          get startSide() {
            return this.value ? this.value.startSide : 0;
          }
          get endSide() {
            return this.value ? this.value.endSide : 0;
          }
          goto(e, t = -1e9) {
            return (
              (this.chunkIndex = this.rangeIndex = 0),
              this.gotoInner(e, t, !1),
              this
            );
          }
          gotoInner(e, t, n) {
            for (; this.chunkIndex < this.layer.chunk.length; ) {
              let t = this.layer.chunk[this.chunkIndex];
              if (
                !(
                  (this.skip && this.skip.has(t)) ||
                  this.layer.chunkEnd(this.chunkIndex) < e ||
                  t.maxPoint < this.minPoint
                )
              )
                break;
              this.chunkIndex++, (n = !1);
            }
            if (this.chunkIndex < this.layer.chunk.length) {
              let r = this.layer.chunk[this.chunkIndex].findIndex(
                e - this.layer.chunkPos[this.chunkIndex],
                t,
                !0,
              );
              (!n || this.rangeIndex < r) && this.setRangeIndex(r);
            }
            this.next();
          }
          forward(e, t) {
            0 > (this.to - e || this.endSide - t) && this.gotoInner(e, t, !0);
          }
          next() {
            for (;;)
              if (this.chunkIndex == this.layer.chunk.length) {
                (this.from = this.to = 1e9), (this.value = null);
                break;
              } else {
                let e = this.layer.chunkPos[this.chunkIndex],
                  t = this.layer.chunk[this.chunkIndex],
                  n = e + t.from[this.rangeIndex];
                if (
                  ((this.from = n),
                  (this.to = e + t.to[this.rangeIndex]),
                  (this.value = t.value[this.rangeIndex]),
                  this.setRangeIndex(this.rangeIndex + 1),
                  this.minPoint < 0 ||
                    (this.value.point && this.to - this.from >= this.minPoint))
                )
                  break;
              }
          }
          setRangeIndex(e) {
            if (e == this.layer.chunk[this.chunkIndex].value.length) {
              if ((this.chunkIndex++, this.skip))
                for (
                  ;
                  this.chunkIndex < this.layer.chunk.length &&
                  this.skip.has(this.layer.chunk[this.chunkIndex]);

                )
                  this.chunkIndex++;
              this.rangeIndex = 0;
            } else this.rangeIndex = e;
          }
          nextChunk() {
            this.chunkIndex++, (this.rangeIndex = 0), this.next();
          }
          compare(e) {
            return (
              this.from - e.from ||
              this.startSide - e.startSide ||
              this.rank - e.rank ||
              this.to - e.to ||
              this.endSide - e.endSide
            );
          }
        }
        class np {
          constructor(e) {
            this.heap = e;
          }
          static from(e, t = null, n = -1) {
            let r = [];
            for (let i = 0; i < e.length; i++)
              for (let s = e[i]; !s.isEmpty; s = s.nextLayer)
                s.maxPoint >= n && r.push(new nh(s, t, n, i));
            return 1 == r.length ? r[0] : new np(r);
          }
          get startSide() {
            return this.value ? this.value.startSide : 0;
          }
          goto(e, t = -1e9) {
            for (let n of this.heap) n.goto(e, t);
            for (let e = this.heap.length >> 1; e >= 0; e--) nf(this.heap, e);
            return this.next(), this;
          }
          forward(e, t) {
            for (let n of this.heap) n.forward(e, t);
            for (let e = this.heap.length >> 1; e >= 0; e--) nf(this.heap, e);
            0 > (this.to - e || this.value.endSide - t) && this.next();
          }
          next() {
            if (0 == this.heap.length)
              (this.from = this.to = 1e9),
                (this.value = null),
                (this.rank = -1);
            else {
              let e = this.heap[0];
              (this.from = e.from),
                (this.to = e.to),
                (this.value = e.value),
                (this.rank = e.rank),
                e.value && e.next(),
                nf(this.heap, 0);
            }
          }
        }
        function nf(e, t) {
          for (let n = e[t]; ; ) {
            let r = (t << 1) + 1;
            if (r >= e.length) break;
            let i = e[r];
            if (
              (r + 1 < e.length &&
                i.compare(e[r + 1]) >= 0 &&
                ((i = e[r + 1]), r++),
              0 > n.compare(i))
            )
              break;
            (e[r] = n), (e[t] = i), (t = r);
          }
        }
        class nm {
          constructor(e, t, n) {
            (this.minPoint = n),
              (this.active = []),
              (this.activeTo = []),
              (this.activeRank = []),
              (this.minActive = -1),
              (this.point = null),
              (this.pointFrom = 0),
              (this.pointRank = 0),
              (this.to = -1e9),
              (this.endSide = 0),
              (this.openStart = -1),
              (this.cursor = np.from(e, t, n));
          }
          goto(e, t = -1e9) {
            return (
              this.cursor.goto(e, t),
              (this.active.length =
                this.activeTo.length =
                this.activeRank.length =
                  0),
              (this.minActive = -1),
              (this.to = e),
              (this.endSide = t),
              (this.openStart = -1),
              this.next(),
              this
            );
          }
          forward(e, t) {
            for (
              ;
              this.minActive > -1 &&
              0 >
                (this.activeTo[this.minActive] - e ||
                  this.active[this.minActive].endSide - t);

            )
              this.removeActive(this.minActive);
            this.cursor.forward(e, t);
          }
          removeActive(e) {
            nv(this.active, e),
              nv(this.activeTo, e),
              nv(this.activeRank, e),
              (this.minActive = nx(this.active, this.activeTo));
          }
          addActive(e) {
            let t = 0,
              { value: n, to: r, rank: i } = this.cursor;
            for (
              ;
              t < this.activeRank.length &&
              (i - this.activeRank[t] || r - this.activeTo[t]) > 0;

            )
              t++;
            nb(this.active, t, n),
              nb(this.activeTo, t, r),
              nb(this.activeRank, t, i),
              e && nb(e, t, this.cursor.from),
              (this.minActive = nx(this.active, this.activeTo));
          }
          next() {
            let e = this.to,
              t = this.point;
            this.point = null;
            let n = this.openStart < 0 ? [] : null;
            for (;;) {
              let r = this.minActive;
              if (
                r > -1 &&
                0 >
                  (this.activeTo[r] - this.cursor.from ||
                    this.active[r].endSide - this.cursor.startSide)
              ) {
                if (this.activeTo[r] > e) {
                  (this.to = this.activeTo[r]),
                    (this.endSide = this.active[r].endSide);
                  break;
                }
                this.removeActive(r), n && nv(n, r);
              } else if (this.cursor.value)
                if (this.cursor.from > e) {
                  (this.to = this.cursor.from),
                    (this.endSide = this.cursor.startSide);
                  break;
                } else {
                  let e = this.cursor.value;
                  if (e.point)
                    if (
                      t &&
                      this.cursor.to == this.to &&
                      this.cursor.from < this.cursor.to
                    )
                      this.cursor.next();
                    else {
                      (this.point = e),
                        (this.pointFrom = this.cursor.from),
                        (this.pointRank = this.cursor.rank),
                        (this.to = this.cursor.to),
                        (this.endSide = e.endSide),
                        this.cursor.next(),
                        this.forward(this.to, this.endSide);
                      break;
                    }
                  else this.addActive(n), this.cursor.next();
                }
              else {
                this.to = this.endSide = 1e9;
                break;
              }
            }
            if (n) {
              this.openStart = 0;
              for (let t = n.length - 1; t >= 0 && n[t] < e; t--)
                this.openStart++;
            }
          }
          activeForPoint(e) {
            if (!this.active.length) return this.active;
            let t = [];
            for (
              let n = this.active.length - 1;
              n >= 0 && !(this.activeRank[n] < this.pointRank);
              n--
            )
              (this.activeTo[n] > e ||
                (this.activeTo[n] == e &&
                  this.active[n].endSide >= this.point.endSide)) &&
                t.push(this.active[n]);
            return t.reverse();
          }
          openEnd(e) {
            let t = 0;
            for (
              let n = this.activeTo.length - 1;
              n >= 0 && this.activeTo[n] > e;
              n--
            )
              t++;
            return t;
          }
        }
        function ng(e, t, n, r, i, s) {
          e.goto(t), n.goto(r);
          let o = r + i,
            a = r,
            l = r - t;
          for (;;) {
            let t = e.to + l - n.to,
              r = t || e.endSide - n.endSide,
              i = r < 0 ? e.to + l : n.to,
              c = Math.min(i, o);
            if (
              (e.point || n.point
                ? (e.point &&
                    n.point &&
                    (e.point == n.point || e.point.eq(n.point)) &&
                    ny(e.activeForPoint(e.to), n.activeForPoint(n.to))) ||
                  s.comparePoint(a, c, e.point, n.point)
                : c > a &&
                  !ny(e.active, n.active) &&
                  s.compareRange(a, c, e.active, n.active),
              i > o)
            )
              break;
            (t || e.openEnd != n.openEnd) && s.boundChange && s.boundChange(i),
              (a = i),
              r <= 0 && e.next(),
              r >= 0 && n.next();
          }
        }
        function ny(e, t) {
          if (e.length != t.length) return !1;
          for (let n = 0; n < e.length; n++)
            if (e[n] != t[n] && !e[n].eq(t[n])) return !1;
          return !0;
        }
        function nv(e, t) {
          for (let n = t, r = e.length - 1; n < r; n++) e[n] = e[n + 1];
          e.pop();
        }
        function nb(e, t, n) {
          for (let n = e.length - 1; n >= t; n--) e[n + 1] = e[n];
          e[t] = n;
        }
        function nx(e, t) {
          let n = -1,
            r = 1e9;
          for (let i = 0; i < t.length; i++)
            0 > (t[i] - r || e[i].endSide - e[n].endSide) &&
              ((n = i), (r = t[i]));
          return n;
        }
        function nk(e, t, n = e.length) {
          let r = 0;
          for (let i = 0; i < n && i < e.length; )
            9 == e.charCodeAt(i)
              ? ((r += t - (r % t)), i++)
              : (r++, (i = tm(e, i)));
          return r;
        }
        let nw = "undefined" == typeof Symbol ? "__ͼ" : Symbol.for("ͼ"),
          n_ =
            "undefined" == typeof Symbol
              ? "__styleSet" + Math.floor(1e8 * Math.random())
              : Symbol("styleSet"),
          nO =
            "undefined" != typeof globalThis
              ? globalThis
              : "undefined" != typeof window
                ? window
                : {};
        class nT {
          constructor(e, t) {
            this.rules = [];
            let { finish: n } = t || {};
            function r(e) {
              return /^@/.test(e) ? [e] : e.split(/,\s*/);
            }
            for (let t in e)
              !(function e(t, i, s, o) {
                let a = [],
                  l = /^@(\w+)\b/.exec(t[0]),
                  c = l && "keyframes" == l[1];
                if (l && null == i) return s.push(t[0] + ";");
                for (let n in i) {
                  let o = i[n];
                  if (/&/.test(n))
                    e(
                      n
                        .split(/,\s*/)
                        .map((e) => t.map((t) => e.replace(/&/, t)))
                        .reduce((e, t) => e.concat(t)),
                      o,
                      s,
                    );
                  else if (o && "object" == typeof o) {
                    if (!l)
                      throw RangeError(
                        "The value of a property (" +
                          n +
                          ") should be a primitive value.",
                      );
                    e(r(n), o, a, c);
                  } else
                    null != o &&
                      a.push(
                        n
                          .replace(/_.*/, "")
                          .replace(/[A-Z]/g, (e) => "-" + e.toLowerCase()) +
                          ": " +
                          o +
                          ";",
                      );
                }
                (a.length || c) &&
                  s.push(
                    (n && !l && !o ? t.map(n) : t).join(", ") +
                      " {" +
                      a.join(" ") +
                      "}",
                  );
              })(r(t), e[t], this.rules);
          }
          getRules() {
            return this.rules.join("\n");
          }
          static newName() {
            let e = nO[nw] || 1;
            return (nO[nw] = e + 1), "ͼ" + e.toString(36);
          }
          static mount(e, t, n) {
            let r = e[n_],
              i = n && n.nonce;
            r ? i && r.setNonce(i) : (r = new nE(e, i)),
              r.mount(Array.isArray(t) ? t : [t], e);
          }
        }
        let nS = new Map();
        class nE {
          constructor(e, t) {
            let n = e.ownerDocument || e,
              r = n.defaultView;
            if (!e.head && e.adoptedStyleSheets && r.CSSStyleSheet) {
              let t = nS.get(n);
              if (t) return (e[n_] = t);
              (this.sheet = new r.CSSStyleSheet()), nS.set(n, this);
            } else
              (this.styleTag = n.createElement("style")),
                t && this.styleTag.setAttribute("nonce", t);
            (this.modules = []), (e[n_] = this);
          }
          mount(e, t) {
            let n = this.sheet,
              r = 0,
              i = 0;
            for (let t = 0; t < e.length; t++) {
              let s = e[t],
                o = this.modules.indexOf(s);
              if (
                (o < i && o > -1 && (this.modules.splice(o, 1), i--, (o = -1)),
                -1 == o)
              ) {
                if ((this.modules.splice(i++, 0, s), n))
                  for (let e = 0; e < s.rules.length; e++)
                    n.insertRule(s.rules[e], r++);
              } else {
                for (; i < o; ) r += this.modules[i++].rules.length;
                (r += s.rules.length), i++;
              }
            }
            if (n)
              0 > t.adoptedStyleSheets.indexOf(this.sheet) &&
                (t.adoptedStyleSheets = [this.sheet, ...t.adoptedStyleSheets]);
            else {
              let e = "";
              for (let t = 0; t < this.modules.length; t++)
                e += this.modules[t].getRules() + "\n";
              this.styleTag.textContent = e;
              let n = t.head || t;
              this.styleTag.parentNode != n &&
                n.insertBefore(this.styleTag, n.firstChild);
            }
          }
          setNonce(e) {
            this.styleTag &&
              this.styleTag.getAttribute("nonce") != e &&
              this.styleTag.setAttribute("nonce", e);
          }
        }
        var nC = n(64105);
        function nA(e) {
          let t;
          return (
            11 == e.nodeType ? (e.getSelection ? e : e.ownerDocument) : e
          ).getSelection();
        }
        function nN(e, t) {
          return (
            !!t && (e == t || e.contains(1 != t.nodeType ? t.parentNode : t))
          );
        }
        function nI(e, t) {
          if (!t.anchorNode) return !1;
          try {
            return nN(e, t.anchorNode);
          } catch (e) {
            return !1;
          }
        }
        function nD(e) {
          return 3 == e.nodeType
            ? nU(e, 0, e.nodeValue.length).getClientRects()
            : 1 == e.nodeType
              ? e.getClientRects()
              : [];
        }
        function nP(e, t, n, r) {
          return !!n && (nL(e, t, n, r, -1) || nL(e, t, n, r, 1));
        }
        function nR(e) {
          for (var t = 0; ; t++) if (!(e = e.previousSibling)) return t;
        }
        function nM(e) {
          return (
            1 == e.nodeType &&
            /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(
              e.nodeName,
            )
          );
        }
        function nL(e, t, n, r, i) {
          for (;;) {
            if (e == n && t == r) return !0;
            if (t == (i < 0 ? 0 : nj(e))) {
              if ("DIV" == e.nodeName) return !1;
              let n = e.parentNode;
              if (!n || 1 != n.nodeType) return !1;
              (t = nR(e) + (i < 0 ? 0 : 1)), (e = n);
            } else {
              if (
                1 != e.nodeType ||
                (1 == (e = e.childNodes[t + (i < 0 ? -1 : 0)]).nodeType &&
                  "false" == e.contentEditable)
              )
                return !1;
              t = i < 0 ? nj(e) : 0;
            }
          }
        }
        function nj(e) {
          return 3 == e.nodeType ? e.nodeValue.length : e.childNodes.length;
        }
        function nF(e, t) {
          let n = t ? e.left : e.right;
          return { left: n, right: n, top: e.top, bottom: e.bottom };
        }
        function nB(e, t) {
          let n = t.width / e.offsetWidth,
            r = t.height / e.offsetHeight;
          return (
            ((n > 0.995 && n < 1.005) ||
              !isFinite(n) ||
              1 > Math.abs(t.width - e.offsetWidth)) &&
              (n = 1),
            ((r > 0.995 && r < 1.005) ||
              !isFinite(r) ||
              1 > Math.abs(t.height - e.offsetHeight)) &&
              (r = 1),
            { scaleX: n, scaleY: r }
          );
        }
        class nz {
          constructor() {
            (this.anchorNode = null),
              (this.anchorOffset = 0),
              (this.focusNode = null),
              (this.focusOffset = 0);
          }
          eq(e) {
            return (
              this.anchorNode == e.anchorNode &&
              this.anchorOffset == e.anchorOffset &&
              this.focusNode == e.focusNode &&
              this.focusOffset == e.focusOffset
            );
          }
          setRange(e) {
            let { anchorNode: t, focusNode: n } = e;
            this.set(
              t,
              Math.min(e.anchorOffset, t ? nj(t) : 0),
              n,
              Math.min(e.focusOffset, n ? nj(n) : 0),
            );
          }
          set(e, t, n, r) {
            (this.anchorNode = e),
              (this.anchorOffset = t),
              (this.focusNode = n),
              (this.focusOffset = r);
          }
        }
        let n$ = null;
        function nq(e) {
          if (e.setActive) return e.setActive();
          if (n$) return e.focus(n$);
          let t = [];
          for (
            let n = e;
            n && (t.push(n, n.scrollTop, n.scrollLeft), n != n.ownerDocument);
            n = n.parentNode
          );
          if (
            (e.focus(
              null == n$
                ? {
                    get preventScroll() {
                      return (n$ = { preventScroll: !0 }), !0;
                    },
                  }
                : void 0,
            ),
            !n$)
          ) {
            n$ = !1;
            for (let e = 0; e < t.length; ) {
              let n = t[e++],
                r = t[e++],
                i = t[e++];
              n.scrollTop != r && (n.scrollTop = r),
                n.scrollLeft != i && (n.scrollLeft = i);
            }
          }
        }
        function nU(e, t, n = t) {
          let r = i || (i = document.createRange());
          return r.setEnd(e, n), r.setStart(e, t), r;
        }
        function nH(e, t, n, r) {
          let i = { key: t, code: t, keyCode: n, which: n, cancelable: !0 };
          r &&
            ({
              altKey: i.altKey,
              ctrlKey: i.ctrlKey,
              shiftKey: i.shiftKey,
              metaKey: i.metaKey,
            } = r);
          let s = new KeyboardEvent("keydown", i);
          (s.synthetic = !0), e.dispatchEvent(s);
          let o = new KeyboardEvent("keyup", i);
          return (
            (o.synthetic = !0),
            e.dispatchEvent(o),
            s.defaultPrevented || o.defaultPrevented
          );
        }
        function nQ(e) {
          for (; e.attributes.length; ) e.removeAttributeNode(e.attributes[0]);
        }
        function nV(e) {
          return e.scrollTop > Math.max(1, e.scrollHeight - e.clientHeight - 4);
        }
        function nW(e, t) {
          for (let n = e, r = t; ; )
            if (3 == n.nodeType && r > 0) return { node: n, offset: r };
            else if (1 == n.nodeType && r > 0) {
              if ("false" == n.contentEditable) return null;
              r = nj((n = n.childNodes[r - 1]));
            } else {
              if (!n.parentNode || nM(n)) return null;
              (r = nR(n)), (n = n.parentNode);
            }
        }
        function nZ(e, t) {
          for (let n = e, r = t; ; )
            if (3 == n.nodeType && r < n.nodeValue.length)
              return { node: n, offset: r };
            else if (1 == n.nodeType && r < n.childNodes.length) {
              if ("false" == n.contentEditable) return null;
              (n = n.childNodes[r]), (r = 0);
            } else {
              if (!n.parentNode || nM(n)) return null;
              (r = nR(n) + 1), (n = n.parentNode);
            }
        }
        class nG {
          constructor(e, t, n = !0) {
            (this.node = e), (this.offset = t), (this.precise = n);
          }
          static before(e, t) {
            return new nG(e.parentNode, nR(e), t);
          }
          static after(e, t) {
            return new nG(e.parentNode, nR(e) + 1, t);
          }
        }
        let nY = [];
        class nK {
          constructor() {
            (this.parent = null), (this.dom = null), (this.flags = 2);
          }
          get overrideDOMText() {
            return null;
          }
          get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
          }
          get posAtEnd() {
            return this.posAtStart + this.length;
          }
          posBefore(e) {
            let t = this.posAtStart;
            for (let n of this.children) {
              if (n == e) return t;
              t += n.length + n.breakAfter;
            }
            throw RangeError("Invalid child in posBefore");
          }
          posAfter(e) {
            return this.posBefore(e) + e.length;
          }
          sync(e, t) {
            if (2 & this.flags) {
              let n = this.dom,
                r = null,
                i;
              for (let s of this.children) {
                if (7 & s.flags) {
                  if (!s.dom && (i = r ? r.nextSibling : n.firstChild)) {
                    let e = nK.get(i);
                    (!e || (!e.parent && e.canReuseDOM(s))) && s.reuseDOM(i);
                  }
                  s.sync(e, t), (s.flags &= -8);
                }
                if (
                  ((i = r ? r.nextSibling : n.firstChild),
                  t &&
                    !t.written &&
                    t.node == n &&
                    i != s.dom &&
                    (t.written = !0),
                  s.dom.parentNode == n)
                )
                  for (; i && i != s.dom; ) i = nX(i);
                else n.insertBefore(s.dom, i);
                r = s.dom;
              }
              for (
                (i = r ? r.nextSibling : n.firstChild) &&
                t &&
                t.node == n &&
                (t.written = !0);
                i;

              )
                i = nX(i);
            } else if (1 & this.flags)
              for (let n of this.children)
                7 & n.flags && (n.sync(e, t), (n.flags &= -8));
          }
          reuseDOM(e) {}
          localPosFromDOM(e, t) {
            let n;
            if (e == this.dom) n = this.dom.childNodes[t];
            else {
              let r = 0 == nj(e) ? 0 : 0 == t ? -1 : 1;
              for (;;) {
                let t = e.parentNode;
                if (t == this.dom) break;
                0 == r &&
                  t.firstChild != t.lastChild &&
                  (r = e == t.firstChild ? -1 : 1),
                  (e = t);
              }
              n = r < 0 ? e : e.nextSibling;
            }
            if (n == this.dom.firstChild) return 0;
            for (; n && !nK.get(n); ) n = n.nextSibling;
            if (!n) return this.length;
            for (let e = 0, t = 0; ; e++) {
              let r = this.children[e];
              if (r.dom == n) return t;
              t += r.length + r.breakAfter;
            }
          }
          domBoundsAround(e, t, n = 0) {
            let r = -1,
              i = -1,
              s = -1,
              o = -1;
            for (let a = 0, l = n, c = n; a < this.children.length; a++) {
              let n = this.children[a],
                u = l + n.length;
              if (l < e && u > t) return n.domBoundsAround(e, t, l);
              if (
                (u >= e && -1 == r && ((r = a), (i = l)),
                l > t && n.dom.parentNode == this.dom)
              ) {
                (s = a), (o = c);
                break;
              }
              (c = u), (l = u + n.breakAfter);
            }
            return {
              from: i,
              to: o < 0 ? n + this.length : o,
              startDOM:
                (r ? this.children[r - 1].dom.nextSibling : null) ||
                this.dom.firstChild,
              endDOM:
                s < this.children.length && s >= 0
                  ? this.children[s].dom
                  : null,
            };
          }
          markDirty(e = !1) {
            (this.flags |= 2), this.markParentsDirty(e);
          }
          markParentsDirty(e) {
            for (let t = this.parent; t; t = t.parent) {
              if ((e && (t.flags |= 2), 1 & t.flags)) return;
              (t.flags |= 1), (e = !1);
            }
          }
          setParent(e) {
            this.parent != e &&
              ((this.parent = e), 7 & this.flags && this.markParentsDirty(!0));
          }
          setDOM(e) {
            this.dom != e &&
              (this.dom && (this.dom.cmView = null),
              (this.dom = e),
              (e.cmView = this));
          }
          get rootView() {
            for (let e = this; ; ) {
              let t = e.parent;
              if (!t) return e;
              e = t;
            }
          }
          replaceChildren(e, t, n = nY) {
            this.markDirty();
            for (let r = e; r < t; r++) {
              let e = this.children[r];
              e.parent == this && 0 > n.indexOf(e) && e.destroy();
            }
            n.length < 250
              ? this.children.splice(e, t - e, ...n)
              : (this.children = [].concat(
                  this.children.slice(0, e),
                  n,
                  this.children.slice(t),
                ));
            for (let e = 0; e < n.length; e++) n[e].setParent(this);
          }
          ignoreMutation(e) {
            return !1;
          }
          ignoreEvent(e) {
            return !1;
          }
          childCursor(e = this.length) {
            return new nJ(this.children, e, this.children.length);
          }
          childPos(e, t = 1) {
            return this.childCursor().findPos(e, t);
          }
          toString() {
            let e = this.constructor.name.replace("View", "");
            return (
              e +
              (this.children.length
                ? "(" + this.children.join() + ")"
                : this.length
                  ? "[" + ("Text" == e ? this.text : this.length) + "]"
                  : "") +
              (this.breakAfter ? "#" : "")
            );
          }
          static get(e) {
            return e.cmView;
          }
          get isEditable() {
            return !0;
          }
          get isWidget() {
            return !1;
          }
          get isHidden() {
            return !1;
          }
          merge(e, t, n, r, i, s) {
            return !1;
          }
          become(e) {
            return !1;
          }
          canReuseDOM(e) {
            return (
              e.constructor == this.constructor && !((this.flags | e.flags) & 8)
            );
          }
          getSide() {
            return 0;
          }
          destroy() {
            for (let e of this.children) e.parent == this && e.destroy();
            this.parent = null;
          }
        }
        function nX(e) {
          let t = e.nextSibling;
          return e.parentNode.removeChild(e), t;
        }
        nK.prototype.breakAfter = 0;
        class nJ {
          constructor(e, t, n) {
            (this.children = e), (this.pos = t), (this.i = n), (this.off = 0);
          }
          findPos(e, t = 1) {
            for (;;) {
              if (
                e > this.pos ||
                (e == this.pos &&
                  (t > 0 ||
                    0 == this.i ||
                    this.children[this.i - 1].breakAfter))
              )
                return (this.off = e - this.pos), this;
              let n = this.children[--this.i];
              this.pos -= n.length + n.breakAfter;
            }
          }
        }
        function n0(e, t, n, r, i, s, o, a, l) {
          let { children: c } = e,
            u = c.length ? c[t] : null,
            d = s.length ? s[s.length - 1] : null,
            h = d ? d.breakAfter : o;
          if (
            !(
              t == r &&
              u &&
              !o &&
              !h &&
              s.length < 2 &&
              u.merge(n, i, s.length ? d : null, 0 == n, a, l)
            )
          ) {
            if (r < c.length) {
              let e = c[r];
              e &&
              (i < e.length ||
                (e.breakAfter && (null == d ? void 0 : d.breakAfter)))
                ? (t == r && ((e = e.split(i)), (i = 0)),
                  !h && d && e.merge(0, i, d, !0, 0, l)
                    ? (s[s.length - 1] = e)
                    : ((i || (e.children.length && !e.children[0].length)) &&
                        e.merge(0, i, null, !1, 0, l),
                      s.push(e)))
                : (null == e ? void 0 : e.breakAfter) &&
                  (d ? (d.breakAfter = 1) : (o = 1)),
                r++;
            }
            for (
              u &&
              ((u.breakAfter = o),
              n > 0 &&
                (!o && s.length && u.merge(n, u.length, s[0], !1, a, 0)
                  ? (u.breakAfter = s.shift().breakAfter)
                  : (n < u.length ||
                      (u.children.length &&
                        0 == u.children[u.children.length - 1].length)) &&
                    u.merge(n, u.length, null, !1, a, 0),
                t++));
              t < r && s.length;

            )
              if (c[r - 1].become(s[s.length - 1]))
                r--, s.pop(), (l = s.length ? 0 : a);
              else if (c[t].become(s[0]))
                t++, s.shift(), (a = s.length ? 0 : l);
              else break;
            !s.length &&
              t &&
              r < c.length &&
              !c[t - 1].breakAfter &&
              c[r].merge(0, 0, c[t - 1], !1, a, l) &&
              t--,
              (t < r || s.length) && e.replaceChildren(t, r, s);
          }
        }
        function n1(e, t, n, r, i, s) {
          let o = e.childCursor(),
            { i: a, off: l } = o.findPos(n, 1),
            { i: c, off: u } = o.findPos(t, -1),
            d = t - n;
          for (let e of r) d += e.length;
          (e.length += d), n0(e, c, u, a, l, r, 0, i, s);
        }
        let n2 =
            "undefined" != typeof navigator
              ? navigator
              : { userAgent: "", vendor: "", platform: "" },
          n5 =
            "undefined" != typeof document
              ? document
              : { documentElement: { style: {} } },
          n3 = /Edge\/(\d+)/.exec(n2.userAgent),
          n4 = /MSIE \d/.test(n2.userAgent),
          n8 = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(n2.userAgent),
          n6 = !!(n4 || n8 || n3),
          n9 = !n6 && /gecko\/(\d+)/i.test(n2.userAgent),
          n7 = !n6 && /Chrome\/(\d+)/.exec(n2.userAgent),
          re = "webkitFontSmoothing" in n5.documentElement.style,
          rt = !n6 && /Apple Computer/.test(n2.vendor),
          rn =
            rt && (/Mobile\/\w+/.test(n2.userAgent) || n2.maxTouchPoints > 2);
        var rr = {
          mac: rn || /Mac/.test(n2.platform),
          windows: /Win/.test(n2.platform),
          linux: /Linux|X11/.test(n2.platform),
          ie: n6,
          ie_version: n4 ? n5.documentMode || 6 : n8 ? +n8[1] : n3 ? +n3[1] : 0,
          gecko: n9,
          gecko_version: n9
            ? +(/Firefox\/(\d+)/.exec(n2.userAgent) || [0, 0])[1]
            : 0,
          chrome: !!n7,
          chrome_version: n7 ? +n7[1] : 0,
          ios: rn,
          android: /Android\b/.test(n2.userAgent),
          webkit: re,
          safari: rt,
          webkit_version: re
            ? +(/\bAppleWebKit\/(\d+)/.exec(n2.userAgent) || [0, 0])[1]
            : 0,
          tabSize:
            null != n5.documentElement.style.tabSize
              ? "tab-size"
              : "-moz-tab-size",
        };
        class ri extends nK {
          constructor(e) {
            super(), (this.text = e);
          }
          get length() {
            return this.text.length;
          }
          createDOM(e) {
            this.setDOM(e || document.createTextNode(this.text));
          }
          sync(e, t) {
            this.dom || this.createDOM(),
              this.dom.nodeValue != this.text &&
                (t && t.node == this.dom && (t.written = !0),
                (this.dom.nodeValue = this.text));
          }
          reuseDOM(e) {
            3 == e.nodeType && this.createDOM(e);
          }
          merge(e, t, n) {
            return (
              !(8 & this.flags) &&
              (!n ||
                (n instanceof ri &&
                  !(this.length - (t - e) + n.length > 256) &&
                  !(8 & n.flags))) &&
              ((this.text =
                this.text.slice(0, e) + (n ? n.text : "") + this.text.slice(t)),
              this.markDirty(),
              !0)
            );
          }
          split(e) {
            let t = new ri(this.text.slice(e));
            return (
              (this.text = this.text.slice(0, e)),
              this.markDirty(),
              (t.flags |= 8 & this.flags),
              t
            );
          }
          localPosFromDOM(e, t) {
            return e == this.dom ? t : t ? this.text.length : 0;
          }
          domAtPos(e) {
            return new nG(this.dom, e);
          }
          domBoundsAround(e, t, n) {
            return {
              from: n,
              to: n + this.length,
              startDOM: this.dom,
              endDOM: this.dom.nextSibling,
            };
          }
          coordsAt(e, t) {
            return (function (e, t, n) {
              let r = e.nodeValue.length;
              t > r && (t = r);
              let i = t,
                s = t,
                o = 0;
              (0 == t && n < 0) || (t == r && n >= 0)
                ? !(rr.chrome || rr.gecko) &&
                  (t ? (i--, (o = 1)) : s < r && (s++, (o = -1)))
                : n < 0
                  ? i--
                  : s < r && s++;
              let a = nU(e, i, s).getClientRects();
              if (!a.length) return null;
              let l = a[(o ? o < 0 : n >= 0) ? 0 : a.length - 1];
              return (
                rr.safari &&
                  !o &&
                  0 == l.width &&
                  (l = Array.prototype.find.call(a, (e) => e.width) || l),
                o ? nF(l, o < 0) : l || null
              );
            })(this.dom, e, t);
          }
        }
        class rs extends nK {
          constructor(e, t = [], n = 0) {
            for (let r of (super(),
            (this.mark = e),
            (this.children = t),
            (this.length = n),
            t))
              r.setParent(this);
          }
          setAttrs(e) {
            if (
              (nQ(e),
              this.mark.class && (e.className = this.mark.class),
              this.mark.attrs)
            )
              for (let t in this.mark.attrs)
                e.setAttribute(t, this.mark.attrs[t]);
            return e;
          }
          canReuseDOM(e) {
            return super.canReuseDOM(e) && !((this.flags | e.flags) & 8);
          }
          reuseDOM(e) {
            e.nodeName == this.mark.tagName.toUpperCase() &&
              (this.setDOM(e), (this.flags |= 6));
          }
          sync(e, t) {
            this.dom
              ? 4 & this.flags && this.setAttrs(this.dom)
              : this.setDOM(
                  this.setAttrs(document.createElement(this.mark.tagName)),
                ),
              super.sync(e, t);
          }
          merge(e, t, n, r, i, s) {
            return (
              (!n ||
                (!!(n instanceof rs && n.mark.eq(this.mark)) &&
                  (!e || !(i <= 0)) &&
                  (!(t < this.length) || !(s <= 0)))) &&
              (n1(this, e, t, n ? n.children.slice() : [], i - 1, s - 1),
              this.markDirty(),
              !0)
            );
          }
          split(e) {
            let t = [],
              n = 0,
              r = -1,
              i = 0;
            for (let s of this.children) {
              let o = n + s.length;
              o > e && t.push(n < e ? s.split(e - n) : s),
                r < 0 && n >= e && (r = i),
                (n = o),
                i++;
            }
            let s = this.length - e;
            return (
              (this.length = e),
              r > -1 && ((this.children.length = r), this.markDirty()),
              new rs(this.mark, t, s)
            );
          }
          domAtPos(e) {
            return rl(this, e);
          }
          coordsAt(e, t) {
            return rc(this, e, t);
          }
        }
        class ro extends nK {
          static create(e, t, n) {
            return new ro(e, t, n);
          }
          constructor(e, t, n) {
            super(),
              (this.widget = e),
              (this.length = t),
              (this.side = n),
              (this.prevWidget = null);
          }
          split(e) {
            let t = ro.create(this.widget, this.length - e, this.side);
            return (this.length -= e), t;
          }
          sync(e) {
            (this.dom && this.widget.updateDOM(this.dom, e)) ||
              (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom),
              (this.prevWidget = null),
              this.setDOM(this.widget.toDOM(e)),
              this.widget.editable || (this.dom.contentEditable = "false"));
          }
          getSide() {
            return this.side;
          }
          merge(e, t, n, r, i, s) {
            return (
              (!n ||
                (n instanceof ro &&
                  !!this.widget.compare(n.widget) &&
                  (!(e > 0) || !(i <= 0)) &&
                  (!(t < this.length) || !(s <= 0)))) &&
              ((this.length = e + (n ? n.length : 0) + (this.length - t)), !0)
            );
          }
          become(e) {
            return (
              e instanceof ro &&
              e.side == this.side &&
              this.widget.constructor == e.widget.constructor &&
              (this.widget.compare(e.widget) || this.markDirty(!0),
              this.dom && !this.prevWidget && (this.prevWidget = this.widget),
              (this.widget = e.widget),
              (this.length = e.length),
              !0)
            );
          }
          ignoreMutation() {
            return !0;
          }
          ignoreEvent(e) {
            return this.widget.ignoreEvent(e);
          }
          get overrideDOMText() {
            if (0 == this.length) return to.empty;
            let e = this;
            for (; e.parent; ) e = e.parent;
            let { view: t } = e,
              n = t && t.state.doc,
              r = this.posAtStart;
            return n ? n.slice(r, r + this.length) : to.empty;
          }
          domAtPos(e) {
            return (this.length ? 0 == e : this.side > 0)
              ? nG.before(this.dom)
              : nG.after(this.dom, e == this.length);
          }
          domBoundsAround() {
            return null;
          }
          coordsAt(e, t) {
            let n = this.widget.coordsAt(this.dom, e, t);
            if (n) return n;
            let r = this.dom.getClientRects(),
              i = null;
            if (!r.length) return null;
            let s = this.side ? this.side < 0 : e > 0;
            for (
              let t = s ? r.length - 1 : 0;
              (i = r[t]),
                e > 0 ? 0 != t : t != r.length - 1 && !(i.top < i.bottom);
              t += s ? -1 : 1
            );
            return nF(i, !s);
          }
          get isEditable() {
            return !1;
          }
          get isWidget() {
            return !0;
          }
          get isHidden() {
            return this.widget.isHidden;
          }
          destroy() {
            super.destroy(), this.dom && this.widget.destroy(this.dom);
          }
        }
        class ra extends nK {
          constructor(e) {
            super(), (this.side = e);
          }
          get length() {
            return 0;
          }
          merge() {
            return !1;
          }
          become(e) {
            return e instanceof ra && e.side == this.side;
          }
          split() {
            return new ra(this.side);
          }
          sync() {
            if (!this.dom) {
              let e = document.createElement("img");
              (e.className = "cm-widgetBuffer"),
                e.setAttribute("aria-hidden", "true"),
                this.setDOM(e);
            }
          }
          getSide() {
            return this.side;
          }
          domAtPos(e) {
            return this.side > 0 ? nG.before(this.dom) : nG.after(this.dom);
          }
          localPosFromDOM() {
            return 0;
          }
          domBoundsAround() {
            return null;
          }
          coordsAt(e) {
            return this.dom.getBoundingClientRect();
          }
          get overrideDOMText() {
            return to.empty;
          }
          get isHidden() {
            return !0;
          }
        }
        function rl(e, t) {
          let n = e.dom,
            { children: r } = e,
            i = 0;
          for (let e = 0; i < r.length; i++) {
            let s = r[i],
              o = e + s.length;
            if (!(o == e && 0 >= s.getSide())) {
              if (t > e && t < o && s.dom.parentNode == n)
                return s.domAtPos(t - e);
              if (t <= e) break;
              e = o;
            }
          }
          for (let e = i; e > 0; e--) {
            let t = r[e - 1];
            if (t.dom.parentNode == n) return t.domAtPos(t.length);
          }
          for (let e = i; e < r.length; e++) {
            let t = r[e];
            if (t.dom.parentNode == n) return t.domAtPos(0);
          }
          return new nG(n, 0);
        }
        function rc(e, t, n) {
          let r = null,
            i = -1,
            s = null,
            o = -1;
          !(function e(t, a) {
            for (let l = 0, c = 0; l < t.children.length && c <= a; l++) {
              let u = t.children[l],
                d = c + u.length;
              d >= a &&
                (u.children.length
                  ? e(u, a - c)
                  : (!s ||
                        (s.isHidden &&
                          (n > 0 ||
                            (function (e, t) {
                              let n = e.coordsAt(0, 1),
                                r = t.coordsAt(0, 1);
                              return n && r && r.top < n.bottom;
                            })(s, u)))) &&
                      (d > a || (c == d && u.getSide() > 0))
                    ? ((s = u), (o = a - c))
                    : (c < a || (c == d && 0 > u.getSide() && !u.isHidden)) &&
                      ((r = u), (i = a - c))),
                (c = d);
            }
          })(e, t);
          let a = (n < 0 ? r : s) || r || s;
          return a
            ? a.coordsAt(Math.max(0, a == r ? i : o), n)
            : (function (e) {
                let t = e.dom.lastChild;
                if (!t) return e.dom.getBoundingClientRect();
                let n = nD(t);
                return n[n.length - 1] || null;
              })(e);
        }
        function ru(e, t) {
          for (let n in e)
            "class" == n && t.class
              ? (t.class += " " + e.class)
              : "style" == n && t.style
                ? (t.style += ";" + e.style)
                : (t[n] = e[n]);
          return t;
        }
        ri.prototype.children =
          ro.prototype.children =
          ra.prototype.children =
            nY;
        let rd = Object.create(null);
        function rh(e, t, n) {
          if (e == t) return !0;
          e || (e = rd), t || (t = rd);
          let r = Object.keys(e),
            i = Object.keys(t);
          if (
            r.length - (n && r.indexOf(n) > -1 ? 1 : 0) !=
            i.length - (n && i.indexOf(n) > -1 ? 1 : 0)
          )
            return !1;
          for (let s of r)
            if (s != n && (-1 == i.indexOf(s) || e[s] !== t[s])) return !1;
          return !0;
        }
        function rp(e, t, n) {
          let r = !1;
          if (t)
            for (let i in t)
              (n && i in n) ||
                ((r = !0),
                "style" == i ? (e.style.cssText = "") : e.removeAttribute(i));
          if (n)
            for (let i in n)
              (t && t[i] == n[i]) ||
                ((r = !0),
                "style" == i
                  ? (e.style.cssText = n[i])
                  : e.setAttribute(i, n[i]));
          return r;
        }
        class rf {
          eq(e) {
            return !1;
          }
          updateDOM(e, t) {
            return !1;
          }
          compare(e) {
            return (
              this == e || (this.constructor == e.constructor && this.eq(e))
            );
          }
          get estimatedHeight() {
            return -1;
          }
          get lineBreaks() {
            return 0;
          }
          ignoreEvent(e) {
            return !0;
          }
          coordsAt(e, t, n) {
            return null;
          }
          get isHidden() {
            return !1;
          }
          get editable() {
            return !1;
          }
          destroy(e) {}
        }
        var rm = (function (e) {
          return (
            (e[(e.Text = 0)] = "Text"),
            (e[(e.WidgetBefore = 1)] = "WidgetBefore"),
            (e[(e.WidgetAfter = 2)] = "WidgetAfter"),
            (e[(e.WidgetRange = 3)] = "WidgetRange"),
            e
          );
        })(rm || (rm = {}));
        class rg extends ns {
          constructor(e, t, n, r) {
            super(),
              (this.startSide = e),
              (this.endSide = t),
              (this.widget = n),
              (this.spec = r);
          }
          get heightRelevant() {
            return !1;
          }
          static mark(e) {
            return new ry(e);
          }
          static widget(e) {
            let t = Math.max(-1e4, Math.min(1e4, e.side || 0)),
              n = !!e.block;
            return (
              (t +=
                n && !e.inlineOrder
                  ? t > 0
                    ? 3e8
                    : -4e8
                  : t > 0
                    ? 1e8
                    : -1e8),
              new rb(e, t, t, n, e.widget || null, !1)
            );
          }
          static replace(e) {
            let t = !!e.block,
              n,
              r;
            if (e.isBlockGap) (n = -5e8), (r = 4e8);
            else {
              let { start: i, end: s } = rx(e, t);
              (n = (i ? (t ? -3e8 : -1) : 5e8) - 1),
                (r = (s ? (t ? 2e8 : 1) : -6e8) + 1);
            }
            return new rb(e, n, r, t, e.widget || null, !0);
          }
          static line(e) {
            return new rv(e);
          }
          static set(e, t = !1) {
            return nc.of(e, t);
          }
          hasHeight() {
            return !!this.widget && this.widget.estimatedHeight > -1;
          }
        }
        rg.none = nc.empty;
        class ry extends rg {
          constructor(e) {
            let { start: t, end: n } = rx(e);
            super(t ? -1 : 5e8, n ? 1 : -6e8, null, e),
              (this.tagName = e.tagName || "span"),
              (this.class = e.class || ""),
              (this.attrs = e.attributes || null);
          }
          eq(e) {
            var t, n;
            return (
              this == e ||
              (e instanceof ry &&
                this.tagName == e.tagName &&
                (this.class || (null == (t = this.attrs) ? void 0 : t.class)) ==
                  (e.class || (null == (n = e.attrs) ? void 0 : n.class)) &&
                rh(this.attrs, e.attrs, "class"))
            );
          }
          range(e, t = e) {
            if (e >= t) throw RangeError("Mark decorations may not be empty");
            return super.range(e, t);
          }
        }
        ry.prototype.point = !1;
        class rv extends rg {
          constructor(e) {
            super(-2e8, -2e8, null, e);
          }
          eq(e) {
            return (
              e instanceof rv &&
              this.spec.class == e.spec.class &&
              rh(this.spec.attributes, e.spec.attributes)
            );
          }
          range(e, t = e) {
            if (t != e)
              throw RangeError("Line decoration ranges must be zero-length");
            return super.range(e, t);
          }
        }
        (rv.prototype.mapMode = tx.TrackBefore), (rv.prototype.point = !0);
        class rb extends rg {
          constructor(e, t, n, r, i, s) {
            super(t, n, i, e),
              (this.block = r),
              (this.isReplace = s),
              (this.mapMode = r
                ? t <= 0
                  ? tx.TrackBefore
                  : tx.TrackAfter
                : tx.TrackDel);
          }
          get type() {
            return this.startSide != this.endSide
              ? rm.WidgetRange
              : this.startSide <= 0
                ? rm.WidgetBefore
                : rm.WidgetAfter;
          }
          get heightRelevant() {
            return (
              this.block ||
              (!!this.widget &&
                (this.widget.estimatedHeight >= 5 ||
                  this.widget.lineBreaks > 0))
            );
          }
          eq(e) {
            var t, n;
            return (
              e instanceof rb &&
              ((t = this.widget),
              t == (n = e.widget) || !!(t && n && t.compare(n))) &&
              this.block == e.block &&
              this.startSide == e.startSide &&
              this.endSide == e.endSide
            );
          }
          range(e, t = e) {
            if (
              this.isReplace &&
              (e > t || (e == t && this.startSide > 0 && this.endSide <= 0))
            )
              throw RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && t != e)
              throw RangeError(
                "Widget decorations can only have zero-length ranges",
              );
            return super.range(e, t);
          }
        }
        function rx(e, t = !1) {
          let { inclusiveStart: n, inclusiveEnd: r } = e;
          return (
            null == n && (n = e.inclusive),
            null == r && (r = e.inclusive),
            { start: null != n ? n : t, end: null != r ? r : t }
          );
        }
        function rk(e, t, n, r = 0) {
          let i = n.length - 1;
          i >= 0 && n[i] + r >= e ? (n[i] = Math.max(n[i], t)) : n.push(e, t);
        }
        rb.prototype.point = !0;
        class rw extends nK {
          constructor() {
            super(...arguments),
              (this.children = []),
              (this.length = 0),
              (this.prevAttrs = void 0),
              (this.attrs = null),
              (this.breakAfter = 0);
          }
          merge(e, t, n, r, i, s) {
            if (n) {
              if (!(n instanceof rw)) return !1;
              this.dom || n.transferDOM(this);
            }
            return (
              r && this.setDeco(n ? n.attrs : null),
              n1(this, e, t, n ? n.children.slice() : [], i, s),
              !0
            );
          }
          split(e) {
            let t = new rw();
            if (((t.breakAfter = this.breakAfter), 0 == this.length)) return t;
            let { i: n, off: r } = this.childPos(e);
            r &&
              (t.append(this.children[n].split(r), 0),
              this.children[n].merge(
                r,
                this.children[n].length,
                null,
                !1,
                0,
                0,
              ),
              n++);
            for (let e = n; e < this.children.length; e++)
              t.append(this.children[e], 0);
            for (; n > 0 && 0 == this.children[n - 1].length; )
              this.children[--n].destroy();
            return (
              (this.children.length = n), this.markDirty(), (this.length = e), t
            );
          }
          transferDOM(e) {
            this.dom &&
              (this.markDirty(),
              e.setDOM(this.dom),
              (e.prevAttrs =
                void 0 === this.prevAttrs ? this.attrs : this.prevAttrs),
              (this.prevAttrs = void 0),
              (this.dom = null));
          }
          setDeco(e) {
            rh(this.attrs, e) ||
              (this.dom && ((this.prevAttrs = this.attrs), this.markDirty()),
              (this.attrs = e));
          }
          append(e, t) {
            !(function e(t, n, r) {
              let i,
                { children: s } = t;
              r > 0 &&
              n instanceof rs &&
              s.length &&
              (i = s[s.length - 1]) instanceof rs &&
              i.mark.eq(n.mark)
                ? e(i, n.children[0], r - 1)
                : (s.push(n), n.setParent(t)),
                (t.length += n.length);
            })(this, e, t);
          }
          addLineDeco(e) {
            let t = e.spec.attributes,
              n = e.spec.class;
            t && (this.attrs = ru(t, this.attrs || {})),
              n && (this.attrs = ru({ class: n }, this.attrs || {}));
          }
          domAtPos(e) {
            return rl(this, e);
          }
          reuseDOM(e) {
            "DIV" == e.nodeName && (this.setDOM(e), (this.flags |= 6));
          }
          sync(e, t) {
            var n;
            this.dom
              ? 4 & this.flags &&
                (nQ(this.dom),
                (this.dom.className = "cm-line"),
                (this.prevAttrs = this.attrs ? null : void 0))
              : (this.setDOM(document.createElement("div")),
                (this.dom.className = "cm-line"),
                (this.prevAttrs = this.attrs ? null : void 0)),
              void 0 !== this.prevAttrs &&
                (rp(this.dom, this.prevAttrs, this.attrs),
                this.dom.classList.add("cm-line"),
                (this.prevAttrs = void 0)),
              super.sync(e, t);
            let r = this.dom.lastChild;
            for (; r && nK.get(r) instanceof rs; ) r = r.lastChild;
            if (
              !r ||
              !this.length ||
              ("BR" != r.nodeName &&
                (null == (n = nK.get(r)) ? void 0 : n.isEditable) == !1 &&
                (!rr.ios || !this.children.some((e) => e instanceof ri)))
            ) {
              let e = document.createElement("BR");
              (e.cmIgnore = !0), this.dom.appendChild(e);
            }
          }
          measureTextSize() {
            if (0 == this.children.length || this.length > 20) return null;
            let e = 0,
              t;
            for (let n of this.children) {
              if (!(n instanceof ri) || /[^ -~]/.test(n.text)) return null;
              let r = nD(n.dom);
              if (1 != r.length) return null;
              (e += r[0].width), (t = r[0].height);
            }
            return e
              ? {
                  lineHeight: this.dom.getBoundingClientRect().height,
                  charWidth: e / this.length,
                  textHeight: t,
                }
              : null;
          }
          coordsAt(e, t) {
            let n = rc(this, e, t);
            if (!this.children.length && n && this.parent) {
              let { heightOracle: e } = this.parent.view.viewState,
                t = n.bottom - n.top;
              if (2 > Math.abs(t - e.lineHeight) && e.textHeight < t) {
                let r = (t - e.textHeight) / 2;
                return {
                  top: n.top + r,
                  bottom: n.bottom - r,
                  left: n.left,
                  right: n.left,
                };
              }
            }
            return n;
          }
          become(e) {
            return (
              e instanceof rw &&
              0 == this.children.length &&
              0 == e.children.length &&
              rh(this.attrs, e.attrs) &&
              this.breakAfter == e.breakAfter
            );
          }
          covers() {
            return !0;
          }
          static find(e, t) {
            for (let n = 0, r = 0; n < e.children.length; n++) {
              let i = e.children[n],
                s = r + i.length;
              if (s >= t) {
                if (i instanceof rw) return i;
                if (s > t) break;
              }
              r = s + i.breakAfter;
            }
            return null;
          }
        }
        class r_ extends nK {
          constructor(e, t, n) {
            super(),
              (this.widget = e),
              (this.length = t),
              (this.deco = n),
              (this.breakAfter = 0),
              (this.prevWidget = null);
          }
          merge(e, t, n, r, i, s) {
            return (
              (!n ||
                (n instanceof r_ &&
                  !!this.widget.compare(n.widget) &&
                  (!(e > 0) || !(i <= 0)) &&
                  (!(t < this.length) || !(s <= 0)))) &&
              ((this.length = e + (n ? n.length : 0) + (this.length - t)), !0)
            );
          }
          domAtPos(e) {
            return 0 == e
              ? nG.before(this.dom)
              : nG.after(this.dom, e == this.length);
          }
          split(e) {
            let t = this.length - e;
            this.length = e;
            let n = new r_(this.widget, t, this.deco);
            return (n.breakAfter = this.breakAfter), n;
          }
          get children() {
            return nY;
          }
          sync(e) {
            (this.dom && this.widget.updateDOM(this.dom, e)) ||
              (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom),
              (this.prevWidget = null),
              this.setDOM(this.widget.toDOM(e)),
              this.widget.editable || (this.dom.contentEditable = "false"));
          }
          get overrideDOMText() {
            return this.parent
              ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd)
              : to.empty;
          }
          domBoundsAround() {
            return null;
          }
          become(e) {
            return (
              e instanceof r_ &&
              e.widget.constructor == this.widget.constructor &&
              (e.widget.compare(this.widget) || this.markDirty(!0),
              this.dom && !this.prevWidget && (this.prevWidget = this.widget),
              (this.widget = e.widget),
              (this.length = e.length),
              (this.deco = e.deco),
              (this.breakAfter = e.breakAfter),
              !0)
            );
          }
          ignoreMutation() {
            return !0;
          }
          ignoreEvent(e) {
            return this.widget.ignoreEvent(e);
          }
          get isEditable() {
            return !1;
          }
          get isWidget() {
            return !0;
          }
          coordsAt(e, t) {
            let n = this.widget.coordsAt(this.dom, e, t);
            return (
              n ||
              (this.widget instanceof rO
                ? null
                : nF(
                    this.dom.getBoundingClientRect(),
                    this.length ? 0 == e : t <= 0,
                  ))
            );
          }
          destroy() {
            super.destroy(), this.dom && this.widget.destroy(this.dom);
          }
          covers(e) {
            let { startSide: t, endSide: n } = this.deco;
            return t != n && (e < 0 ? t < 0 : n > 0);
          }
        }
        class rO extends rf {
          constructor(e) {
            super(), (this.height = e);
          }
          toDOM() {
            let e = document.createElement("div");
            return (e.className = "cm-gap"), this.updateDOM(e), e;
          }
          eq(e) {
            return e.height == this.height;
          }
          updateDOM(e) {
            return (e.style.height = this.height + "px"), !0;
          }
          get editable() {
            return !0;
          }
          get estimatedHeight() {
            return this.height;
          }
          ignoreEvent() {
            return !1;
          }
        }
        class rT {
          constructor(e, t, n, r) {
            (this.doc = e),
              (this.pos = t),
              (this.end = n),
              (this.disallowBlockEffectsFor = r),
              (this.content = []),
              (this.curLine = null),
              (this.breakAtStart = 0),
              (this.pendingBuffer = 0),
              (this.bufferMarks = []),
              (this.atCursorPos = !0),
              (this.openStart = -1),
              (this.openEnd = -1),
              (this.text = ""),
              (this.textOff = 0),
              (this.cursor = e.iter()),
              (this.skip = t);
          }
          posCovered() {
            if (0 == this.content.length)
              return (
                !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos
              );
            let e = this.content[this.content.length - 1];
            return !(e.breakAfter || (e instanceof r_ && e.deco.endSide < 0));
          }
          getLine() {
            return (
              this.curLine ||
                (this.content.push((this.curLine = new rw())),
                (this.atCursorPos = !0)),
              this.curLine
            );
          }
          flushBuffer(e = this.bufferMarks) {
            this.pendingBuffer &&
              (this.curLine.append(rS(new ra(-1), e), e.length),
              (this.pendingBuffer = 0));
          }
          addBlockWidget(e) {
            this.flushBuffer(), (this.curLine = null), this.content.push(e);
          }
          finish(e) {
            this.pendingBuffer && e <= this.bufferMarks.length
              ? this.flushBuffer()
              : (this.pendingBuffer = 0),
              this.posCovered() ||
                (e &&
                  this.content.length &&
                  this.content[this.content.length - 1] instanceof r_) ||
                this.getLine();
          }
          buildText(e, t, n) {
            for (; e > 0; ) {
              if (this.textOff == this.text.length) {
                let {
                  value: t,
                  lineBreak: n,
                  done: r,
                } = this.cursor.next(this.skip);
                if (((this.skip = 0), r))
                  throw Error(
                    "Ran out of text content when drawing inline views",
                  );
                if (n) {
                  this.posCovered() || this.getLine(),
                    this.content.length
                      ? (this.content[this.content.length - 1].breakAfter = 1)
                      : (this.breakAtStart = 1),
                    this.flushBuffer(),
                    (this.curLine = null),
                    (this.atCursorPos = !0),
                    e--;
                  continue;
                }
                (this.text = t), (this.textOff = 0);
              }
              let r = Math.min(this.text.length - this.textOff, e, 512);
              this.flushBuffer(t.slice(t.length - n)),
                this.getLine().append(
                  rS(
                    new ri(this.text.slice(this.textOff, this.textOff + r)),
                    t,
                  ),
                  n,
                ),
                (this.atCursorPos = !0),
                (this.textOff += r),
                (e -= r),
                (n = 0);
            }
          }
          span(e, t, n, r) {
            this.buildText(t - e, n, r),
              (this.pos = t),
              this.openStart < 0 && (this.openStart = r);
          }
          point(e, t, n, r, i, s) {
            if (this.disallowBlockEffectsFor[s] && n instanceof rb) {
              if (n.block)
                throw RangeError(
                  "Block decorations may not be specified via plugins",
                );
              if (t > this.doc.lineAt(this.pos).to)
                throw RangeError(
                  "Decorations that replace line breaks may not be specified via plugins",
                );
            }
            let o = t - e;
            if (n instanceof rb)
              if (n.block)
                n.startSide > 0 && !this.posCovered() && this.getLine(),
                  this.addBlockWidget(new r_(n.widget || rE.block, o, n));
              else {
                let s = ro.create(
                    n.widget || rE.inline,
                    o,
                    o ? 0 : n.startSide,
                  ),
                  a =
                    this.atCursorPos &&
                    !s.isEditable &&
                    i <= r.length &&
                    (e < t || n.startSide > 0),
                  l =
                    !s.isEditable &&
                    (e < t || i > r.length || n.startSide <= 0),
                  c = this.getLine();
                2 != this.pendingBuffer ||
                  a ||
                  s.isEditable ||
                  (this.pendingBuffer = 0),
                  this.flushBuffer(r),
                  a &&
                    (c.append(rS(new ra(1), r), i),
                    (i = r.length + Math.max(0, i - r.length))),
                  c.append(rS(s, r), i),
                  (this.atCursorPos = l),
                  (this.pendingBuffer = l
                    ? e < t || i > r.length
                      ? 1
                      : 2
                    : 0),
                  this.pendingBuffer && (this.bufferMarks = r.slice());
              }
            else
              this.doc.lineAt(this.pos).from == this.pos &&
                this.getLine().addLineDeco(n);
            o &&
              (this.textOff + o <= this.text.length
                ? (this.textOff += o)
                : ((this.skip += o - (this.text.length - this.textOff)),
                  (this.text = ""),
                  (this.textOff = 0)),
              (this.pos = t)),
              this.openStart < 0 && (this.openStart = i);
          }
          static build(e, t, n, r, i) {
            let s = new rT(e, t, n, i);
            return (
              (s.openEnd = nc.spans(r, t, n, s)),
              s.openStart < 0 && (s.openStart = s.openEnd),
              s.finish(s.openEnd),
              s
            );
          }
        }
        function rS(e, t) {
          for (let n of t) e = new rs(n, [e], e.length);
          return e;
        }
        class rE extends rf {
          constructor(e) {
            super(), (this.tag = e);
          }
          eq(e) {
            return e.tag == this.tag;
          }
          toDOM() {
            return document.createElement(this.tag);
          }
          updateDOM(e) {
            return e.nodeName.toLowerCase() == this.tag;
          }
          get isHidden() {
            return !0;
          }
        }
        (rE.inline = new rE("span")), (rE.block = new rE("div"));
        var rC = (function (e) {
          return (e[(e.LTR = 0)] = "LTR"), (e[(e.RTL = 1)] = "RTL"), e;
        })(rC || (rC = {}));
        let rA = rC.LTR,
          rN = rC.RTL;
        function rI(e) {
          let t = [];
          for (let n = 0; n < e.length; n++) t.push(1 << +e[n]);
          return t;
        }
        let rD = rI(
            "88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008",
          ),
          rP = rI(
            "4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333",
          ),
          rR = Object.create(null),
          rM = [];
        for (let e of ["()", "[]", "{}"]) {
          let t = e.charCodeAt(0),
            n = e.charCodeAt(1);
          (rR[t] = n), (rR[n] = -t);
        }
        function rL(e) {
          return e <= 247
            ? rD[e]
            : 1424 <= e && e <= 1524
              ? 2
              : 1536 <= e && e <= 1785
                ? rP[e - 1536]
                : 1774 <= e && e <= 2220
                  ? 4
                  : 8192 <= e && e <= 8204
                    ? 256
                    : 64336 <= e && e <= 65023
                      ? 4
                      : 1;
        }
        let rj = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
        class rF {
          get dir() {
            return this.level % 2 ? rN : rA;
          }
          constructor(e, t, n) {
            (this.from = e), (this.to = t), (this.level = n);
          }
          side(e, t) {
            return (this.dir == t) == e ? this.to : this.from;
          }
          forward(e, t) {
            return e == (this.dir == t);
          }
          static find(e, t, n, r) {
            let i = -1;
            for (let s = 0; s < e.length; s++) {
              let o = e[s];
              if (o.from <= t && o.to >= t) {
                if (o.level == n) return s;
                (i < 0 ||
                  (0 != r
                    ? r < 0
                      ? o.from < t
                      : o.to > t
                    : e[i].level > o.level)) &&
                  (i = s);
              }
            }
            if (i < 0) throw RangeError("Index out of range");
            return i;
          }
        }
        let rB = [];
        function rz(e) {
          return [new rF(0, e, 0)];
        }
        let r$ = "",
          rq = tP.define(),
          rU = tP.define(),
          rH = tP.define(),
          rQ = tP.define(),
          rV = tP.define(),
          rW = tP.define(),
          rZ = tP.define(),
          rG = tP.define(),
          rY = tP.define(),
          rK = tP.define({ combine: (e) => e.some((e) => e) }),
          rX = tP.define({ combine: (e) => e.some((e) => e) }),
          rJ = tP.define();
        class r0 {
          constructor(e, t = "nearest", n = "nearest", r = 5, i = 5, s = !1) {
            (this.range = e),
              (this.y = t),
              (this.x = n),
              (this.yMargin = r),
              (this.xMargin = i),
              (this.isSnapshot = s);
          }
          map(e) {
            return e.empty
              ? this
              : new r0(
                  this.range.map(e),
                  this.y,
                  this.x,
                  this.yMargin,
                  this.xMargin,
                  this.isSnapshot,
                );
          }
          clip(e) {
            return this.range.to <= e.doc.length
              ? this
              : new r0(
                  tN.cursor(e.doc.length),
                  this.y,
                  this.x,
                  this.yMargin,
                  this.xMargin,
                  this.isSnapshot,
                );
          }
        }
        let r1 = t4.define({ map: (e, t) => e.map(t) }),
          r2 = t4.define();
        function r5(e, t, n) {
          let r = e.facet(rQ);
          r.length
            ? r[0](t)
            : (window.onerror &&
                window.onerror(String(t), n, void 0, void 0, t)) ||
              (n ? console.error(n + ":", t) : console.error(t));
        }
        let r3 = tP.define({ combine: (e) => !e.length || e[0] }),
          r4 = 0,
          r8 = tP.define({
            combine: (e) =>
              e.filter((t, n) => {
                for (let r = 0; r < n; r++)
                  if (e[r].plugin == t.plugin) return !1;
                return !0;
              }),
          });
        class r6 {
          constructor(e, t, n, r, i) {
            (this.id = e),
              (this.create = t),
              (this.domEventHandlers = n),
              (this.domEventObservers = r),
              (this.baseExtensions = i(this)),
              (this.extension = this.baseExtensions.concat(
                r8.of({ plugin: this, arg: void 0 }),
              ));
          }
          of(e) {
            return this.baseExtensions.concat(r8.of({ plugin: this, arg: e }));
          }
          static define(e, t) {
            let {
              eventHandlers: n,
              eventObservers: r,
              provide: i,
              decorations: s,
            } = t || {};
            return new r6(r4++, e, n, r, (e) => {
              let t = [];
              return (
                s &&
                  t.push(
                    it.of((t) => {
                      let n = t.plugin(e);
                      return n ? s(n) : rg.none;
                    }),
                  ),
                i && t.push(i(e)),
                t
              );
            });
          }
          static fromClass(e, t) {
            return r6.define((t, n) => new e(t, n), t);
          }
        }
        class r9 {
          constructor(e) {
            (this.spec = e), (this.mustUpdate = null), (this.value = null);
          }
          get plugin() {
            return this.spec && this.spec.plugin;
          }
          update(e) {
            if (this.value) {
              if (this.mustUpdate) {
                let e = this.mustUpdate;
                if (((this.mustUpdate = null), this.value.update))
                  try {
                    this.value.update(e);
                  } catch (t) {
                    if (
                      (r5(e.state, t, "CodeMirror plugin crashed"),
                      this.value.destroy)
                    )
                      try {
                        this.value.destroy();
                      } catch (e) {}
                    this.deactivate();
                  }
              }
            } else if (this.spec)
              try {
                this.value = this.spec.plugin.create(e, this.spec.arg);
              } catch (t) {
                r5(e.state, t, "CodeMirror plugin crashed"), this.deactivate();
              }
            return this;
          }
          destroy(e) {
            var t;
            if (null == (t = this.value) ? void 0 : t.destroy)
              try {
                this.value.destroy();
              } catch (t) {
                r5(e.state, t, "CodeMirror plugin crashed");
              }
          }
          deactivate() {
            this.spec = this.value = null;
          }
        }
        let r7 = tP.define(),
          ie = tP.define(),
          it = tP.define(),
          ir = tP.define(),
          ii = tP.define(),
          is = tP.define();
        function io(e, t) {
          let n = e.state.facet(is);
          if (!n.length) return n;
          let r = n.map((t) => (t instanceof Function ? t(e) : t)),
            i = [];
          return (
            nc.spans(r, t.from, t.to, {
              point() {},
              span(e, n, r, s) {
                let o = e - t.from,
                  a = n - t.from,
                  l = i;
                for (let e = r.length - 1; e >= 0; e--, s--) {
                  let n = r[e].spec.bidiIsolate,
                    i;
                  if (
                    (null == n &&
                      (n = (function (e, t, n) {
                        for (let r = t; r < n; r++) {
                          let t = rL(e.charCodeAt(r));
                          if (1 == t) break;
                          if (2 == t || 4 == t) return rN;
                        }
                        return rA;
                      })(t.text, o, a)),
                    s > 0 &&
                      l.length &&
                      (i = l[l.length - 1]).to == o &&
                      i.direction == n)
                  )
                    (i.to = a), (l = i.inner);
                  else {
                    let e = { from: o, to: a, direction: n, inner: [] };
                    l.push(e), (l = e.inner);
                  }
                }
              },
            }),
            i
          );
        }
        let ia = tP.define();
        function il(e) {
          let t = 0,
            n = 0,
            r = 0,
            i = 0;
          for (let s of e.state.facet(ia)) {
            let o = s(e);
            o &&
              (null != o.left && (t = Math.max(t, o.left)),
              null != o.right && (n = Math.max(n, o.right)),
              null != o.top && (r = Math.max(r, o.top)),
              null != o.bottom && (i = Math.max(i, o.bottom)));
          }
          return { left: t, right: n, top: r, bottom: i };
        }
        let ic = tP.define();
        class iu {
          constructor(e, t, n, r) {
            (this.fromA = e), (this.toA = t), (this.fromB = n), (this.toB = r);
          }
          join(e) {
            return new iu(
              Math.min(this.fromA, e.fromA),
              Math.max(this.toA, e.toA),
              Math.min(this.fromB, e.fromB),
              Math.max(this.toB, e.toB),
            );
          }
          addToSet(e) {
            let t = e.length,
              n = this;
            for (; t > 0; t--) {
              let r = e[t - 1];
              if (!(r.fromA > n.toA)) {
                if (r.toA < n.fromA) break;
                (n = n.join(r)), e.splice(t - 1, 1);
              }
            }
            return e.splice(t, 0, n), e;
          }
          static extendWithRanges(e, t) {
            if (0 == t.length) return e;
            let n = [];
            for (let r = 0, i = 0, s = 0, o = 0; ; r++) {
              let a = r == e.length ? null : e[r],
                l = s - o,
                c = a ? a.fromB : 1e9;
              for (; i < t.length && t[i] < c; ) {
                let e = t[i],
                  r = t[i + 1],
                  s = Math.max(o, e),
                  a = Math.min(c, r);
                if ((s <= a && new iu(s + l, a + l, s, a).addToSet(n), r > c))
                  break;
                i += 2;
              }
              if (!a) return n;
              new iu(a.fromA, a.toA, a.fromB, a.toB).addToSet(n),
                (s = a.toA),
                (o = a.toB);
            }
          }
        }
        class id {
          constructor(e, t, n) {
            for (let r of ((this.view = e),
            (this.state = t),
            (this.transactions = n),
            (this.flags = 0),
            (this.startState = e.state),
            (this.changes = tw.empty(this.startState.doc.length)),
            n))
              this.changes = this.changes.compose(r.changes);
            let r = [];
            this.changes.iterChangedRanges((e, t, n, i) =>
              r.push(new iu(e, t, n, i)),
            ),
              (this.changedRanges = r);
          }
          static create(e, t, n) {
            return new id(e, t, n);
          }
          get viewportChanged() {
            return (4 & this.flags) > 0;
          }
          get viewportMoved() {
            return (8 & this.flags) > 0;
          }
          get heightChanged() {
            return (2 & this.flags) > 0;
          }
          get geometryChanged() {
            return this.docChanged || (18 & this.flags) > 0;
          }
          get focusChanged() {
            return (1 & this.flags) > 0;
          }
          get docChanged() {
            return !this.changes.empty;
          }
          get selectionSet() {
            return this.transactions.some((e) => e.selection);
          }
          get empty() {
            return 0 == this.flags && 0 == this.transactions.length;
          }
        }
        class ih extends nK {
          get length() {
            return this.view.state.doc.length;
          }
          constructor(e) {
            super(),
              (this.view = e),
              (this.decorations = []),
              (this.dynamicDecorationMap = [!1]),
              (this.domChanged = null),
              (this.hasComposition = null),
              (this.markedForComposition = new Set()),
              (this.editContextFormatting = rg.none),
              (this.lastCompositionAfterCursor = !1),
              (this.minWidth = 0),
              (this.minWidthFrom = 0),
              (this.minWidthTo = 0),
              (this.impreciseAnchor = null),
              (this.impreciseHead = null),
              (this.forceSelection = !1),
              (this.lastUpdate = Date.now()),
              this.setDOM(e.contentDOM),
              (this.children = [new rw()]),
              this.children[0].setParent(this),
              this.updateDeco(),
              this.updateInner([new iu(0, 0, 0, e.state.doc.length)], 0, null);
          }
          update(e) {
            var t, n, r, i, s, o;
            let a,
              l,
              c = e.changedRanges;
            this.minWidth > 0 &&
              c.length &&
              (c.every(
                ({ fromA: e, toA: t }) =>
                  t < this.minWidthFrom || e > this.minWidthTo,
              )
                ? ((this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1)),
                  (this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)))
                : (this.minWidth = this.minWidthFrom = this.minWidthTo = 0)),
              this.updateEditContextFormatting(e);
            let u = -1;
            this.view.inputState.composing >= 0 &&
              !this.view.observer.editContext &&
              ((null == (t = this.domChanged) ? void 0 : t.newSel)
                ? (u = this.domChanged.newSel.head)
                : ((n = e.changes),
                  (r = this.hasComposition),
                  (a = !1),
                  r &&
                    n.iterChangedRanges((e, t) => {
                      e < r.to && t > r.from && (a = !0);
                    }),
                  a || e.selectionSet || (u = e.state.selection.main.head)));
            let d =
              u > -1
                ? (function (e, t, n) {
                    let r = ip(e, n);
                    if (!r) return null;
                    let { node: i, from: s, to: o } = r,
                      a = i.nodeValue;
                    if (
                      /[\n\r]/.test(a) ||
                      e.state.doc.sliceString(r.from, r.to) != a
                    )
                      return null;
                    let l = t.invertedDesc,
                      c = new iu(l.mapPos(s), l.mapPos(o), s, o),
                      u = [];
                    for (let t = i.parentNode; ; t = t.parentNode) {
                      let n = nK.get(t);
                      if (n instanceof rs) u.push({ node: t, deco: n.mark });
                      else {
                        if (
                          n instanceof rw ||
                          ("DIV" == t.nodeName && t.parentNode == e.contentDOM)
                        )
                          return { range: c, text: i, marks: u, line: t };
                        if (t == e.contentDOM) return null;
                        u.push({
                          node: t,
                          deco: new ry({
                            inclusive: !0,
                            attributes: (function (e) {
                              let t = Object.create(null);
                              for (let n = 0; n < e.attributes.length; n++) {
                                let r = e.attributes[n];
                                t[r.name] = r.value;
                              }
                              return t;
                            })(t),
                            tagName: t.tagName.toLowerCase(),
                          }),
                        });
                      }
                    }
                  })(this.view, e.changes, u)
                : null;
            if (((this.domChanged = null), this.hasComposition)) {
              this.markedForComposition.clear();
              let { from: t, to: n } = this.hasComposition;
              c = new iu(
                t,
                n,
                e.changes.mapPos(t, -1),
                e.changes.mapPos(n, 1),
              ).addToSet(c.slice());
            }
            (this.hasComposition = d
              ? { from: d.range.fromB, to: d.range.toB }
              : null),
              (rr.ie || rr.chrome) &&
                !d &&
                e &&
                e.state.doc.lines != e.startState.doc.lines &&
                (this.forceSelection = !0);
            let h =
              ((i = this.decorations),
              (s = this.updateDeco()),
              (o = e.changes),
              (l = new im()),
              nc.compare(i, s, o, l),
              l.changes);
            return (
              (c = iu.extendWithRanges(c, h)),
              (!!(7 & this.flags) || 0 != c.length) &&
                (this.updateInner(c, e.startState.doc.length, d),
                e.transactions.length && (this.lastUpdate = Date.now()),
                !0)
            );
          }
          updateInner(e, t, n) {
            (this.view.viewState.mustMeasureContent = !0),
              this.updateChildren(e, t, n);
            let { observer: r } = this.view;
            r.ignore(() => {
              (this.dom.style.height =
                this.view.viewState.contentHeight / this.view.scaleY + "px"),
                (this.dom.style.flexBasis = this.minWidth
                  ? this.minWidth + "px"
                  : "");
              let e =
                rr.chrome || rr.ios
                  ? { node: r.selectionRange.focusNode, written: !1 }
                  : void 0;
              this.sync(this.view, e),
                (this.flags &= -8),
                e &&
                  (e.written || r.selectionRange.focusNode != e.node) &&
                  (this.forceSelection = !0),
                (this.dom.style.height = "");
            }),
              this.markedForComposition.forEach((e) => (e.flags &= -9));
            let i = [];
            if (
              this.view.viewport.from ||
              this.view.viewport.to < this.view.state.doc.length
            )
              for (let e of this.children)
                e instanceof r_ && e.widget instanceof rO && i.push(e.dom);
            r.updateGaps(i);
          }
          updateChildren(e, t, n) {
            let r = n ? n.range.addToSet(e.slice()) : e,
              i = this.childCursor(t);
            for (let e = r.length - 1; ; e--) {
              let t = e >= 0 ? r[e] : null;
              if (!t) break;
              let { fromA: s, toA: o, fromB: a, toB: l } = t,
                c,
                u,
                d,
                h;
              if (n && n.range.fromB < l && n.range.toB > a) {
                let e = rT.build(
                    this.view.state.doc,
                    a,
                    n.range.fromB,
                    this.decorations,
                    this.dynamicDecorationMap,
                  ),
                  t = rT.build(
                    this.view.state.doc,
                    n.range.toB,
                    l,
                    this.decorations,
                    this.dynamicDecorationMap,
                  );
                (u = e.breakAtStart), (d = e.openStart), (h = t.openEnd);
                let r = this.compositionView(n);
                t.breakAtStart
                  ? (r.breakAfter = 1)
                  : t.content.length &&
                    r.merge(
                      r.length,
                      r.length,
                      t.content[0],
                      !1,
                      t.openStart,
                      0,
                    ) &&
                    ((r.breakAfter = t.content[0].breakAfter),
                    t.content.shift()),
                  e.content.length &&
                    r.merge(
                      0,
                      0,
                      e.content[e.content.length - 1],
                      !0,
                      0,
                      e.openEnd,
                    ) &&
                    e.content.pop(),
                  (c = e.content.concat(r).concat(t.content));
              } else
                ({
                  content: c,
                  breakAtStart: u,
                  openStart: d,
                  openEnd: h,
                } = rT.build(
                  this.view.state.doc,
                  a,
                  l,
                  this.decorations,
                  this.dynamicDecorationMap,
                ));
              let { i: p, off: f } = i.findPos(o, 1),
                { i: m, off: g } = i.findPos(s, -1);
              n0(this, m, g, p, f, c, u, d, h);
            }
            n && this.fixCompositionDOM(n);
          }
          updateEditContextFormatting(e) {
            for (let t of ((this.editContextFormatting =
              this.editContextFormatting.map(e.changes)),
            e.transactions))
              for (let e of t.effects)
                e.is(r2) && (this.editContextFormatting = e.value);
          }
          compositionView(e) {
            let t = new ri(e.text.nodeValue);
            for (let { deco: n } of ((t.flags |= 8), e.marks))
              t = new rs(n, [t], t.length);
            let n = new rw();
            return n.append(t, 0), n;
          }
          fixCompositionDOM(e) {
            let t = (e, t) => {
                (t.flags |= 8 | +!!t.children.some((e) => 7 & e.flags)),
                  this.markedForComposition.add(t);
                let n = nK.get(e);
                n && n != t && (n.dom = null), t.setDOM(e);
              },
              n = this.childPos(e.range.fromB, 1),
              r = this.children[n.i];
            t(e.line, r);
            for (let i = e.marks.length - 1; i >= -1; i--)
              (n = r.childPos(n.off, 1)),
                (r = r.children[n.i]),
                t(i >= 0 ? e.marks[i].node : e.text, r);
          }
          updateSelection(e = !1, t = !1) {
            var n;
            (e || !this.view.observer.selectionRange.focusNode) &&
              this.view.observer.readSelectionRange();
            let r = this.view.root.activeElement,
              i = r == this.dom,
              s =
                !i &&
                !(this.view.state.facet(r3) || this.dom.tabIndex > -1) &&
                nI(this.dom, this.view.observer.selectionRange) &&
                !(r && this.dom.contains(r));
            if (!(i || t || s)) return;
            let o = this.forceSelection;
            this.forceSelection = !1;
            let a = this.view.state.selection.main,
              l = this.moveToLine(this.domAtPos(a.anchor)),
              c = a.empty ? l : this.moveToLine(this.domAtPos(a.head));
            if (
              rr.gecko &&
              a.empty &&
              !this.hasComposition &&
              1 == (n = l).node.nodeType &&
              n.node.firstChild &&
              (0 == n.offset ||
                "false" == n.node.childNodes[n.offset - 1].contentEditable) &&
              (n.offset == n.node.childNodes.length ||
                "false" == n.node.childNodes[n.offset].contentEditable)
            ) {
              let e = document.createTextNode("");
              this.view.observer.ignore(() =>
                l.node.insertBefore(e, l.node.childNodes[l.offset] || null),
              ),
                (l = c = new nG(e, 0)),
                (o = !0);
            }
            let u = this.view.observer.selectionRange;
            (!o &&
              u.focusNode &&
              ((nP(l.node, l.offset, u.anchorNode, u.anchorOffset) &&
                nP(c.node, c.offset, u.focusNode, u.focusOffset)) ||
                this.suppressWidgetCursorChange(u, a))) ||
              (this.view.observer.ignore(() => {
                rr.android &&
                  rr.chrome &&
                  this.dom.contains(u.focusNode) &&
                  (function (e, t) {
                    for (
                      let n = e;
                      n && n != t;
                      n = n.assignedSlot || n.parentNode
                    )
                      if (1 == n.nodeType && "false" == n.contentEditable)
                        return !0;
                    return !1;
                  })(u.focusNode, this.dom) &&
                  (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
                let e = nA(this.view.root);
                if (e)
                  if (a.empty) {
                    if (rr.gecko) {
                      var t, n;
                      let e =
                        ((t = l.node),
                        (n = l.offset),
                        1 != t.nodeType
                          ? 0
                          : (n && "false" == t.childNodes[n - 1].contentEditable
                              ? 1
                              : 0) |
                            (2 *
                              (n < t.childNodes.length &&
                                "false" == t.childNodes[n].contentEditable)));
                      if (e && 3 != e) {
                        let t = (1 == e ? nW : nZ)(l.node, l.offset);
                        t && (l = new nG(t.node, t.offset));
                      }
                    }
                    e.collapse(l.node, l.offset),
                      null != a.bidiLevel &&
                        void 0 !== e.caretBidiLevel &&
                        (e.caretBidiLevel = a.bidiLevel);
                  } else if (e.extend) {
                    e.collapse(l.node, l.offset);
                    try {
                      e.extend(c.node, c.offset);
                    } catch (e) {}
                  } else {
                    let t = document.createRange();
                    a.anchor > a.head && ([l, c] = [c, l]),
                      t.setEnd(c.node, c.offset),
                      t.setStart(l.node, l.offset),
                      e.removeAllRanges(),
                      e.addRange(t);
                  }
                s &&
                  this.view.root.activeElement == this.dom &&
                  (this.dom.blur(), r && r.focus());
              }),
              this.view.observer.setSelectionRange(l, c)),
              (this.impreciseAnchor = l.precise
                ? null
                : new nG(u.anchorNode, u.anchorOffset)),
              (this.impreciseHead = c.precise
                ? null
                : new nG(u.focusNode, u.focusOffset));
          }
          suppressWidgetCursorChange(e, t) {
            return (
              this.hasComposition &&
              t.empty &&
              nP(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset) &&
              this.posFromDOM(e.focusNode, e.focusOffset) == t.head
            );
          }
          enforceCursorAssoc() {
            if (this.hasComposition) return;
            let { view: e } = this,
              t = e.state.selection.main,
              n = nA(e.root),
              { anchorNode: r, anchorOffset: i } = e.observer.selectionRange;
            if (!n || !t.empty || !t.assoc || !n.modify) return;
            let s = rw.find(this, t.head);
            if (!s) return;
            let o = s.posAtStart;
            if (t.head == o || t.head == o + s.length) return;
            let a = this.coordsAt(t.head, -1),
              l = this.coordsAt(t.head, 1);
            if (!a || !l || a.bottom > l.top) return;
            let c = this.domAtPos(t.head + t.assoc);
            n.collapse(c.node, c.offset),
              n.modify(
                "move",
                t.assoc < 0 ? "forward" : "backward",
                "lineboundary",
              ),
              e.observer.readSelectionRange();
            let u = e.observer.selectionRange;
            e.docView.posFromDOM(u.anchorNode, u.anchorOffset) != t.from &&
              n.collapse(r, i);
          }
          moveToLine(e) {
            let t = this.dom,
              n;
            if (e.node != t) return e;
            for (let r = e.offset; !n && r < t.childNodes.length; r++) {
              let e = nK.get(t.childNodes[r]);
              e instanceof rw && (n = e.domAtPos(0));
            }
            for (let r = e.offset - 1; !n && r >= 0; r--) {
              let e = nK.get(t.childNodes[r]);
              e instanceof rw && (n = e.domAtPos(e.length));
            }
            return n ? new nG(n.node, n.offset, !0) : e;
          }
          nearest(e) {
            for (let t = e; t; ) {
              let e = nK.get(t);
              if (e && e.rootView == this) return e;
              t = t.parentNode;
            }
            return null;
          }
          posFromDOM(e, t) {
            let n = this.nearest(e);
            if (!n)
              throw RangeError(
                "Trying to find position for a DOM position outside of the document",
              );
            return n.localPosFromDOM(e, t) + n.posAtStart;
          }
          domAtPos(e) {
            let { i: t, off: n } = this.childCursor().findPos(e, -1);
            for (; t < this.children.length - 1; ) {
              let e = this.children[t];
              if (n < e.length || e instanceof rw) break;
              t++, (n = 0);
            }
            return this.children[t].domAtPos(n);
          }
          coordsAt(e, t) {
            let n = null,
              r = 0;
            for (
              let i = this.length, s = this.children.length - 1;
              s >= 0;
              s--
            ) {
              let o = this.children[s],
                a = i - o.breakAfter,
                l = a - o.length;
              if (a < e) break;
              if (
                l <= e &&
                (l < e || o.covers(-1)) &&
                (a > e || o.covers(1)) &&
                (!n || (o instanceof rw && !(n instanceof rw && t >= 0)))
              )
                (n = o), (r = l);
              else if (
                n &&
                l == e &&
                a == e &&
                o instanceof r_ &&
                2 > Math.abs(t)
              )
                if (o.deco.startSide < 0) break;
                else s && (n = null);
              i = l;
            }
            return n ? n.coordsAt(e - r, t) : null;
          }
          coordsForChar(e) {
            let { i: t, off: n } = this.childPos(e, 1),
              r = this.children[t];
            if (!(r instanceof rw)) return null;
            for (; r.children.length; ) {
              let { i: e, off: t } = r.childPos(n, 1);
              for (; ; e++) {
                if (e == r.children.length) return null;
                if ((r = r.children[e]).length) break;
              }
              n = t;
            }
            if (!(r instanceof ri)) return null;
            let i = tm(r.text, n);
            if (i == n) return null;
            let s = nU(r.dom, n, i).getClientRects();
            for (let e = 0; e < s.length; e++) {
              let t = s[e];
              if (e == s.length - 1 || (t.top < t.bottom && t.left < t.right))
                return t;
            }
            return null;
          }
          measureVisibleLineHeights(e) {
            let t = [],
              { from: n, to: r } = e,
              i = this.view.contentDOM.clientWidth,
              s =
                i >
                Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1,
              o = -1,
              a = this.view.textDirection == rC.LTR;
            for (let e = 0, l = 0; l < this.children.length; l++) {
              let c = this.children[l],
                u = e + c.length;
              if (u > r) break;
              if (e >= n) {
                let n = c.dom.getBoundingClientRect();
                if ((t.push(n.height), s)) {
                  let t = c.dom.lastChild,
                    r = t ? nD(t) : [];
                  if (r.length) {
                    let t = r[r.length - 1],
                      s = a ? t.right - n.left : n.right - t.left;
                    s > o &&
                      ((o = s),
                      (this.minWidth = i),
                      (this.minWidthFrom = e),
                      (this.minWidthTo = u));
                  }
                }
              }
              e = u + c.breakAfter;
            }
            return t;
          }
          textDirectionAt(e) {
            let { i: t } = this.childPos(e, 1);
            return "rtl" == getComputedStyle(this.children[t].dom).direction
              ? rC.RTL
              : rC.LTR;
          }
          measureTextSize() {
            for (let e of this.children)
              if (e instanceof rw) {
                let t = e.measureTextSize();
                if (t) return t;
              }
            let e = document.createElement("div"),
              t,
              n,
              r;
            return (
              (e.className = "cm-line"),
              (e.style.width = "99999px"),
              (e.style.position = "absolute"),
              (e.textContent = "abc def ghi jkl mno pqr stu"),
              this.view.observer.ignore(() => {
                this.dom.appendChild(e);
                let i = nD(e.firstChild)[0];
                (t = e.getBoundingClientRect().height),
                  (n = i ? i.width / 27 : 7),
                  (r = i ? i.height : t),
                  e.remove();
              }),
              { lineHeight: t, charWidth: n, textHeight: r }
            );
          }
          childCursor(e = this.length) {
            let t = this.children.length;
            return (
              t && (e -= this.children[--t].length), new nJ(this.children, e, t)
            );
          }
          computeBlockGapDeco() {
            let e = [],
              t = this.view.viewState;
            for (let n = 0, r = 0; ; r++) {
              let i = r == t.viewports.length ? null : t.viewports[r],
                s = i ? i.from - 1 : this.length;
              if (s > n) {
                let r =
                  (t.lineBlockAt(s).bottom - t.lineBlockAt(n).top) /
                  this.view.scaleY;
                e.push(
                  rg
                    .replace({
                      widget: new rO(r),
                      block: !0,
                      inclusive: !0,
                      isBlockGap: !0,
                    })
                    .range(n, s),
                );
              }
              if (!i) break;
              n = i.to + 1;
            }
            return rg.set(e);
          }
          updateDeco() {
            let e = 1,
              t = this.view.state
                .facet(it)
                .map((t) =>
                  (this.dynamicDecorationMap[e++] = "function" == typeof t)
                    ? t(this.view)
                    : t,
                ),
              n = !1,
              r = this.view.state.facet(ir).map((e, t) => {
                let r = "function" == typeof e;
                return r && (n = !0), r ? e(this.view) : e;
              });
            for (
              r.length &&
                ((this.dynamicDecorationMap[e++] = n), t.push(nc.join(r))),
                this.decorations = [
                  this.editContextFormatting,
                  ...t,
                  this.computeBlockGapDeco(),
                  this.view.viewState.lineGapDeco,
                ];
              e < this.decorations.length;

            )
              this.dynamicDecorationMap[e++] = !1;
            return this.decorations;
          }
          scrollIntoView(e) {
            if (e.isSnapshot) {
              let t = this.view.viewState.lineBlockAt(e.range.head);
              (this.view.scrollDOM.scrollTop = t.top - e.yMargin),
                (this.view.scrollDOM.scrollLeft = e.xMargin);
              return;
            }
            for (let t of this.view.state.facet(rJ))
              try {
                if (t(this.view, e.range, e)) return !0;
              } catch (e) {
                r5(this.view.state, e, "scroll handler");
              }
            let { range: t } = e,
              n = this.coordsAt(
                t.head,
                t.empty ? t.assoc : t.head > t.anchor ? -1 : 1,
              ),
              r;
            if (!n) return;
            !t.empty &&
              (r = this.coordsAt(t.anchor, t.anchor > t.head ? -1 : 1)) &&
              (n = {
                left: Math.min(n.left, r.left),
                top: Math.min(n.top, r.top),
                right: Math.max(n.right, r.right),
                bottom: Math.max(n.bottom, r.bottom),
              });
            let i = il(this.view),
              s = {
                left: n.left - i.left,
                top: n.top - i.top,
                right: n.right + i.right,
                bottom: n.bottom + i.bottom,
              },
              { offsetWidth: o, offsetHeight: a } = this.view.scrollDOM;
            !(function (e, t, n, r, i, s, o, a) {
              let l = e.ownerDocument,
                c = l.defaultView || window;
              for (let u = e, d = !1; u && !d; )
                if (1 == u.nodeType) {
                  let e,
                    h = u == l.body,
                    p = 1,
                    f = 1;
                  if (h)
                    e = (function (e) {
                      let t = e.visualViewport;
                      return t
                        ? { left: 0, right: t.width, top: 0, bottom: t.height }
                        : {
                            left: 0,
                            right: e.innerWidth,
                            top: 0,
                            bottom: e.innerHeight,
                          };
                    })(c);
                  else {
                    if (
                      (/^(fixed|sticky)$/.test(getComputedStyle(u).position) &&
                        (d = !0),
                      u.scrollHeight <= u.clientHeight &&
                        u.scrollWidth <= u.clientWidth)
                    ) {
                      u = u.assignedSlot || u.parentNode;
                      continue;
                    }
                    let t = u.getBoundingClientRect();
                    ({ scaleX: p, scaleY: f } = nB(u, t)),
                      (e = {
                        left: t.left,
                        right: t.left + u.clientWidth * p,
                        top: t.top,
                        bottom: t.top + u.clientHeight * f,
                      });
                  }
                  let m = 0,
                    g = 0;
                  if ("nearest" == i)
                    t.top < e.top
                      ? ((g = t.top - (e.top + o)),
                        n > 0 &&
                          t.bottom > e.bottom + g &&
                          (g = t.bottom - e.bottom + o))
                      : t.bottom > e.bottom &&
                        ((g = t.bottom - e.bottom + o),
                        n < 0 &&
                          t.top - g < e.top &&
                          (g = t.top - (e.top + o)));
                  else {
                    let r = t.bottom - t.top,
                      s = e.bottom - e.top;
                    g =
                      ("center" == i && r <= s
                        ? t.top + r / 2 - s / 2
                        : "start" == i || ("center" == i && n < 0)
                          ? t.top - o
                          : t.bottom - s + o) - e.top;
                  }
                  if (
                    ("nearest" == r
                      ? t.left < e.left
                        ? ((m = t.left - (e.left + s)),
                          n > 0 &&
                            t.right > e.right + m &&
                            (m = t.right - e.right + s))
                        : t.right > e.right &&
                          ((m = t.right - e.right + s),
                          n < 0 &&
                            t.left < e.left + m &&
                            (m = t.left - (e.left + s)))
                      : (m =
                          ("center" == r
                            ? t.left +
                              (t.right - t.left) / 2 -
                              (e.right - e.left) / 2
                            : ("start" == r) == a
                              ? t.left - s
                              : t.right - (e.right - e.left) + s) - e.left),
                    m || g)
                  )
                    if (h) c.scrollBy(m, g);
                    else {
                      let e = 0,
                        n = 0;
                      if (g) {
                        let e = u.scrollTop;
                        (u.scrollTop += g / f), (n = (u.scrollTop - e) * f);
                      }
                      if (m) {
                        let t = u.scrollLeft;
                        (u.scrollLeft += m / p), (e = (u.scrollLeft - t) * p);
                      }
                      (t = {
                        left: t.left - e,
                        top: t.top - n,
                        right: t.right - e,
                        bottom: t.bottom - n,
                      }),
                        e && 1 > Math.abs(e - m) && (r = "nearest"),
                        n && 1 > Math.abs(n - g) && (i = "nearest");
                    }
                  if (h) break;
                  (t.top < e.top ||
                    t.bottom > e.bottom ||
                    t.left < e.left ||
                    t.right > e.right) &&
                    (t = {
                      left: Math.max(t.left, e.left),
                      right: Math.min(t.right, e.right),
                      top: Math.max(t.top, e.top),
                      bottom: Math.min(t.bottom, e.bottom),
                    }),
                    (u = u.assignedSlot || u.parentNode);
                } else if (11 == u.nodeType) u = u.host;
                else break;
            })(
              this.view.scrollDOM,
              s,
              t.head < t.anchor ? -1 : 1,
              e.x,
              e.y,
              Math.max(Math.min(e.xMargin, o), -o),
              Math.max(Math.min(e.yMargin, a), -a),
              this.view.textDirection == rC.LTR,
            );
          }
        }
        function ip(e, t) {
          let n = e.observer.selectionRange;
          if (!n.focusNode) return null;
          let r = nW(n.focusNode, n.focusOffset),
            i = nZ(n.focusNode, n.focusOffset),
            s = r || i;
          if (i && r && i.node != r.node) {
            let t = nK.get(i.node);
            if (!t || (t instanceof ri && t.text != i.node.nodeValue)) s = i;
            else if (e.docView.lastCompositionAfterCursor) {
              let e = nK.get(r.node);
              !e || (e instanceof ri && e.text != r.node.nodeValue) || (s = i);
            }
          }
          if (((e.docView.lastCompositionAfterCursor = s != r), !s))
            return null;
          let o = t - s.offset;
          return { from: o, to: o + s.node.nodeValue.length, node: s.node };
        }
        let im = class {
          constructor() {
            this.changes = [];
          }
          compareRange(e, t) {
            rk(e, t, this.changes);
          }
          comparePoint(e, t) {
            rk(e, t, this.changes);
          }
          boundChange(e) {
            rk(e, e, this.changes);
          }
        };
        function ig(e, t) {
          return e.top < t.bottom - 1 && e.bottom > t.top + 1;
        }
        function iy(e, t) {
          return t < e.top
            ? { top: t, left: e.left, right: e.right, bottom: e.bottom }
            : e;
        }
        function iv(e, t) {
          return t > e.bottom
            ? { top: e.top, left: e.left, right: e.right, bottom: t }
            : e;
        }
        function ib(e, t, n) {
          let r = e.nodeValue.length,
            i = -1,
            s = 1e9,
            o = 0;
          for (let a = 0; a < r; a++) {
            let r = nU(e, a, a + 1).getClientRects();
            for (let l = 0; l < r.length; l++) {
              let c = r[l];
              if (c.top == c.bottom) continue;
              o || (o = t - c.left);
              let u = (c.top > n ? c.top - n : n - c.bottom) - 1;
              if (c.left - 1 <= t && c.right + 1 >= t && u < s) {
                let n = t >= (c.left + c.right) / 2,
                  r = n;
                if (
                  ((rr.chrome || rr.gecko) &&
                    nU(e, a).getBoundingClientRect().left == c.right &&
                    (r = !n),
                  u <= 0)
                )
                  return { node: e, offset: a + +!!r };
                (i = a + +!!r), (s = u);
              }
            }
          }
          return {
            node: e,
            offset: i > -1 ? i : o > 0 ? e.nodeValue.length : 0,
          };
        }
        function ix(e, t, n, r = -1) {
          var i, s;
          let o = e.contentDOM.getBoundingClientRect(),
            a = o.top + e.viewState.paddingTop,
            l,
            { docHeight: c } = e.viewState,
            { x: u, y: d } = t,
            h = d - a;
          if (h < 0) return 0;
          if (h > c) return e.state.doc.length;
          for (
            let t = e.viewState.heightOracle.textHeight / 2, i = !1;
            (l = e.elementAtHeight(h)).type != rm.Text;

          )
            for (
              ;
              !((h = r > 0 ? l.bottom + t : l.top - t) >= 0) || !(h <= c);

            ) {
              if (i) return n ? null : 0;
              (i = !0), (r = -r);
            }
          d = a + h;
          let p = l.from;
          if (p < e.viewport.from)
            return 0 == e.viewport.from ? 0 : n ? null : ik(e, o, l, u, d);
          if (p > e.viewport.to)
            return e.viewport.to == e.state.doc.length
              ? e.state.doc.length
              : n
                ? null
                : ik(e, o, l, u, d);
          let f = e.dom.ownerDocument,
            m = e.root.elementFromPoint ? e.root : f,
            g = m.elementFromPoint(u, d);
          g && !e.contentDOM.contains(g) && (g = null),
            !g &&
              ((u = Math.max(o.left + 1, Math.min(o.right - 1, u))),
              (g = m.elementFromPoint(u, d)) &&
                !e.contentDOM.contains(g) &&
                (g = null));
          let y,
            v = -1;
          if (
            g &&
            (null == (i = e.docView.nearest(g)) ? void 0 : i.isEditable) != !1
          ) {
            if (f.caretPositionFromPoint) {
              let e = f.caretPositionFromPoint(u, d);
              e && ({ offsetNode: y, offset: v } = e);
            } else if (f.caretRangeFromPoint) {
              let t = f.caretRangeFromPoint(u, d);
              t &&
                (({ startContainer: y, startOffset: v } = t),
                (!e.contentDOM.contains(y) ||
                  (rr.safari &&
                    (function (e, t, n) {
                      let r,
                        i = e;
                      if (3 != e.nodeType || t != (r = e.nodeValue.length))
                        return !1;
                      for (;;) {
                        let e = i.nextSibling;
                        if (e) {
                          if ("BR" == e.nodeName) break;
                          return !1;
                        }
                        {
                          let e = i.parentNode;
                          if (!e || "DIV" == e.nodeName) break;
                          i = e;
                        }
                      }
                      return nU(e, r - 1, r).getBoundingClientRect().right > n;
                    })(y, v, u)) ||
                  (rr.chrome &&
                    (function (e, t, n) {
                      if (0 != t) return !1;
                      for (let t = e; ; ) {
                        let e = t.parentNode;
                        if (!e || 1 != e.nodeType || e.firstChild != t)
                          return !1;
                        if (e.classList.contains("cm-line")) break;
                        t = e;
                      }
                      return (
                        n -
                          (1 == e.nodeType
                            ? e.getBoundingClientRect()
                            : nU(
                                e,
                                0,
                                Math.max(e.nodeValue.length, 1),
                              ).getBoundingClientRect()
                          ).left >
                        5
                      );
                    })(y, v, u))) &&
                  (y = void 0));
            }
            y && (v = Math.min(nj(y), v));
          }
          if (!y || !e.docView.dom.contains(y)) {
            let t = rw.find(e.docView, p);
            if (!t) return h > l.top + l.height / 2 ? l.to : l.from;
            ({ node: y, offset: v } = (function e(t, n, r) {
              let i,
                s,
                o,
                a,
                l,
                c,
                u,
                d,
                h = !1;
              for (let m = t.firstChild; m; m = m.nextSibling) {
                let t = nD(m);
                for (let g = 0; g < t.length; g++) {
                  var p, f;
                  let y = t[g];
                  c && ig(c, y) && (y = iy(iv(y, c.bottom), c.top));
                  let v =
                      (p = y).left > n ? p.left - n : Math.max(0, n - p.right),
                    b = (f = y).top > r ? f.top - r : Math.max(0, r - f.bottom);
                  if (0 == v && 0 == b)
                    return 3 == m.nodeType ? ib(m, n, r) : e(m, n, r);
                  (!l || d > b || (d == b && u > v)) &&
                    ((l = m),
                    (c = y),
                    (u = v),
                    (d = b),
                    (h = !v || (n < y.left ? g > 0 : g < t.length - 1))),
                    0 == v
                      ? r > y.bottom && (!o || o.bottom < y.bottom)
                        ? ((i = m), (o = y))
                        : r < y.top &&
                          (!a || a.top > y.top) &&
                          ((s = m), (a = y))
                      : o && ig(o, y)
                        ? (o = iv(o, y.bottom))
                        : a && ig(a, y) && (a = iy(a, y.top));
                }
              }
              if (
                (o && o.bottom >= r
                  ? ((l = i), (c = o))
                  : a && a.top <= r && ((l = s), (c = a)),
                !l)
              )
                return { node: t, offset: 0 };
              let m = Math.max(c.left, Math.min(c.right, n));
              if (3 == l.nodeType) return ib(l, m, r);
              if (h && "false" != l.contentEditable) return e(l, m, r);
              let g =
                Array.prototype.indexOf.call(t.childNodes, l) +
                +(n >= (c.left + c.right) / 2);
              return { node: t, offset: g };
            })(t.dom, u, d));
          }
          let b = e.docView.nearest(y);
          if (!b) return null;
          if (!b.isWidget || (null == (s = b.dom) ? void 0 : s.nodeType) != 1)
            return b.localPosFromDOM(y, v) + b.posAtStart;
          {
            let e = b.dom.getBoundingClientRect();
            return t.y < e.top ||
              (t.y <= e.bottom && t.x <= (e.left + e.right) / 2)
              ? b.posAtStart
              : b.posAtEnd;
          }
        }
        function ik(e, t, n, r, i) {
          let s = Math.round((r - t.left) * e.defaultCharacterWidth);
          if (e.lineWrapping && n.height > 1.5 * e.defaultLineHeight) {
            let t = e.viewState.heightOracle.textHeight;
            s +=
              Math.floor((i - n.top - (e.defaultLineHeight - t) * 0.5) / t) *
              e.viewState.heightOracle.lineLength;
          }
          let o = e.state.sliceDoc(n.from, n.to);
          return (
            n.from +
            (function (e, t, n, r) {
              for (let r = 0, i = 0; ; ) {
                if (i >= t) return r;
                if (r == e.length) break;
                (i += 9 == e.charCodeAt(r) ? n - (i % n) : 1), (r = tm(e, r));
              }
              return 0, e.length;
            })(o, s, e.state.tabSize)
          );
        }
        function iw(e, t, n) {
          let r = e.lineBlockAt(t);
          if (Array.isArray(r.type)) {
            let e;
            for (let i of r.type) {
              if (i.from > t) break;
              if (!(i.to < t)) {
                if (i.from < t && i.to > t) return i;
                (!e ||
                  (i.type == rm.Text &&
                    (e.type != i.type || (n < 0 ? i.from < t : i.to > t)))) &&
                  (e = i);
              }
            }
            return e || r;
          }
          return r;
        }
        function i_(e, t, n, r) {
          let i = e.state.doc.lineAt(t.head),
            s = e.bidiSpans(i),
            o = e.textDirectionAt(i.from);
          for (let a = t, l = null; ; ) {
            let t = (function (e, t, n, r, i) {
                var s;
                let o = r.head - e.from,
                  a = rF.find(
                    t,
                    o,
                    null != (s = r.bidiLevel) ? s : -1,
                    r.assoc,
                  ),
                  l = t[a],
                  c = l.side(i, n);
                if (o == c) {
                  let e = (a += i ? 1 : -1);
                  if (e < 0 || e >= t.length) return null;
                  (o = (l = t[(a = e)]).side(!i, n)), (c = l.side(i, n));
                }
                let u = tm(e.text, o, l.forward(i, n));
                (u < l.from || u > l.to) && (u = c),
                  (r$ = e.text.slice(Math.min(o, u), Math.max(o, u)));
                let d =
                  a == (i ? t.length - 1 : 0) ? null : t[a + (i ? 1 : -1)];
                return d && u == c && d.level + +!i < l.level
                  ? tN.cursor(
                      d.side(!i, n) + e.from,
                      d.forward(i, n) ? 1 : -1,
                      d.level,
                    )
                  : tN.cursor(u + e.from, l.forward(i, n) ? -1 : 1, l.level);
              })(i, s, o, a, n),
              c = r$;
            if (!t) {
              if (i.number == (n ? e.state.doc.lines : 1)) return a;
              (c = "\n"),
                (i = e.state.doc.line(i.number + (n ? 1 : -1))),
                (s = e.bidiSpans(i)),
                (t = e.visualLineSide(i, !n));
            }
            if (l) {
              if (!l(c)) return a;
            } else {
              if (!r) return t;
              l = r(c);
            }
            a = t;
          }
        }
        function iO(e, t, n) {
          for (;;) {
            let r = 0;
            for (let i of e)
              i.between(t - 1, t + 1, (e, i, s) => {
                if (t > e && t < i) {
                  let s = r || n || (t - e < i - t ? -1 : 1);
                  (t = s < 0 ? e : i), (r = s);
                }
              });
            if (!r) return t;
          }
        }
        function iT(e, t, n) {
          let r = iO(
            e.state.facet(ii).map((t) => t(e)),
            n.from,
            t.head > n.from ? -1 : 1,
          );
          return r == n.from ? n : tN.cursor(r, r < n.from ? 1 : -1);
        }
        class iS {
          constructor(e, t) {
            (this.points = e),
              (this.text = ""),
              (this.lineSeparator = t.facet(nr.lineSeparator));
          }
          append(e) {
            this.text += e;
          }
          lineBreak() {
            this.text += "￿";
          }
          readRange(e, t) {
            if (!e) return this;
            let n = e.parentNode;
            for (let r = e; ; ) {
              this.findPointBefore(n, r);
              let e = this.text.length;
              this.readNode(r);
              let i = r.nextSibling;
              if (i == t) break;
              let s = nK.get(r),
                o = nK.get(i);
              (s && o
                ? s.breakAfter
                : (s ? s.breakAfter : nM(r)) ||
                  (nM(i) &&
                    ("BR" != r.nodeName || r.cmIgnore) &&
                    this.text.length > e)) && this.lineBreak(),
                (r = i);
            }
            return this.findPointBefore(n, t), this;
          }
          readTextNode(e) {
            let t = e.nodeValue;
            for (let n of this.points)
              n.node == e &&
                (n.pos = this.text.length + Math.min(n.offset, t.length));
            for (let n = 0, r = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
              let i = -1,
                s = 1,
                o;
              if (
                (this.lineSeparator
                  ? ((i = t.indexOf(this.lineSeparator, n)),
                    (s = this.lineSeparator.length))
                  : (o = r.exec(t)) && ((i = o.index), (s = o[0].length)),
                this.append(t.slice(n, i < 0 ? t.length : i)),
                i < 0)
              )
                break;
              if ((this.lineBreak(), s > 1))
                for (let t of this.points)
                  t.node == e && t.pos > this.text.length && (t.pos -= s - 1);
              n = i + s;
            }
          }
          readNode(e) {
            if (e.cmIgnore) return;
            let t = nK.get(e),
              n = t && t.overrideDOMText;
            if (null != n) {
              this.findPointInside(e, n.length);
              for (let e = n.iter(); !e.next().done; )
                e.lineBreak ? this.lineBreak() : this.append(e.value);
            } else
              3 == e.nodeType
                ? this.readTextNode(e)
                : "BR" == e.nodeName
                  ? e.nextSibling && this.lineBreak()
                  : 1 == e.nodeType && this.readRange(e.firstChild, null);
          }
          findPointBefore(e, t) {
            for (let n of this.points)
              n.node == e &&
                e.childNodes[n.offset] == t &&
                (n.pos = this.text.length);
          }
          findPointInside(e, t) {
            for (let n of this.points)
              (3 == e.nodeType ? n.node == e : e.contains(n.node)) &&
                (n.pos =
                  this.text.length +
                  (!(function (e, t, n) {
                    for (;;) {
                      if (!t || n < nj(t)) return !1;
                      if (t == e) return !0;
                      (n = nR(t) + 1), (t = t.parentNode);
                    }
                  })(e, n.node, n.offset)
                    ? 0
                    : t));
          }
        }
        class iE {
          constructor(e, t) {
            (this.node = e), (this.offset = t), (this.pos = -1);
          }
        }
        class iC {
          constructor(e, t, n, r) {
            (this.typeOver = r),
              (this.bounds = null),
              (this.text = ""),
              (this.domChanged = t > -1);
            let { impreciseHead: i, impreciseAnchor: s } = e.docView;
            if (e.state.readOnly && t > -1) this.newSel = null;
            else if (
              t > -1 &&
              (this.bounds = e.docView.domBoundsAround(t, n, 0))
            ) {
              let t =
                  i || s
                    ? []
                    : (function (e) {
                        let t = [];
                        if (e.root.activeElement != e.contentDOM) return t;
                        let {
                          anchorNode: n,
                          anchorOffset: r,
                          focusNode: i,
                          focusOffset: s,
                        } = e.observer.selectionRange;
                        return (
                          n &&
                            (t.push(new iE(n, r)),
                            (i != n || s != r) && t.push(new iE(i, s))),
                          t
                        );
                      })(e),
                n = new iS(t, e.state);
              n.readRange(this.bounds.startDOM, this.bounds.endDOM),
                (this.text = n.text),
                (this.newSel = (function (e, t) {
                  if (0 == e.length) return null;
                  let n = e[0].pos,
                    r = 2 == e.length ? e[1].pos : n;
                  return n > -1 && r > -1 ? tN.single(n + t, r + t) : null;
                })(t, this.bounds.from));
            } else {
              let t = e.observer.selectionRange,
                n =
                  (i && i.node == t.focusNode && i.offset == t.focusOffset) ||
                  !nN(e.contentDOM, t.focusNode)
                    ? e.state.selection.main.head
                    : e.docView.posFromDOM(t.focusNode, t.focusOffset),
                r =
                  (s && s.node == t.anchorNode && s.offset == t.anchorOffset) ||
                  !nN(e.contentDOM, t.anchorNode)
                    ? e.state.selection.main.anchor
                    : e.docView.posFromDOM(t.anchorNode, t.anchorOffset),
                o = e.viewport;
              if (
                (rr.ios || rr.chrome) &&
                e.state.selection.main.empty &&
                n != r &&
                (o.from > 0 || o.to < e.state.doc.length)
              ) {
                let t = Math.min(n, r),
                  i = Math.max(n, r),
                  s = o.from - t,
                  a = o.to - i;
                (0 == s || 1 == s || 0 == t) &&
                  (0 == a || -1 == a || i == e.state.doc.length) &&
                  ((n = 0), (r = e.state.doc.length));
              }
              this.newSel = tN.single(r, n);
            }
          }
        }
        function iA(e, t) {
          let n,
            { newSel: r } = t,
            i = e.state.selection.main,
            s =
              e.inputState.lastKeyTime > Date.now() - 100
                ? e.inputState.lastKeyCode
                : -1;
          if (t.bounds) {
            let { from: r, to: o } = t.bounds,
              a = i.from,
              l = null;
            (8 === s || (rr.android && t.text.length < o - r)) &&
              ((a = i.to), (l = "end"));
            let c = (function (e, t, n, r) {
              let i = Math.min(e.length, t.length),
                s = 0;
              for (; s < i && e.charCodeAt(s) == t.charCodeAt(s); ) s++;
              if (s == i && e.length == t.length) return null;
              let o = e.length,
                a = t.length;
              for (
                ;
                o > 0 && a > 0 && e.charCodeAt(o - 1) == t.charCodeAt(a - 1);

              )
                o--, a--;
              if ("end" == r) {
                let e = Math.max(0, s - Math.min(o, a));
                n -= o + e - s;
              }
              if (o < s && e.length < t.length) {
                let e = n <= s && n >= o ? s - n : 0;
                (s -= e), (a = s + (a - o)), (o = s);
              } else if (a < s) {
                let e = n <= s && n >= a ? s - n : 0;
                (s -= e), (o = s + (o - a)), (a = s);
              }
              return { from: s, toA: o, toB: a };
            })(e.state.doc.sliceString(r, o, "￿"), t.text, a - r, l);
            c &&
              (rr.chrome &&
                13 == s &&
                c.toB == c.from + 2 &&
                "￿￿" == t.text.slice(c.from, c.toB) &&
                c.toB--,
              (n = {
                from: r + c.from,
                to: r + c.toA,
                insert: to.of(t.text.slice(c.from, c.toB).split("￿")),
              }));
          } else
            r &&
              ((!e.hasFocus && e.state.facet(r3)) || r.main.eq(i)) &&
              (r = null);
          if (!n && !r) return !1;
          if (
            (!n && t.typeOver && !i.empty && r && r.main.empty
              ? (n = {
                  from: i.from,
                  to: i.to,
                  insert: e.state.doc.slice(i.from, i.to),
                })
              : (rr.mac || rr.android) &&
                  n &&
                  n.from == n.to &&
                  n.from == i.head - 1 &&
                  /^\. ?$/.test(n.insert.toString()) &&
                  "off" == e.contentDOM.getAttribute("autocorrect")
                ? (r &&
                    2 == n.insert.length &&
                    (r = tN.single(r.main.anchor - 1, r.main.head - 1)),
                  (n = {
                    from: n.from,
                    to: n.to,
                    insert: to.of([n.insert.toString().replace(".", " ")]),
                  }))
                : n &&
                    n.from >= i.from &&
                    n.to <= i.to &&
                    (n.from != i.from || n.to != i.to) &&
                    i.to - i.from - (n.to - n.from) <= 4
                  ? (n = {
                      from: i.from,
                      to: i.to,
                      insert: e.state.doc
                        .slice(i.from, n.from)
                        .append(n.insert)
                        .append(e.state.doc.slice(n.to, i.to)),
                    })
                  : rr.chrome &&
                    n &&
                    n.from == n.to &&
                    n.from == i.head &&
                    "\n " == n.insert.toString() &&
                    e.lineWrapping &&
                    (r && (r = tN.single(r.main.anchor - 1, r.main.head - 1)),
                    (n = { from: i.from, to: i.to, insert: to.of([" "]) })),
            n)
          )
            return iN(e, n, r, s);
          if (!r || r.main.eq(i)) return !1;
          {
            let t = !1,
              n = "select";
            return (
              e.inputState.lastSelectionTime > Date.now() - 50 &&
                ("select" == e.inputState.lastSelectionOrigin && (t = !0),
                (n = e.inputState.lastSelectionOrigin)),
              e.dispatch({ selection: r, scrollIntoView: t, userEvent: n }),
              !0
            );
          }
        }
        function iN(e, t, n, r = -1) {
          let i;
          if (rr.ios && e.inputState.flushIOSKey(t)) return !0;
          let s = e.state.selection.main;
          if (
            rr.android &&
            ((t.to == s.to &&
              (t.from == s.from ||
                (t.from == s.from - 1 &&
                  " " == e.state.sliceDoc(t.from, s.from))) &&
              1 == t.insert.length &&
              2 == t.insert.lines &&
              nH(e.contentDOM, "Enter", 13)) ||
              (((t.from == s.from - 1 &&
                t.to == s.to &&
                0 == t.insert.length) ||
                (8 == r && t.insert.length < t.to - t.from && t.to > s.head)) &&
                nH(e.contentDOM, "Backspace", 8)) ||
              (t.from == s.from &&
                t.to == s.to + 1 &&
                0 == t.insert.length &&
                nH(e.contentDOM, "Delete", 46)))
          )
            return !0;
          let o = t.insert.toString();
          e.inputState.composing >= 0 && e.inputState.composing++;
          let a = () =>
            i ||
            (i = (function (e, t, n) {
              let r,
                i = e.state,
                s = i.selection.main;
              if (
                t.from >= s.from &&
                t.to <= s.to &&
                t.to - t.from >= (s.to - s.from) / 3 &&
                (!n ||
                  (n.main.empty && n.main.from == t.from + t.insert.length)) &&
                e.inputState.composing < 0
              ) {
                let n = s.from < t.from ? i.sliceDoc(s.from, t.from) : "",
                  o = s.to > t.to ? i.sliceDoc(t.to, s.to) : "";
                r = i.replaceSelection(
                  e.state.toText(
                    n + t.insert.sliceString(0, void 0, e.state.lineBreak) + o,
                  ),
                );
              } else {
                let o = i.changes(t),
                  a = n && n.main.to <= o.newLength ? n.main : void 0;
                if (
                  i.selection.ranges.length > 1 &&
                  e.inputState.composing >= 0 &&
                  t.to <= s.to &&
                  t.to >= s.to - 10
                ) {
                  let l = e.state.sliceDoc(t.from, t.to),
                    c,
                    u = n && ip(e, n.main.head);
                  if (u) {
                    let e = t.insert.length - (t.to - t.from);
                    c = { from: u.from, to: u.to - e };
                  } else c = e.state.doc.lineAt(s.head);
                  let d = s.to - t.to,
                    h = s.to - s.from;
                  r = i.changeByRange((n) => {
                    if (n.from == s.from && n.to == s.to)
                      return { changes: o, range: a || n.map(o) };
                    let r = n.to - d,
                      u = r - l.length;
                    if (
                      n.to - n.from != h ||
                      e.state.sliceDoc(u, r) != l ||
                      (n.to >= c.from && n.from <= c.to)
                    )
                      return { range: n };
                    let p = i.changes({ from: u, to: r, insert: t.insert }),
                      f = n.to - s.to;
                    return {
                      changes: p,
                      range: a
                        ? tN.range(
                            Math.max(0, a.anchor + f),
                            Math.max(0, a.head + f),
                          )
                        : n.map(p),
                    };
                  });
                } else
                  r = {
                    changes: o,
                    selection: a && i.selection.replaceRange(a),
                  };
              }
              let o = "input.type";
              return (
                (e.composing ||
                  (e.inputState.compositionPendingChange &&
                    e.inputState.compositionEndedAt > Date.now() - 50)) &&
                  ((e.inputState.compositionPendingChange = !1),
                  (o += ".compose"),
                  e.inputState.compositionFirstChange &&
                    ((o += ".start"),
                    (e.inputState.compositionFirstChange = !1))),
                i.update(r, { userEvent: o, scrollIntoView: !0 })
              );
            })(e, t, n));
          return (
            e.state.facet(rW).some((n) => n(e, t.from, t.to, o, a)) ||
              e.dispatch(a()),
            !0
          );
        }
        class iI {
          setSelectionOrigin(e) {
            (this.lastSelectionOrigin = e),
              (this.lastSelectionTime = Date.now());
          }
          constructor(e) {
            (this.view = e),
              (this.lastKeyCode = 0),
              (this.lastKeyTime = 0),
              (this.lastTouchTime = 0),
              (this.lastFocusTime = 0),
              (this.lastScrollTop = 0),
              (this.lastScrollLeft = 0),
              (this.pendingIOSKey = void 0),
              (this.tabFocusMode = -1),
              (this.lastSelectionOrigin = null),
              (this.lastSelectionTime = 0),
              (this.lastContextMenu = 0),
              (this.scrollHandlers = []),
              (this.handlers = Object.create(null)),
              (this.composing = -1),
              (this.compositionFirstChange = null),
              (this.compositionEndedAt = 0),
              (this.compositionPendingKey = !1),
              (this.compositionPendingChange = !1),
              (this.mouseSelection = null),
              (this.draggedContent = null),
              (this.handleEvent = this.handleEvent.bind(this)),
              (this.notifiedFocused = e.hasFocus),
              rr.safari && e.contentDOM.addEventListener("input", () => null),
              rr.gecko &&
                (function (e) {
                  i2.has(e) ||
                    (i2.add(e),
                    e.addEventListener("copy", () => {}),
                    e.addEventListener("cut", () => {}));
                })(e.contentDOM.ownerDocument);
          }
          handleEvent(e) {
            !(
              !(function (e, t) {
                if (!t.bubbles) return !0;
                if (t.defaultPrevented) return !1;
                for (let n = t.target, r; n != e.contentDOM; n = n.parentNode)
                  if (
                    !n ||
                    11 == n.nodeType ||
                    ((r = nK.get(n)) && r.ignoreEvent(t))
                  )
                    return !1;
                return !0;
              })(this.view, e) || this.ignoreDuringComposition(e)
            ) &&
              (("keydown" == e.type && this.keydown(e)) ||
                (0 != this.view.updateState
                  ? Promise.resolve().then(() => this.runHandlers(e.type, e))
                  : this.runHandlers(e.type, e)));
          }
          runHandlers(e, t) {
            let n = this.handlers[e];
            if (n) {
              for (let e of n.observers) e(this.view, t);
              for (let e of n.handlers) {
                if (t.defaultPrevented) break;
                if (e(this.view, t)) {
                  t.preventDefault();
                  break;
                }
              }
            }
          }
          ensureHandlers(e) {
            let t = (function (e) {
                let t = Object.create(null);
                function n(e) {
                  return t[e] || (t[e] = { observers: [], handlers: [] });
                }
                for (let t of e) {
                  let e = t.spec,
                    r = e && e.plugin.domEventHandlers,
                    i = e && e.plugin.domEventObservers;
                  if (r)
                    for (let e in r) {
                      let i = r[e];
                      i && n(e).handlers.push(iD(t.value, i));
                    }
                  if (i)
                    for (let e in i) {
                      let r = i[e];
                      r && n(e).observers.push(iD(t.value, r));
                    }
                }
                for (let e in iF) n(e).handlers.push(iF[e]);
                for (let e in iB) n(e).observers.push(iB[e]);
                return t;
              })(e),
              n = this.handlers,
              r = this.view.contentDOM;
            for (let e in t)
              if ("scroll" != e) {
                let i = !t[e].handlers.length,
                  s = n[e];
                s &&
                  !s.handlers.length != i &&
                  (r.removeEventListener(e, this.handleEvent), (s = null)),
                  s || r.addEventListener(e, this.handleEvent, { passive: i });
              }
            for (let e in n)
              "scroll" == e ||
                t[e] ||
                r.removeEventListener(e, this.handleEvent);
            this.handlers = t;
          }
          keydown(e) {
            let t;
            return (
              (this.lastKeyCode = e.keyCode),
              (this.lastKeyTime = Date.now()),
              !!(
                9 == e.keyCode &&
                this.tabFocusMode > -1 &&
                (!this.tabFocusMode || Date.now() <= this.tabFocusMode)
              ) ||
                ((this.tabFocusMode > 0 &&
                  27 != e.keyCode &&
                  0 > iM.indexOf(e.keyCode) &&
                  (this.tabFocusMode = -1),
                rr.android &&
                  rr.chrome &&
                  !e.synthetic &&
                  (13 == e.keyCode || 8 == e.keyCode))
                  ? (this.view.observer.delayAndroidKey(e.key, e.keyCode), !0)
                  : rr.ios &&
                      !e.synthetic &&
                      !e.altKey &&
                      !e.metaKey &&
                      (((t = iP.find((t) => t.keyCode == e.keyCode)) &&
                        !e.ctrlKey) ||
                        (iR.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey))
                    ? ((this.pendingIOSKey = t || e),
                      setTimeout(() => this.flushIOSKey(), 250),
                      !0)
                    : (229 != e.keyCode && this.view.observer.forceFlush(), !1))
            );
          }
          flushIOSKey(e) {
            let t = this.pendingIOSKey;
            return (
              !(
                !t ||
                ("Enter" == t.key &&
                  e &&
                  e.from < e.to &&
                  /^\S+$/.test(e.insert.toString()))
              ) &&
              ((this.pendingIOSKey = void 0),
              nH(
                this.view.contentDOM,
                t.key,
                t.keyCode,
                t instanceof KeyboardEvent ? t : void 0,
              ))
            );
          }
          ignoreDuringComposition(e) {
            return (
              !!/^key/.test(e.type) &&
              (this.composing > 0 ||
                (!!(
                  rr.safari &&
                  !rr.ios &&
                  this.compositionPendingKey &&
                  Date.now() - this.compositionEndedAt < 100
                ) &&
                  ((this.compositionPendingKey = !1), !0)))
            );
          }
          startMouseSelection(e) {
            this.mouseSelection && this.mouseSelection.destroy(),
              (this.mouseSelection = e);
          }
          update(e) {
            this.view.observer.update(e),
              this.mouseSelection && this.mouseSelection.update(e),
              this.draggedContent &&
                e.docChanged &&
                (this.draggedContent = this.draggedContent.map(e.changes)),
              e.transactions.length &&
                (this.lastKeyCode = this.lastSelectionTime = 0);
          }
          destroy() {
            this.mouseSelection && this.mouseSelection.destroy();
          }
        }
        function iD(e, t) {
          return (n, r) => {
            try {
              return t.call(e, r, n);
            } catch (e) {
              r5(n.state, e);
            }
          };
        }
        let iP = [
            {
              key: "Backspace",
              keyCode: 8,
              inputType: "deleteContentBackward",
            },
            { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
            { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
            { key: "Delete", keyCode: 46, inputType: "deleteContentForward" },
          ],
          iR = "dthko",
          iM = [16, 17, 18, 20, 91, 92, 224, 225];
        function iL(e) {
          return 0.7 * Math.max(0, e) + 8;
        }
        class ij {
          constructor(e, t, n, r) {
            (this.view = e),
              (this.startEvent = t),
              (this.style = n),
              (this.mustSelect = r),
              (this.scrollSpeed = { x: 0, y: 0 }),
              (this.scrolling = -1),
              (this.lastEvent = t),
              (this.scrollParents = (function (e) {
                let t = e.ownerDocument,
                  n,
                  r;
                for (let i = e.parentNode; i; )
                  if (i == t.body || (n && r)) break;
                  else if (1 == i.nodeType)
                    !r && i.scrollHeight > i.clientHeight && (r = i),
                      !n && i.scrollWidth > i.clientWidth && (n = i),
                      (i = i.assignedSlot || i.parentNode);
                  else if (11 == i.nodeType) i = i.host;
                  else break;
                return { x: n, y: r };
              })(e.contentDOM)),
              (this.atoms = e.state.facet(ii).map((t) => t(e)));
            let i = e.contentDOM.ownerDocument;
            i.addEventListener("mousemove", (this.move = this.move.bind(this))),
              i.addEventListener("mouseup", (this.up = this.up.bind(this))),
              (this.extend = t.shiftKey),
              (this.multiple =
                e.state.facet(nr.allowMultipleSelections) &&
                (function (e, t) {
                  let n = e.state.facet(rq);
                  return n.length ? n[0](t) : rr.mac ? t.metaKey : t.ctrlKey;
                })(e, t)),
              (this.dragging =
                !!(function (e, t) {
                  let { main: n } = e.state.selection;
                  if (n.empty) return !1;
                  let r = nA(e.root);
                  if (!r || 0 == r.rangeCount) return !0;
                  let i = r.getRangeAt(0).getClientRects();
                  for (let e = 0; e < i.length; e++) {
                    let n = i[e];
                    if (
                      n.left <= t.clientX &&
                      n.right >= t.clientX &&
                      n.top <= t.clientY &&
                      n.bottom >= t.clientY
                    )
                      return !0;
                  }
                  return !1;
                })(e, t) &&
                1 == iY(t) &&
                null);
          }
          start(e) {
            !1 === this.dragging && this.select(e);
          }
          move(e) {
            var t;
            if (0 == e.buttons) return this.destroy();
            if (
              this.dragging ||
              (null == this.dragging &&
                10 >
                  ((t = this.startEvent),
                  Math.max(
                    Math.abs(t.clientX - e.clientX),
                    Math.abs(t.clientY - e.clientY),
                  )))
            )
              return;
            this.select((this.lastEvent = e));
            let n = 0,
              r = 0,
              i = 0,
              s = 0,
              o = this.view.win.innerWidth,
              a = this.view.win.innerHeight;
            this.scrollParents.x &&
              ({ left: i, right: o } =
                this.scrollParents.x.getBoundingClientRect()),
              this.scrollParents.y &&
                ({ top: s, bottom: a } =
                  this.scrollParents.y.getBoundingClientRect());
            let l = il(this.view);
            e.clientX - l.left <= i + 6
              ? (n = -iL(i - e.clientX))
              : e.clientX + l.right >= o - 6 && (n = iL(e.clientX - o)),
              e.clientY - l.top <= s + 6
                ? (r = -iL(s - e.clientY))
                : e.clientY + l.bottom >= a - 6 && (r = iL(e.clientY - a)),
              this.setScrollSpeed(n, r);
          }
          up(e) {
            null == this.dragging && this.select(this.lastEvent),
              this.dragging || e.preventDefault(),
              this.destroy();
          }
          destroy() {
            this.setScrollSpeed(0, 0);
            let e = this.view.contentDOM.ownerDocument;
            e.removeEventListener("mousemove", this.move),
              e.removeEventListener("mouseup", this.up),
              (this.view.inputState.mouseSelection =
                this.view.inputState.draggedContent =
                  null);
          }
          setScrollSpeed(e, t) {
            (this.scrollSpeed = { x: e, y: t }),
              e || t
                ? this.scrolling < 0 &&
                  (this.scrolling = setInterval(() => this.scroll(), 50))
                : this.scrolling > -1 &&
                  (clearInterval(this.scrolling), (this.scrolling = -1));
          }
          scroll() {
            let { x: e, y: t } = this.scrollSpeed;
            e &&
              this.scrollParents.x &&
              ((this.scrollParents.x.scrollLeft += e), (e = 0)),
              t &&
                this.scrollParents.y &&
                ((this.scrollParents.y.scrollTop += t), (t = 0)),
              (e || t) && this.view.win.scrollBy(e, t),
              !1 === this.dragging && this.select(this.lastEvent);
          }
          skipAtoms(e) {
            let t = null;
            for (let n = 0; n < e.ranges.length; n++) {
              let r = e.ranges[n],
                i = null;
              if (r.empty) {
                let e = iO(this.atoms, r.from, 0);
                e != r.from && (i = tN.cursor(e, -1));
              } else {
                let e = iO(this.atoms, r.from, -1),
                  t = iO(this.atoms, r.to, 1);
                (e != r.from || t != r.to) &&
                  (i = tN.range(
                    r.from == r.anchor ? e : t,
                    r.from == r.head ? e : t,
                  ));
              }
              i && (t || (t = e.ranges.slice()), (t[n] = i));
            }
            return t ? tN.create(t, e.mainIndex) : e;
          }
          select(e) {
            let { view: t } = this,
              n = this.skipAtoms(this.style.get(e, this.extend, this.multiple));
            (this.mustSelect ||
              !n.eq(t.state.selection, !1 === this.dragging)) &&
              this.view.dispatch({ selection: n, userEvent: "select.pointer" }),
              (this.mustSelect = !1);
          }
          update(e) {
            e.transactions.some((e) => e.isUserEvent("input.type"))
              ? this.destroy()
              : this.style.update(e) &&
                setTimeout(() => this.select(this.lastEvent), 20);
          }
        }
        let iF = Object.create(null),
          iB = Object.create(null),
          iz =
            (rr.ie && rr.ie_version < 15) ||
            (rr.ios && rr.webkit_version < 604);
        function i$(e, t, n) {
          for (let r of e.facet(t)) n = r(n, e);
          return n;
        }
        function iq(e, t) {
          t = i$(e.state, rG, t);
          let { state: n } = e,
            r,
            i = 1,
            s = n.toText(t),
            o = s.lines == n.selection.ranges.length;
          if (
            null != iX &&
            n.selection.ranges.every((e) => e.empty) &&
            iX == s.toString()
          ) {
            let e = -1;
            r = n.changeByRange((r) => {
              let a = n.doc.lineAt(r.from);
              if (a.from == e) return { range: r };
              e = a.from;
              let l = n.toText((o ? s.line(i++).text : t) + n.lineBreak);
              return {
                changes: { from: a.from, insert: l },
                range: tN.cursor(r.from + l.length),
              };
            });
          } else
            r = o
              ? n.changeByRange((e) => {
                  let t = s.line(i++);
                  return {
                    changes: { from: e.from, to: e.to, insert: t.text },
                    range: tN.cursor(e.from + t.length),
                  };
                })
              : n.replaceSelection(s);
          e.dispatch(r, { userEvent: "input.paste", scrollIntoView: !0 });
        }
        function iU(e, t, n, r) {
          if (1 == r) return tN.cursor(t, n);
          {
            if (2 == r)
              return (function (e, t, n = 1) {
                let r = e.charCategorizer(t),
                  i = e.doc.lineAt(t),
                  s = t - i.from;
                if (0 == i.length) return tN.cursor(t);
                0 == s ? (n = 1) : s == i.length && (n = -1);
                let o = s,
                  a = s;
                n < 0 ? (o = tm(i.text, s, !1)) : (a = tm(i.text, s));
                let l = r(i.text.slice(o, a));
                for (; o > 0; ) {
                  let e = tm(i.text, o, !1);
                  if (r(i.text.slice(e, o)) != l) break;
                  o = e;
                }
                for (; a < i.length; ) {
                  let e = tm(i.text, a);
                  if (r(i.text.slice(a, e)) != l) break;
                  a = e;
                }
                return tN.range(o + i.from, a + i.from);
              })(e.state, t, n);
            let i = rw.find(e.docView, t),
              s = e.state.doc.lineAt(i ? i.posAtEnd : t),
              o = i ? i.posAtStart : s.from,
              a = i ? i.posAtEnd : s.to;
            return a < e.state.doc.length && a == s.to && a++, tN.range(o, a);
          }
        }
        (iB.scroll = (e) => {
          (e.inputState.lastScrollTop = e.scrollDOM.scrollTop),
            (e.inputState.lastScrollLeft = e.scrollDOM.scrollLeft);
        }),
          (iF.keydown = (e, t) => (
            e.inputState.setSelectionOrigin("select"),
            27 == t.keyCode &&
              0 != e.inputState.tabFocusMode &&
              (e.inputState.tabFocusMode = Date.now() + 2e3),
            !1
          )),
          (iB.touchstart = (e, t) => {
            (e.inputState.lastTouchTime = Date.now()),
              e.inputState.setSelectionOrigin("select.pointer");
          }),
          (iB.touchmove = (e) => {
            e.inputState.setSelectionOrigin("select.pointer");
          }),
          (iF.mousedown = (e, t) => {
            if (
              (e.observer.flush(),
              e.inputState.lastTouchTime > Date.now() - 2e3)
            )
              return !1;
            let n = null;
            for (let r of e.state.facet(rH)) if ((n = r(e, t))) break;
            if (
              (n ||
                0 != t.button ||
                (n = (function (e, t) {
                  let n = iQ(e, t),
                    r = iY(t),
                    i = e.state.selection;
                  return {
                    update(e) {
                      e.docChanged &&
                        ((n.pos = e.changes.mapPos(n.pos)),
                        (i = i.map(e.changes)));
                    },
                    get(t, s, o) {
                      let a = iQ(e, t),
                        l,
                        c = iU(e, a.pos, a.bias, r);
                      if (n.pos != a.pos && !s) {
                        let t = iU(e, n.pos, n.bias, r),
                          i = Math.min(t.from, c.from),
                          s = Math.max(t.to, c.to);
                        c = i < c.from ? tN.range(i, s) : tN.range(s, i);
                      }
                      return s
                        ? i.replaceRange(i.main.extend(c.from, c.to))
                        : o &&
                            1 == r &&
                            i.ranges.length > 1 &&
                            (l = (function (e, t) {
                              for (let n = 0; n < e.ranges.length; n++) {
                                let { from: r, to: i } = e.ranges[n];
                                if (r <= t && i >= t)
                                  return tN.create(
                                    e.ranges
                                      .slice(0, n)
                                      .concat(e.ranges.slice(n + 1)),
                                    e.mainIndex == n
                                      ? 0
                                      : e.mainIndex - +(e.mainIndex > n),
                                  );
                              }
                              return null;
                            })(i, a.pos))
                          ? l
                          : o
                            ? i.addRange(c)
                            : tN.create([c]);
                    },
                  };
                })(e, t)),
              n)
            ) {
              let r = !e.hasFocus;
              e.inputState.startMouseSelection(new ij(e, t, n, r)),
                r &&
                  e.observer.ignore(() => {
                    nq(e.contentDOM);
                    let t = e.root.activeElement;
                    t && !t.contains(e.contentDOM) && t.blur();
                  });
              let i = e.inputState.mouseSelection;
              if (i) return i.start(t), !1 === i.dragging;
            }
            return !1;
          });
        let iH = (e, t, n) =>
          t >= n.top && t <= n.bottom && e >= n.left && e <= n.right;
        function iQ(e, t) {
          let n = e.posAtCoords({ x: t.clientX, y: t.clientY }, !1);
          return {
            pos: n,
            bias: (function (e, t, n, r) {
              let i = rw.find(e.docView, t);
              if (!i) return 1;
              let s = t - i.posAtStart;
              if (0 == s) return 1;
              if (s == i.length) return -1;
              let o = i.coordsAt(s, -1);
              if (o && iH(n, r, o)) return -1;
              let a = i.coordsAt(s, 1);
              return a && iH(n, r, a) ? 1 : o && o.bottom >= r ? -1 : 1;
            })(e, n, t.clientX, t.clientY),
          };
        }
        let iV = rr.ie && rr.ie_version <= 11,
          iW = null,
          iZ = 0,
          iG = 0;
        function iY(e) {
          if (!iV) return e.detail;
          let t = iW,
            n = iG;
          return (
            (iW = e),
            (iG = Date.now()),
            (iZ =
              !t ||
              (n > Date.now() - 400 &&
                2 > Math.abs(t.clientX - e.clientX) &&
                2 > Math.abs(t.clientY - e.clientY))
                ? (iZ + 1) % 3
                : 1)
          );
        }
        function iK(e, t, n, r) {
          let i;
          if (!(n = i$(e.state, rG, n))) return;
          let s = e.posAtCoords({ x: t.clientX, y: t.clientY }, !1),
            { draggedContent: o } = e.inputState,
            a =
              r &&
              o &&
              ((i = e.state.facet(rU)).length
                ? i[0](t)
                : rr.mac
                  ? !t.altKey
                  : !t.ctrlKey)
                ? { from: o.from, to: o.to }
                : null,
            l = { from: s, insert: n },
            c = e.state.changes(a ? [a, l] : l);
          e.focus(),
            e.dispatch({
              changes: c,
              selection: { anchor: c.mapPos(s, -1), head: c.mapPos(s, 1) },
              userEvent: a ? "move.drop" : "input.drop",
            }),
            (e.inputState.draggedContent = null);
        }
        (iF.dragstart = (e, t) => {
          let {
            selection: { main: n },
          } = e.state;
          if (t.target.draggable) {
            let r = e.docView.nearest(t.target);
            if (r && r.isWidget) {
              let e = r.posAtStart,
                t = e + r.length;
              (e >= n.to || t <= n.from) && (n = tN.range(e, t));
            }
          }
          let { inputState: r } = e;
          return (
            r.mouseSelection && (r.mouseSelection.dragging = !0),
            (r.draggedContent = n),
            t.dataTransfer &&
              (t.dataTransfer.setData(
                "Text",
                i$(e.state, rY, e.state.sliceDoc(n.from, n.to)),
              ),
              (t.dataTransfer.effectAllowed = "copyMove")),
            !1
          );
        }),
          (iF.dragend = (e) => ((e.inputState.draggedContent = null), !1)),
          (iF.drop = (e, t) => {
            if (!t.dataTransfer) return !1;
            if (e.state.readOnly) return !0;
            let n = t.dataTransfer.files;
            if (n && n.length) {
              let r = Array(n.length),
                i = 0,
                s = () => {
                  ++i == n.length &&
                    iK(
                      e,
                      t,
                      r.filter((e) => null != e).join(e.state.lineBreak),
                      !1,
                    );
                };
              for (let e = 0; e < n.length; e++) {
                let t = new FileReader();
                (t.onerror = s),
                  (t.onload = () => {
                    /[\x00-\x08\x0e-\x1f]{2}/.test(t.result) ||
                      (r[e] = t.result),
                      s();
                  }),
                  t.readAsText(n[e]);
              }
              return !0;
            }
            {
              let n = t.dataTransfer.getData("Text");
              if (n) return iK(e, t, n, !0), !0;
            }
            return !1;
          }),
          (iF.paste = (e, t) => {
            if (e.state.readOnly) return !0;
            e.observer.flush();
            let n = iz ? null : t.clipboardData;
            return n
              ? (iq(e, n.getData("text/plain") || n.getData("text/uri-list")),
                !0)
              : (!(function (e) {
                  let t = e.dom.parentNode;
                  if (!t) return;
                  let n = t.appendChild(document.createElement("textarea"));
                  (n.style.cssText =
                    "position: fixed; left: -10000px; top: 10px"),
                    n.focus(),
                    setTimeout(() => {
                      e.focus(), n.remove(), iq(e, n.value);
                    }, 50);
                })(e),
                !1);
          });
        let iX = null;
        iF.copy = iF.cut = (e, t) => {
          let {
            text: n,
            ranges: r,
            linewise: i,
          } = (function (e) {
            let t = [],
              n = [],
              r = !1;
            for (let r of e.selection.ranges)
              r.empty || (t.push(e.sliceDoc(r.from, r.to)), n.push(r));
            if (!t.length) {
              let i = -1;
              for (let { from: r } of e.selection.ranges) {
                let s = e.doc.lineAt(r);
                s.number > i &&
                  (t.push(s.text),
                  n.push({
                    from: s.from,
                    to: Math.min(e.doc.length, s.to + 1),
                  })),
                  (i = s.number);
              }
              r = !0;
            }
            return {
              text: i$(e, rY, t.join(e.lineBreak)),
              ranges: n,
              linewise: r,
            };
          })(e.state);
          if (!n && !i) return !1;
          (iX = i ? n : null),
            "cut" != t.type ||
              e.state.readOnly ||
              e.dispatch({
                changes: r,
                scrollIntoView: !0,
                userEvent: "delete.cut",
              });
          let s = iz ? null : t.clipboardData;
          return s
            ? (s.clearData(), s.setData("text/plain", n), !0)
            : (!(function (e, t) {
                let n = e.dom.parentNode;
                if (!n) return;
                let r = n.appendChild(document.createElement("textarea"));
                (r.style.cssText =
                  "position: fixed; left: -10000px; top: 10px"),
                  (r.value = t),
                  r.focus(),
                  (r.selectionEnd = t.length),
                  (r.selectionStart = 0),
                  setTimeout(() => {
                    r.remove(), e.focus();
                  }, 50);
              })(e, n),
              !1);
        };
        let iJ = t2.define();
        function i0(e, t) {
          let n = [];
          for (let r of e.facet(rZ)) {
            let i = r(e, t);
            i && n.push(i);
          }
          return n.length
            ? e.update({ effects: n, annotations: iJ.of(!0) })
            : null;
        }
        function i1(e) {
          setTimeout(() => {
            let t = e.hasFocus;
            if (t != e.inputState.notifiedFocused) {
              let n = i0(e.state, t);
              n ? e.dispatch(n) : e.update([]);
            }
          }, 10);
        }
        (iB.focus = (e) => {
          (e.inputState.lastFocusTime = Date.now()),
            !e.scrollDOM.scrollTop &&
              (e.inputState.lastScrollTop || e.inputState.lastScrollLeft) &&
              ((e.scrollDOM.scrollTop = e.inputState.lastScrollTop),
              (e.scrollDOM.scrollLeft = e.inputState.lastScrollLeft)),
            i1(e);
        }),
          (iB.blur = (e) => {
            e.observer.clearSelectionRange(), i1(e);
          }),
          (iB.compositionstart = iB.compositionupdate =
            (e) => {
              !e.observer.editContext &&
                (null == e.inputState.compositionFirstChange &&
                  (e.inputState.compositionFirstChange = !0),
                e.inputState.composing < 0 && (e.inputState.composing = 0));
            }),
          (iB.compositionend = (e) => {
            e.observer.editContext ||
              ((e.inputState.composing = -1),
              (e.inputState.compositionEndedAt = Date.now()),
              (e.inputState.compositionPendingKey = !0),
              (e.inputState.compositionPendingChange =
                e.observer.pendingRecords().length > 0),
              (e.inputState.compositionFirstChange = null),
              rr.chrome && rr.android
                ? e.observer.flushSoon()
                : e.inputState.compositionPendingChange
                  ? Promise.resolve().then(() => e.observer.flush())
                  : setTimeout(() => {
                      e.inputState.composing < 0 &&
                        e.docView.hasComposition &&
                        e.update([]);
                    }, 50));
          }),
          (iB.contextmenu = (e) => {
            e.inputState.lastContextMenu = Date.now();
          }),
          (iF.beforeinput = (e, t) => {
            var n, r;
            let i;
            if (
              "insertReplacementText" == t.inputType &&
              e.observer.editContext
            ) {
              let r =
                  null == (n = t.dataTransfer)
                    ? void 0
                    : n.getData("text/plain"),
                i = t.getTargetRanges();
              if (r && i.length) {
                let t = i[0],
                  n = e.posAtDOM(t.startContainer, t.startOffset),
                  s = e.posAtDOM(t.endContainer, t.endOffset);
                return (
                  iN(e, { from: n, to: s, insert: e.state.toText(r) }, null), !0
                );
              }
            }
            if (
              rr.chrome &&
              rr.android &&
              (i = iP.find((e) => e.inputType == t.inputType)) &&
              (e.observer.delayAndroidKey(i.key, i.keyCode),
              "Backspace" == i.key || "Delete" == i.key)
            ) {
              let t =
                (null == (r = window.visualViewport) ? void 0 : r.height) || 0;
              setTimeout(() => {
                var n;
                ((null == (n = window.visualViewport) ? void 0 : n.height) ||
                  0) >
                  t + 10 &&
                  e.hasFocus &&
                  (e.contentDOM.blur(), e.focus());
              }, 100);
            }
            return (
              rr.ios &&
                "deleteContentForward" == t.inputType &&
                e.observer.flushSoon(),
              rr.safari &&
                "insertText" == t.inputType &&
                e.inputState.composing >= 0 &&
                setTimeout(() => iB.compositionend(e, t), 20),
              !1
            );
          });
        let i2 = new Set(),
          i5 = ["pre-wrap", "normal", "pre-line", "break-spaces"],
          i3 = !1;
        class i4 {
          constructor(e) {
            (this.lineWrapping = e),
              (this.doc = to.empty),
              (this.heightSamples = {}),
              (this.lineHeight = 14),
              (this.charWidth = 7),
              (this.textHeight = 14),
              (this.lineLength = 30);
          }
          heightForGap(e, t) {
            let n = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1;
            return (
              this.lineWrapping &&
                (n += Math.max(
                  0,
                  Math.ceil(
                    (t - e - n * this.lineLength * 0.5) / this.lineLength,
                  ),
                )),
              this.lineHeight * n
            );
          }
          heightForLine(e) {
            return this.lineWrapping
              ? (1 +
                  Math.max(
                    0,
                    Math.ceil((e - this.lineLength) / (this.lineLength - 5)),
                  )) *
                  this.lineHeight
              : this.lineHeight;
          }
          setDoc(e) {
            return (this.doc = e), this;
          }
          mustRefreshForWrapping(e) {
            return i5.indexOf(e) > -1 != this.lineWrapping;
          }
          mustRefreshForHeights(e) {
            let t = !1;
            for (let n = 0; n < e.length; n++) {
              let r = e[n];
              r < 0
                ? n++
                : this.heightSamples[Math.floor(10 * r)] ||
                  ((t = !0), (this.heightSamples[Math.floor(10 * r)] = !0));
            }
            return t;
          }
          refresh(e, t, n, r, i, s) {
            let o = i5.indexOf(e) > -1,
              a =
                Math.round(t) != Math.round(this.lineHeight) ||
                this.lineWrapping != o;
            if (
              ((this.lineWrapping = o),
              (this.lineHeight = t),
              (this.charWidth = n),
              (this.textHeight = r),
              (this.lineLength = i),
              a)
            ) {
              this.heightSamples = {};
              for (let e = 0; e < s.length; e++) {
                let t = s[e];
                t < 0 ? e++ : (this.heightSamples[Math.floor(10 * t)] = !0);
              }
            }
            return a;
          }
        }
        class i8 {
          constructor(e, t) {
            (this.from = e), (this.heights = t), (this.index = 0);
          }
          get more() {
            return this.index < this.heights.length;
          }
        }
        class i6 {
          constructor(e, t, n, r, i) {
            (this.from = e),
              (this.length = t),
              (this.top = n),
              (this.height = r),
              (this._content = i);
          }
          get type() {
            return "number" == typeof this._content
              ? rm.Text
              : Array.isArray(this._content)
                ? this._content
                : this._content.type;
          }
          get to() {
            return this.from + this.length;
          }
          get bottom() {
            return this.top + this.height;
          }
          get widget() {
            return this._content instanceof rb ? this._content.widget : null;
          }
          get widgetLineBreaks() {
            return "number" == typeof this._content ? this._content : 0;
          }
          join(e) {
            let t = (
              Array.isArray(this._content) ? this._content : [this]
            ).concat(Array.isArray(e._content) ? e._content : [e]);
            return new i6(
              this.from,
              this.length + e.length,
              this.top,
              this.height + e.height,
              t,
            );
          }
        }
        var i9 = (function (e) {
          return (
            (e[(e.ByPos = 0)] = "ByPos"),
            (e[(e.ByHeight = 1)] = "ByHeight"),
            (e[(e.ByPosNoHeight = 2)] = "ByPosNoHeight"),
            e
          );
        })(i9 || (i9 = {}));
        class i7 {
          constructor(e, t, n = 2) {
            (this.length = e), (this.height = t), (this.flags = n);
          }
          get outdated() {
            return (2 & this.flags) > 0;
          }
          set outdated(e) {
            this.flags = (2 * !!e) | (-3 & this.flags);
          }
          setHeight(e) {
            this.height != e &&
              (Math.abs(this.height - e) > 0.001 && (i3 = !0),
              (this.height = e));
          }
          replace(e, t, n) {
            return i7.of(n);
          }
          decomposeLeft(e, t) {
            t.push(this);
          }
          decomposeRight(e, t) {
            t.push(this);
          }
          applyChanges(e, t, n, r) {
            let i = this,
              s = n.doc;
            for (let o = r.length - 1; o >= 0; o--) {
              let { fromA: a, toA: l, fromB: c, toB: u } = r[o],
                d = i.lineAt(a, i9.ByPosNoHeight, n.setDoc(t), 0, 0),
                h = d.to >= l ? d : i.lineAt(l, i9.ByPosNoHeight, n, 0, 0);
              for (u += h.to - l, l = h.to; o > 0 && d.from <= r[o - 1].toA; )
                (a = r[o - 1].fromA),
                  (c = r[o - 1].fromB),
                  o--,
                  a < d.from && (d = i.lineAt(a, i9.ByPosNoHeight, n, 0, 0));
              (c += d.from - a), (a = d.from);
              let p = so.build(n.setDoc(s), e, c, u);
              i = se(i, i.replace(a, l, p));
            }
            return i.updateHeight(n, 0);
          }
          static empty() {
            return new sn(0, 0);
          }
          static of(e) {
            if (1 == e.length) return e[0];
            let t = 0,
              n = e.length,
              r = 0,
              i = 0;
            for (;;)
              if (t == n)
                if (r > 2 * i) {
                  let i = e[t - 1];
                  i.break
                    ? e.splice(--t, 1, i.left, null, i.right)
                    : e.splice(--t, 1, i.left, i.right),
                    (n += 1 + i.break),
                    (r -= i.size);
                } else if (i > 2 * r) {
                  let t = e[n];
                  t.break
                    ? e.splice(n, 1, t.left, null, t.right)
                    : e.splice(n, 1, t.left, t.right),
                    (n += 2 + t.break),
                    (i -= t.size);
                } else break;
              else if (r < i) {
                let n = e[t++];
                n && (r += n.size);
              } else {
                let t = e[--n];
                t && (i += t.size);
              }
            let s = 0;
            return (
              null == e[t - 1]
                ? ((s = 1), t--)
                : null == e[t] && ((s = 1), n++),
              new si(i7.of(e.slice(0, t)), s, i7.of(e.slice(n)))
            );
          }
        }
        function se(e, t) {
          return e == t ? e : (e.constructor != t.constructor && (i3 = !0), t);
        }
        i7.prototype.size = 1;
        class st extends i7 {
          constructor(e, t, n) {
            super(e, t), (this.deco = n);
          }
          blockAt(e, t, n, r) {
            return new i6(r, this.length, n, this.height, this.deco || 0);
          }
          lineAt(e, t, n, r, i) {
            return this.blockAt(0, n, r, i);
          }
          forEachLine(e, t, n, r, i, s) {
            e <= i + this.length && t >= i && s(this.blockAt(0, n, r, i));
          }
          updateHeight(e, t = 0, n = !1, r) {
            return (
              r &&
                r.from <= t &&
                r.more &&
                this.setHeight(r.heights[r.index++]),
              (this.outdated = !1),
              this
            );
          }
          toString() {
            return `block(${this.length})`;
          }
        }
        class sn extends st {
          constructor(e, t) {
            super(e, t, null),
              (this.collapsed = 0),
              (this.widgetHeight = 0),
              (this.breaks = 0);
          }
          blockAt(e, t, n, r) {
            return new i6(r, this.length, n, this.height, this.breaks);
          }
          replace(e, t, n) {
            let r = n[0];
            return 1 == n.length &&
              (r instanceof sn || (r instanceof sr && 4 & r.flags)) &&
              10 > Math.abs(this.length - r.length)
              ? (r instanceof sr
                  ? (r = new sn(r.length, this.height))
                  : (r.height = this.height),
                this.outdated || (r.outdated = !1),
                r)
              : i7.of(n);
          }
          updateHeight(e, t = 0, n = !1, r) {
            return (
              r && r.from <= t && r.more
                ? this.setHeight(r.heights[r.index++])
                : (n || this.outdated) &&
                  this.setHeight(
                    Math.max(
                      this.widgetHeight,
                      e.heightForLine(this.length - this.collapsed),
                    ) +
                      this.breaks * e.lineHeight,
                  ),
              (this.outdated = !1),
              this
            );
          }
          toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
          }
        }
        class sr extends i7 {
          constructor(e) {
            super(e, 0);
          }
          heightMetrics(e, t) {
            let n = e.doc.lineAt(t).number,
              r = e.doc.lineAt(t + this.length).number,
              i = r - n + 1,
              s,
              o = 0;
            if (e.lineWrapping) {
              let t = Math.min(this.height, e.lineHeight * i);
              (s = t / i),
                this.length > i + 1 &&
                  (o = (this.height - t) / (this.length - i - 1));
            } else s = this.height / i;
            return { firstLine: n, lastLine: r, perLine: s, perChar: o };
          }
          blockAt(e, t, n, r) {
            let {
              firstLine: i,
              lastLine: s,
              perLine: o,
              perChar: a,
            } = this.heightMetrics(t, r);
            if (t.lineWrapping) {
              let i =
                  r +
                  (e < t.lineHeight
                    ? 0
                    : Math.round(
                        Math.max(0, Math.min(1, (e - n) / this.height)) *
                          this.length,
                      )),
                s = t.doc.lineAt(i),
                l = o + s.length * a,
                c = Math.max(n, e - l / 2);
              return new i6(s.from, s.length, c, l, 0);
            }
            {
              let r = Math.max(0, Math.min(s - i, Math.floor((e - n) / o))),
                { from: a, length: l } = t.doc.line(i + r);
              return new i6(a, l, n + o * r, o, 0);
            }
          }
          lineAt(e, t, n, r, i) {
            if (t == i9.ByHeight) return this.blockAt(e, n, r, i);
            if (t == i9.ByPosNoHeight) {
              let { from: t, to: r } = n.doc.lineAt(e);
              return new i6(t, r - t, 0, 0, 0);
            }
            let {
                firstLine: s,
                perLine: o,
                perChar: a,
              } = this.heightMetrics(n, i),
              l = n.doc.lineAt(e),
              c = o + l.length * a,
              u = l.number - s,
              d = r + o * u + a * (l.from - i - u);
            return new i6(
              l.from,
              l.length,
              Math.max(r, Math.min(d, r + this.height - c)),
              c,
              0,
            );
          }
          forEachLine(e, t, n, r, i, s) {
            (e = Math.max(e, i)), (t = Math.min(t, i + this.length));
            let {
              firstLine: o,
              perLine: a,
              perChar: l,
            } = this.heightMetrics(n, i);
            for (let c = e, u = r; c <= t; ) {
              let t = n.doc.lineAt(c);
              if (c == e) {
                let n = t.number - o;
                u += a * n + l * (e - i - n);
              }
              let r = a + l * t.length;
              s(new i6(t.from, t.length, u, r, 0)), (u += r), (c = t.to + 1);
            }
          }
          replace(e, t, n) {
            let r = this.length - t;
            if (r > 0) {
              let e = n[n.length - 1];
              e instanceof sr
                ? (n[n.length - 1] = new sr(e.length + r))
                : n.push(null, new sr(r - 1));
            }
            if (e > 0) {
              let t = n[0];
              t instanceof sr
                ? (n[0] = new sr(e + t.length))
                : n.unshift(new sr(e - 1), null);
            }
            return i7.of(n);
          }
          decomposeLeft(e, t) {
            t.push(new sr(e - 1), null);
          }
          decomposeRight(e, t) {
            t.push(null, new sr(this.length - e - 1));
          }
          updateHeight(e, t = 0, n = !1, r) {
            let i = t + this.length;
            if (r && r.from <= t + this.length && r.more) {
              let n = [],
                s = Math.max(t, r.from),
                o = -1;
              for (
                r.from > t && n.push(new sr(r.from - t - 1).updateHeight(e, t));
                s <= i && r.more;

              ) {
                let t = e.doc.lineAt(s).length;
                n.length && n.push(null);
                let i = r.heights[r.index++];
                -1 == o ? (o = i) : Math.abs(i - o) >= 0.001 && (o = -2);
                let a = new sn(t, i);
                (a.outdated = !1), n.push(a), (s += t + 1);
              }
              s <= i && n.push(null, new sr(i - s).updateHeight(e, s));
              let a = i7.of(n);
              return (
                (o < 0 ||
                  Math.abs(a.height - this.height) >= 0.001 ||
                  Math.abs(o - this.heightMetrics(e, t).perLine) >= 0.001) &&
                  (i3 = !0),
                se(this, a)
              );
            }
            return (
              (n || this.outdated) &&
                (this.setHeight(e.heightForGap(t, t + this.length)),
                (this.outdated = !1)),
              this
            );
          }
          toString() {
            return `gap(${this.length})`;
          }
        }
        class si extends i7 {
          constructor(e, t, n) {
            super(
              e.length + t + n.length,
              e.height + n.height,
              t | (e.outdated || n.outdated ? 2 : 0),
            ),
              (this.left = e),
              (this.right = n),
              (this.size = e.size + n.size);
          }
          get break() {
            return 1 & this.flags;
          }
          blockAt(e, t, n, r) {
            let i = n + this.left.height;
            return e < i
              ? this.left.blockAt(e, t, n, r)
              : this.right.blockAt(e, t, i, r + this.left.length + this.break);
          }
          lineAt(e, t, n, r, i) {
            let s = r + this.left.height,
              o = i + this.left.length + this.break,
              a = t == i9.ByHeight ? e < s : e < o,
              l = a
                ? this.left.lineAt(e, t, n, r, i)
                : this.right.lineAt(e, t, n, s, o);
            if (this.break || (a ? l.to < o : l.from > o)) return l;
            let c = t == i9.ByPosNoHeight ? i9.ByPosNoHeight : i9.ByPos;
            return a
              ? l.join(this.right.lineAt(o, c, n, s, o))
              : this.left.lineAt(o, c, n, r, i).join(l);
          }
          forEachLine(e, t, n, r, i, s) {
            let o = r + this.left.height,
              a = i + this.left.length + this.break;
            if (this.break)
              e < a && this.left.forEachLine(e, t, n, r, i, s),
                t >= a && this.right.forEachLine(e, t, n, o, a, s);
            else {
              let l = this.lineAt(a, i9.ByPos, n, r, i);
              e < l.from && this.left.forEachLine(e, l.from - 1, n, r, i, s),
                l.to >= e && l.from <= t && s(l),
                t > l.to && this.right.forEachLine(l.to + 1, t, n, o, a, s);
            }
          }
          replace(e, t, n) {
            let r = this.left.length + this.break;
            if (t < r)
              return this.balanced(this.left.replace(e, t, n), this.right);
            if (e > this.left.length)
              return this.balanced(
                this.left,
                this.right.replace(e - r, t - r, n),
              );
            let i = [];
            e > 0 && this.decomposeLeft(e, i);
            let s = i.length;
            for (let e of n) i.push(e);
            if ((e > 0 && ss(i, s - 1), t < this.length)) {
              let e = i.length;
              this.decomposeRight(t, i), ss(i, e);
            }
            return i7.of(i);
          }
          decomposeLeft(e, t) {
            let n = this.left.length;
            if (e <= n) return this.left.decomposeLeft(e, t);
            t.push(this.left),
              this.break && e >= ++n && t.push(null),
              e > n && this.right.decomposeLeft(e - n, t);
          }
          decomposeRight(e, t) {
            let n = this.left.length,
              r = n + this.break;
            if (e >= r) return this.right.decomposeRight(e - r, t);
            e < n && this.left.decomposeRight(e, t),
              this.break && e < r && t.push(null),
              t.push(this.right);
          }
          balanced(e, t) {
            return e.size > 2 * t.size || t.size > 2 * e.size
              ? i7.of(this.break ? [e, null, t] : [e, t])
              : ((this.left = se(this.left, e)),
                (this.right = se(this.right, t)),
                this.setHeight(e.height + t.height),
                (this.outdated = e.outdated || t.outdated),
                (this.size = e.size + t.size),
                (this.length = e.length + this.break + t.length),
                this);
          }
          updateHeight(e, t = 0, n = !1, r) {
            let { left: i, right: s } = this,
              o = t + i.length + this.break,
              a = null;
            return (r && r.from <= t + i.length && r.more
              ? (a = i = i.updateHeight(e, t, n, r))
              : i.updateHeight(e, t, n),
            r && r.from <= o + s.length && r.more
              ? (a = s = s.updateHeight(e, o, n, r))
              : s.updateHeight(e, o, n),
            a)
              ? this.balanced(i, s)
              : ((this.height = this.left.height + this.right.height),
                (this.outdated = !1),
                this);
          }
          toString() {
            return this.left + (this.break ? " " : "-") + this.right;
          }
        }
        function ss(e, t) {
          let n, r;
          null == e[t] &&
            (n = e[t - 1]) instanceof sr &&
            (r = e[t + 1]) instanceof sr &&
            e.splice(t - 1, 3, new sr(n.length + 1 + r.length));
        }
        class so {
          constructor(e, t) {
            (this.pos = e),
              (this.oracle = t),
              (this.nodes = []),
              (this.lineStart = -1),
              (this.lineEnd = -1),
              (this.covering = null),
              (this.writtenTo = e);
          }
          get isCovered() {
            return (
              this.covering &&
              this.nodes[this.nodes.length - 1] == this.covering
            );
          }
          span(e, t) {
            if (this.lineStart > -1) {
              let e = Math.min(t, this.lineEnd),
                n = this.nodes[this.nodes.length - 1];
              n instanceof sn
                ? (n.length += e - this.pos)
                : (e > this.pos || !this.isCovered) &&
                  this.nodes.push(new sn(e - this.pos, -1)),
                (this.writtenTo = e),
                t > e &&
                  (this.nodes.push(null),
                  this.writtenTo++,
                  (this.lineStart = -1));
            }
            this.pos = t;
          }
          point(e, t, n) {
            if (e < t || n.heightRelevant) {
              let r = n.widget ? n.widget.estimatedHeight : 0,
                i = n.widget ? n.widget.lineBreaks : 0;
              r < 0 && (r = this.oracle.lineHeight);
              let s = t - e;
              n.block
                ? this.addBlock(new st(s, r, n))
                : (s || i || r >= 5) && this.addLineDeco(r, i, s);
            } else t > e && this.span(e, t);
            this.lineEnd > -1 &&
              this.lineEnd < this.pos &&
              (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
          }
          enterLine() {
            if (this.lineStart > -1) return;
            let { from: e, to: t } = this.oracle.doc.lineAt(this.pos);
            (this.lineStart = e),
              (this.lineEnd = t),
              this.writtenTo < e &&
                ((this.writtenTo < e - 1 ||
                  null == this.nodes[this.nodes.length - 1]) &&
                  this.nodes.push(this.blankContent(this.writtenTo, e - 1)),
                this.nodes.push(null)),
              this.pos > e && this.nodes.push(new sn(this.pos - e, -1)),
              (this.writtenTo = this.pos);
          }
          blankContent(e, t) {
            let n = new sr(t - e);
            return this.oracle.doc.lineAt(e).to == t && (n.flags |= 4), n;
          }
          ensureLine() {
            this.enterLine();
            let e = this.nodes.length
              ? this.nodes[this.nodes.length - 1]
              : null;
            if (e instanceof sn) return e;
            let t = new sn(0, -1);
            return this.nodes.push(t), t;
          }
          addBlock(e) {
            this.enterLine();
            let t = e.deco;
            t && t.startSide > 0 && !this.isCovered && this.ensureLine(),
              this.nodes.push(e),
              (this.writtenTo = this.pos = this.pos + e.length),
              t && t.endSide > 0 && (this.covering = e);
          }
          addLineDeco(e, t, n) {
            let r = this.ensureLine();
            (r.length += n),
              (r.collapsed += n),
              (r.widgetHeight = Math.max(r.widgetHeight, e)),
              (r.breaks += t),
              (this.writtenTo = this.pos = this.pos + n);
          }
          finish(e) {
            let t =
              0 == this.nodes.length ? null : this.nodes[this.nodes.length - 1];
            !(this.lineStart > -1) || t instanceof sn || this.isCovered
              ? (this.writtenTo < this.pos || null == t) &&
                this.nodes.push(this.blankContent(this.writtenTo, this.pos))
              : this.nodes.push(new sn(0, -1));
            let n = e;
            for (let e of this.nodes)
              e instanceof sn && e.updateHeight(this.oracle, n),
                (n += e ? e.length : 1);
            return this.nodes;
          }
          static build(e, t, n, r) {
            let i = new so(n, e);
            return nc.spans(t, n, r, i, 0), i.finish(n);
          }
        }
        class sa {
          constructor() {
            this.changes = [];
          }
          compareRange() {}
          comparePoint(e, t, n, r) {
            (e < t || (n && n.heightRelevant) || (r && r.heightRelevant)) &&
              rk(e, t, this.changes, 5);
          }
        }
        class sl {
          constructor(e, t, n, r) {
            (this.from = e),
              (this.to = t),
              (this.size = n),
              (this.displaySize = r);
          }
          static same(e, t) {
            if (e.length != t.length) return !1;
            for (let n = 0; n < e.length; n++) {
              let r = e[n],
                i = t[n];
              if (r.from != i.from || r.to != i.to || r.size != i.size)
                return !1;
            }
            return !0;
          }
          draw(e, t) {
            return rg
              .replace({
                widget: new sc(this.displaySize * (t ? e.scaleY : e.scaleX), t),
              })
              .range(this.from, this.to);
          }
        }
        class sc extends rf {
          constructor(e, t) {
            super(), (this.size = e), (this.vertical = t);
          }
          eq(e) {
            return e.size == this.size && e.vertical == this.vertical;
          }
          toDOM() {
            let e = document.createElement("div");
            return (
              this.vertical
                ? (e.style.height = this.size + "px")
                : ((e.style.width = this.size + "px"),
                  (e.style.height = "2px"),
                  (e.style.display = "inline-block")),
              e
            );
          }
          get estimatedHeight() {
            return this.vertical ? this.size : -1;
          }
        }
        class su {
          constructor(e) {
            (this.state = e),
              (this.pixelViewport = {
                left: 0,
                right: window.innerWidth,
                top: 0,
                bottom: 0,
              }),
              (this.inView = !0),
              (this.paddingTop = 0),
              (this.paddingBottom = 0),
              (this.contentDOMWidth = 0),
              (this.contentDOMHeight = 0),
              (this.editorHeight = 0),
              (this.editorWidth = 0),
              (this.scrollTop = 0),
              (this.scrolledToBottom = !1),
              (this.scaleX = 1),
              (this.scaleY = 1),
              (this.scrollAnchorPos = 0),
              (this.scrollAnchorHeight = -1),
              (this.scaler = sf),
              (this.scrollTarget = null),
              (this.printing = !1),
              (this.mustMeasureContent = !0),
              (this.defaultTextDirection = rC.LTR),
              (this.visibleRanges = []),
              (this.mustEnforceCursorAssoc = !1);
            let t = e
              .facet(ie)
              .some(
                (e) => "function" != typeof e && "cm-lineWrapping" == e.class,
              );
            (this.heightOracle = new i4(t)),
              (this.stateDeco = e
                .facet(it)
                .filter((e) => "function" != typeof e)),
              (this.heightMap = i7
                .empty()
                .applyChanges(
                  this.stateDeco,
                  to.empty,
                  this.heightOracle.setDoc(e.doc),
                  [new iu(0, 0, 0, e.doc.length)],
                ));
            for (
              let e = 0;
              e < 2 &&
              ((this.viewport = this.getViewport(0, null)),
              this.updateForViewport());
              e++
            );
            this.updateViewportLines(),
              (this.lineGaps = this.ensureLineGaps([])),
              (this.lineGapDeco = rg.set(
                this.lineGaps.map((e) => e.draw(this, !1)),
              )),
              this.computeVisibleRanges();
          }
          updateForViewport() {
            let e = [this.viewport],
              { main: t } = this.state.selection;
            for (let n = 0; n <= 1; n++) {
              let r = n ? t.head : t.anchor;
              if (!e.some(({ from: e, to: t }) => r >= e && r <= t)) {
                let { from: t, to: n } = this.lineBlockAt(r);
                e.push(new sd(t, n));
              }
            }
            return (
              (this.viewports = e.sort((e, t) => e.from - t.from)),
              this.updateScaler()
            );
          }
          updateScaler() {
            let e = this.scaler;
            return (
              (this.scaler =
                this.heightMap.height <= 7e6
                  ? sf
                  : new sm(this.heightOracle, this.heightMap, this.viewports)),
              2 * !e.eq(this.scaler)
            );
          }
          updateViewportLines() {
            (this.viewportLines = []),
              this.heightMap.forEachLine(
                this.viewport.from,
                this.viewport.to,
                this.heightOracle.setDoc(this.state.doc),
                0,
                0,
                (e) => {
                  this.viewportLines.push(sg(e, this.scaler));
                },
              );
          }
          update(e, t = null) {
            var n, r;
            let i;
            this.state = e.state;
            let s = this.stateDeco;
            this.stateDeco = this.state
              .facet(it)
              .filter((e) => "function" != typeof e);
            let o = e.changedRanges,
              a = iu.extendWithRanges(
                o,
                ((n = this.stateDeco),
                (r = e ? e.changes : tw.empty(this.state.doc.length)),
                (i = new sa()),
                nc.compare(s, n, r, i, 0),
                i.changes),
              ),
              l = this.heightMap.height,
              c = this.scrolledToBottom
                ? null
                : this.scrollAnchorAt(this.scrollTop);
            (i3 = !1),
              (this.heightMap = this.heightMap.applyChanges(
                this.stateDeco,
                e.startState.doc,
                this.heightOracle.setDoc(this.state.doc),
                a,
              )),
              (this.heightMap.height != l || i3) && (e.flags |= 2),
              c
                ? ((this.scrollAnchorPos = e.changes.mapPos(c.from, -1)),
                  (this.scrollAnchorHeight = c.top))
                : ((this.scrollAnchorPos = -1), (this.scrollAnchorHeight = l));
            let u = a.length
              ? this.mapViewport(this.viewport, e.changes)
              : this.viewport;
            ((t && (t.range.head < u.from || t.range.head > u.to)) ||
              !this.viewportIsAppropriate(u)) &&
              (u = this.getViewport(0, t));
            let d = u.from != this.viewport.from || u.to != this.viewport.to;
            (this.viewport = u),
              (e.flags |= this.updateForViewport()),
              (d || !e.changes.empty || 2 & e.flags) &&
                this.updateViewportLines(),
              (this.lineGaps.length ||
                this.viewport.to - this.viewport.from > 4e3) &&
                this.updateLineGaps(
                  this.ensureLineGaps(
                    this.mapLineGaps(this.lineGaps, e.changes),
                  ),
                ),
              (e.flags |= this.computeVisibleRanges(e.changes)),
              t && (this.scrollTarget = t),
              !this.mustEnforceCursorAssoc &&
                e.selectionSet &&
                e.view.lineWrapping &&
                e.state.selection.main.empty &&
                e.state.selection.main.assoc &&
                !e.state.facet(rX) &&
                (this.mustEnforceCursorAssoc = !0);
          }
          measure(e) {
            var t;
            let n,
              r,
              i = e.contentDOM,
              s = window.getComputedStyle(i),
              o = this.heightOracle,
              a = s.whiteSpace;
            this.defaultTextDirection = "rtl" == s.direction ? rC.RTL : rC.LTR;
            let l = this.heightOracle.mustRefreshForWrapping(a),
              c = i.getBoundingClientRect(),
              u =
                l ||
                this.mustMeasureContent ||
                this.contentDOMHeight != c.height;
            (this.contentDOMHeight = c.height), (this.mustMeasureContent = !1);
            let d = 0,
              h = 0;
            if (c.width && c.height) {
              let { scaleX: e, scaleY: t } = nB(i, c);
              ((e > 0.005 && Math.abs(this.scaleX - e) > 0.005) ||
                (t > 0.005 && Math.abs(this.scaleY - t) > 0.005)) &&
                ((this.scaleX = e), (this.scaleY = t), (d |= 16), (l = u = !0));
            }
            let p = (parseInt(s.paddingTop) || 0) * this.scaleY,
              f = (parseInt(s.paddingBottom) || 0) * this.scaleY;
            (this.paddingTop != p || this.paddingBottom != f) &&
              ((this.paddingTop = p), (this.paddingBottom = f), (d |= 18)),
              this.editorWidth != e.scrollDOM.clientWidth &&
                (o.lineWrapping && (u = !0),
                (this.editorWidth = e.scrollDOM.clientWidth),
                (d |= 16));
            let m = e.scrollDOM.scrollTop * this.scaleY;
            this.scrollTop != m &&
              ((this.scrollAnchorHeight = -1), (this.scrollTop = m)),
              (this.scrolledToBottom = nV(e.scrollDOM));
            let g = (
                this.printing
                  ? function (e, t) {
                      let n = e.getBoundingClientRect();
                      return {
                        left: 0,
                        right: n.right - n.left,
                        top: t,
                        bottom: n.bottom - (n.top + t),
                      };
                    }
                  : function (e, t) {
                      let n = e.getBoundingClientRect(),
                        r = e.ownerDocument,
                        i = r.defaultView || window,
                        s = Math.max(0, n.left),
                        o = Math.min(i.innerWidth, n.right),
                        a = Math.max(0, n.top),
                        l = Math.min(i.innerHeight, n.bottom);
                      for (let t = e.parentNode; t && t != r.body; )
                        if (1 == t.nodeType) {
                          let n = t,
                            r = window.getComputedStyle(n);
                          if (
                            (n.scrollHeight > n.clientHeight ||
                              n.scrollWidth > n.clientWidth) &&
                            "visible" != r.overflow
                          ) {
                            let r = n.getBoundingClientRect();
                            (s = Math.max(s, r.left)),
                              (o = Math.min(o, r.right)),
                              (a = Math.max(a, r.top)),
                              (l = Math.min(
                                t == e.parentNode ? i.innerHeight : l,
                                r.bottom,
                              ));
                          }
                          t =
                            "absolute" == r.position || "fixed" == r.position
                              ? n.offsetParent
                              : n.parentNode;
                        } else if (11 == t.nodeType) t = t.host;
                        else break;
                      return {
                        left: s - n.left,
                        right: Math.max(s, o) - n.left,
                        top: a - (n.top + t),
                        bottom: Math.max(a, l) - (n.top + t),
                      };
                    }
              )(i, this.paddingTop),
              y = g.top - this.pixelViewport.top,
              v = g.bottom - this.pixelViewport.bottom;
            this.pixelViewport = g;
            let b =
              this.pixelViewport.bottom > this.pixelViewport.top &&
              this.pixelViewport.right > this.pixelViewport.left;
            if (
              (b != this.inView && ((this.inView = b), b && (u = !0)),
              !this.inView &&
                !this.scrollTarget &&
                ((n = (t = e.dom).getBoundingClientRect()),
                (r = t.ownerDocument.defaultView || window),
                !(n.left < r.innerWidth) ||
                  !(n.right > 0) ||
                  !(n.top < r.innerHeight) ||
                  !(n.bottom > 0)))
            )
              return 0;
            let x = c.width;
            if (
              ((this.contentDOMWidth != x ||
                this.editorHeight != e.scrollDOM.clientHeight) &&
                ((this.contentDOMWidth = c.width),
                (this.editorHeight = e.scrollDOM.clientHeight),
                (d |= 16)),
              u)
            ) {
              let t = e.docView.measureVisibleLineHeights(this.viewport);
              if (
                (o.mustRefreshForHeights(t) && (l = !0),
                l ||
                  (o.lineWrapping &&
                    Math.abs(x - this.contentDOMWidth) > o.charWidth))
              ) {
                let {
                  lineHeight: n,
                  charWidth: r,
                  textHeight: i,
                } = e.docView.measureTextSize();
                (l = n > 0 && o.refresh(a, n, r, i, x / r, t)) &&
                  ((e.docView.minWidth = 0), (d |= 16));
              }
              for (let n of (y > 0 && v > 0
                ? (h = Math.max(y, v))
                : y < 0 && v < 0 && (h = Math.min(y, v)),
              (i3 = !1),
              this.viewports)) {
                let r =
                  n.from == this.viewport.from
                    ? t
                    : e.docView.measureVisibleLineHeights(n);
                this.heightMap = (
                  l
                    ? i7
                        .empty()
                        .applyChanges(
                          this.stateDeco,
                          to.empty,
                          this.heightOracle,
                          [new iu(0, 0, 0, e.state.doc.length)],
                        )
                    : this.heightMap
                ).updateHeight(o, 0, l, new i8(n.from, r));
              }
              i3 && (d |= 2);
            }
            let k =
              !this.viewportIsAppropriate(this.viewport, h) ||
              (this.scrollTarget &&
                (this.scrollTarget.range.head < this.viewport.from ||
                  this.scrollTarget.range.head > this.viewport.to));
            return (
              k &&
                (2 & d && (d |= this.updateScaler()),
                (this.viewport = this.getViewport(h, this.scrollTarget)),
                (d |= this.updateForViewport())),
              (2 & d || k) && this.updateViewportLines(),
              (this.lineGaps.length ||
                this.viewport.to - this.viewport.from > 4e3) &&
                this.updateLineGaps(
                  this.ensureLineGaps(l ? [] : this.lineGaps, e),
                ),
              (d |= this.computeVisibleRanges()),
              this.mustEnforceCursorAssoc &&
                ((this.mustEnforceCursorAssoc = !1),
                e.docView.enforceCursorAssoc()),
              d
            );
          }
          get visibleTop() {
            return this.scaler.fromDOM(this.pixelViewport.top);
          }
          get visibleBottom() {
            return this.scaler.fromDOM(this.pixelViewport.bottom);
          }
          getViewport(e, t) {
            let n = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)),
              r = this.heightMap,
              i = this.heightOracle,
              { visibleTop: s, visibleBottom: o } = this,
              a = new sd(
                r.lineAt(s - 1e3 * n, i9.ByHeight, i, 0, 0).from,
                r.lineAt(o + (1 - n) * 1e3, i9.ByHeight, i, 0, 0).to,
              );
            if (t) {
              let { head: e } = t.range;
              if (e < a.from || e > a.to) {
                let n = Math.min(
                    this.editorHeight,
                    this.pixelViewport.bottom - this.pixelViewport.top,
                  ),
                  s = r.lineAt(e, i9.ByPos, i, 0, 0),
                  o;
                (o =
                  "center" == t.y
                    ? (s.top + s.bottom) / 2 - n / 2
                    : "start" == t.y || ("nearest" == t.y && e < a.from)
                      ? s.top
                      : s.bottom - n),
                  (a = new sd(
                    r.lineAt(o - 500, i9.ByHeight, i, 0, 0).from,
                    r.lineAt(o + n + 500, i9.ByHeight, i, 0, 0).to,
                  ));
              }
            }
            return a;
          }
          mapViewport(e, t) {
            let n = t.mapPos(e.from, -1),
              r = t.mapPos(e.to, 1);
            return new sd(
              this.heightMap.lineAt(n, i9.ByPos, this.heightOracle, 0, 0).from,
              this.heightMap.lineAt(r, i9.ByPos, this.heightOracle, 0, 0).to,
            );
          }
          viewportIsAppropriate({ from: e, to: t }, n = 0) {
            if (!this.inView) return !0;
            let { top: r } = this.heightMap.lineAt(
                e,
                i9.ByPos,
                this.heightOracle,
                0,
                0,
              ),
              { bottom: i } = this.heightMap.lineAt(
                t,
                i9.ByPos,
                this.heightOracle,
                0,
                0,
              ),
              { visibleTop: s, visibleBottom: o } = this;
            return (
              (0 == e || r <= s - Math.max(10, Math.min(-n, 250))) &&
              (t == this.state.doc.length ||
                i >= o + Math.max(10, Math.min(n, 250))) &&
              r > s - 2e3 &&
              i < o + 2e3
            );
          }
          mapLineGaps(e, t) {
            if (!e.length || t.empty) return e;
            let n = [];
            for (let r of e)
              t.touchesRange(r.from, r.to) ||
                n.push(
                  new sl(
                    t.mapPos(r.from),
                    t.mapPos(r.to),
                    r.size,
                    r.displaySize,
                  ),
                );
            return n;
          }
          ensureLineGaps(e, t) {
            let n = this.heightOracle.lineWrapping,
              r = n ? 1e4 : 2e3,
              i = r >> 1,
              s = r << 1;
            if (this.defaultTextDirection != rC.LTR && !n) return [];
            let o = [],
              a = (r, s, l, c) => {
                if (s - r < i) return;
                let u = this.state.selection.main,
                  d = [u.from];
                for (let e of (u.empty || d.push(u.to), d))
                  if (e > r && e < s) {
                    a(r, e - 10, l, c), a(e + 10, s, l, c);
                    return;
                  }
                let h = (function (e, t) {
                  for (let n of e) if (t(n)) return n;
                })(
                  e,
                  (e) =>
                    e.from >= l.from &&
                    e.to <= l.to &&
                    Math.abs(e.from - r) < i &&
                    Math.abs(e.to - s) < i &&
                    !d.some((t) => e.from < t && e.to > t),
                );
                if (!h) {
                  if (
                    s < l.to &&
                    t &&
                    n &&
                    t.visibleRanges.some((e) => e.from <= s && e.to >= s)
                  ) {
                    let e = t.moveToLineBoundary(tN.cursor(s), !1, !0).head;
                    e > r && (s = e);
                  }
                  let e = this.gapSize(l, r, s, c),
                    i = n || e < 2e6 ? e : 2e6;
                  h = new sl(r, s, e, i);
                }
                o.push(h);
              },
              l = (t) => {
                var i, o, l;
                let c, u, d, h, p;
                if (t.length < s || t.type != rm.Text) return;
                let f =
                  ((i = t.from),
                  (o = t.to),
                  (l = this.stateDeco),
                  (d = []),
                  (h = i),
                  (p = 0),
                  nc.spans(
                    l,
                    i,
                    o,
                    {
                      span() {},
                      point(e, t) {
                        e > h && (d.push({ from: h, to: e }), (p += e - h)),
                          (h = t);
                      },
                    },
                    20,
                  ),
                  h < o && (d.push({ from: h, to: o }), (p += o - h)),
                  { total: p, ranges: d });
                if (f.total < s) return;
                let m = this.scrollTarget ? this.scrollTarget.range.head : null;
                if (n) {
                  let e,
                    n,
                    i =
                      (r / this.heightOracle.lineLength) *
                      this.heightOracle.lineHeight;
                  if (null != m) {
                    let r = sp(f, m),
                      s =
                        ((this.visibleBottom - this.visibleTop) / 2 + i) /
                        t.height;
                    (e = r - s), (n = r + s);
                  } else
                    (e = (this.visibleTop - t.top - i) / t.height),
                      (n = (this.visibleBottom - t.top + i) / t.height);
                  (c = sh(f, e)), (u = sh(f, n));
                } else {
                  let n,
                    i,
                    s = f.total * this.heightOracle.charWidth,
                    o = r * this.heightOracle.charWidth,
                    a = 0;
                  if (s > 2e6)
                    for (let n of e)
                      n.from >= t.from &&
                        n.from < t.to &&
                        n.size != n.displaySize &&
                        n.from * this.heightOracle.charWidth + a <
                          this.pixelViewport.left &&
                        (a = n.size - n.displaySize);
                  let l = this.pixelViewport.left + a,
                    d = this.pixelViewport.right + a;
                  if (null != m) {
                    let e = sp(f, m),
                      t = ((d - l) / 2 + o) / s;
                    (n = e - t), (i = e + t);
                  } else (n = (l - o) / s), (i = (d + o) / s);
                  (c = sh(f, n)), (u = sh(f, i));
                }
                c > t.from && a(t.from, c, t, f), u < t.to && a(u, t.to, t, f);
              };
            for (let e of this.viewportLines)
              Array.isArray(e.type) ? e.type.forEach(l) : l(e);
            return o;
          }
          gapSize(e, t, n, r) {
            let i = sp(r, n) - sp(r, t);
            return this.heightOracle.lineWrapping
              ? e.height * i
              : r.total * this.heightOracle.charWidth * i;
          }
          updateLineGaps(e) {
            sl.same(e, this.lineGaps) ||
              ((this.lineGaps = e),
              (this.lineGapDeco = rg.set(
                e.map((e) => e.draw(this, this.heightOracle.lineWrapping)),
              )));
          }
          computeVisibleRanges(e) {
            let t = this.stateDeco;
            this.lineGaps.length && (t = t.concat(this.lineGapDeco));
            let n = [];
            nc.spans(
              t,
              this.viewport.from,
              this.viewport.to,
              {
                span(e, t) {
                  n.push({ from: e, to: t });
                },
                point() {},
              },
              20,
            );
            let r = 0;
            if (n.length != this.visibleRanges.length) r = 12;
            else
              for (let t = 0; t < n.length && !(8 & r); t++) {
                let i = this.visibleRanges[t],
                  s = n[t];
                (i.from != s.from || i.to != s.to) &&
                  ((r |= 4),
                  (e &&
                    e.mapPos(i.from, -1) == s.from &&
                    e.mapPos(i.to, 1) == s.to) ||
                    (r |= 8));
              }
            return (this.visibleRanges = n), r;
          }
          lineBlockAt(e) {
            return (
              (e >= this.viewport.from &&
                e <= this.viewport.to &&
                this.viewportLines.find((t) => t.from <= e && t.to >= e)) ||
              sg(
                this.heightMap.lineAt(e, i9.ByPos, this.heightOracle, 0, 0),
                this.scaler,
              )
            );
          }
          lineBlockAtHeight(e) {
            return (
              (e >= this.viewportLines[0].top &&
                e <= this.viewportLines[this.viewportLines.length - 1].bottom &&
                this.viewportLines.find((t) => t.top <= e && t.bottom >= e)) ||
              sg(
                this.heightMap.lineAt(
                  this.scaler.fromDOM(e),
                  i9.ByHeight,
                  this.heightOracle,
                  0,
                  0,
                ),
                this.scaler,
              )
            );
          }
          scrollAnchorAt(e) {
            let t = this.lineBlockAtHeight(e + 8);
            return t.from >= this.viewport.from ||
              this.viewportLines[0].top - e > 200
              ? t
              : this.viewportLines[0];
          }
          elementAtHeight(e) {
            return sg(
              this.heightMap.blockAt(
                this.scaler.fromDOM(e),
                this.heightOracle,
                0,
                0,
              ),
              this.scaler,
            );
          }
          get docHeight() {
            return this.scaler.toDOM(this.heightMap.height);
          }
          get contentHeight() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
          }
        }
        class sd {
          constructor(e, t) {
            (this.from = e), (this.to = t);
          }
        }
        function sh({ total: e, ranges: t }, n) {
          if (n <= 0) return t[0].from;
          if (n >= 1) return t[t.length - 1].to;
          let r = Math.floor(e * n);
          for (let e = 0; ; e++) {
            let { from: n, to: i } = t[e],
              s = i - n;
            if (r <= s) return n + r;
            r -= s;
          }
        }
        function sp(e, t) {
          let n = 0;
          for (let { from: r, to: i } of e.ranges) {
            if (t <= i) {
              n += t - r;
              break;
            }
            n += i - r;
          }
          return n / e.total;
        }
        let sf = {
          toDOM: (e) => e,
          fromDOM: (e) => e,
          scale: 1,
          eq(e) {
            return e == this;
          },
        };
        class sm {
          constructor(e, t, n) {
            let r = 0,
              i = 0,
              s = 0;
            for (let o of ((this.viewports = n.map(({ from: n, to: i }) => {
              let s = t.lineAt(n, i9.ByPos, e, 0, 0).top,
                o = t.lineAt(i, i9.ByPos, e, 0, 0).bottom;
              return (
                (r += o - s),
                { from: n, to: i, top: s, bottom: o, domTop: 0, domBottom: 0 }
              );
            })),
            (this.scale = (7e6 - r) / (t.height - r)),
            this.viewports))
              (o.domTop = s + (o.top - i) * this.scale),
                (s = o.domBottom = o.domTop + (o.bottom - o.top)),
                (i = o.bottom);
          }
          toDOM(e) {
            for (let t = 0, n = 0, r = 0; ; t++) {
              let i = t < this.viewports.length ? this.viewports[t] : null;
              if (!i || e < i.top) return r + (e - n) * this.scale;
              if (e <= i.bottom) return i.domTop + (e - i.top);
              (n = i.bottom), (r = i.domBottom);
            }
          }
          fromDOM(e) {
            for (let t = 0, n = 0, r = 0; ; t++) {
              let i = t < this.viewports.length ? this.viewports[t] : null;
              if (!i || e < i.domTop) return n + (e - r) / this.scale;
              if (e <= i.domBottom) return i.top + (e - i.domTop);
              (n = i.bottom), (r = i.domBottom);
            }
          }
          eq(e) {
            return (
              e instanceof sm &&
              this.scale == e.scale &&
              this.viewports.length == e.viewports.length &&
              this.viewports.every(
                (t, n) =>
                  t.from == e.viewports[n].from && t.to == e.viewports[n].to,
              )
            );
          }
        }
        function sg(e, t) {
          if (1 == t.scale) return e;
          let n = t.toDOM(e.top),
            r = t.toDOM(e.bottom);
          return new i6(
            e.from,
            e.length,
            n,
            r - n,
            Array.isArray(e._content)
              ? e._content.map((e) => sg(e, t))
              : e._content,
          );
        }
        let sy = tP.define({ combine: (e) => e.join(" ") }),
          sv = tP.define({ combine: (e) => e.indexOf(!0) > -1 }),
          sb = nT.newName(),
          sx = nT.newName(),
          sk = nT.newName(),
          sw = { "&light": "." + sx, "&dark": "." + sk };
        function s_(e, t, n) {
          return new nT(t, {
            finish: (t) =>
              /&/.test(t)
                ? t.replace(/&\w*/, (t) => {
                    if ("&" == t) return e;
                    if (!n || !n[t])
                      throw RangeError(`Unsupported selector: ${t}`);
                    return n[t];
                  })
                : e + " " + t,
          });
        }
        let sO = s_(
            "." + sb,
            {
              "&": {
                position: "relative !important",
                boxSizing: "border-box",
                "&.cm-focused": { outline: "1px dotted #212121" },
                display: "flex !important",
                flexDirection: "column",
              },
              ".cm-scroller": {
                display: "flex !important",
                alignItems: "flex-start !important",
                fontFamily: "monospace",
                lineHeight: 1.4,
                height: "100%",
                overflowX: "auto",
                position: "relative",
                zIndex: 0,
                overflowAnchor: "none",
              },
              ".cm-content": {
                margin: 0,
                flexGrow: 2,
                flexShrink: 0,
                display: "block",
                whiteSpace: "pre",
                wordWrap: "normal",
                boxSizing: "border-box",
                minHeight: "100%",
                padding: "4px 0",
                outline: "none",
                "&[contenteditable=true]": {
                  WebkitUserModify: "read-write-plaintext-only",
                },
              },
              ".cm-lineWrapping": {
                whiteSpace_fallback: "pre-wrap",
                whiteSpace: "break-spaces",
                wordBreak: "break-word",
                overflowWrap: "anywhere",
                flexShrink: 1,
              },
              "&light .cm-content": { caretColor: "black" },
              "&dark .cm-content": { caretColor: "white" },
              ".cm-line": { display: "block", padding: "0 2px 0 6px" },
              ".cm-layer": {
                position: "absolute",
                left: 0,
                top: 0,
                contain: "size style",
                "& > *": { position: "absolute" },
              },
              "&light .cm-selectionBackground": { background: "#d9d9d9" },
              "&dark .cm-selectionBackground": { background: "#222" },
              "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":
                { background: "#d7d4f0" },
              "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":
                { background: "#233" },
              ".cm-cursorLayer": { pointerEvents: "none" },
              "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
                animation: "steps(1) cm-blink 1.2s infinite",
              },
              "@keyframes cm-blink": {
                "0%": {},
                "50%": { opacity: 0 },
                "100%": {},
              },
              "@keyframes cm-blink2": {
                "0%": {},
                "50%": { opacity: 0 },
                "100%": {},
              },
              ".cm-cursor, .cm-dropCursor": {
                borderLeft: "1.2px solid black",
                marginLeft: "-0.6px",
                pointerEvents: "none",
              },
              ".cm-cursor": { display: "none" },
              "&dark .cm-cursor": { borderLeftColor: "#ddd" },
              ".cm-dropCursor": { position: "absolute" },
              "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
                display: "block",
              },
              ".cm-iso": { unicodeBidi: "isolate" },
              ".cm-announced": { position: "fixed", top: "-10000px" },
              "@media print": { ".cm-announced": { display: "none" } },
              "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
              "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
              "&light .cm-specialChar": { color: "red" },
              "&dark .cm-specialChar": { color: "#f78" },
              ".cm-gutters": {
                flexShrink: 0,
                display: "flex",
                height: "100%",
                boxSizing: "border-box",
                insetInlineStart: 0,
                zIndex: 200,
              },
              "&light .cm-gutters": {
                backgroundColor: "#f5f5f5",
                color: "#6c6c6c",
                borderRight: "1px solid #ddd",
              },
              "&dark .cm-gutters": {
                backgroundColor: "#333338",
                color: "#ccc",
              },
              ".cm-gutter": {
                display: "flex !important",
                flexDirection: "column",
                flexShrink: 0,
                boxSizing: "border-box",
                minHeight: "100%",
                overflow: "hidden",
              },
              ".cm-gutterElement": { boxSizing: "border-box" },
              ".cm-lineNumbers .cm-gutterElement": {
                padding: "0 3px 0 5px",
                minWidth: "20px",
                textAlign: "right",
                whiteSpace: "nowrap",
              },
              "&light .cm-activeLineGutter": { backgroundColor: "#e2f2ff" },
              "&dark .cm-activeLineGutter": { backgroundColor: "#222227" },
              ".cm-panels": {
                boxSizing: "border-box",
                position: "sticky",
                left: 0,
                right: 0,
                zIndex: 300,
              },
              "&light .cm-panels": {
                backgroundColor: "#f5f5f5",
                color: "black",
              },
              "&light .cm-panels-top": { borderBottom: "1px solid #ddd" },
              "&light .cm-panels-bottom": { borderTop: "1px solid #ddd" },
              "&dark .cm-panels": {
                backgroundColor: "#333338",
                color: "white",
              },
              ".cm-dialog": {
                padding: "2px 19px 4px 6px",
                position: "relative",
                "& label": { fontSize: "80%" },
              },
              ".cm-dialog-close": {
                position: "absolute",
                top: "3px",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                fontSize: "14px",
                padding: "0",
              },
              ".cm-tab": {
                display: "inline-block",
                overflow: "hidden",
                verticalAlign: "bottom",
              },
              ".cm-widgetBuffer": {
                verticalAlign: "text-top",
                height: "1em",
                width: 0,
                display: "inline",
              },
              ".cm-placeholder": {
                color: "#888",
                display: "inline-block",
                verticalAlign: "top",
                userSelect: "none",
              },
              ".cm-highlightSpace": {
                backgroundImage:
                  "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
                backgroundPosition: "center",
              },
              ".cm-highlightTab": {
                backgroundImage:
                  'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>\')',
                backgroundSize: "auto 100%",
                backgroundPosition: "right 90%",
                backgroundRepeat: "no-repeat",
              },
              ".cm-trailingSpace": { backgroundColor: "#ff332255" },
              ".cm-button": {
                verticalAlign: "middle",
                color: "inherit",
                fontSize: "70%",
                padding: ".2em 1em",
                borderRadius: "1px",
              },
              "&light .cm-button": {
                backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
                border: "1px solid #888",
                "&:active": {
                  backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)",
                },
              },
              "&dark .cm-button": {
                backgroundImage: "linear-gradient(#393939, #111)",
                border: "1px solid #888",
                "&:active": { backgroundImage: "linear-gradient(#111, #333)" },
              },
              ".cm-textfield": {
                verticalAlign: "middle",
                color: "inherit",
                fontSize: "70%",
                border: "1px solid silver",
                padding: ".2em .5em",
              },
              "&light .cm-textfield": { backgroundColor: "white" },
              "&dark .cm-textfield": {
                border: "1px solid #555",
                backgroundColor: "inherit",
              },
            },
            sw,
          ),
          sT = {
            childList: !0,
            characterData: !0,
            subtree: !0,
            attributes: !0,
            characterDataOldValue: !0,
          },
          sS = rr.ie && rr.ie_version <= 11;
        class sE {
          constructor(e) {
            (this.view = e),
              (this.active = !1),
              (this.editContext = null),
              (this.selectionRange = new nz()),
              (this.selectionChanged = !1),
              (this.delayedFlush = -1),
              (this.resizeTimeout = -1),
              (this.queue = []),
              (this.delayedAndroidKey = null),
              (this.flushingAndroidKey = -1),
              (this.lastChange = 0),
              (this.scrollTargets = []),
              (this.intersection = null),
              (this.resizeScroll = null),
              (this.intersecting = !1),
              (this.gapIntersection = null),
              (this.gaps = []),
              (this.printQuery = null),
              (this.parentCheck = -1),
              (this.dom = e.contentDOM),
              (this.observer = new MutationObserver((t) => {
                for (let e of t) this.queue.push(e);
                ((rr.ie && rr.ie_version <= 11) || (rr.ios && e.composing)) &&
                t.some(
                  (e) =>
                    ("childList" == e.type && e.removedNodes.length) ||
                    ("characterData" == e.type &&
                      e.oldValue.length > e.target.nodeValue.length),
                )
                  ? this.flushSoon()
                  : this.flush();
              })),
              window.EditContext &&
                !1 !== e.constructor.EDIT_CONTEXT &&
                !(rr.chrome && rr.chrome_version < 126) &&
                ((this.editContext = new sN(e)),
                e.state.facet(r3) &&
                  (e.contentDOM.editContext = this.editContext.editContext)),
              sS &&
                (this.onCharData = (e) => {
                  this.queue.push({
                    target: e.target,
                    type: "characterData",
                    oldValue: e.prevValue,
                  }),
                    this.flushSoon();
                }),
              (this.onSelectionChange = this.onSelectionChange.bind(this)),
              (this.onResize = this.onResize.bind(this)),
              (this.onPrint = this.onPrint.bind(this)),
              (this.onScroll = this.onScroll.bind(this)),
              window.matchMedia &&
                (this.printQuery = window.matchMedia("print")),
              "function" == typeof ResizeObserver &&
                ((this.resizeScroll = new ResizeObserver(() => {
                  var e;
                  (null == (e = this.view.docView) ? void 0 : e.lastUpdate) <
                    Date.now() - 75 && this.onResize();
                })),
                this.resizeScroll.observe(e.scrollDOM)),
              this.addWindowListeners((this.win = e.win)),
              this.start(),
              "function" == typeof IntersectionObserver &&
                ((this.intersection = new IntersectionObserver(
                  (e) => {
                    this.parentCheck < 0 &&
                      (this.parentCheck = setTimeout(
                        this.listenForScroll.bind(this),
                        1e3,
                      )),
                      e.length > 0 &&
                        e[e.length - 1].intersectionRatio > 0 !=
                          this.intersecting &&
                        ((this.intersecting = !this.intersecting),
                        this.intersecting != this.view.inView &&
                          this.onScrollChanged(document.createEvent("Event")));
                  },
                  { threshold: [0, 0.001] },
                )),
                this.intersection.observe(this.dom),
                (this.gapIntersection = new IntersectionObserver((e) => {
                  e.length > 0 &&
                    e[e.length - 1].intersectionRatio > 0 &&
                    this.onScrollChanged(document.createEvent("Event"));
                }, {}))),
              this.listenForScroll(),
              this.readSelectionRange();
          }
          onScrollChanged(e) {
            this.view.inputState.runHandlers("scroll", e),
              this.intersecting && this.view.measure();
          }
          onScroll(e) {
            this.intersecting && this.flush(!1),
              this.editContext &&
                this.view.requestMeasure(this.editContext.measureReq),
              this.onScrollChanged(e);
          }
          onResize() {
            this.resizeTimeout < 0 &&
              (this.resizeTimeout = setTimeout(() => {
                (this.resizeTimeout = -1), this.view.requestMeasure();
              }, 50));
          }
          onPrint(e) {
            (("change" != e.type && e.type) || e.matches) &&
              ((this.view.viewState.printing = !0),
              this.view.measure(),
              setTimeout(() => {
                (this.view.viewState.printing = !1), this.view.requestMeasure();
              }, 500));
          }
          updateGaps(e) {
            if (
              this.gapIntersection &&
              (e.length != this.gaps.length ||
                this.gaps.some((t, n) => t != e[n]))
            ) {
              for (let t of (this.gapIntersection.disconnect(), e))
                this.gapIntersection.observe(t);
              this.gaps = e;
            }
          }
          onSelectionChange(e) {
            let t = this.selectionChanged;
            if (!this.readSelectionRange() || this.delayedAndroidKey) return;
            let { view: n } = this,
              r = this.selectionRange;
            if (
              n.state.facet(r3)
                ? n.root.activeElement != this.dom
                : !nI(this.dom, r)
            )
              return;
            let i = r.anchorNode && n.docView.nearest(r.anchorNode);
            if (i && i.ignoreEvent(e)) {
              t || (this.selectionChanged = !1);
              return;
            }
            ((rr.ie && rr.ie_version <= 11) || (rr.android && rr.chrome)) &&
            !n.state.selection.main.empty &&
            r.focusNode &&
            nP(r.focusNode, r.focusOffset, r.anchorNode, r.anchorOffset)
              ? this.flushSoon()
              : this.flush(!1);
          }
          readSelectionRange() {
            let { view: e } = this,
              t = nA(e.root);
            if (!t) return !1;
            let n =
              (rr.safari &&
                11 == e.root.nodeType &&
                e.root.activeElement == this.dom &&
                (function (e, t) {
                  if (t.getComposedRanges) {
                    let n = t.getComposedRanges(e.root)[0];
                    if (n) return sA(e, n);
                  }
                  let n = null;
                  function r(e) {
                    e.preventDefault(),
                      e.stopImmediatePropagation(),
                      (n = e.getTargetRanges()[0]);
                  }
                  return (
                    e.contentDOM.addEventListener("beforeinput", r, !0),
                    e.dom.ownerDocument.execCommand("indent"),
                    e.contentDOM.removeEventListener("beforeinput", r, !0),
                    n ? sA(e, n) : null
                  );
                })(this.view, t)) ||
              t;
            if (!n || this.selectionRange.eq(n)) return !1;
            let r = nI(this.dom, n);
            return r &&
              !this.selectionChanged &&
              e.inputState.lastFocusTime > Date.now() - 200 &&
              e.inputState.lastTouchTime < Date.now() - 300 &&
              (function (e, t) {
                let n = t.focusNode,
                  r = t.focusOffset;
                if (!n || t.anchorNode != n || t.anchorOffset != r) return !1;
                for (r = Math.min(r, nj(n)); ; )
                  if (r) {
                    if (1 != n.nodeType) return !1;
                    let e = n.childNodes[r - 1];
                    "false" == e.contentEditable ? r-- : (r = nj((n = e)));
                  } else {
                    if (n == e) return !0;
                    (r = nR(n)), (n = n.parentNode);
                  }
              })(this.dom, n)
              ? ((this.view.inputState.lastFocusTime = 0),
                e.docView.updateSelection(),
                !1)
              : (this.selectionRange.setRange(n),
                r && (this.selectionChanged = !0),
                !0);
          }
          setSelectionRange(e, t) {
            this.selectionRange.set(e.node, e.offset, t.node, t.offset),
              (this.selectionChanged = !1);
          }
          clearSelectionRange() {
            this.selectionRange.set(null, 0, null, 0);
          }
          listenForScroll() {
            this.parentCheck = -1;
            let e = 0,
              t = null;
            for (let n = this.dom; n; )
              if (1 == n.nodeType)
                !t &&
                e < this.scrollTargets.length &&
                this.scrollTargets[e] == n
                  ? e++
                  : t || (t = this.scrollTargets.slice(0, e)),
                  t && t.push(n),
                  (n = n.assignedSlot || n.parentNode);
              else if (11 == n.nodeType) n = n.host;
              else break;
            if (
              (e < this.scrollTargets.length &&
                !t &&
                (t = this.scrollTargets.slice(0, e)),
              t)
            ) {
              for (let e of this.scrollTargets)
                e.removeEventListener("scroll", this.onScroll);
              for (let e of (this.scrollTargets = t))
                e.addEventListener("scroll", this.onScroll);
            }
          }
          ignore(e) {
            if (!this.active) return e();
            try {
              return this.stop(), e();
            } finally {
              this.start(), this.clear();
            }
          }
          start() {
            this.active ||
              (this.observer.observe(this.dom, sT),
              sS &&
                this.dom.addEventListener(
                  "DOMCharacterDataModified",
                  this.onCharData,
                ),
              (this.active = !0));
          }
          stop() {
            this.active &&
              ((this.active = !1),
              this.observer.disconnect(),
              sS &&
                this.dom.removeEventListener(
                  "DOMCharacterDataModified",
                  this.onCharData,
                ));
          }
          clear() {
            this.processRecords(),
              (this.queue.length = 0),
              (this.selectionChanged = !1);
          }
          delayAndroidKey(e, t) {
            var n;
            this.delayedAndroidKey ||
              (this.flushingAndroidKey = this.view.win.requestAnimationFrame(
                () => {
                  let e = this.delayedAndroidKey;
                  e &&
                    (this.clearDelayedAndroidKey(),
                    (this.view.inputState.lastKeyCode = e.keyCode),
                    (this.view.inputState.lastKeyTime = Date.now()),
                    !this.flush() && e.force && nH(this.dom, e.key, e.keyCode));
                },
              )),
              (this.delayedAndroidKey && "Enter" != e) ||
                (this.delayedAndroidKey = {
                  key: e,
                  keyCode: t,
                  force:
                    this.lastChange < Date.now() - 50 ||
                    !!(null == (n = this.delayedAndroidKey) ? void 0 : n.force),
                });
          }
          clearDelayedAndroidKey() {
            this.win.cancelAnimationFrame(this.flushingAndroidKey),
              (this.delayedAndroidKey = null),
              (this.flushingAndroidKey = -1);
          }
          flushSoon() {
            this.delayedFlush < 0 &&
              (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
                (this.delayedFlush = -1), this.flush();
              }));
          }
          forceFlush() {
            this.delayedFlush >= 0 &&
              (this.view.win.cancelAnimationFrame(this.delayedFlush),
              (this.delayedFlush = -1)),
              this.flush();
          }
          pendingRecords() {
            for (let e of this.observer.takeRecords()) this.queue.push(e);
            return this.queue;
          }
          processRecords() {
            let e = this.pendingRecords();
            e.length && (this.queue = []);
            let t = -1,
              n = -1,
              r = !1;
            for (let i of e) {
              let e = this.readMutation(i);
              e &&
                (e.typeOver && (r = !0),
                -1 == t
                  ? ({ from: t, to: n } = e)
                  : ((t = Math.min(e.from, t)), (n = Math.max(e.to, n))));
            }
            return { from: t, to: n, typeOver: r };
          }
          readChange() {
            let { from: e, to: t, typeOver: n } = this.processRecords(),
              r = this.selectionChanged && nI(this.dom, this.selectionRange);
            if (e < 0 && !r) return null;
            e > -1 && (this.lastChange = Date.now()),
              (this.view.inputState.lastFocusTime = 0),
              (this.selectionChanged = !1);
            let i = new iC(this.view, e, t, n);
            return (
              (this.view.docView.domChanged = {
                newSel: i.newSel ? i.newSel.main : null,
              }),
              i
            );
          }
          flush(e = !0) {
            if (this.delayedFlush >= 0 || this.delayedAndroidKey) return !1;
            e && this.readSelectionRange();
            let t = this.readChange();
            if (!t) return this.view.requestMeasure(), !1;
            let n = this.view.state,
              r = iA(this.view, t);
            return (
              this.view.state == n &&
                (t.domChanged ||
                  (t.newSel &&
                    !t.newSel.main.eq(this.view.state.selection.main))) &&
                this.view.update([]),
              r
            );
          }
          readMutation(e) {
            let t = this.view.docView.nearest(e.target);
            if (!t || t.ignoreMutation(e)) return null;
            if (
              (t.markDirty("attributes" == e.type),
              "attributes" == e.type && (t.flags |= 4),
              "childList" == e.type)
            ) {
              let n = sC(t, e.previousSibling || e.target.previousSibling, -1),
                r = sC(t, e.nextSibling || e.target.nextSibling, 1);
              return {
                from: n ? t.posAfter(n) : t.posAtStart,
                to: r ? t.posBefore(r) : t.posAtEnd,
                typeOver: !1,
              };
            }
            return "characterData" == e.type
              ? {
                  from: t.posAtStart,
                  to: t.posAtEnd,
                  typeOver: e.target.nodeValue == e.oldValue,
                }
              : null;
          }
          setWindow(e) {
            e != this.win &&
              (this.removeWindowListeners(this.win),
              (this.win = e),
              this.addWindowListeners(this.win));
          }
          addWindowListeners(e) {
            e.addEventListener("resize", this.onResize),
              this.printQuery
                ? this.printQuery.addEventListener
                  ? this.printQuery.addEventListener("change", this.onPrint)
                  : this.printQuery.addListener(this.onPrint)
                : e.addEventListener("beforeprint", this.onPrint),
              e.addEventListener("scroll", this.onScroll),
              e.document.addEventListener(
                "selectionchange",
                this.onSelectionChange,
              );
          }
          removeWindowListeners(e) {
            e.removeEventListener("scroll", this.onScroll),
              e.removeEventListener("resize", this.onResize),
              this.printQuery
                ? this.printQuery.removeEventListener
                  ? this.printQuery.removeEventListener("change", this.onPrint)
                  : this.printQuery.removeListener(this.onPrint)
                : e.removeEventListener("beforeprint", this.onPrint),
              e.document.removeEventListener(
                "selectionchange",
                this.onSelectionChange,
              );
          }
          update(e) {
            this.editContext &&
              (this.editContext.update(e),
              e.startState.facet(r3) != e.state.facet(r3) &&
                (e.view.contentDOM.editContext = e.state.facet(r3)
                  ? this.editContext.editContext
                  : null));
          }
          destroy() {
            var e, t, n;
            for (let r of (this.stop(),
            null == (e = this.intersection) || e.disconnect(),
            null == (t = this.gapIntersection) || t.disconnect(),
            null == (n = this.resizeScroll) || n.disconnect(),
            this.scrollTargets))
              r.removeEventListener("scroll", this.onScroll);
            this.removeWindowListeners(this.win),
              clearTimeout(this.parentCheck),
              clearTimeout(this.resizeTimeout),
              this.win.cancelAnimationFrame(this.delayedFlush),
              this.win.cancelAnimationFrame(this.flushingAndroidKey),
              this.editContext &&
                ((this.view.contentDOM.editContext = null),
                this.editContext.destroy());
          }
        }
        function sC(e, t, n) {
          for (; t; ) {
            let r = nK.get(t);
            if (r && r.parent == e) return r;
            let i = t.parentNode;
            t = i != e.dom ? i : n > 0 ? t.nextSibling : t.previousSibling;
          }
          return null;
        }
        function sA(e, t) {
          let n = t.startContainer,
            r = t.startOffset,
            i = t.endContainer,
            s = t.endOffset,
            o = e.docView.domAtPos(e.state.selection.main.anchor);
          return (
            nP(o.node, o.offset, i, s) && ([n, r, i, s] = [i, s, n, r]),
            { anchorNode: n, anchorOffset: r, focusNode: i, focusOffset: s }
          );
        }
        class sN {
          constructor(e) {
            (this.from = 0),
              (this.to = 0),
              (this.pendingContextChange = null),
              (this.handlers = Object.create(null)),
              (this.composing = null),
              this.resetRange(e.state);
            let t = (this.editContext = new window.EditContext({
              text: e.state.doc.sliceString(this.from, this.to),
              selectionStart: this.toContextPos(
                Math.max(
                  this.from,
                  Math.min(this.to, e.state.selection.main.anchor),
                ),
              ),
              selectionEnd: this.toContextPos(e.state.selection.main.head),
            }));
            for (let n in ((this.handlers.textupdate = (t) => {
              let n = e.state.selection.main,
                { anchor: r, head: i } = n,
                s = this.toEditorPos(t.updateRangeStart),
                o = this.toEditorPos(t.updateRangeEnd);
              e.inputState.composing >= 0 &&
                !this.composing &&
                (this.composing = {
                  contextBase: t.updateRangeStart,
                  editorBase: s,
                  drifted: !1,
                });
              let a = { from: s, to: o, insert: to.of(t.text.split("\n")) };
              if (
                (a.from == this.from && r < this.from
                  ? (a.from = r)
                  : a.to == this.to && r > this.to && (a.to = r),
                a.from == a.to && !a.insert.length)
              ) {
                let r = tN.single(
                  this.toEditorPos(t.selectionStart),
                  this.toEditorPos(t.selectionEnd),
                );
                r.main.eq(n) ||
                  e.dispatch({ selection: r, userEvent: "select" });
                return;
              }
              if (
                ((rr.mac || rr.android) &&
                  a.from == i - 1 &&
                  /^\. ?$/.test(t.text) &&
                  "off" == e.contentDOM.getAttribute("autocorrect") &&
                  (a = {
                    from: s,
                    to: o,
                    insert: to.of([t.text.replace(".", " ")]),
                  }),
                (this.pendingContextChange = a),
                !e.state.readOnly)
              ) {
                let n = this.to - this.from + (a.to - a.from + a.insert.length);
                iN(
                  e,
                  a,
                  tN.single(
                    this.toEditorPos(t.selectionStart, n),
                    this.toEditorPos(t.selectionEnd, n),
                  ),
                );
              }
              this.pendingContextChange &&
                (this.revertPending(e.state), this.setSelection(e.state));
            }),
            (this.handlers.characterboundsupdate = (n) => {
              let r = [],
                i = null;
              for (
                let t = this.toEditorPos(n.rangeStart),
                  s = this.toEditorPos(n.rangeEnd);
                t < s;
                t++
              ) {
                let n = e.coordsForChar(t);
                (i =
                  (n &&
                    new DOMRect(
                      n.left,
                      n.top,
                      n.right - n.left,
                      n.bottom - n.top,
                    )) ||
                  i ||
                  new DOMRect()),
                  r.push(i);
              }
              t.updateCharacterBounds(n.rangeStart, r);
            }),
            (this.handlers.textformatupdate = (t) => {
              let n = [];
              for (let e of t.getTextFormats()) {
                let t = e.underlineStyle,
                  r = e.underlineThickness;
                if ("None" != t && "None" != r) {
                  let i = this.toEditorPos(e.rangeStart),
                    s = this.toEditorPos(e.rangeEnd);
                  if (i < s) {
                    let e = `text-decoration: underline ${"Dashed" == t ? "dashed " : "Squiggle" == t ? "wavy " : ""}${"Thin" == r ? 1 : 2}px`;
                    n.push(rg.mark({ attributes: { style: e } }).range(i, s));
                  }
                }
              }
              e.dispatch({ effects: r2.of(rg.set(n)) });
            }),
            (this.handlers.compositionstart = () => {
              e.inputState.composing < 0 &&
                ((e.inputState.composing = 0),
                (e.inputState.compositionFirstChange = !0));
            }),
            (this.handlers.compositionend = () => {
              if (
                ((e.inputState.composing = -1),
                (e.inputState.compositionFirstChange = null),
                this.composing)
              ) {
                let { drifted: t } = this.composing;
                (this.composing = null), t && this.reset(e.state);
              }
            }),
            this.handlers))
              t.addEventListener(n, this.handlers[n]);
            this.measureReq = {
              read: (e) => {
                this.editContext.updateControlBounds(
                  e.contentDOM.getBoundingClientRect(),
                );
                let t = nA(e.root);
                t &&
                  t.rangeCount &&
                  this.editContext.updateSelectionBounds(
                    t.getRangeAt(0).getBoundingClientRect(),
                  );
              },
            };
          }
          applyEdits(e) {
            let t = 0,
              n = !1,
              r = this.pendingContextChange;
            return (
              e.changes.iterChanges((i, s, o, a, l) => {
                if (n) return;
                let c = l.length - (s - i);
                if (r && s >= r.to)
                  if (r.from == i && r.to == s && r.insert.eq(l)) {
                    (r = this.pendingContextChange = null),
                      (t += c),
                      (this.to += c);
                    return;
                  } else (r = null), this.revertPending(e.state);
                if (((i += t), (s += t) <= this.from))
                  (this.from += c), (this.to += c);
                else if (i < this.to) {
                  if (
                    i < this.from ||
                    s > this.to ||
                    this.to - this.from + l.length > 3e4
                  ) {
                    n = !0;
                    return;
                  }
                  this.editContext.updateText(
                    this.toContextPos(i),
                    this.toContextPos(s),
                    l.toString(),
                  ),
                    (this.to += c);
                }
                t += c;
              }),
              r && !n && this.revertPending(e.state),
              !n
            );
          }
          update(e) {
            let t = this.pendingContextChange,
              n = e.startState.selection.main;
            this.composing &&
            (this.composing.drifted ||
              (!e.changes.touchesRange(n.from, n.to) &&
                e.transactions.some(
                  (e) =>
                    !e.isUserEvent("input.type") &&
                    e.changes.touchesRange(this.from, this.to),
                )))
              ? ((this.composing.drifted = !0),
                (this.composing.editorBase = e.changes.mapPos(
                  this.composing.editorBase,
                )))
              : this.applyEdits(e) && this.rangeIsValid(e.state)
                ? (e.docChanged || e.selectionSet || t) &&
                  this.setSelection(e.state)
                : ((this.pendingContextChange = null), this.reset(e.state)),
              (e.geometryChanged || e.docChanged || e.selectionSet) &&
                e.view.requestMeasure(this.measureReq);
          }
          resetRange(e) {
            let { head: t } = e.selection.main;
            (this.from = Math.max(0, t - 1e4)),
              (this.to = Math.min(e.doc.length, t + 1e4));
          }
          reset(e) {
            this.resetRange(e),
              this.editContext.updateText(
                0,
                this.editContext.text.length,
                e.doc.sliceString(this.from, this.to),
              ),
              this.setSelection(e);
          }
          revertPending(e) {
            let t = this.pendingContextChange;
            (this.pendingContextChange = null),
              this.editContext.updateText(
                this.toContextPos(t.from),
                this.toContextPos(t.from + t.insert.length),
                e.doc.sliceString(t.from, t.to),
              );
          }
          setSelection(e) {
            let { main: t } = e.selection,
              n = this.toContextPos(
                Math.max(this.from, Math.min(this.to, t.anchor)),
              ),
              r = this.toContextPos(t.head);
            (this.editContext.selectionStart != n ||
              this.editContext.selectionEnd != r) &&
              this.editContext.updateSelection(n, r);
          }
          rangeIsValid(e) {
            let { head: t } = e.selection.main;
            return !(
              (this.from > 0 && t - this.from < 500) ||
              (this.to < e.doc.length && this.to - t < 500) ||
              this.to - this.from > 3e4
            );
          }
          toEditorPos(e, t = this.to - this.from) {
            e = Math.min(e, t);
            let n = this.composing;
            return n && n.drifted
              ? n.editorBase + (e - n.contextBase)
              : e + this.from;
          }
          toContextPos(e) {
            let t = this.composing;
            return t && t.drifted
              ? t.contextBase + (e - t.editorBase)
              : e - this.from;
          }
          destroy() {
            for (let e in this.handlers)
              this.editContext.removeEventListener(e, this.handlers[e]);
          }
        }
        class sI {
          get state() {
            return this.viewState.state;
          }
          get viewport() {
            return this.viewState.viewport;
          }
          get visibleRanges() {
            return this.viewState.visibleRanges;
          }
          get inView() {
            return this.viewState.inView;
          }
          get composing() {
            return !!this.inputState && this.inputState.composing > 0;
          }
          get compositionStarted() {
            return !!this.inputState && this.inputState.composing >= 0;
          }
          get root() {
            return this._root;
          }
          get win() {
            return this.dom.ownerDocument.defaultView || window;
          }
          constructor(e = {}) {
            var t;
            (this.plugins = []),
              (this.pluginMap = new Map()),
              (this.editorAttrs = {}),
              (this.contentAttrs = {}),
              (this.bidiCache = []),
              (this.destroyed = !1),
              (this.updateState = 2),
              (this.measureScheduled = -1),
              (this.measureRequests = []),
              (this.contentDOM = document.createElement("div")),
              (this.scrollDOM = document.createElement("div")),
              (this.scrollDOM.tabIndex = -1),
              (this.scrollDOM.className = "cm-scroller"),
              this.scrollDOM.appendChild(this.contentDOM),
              (this.announceDOM = document.createElement("div")),
              (this.announceDOM.className = "cm-announced"),
              this.announceDOM.setAttribute("aria-live", "polite"),
              (this.dom = document.createElement("div")),
              this.dom.appendChild(this.announceDOM),
              this.dom.appendChild(this.scrollDOM),
              e.parent && e.parent.appendChild(this.dom);
            let { dispatch: n } = e;
            for (let t of ((this.dispatchTransactions =
              e.dispatchTransactions ||
              (n && ((e) => e.forEach((e) => n(e, this)))) ||
              ((e) => this.update(e))),
            (this.dispatch = this.dispatch.bind(this)),
            (this._root =
              e.root ||
              (function (e) {
                for (; e; ) {
                  if (e && (9 == e.nodeType || (11 == e.nodeType && e.host)))
                    return e;
                  e = e.assignedSlot || e.parentNode;
                }
                return null;
              })(e.parent) ||
              document),
            (this.viewState = new su(e.state || nr.create(e))),
            e.scrollTo &&
              e.scrollTo.is(r1) &&
              (this.viewState.scrollTarget = e.scrollTo.value.clip(
                this.viewState.state,
              )),
            (this.plugins = this.state.facet(r8).map((e) => new r9(e))),
            this.plugins))
              t.update(this);
            (this.observer = new sE(this)),
              (this.inputState = new iI(this)),
              this.inputState.ensureHandlers(this.plugins),
              (this.docView = new ih(this)),
              this.mountStyles(),
              this.updateAttrs(),
              (this.updateState = 0),
              this.requestMeasure(),
              (null == (t = document.fonts) ? void 0 : t.ready) &&
                document.fonts.ready.then(() => this.requestMeasure());
          }
          dispatch(...e) {
            let t =
              1 == e.length && e[0] instanceof t8
                ? e
                : 1 == e.length && Array.isArray(e[0])
                  ? e[0]
                  : [this.state.update(...e)];
            this.dispatchTransactions(t, this);
          }
          update(e) {
            if (0 != this.updateState)
              throw Error(
                "Calls to EditorView.update are not allowed while an update is in progress",
              );
            let t = !1,
              n = !1,
              r,
              i = this.state;
            for (let t of e) {
              if (t.startState != i)
                throw RangeError(
                  "Trying to update state with a transaction that doesn't start from the previous state.",
                );
              i = t.state;
            }
            if (this.destroyed) {
              this.viewState.state = i;
              return;
            }
            let s = this.hasFocus,
              o = 0,
              a = null;
            e.some((e) => e.annotation(iJ))
              ? ((this.inputState.notifiedFocused = s), (o = 1))
              : s != this.inputState.notifiedFocused &&
                ((this.inputState.notifiedFocused = s),
                (a = i0(i, s)) || (o = 1));
            let l = this.observer.delayedAndroidKey,
              c = null;
            if (
              (l
                ? (this.observer.clearDelayedAndroidKey(),
                  (((c = this.observer.readChange()) &&
                    !this.state.doc.eq(i.doc)) ||
                    !this.state.selection.eq(i.selection)) &&
                    (c = null))
                : this.observer.clear(),
              i.facet(nr.phrases) != this.state.facet(nr.phrases))
            )
              return this.setState(i);
            (r = id.create(this, i, e)), (r.flags |= o);
            let u = this.viewState.scrollTarget;
            try {
              for (let t of ((this.updateState = 2), e)) {
                if ((u && (u = u.map(t.changes)), t.scrollIntoView)) {
                  let { main: e } = t.state.selection;
                  u = new r0(
                    e.empty ? e : tN.cursor(e.head, e.head > e.anchor ? -1 : 1),
                  );
                }
                for (let e of t.effects)
                  e.is(r1) && (u = e.value.clip(this.state));
              }
              this.viewState.update(r, u),
                (this.bidiCache = sR.update(this.bidiCache, r.changes)),
                r.empty || (this.updatePlugins(r), this.inputState.update(r)),
                (t = this.docView.update(r)),
                this.state.facet(ic) != this.styleModules && this.mountStyles(),
                (n = this.updateAttrs()),
                this.showAnnouncements(e),
                this.docView.updateSelection(
                  t,
                  e.some((e) => e.isUserEvent("select.pointer")),
                );
            } finally {
              this.updateState = 0;
            }
            if (
              (r.startState.facet(sy) != r.state.facet(sy) &&
                (this.viewState.mustMeasureContent = !0),
              (t ||
                n ||
                u ||
                this.viewState.mustEnforceCursorAssoc ||
                this.viewState.mustMeasureContent) &&
                this.requestMeasure(),
              t && this.docViewUpdate(),
              !r.empty)
            )
              for (let e of this.state.facet(rV))
                try {
                  e(r);
                } catch (e) {
                  r5(this.state, e, "update listener");
                }
            (a || c) &&
              Promise.resolve().then(() => {
                a && this.state == a.startState && this.dispatch(a),
                  c &&
                    !iA(this, c) &&
                    l.force &&
                    nH(this.contentDOM, l.key, l.keyCode);
              });
          }
          setState(e) {
            if (0 != this.updateState)
              throw Error(
                "Calls to EditorView.setState are not allowed while an update is in progress",
              );
            if (this.destroyed) {
              this.viewState.state = e;
              return;
            }
            this.updateState = 2;
            let t = this.hasFocus;
            try {
              for (let e of this.plugins) e.destroy(this);
              for (let t of ((this.viewState = new su(e)),
              (this.plugins = e.facet(r8).map((e) => new r9(e))),
              this.pluginMap.clear(),
              this.plugins))
                t.update(this);
              this.docView.destroy(),
                (this.docView = new ih(this)),
                this.inputState.ensureHandlers(this.plugins),
                this.mountStyles(),
                this.updateAttrs(),
                (this.bidiCache = []);
            } finally {
              this.updateState = 0;
            }
            t && this.focus(), this.requestMeasure();
          }
          updatePlugins(e) {
            let t = e.startState.facet(r8),
              n = e.state.facet(r8);
            if (t != n) {
              let r = [];
              for (let i of n) {
                let n = t.indexOf(i);
                if (n < 0) r.push(new r9(i));
                else {
                  let t = this.plugins[n];
                  (t.mustUpdate = e), r.push(t);
                }
              }
              for (let t of this.plugins) t.mustUpdate != e && t.destroy(this);
              (this.plugins = r), this.pluginMap.clear();
            } else for (let t of this.plugins) t.mustUpdate = e;
            for (let e = 0; e < this.plugins.length; e++)
              this.plugins[e].update(this);
            t != n && this.inputState.ensureHandlers(this.plugins);
          }
          docViewUpdate() {
            for (let e of this.plugins) {
              let t = e.value;
              if (t && t.docViewUpdate)
                try {
                  t.docViewUpdate(this);
                } catch (e) {
                  r5(this.state, e, "doc view update listener");
                }
            }
          }
          measure(e = !0) {
            if (this.destroyed) return;
            if (
              (this.measureScheduled > -1 &&
                this.win.cancelAnimationFrame(this.measureScheduled),
              this.observer.delayedAndroidKey)
            ) {
              (this.measureScheduled = -1), this.requestMeasure();
              return;
            }
            (this.measureScheduled = 0), e && this.observer.forceFlush();
            let t = null,
              n = this.scrollDOM,
              r = n.scrollTop * this.scaleY,
              { scrollAnchorPos: i, scrollAnchorHeight: s } = this.viewState;
            Math.abs(r - this.viewState.scrollTop) > 1 && (s = -1),
              (this.viewState.scrollAnchorHeight = -1);
            try {
              for (let e = 0; ; e++) {
                if (s < 0)
                  if (nV(n)) (i = -1), (s = this.viewState.heightMap.height);
                  else {
                    let e = this.viewState.scrollAnchorAt(r);
                    (i = e.from), (s = e.top);
                  }
                this.updateState = 1;
                let o = this.viewState.measure(this);
                if (
                  !o &&
                  !this.measureRequests.length &&
                  null == this.viewState.scrollTarget
                )
                  break;
                if (e > 5) {
                  console.warn(
                    this.measureRequests.length
                      ? "Measure loop restarted more than 5 times"
                      : "Viewport failed to stabilize",
                  );
                  break;
                }
                let a = [];
                4 & o ||
                  ([this.measureRequests, a] = [a, this.measureRequests]);
                let l = a.map((e) => {
                    try {
                      return e.read(this);
                    } catch (e) {
                      return r5(this.state, e), sP;
                    }
                  }),
                  c = id.create(this, this.state, []),
                  u = !1;
                (c.flags |= o),
                  t ? (t.flags |= o) : (t = c),
                  (this.updateState = 2),
                  !c.empty &&
                    (this.updatePlugins(c),
                    this.inputState.update(c),
                    this.updateAttrs(),
                    (u = this.docView.update(c)) && this.docViewUpdate());
                for (let e = 0; e < a.length; e++)
                  if (l[e] != sP)
                    try {
                      let t = a[e];
                      t.write && t.write(l[e], this);
                    } catch (e) {
                      r5(this.state, e);
                    }
                if (
                  (u && this.docView.updateSelection(!0),
                  !c.viewportChanged && 0 == this.measureRequests.length)
                ) {
                  if (this.viewState.editorHeight)
                    if (this.viewState.scrollTarget) {
                      this.docView.scrollIntoView(this.viewState.scrollTarget),
                        (this.viewState.scrollTarget = null),
                        (s = -1);
                      continue;
                    } else {
                      let e =
                        (i < 0
                          ? this.viewState.heightMap.height
                          : this.viewState.lineBlockAt(i).top) - s;
                      if (e > 1 || e < -1) {
                        (n.scrollTop = (r += e) / this.scaleY), (s = -1);
                        continue;
                      }
                    }
                  break;
                }
              }
            } finally {
              (this.updateState = 0), (this.measureScheduled = -1);
            }
            if (t && !t.empty) for (let e of this.state.facet(rV)) e(t);
          }
          get themeClasses() {
            return (
              sb +
              " " +
              (this.state.facet(sv) ? sk : sx) +
              " " +
              this.state.facet(sy)
            );
          }
          updateAttrs() {
            let e = sM(this, r7, {
                class:
                  "cm-editor" +
                  (this.hasFocus ? " cm-focused " : " ") +
                  this.themeClasses,
              }),
              t = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                writingsuggestions: "false",
                translate: "no",
                contenteditable: this.state.facet(r3) ? "true" : "false",
                class: "cm-content",
                style: `${rr.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true",
              };
            this.state.readOnly && (t["aria-readonly"] = "true"),
              sM(this, ie, t);
            let n = this.observer.ignore(() => {
              let n = rp(this.contentDOM, this.contentAttrs, t),
                r = rp(this.dom, this.editorAttrs, e);
              return n || r;
            });
            return (this.editorAttrs = e), (this.contentAttrs = t), n;
          }
          showAnnouncements(e) {
            let t = !0;
            for (let n of e)
              for (let e of n.effects)
                e.is(sI.announce) &&
                  (t && (this.announceDOM.textContent = ""),
                  (t = !1),
                  (this.announceDOM.appendChild(
                    document.createElement("div"),
                  ).textContent = e.value));
          }
          mountStyles() {
            this.styleModules = this.state.facet(ic);
            let e = this.state.facet(sI.cspNonce);
            nT.mount(
              this.root,
              this.styleModules.concat(sO).reverse(),
              e ? { nonce: e } : void 0,
            );
          }
          readMeasured() {
            if (2 == this.updateState)
              throw Error(
                "Reading the editor layout isn't allowed during an update",
              );
            0 == this.updateState &&
              this.measureScheduled > -1 &&
              this.measure(!1);
          }
          requestMeasure(e) {
            if (
              (this.measureScheduled < 0 &&
                (this.measureScheduled = this.win.requestAnimationFrame(() =>
                  this.measure(),
                )),
              e) &&
              !(this.measureRequests.indexOf(e) > -1)
            ) {
              if (null != e.key) {
                for (let t = 0; t < this.measureRequests.length; t++)
                  if (this.measureRequests[t].key === e.key) {
                    this.measureRequests[t] = e;
                    return;
                  }
              }
              this.measureRequests.push(e);
            }
          }
          plugin(e) {
            let t = this.pluginMap.get(e);
            return (
              (void 0 === t || (t && t.plugin != e)) &&
                this.pluginMap.set(
                  e,
                  (t = this.plugins.find((t) => t.plugin == e) || null),
                ),
              t && t.update(this).value
            );
          }
          get documentTop() {
            return (
              this.contentDOM.getBoundingClientRect().top +
              this.viewState.paddingTop
            );
          }
          get documentPadding() {
            return {
              top: this.viewState.paddingTop,
              bottom: this.viewState.paddingBottom,
            };
          }
          get scaleX() {
            return this.viewState.scaleX;
          }
          get scaleY() {
            return this.viewState.scaleY;
          }
          elementAtHeight(e) {
            return this.readMeasured(), this.viewState.elementAtHeight(e);
          }
          lineBlockAtHeight(e) {
            return this.readMeasured(), this.viewState.lineBlockAtHeight(e);
          }
          get viewportLineBlocks() {
            return this.viewState.viewportLines;
          }
          lineBlockAt(e) {
            return this.viewState.lineBlockAt(e);
          }
          get contentHeight() {
            return this.viewState.contentHeight;
          }
          moveByChar(e, t, n) {
            return iT(this, e, i_(this, e, t, n));
          }
          moveByGroup(e, t) {
            return iT(
              this,
              e,
              i_(this, e, t, (t) => {
                var n;
                let r, i;
                return (
                  (n = e.head),
                  (i = (r = this.state.charCategorizer(n))(t)),
                  (e) => {
                    let t = r(e);
                    return i == nt.Space && (i = t), i == t;
                  }
                );
              }),
            );
          }
          visualLineSide(e, t) {
            let n = this.bidiSpans(e),
              r = this.textDirectionAt(e.from),
              i = n[t ? n.length - 1 : 0];
            return tN.cursor(i.side(t, r) + e.from, i.forward(!t, r) ? 1 : -1);
          }
          moveToLineBoundary(e, t, n = !0) {
            return (function (e, t, n, r) {
              let i = iw(e, t.head, t.assoc || -1),
                s =
                  r &&
                  i.type == rm.Text &&
                  (e.lineWrapping || i.widgetLineBreaks)
                    ? e.coordsAtPos(
                        t.assoc < 0 && t.head > i.from ? t.head - 1 : t.head,
                      )
                    : null;
              if (s) {
                let t = e.dom.getBoundingClientRect(),
                  r = e.textDirectionAt(i.from),
                  o = e.posAtCoords({
                    x: n == (r == rC.LTR) ? t.right - 1 : t.left + 1,
                    y: (s.top + s.bottom) / 2,
                  });
                if (null != o) return tN.cursor(o, n ? -1 : 1);
              }
              return tN.cursor(n ? i.to : i.from, n ? -1 : 1);
            })(this, e, t, n);
          }
          moveVertically(e, t, n) {
            return iT(
              this,
              e,
              (function (e, t, n, r) {
                let i = t.head,
                  s = n ? 1 : -1;
                if (i == (n ? e.state.doc.length : 0))
                  return tN.cursor(i, t.assoc);
                let o = t.goalColumn,
                  a,
                  l = e.contentDOM.getBoundingClientRect(),
                  c = e.coordsAtPos(i, t.assoc || -1),
                  u = e.documentTop;
                if (c)
                  null == o && (o = c.left - l.left),
                    (a = s < 0 ? c.top : c.bottom);
                else {
                  let t = e.viewState.lineBlockAt(i);
                  null == o &&
                    (o = Math.min(
                      l.right - l.left,
                      e.defaultCharacterWidth * (i - t.from),
                    )),
                    (a = (s < 0 ? t.top : t.bottom) + u);
                }
                let d = l.left + o,
                  h = null != r ? r : e.viewState.heightOracle.textHeight >> 1;
                for (let t = 0; ; t += 10) {
                  let n = a + (h + t) * s,
                    r = ix(e, { x: d, y: n }, !1, s);
                  if (n < l.top || n > l.bottom || (s < 0 ? r < i : r > i)) {
                    let t = e.docView.coordsForChar(r),
                      i = !t || n < t.top ? -1 : 1;
                    return tN.cursor(r, i, void 0, o);
                  }
                }
              })(this, e, t, n),
            );
          }
          domAtPos(e) {
            return this.docView.domAtPos(e);
          }
          posAtDOM(e, t = 0) {
            return this.docView.posFromDOM(e, t);
          }
          posAtCoords(e, t = !0) {
            return this.readMeasured(), ix(this, e, t);
          }
          coordsAtPos(e, t = 1) {
            this.readMeasured();
            let n = this.docView.coordsAt(e, t);
            if (!n || n.left == n.right) return n;
            let r = this.state.doc.lineAt(e),
              i = this.bidiSpans(r);
            return nF(
              n,
              (i[rF.find(i, e - r.from, -1, t)].dir == rC.LTR) == t > 0,
            );
          }
          coordsForChar(e) {
            return this.readMeasured(), this.docView.coordsForChar(e);
          }
          get defaultCharacterWidth() {
            return this.viewState.heightOracle.charWidth;
          }
          get defaultLineHeight() {
            return this.viewState.heightOracle.lineHeight;
          }
          get textDirection() {
            return this.viewState.defaultTextDirection;
          }
          textDirectionAt(e) {
            return !this.state.facet(rK) ||
              e < this.viewport.from ||
              e > this.viewport.to
              ? this.textDirection
              : (this.readMeasured(), this.docView.textDirectionAt(e));
          }
          get lineWrapping() {
            return this.viewState.heightOracle.lineWrapping;
          }
          bidiSpans(e) {
            if (e.length > sD) return rz(e.length);
            let t = this.textDirectionAt(e.from),
              n;
            for (let r of this.bidiCache)
              if (
                r.from == e.from &&
                r.dir == t &&
                (r.fresh ||
                  (function e(t, n) {
                    if (t.length != n.length) return !1;
                    for (let r = 0; r < t.length; r++) {
                      let i = t[r],
                        s = n[r];
                      if (
                        i.from != s.from ||
                        i.to != s.to ||
                        i.direction != s.direction ||
                        !e(i.inner, s.inner)
                      )
                        return !1;
                    }
                    return !0;
                  })(r.isolates, (n = io(this, e))))
              )
                return r.order;
            n || (n = io(this, e));
            let r = (function (e, t, n) {
              if (!e) return [new rF(0, 0, +(t == rN))];
              if (t == rA && !n.length && !rj.test(e)) return rz(e.length);
              if (n.length) for (; e.length > rB.length; ) rB[rB.length] = 256;
              let r = [],
                i = +(t != rA);
              return (
                (function e(t, n, r, i, s, o, a) {
                  let l = n % 2 ? 2 : 1;
                  !(function (e, t, n, r, i) {
                    for (let s = 0; s <= r.length; s++) {
                      let o = s ? r[s - 1].to : t,
                        a = s < r.length ? r[s].from : n,
                        l = s ? 256 : i;
                      for (let t = o, n = l, r = l; t < a; t++) {
                        let i = rL(e.charCodeAt(t));
                        512 == i ? (i = n) : 8 == i && 4 == r && (i = 16),
                          (rB[t] = 4 == i ? 2 : i),
                          7 & i && (r = i),
                          (n = i);
                      }
                      for (let e = o, t = l, r = l; e < a; e++) {
                        let i = rB[e];
                        if (128 == i)
                          e < a - 1 && t == rB[e + 1] && 24 & t
                            ? (i = rB[e] = t)
                            : (rB[e] = 256);
                        else if (64 == i) {
                          let i = e + 1;
                          for (; i < a && 64 == rB[i]; ) i++;
                          let s =
                            (e && 8 == t) || (i < n && 8 == rB[i])
                              ? 1 == r
                                ? 1
                                : 8
                              : 256;
                          for (let t = e; t < i; t++) rB[t] = s;
                          e = i - 1;
                        } else 8 == i && 1 == r && (rB[e] = 1);
                        (t = i), 7 & i && (r = i);
                      }
                    }
                  })(t, s, o, i, l),
                    (function (e, t, n, r, i) {
                      let s = 1 == i ? 2 : 1;
                      for (let o = 0, a = 0, l = 0; o <= r.length; o++) {
                        let c = o ? r[o - 1].to : t,
                          u = o < r.length ? r[o].from : n;
                        for (let t = c, n, r, o; t < u; t++)
                          if ((r = rR[(n = e.charCodeAt(t))]))
                            if (r < 0) {
                              for (let e = a - 3; e >= 0; e -= 3)
                                if (rM[e + 1] == -r) {
                                  let n = rM[e + 2],
                                    r = 2 & n ? i : 4 & n ? (1 & n ? s : i) : 0;
                                  r && (rB[t] = rB[rM[e]] = r), (a = e);
                                  break;
                                }
                            } else if (189 == rM.length) break;
                            else (rM[a++] = t), (rM[a++] = n), (rM[a++] = l);
                          else if (2 == (o = rB[t]) || 1 == o) {
                            let e = o == i;
                            l = +!e;
                            for (let t = a - 3; t >= 0; t -= 3) {
                              let n = rM[t + 2];
                              if (2 & n) break;
                              if (e) rM[t + 2] |= 2;
                              else {
                                if (4 & n) break;
                                rM[t + 2] |= 4;
                              }
                            }
                          }
                      }
                    })(t, s, o, i, l),
                    (function (e, t, n, r) {
                      for (let i = 0, s = r; i <= n.length; i++) {
                        let o = i ? n[i - 1].to : e,
                          a = i < n.length ? n[i].from : t;
                        for (let l = o; l < a; ) {
                          let o = rB[l];
                          if (256 == o) {
                            let o = l + 1;
                            for (;;)
                              if (o == a) {
                                if (i == n.length) break;
                                (o = n[i++].to),
                                  (a = i < n.length ? n[i].from : t);
                              } else if (256 == rB[o]) o++;
                              else break;
                            let c = 1 == s,
                              u =
                                c == ((o < t ? rB[o] : r) == 1)
                                  ? c
                                    ? 1
                                    : 2
                                  : r;
                            for (
                              let t = o, r = i, s = r ? n[r - 1].to : e;
                              t > l;

                            )
                              t == s &&
                                ((t = n[--r].from), (s = r ? n[r - 1].to : e)),
                                (rB[--t] = u);
                            l = o;
                          } else (s = o), l++;
                        }
                      }
                    })(s, o, i, l),
                    (function t(n, r, i, s, o, a, l) {
                      let c = s % 2 ? 2 : 1;
                      if (s % 2 == o % 2)
                        for (let u = r, d = 0; u < i; ) {
                          let r = !0,
                            h = !1;
                          if (d == a.length || u < a[d].from) {
                            let e = rB[u];
                            e != c && ((r = !1), (h = 16 == e));
                          }
                          let p = r || 1 != c ? null : [],
                            f = r ? s : s + 1,
                            m = u;
                          l: for (;;)
                            if (d < a.length && m == a[d].from) {
                              if (h) break;
                              let t = a[d];
                              if (!r)
                                for (let e = t.to, n = d + 1; ; ) {
                                  if (e == i) break l;
                                  if (n < a.length && a[n].from == e)
                                    e = a[n++].to;
                                  else if (rB[e] == c) break l;
                                  else break;
                                }
                              d++,
                                p
                                  ? p.push(t)
                                  : (t.from > u && l.push(new rF(u, t.from, f)),
                                    e(
                                      n,
                                      (t.direction == rA) != !(f % 2)
                                        ? s + 1
                                        : s,
                                      o,
                                      t.inner,
                                      t.from,
                                      t.to,
                                      l,
                                    ),
                                    (u = t.to)),
                                (m = t.to);
                            } else if (m == i || (r ? rB[m] != c : rB[m] == c))
                              break;
                            else m++;
                          p
                            ? t(n, u, m, s + 1, o, p, l)
                            : u < m && l.push(new rF(u, m, f)),
                            (u = m);
                        }
                      else
                        for (let u = i, d = a.length; u > r; ) {
                          let i = !0,
                            h = !1;
                          if (!d || u > a[d - 1].to) {
                            let e = rB[u - 1];
                            e != c && ((i = !1), (h = 16 == e));
                          }
                          let p = i || 1 != c ? null : [],
                            f = i ? s : s + 1,
                            m = u;
                          l: for (;;)
                            if (d && m == a[d - 1].to) {
                              if (h) break;
                              let t = a[--d];
                              if (!i)
                                for (let e = t.from, n = d; ; ) {
                                  if (e == r) break l;
                                  if (n && a[n - 1].to == e) e = a[--n].from;
                                  else if (rB[e - 1] == c) break l;
                                  else break;
                                }
                              p
                                ? p.push(t)
                                : (t.to < u && l.push(new rF(t.to, u, f)),
                                  e(
                                    n,
                                    (t.direction == rA) != !(f % 2) ? s + 1 : s,
                                    o,
                                    t.inner,
                                    t.from,
                                    t.to,
                                    l,
                                  ),
                                  (u = t.from)),
                                (m = t.from);
                            } else if (
                              m == r ||
                              (i ? rB[m - 1] != c : rB[m - 1] == c)
                            )
                              break;
                            else m--;
                          p
                            ? t(n, m, u, s + 1, o, p, l)
                            : m < u && l.push(new rF(m, u, f)),
                            (u = m);
                        }
                    })(t, s, o, n, r, i, a);
                })(e, i, i, n, 0, e.length, r),
                r
              );
            })(e.text, t, n);
            return this.bidiCache.push(new sR(e.from, e.to, t, n, !0, r)), r;
          }
          get hasFocus() {
            var e;
            return (
              (this.dom.ownerDocument.hasFocus() ||
                (rr.safari &&
                  (null == (e = this.inputState) ? void 0 : e.lastContextMenu) >
                    Date.now() - 3e4)) &&
              this.root.activeElement == this.contentDOM
            );
          }
          focus() {
            this.observer.ignore(() => {
              nq(this.contentDOM), this.docView.updateSelection();
            });
          }
          setRoot(e) {
            this._root != e &&
              ((this._root = e),
              this.observer.setWindow(
                (9 == e.nodeType ? e : e.ownerDocument).defaultView || window,
              ),
              this.mountStyles());
          }
          destroy() {
            for (let e of (this.root.activeElement == this.contentDOM &&
              this.contentDOM.blur(),
            this.plugins))
              e.destroy(this);
            (this.plugins = []),
              this.inputState.destroy(),
              this.docView.destroy(),
              this.dom.remove(),
              this.observer.destroy(),
              this.measureScheduled > -1 &&
                this.win.cancelAnimationFrame(this.measureScheduled),
              (this.destroyed = !0);
          }
          static scrollIntoView(e, t = {}) {
            return r1.of(
              new r0(
                "number" == typeof e ? tN.cursor(e) : e,
                t.y,
                t.x,
                t.yMargin,
                t.xMargin,
              ),
            );
          }
          scrollSnapshot() {
            let { scrollTop: e, scrollLeft: t } = this.scrollDOM,
              n = this.viewState.scrollAnchorAt(e);
            return r1.of(
              new r0(tN.cursor(n.from), "start", "start", n.top - e, t, !0),
            );
          }
          setTabFocusMode(e) {
            null == e
              ? (this.inputState.tabFocusMode =
                  this.inputState.tabFocusMode < 0 ? 0 : -1)
              : "boolean" == typeof e
                ? (this.inputState.tabFocusMode = e ? 0 : -1)
                : 0 != this.inputState.tabFocusMode &&
                  (this.inputState.tabFocusMode = Date.now() + e);
          }
          static domEventHandlers(e) {
            return r6.define(() => ({}), { eventHandlers: e });
          }
          static domEventObservers(e) {
            return r6.define(() => ({}), { eventObservers: e });
          }
          static theme(e, t) {
            let n = nT.newName(),
              r = [sy.of(n), ic.of(s_(`.${n}`, e))];
            return t && t.dark && r.push(sv.of(!0)), r;
          }
          static baseTheme(e) {
            return tq.lowest(ic.of(s_("." + sb, e, sw)));
          }
          static findFromDOM(e) {
            var t;
            let n = e.querySelector(".cm-content"),
              r = (n && nK.get(n)) || nK.get(e);
            return (
              (null == (t = null == r ? void 0 : r.rootView)
                ? void 0
                : t.view) || null
            );
          }
        }
        (sI.styleModule = ic),
          (sI.inputHandler = rW),
          (sI.clipboardInputFilter = rG),
          (sI.clipboardOutputFilter = rY),
          (sI.scrollHandler = rJ),
          (sI.focusChangeEffect = rZ),
          (sI.perLineTextDirection = rK),
          (sI.exceptionSink = rQ),
          (sI.updateListener = rV),
          (sI.editable = r3),
          (sI.mouseSelectionStyle = rH),
          (sI.dragMovesSelection = rU),
          (sI.clickAddsSelectionRange = rq),
          (sI.decorations = it),
          (sI.outerDecorations = ir),
          (sI.atomicRanges = ii),
          (sI.bidiIsolatedRanges = is),
          (sI.scrollMargins = ia),
          (sI.darkTheme = sv),
          (sI.cspNonce = tP.define({ combine: (e) => (e.length ? e[0] : "") })),
          (sI.contentAttributes = ie),
          (sI.editorAttributes = r7),
          (sI.lineWrapping = sI.contentAttributes.of({
            class: "cm-lineWrapping",
          })),
          (sI.announce = t4.define());
        let sD = 4096,
          sP = {};
        class sR {
          constructor(e, t, n, r, i, s) {
            (this.from = e),
              (this.to = t),
              (this.dir = n),
              (this.isolates = r),
              (this.fresh = i),
              (this.order = s);
          }
          static update(e, t) {
            if (t.empty && !e.some((e) => e.fresh)) return e;
            let n = [],
              r = e.length ? e[e.length - 1].dir : rC.LTR;
            for (let i = Math.max(0, e.length - 10); i < e.length; i++) {
              let s = e[i];
              s.dir != r ||
                t.touchesRange(s.from, s.to) ||
                n.push(
                  new sR(
                    t.mapPos(s.from, 1),
                    t.mapPos(s.to, -1),
                    s.dir,
                    s.isolates,
                    !1,
                    s.order,
                  ),
                );
            }
            return n;
          }
        }
        function sM(e, t, n) {
          for (let r = e.state.facet(t), i = r.length - 1; i >= 0; i--) {
            let t = r[i],
              s = "function" == typeof t ? t(e) : t;
            s && ru(s, n);
          }
          return n;
        }
        let sL = rr.mac
          ? "mac"
          : rr.windows
            ? "win"
            : rr.linux
              ? "linux"
              : "key";
        function sj(e, t, n) {
          return (
            t.altKey && (e = "Alt-" + e),
            t.ctrlKey && (e = "Ctrl-" + e),
            t.metaKey && (e = "Meta-" + e),
            !1 !== n && t.shiftKey && (e = "Shift-" + e),
            e
          );
        }
        let sF = tq.default(
            sI.domEventHandlers({
              keydown: (e, t) => sH(s$(t.state), e, t, "editor"),
            }),
          ),
          sB = tP.define({ enables: sF }),
          sz = new WeakMap();
        function s$(e) {
          let t = e.facet(sB),
            n = sz.get(t);
          return (
            n ||
              sz.set(
                t,
                (n = (function (e, t = sL) {
                  let n = Object.create(null),
                    r = Object.create(null),
                    i = (e, t) => {
                      let n = r[e];
                      if (null == n) r[e] = t;
                      else if (n != t)
                        throw Error(
                          "Key binding " +
                            e +
                            " is used both as a regular binding and as a multi-stroke prefix",
                        );
                    },
                    s = (e, r, s, o, a) => {
                      var l, c;
                      let u = n[e] || (n[e] = Object.create(null)),
                        d = r.split(/ (?!$)/).map((e) =>
                          (function (e, t) {
                            let n,
                              r,
                              i,
                              s,
                              o = e.split(/-(?!$)/),
                              a = o[o.length - 1];
                            "Space" == a && (a = " ");
                            for (let e = 0; e < o.length - 1; ++e) {
                              let a = o[e];
                              if (/^(cmd|meta|m)$/i.test(a)) s = !0;
                              else if (/^a(lt)?$/i.test(a)) n = !0;
                              else if (/^(c|ctrl|control)$/i.test(a)) r = !0;
                              else if (/^s(hift)?$/i.test(a)) i = !0;
                              else if (/^mod$/i.test(a))
                                "mac" == t ? (s = !0) : (r = !0);
                              else
                                throw Error("Unrecognized modifier name: " + a);
                            }
                            return (
                              n && (a = "Alt-" + a),
                              r && (a = "Ctrl-" + a),
                              s && (a = "Meta-" + a),
                              i && (a = "Shift-" + a),
                              a
                            );
                          })(e, t),
                        );
                      for (let t = 1; t < d.length; t++) {
                        let n = d.slice(0, t).join(" ");
                        i(n, !0),
                          u[n] ||
                            (u[n] = {
                              preventDefault: !0,
                              stopPropagation: !1,
                              run: [
                                (t) => {
                                  let r = (sq = {
                                    view: t,
                                    prefix: n,
                                    scope: e,
                                  });
                                  return (
                                    setTimeout(() => {
                                      sq == r && (sq = null);
                                    }, 4e3),
                                    !0
                                  );
                                },
                              ],
                            });
                      }
                      let h = d.join(" ");
                      i(h, !1);
                      let p =
                        u[h] ||
                        (u[h] = {
                          preventDefault: !1,
                          stopPropagation: !1,
                          run:
                            (null == (c = null == (l = u._any) ? void 0 : l.run)
                              ? void 0
                              : c.slice()) || [],
                        });
                      s && p.run.push(s),
                        o && (p.preventDefault = !0),
                        a && (p.stopPropagation = !0);
                    };
                  for (let r of e) {
                    let e = r.scope ? r.scope.split(" ") : ["editor"];
                    if (r.any)
                      for (let t of e) {
                        let e = n[t] || (n[t] = Object.create(null));
                        e._any ||
                          (e._any = {
                            preventDefault: !1,
                            stopPropagation: !1,
                            run: [],
                          });
                        let { any: i } = r;
                        for (let t in e) e[t].run.push((e) => i(e, sU));
                      }
                    let i = r[t] || r.key;
                    if (i)
                      for (let t of e)
                        s(t, i, r.run, r.preventDefault, r.stopPropagation),
                          r.shift &&
                            s(
                              t,
                              "Shift-" + i,
                              r.shift,
                              r.preventDefault,
                              r.stopPropagation,
                            );
                  }
                  return n;
                })(t.reduce((e, t) => e.concat(t), []))),
              ),
            n
          );
        }
        let sq = null,
          sU = null;
        function sH(e, t, n, r) {
          sU = t;
          let i = (0, nC.xT)(t),
            s = tv(tg(i, 0)) == i.length && " " != i,
            o = "",
            a = !1,
            l = !1,
            c = !1;
          sq &&
            sq.view == n &&
            sq.scope == r &&
            ((o = sq.prefix + " "),
            0 > iM.indexOf(t.keyCode) && ((l = !0), (sq = null)));
          let u = new Set(),
            d = (e) => {
              if (e) {
                for (let t of e.run)
                  if (!u.has(t) && (u.add(t), t(n)))
                    return e.stopPropagation && (c = !0), !0;
                e.preventDefault && (e.stopPropagation && (c = !0), (l = !0));
              }
              return !1;
            },
            h = e[r],
            p,
            f;
          return (
            h &&
              (d(h[o + sj(i, t, !s)])
                ? (a = !0)
                : s &&
                    (t.altKey || t.metaKey || t.ctrlKey) &&
                    !(rr.windows && t.ctrlKey && t.altKey) &&
                    (p = nC.E3[t.keyCode]) &&
                    p != i
                  ? d(h[o + sj(p, t, !0)])
                    ? (a = !0)
                    : t.shiftKey &&
                      (f = nC.BN[t.keyCode]) != i &&
                      f != p &&
                      d(h[o + sj(f, t, !1)]) &&
                      (a = !0)
                  : s && t.shiftKey && d(h[o + sj(i, t, !0)]) && (a = !0),
              !a && d(h._any) && (a = !0)),
            l && (a = !0),
            a && c && t.stopPropagation(),
            (sU = null),
            a
          );
        }
        class sQ {
          constructor(e, t, n, r, i) {
            (this.className = e),
              (this.left = t),
              (this.top = n),
              (this.width = r),
              (this.height = i);
          }
          draw() {
            let e = document.createElement("div");
            return (e.className = this.className), this.adjust(e), e;
          }
          update(e, t) {
            return t.className == this.className && (this.adjust(e), !0);
          }
          adjust(e) {
            (e.style.left = this.left + "px"),
              (e.style.top = this.top + "px"),
              null != this.width && (e.style.width = this.width + "px"),
              (e.style.height = this.height + "px");
          }
          eq(e) {
            return (
              this.left == e.left &&
              this.top == e.top &&
              this.width == e.width &&
              this.height == e.height &&
              this.className == e.className
            );
          }
          static forRange(e, t, n) {
            if (!n.empty)
              return (function (e, t, n) {
                if (n.to <= e.viewport.from || n.from >= e.viewport.to)
                  return [];
                let r = Math.max(n.from, e.viewport.from),
                  i = Math.min(n.to, e.viewport.to),
                  s = e.textDirection == rC.LTR,
                  o = e.contentDOM,
                  a = o.getBoundingClientRect(),
                  l = sV(e),
                  c = o.querySelector(".cm-line"),
                  u = c && window.getComputedStyle(c),
                  d =
                    a.left +
                    (u
                      ? parseInt(u.paddingLeft) +
                        Math.min(0, parseInt(u.textIndent))
                      : 0),
                  h = a.right - (u ? parseInt(u.paddingRight) : 0),
                  p = iw(e, r, 1),
                  f = iw(e, i, -1),
                  m = p.type == rm.Text ? p : null,
                  g = f.type == rm.Text ? f : null;
                if (
                  (m &&
                    (e.lineWrapping || p.widgetLineBreaks) &&
                    (m = sW(e, r, 1, m)),
                  g &&
                    (e.lineWrapping || f.widgetLineBreaks) &&
                    (g = sW(e, i, -1, g)),
                  m && g && m.from == g.from && m.to == g.to)
                )
                  return v(b(n.from, n.to, m));
                {
                  let t = m ? b(n.from, null, m) : x(p, !1),
                    r = g ? b(null, n.to, g) : x(f, !0),
                    i = [];
                  return (
                    (m || p).to < (g || f).from - (m && g ? 1 : 0) ||
                    (p.widgetLineBreaks > 1 &&
                      t.bottom + e.defaultLineHeight / 2 < r.top)
                      ? i.push(y(d, t.bottom, h, r.top))
                      : t.bottom < r.top &&
                        e.elementAtHeight((t.bottom + r.top) / 2).type ==
                          rm.Text &&
                        (t.bottom = r.top = (t.bottom + r.top) / 2),
                    v(t).concat(i).concat(v(r))
                  );
                }
                function y(e, n, r, i) {
                  return new sQ(t, e - l.left, n - l.top, r - e, i - n);
                }
                function v({ top: e, bottom: t, horizontal: n }) {
                  let r = [];
                  for (let i = 0; i < n.length; i += 2)
                    r.push(y(n[i], e, n[i + 1], t));
                  return r;
                }
                function b(t, n, r) {
                  let i = 1e9,
                    o = -1e9,
                    a = [];
                  function l(t, n, l, c, u) {
                    let p = e.coordsAtPos(t, t == r.to ? -2 : 2),
                      f = e.coordsAtPos(l, l == r.from ? 2 : -2);
                    p &&
                      f &&
                      ((i = Math.min(p.top, f.top, i)),
                      (o = Math.max(p.bottom, f.bottom, o)),
                      u == rC.LTR
                        ? a.push(s && n ? d : p.left, s && c ? h : f.right)
                        : a.push(!s && c ? d : f.left, !s && n ? h : p.right));
                  }
                  let c = null != t ? t : r.from,
                    u = null != n ? n : r.to;
                  for (let r of e.visibleRanges)
                    if (r.to > c && r.from < u)
                      for (
                        let i = Math.max(r.from, c), s = Math.min(r.to, u);
                        ;

                      ) {
                        let r = e.state.doc.lineAt(i);
                        for (let o of e.bidiSpans(r)) {
                          let e = o.from + r.from,
                            a = o.to + r.from;
                          if (e >= s) break;
                          a > i &&
                            l(
                              Math.max(e, i),
                              null == t && e <= c,
                              Math.min(a, s),
                              null == n && a >= u,
                              o.dir,
                            );
                        }
                        if ((i = r.to + 1) >= s) break;
                      }
                  return (
                    0 == a.length &&
                      l(c, null == t, u, null == n, e.textDirection),
                    { top: i, bottom: o, horizontal: a }
                  );
                }
                function x(e, t) {
                  let n = a.top + (t ? e.top : e.bottom);
                  return { top: n, bottom: n, horizontal: [] };
                }
              })(e, t, n);
            {
              let r = e.coordsAtPos(n.head, n.assoc || 1);
              if (!r) return [];
              let i = sV(e);
              return [
                new sQ(
                  t,
                  r.left - i.left,
                  r.top - i.top,
                  null,
                  r.bottom - r.top,
                ),
              ];
            }
          }
        }
        function sV(e) {
          let t = e.scrollDOM.getBoundingClientRect();
          return {
            left:
              (e.textDirection == rC.LTR
                ? t.left
                : t.right - e.scrollDOM.clientWidth * e.scaleX) -
              e.scrollDOM.scrollLeft * e.scaleX,
            top: t.top - e.scrollDOM.scrollTop * e.scaleY,
          };
        }
        function sW(e, t, n, r) {
          let i = e.coordsAtPos(t, 2 * n);
          if (!i) return r;
          let s = e.dom.getBoundingClientRect(),
            o = (i.top + i.bottom) / 2,
            a = e.posAtCoords({ x: s.left + 1, y: o }),
            l = e.posAtCoords({ x: s.right - 1, y: o });
          return null == a || null == l
            ? r
            : {
                from: Math.max(r.from, Math.min(a, l)),
                to: Math.min(r.to, Math.max(a, l)),
              };
        }
        class sZ {
          constructor(e, t) {
            (this.view = e),
              (this.layer = t),
              (this.drawn = []),
              (this.scaleX = 1),
              (this.scaleY = 1),
              (this.measureReq = {
                read: this.measure.bind(this),
                write: this.draw.bind(this),
              }),
              (this.dom = e.scrollDOM.appendChild(
                document.createElement("div"),
              )),
              this.dom.classList.add("cm-layer"),
              t.above && this.dom.classList.add("cm-layer-above"),
              t.class && this.dom.classList.add(t.class),
              this.scale(),
              this.dom.setAttribute("aria-hidden", "true"),
              this.setOrder(e.state),
              e.requestMeasure(this.measureReq),
              t.mount && t.mount(this.dom, e);
          }
          update(e) {
            e.startState.facet(sG) != e.state.facet(sG) &&
              this.setOrder(e.state),
              (this.layer.update(e, this.dom) || e.geometryChanged) &&
                (this.scale(), e.view.requestMeasure(this.measureReq));
          }
          docViewUpdate(e) {
            !1 !== this.layer.updateOnDocViewUpdate &&
              e.requestMeasure(this.measureReq);
          }
          setOrder(e) {
            let t = 0,
              n = e.facet(sG);
            for (; t < n.length && n[t] != this.layer; ) t++;
            this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - t);
          }
          measure() {
            return this.layer.markers(this.view);
          }
          scale() {
            let { scaleX: e, scaleY: t } = this.view;
            (e != this.scaleX || t != this.scaleY) &&
              ((this.scaleX = e),
              (this.scaleY = t),
              (this.dom.style.transform = `scale(${1 / e}, ${1 / t})`));
          }
          draw(e) {
            if (
              e.length != this.drawn.length ||
              e.some((e, t) => {
                var n;
                return (
                  (n = this.drawn[t]),
                  !(e.constructor == n.constructor && e.eq(n))
                );
              })
            ) {
              let t = this.dom.firstChild,
                n = 0;
              for (let r of e)
                r.update &&
                t &&
                r.constructor &&
                this.drawn[n].constructor &&
                r.update(t, this.drawn[n])
                  ? ((t = t.nextSibling), n++)
                  : this.dom.insertBefore(r.draw(), t);
              for (; t; ) {
                let e = t.nextSibling;
                t.remove(), (t = e);
              }
              this.drawn = e;
            }
          }
          destroy() {
            this.layer.destroy && this.layer.destroy(this.dom, this.view),
              this.dom.remove();
          }
        }
        let sG = tP.define();
        function sY(e) {
          return [r6.define((t) => new sZ(t, e)), sG.of(e)];
        }
        let sK = tP.define({
          combine: (e) =>
            ni(
              e,
              { cursorBlinkRate: 1200, drawRangeCursor: !0 },
              {
                cursorBlinkRate: (e, t) => Math.min(e, t),
                drawRangeCursor: (e, t) => e || t,
              },
            ),
        });
        function sX(e) {
          return e.startState.facet(sK) != e.state.facet(sK);
        }
        function sJ(e, t) {
          t.style.animationDuration = e.facet(sK).cursorBlinkRate + "ms";
        }
        let s0 = t4.define({ map: (e, t) => (null == e ? null : t.mapPos(e)) }),
          s1 = tB.define({
            create: () => null,
            update: (e, t) => (
              null != e && (e = t.changes.mapPos(e)),
              t.effects.reduce((e, t) => (t.is(s0) ? t.value : e), e)
            ),
          });
        function s2(e, t, n, r, i) {
          t.lastIndex = 0;
          for (
            let s = e.iterRange(n, r), o = n, a;
            !s.next().done;
            o += s.value.length
          )
            if (!s.lineBreak) for (; (a = t.exec(s.value)); ) i(o + a.index, a);
        }
        class s5 {
          constructor(e) {
            let {
              regexp: t,
              decoration: n,
              decorate: r,
              boundary: i,
              maxLength: s = 1e3,
            } = e;
            if (!t.global)
              throw RangeError(
                "The regular expression given to MatchDecorator should have its 'g' flag set",
              );
            if (((this.regexp = t), r))
              this.addMatch = (e, t, n, i) => r(i, n, n + e[0].length, e, t);
            else if ("function" == typeof n)
              this.addMatch = (e, t, r, i) => {
                let s = n(e, t, r);
                s && i(r, r + e[0].length, s);
              };
            else if (n)
              this.addMatch = (e, t, r, i) => i(r, r + e[0].length, n);
            else
              throw RangeError(
                "Either 'decorate' or 'decoration' should be provided to MatchDecorator",
              );
            (this.boundary = i), (this.maxLength = s);
          }
          createDeco(e) {
            let t = new nu(),
              n = t.add.bind(t);
            for (let { from: t, to: r } of (function (e, t) {
              let n = e.visibleRanges;
              if (
                1 == n.length &&
                n[0].from == e.viewport.from &&
                n[0].to == e.viewport.to
              )
                return n;
              let r = [];
              for (let { from: i, to: s } of n)
                (i = Math.max(e.state.doc.lineAt(i).from, i - t)),
                  (s = Math.min(e.state.doc.lineAt(s).to, s + t)),
                  r.length && r[r.length - 1].to >= i
                    ? (r[r.length - 1].to = s)
                    : r.push({ from: i, to: s });
              return r;
            })(e, this.maxLength))
              s2(e.state.doc, this.regexp, t, r, (t, r) =>
                this.addMatch(r, e, t, n),
              );
            return t.finish();
          }
          updateDeco(e, t) {
            let n = 1e9,
              r = -1;
            return (e.docChanged &&
              e.changes.iterChanges((t, i, s, o) => {
                o >= e.view.viewport.from &&
                  s <= e.view.viewport.to &&
                  ((n = Math.min(s, n)), (r = Math.max(o, r)));
              }),
            e.viewportMoved || r - n > 1e3)
              ? this.createDeco(e.view)
              : r > -1
                ? this.updateRange(e.view, t.map(e.changes), n, r)
                : t;
          }
          updateRange(e, t, n, r) {
            for (let i of e.visibleRanges) {
              let s = Math.max(i.from, n),
                o = Math.min(i.to, r);
              if (o >= s) {
                let n = e.state.doc.lineAt(s),
                  r = n.to < o ? e.state.doc.lineAt(o) : n,
                  a = Math.max(i.from, n.from),
                  l = Math.min(i.to, r.to);
                if (this.boundary) {
                  for (; s > n.from; s--)
                    if (this.boundary.test(n.text[s - 1 - n.from])) {
                      a = s;
                      break;
                    }
                  for (; o < r.to; o++)
                    if (this.boundary.test(r.text[o - r.from])) {
                      l = o;
                      break;
                    }
                }
                let c = [],
                  u,
                  d = (e, t, n) => c.push(n.range(e, t));
                if (n == r)
                  for (
                    this.regexp.lastIndex = a - n.from;
                    (u = this.regexp.exec(n.text)) && u.index < l - n.from;

                  )
                    this.addMatch(u, e, u.index + n.from, d);
                else
                  s2(e.state.doc, this.regexp, a, l, (t, n) =>
                    this.addMatch(n, e, t, d),
                  );
                t = t.update({
                  filterFrom: a,
                  filterTo: l,
                  filter: (e, t) => e < a || t > l,
                  add: c,
                });
              }
            }
            return t;
          }
        }
        let s3 = null != /x/.unicode ? "gu" : "g",
          s4 = RegExp(
            "[\0-\b\n-\x1f\x7f-\x9f\xad؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]",
            s3,
          ),
          s8 = {
            0: "null",
            7: "bell",
            8: "backspace",
            10: "newline",
            11: "vertical tab",
            13: "carriage return",
            27: "escape",
            8203: "zero width space",
            8204: "zero width non-joiner",
            8205: "zero width joiner",
            8206: "left-to-right mark",
            8207: "right-to-left mark",
            8232: "line separator",
            8237: "left-to-right override",
            8238: "right-to-left override",
            8294: "left-to-right isolate",
            8295: "right-to-left isolate",
            8297: "pop directional isolate",
            8233: "paragraph separator",
            65279: "zero width no-break space",
            65532: "object replacement",
          },
          s6 = null,
          s9 = rg.line({ class: "cm-activeLine" }),
          s7 = "-10000px";
        class oe {
          constructor(e, t, n, r) {
            (this.facet = t),
              (this.createTooltipView = n),
              (this.removeTooltipView = r),
              (this.input = e.state.facet(t)),
              (this.tooltips = this.input.filter((e) => e));
            let i = null;
            this.tooltipViews = this.tooltips.map((e) => (i = n(e, i)));
          }
          update(e, t) {
            var n;
            let r = e.state.facet(this.facet),
              i = r.filter((e) => e);
            if (r === this.input) {
              for (let t of this.tooltipViews) t.update && t.update(e);
              return !1;
            }
            let s = [],
              o = t ? [] : null;
            for (let n = 0; n < i.length; n++) {
              let r = i[n],
                a = -1;
              if (r) {
                for (let e = 0; e < this.tooltips.length; e++) {
                  let t = this.tooltips[e];
                  t && t.create == r.create && (a = e);
                }
                if (a < 0)
                  (s[n] = this.createTooltipView(r, n ? s[n - 1] : null)),
                    o && (o[n] = !!r.above);
                else {
                  let r = (s[n] = this.tooltipViews[a]);
                  o && (o[n] = t[a]), r.update && r.update(e);
                }
              }
            }
            for (let e of this.tooltipViews)
              0 > s.indexOf(e) &&
                (this.removeTooltipView(e),
                null == (n = e.destroy) || n.call(e));
            return (
              t && (o.forEach((e, n) => (t[n] = e)), (t.length = o.length)),
              (this.input = r),
              (this.tooltips = i),
              (this.tooltipViews = s),
              !0
            );
          }
        }
        function ot(e) {
          let t = e.dom.ownerDocument.documentElement;
          return {
            top: 0,
            left: 0,
            bottom: t.clientHeight,
            right: t.clientWidth,
          };
        }
        let on = tP.define({
            combine: (e) => {
              var t, n, r;
              return {
                position: rr.ios
                  ? "absolute"
                  : (null == (t = e.find((e) => e.position))
                      ? void 0
                      : t.position) || "fixed",
                parent:
                  (null == (n = e.find((e) => e.parent)) ? void 0 : n.parent) ||
                  null,
                tooltipSpace:
                  (null == (r = e.find((e) => e.tooltipSpace))
                    ? void 0
                    : r.tooltipSpace) || ot,
              };
            },
          }),
          or = new WeakMap(),
          oi = r6.fromClass(
            class {
              constructor(e) {
                (this.view = e),
                  (this.above = []),
                  (this.inView = !0),
                  (this.madeAbsolute = !1),
                  (this.lastTransaction = 0),
                  (this.measureTimeout = -1);
                let t = e.state.facet(on);
                (this.position = t.position),
                  (this.parent = t.parent),
                  (this.classes = e.themeClasses),
                  this.createContainer(),
                  (this.measureReq = {
                    read: this.readMeasure.bind(this),
                    write: this.writeMeasure.bind(this),
                    key: this,
                  }),
                  (this.resizeObserver =
                    "function" == typeof ResizeObserver
                      ? new ResizeObserver(() => this.measureSoon())
                      : null),
                  (this.manager = new oe(
                    e,
                    oc,
                    (e, t) => this.createTooltip(e, t),
                    (e) => {
                      this.resizeObserver &&
                        this.resizeObserver.unobserve(e.dom),
                        e.dom.remove();
                    },
                  )),
                  (this.above = this.manager.tooltips.map((e) => !!e.above)),
                  (this.intersectionObserver =
                    "function" == typeof IntersectionObserver
                      ? new IntersectionObserver(
                          (e) => {
                            Date.now() > this.lastTransaction - 50 &&
                              e.length > 0 &&
                              e[e.length - 1].intersectionRatio < 1 &&
                              this.measureSoon();
                          },
                          { threshold: [1] },
                        )
                      : null),
                  this.observeIntersection(),
                  e.win.addEventListener(
                    "resize",
                    (this.measureSoon = this.measureSoon.bind(this)),
                  ),
                  this.maybeMeasure();
              }
              createContainer() {
                this.parent
                  ? ((this.container = document.createElement("div")),
                    (this.container.style.position = "relative"),
                    (this.container.className = this.view.themeClasses),
                    this.parent.appendChild(this.container))
                  : (this.container = this.view.dom);
              }
              observeIntersection() {
                if (this.intersectionObserver)
                  for (let e of (this.intersectionObserver.disconnect(),
                  this.manager.tooltipViews))
                    this.intersectionObserver.observe(e.dom);
              }
              measureSoon() {
                this.measureTimeout < 0 &&
                  (this.measureTimeout = setTimeout(() => {
                    (this.measureTimeout = -1), this.maybeMeasure();
                  }, 50));
              }
              update(e) {
                e.transactions.length && (this.lastTransaction = Date.now());
                let t = this.manager.update(e, this.above);
                t && this.observeIntersection();
                let n = t || e.geometryChanged,
                  r = e.state.facet(on);
                if (r.position != this.position && !this.madeAbsolute) {
                  for (let e of ((this.position = r.position),
                  this.manager.tooltipViews))
                    e.dom.style.position = this.position;
                  n = !0;
                }
                if (r.parent != this.parent) {
                  for (let e of (this.parent && this.container.remove(),
                  (this.parent = r.parent),
                  this.createContainer(),
                  this.manager.tooltipViews))
                    this.container.appendChild(e.dom);
                  n = !0;
                } else
                  this.parent &&
                    this.view.themeClasses != this.classes &&
                    (this.classes = this.container.className =
                      this.view.themeClasses);
                n && this.maybeMeasure();
              }
              createTooltip(e, t) {
                let n = e.create(this.view),
                  r = t ? t.dom : null;
                if (
                  (n.dom.classList.add("cm-tooltip"),
                  e.arrow &&
                    !n.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow"))
                ) {
                  let e = document.createElement("div");
                  (e.className = "cm-tooltip-arrow"), n.dom.appendChild(e);
                }
                return (
                  (n.dom.style.position = this.position),
                  (n.dom.style.top = s7),
                  (n.dom.style.left = "0px"),
                  this.container.insertBefore(n.dom, r),
                  n.mount && n.mount(this.view),
                  this.resizeObserver && this.resizeObserver.observe(n.dom),
                  n
                );
              }
              destroy() {
                var e, t, n;
                for (let t of (this.view.win.removeEventListener(
                  "resize",
                  this.measureSoon,
                ),
                this.manager.tooltipViews))
                  t.dom.remove(), null == (e = t.destroy) || e.call(t);
                this.parent && this.container.remove(),
                  null == (t = this.resizeObserver) || t.disconnect(),
                  null == (n = this.intersectionObserver) || n.disconnect(),
                  clearTimeout(this.measureTimeout);
              }
              readMeasure() {
                let e = 1,
                  t = 1,
                  n = !1;
                if (
                  "fixed" == this.position &&
                  this.manager.tooltipViews.length
                ) {
                  let { dom: e } = this.manager.tooltipViews[0];
                  if (rr.gecko)
                    n = e.offsetParent != this.container.ownerDocument.body;
                  else if (e.style.top == s7 && "0px" == e.style.left) {
                    let t = e.getBoundingClientRect();
                    n = Math.abs(t.top + 1e4) > 1 || Math.abs(t.left) > 1;
                  }
                }
                if (n || "absolute" == this.position)
                  if (this.parent) {
                    let n = this.parent.getBoundingClientRect();
                    n.width &&
                      n.height &&
                      ((e = n.width / this.parent.offsetWidth),
                      (t = n.height / this.parent.offsetHeight));
                  } else ({ scaleX: e, scaleY: t } = this.view.viewState);
                let r = this.view.scrollDOM.getBoundingClientRect(),
                  i = il(this.view);
                return {
                  visible: {
                    left: r.left + i.left,
                    top: r.top + i.top,
                    right: r.right - i.right,
                    bottom: r.bottom - i.bottom,
                  },
                  parent: this.parent
                    ? this.container.getBoundingClientRect()
                    : this.view.dom.getBoundingClientRect(),
                  pos: this.manager.tooltips.map((e, t) => {
                    let n = this.manager.tooltipViews[t];
                    return n.getCoords
                      ? n.getCoords(e.pos)
                      : this.view.coordsAtPos(e.pos);
                  }),
                  size: this.manager.tooltipViews.map(({ dom: e }) =>
                    e.getBoundingClientRect(),
                  ),
                  space: this.view.state.facet(on).tooltipSpace(this.view),
                  scaleX: e,
                  scaleY: t,
                  makeAbsolute: n,
                };
              }
              writeMeasure(e) {
                var t;
                if (e.makeAbsolute)
                  for (let e of ((this.madeAbsolute = !0),
                  (this.position = "absolute"),
                  this.manager.tooltipViews))
                    e.dom.style.position = "absolute";
                let { visible: n, space: r, scaleX: i, scaleY: s } = e,
                  o = [];
                for (let a = 0; a < this.manager.tooltips.length; a++) {
                  let l = this.manager.tooltips[a],
                    c = this.manager.tooltipViews[a],
                    { dom: u } = c,
                    d = e.pos[a],
                    h = e.size[a];
                  if (
                    !d ||
                    (!1 !== l.clip &&
                      (d.bottom <= Math.max(n.top, r.top) ||
                        d.top >= Math.min(n.bottom, r.bottom) ||
                        d.right < Math.max(n.left, r.left) - 0.1 ||
                        d.left > Math.min(n.right, r.right) + 0.1))
                  ) {
                    u.style.top = s7;
                    continue;
                  }
                  let p = l.arrow
                      ? c.dom.querySelector(".cm-tooltip-arrow")
                      : null,
                    f = 7 * !!p,
                    m = h.right - h.left,
                    g = null != (t = or.get(c)) ? t : h.bottom - h.top,
                    y = c.offset || ol,
                    v = this.view.textDirection == rC.LTR,
                    b =
                      h.width > r.right - r.left
                        ? v
                          ? r.left
                          : r.right - h.width
                        : v
                          ? Math.max(
                              r.left,
                              Math.min(d.left - 14 * !!p + y.x, r.right - m),
                            )
                          : Math.min(
                              Math.max(r.left, d.left - m + 14 * !!p - y.x),
                              r.right - m,
                            ),
                    x = this.above[a];
                  !l.strictSide &&
                    (x
                      ? d.top - g - f - y.y < r.top
                      : d.bottom + g + f + y.y > r.bottom) &&
                    x == r.bottom - d.bottom > d.top - r.top &&
                    (x = this.above[a] = !x);
                  let k = (x ? d.top - r.top : r.bottom - d.bottom) - f;
                  if (k < g && !1 !== c.resize) {
                    if (k < this.view.defaultLineHeight) {
                      u.style.top = s7;
                      continue;
                    }
                    or.set(c, g), (u.style.height = (g = k) / s + "px");
                  } else u.style.height && (u.style.height = "");
                  let w = x ? d.top - g - f - y.y : d.bottom + f + y.y,
                    _ = b + m;
                  if (!0 !== c.overlap)
                    for (let e of o)
                      e.left < _ &&
                        e.right > b &&
                        e.top < w + g &&
                        e.bottom > w &&
                        (w = x ? e.top - g - 2 - f : e.bottom + f + 2);
                  if (
                    ("absolute" == this.position
                      ? ((u.style.top = (w - e.parent.top) / s + "px"),
                        oo(u, (b - e.parent.left) / i))
                      : ((u.style.top = w / s + "px"), oo(u, b / i)),
                    p)
                  ) {
                    let e = d.left + (v ? y.x : -y.x) - (b + 14 - 7);
                    p.style.left = e / i + "px";
                  }
                  !0 !== c.overlap &&
                    o.push({ left: b, top: w, right: _, bottom: w + g }),
                    u.classList.toggle("cm-tooltip-above", x),
                    u.classList.toggle("cm-tooltip-below", !x),
                    c.positioned && c.positioned(e.space);
                }
              }
              maybeMeasure() {
                if (
                  this.manager.tooltips.length &&
                  (this.view.inView &&
                    this.view.requestMeasure(this.measureReq),
                  this.inView != this.view.inView) &&
                  ((this.inView = this.view.inView), !this.inView)
                )
                  for (let e of this.manager.tooltipViews) e.dom.style.top = s7;
              }
            },
            {
              eventObservers: {
                scroll() {
                  this.maybeMeasure();
                },
              },
            },
          );
        function oo(e, t) {
          let n = parseInt(e.style.left, 10);
          (isNaN(n) || Math.abs(t - n) > 1) && (e.style.left = t + "px");
        }
        let oa = sI.baseTheme({
            ".cm-tooltip": { zIndex: 500, boxSizing: "border-box" },
            "&light .cm-tooltip": {
              border: "1px solid #bbb",
              backgroundColor: "#f5f5f5",
            },
            "&light .cm-tooltip-section:not(:first-child)": {
              borderTop: "1px solid #bbb",
            },
            "&dark .cm-tooltip": { backgroundColor: "#333338", color: "white" },
            ".cm-tooltip-arrow": {
              height: "7px",
              width: "14px",
              position: "absolute",
              zIndex: -1,
              overflow: "hidden",
              "&:before, &:after": {
                content: "''",
                position: "absolute",
                width: 0,
                height: 0,
                borderLeft: "7px solid transparent",
                borderRight: "7px solid transparent",
              },
              ".cm-tooltip-above &": {
                bottom: "-7px",
                "&:before": { borderTop: "7px solid #bbb" },
                "&:after": { borderTop: "7px solid #f5f5f5", bottom: "1px" },
              },
              ".cm-tooltip-below &": {
                top: "-7px",
                "&:before": { borderBottom: "7px solid #bbb" },
                "&:after": { borderBottom: "7px solid #f5f5f5", top: "1px" },
              },
            },
            "&dark .cm-tooltip .cm-tooltip-arrow": {
              "&:before": {
                borderTopColor: "#333338",
                borderBottomColor: "#333338",
              },
              "&:after": {
                borderTopColor: "transparent",
                borderBottomColor: "transparent",
              },
            },
          }),
          ol = { x: 0, y: 0 },
          oc = tP.define({ enables: [oi, oa] }),
          ou = tP.define({
            combine: (e) => e.reduce((e, t) => e.concat(t), []),
          });
        class od {
          static create(e) {
            return new od(e);
          }
          constructor(e) {
            (this.view = e),
              (this.mounted = !1),
              (this.dom = document.createElement("div")),
              this.dom.classList.add("cm-tooltip-hover"),
              (this.manager = new oe(
                e,
                ou,
                (e, t) => this.createHostedView(e, t),
                (e) => e.dom.remove(),
              ));
          }
          createHostedView(e, t) {
            let n = e.create(this.view);
            return (
              n.dom.classList.add("cm-tooltip-section"),
              this.dom.insertBefore(
                n.dom,
                t ? t.dom.nextSibling : this.dom.firstChild,
              ),
              this.mounted && n.mount && n.mount(this.view),
              n
            );
          }
          mount(e) {
            for (let t of this.manager.tooltipViews) t.mount && t.mount(e);
            this.mounted = !0;
          }
          positioned(e) {
            for (let t of this.manager.tooltipViews)
              t.positioned && t.positioned(e);
          }
          update(e) {
            this.manager.update(e);
          }
          destroy() {
            var e;
            for (let t of this.manager.tooltipViews)
              null == (e = t.destroy) || e.call(t);
          }
          passProp(e) {
            let t;
            for (let n of this.manager.tooltipViews) {
              let r = n[e];
              if (void 0 !== r) {
                if (void 0 === t) t = r;
                else if (t !== r) return;
              }
            }
            return t;
          }
          get offset() {
            return this.passProp("offset");
          }
          get getCoords() {
            return this.passProp("getCoords");
          }
          get overlap() {
            return this.passProp("overlap");
          }
          get resize() {
            return this.passProp("resize");
          }
        }
        let oh = oc.compute([ou], (e) => {
          let t = e.facet(ou);
          return 0 === t.length
            ? null
            : {
                pos: Math.min(...t.map((e) => e.pos)),
                end: Math.max(
                  ...t.map((e) => {
                    var t;
                    return null != (t = e.end) ? t : e.pos;
                  }),
                ),
                create: od.create,
                above: t[0].above,
                arrow: t.some((e) => e.arrow),
              };
        });
        class op {
          constructor(e, t, n, r, i) {
            (this.view = e),
              (this.source = t),
              (this.field = n),
              (this.setHover = r),
              (this.hoverTime = i),
              (this.hoverTimeout = -1),
              (this.restartTimeout = -1),
              (this.pending = null),
              (this.lastMove = { x: 0, y: 0, target: e.dom, time: 0 }),
              (this.checkHover = this.checkHover.bind(this)),
              e.dom.addEventListener(
                "mouseleave",
                (this.mouseleave = this.mouseleave.bind(this)),
              ),
              e.dom.addEventListener(
                "mousemove",
                (this.mousemove = this.mousemove.bind(this)),
              );
          }
          update() {
            this.pending &&
              ((this.pending = null),
              clearTimeout(this.restartTimeout),
              (this.restartTimeout = setTimeout(() => this.startHover(), 20)));
          }
          get active() {
            return this.view.state.field(this.field);
          }
          checkHover() {
            if (((this.hoverTimeout = -1), this.active.length)) return;
            let e = Date.now() - this.lastMove.time;
            e < this.hoverTime
              ? (this.hoverTimeout = setTimeout(
                  this.checkHover,
                  this.hoverTime - e,
                ))
              : this.startHover();
          }
          startHover() {
            clearTimeout(this.restartTimeout);
            let { view: e, lastMove: t } = this,
              n = e.docView.nearest(t.target);
            if (!n) return;
            let r,
              i = 1;
            if (n instanceof ro) r = n.posAtStart;
            else {
              if (null == (r = e.posAtCoords(t))) return;
              let n = e.coordsAtPos(r);
              if (
                !n ||
                t.y < n.top ||
                t.y > n.bottom ||
                t.x < n.left - e.defaultCharacterWidth ||
                t.x > n.right + e.defaultCharacterWidth
              )
                return;
              let s = e
                  .bidiSpans(e.state.doc.lineAt(r))
                  .find((e) => e.from <= r && e.to >= r),
                o = s && s.dir == rC.RTL ? -1 : 1;
              i = t.x < n.left ? -o : o;
            }
            let s = this.source(e, r, i);
            if (null == s ? void 0 : s.then) {
              let t = (this.pending = { pos: r });
              s.then(
                (n) => {
                  this.pending == t &&
                    ((this.pending = null),
                    n &&
                      !(Array.isArray(n) && !n.length) &&
                      e.dispatch({
                        effects: this.setHover.of(Array.isArray(n) ? n : [n]),
                      }));
                },
                (t) => r5(e.state, t, "hover tooltip"),
              );
            } else
              s &&
                !(Array.isArray(s) && !s.length) &&
                e.dispatch({
                  effects: this.setHover.of(Array.isArray(s) ? s : [s]),
                });
          }
          get tooltip() {
            let e = this.view.plugin(oi),
              t = e
                ? e.manager.tooltips.findIndex((e) => e.create == od.create)
                : -1;
            return t > -1 ? e.manager.tooltipViews[t] : null;
          }
          mousemove(e) {
            var t, n;
            (this.lastMove = {
              x: e.clientX,
              y: e.clientY,
              target: e.target,
              time: Date.now(),
            }),
              this.hoverTimeout < 0 &&
                (this.hoverTimeout = setTimeout(
                  this.checkHover,
                  this.hoverTime,
                ));
            let { active: r, tooltip: i } = this;
            if (
              (r.length &&
                i &&
                !(function (e, t) {
                  let {
                      left: n,
                      right: r,
                      top: i,
                      bottom: s,
                    } = e.getBoundingClientRect(),
                    o;
                  if ((o = e.querySelector(".cm-tooltip-arrow"))) {
                    let e = o.getBoundingClientRect();
                    (i = Math.min(e.top, i)), (s = Math.max(e.bottom, s));
                  }
                  return (
                    t.clientX >= n - 4 &&
                    t.clientX <= r + 4 &&
                    t.clientY >= i - 4 &&
                    t.clientY <= s + 4
                  );
                })(i.dom, e)) ||
              this.pending
            ) {
              let { pos: i } = r[0] || this.pending,
                s = null != (n = null == (t = r[0]) ? void 0 : t.end) ? n : i;
              (i == s
                ? this.view.posAtCoords(this.lastMove) != i
                : !(function (e, t, n, r, i, s) {
                    let o = e.scrollDOM.getBoundingClientRect(),
                      a =
                        e.documentTop + e.documentPadding.top + e.contentHeight;
                    if (
                      o.left > r ||
                      o.right < r ||
                      o.top > i ||
                      Math.min(o.bottom, a) < i
                    )
                      return !1;
                    let l = e.posAtCoords({ x: r, y: i }, !1);
                    return l >= t && l <= n;
                  })(this.view, i, s, e.clientX, e.clientY)) &&
                (this.view.dispatch({ effects: this.setHover.of([]) }),
                (this.pending = null));
            }
          }
          mouseleave(e) {
            clearTimeout(this.hoverTimeout), (this.hoverTimeout = -1);
            let { active: t } = this;
            if (t.length) {
              let { tooltip: t } = this;
              t && t.dom.contains(e.relatedTarget)
                ? this.watchTooltipLeave(t.dom)
                : this.view.dispatch({ effects: this.setHover.of([]) });
            }
          }
          watchTooltipLeave(e) {
            let t = (n) => {
              e.removeEventListener("mouseleave", t),
                this.active.length &&
                  !this.view.dom.contains(n.relatedTarget) &&
                  this.view.dispatch({ effects: this.setHover.of([]) });
            };
            e.addEventListener("mouseleave", t);
          }
          destroy() {
            clearTimeout(this.hoverTimeout),
              this.view.dom.removeEventListener("mouseleave", this.mouseleave),
              this.view.dom.removeEventListener("mousemove", this.mousemove);
          }
        }
        function of(e, t) {
          let n = e.plugin(oi);
          if (!n) return null;
          let r = n.manager.tooltips.indexOf(t);
          return r < 0 ? null : n.manager.tooltipViews[r];
        }
        let om = t4.define(),
          og = tP.define({
            combine(e) {
              let t, n;
              for (let r of e)
                (t = t || r.topContainer), (n = n || r.bottomContainer);
              return { topContainer: t, bottomContainer: n };
            },
          });
        function oy(e, t) {
          let n = e.plugin(ov),
            r = n ? n.specs.indexOf(t) : -1;
          return r > -1 ? n.panels[r] : null;
        }
        let ov = r6.fromClass(
          class {
            constructor(e) {
              (this.input = e.state.facet(ok)),
                (this.specs = this.input.filter((e) => e)),
                (this.panels = this.specs.map((t) => t(e)));
              let t = e.state.facet(og);
              for (let n of ((this.top = new ob(e, !0, t.topContainer)),
              (this.bottom = new ob(e, !1, t.bottomContainer)),
              this.top.sync(this.panels.filter((e) => e.top)),
              this.bottom.sync(this.panels.filter((e) => !e.top)),
              this.panels))
                n.dom.classList.add("cm-panel"), n.mount && n.mount();
            }
            update(e) {
              let t = e.state.facet(og);
              this.top.container != t.topContainer &&
                (this.top.sync([]),
                (this.top = new ob(e.view, !0, t.topContainer))),
                this.bottom.container != t.bottomContainer &&
                  (this.bottom.sync([]),
                  (this.bottom = new ob(e.view, !1, t.bottomContainer))),
                this.top.syncClasses(),
                this.bottom.syncClasses();
              let n = e.state.facet(ok);
              if (n != this.input) {
                let t = n.filter((e) => e),
                  r = [],
                  i = [],
                  s = [],
                  o = [];
                for (let n of t) {
                  let t = this.specs.indexOf(n),
                    a;
                  t < 0
                    ? ((a = n(e.view)), o.push(a))
                    : (a = this.panels[t]).update && a.update(e),
                    r.push(a),
                    (a.top ? i : s).push(a);
                }
                for (let e of ((this.specs = t),
                (this.panels = r),
                this.top.sync(i),
                this.bottom.sync(s),
                o))
                  e.dom.classList.add("cm-panel"), e.mount && e.mount();
              } else for (let t of this.panels) t.update && t.update(e);
            }
            destroy() {
              this.top.sync([]), this.bottom.sync([]);
            }
          },
          {
            provide: (e) =>
              sI.scrollMargins.of((t) => {
                let n = t.plugin(e);
                return (
                  n && {
                    top: n.top.scrollMargin(),
                    bottom: n.bottom.scrollMargin(),
                  }
                );
              }),
          },
        );
        class ob {
          constructor(e, t, n) {
            (this.view = e),
              (this.top = t),
              (this.container = n),
              (this.dom = void 0),
              (this.classes = ""),
              (this.panels = []),
              this.syncClasses();
          }
          sync(e) {
            for (let t of this.panels)
              t.destroy && 0 > e.indexOf(t) && t.destroy();
            (this.panels = e), this.syncDOM();
          }
          syncDOM() {
            if (0 == this.panels.length) {
              this.dom && (this.dom.remove(), (this.dom = void 0));
              return;
            }
            if (!this.dom) {
              (this.dom = document.createElement("div")),
                (this.dom.className = this.top
                  ? "cm-panels cm-panels-top"
                  : "cm-panels cm-panels-bottom"),
                (this.dom.style[this.top ? "top" : "bottom"] = "0");
              let e = this.container || this.view.dom;
              e.insertBefore(this.dom, this.top ? e.firstChild : null);
            }
            let e = this.dom.firstChild;
            for (let t of this.panels)
              if (t.dom.parentNode == this.dom) {
                for (; e != t.dom; ) e = ox(e);
                e = e.nextSibling;
              } else this.dom.insertBefore(t.dom, e);
            for (; e; ) e = ox(e);
          }
          scrollMargin() {
            return !this.dom || this.container
              ? 0
              : Math.max(
                  0,
                  this.top
                    ? this.dom.getBoundingClientRect().bottom -
                        Math.max(
                          0,
                          this.view.scrollDOM.getBoundingClientRect().top,
                        )
                    : Math.min(
                        innerHeight,
                        this.view.scrollDOM.getBoundingClientRect().bottom,
                      ) - this.dom.getBoundingClientRect().top,
                );
          }
          syncClasses() {
            if (this.container && this.classes != this.view.themeClasses) {
              for (let e of this.classes.split(" "))
                e && this.container.classList.remove(e);
              for (let e of (this.classes = this.view.themeClasses).split(" "))
                e && this.container.classList.add(e);
            }
          }
        }
        function ox(e) {
          let t = e.nextSibling;
          return e.remove(), t;
        }
        let ok = tP.define({ enables: ov }),
          ow = t4.define(),
          o_ = t4.define();
        class oO extends ns {
          compare(e) {
            return (
              this == e || (this.constructor == e.constructor && this.eq(e))
            );
          }
          eq(e) {
            return !1;
          }
          destroy(e) {}
        }
        (oO.prototype.elementClass = ""),
          (oO.prototype.toDOM = void 0),
          (oO.prototype.mapMode = tx.TrackBefore),
          (oO.prototype.startSide = oO.prototype.endSide = -1),
          (oO.prototype.point = !0);
        let oT = tP.define(),
          oS = tP.define(),
          oE = {
            class: "",
            renderEmptyElements: !1,
            elementStyle: "",
            markers: () => nc.empty,
            lineMarker: () => null,
            widgetMarker: () => null,
            lineMarkerChange: null,
            initialSpacer: null,
            updateSpacer: null,
            domEventHandlers: {},
          },
          oC = tP.define(),
          oA = tP.define({ combine: (e) => e.some((e) => e) }),
          oN = r6.fromClass(
            class {
              constructor(e) {
                for (let t of ((this.view = e),
                (this.prevViewport = e.viewport),
                (this.dom = document.createElement("div")),
                (this.dom.className = "cm-gutters"),
                this.dom.setAttribute("aria-hidden", "true"),
                (this.dom.style.minHeight =
                  this.view.contentHeight / this.view.scaleY + "px"),
                (this.gutters = e.state.facet(oC).map((t) => new oR(e, t))),
                this.gutters))
                  this.dom.appendChild(t.dom);
                (this.fixed = !e.state.facet(oA)),
                  this.fixed && (this.dom.style.position = "sticky"),
                  this.syncGutters(!1),
                  e.scrollDOM.insertBefore(this.dom, e.contentDOM);
              }
              update(e) {
                if (this.updateGutters(e)) {
                  let t = this.prevViewport,
                    n = e.view.viewport,
                    r = Math.min(t.to, n.to) - Math.max(t.from, n.from);
                  this.syncGutters(r < (n.to - n.from) * 0.8);
                }
                e.geometryChanged &&
                  (this.dom.style.minHeight =
                    this.view.contentHeight / this.view.scaleY + "px"),
                  this.view.state.facet(oA) != !this.fixed &&
                    ((this.fixed = !this.fixed),
                    (this.dom.style.position = this.fixed ? "sticky" : "")),
                  (this.prevViewport = e.view.viewport);
              }
              syncGutters(e) {
                let t = this.dom.nextSibling;
                e && this.dom.remove();
                let n = nc.iter(
                    this.view.state.facet(oT),
                    this.view.viewport.from,
                  ),
                  r = [],
                  i = this.gutters.map(
                    (e) =>
                      new oP(
                        e,
                        this.view.viewport,
                        -this.view.documentPadding.top,
                      ),
                  );
                for (let e of this.view.viewportLineBlocks)
                  if ((r.length && (r = []), Array.isArray(e.type))) {
                    let t = !0;
                    for (let s of e.type)
                      if (s.type == rm.Text && t) {
                        for (let e of (oD(n, r, s.from), i))
                          e.line(this.view, s, r);
                        t = !1;
                      } else if (s.widget)
                        for (let e of i) e.widget(this.view, s);
                  } else if (e.type == rm.Text)
                    for (let t of (oD(n, r, e.from), i))
                      t.line(this.view, e, r);
                  else if (e.widget) for (let t of i) t.widget(this.view, e);
                for (let e of i) e.finish();
                e && this.view.scrollDOM.insertBefore(this.dom, t);
              }
              updateGutters(e) {
                let t = e.startState.facet(oC),
                  n = e.state.facet(oC),
                  r =
                    e.docChanged ||
                    e.heightChanged ||
                    e.viewportChanged ||
                    !nc.eq(
                      e.startState.facet(oT),
                      e.state.facet(oT),
                      e.view.viewport.from,
                      e.view.viewport.to,
                    );
                if (t == n) for (let t of this.gutters) t.update(e) && (r = !0);
                else {
                  r = !0;
                  let i = [];
                  for (let r of n) {
                    let n = t.indexOf(r);
                    n < 0
                      ? i.push(new oR(this.view, r))
                      : (this.gutters[n].update(e), i.push(this.gutters[n]));
                  }
                  for (let e of this.gutters)
                    e.dom.remove(), 0 > i.indexOf(e) && e.destroy();
                  for (let e of i) this.dom.appendChild(e.dom);
                  this.gutters = i;
                }
                return r;
              }
              destroy() {
                for (let e of this.gutters) e.destroy();
                this.dom.remove();
              }
            },
            {
              provide: (e) =>
                sI.scrollMargins.of((t) => {
                  let n = t.plugin(e);
                  return n && 0 != n.gutters.length && n.fixed
                    ? t.textDirection == rC.LTR
                      ? { left: n.dom.offsetWidth * t.scaleX }
                      : { right: n.dom.offsetWidth * t.scaleX }
                    : null;
                }),
            },
          );
        function oI(e) {
          return Array.isArray(e) ? e : [e];
        }
        function oD(e, t, n) {
          for (; e.value && e.from <= n; )
            e.from == n && t.push(e.value), e.next();
        }
        class oP {
          constructor(e, t, n) {
            (this.gutter = e),
              (this.height = n),
              (this.i = 0),
              (this.cursor = nc.iter(e.markers, t.from));
          }
          addElement(e, t, n) {
            let { gutter: r } = this,
              i = (t.top - this.height) / e.scaleY,
              s = t.height / e.scaleY;
            if (this.i == r.elements.length) {
              let t = new oM(e, s, i, n);
              r.elements.push(t), r.dom.appendChild(t.dom);
            } else r.elements[this.i].update(e, s, i, n);
            (this.height = t.bottom), this.i++;
          }
          line(e, t, n) {
            let r = [];
            oD(this.cursor, r, t.from), n.length && (r = r.concat(n));
            let i = this.gutter.config.lineMarker(e, t, r);
            i && r.unshift(i);
            let s = this.gutter;
            (0 != r.length || s.config.renderEmptyElements) &&
              this.addElement(e, t, r);
          }
          widget(e, t) {
            let n = this.gutter.config.widgetMarker(e, t.widget, t),
              r = n ? [n] : null;
            for (let n of e.state.facet(oS)) {
              let i = n(e, t.widget, t);
              i && (r || (r = [])).push(i);
            }
            r && this.addElement(e, t, r);
          }
          finish() {
            let e = this.gutter;
            for (; e.elements.length > this.i; ) {
              let t = e.elements.pop();
              e.dom.removeChild(t.dom), t.destroy();
            }
          }
        }
        class oR {
          constructor(e, t) {
            for (let n in ((this.view = e),
            (this.config = t),
            (this.elements = []),
            (this.spacer = null),
            (this.dom = document.createElement("div")),
            (this.dom.className =
              "cm-gutter" + (this.config.class ? " " + this.config.class : "")),
            t.domEventHandlers))
              this.dom.addEventListener(n, (r) => {
                let i = r.target,
                  s;
                if (i != this.dom && this.dom.contains(i)) {
                  for (; i.parentNode != this.dom; ) i = i.parentNode;
                  let e = i.getBoundingClientRect();
                  s = (e.top + e.bottom) / 2;
                } else s = r.clientY;
                let o = e.lineBlockAtHeight(s - e.documentTop);
                t.domEventHandlers[n](e, o, r) && r.preventDefault();
              });
            (this.markers = oI(t.markers(e))),
              t.initialSpacer &&
                ((this.spacer = new oM(e, 0, 0, [t.initialSpacer(e)])),
                this.dom.appendChild(this.spacer.dom),
                (this.spacer.dom.style.cssText +=
                  "visibility: hidden; pointer-events: none"));
          }
          update(e) {
            let t = this.markers;
            if (
              ((this.markers = oI(this.config.markers(e.view))),
              this.spacer && this.config.updateSpacer)
            ) {
              let t = this.config.updateSpacer(this.spacer.markers[0], e);
              t != this.spacer.markers[0] &&
                this.spacer.update(e.view, 0, 0, [t]);
            }
            let n = e.view.viewport;
            return (
              !nc.eq(this.markers, t, n.from, n.to) ||
              (!!this.config.lineMarkerChange &&
                this.config.lineMarkerChange(e))
            );
          }
          destroy() {
            for (let e of this.elements) e.destroy();
          }
        }
        class oM {
          constructor(e, t, n, r) {
            (this.height = -1),
              (this.above = 0),
              (this.markers = []),
              (this.dom = document.createElement("div")),
              (this.dom.className = "cm-gutterElement"),
              this.update(e, t, n, r);
          }
          update(e, t, n, r) {
            this.height != t &&
              ((this.height = t), (this.dom.style.height = t + "px")),
              this.above != n &&
                (this.dom.style.marginTop = (this.above = n) ? n + "px" : ""),
              !(function (e, t) {
                if (e.length != t.length) return !1;
                for (let n = 0; n < e.length; n++)
                  if (!e[n].compare(t[n])) return !1;
                return !0;
              })(this.markers, r) && this.setMarkers(e, r);
          }
          setMarkers(e, t) {
            let n = "cm-gutterElement",
              r = this.dom.firstChild;
            for (let i = 0, s = 0; ; ) {
              let o = s,
                a = i < t.length ? t[i++] : null,
                l = !1;
              if (a) {
                let e = a.elementClass;
                e && (n += " " + e);
                for (let e = s; e < this.markers.length; e++)
                  if (this.markers[e].compare(a)) {
                    (o = e), (l = !0);
                    break;
                  }
              } else o = this.markers.length;
              for (; s < o; ) {
                let e = this.markers[s++];
                if (e.toDOM) {
                  e.destroy(r);
                  let t = r.nextSibling;
                  r.remove(), (r = t);
                }
              }
              if (!a) break;
              a.toDOM &&
                (l
                  ? (r = r.nextSibling)
                  : this.dom.insertBefore(a.toDOM(e), r)),
                l && s++;
            }
            (this.dom.className = n), (this.markers = t);
          }
          destroy() {
            this.setMarkers(null, []);
          }
        }
        let oL = tP.define(),
          oj = tP.define(),
          oF = tP.define({
            combine: (e) =>
              ni(
                e,
                { formatNumber: String, domEventHandlers: {} },
                {
                  domEventHandlers(e, t) {
                    let n = Object.assign({}, e);
                    for (let e in t) {
                      let r = n[e],
                        i = t[e];
                      n[e] = r ? (e, t, n) => r(e, t, n) || i(e, t, n) : i;
                    }
                    return n;
                  },
                },
              ),
          });
        class oB extends oO {
          constructor(e) {
            super(), (this.number = e);
          }
          eq(e) {
            return this.number == e.number;
          }
          toDOM() {
            return document.createTextNode(this.number);
          }
        }
        function oz(e, t) {
          return e.state.facet(oF).formatNumber(t, e.state);
        }
        function o$(e) {
          let t = 9;
          for (; t < e; ) t = 10 * t + 9;
          return t;
        }
        (e) => ({
          class: "cm-lineNumbers",
          renderEmptyElements: !1,
          markers: (e) => e.state.facet(oL),
          lineMarker: (e, t, n) =>
            n.some((e) => e.toDOM)
              ? null
              : new oB(oz(e, e.state.doc.lineAt(t.from).number)),
          widgetMarker: (e, t, n) => {
            for (let r of e.state.facet(oj)) {
              let i = r(e, t, n);
              if (i) return i;
            }
            return null;
          },
          lineMarkerChange: (e) => e.startState.facet(oF) != e.state.facet(oF),
          initialSpacer: (e) => new oB(oz(e, o$(e.state.doc.lines))),
          updateSpacer(e, t) {
            let n = oz(t.view, o$(t.view.state.doc.lines));
            return n == e.number ? e : new oB(n);
          },
          domEventHandlers: e.facet(oF).domEventHandlers,
        });
        let oq = new (class extends oO {
          constructor() {
            super(...arguments), (this.elementClass = "cm-activeLineGutter");
          }
        })();
        function oU(e) {
          return r6.define(
            (t) => ({
              decorations: e.createDeco(t),
              update(t) {
                this.decorations = e.updateDeco(t, this.decorations);
              },
            }),
            { decorations: (e) => e.decorations },
          );
        }
        (e) => {
          let t = [],
            n = -1;
          for (let r of e.selection.ranges) {
            let i = e.doc.lineAt(r.head).from;
            i > n && ((n = i), t.push(oq.range(i)));
          }
          return nc.of(t);
        };
        let oH = rg.mark({ class: "cm-highlightTab" }),
          oQ = rg.mark({ class: "cm-highlightSpace" }),
          oV = new h(),
          oW = new h();
        class oZ {
          constructor(e, t, n = [], r = "") {
            (this.data = e),
              (this.name = r),
              nr.prototype.hasOwnProperty("tree") ||
                Object.defineProperty(nr.prototype, "tree", {
                  get() {
                    return oK(this);
                  },
                }),
              (this.parser = t),
              (this.extension = [
                o8.of(this),
                nr.languageData.of((e, t, n) => {
                  let r = oG(e, t, n),
                    i = r.type.prop(oV);
                  if (!i) return [];
                  let s = e.facet(i),
                    o = r.type.prop(oW);
                  if (o) {
                    let i = r.resolve(t - r.from, n);
                    for (let t of o)
                      if (t.test(i, e)) {
                        let n = e.facet(t.facet);
                        return "replace" == t.type ? n : n.concat(s);
                      }
                  }
                  return s;
                }),
              ].concat(n));
          }
          isActiveAt(e, t, n = -1) {
            return oG(e, t, n).type.prop(oV) == this.data;
          }
          findRegions(e) {
            let t = e.facet(o8);
            if ((null == t ? void 0 : t.data) == this.data)
              return [{ from: 0, to: e.doc.length }];
            if (!t || !t.allowsNesting) return [];
            let n = [],
              r = (e, t) => {
                if (e.prop(oV) == this.data)
                  return void n.push({ from: t, to: t + e.length });
                let i = e.prop(h.mounted);
                if (i) {
                  if (i.tree.prop(oV) == this.data) {
                    if (i.overlay)
                      for (let e of i.overlay)
                        n.push({ from: e.from + t, to: e.to + t });
                    else n.push({ from: t, to: t + e.length });
                    return;
                  } else if (i.overlay) {
                    let e = n.length;
                    if ((r(i.tree, i.overlay[0].from + t), n.length > e))
                      return;
                  }
                }
                for (let n = 0; n < e.children.length; n++) {
                  let i = e.children[n];
                  i instanceof b && r(i, e.positions[n] + t);
                }
              };
            return r(oK(e), 0), n;
          }
          get allowsNesting() {
            return !0;
          }
        }
        function oG(e, t, n) {
          let r = e.facet(o8),
            i = oK(e).topNode;
          if (!r || r.allowsNesting)
            for (let e = i; e; e = e.enter(t, n, a.ExcludeBuffers))
              e.type.isTop && (i = e);
          return i;
        }
        oZ.setState = t4.define();
        class oY extends oZ {
          constructor(e, t, n) {
            super(e, t, [], n), (this.parser = t);
          }
          static define(e) {
            var t;
            let n =
              ((t = e.languageData),
              tP.define({ combine: t ? (e) => e.concat(t) : void 0 }));
            return new oY(
              n,
              e.parser.configure({
                props: [oV.add((e) => (e.isTop ? n : void 0))],
              }),
              e.name,
            );
          }
          configure(e, t) {
            return new oY(this.data, this.parser.configure(e), t || this.name);
          }
          get allowsNesting() {
            return this.parser.hasWrappers();
          }
        }
        function oK(e) {
          let t = e.field(oZ.state, !1);
          return t ? t.tree : b.empty;
        }
        class oX {
          constructor(e) {
            (this.doc = e),
              (this.cursorPos = 0),
              (this.string = ""),
              (this.cursor = e.iter());
          }
          get length() {
            return this.doc.length;
          }
          syncTo(e) {
            return (
              (this.string = this.cursor.next(e - this.cursorPos).value),
              (this.cursorPos = e + this.string.length),
              this.cursorPos - this.string.length
            );
          }
          chunk(e) {
            return this.syncTo(e), this.string;
          }
          get lineChunks() {
            return !0;
          }
          read(e, t) {
            let n = this.cursorPos - this.string.length;
            return e < n || t >= this.cursorPos
              ? this.doc.sliceString(e, t)
              : this.string.slice(e - n, t - n);
          }
        }
        let oJ = null;
        class o0 {
          constructor(e, t, n = [], r, i, s, o, a) {
            (this.parser = e),
              (this.state = t),
              (this.fragments = n),
              (this.tree = r),
              (this.treeLen = i),
              (this.viewport = s),
              (this.skipped = o),
              (this.scheduleOn = a),
              (this.parse = null),
              (this.tempSkipped = []);
          }
          static create(e, t, n) {
            return new o0(e, t, [], b.empty, 0, n, [], null);
          }
          startParse() {
            return this.parser.startParse(
              new oX(this.state.doc),
              this.fragments,
            );
          }
          work(e, t) {
            return (null != t && t >= this.state.doc.length && (t = void 0),
            this.tree != b.empty &&
              this.isDone(null != t ? t : this.state.doc.length))
              ? (this.takeTree(), !0)
              : this.withContext(() => {
                  var n;
                  if ("number" == typeof e) {
                    let t = Date.now() + e;
                    e = () => Date.now() > t;
                  }
                  for (
                    this.parse || (this.parse = this.startParse()),
                      null != t &&
                        (null == this.parse.stoppedAt ||
                          this.parse.stoppedAt > t) &&
                        t < this.state.doc.length &&
                        this.parse.stopAt(t);
                    ;

                  ) {
                    let r = this.parse.advance();
                    if (r) {
                      if (
                        ((this.fragments = this.withoutTempSkipped(
                          F.addTree(
                            r,
                            this.fragments,
                            null != this.parse.stoppedAt,
                          ),
                        )),
                        (this.treeLen =
                          null != (n = this.parse.stoppedAt)
                            ? n
                            : this.state.doc.length),
                        (this.tree = r),
                        (this.parse = null),
                        !(
                          this.treeLen < (null != t ? t : this.state.doc.length)
                        ))
                      )
                        return !0;
                      this.parse = this.startParse();
                    }
                    if (e()) return !1;
                  }
                });
          }
          takeTree() {
            let e, t;
            this.parse &&
              (e = this.parse.parsedPos) >= this.treeLen &&
              ((null == this.parse.stoppedAt || this.parse.stoppedAt > e) &&
                this.parse.stopAt(e),
              this.withContext(() => {
                for (; !(t = this.parse.advance()); );
              }),
              (this.treeLen = e),
              (this.tree = t),
              (this.fragments = this.withoutTempSkipped(
                F.addTree(this.tree, this.fragments, !0),
              )),
              (this.parse = null));
          }
          withContext(e) {
            let t = oJ;
            oJ = this;
            try {
              return e();
            } finally {
              oJ = t;
            }
          }
          withoutTempSkipped(e) {
            for (let t; (t = this.tempSkipped.pop()); ) e = o1(e, t.from, t.to);
            return e;
          }
          changes(e, t) {
            let {
              fragments: n,
              tree: r,
              treeLen: i,
              viewport: s,
              skipped: o,
            } = this;
            if ((this.takeTree(), !e.empty)) {
              let t = [];
              if (
                (e.iterChangedRanges((e, n, r, i) =>
                  t.push({ fromA: e, toA: n, fromB: r, toB: i }),
                ),
                (n = F.applyChanges(n, t)),
                (r = b.empty),
                (i = 0),
                (s = { from: e.mapPos(s.from, -1), to: e.mapPos(s.to, 1) }),
                this.skipped.length)
              )
                for (let t of ((o = []), this.skipped)) {
                  let n = e.mapPos(t.from, 1),
                    r = e.mapPos(t.to, -1);
                  n < r && o.push({ from: n, to: r });
                }
            }
            return new o0(this.parser, t, n, r, i, s, o, this.scheduleOn);
          }
          updateViewport(e) {
            if (this.viewport.from == e.from && this.viewport.to == e.to)
              return !1;
            this.viewport = e;
            let t = this.skipped.length;
            for (let t = 0; t < this.skipped.length; t++) {
              let { from: n, to: r } = this.skipped[t];
              n < e.to &&
                r > e.from &&
                ((this.fragments = o1(this.fragments, n, r)),
                this.skipped.splice(t--, 1));
            }
            return !(this.skipped.length >= t) && (this.reset(), !0);
          }
          reset() {
            this.parse && (this.takeTree(), (this.parse = null));
          }
          skipUntilInView(e, t) {
            this.skipped.push({ from: e, to: t });
          }
          static getSkippingParser(e) {
            return new (class extends B {
              createParse(t, n, r) {
                let i = r[0].from,
                  s = r[r.length - 1].to;
                return {
                  parsedPos: i,
                  advance() {
                    let t = oJ;
                    if (t) {
                      for (let e of r) t.tempSkipped.push(e);
                      e &&
                        (t.scheduleOn = t.scheduleOn
                          ? Promise.all([t.scheduleOn, e])
                          : e);
                    }
                    return (this.parsedPos = s), new b(m.none, [], [], s - i);
                  },
                  stoppedAt: null,
                  stopAt() {},
                };
              }
            })();
          }
          isDone(e) {
            e = Math.min(e, this.state.doc.length);
            let t = this.fragments;
            return (
              this.treeLen >= e && t.length && 0 == t[0].from && t[0].to >= e
            );
          }
          static get() {
            return oJ;
          }
        }
        function o1(e, t, n) {
          return F.applyChanges(e, [{ fromA: t, toA: n, fromB: t, toB: n }]);
        }
        class o2 {
          constructor(e) {
            (this.context = e), (this.tree = e.tree);
          }
          apply(e) {
            if (!e.docChanged && this.tree == this.context.tree) return this;
            let t = this.context.changes(e.changes, e.state),
              n =
                this.context.treeLen == e.startState.doc.length
                  ? void 0
                  : Math.max(
                      e.changes.mapPos(this.context.treeLen),
                      t.viewport.to,
                    );
            return t.work(20, n) || t.takeTree(), new o2(t);
          }
          static init(e) {
            let t = Math.min(3e3, e.doc.length),
              n = o0.create(e.facet(o8).parser, e, { from: 0, to: t });
            return n.work(20, t) || n.takeTree(), new o2(n);
          }
        }
        oZ.state = tB.define({
          create: o2.init,
          update(e, t) {
            for (let e of t.effects) if (e.is(oZ.setState)) return e.value;
            return t.startState.facet(o8) != t.state.facet(o8)
              ? o2.init(t.state)
              : e.apply(t);
          },
        });
        let o5 = (e) => {
          let t = setTimeout(() => e(), 500);
          return () => clearTimeout(t);
        };
        "undefined" != typeof requestIdleCallback &&
          (o5 = (e) => {
            let t = -1,
              n = setTimeout(() => {
                t = requestIdleCallback(e, { timeout: 400 });
              }, 100);
            return () => (t < 0 ? clearTimeout(n) : cancelIdleCallback(t));
          });
        let o3 =
            "undefined" != typeof navigator &&
            (null == (l = navigator.scheduling) ? void 0 : l.isInputPending)
              ? () => navigator.scheduling.isInputPending()
              : null,
          o4 = r6.fromClass(
            class {
              constructor(e) {
                (this.view = e),
                  (this.working = null),
                  (this.workScheduled = 0),
                  (this.chunkEnd = -1),
                  (this.chunkBudget = -1),
                  (this.work = this.work.bind(this)),
                  this.scheduleWork();
              }
              update(e) {
                let t = this.view.state.field(oZ.state).context;
                (t.updateViewport(e.view.viewport) ||
                  this.view.viewport.to > t.treeLen) &&
                  this.scheduleWork(),
                  (e.docChanged || e.selectionSet) &&
                    (this.view.hasFocus && (this.chunkBudget += 50),
                    this.scheduleWork()),
                  this.checkAsyncSchedule(t);
              }
              scheduleWork() {
                if (this.working) return;
                let { state: e } = this.view,
                  t = e.field(oZ.state);
                (t.tree == t.context.tree && t.context.isDone(e.doc.length)) ||
                  (this.working = o5(this.work));
              }
              work(e) {
                this.working = null;
                let t = Date.now();
                if (
                  (this.chunkEnd < t &&
                    (this.chunkEnd < 0 || this.view.hasFocus) &&
                    ((this.chunkEnd = t + 3e4), (this.chunkBudget = 3e3)),
                  this.chunkBudget <= 0)
                )
                  return;
                let {
                    state: n,
                    viewport: { to: r },
                  } = this.view,
                  i = n.field(oZ.state);
                if (i.tree == i.context.tree && i.context.isDone(r + 1e5))
                  return;
                let s =
                    Date.now() +
                    Math.min(
                      this.chunkBudget,
                      100,
                      e && !o3 ? Math.max(25, e.timeRemaining() - 5) : 1e9,
                    ),
                  o = i.context.treeLen < r && n.doc.length > r + 1e3,
                  a = i.context.work(
                    () => (o3 && o3()) || Date.now() > s,
                    r + 1e5 * !o,
                  );
                (this.chunkBudget -= Date.now() - t),
                  (a || this.chunkBudget <= 0) &&
                    (i.context.takeTree(),
                    this.view.dispatch({
                      effects: oZ.setState.of(new o2(i.context)),
                    })),
                  this.chunkBudget > 0 && !(a && !o) && this.scheduleWork(),
                  this.checkAsyncSchedule(i.context);
              }
              checkAsyncSchedule(e) {
                e.scheduleOn &&
                  (this.workScheduled++,
                  e.scheduleOn
                    .then(() => this.scheduleWork())
                    .catch((e) => r5(this.view.state, e))
                    .then(() => this.workScheduled--),
                  (e.scheduleOn = null));
              }
              destroy() {
                this.working && this.working();
              }
              isWorking() {
                return !!(this.working || this.workScheduled > 0);
              }
            },
            {
              eventHandlers: {
                focus() {
                  this.scheduleWork();
                },
              },
            },
          ),
          o8 = tP.define({
            combine: (e) => (e.length ? e[0] : null),
            enables: (e) => [
              oZ.state,
              o4,
              sI.contentAttributes.compute([e], (t) => {
                let n = t.facet(e);
                return n && n.name ? { "data-language": n.name } : {};
              }),
            ],
          }),
          o6 = tP.define(),
          o9 = tP.define({
            combine: (e) => {
              if (!e.length) return "  ";
              let t = e[0];
              if (!t || /\S/.test(t) || Array.from(t).some((e) => e != t[0]))
                throw Error("Invalid indent unit: " + JSON.stringify(e[0]));
              return t;
            },
          });
        function o7(e) {
          let t = e.facet(o9);
          return 9 == t.charCodeAt(0) ? e.tabSize * t.length : t.length;
        }
        function ae(e, t) {
          let n = "",
            r = e.tabSize,
            i = e.facet(o9)[0];
          if ("	" == i) {
            for (; t >= r; ) (n += "	"), (t -= r);
            i = " ";
          }
          for (let e = 0; e < t; e++) n += i;
          return n;
        }
        class at {
          constructor(e, t = {}) {
            (this.state = e), (this.options = t), (this.unit = o7(e));
          }
          lineAt(e, t = 1) {
            let n = this.state.doc.lineAt(e),
              { simulateBreak: r, simulateDoubleBreak: i } = this.options;
            if (null != r && r >= n.from && r <= n.to)
              if (i && r == e) return { text: "", from: e };
              else if (t < 0 ? r < e : r <= e)
                return { text: n.text.slice(r - n.from), from: r };
              else return { text: n.text.slice(0, r - n.from), from: n.from };
            return n;
          }
          textAfterPos(e, t = 1) {
            if (
              this.options.simulateDoubleBreak &&
              e == this.options.simulateBreak
            )
              return "";
            let { text: n, from: r } = this.lineAt(e, t);
            return n.slice(e - r, Math.min(n.length, e + 100 - r));
          }
          column(e, t = 1) {
            let { text: n, from: r } = this.lineAt(e, t),
              i = this.countColumn(n, e - r),
              s = this.options.overrideIndentation
                ? this.options.overrideIndentation(r)
                : -1;
            return (
              s > -1 && (i += s - this.countColumn(n, n.search(/\S|$/))), i
            );
          }
          countColumn(e, t = e.length) {
            return nk(e, this.state.tabSize, t);
          }
          lineIndent(e, t = 1) {
            let { text: n, from: r } = this.lineAt(e, t),
              i = this.options.overrideIndentation;
            if (i) {
              let e = i(r);
              if (e > -1) return e;
            }
            return this.countColumn(n, n.search(/\S|$/));
          }
          get simulatedBreak() {
            return this.options.simulateBreak || null;
          }
        }
        let an = new h();
        function ar(e, t, n) {
          for (let r = e; r; r = r.next) {
            let e = (function (e) {
              let t = e.type.prop(an);
              if (t) return t;
              let n = e.firstChild,
                r;
              if (n && (r = n.type.prop(h.closedBy))) {
                let t = e.lastChild,
                  n = t && r.indexOf(t.name) > -1;
                return (e) =>
                  aa(
                    e,
                    !0,
                    1,
                    void 0,
                    n &&
                      !(
                        e.pos == e.options.simulateBreak &&
                        e.options.simulateDoubleBreak
                      )
                      ? t.from
                      : void 0,
                  );
              }
              return null == e.parent ? ai : null;
            })(r.node);
            if (e) return e(as.create(t, n, r));
          }
          return 0;
        }
        function ai() {
          return 0;
        }
        class as extends at {
          constructor(e, t, n) {
            super(e.state, e.options),
              (this.base = e),
              (this.pos = t),
              (this.context = n);
          }
          get node() {
            return this.context.node;
          }
          static create(e, t, n) {
            return new as(e, t, n);
          }
          get textAfter() {
            return this.textAfterPos(this.pos);
          }
          get baseIndent() {
            return this.baseIndentFor(this.node);
          }
          baseIndentFor(e) {
            let t = this.state.doc.lineAt(e.from);
            for (;;) {
              let n = e.resolve(t.from);
              for (; n.parent && n.parent.from == n.from; ) n = n.parent;
              if (
                (function (e, t) {
                  for (let n = t; n; n = n.parent) if (e == n) return !0;
                  return !1;
                })(n, e)
              )
                break;
              t = this.state.doc.lineAt(n.from);
            }
            return this.lineIndent(t.from);
          }
          continue() {
            return ar(this.context.next, this.base, this.pos);
          }
        }
        function ao({ closing: e, align: t = !0, units: n = 1 }) {
          return (r) => aa(r, t, n, e);
        }
        function aa(e, t, n, r, i) {
          let s = e.textAfter,
            o = s.match(/^\s*/)[0].length,
            a = (r && s.slice(o, o + r.length) == r) || i == e.pos + o,
            l = t
              ? (function (e) {
                  let t = e.node,
                    n = t.childAfter(t.from),
                    r = t.lastChild;
                  if (!n) return null;
                  let i = e.options.simulateBreak,
                    s = e.state.doc.lineAt(n.from),
                    o = null == i || i <= s.from ? s.to : Math.min(s.to, i);
                  for (let e = n.to; ; ) {
                    let i = t.childAfter(e);
                    if (!i || i == r) return null;
                    if (!i.type.isSkipped) {
                      if (i.from >= o) return null;
                      let e = /^ */.exec(s.text.slice(n.to - s.from))[0].length;
                      return { from: n.from, to: n.to + e };
                    }
                    e = i.to;
                  }
                })(e)
              : null;
          return l
            ? a
              ? e.column(l.from)
              : e.column(l.to)
            : e.baseIndent + (a ? 0 : e.unit * n);
        }
        let al = tP.define(),
          ac = new h();
        function au(e, t) {
          let n = t.mapPos(e.from, 1),
            r = t.mapPos(e.to, -1);
          return n >= r ? void 0 : { from: n, to: r };
        }
        let ad = t4.define({ map: au }),
          ah = t4.define({ map: au }),
          ap = tB.define({
            create: () => rg.none,
            update(e, t) {
              for (let n of ((e = e.map(t.changes)), t.effects))
                if (
                  n.is(ad) &&
                  !(function (e, t, n) {
                    let r = !1;
                    return (
                      e.between(t, t, (e, i) => {
                        e == t && i == n && (r = !0);
                      }),
                      r
                    );
                  })(e, n.value.from, n.value.to)
                ) {
                  let { preparePlaceholder: r } = t.state.facet(am),
                    i = r
                      ? rg.replace({ widget: new av(r(t.state, n.value)) })
                      : ay;
                  e = e.update({ add: [i.range(n.value.from, n.value.to)] });
                } else
                  n.is(ah) &&
                    (e = e.update({
                      filter: (e, t) => n.value.from != e || n.value.to != t,
                      filterFrom: n.value.from,
                      filterTo: n.value.to,
                    }));
              if (t.selection) {
                let n = !1,
                  { head: r } = t.selection.main;
                e.between(r, r, (e, t) => {
                  e < r && t > r && (n = !0);
                }),
                  n &&
                    (e = e.update({
                      filterFrom: r,
                      filterTo: r,
                      filter: (e, t) => t <= r || e >= r,
                    }));
              }
              return e;
            },
            provide: (e) => sI.decorations.from(e),
            toJSON(e, t) {
              let n = [];
              return (
                e.between(0, t.doc.length, (e, t) => {
                  n.push(e, t);
                }),
                n
              );
            },
            fromJSON(e) {
              if (!Array.isArray(e) || e.length % 2)
                throw RangeError("Invalid JSON for fold state");
              let t = [];
              for (let n = 0; n < e.length; ) {
                let r = e[n++],
                  i = e[n++];
                if ("number" != typeof r || "number" != typeof i)
                  throw RangeError("Invalid JSON for fold state");
                t.push(ay.range(r, i));
              }
              return rg.set(t, !0);
            },
          }),
          af = {
            placeholderDOM: null,
            preparePlaceholder: null,
            placeholderText: "…",
          },
          am = tP.define({ combine: (e) => ni(e, af) });
        function ag(e, t) {
          let { state: n } = e,
            r = n.facet(am),
            i = (t) => {
              var n, r, i, s;
              let o,
                a = e.lineBlockAt(e.posAtDOM(t.target)),
                l =
                  ((n = e.state),
                  (r = a.from),
                  (i = a.to),
                  (o = null),
                  null == (s = n.field(ap, !1)) ||
                    s.between(r, i, (e, t) => {
                      (!o || o.from > e) && (o = { from: e, to: t });
                    }),
                  o);
              l && e.dispatch({ effects: ah.of(l) }), t.preventDefault();
            };
          if (r.placeholderDOM) return r.placeholderDOM(e, i, t);
          let s = document.createElement("span");
          return (
            (s.textContent = r.placeholderText),
            s.setAttribute("aria-label", n.phrase("folded code")),
            (s.title = n.phrase("unfold")),
            (s.className = "cm-foldPlaceholder"),
            (s.onclick = i),
            s
          );
        }
        let ay = rg.replace({
          widget: new (class extends rf {
            toDOM(e) {
              return ag(e, null);
            }
          })(),
        });
        class av extends rf {
          constructor(e) {
            super(), (this.value = e);
          }
          eq(e) {
            return this.value == e.value;
          }
          toDOM(e) {
            return ag(e, this.value);
          }
        }
        let ab = sI.baseTheme({
          ".cm-foldPlaceholder": {
            backgroundColor: "#eee",
            border: "1px solid #ddd",
            color: "#888",
            borderRadius: ".2em",
            margin: "0 1px",
            padding: "0 1px",
            cursor: "pointer",
          },
          ".cm-foldGutter span": { padding: "0 1px", cursor: "pointer" },
        });
        class ax {
          constructor(e, t) {
            let n;
            function r(e) {
              let t = nT.newName();
              return ((n || (n = Object.create(null)))["." + t] = e), t;
            }
            this.specs = e;
            let i =
                "string" == typeof t.all ? t.all : t.all ? r(t.all) : void 0,
              s = t.scope;
            (this.scope =
              s instanceof oZ
                ? (e) => e.prop(oV) == s.data
                : s
                  ? (e) => e == s
                  : void 0),
              (this.style = eA(
                e.map((e) => ({
                  tag: e.tag,
                  class: e.class || r(Object.assign({}, e, { tag: null })),
                })),
                { all: i },
              ).style),
              (this.module = n ? new nT(n) : null),
              (this.themeType = t.themeType);
          }
          static define(e, t) {
            return new ax(e, t || {});
          }
        }
        let ak = tP.define(),
          aw = tP.define({ combine: (e) => (e.length ? [e[0]] : null) });
        function a_(e) {
          let t = e.facet(ak);
          return t.length ? t : e.facet(aw);
        }
        class aO {
          constructor(e) {
            (this.markCache = Object.create(null)),
              (this.tree = oK(e.state)),
              (this.decorations = this.buildDeco(e, a_(e.state))),
              (this.decoratedTo = e.viewport.to);
          }
          update(e) {
            let t = oK(e.state),
              n = a_(e.state),
              r = n != a_(e.startState),
              { viewport: i } = e.view,
              s = e.changes.mapPos(this.decoratedTo, 1);
            t.length < i.to && !r && t.type == this.tree.type && s >= i.to
              ? ((this.decorations = this.decorations.map(e.changes)),
                (this.decoratedTo = s))
              : (t != this.tree || e.viewportChanged || r) &&
                ((this.tree = t),
                (this.decorations = this.buildDeco(e.view, n)),
                (this.decoratedTo = i.to));
          }
          buildDeco(e, t) {
            if (!t || !this.tree.length) return rg.none;
            let n = new nu();
            for (let { from: r, to: i } of e.visibleRanges)
              !(function (e, t, n, r = 0, i = e.length) {
                let s = new eN(r, Array.isArray(t) ? t : [t], n);
                s.highlightRange(e.cursor(), r, i, "", s.highlighters),
                  s.flush(i);
              })(
                this.tree,
                t,
                (e, t, r) => {
                  n.add(
                    e,
                    t,
                    this.markCache[r] ||
                      (this.markCache[r] = rg.mark({ class: r })),
                  );
                },
                r,
                i,
              );
            return n.finish();
          }
        }
        eV.meta,
          eV.link,
          eV.heading,
          eV.emphasis,
          eV.strong,
          eV.strikethrough,
          eV.keyword,
          eV.atom,
          eV.bool,
          eV.url,
          eV.contentSeparator,
          eV.labelName,
          eV.literal,
          eV.inserted,
          eV.string,
          eV.deleted,
          eV.regexp,
          eV.escape,
          eV.string,
          eV.variableName,
          eV.variableName,
          eV.typeName,
          eV.namespace,
          eV.className,
          eV.variableName,
          eV.macroName,
          eV.propertyName,
          eV.comment,
          eV.invalid;
        let aT = sI.baseTheme({
            "&.cm-focused .cm-matchingBracket": {
              backgroundColor: "#328c8252",
            },
            "&.cm-focused .cm-nonmatchingBracket": {
              backgroundColor: "#bb555544",
            },
          }),
          aS = "()[]{}",
          aE = tP.define({
            combine: (e) =>
              ni(e, {
                afterCursor: !0,
                brackets: aS,
                maxScanDistance: 1e4,
                renderMatch: aN,
              }),
          }),
          aC = rg.mark({ class: "cm-matchingBracket" }),
          aA = rg.mark({ class: "cm-nonmatchingBracket" });
        function aN(e) {
          let t = [],
            n = e.matched ? aC : aA;
          return (
            t.push(n.range(e.start.from, e.start.to)),
            e.end && t.push(n.range(e.end.from, e.end.to)),
            t
          );
        }
        let aI = new h();
        function aD(e, t, n) {
          let r = e.prop(t < 0 ? h.openedBy : h.closedBy);
          if (r) return r;
          if (1 == e.name.length) {
            let r = n.indexOf(e.name);
            if (r > -1 && r % 2 == +(t < 0)) return [n[r + t]];
          }
          return null;
        }
        function aP(e) {
          let t = e.type.prop(aI);
          return t ? t(e.node) : e;
        }
        function aR(e, t, n, r = {}) {
          let i = r.maxScanDistance || 1e4,
            s = r.brackets || aS,
            o = oK(e),
            a = o.resolveInner(t, n);
          for (let e = a; e; e = e.parent) {
            let r = aD(e.type, n, s);
            if (r && e.from < e.to) {
              let i = aP(e);
              if (
                i &&
                (n > 0 ? t >= i.from && t < i.to : t > i.from && t <= i.to)
              )
                return (function (e, t, n, r, i, s, o) {
                  let a = r.parent,
                    l = { from: i.from, to: i.to },
                    c = 0,
                    u = null == a ? void 0 : a.cursor();
                  if (u && (n < 0 ? u.childBefore(r.from) : u.childAfter(r.to)))
                    do
                      if (n < 0 ? u.to <= r.from : u.from >= r.to) {
                        if (
                          0 == c &&
                          s.indexOf(u.type.name) > -1 &&
                          u.from < u.to
                        ) {
                          let e = aP(u);
                          return {
                            start: l,
                            end: e ? { from: e.from, to: e.to } : void 0,
                            matched: !0,
                          };
                        } else if (aD(u.type, n, o)) c++;
                        else if (aD(u.type, -n, o)) {
                          if (0 == c) {
                            let e = aP(u);
                            return {
                              start: l,
                              end:
                                e && e.from < e.to
                                  ? { from: e.from, to: e.to }
                                  : void 0,
                              matched: !1,
                            };
                          }
                          c--;
                        }
                      }
                    while (n < 0 ? u.prevSibling() : u.nextSibling());
                  return { start: l, matched: !1 };
                })(0, 0, n, e, i, r, s);
            }
          }
          return (function (e, t, n, r, i, s, o) {
            let a = n < 0 ? e.sliceDoc(t - 1, t) : e.sliceDoc(t, t + 1),
              l = o.indexOf(a);
            if (l < 0 || (l % 2 == 0) != n > 0) return null;
            let c = { from: n < 0 ? t - 1 : t, to: n > 0 ? t + 1 : t },
              u = e.doc.iterRange(t, n > 0 ? e.doc.length : 0),
              d = 0;
            for (let e = 0; !u.next().done && e <= s; ) {
              let s = u.value;
              n < 0 && (e += s.length);
              let a = t + e * n;
              for (
                let e = n > 0 ? 0 : s.length - 1, t = n > 0 ? s.length : -1;
                e != t;
                e += n
              ) {
                let t = o.indexOf(s[e]);
                if (!(t < 0) && r.resolveInner(a + e, 1).type == i)
                  if ((t % 2 == 0) == n > 0) d++;
                  else {
                    if (1 == d)
                      return {
                        start: c,
                        end: { from: a + e, to: a + e + 1 },
                        matched: t >> 1 == l >> 1,
                      };
                    d--;
                  }
              }
              n > 0 && (e += s.length);
            }
            return u.done ? { start: c, matched: !1 } : null;
          })(e, t, n, o, a.type, i, s);
        }
        let aM = Object.create(null),
          aL = [m.none],
          aj = [],
          aF = Object.create(null),
          aB = Object.create(null);
        for (let [e, t] of [
          ["variable", "variableName"],
          ["variable-2", "variableName.special"],
          ["string-2", "string.special"],
          ["def", "variableName.definition"],
          ["tag", "tagName"],
          ["attribute", "attributeName"],
          ["type", "typeName"],
          ["builtin", "variableName.standard"],
          ["qualifier", "modifier"],
          ["error", "invalid"],
          ["header", "heading"],
          ["property", "propertyName"],
        ])
          aB[e] = (function (e, t) {
            let n = [];
            for (let r of t.split(" ")) {
              let t = [];
              for (let n of r.split(".")) {
                let r = e[n] || eV[n];
                r
                  ? "function" == typeof r
                    ? t.length
                      ? (t = t.map(r))
                      : az(n, `Modifier ${n} used at start of tag`)
                    : t.length
                      ? az(n, `Tag ${n} used as modifier`)
                      : (t = Array.isArray(r) ? r : [r])
                  : az(n, `Unknown highlighting tag ${n}`);
              }
              for (let e of t) n.push(e);
            }
            if (!n.length) return 0;
            let r = t.replace(/ /g, "_"),
              i = r + " " + n.map((e) => e.id),
              s = aF[i];
            if (s) return s.id;
            let o = (aF[i] = m.define({
              id: aL.length,
              name: r,
              props: [eS({ [r]: n })],
            }));
            return aL.push(o), o.id;
          })(aM, t);
        function az(e, t) {
          aj.indexOf(e) > -1 || (aj.push(e), console.warn(t));
        }
        function a$(e) {
          return (
            e.length <= 4096 &&
            /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/.test(e)
          );
        }
        function aq(e) {
          for (let t = e.iter(); !t.next().done; ) if (a$(t.value)) return !0;
          return !1;
        }
        let aU = tP.define({ combine: (e) => e.some((e) => e) });
        function aH(e, t, n) {
          let r = new nu(),
            i = e.visibleRanges;
          for (let { from: s, to: o } of (n ||
            (i = (function (e, t) {
              let n = t.iter(),
                r = 0,
                i = [],
                s = null;
              for (let { from: t, to: o } of e)
                if (!s || !(s.to > t) || !((t = s.to) >= o))
                  for (
                    r + n.value.length < t &&
                    (n.next(t - (r + n.value.length)), (r = t));
                    ;

                  ) {
                    let e = r,
                      t = r + n.value.length;
                    if (
                      (!n.lineBreak &&
                        a$(n.value) &&
                        (s && s.to > e - 10
                          ? (s.to = Math.min(o, t))
                          : i.push((s = { from: e, to: Math.min(o, t) }))),
                      t >= o)
                    )
                      break;
                    (r = t), n.next();
                  }
              return i;
            })(i, e.state.doc)),
          i))
            t.iterate({
              enter: (e) => {
                let t = e.type.prop(h.isolate);
                t && r.add(e.from, e.to, aQ[t]);
              },
              from: s,
              to: o,
            });
          return r.finish();
        }
        let aQ = {
          rtl: rg.mark({
            class: "cm-iso",
            inclusive: !0,
            attributes: { dir: "rtl" },
            bidiIsolate: rC.RTL,
          }),
          ltr: rg.mark({
            class: "cm-iso",
            inclusive: !0,
            attributes: { dir: "ltr" },
            bidiIsolate: rC.LTR,
          }),
          auto: rg.mark({
            class: "cm-iso",
            inclusive: !0,
            attributes: { dir: "auto" },
            bidiIsolate: null,
          }),
        };
        class aV {
          constructor(e, t, n, r) {
            (this.state = e),
              (this.pos = t),
              (this.explicit = n),
              (this.view = r),
              (this.abortListeners = []),
              (this.abortOnDocChange = !1);
          }
          tokenBefore(e) {
            let t = oK(this.state).resolveInner(this.pos, -1);
            for (; t && 0 > e.indexOf(t.name); ) t = t.parent;
            return t
              ? {
                  from: t.from,
                  to: this.pos,
                  text: this.state.sliceDoc(t.from, this.pos),
                  type: t.type,
                }
              : null;
          }
          matchBefore(e) {
            let t = this.state.doc.lineAt(this.pos),
              n = Math.max(t.from, this.pos - 250),
              r = t.text.slice(n - t.from, this.pos - t.from),
              i = r.search(aK(e, !1));
            return i < 0
              ? null
              : { from: n + i, to: this.pos, text: r.slice(i) };
          }
          get aborted() {
            return null == this.abortListeners;
          }
          addEventListener(e, t, n) {
            "abort" == e &&
              this.abortListeners &&
              (this.abortListeners.push(t),
              n && n.onDocChange && (this.abortOnDocChange = !0));
          }
        }
        function aW(e) {
          let t = Object.keys(e).join(""),
            n = /\w/.test(t);
          return (
            n && (t = t.replace(/\w/g, "")),
            `[${n ? "\\w" : ""}${t.replace(/[^\w\s]/g, "\\$&")}]`
          );
        }
        function aZ(e) {
          let t = e.map((e) => ("string" == typeof e ? { label: e } : e)),
            [n, r] = t.every((e) => /^\w+$/.test(e.label))
              ? [/\w*$/, /\w+$/]
              : (function (e) {
                  let t = Object.create(null),
                    n = Object.create(null);
                  for (let { label: r } of e) {
                    t[r[0]] = !0;
                    for (let e = 1; e < r.length; e++) n[r[e]] = !0;
                  }
                  let r = aW(t) + aW(n) + "*$";
                  return [RegExp("^" + r), new RegExp(r)];
                })(t);
          return (e) => {
            let i = e.matchBefore(r);
            return i || e.explicit
              ? { from: i ? i.from : e.pos, options: t, validFor: n }
              : null;
          };
        }
        class aG {
          constructor(e, t, n, r) {
            (this.completion = e),
              (this.source = t),
              (this.match = n),
              (this.score = r);
          }
        }
        function aY(e) {
          return e.selection.main.from;
        }
        function aK(e, t) {
          var n;
          let { source: r } = e,
            i = t && "^" != r[0],
            s = "$" != r[r.length - 1];
          return i || s
            ? RegExp(
                `${i ? "^" : ""}(?:${r})${s ? "$" : ""}`,
                null != (n = e.flags) ? n : e.ignoreCase ? "i" : "",
              )
            : e;
        }
        let aX = t2.define(),
          aJ = new WeakMap();
        function a0(e) {
          if (!Array.isArray(e)) return e;
          let t = aJ.get(e);
          return t || aJ.set(e, (t = aZ(e))), t;
        }
        let a1 = t4.define(),
          a2 = t4.define();
        class a5 {
          constructor(e) {
            (this.pattern = e),
              (this.chars = []),
              (this.folded = []),
              (this.any = []),
              (this.precise = []),
              (this.byWord = []),
              (this.score = 0),
              (this.matched = []);
            for (let t = 0; t < e.length; ) {
              let n = tg(e, t),
                r = tv(n);
              this.chars.push(n);
              let i = e.slice(t, t + r),
                s = i.toUpperCase();
              this.folded.push(tg(s == i ? i.toLowerCase() : s, 0)), (t += r);
            }
            this.astral = e.length != this.chars.length;
          }
          ret(e, t) {
            return (this.score = e), (this.matched = t), this;
          }
          match(e) {
            if (0 == this.pattern.length) return this.ret(-100, []);
            if (e.length < this.pattern.length) return null;
            let { chars: t, folded: n, any: r, precise: i, byWord: s } = this;
            if (1 == t.length) {
              let r = tg(e, 0),
                i = tv(r),
                s = i == e.length ? 0 : -100;
              if (r == t[0]);
              else {
                if (r != n[0]) return null;
                s += -200;
              }
              return this.ret(s, [0, i]);
            }
            let o = e.indexOf(this.pattern);
            if (0 == o)
              return this.ret(e.length == this.pattern.length ? 0 : -100, [
                0,
                this.pattern.length,
              ]);
            let a = t.length,
              l = 0;
            if (o < 0) {
              for (let i = 0, s = Math.min(e.length, 200); i < s && l < a; ) {
                let s = tg(e, i);
                (s == t[l] || s == n[l]) && (r[l++] = i), (i += tv(s));
              }
              if (l < a) return null;
            }
            let c = 0,
              u = 0,
              d = !1,
              h = 0,
              p = -1,
              f = -1,
              m = /[a-z]/.test(e),
              g = !0;
            for (
              let r = 0, l = Math.min(e.length, 200), y = 0;
              r < l && u < a;

            ) {
              let l = tg(e, r);
              o < 0 &&
                (c < a && l == t[c] && (i[c++] = r),
                h < a &&
                  (l == t[h] || l == n[h]
                    ? (0 == h && (p = r), (f = r + 1), h++)
                    : (h = 0)));
              let v,
                b =
                  l < 255
                    ? (l >= 48 && l <= 57) || (l >= 97 && l <= 122)
                      ? 2
                      : +(l >= 65 && l <= 90)
                    : (v = ty(l)) != v.toLowerCase()
                      ? 1
                      : 2 * (v != v.toUpperCase());
              (!r || (1 == b && m) || (0 == y && 0 != b)) &&
                (t[u] == l || (n[u] == l && (d = !0))
                  ? (s[u++] = r)
                  : s.length && (g = !1)),
                (y = b),
                (r += tv(l));
            }
            return u == a && 0 == s[0] && g
              ? this.result(-100 + (d ? -200 : 0), s, e)
              : h == a && 0 == p
                ? this.ret(-200 - e.length + (f == e.length ? 0 : -100), [0, f])
                : o > -1
                  ? this.ret(-700 - e.length, [o, o + this.pattern.length])
                  : h == a
                    ? this.ret(-900 - e.length, [p, f])
                    : u == a
                      ? this.result(
                          -100 + (d ? -200 : 0) + -700 + (g ? 0 : -1100),
                          s,
                          e,
                        )
                      : 2 == t.length
                        ? null
                        : this.result((r[0] ? -700 : 0) + -200 + -1100, r, e);
          }
          result(e, t, n) {
            let r = [],
              i = 0;
            for (let e of t) {
              let t = e + (this.astral ? tv(tg(n, e)) : 1);
              i && r[i - 1] == e
                ? (r[i - 1] = t)
                : ((r[i++] = e), (r[i++] = t));
            }
            return this.ret(e - n.length, r);
          }
        }
        class a3 {
          constructor(e) {
            (this.pattern = e),
              (this.matched = []),
              (this.score = 0),
              (this.folded = e.toLowerCase());
          }
          match(e) {
            if (e.length < this.pattern.length) return null;
            let t = e.slice(0, this.pattern.length),
              n =
                t == this.pattern
                  ? 0
                  : t.toLowerCase() == this.folded
                    ? -200
                    : null;
            return null == n
              ? null
              : ((this.matched = [0, t.length]),
                (this.score = n + (e.length == this.pattern.length ? 0 : -100)),
                this);
          }
        }
        let a4 = tP.define({
          combine: (e) =>
            ni(
              e,
              {
                activateOnTyping: !0,
                activateOnCompletion: () => !1,
                activateOnTypingDelay: 100,
                selectOnOpen: !0,
                override: null,
                closeOnBlur: !0,
                maxRenderedOptions: 100,
                defaultKeymap: !0,
                tooltipClass: () => "",
                optionClass: () => "",
                aboveCursor: !1,
                icons: !0,
                addToOptions: [],
                positionInfo: a6,
                filterStrict: !1,
                compareCompletions: (e, t) => e.label.localeCompare(t.label),
                interactionDelay: 75,
                updateSyncTime: 100,
              },
              {
                defaultKeymap: (e, t) => e && t,
                closeOnBlur: (e, t) => e && t,
                icons: (e, t) => e && t,
                tooltipClass: (e, t) => (n) => a8(e(n), t(n)),
                optionClass: (e, t) => (n) => a8(e(n), t(n)),
                addToOptions: (e, t) => e.concat(t),
                filterStrict: (e, t) => e || t,
              },
            ),
        });
        function a8(e, t) {
          return e ? (t ? e + " " + t : e) : t;
        }
        function a6(e, t, n, r, i, s) {
          let o = e.textDirection == rC.RTL,
            a = o,
            l = !1,
            c = "top",
            u,
            d,
            h = t.left - i.left,
            p = i.right - t.right,
            f = r.right - r.left,
            m = r.bottom - r.top;
          if (
            (a && h < Math.min(f, p)
              ? (a = !1)
              : !a && p < Math.min(f, h) && (a = !0),
            f <= (a ? h : p))
          )
            (u = Math.max(i.top, Math.min(n.top, i.bottom - m)) - t.top),
              (d = Math.min(400, a ? h : p));
          else {
            (l = !0),
              (d = Math.min(400, (o ? t.right : i.right - t.left) - 30));
            let e = i.bottom - t.bottom;
            e >= m || e > t.top
              ? (u = n.bottom - t.top)
              : ((c = "bottom"), (u = t.bottom - n.top));
          }
          let g = (t.bottom - t.top) / s.offsetHeight,
            y = (t.right - t.left) / s.offsetWidth;
          return {
            style: `${c}: ${u / g}px; max-width: ${d / y}px`,
            class:
              "cm-completionInfo-" +
              (l ? (o ? "left-narrow" : "right-narrow") : a ? "left" : "right"),
          };
        }
        function a9(e, t, n) {
          if (e <= n) return { from: 0, to: e };
          if ((t < 0 && (t = 0), t <= e >> 1)) {
            let e = Math.floor(t / n);
            return { from: e * n, to: (e + 1) * n };
          }
          let r = Math.floor((e - t) / n);
          return { from: e - (r + 1) * n, to: e - r * n };
        }
        class a7 {
          constructor(e, t, n) {
            (this.view = e),
              (this.stateField = t),
              (this.applyCompletion = n),
              (this.info = null),
              (this.infoDestroy = null),
              (this.placeInfoReq = {
                read: () => this.measureInfo(),
                write: (e) => this.placeInfo(e),
                key: this,
              }),
              (this.space = null),
              (this.currentClass = "");
            let r = e.state.field(t),
              { options: i, selected: s } = r.open,
              o = e.state.facet(a4);
            (this.optionContent = (function (e) {
              let t = e.addToOptions.slice();
              return (
                e.icons &&
                  t.push({
                    render(e) {
                      let t = document.createElement("div");
                      return (
                        t.classList.add("cm-completionIcon"),
                        e.type &&
                          t.classList.add(
                            ...e.type
                              .split(/\s+/g)
                              .map((e) => "cm-completionIcon-" + e),
                          ),
                        t.setAttribute("aria-hidden", "true"),
                        t
                      );
                    },
                    position: 20,
                  }),
                t.push(
                  {
                    render(e, t, n, r) {
                      let i = document.createElement("span");
                      i.className = "cm-completionLabel";
                      let s = e.displayLabel || e.label,
                        o = 0;
                      for (let e = 0; e < r.length; ) {
                        let t = r[e++],
                          n = r[e++];
                        t > o &&
                          i.appendChild(document.createTextNode(s.slice(o, t)));
                        let a = i.appendChild(document.createElement("span"));
                        a.appendChild(document.createTextNode(s.slice(t, n))),
                          (a.className = "cm-completionMatchedText"),
                          (o = n);
                      }
                      return (
                        o < s.length &&
                          i.appendChild(document.createTextNode(s.slice(o))),
                        i
                      );
                    },
                    position: 50,
                  },
                  {
                    render(e) {
                      if (!e.detail) return null;
                      let t = document.createElement("span");
                      return (
                        (t.className = "cm-completionDetail"),
                        (t.textContent = e.detail),
                        t
                      );
                    },
                    position: 80,
                  },
                ),
                t.sort((e, t) => e.position - t.position).map((e) => e.render)
              );
            })(o)),
              (this.optionClass = o.optionClass),
              (this.tooltipClass = o.tooltipClass),
              (this.range = a9(i.length, s, o.maxRenderedOptions)),
              (this.dom = document.createElement("div")),
              (this.dom.className = "cm-tooltip-autocomplete"),
              this.updateTooltipClass(e.state),
              this.dom.addEventListener("mousedown", (n) => {
                let { options: r } = e.state.field(t).open;
                for (let t = n.target, i; t && t != this.dom; t = t.parentNode)
                  if (
                    "LI" == t.nodeName &&
                    (i = /-(\d+)$/.exec(t.id)) &&
                    +i[1] < r.length
                  ) {
                    this.applyCompletion(e, r[+i[1]]), n.preventDefault();
                    return;
                  }
              }),
              this.dom.addEventListener("focusout", (t) => {
                let n = e.state.field(this.stateField, !1);
                n &&
                  n.tooltip &&
                  e.state.facet(a4).closeOnBlur &&
                  t.relatedTarget != e.contentDOM &&
                  e.dispatch({ effects: a2.of(null) });
              }),
              this.showOptions(i, r.id);
          }
          mount() {
            this.updateSel();
          }
          showOptions(e, t) {
            this.list && this.list.remove(),
              (this.list = this.dom.appendChild(
                this.createListBox(e, t, this.range),
              )),
              this.list.addEventListener("scroll", () => {
                this.info && this.view.requestMeasure(this.placeInfoReq);
              });
          }
          update(e) {
            var t;
            let n = e.state.field(this.stateField),
              r = e.startState.field(this.stateField);
            if ((this.updateTooltipClass(e.state), n != r)) {
              let { options: i, selected: s, disabled: o } = n.open;
              (r.open && r.open.options == i) ||
                ((this.range = a9(
                  i.length,
                  s,
                  e.state.facet(a4).maxRenderedOptions,
                )),
                this.showOptions(i, n.id)),
                this.updateSel(),
                o != (null == (t = r.open) ? void 0 : t.disabled) &&
                  this.dom.classList.toggle(
                    "cm-tooltip-autocomplete-disabled",
                    !!o,
                  );
            }
          }
          updateTooltipClass(e) {
            let t = this.tooltipClass(e);
            if (t != this.currentClass) {
              for (let e of this.currentClass.split(" "))
                e && this.dom.classList.remove(e);
              for (let e of t.split(" ")) e && this.dom.classList.add(e);
              this.currentClass = t;
            }
          }
          positioned(e) {
            (this.space = e),
              this.info && this.view.requestMeasure(this.placeInfoReq);
          }
          updateSel() {
            let e = this.view.state.field(this.stateField),
              t = e.open;
            if (
              (((t.selected > -1 && t.selected < this.range.from) ||
                t.selected >= this.range.to) &&
                ((this.range = a9(
                  t.options.length,
                  t.selected,
                  this.view.state.facet(a4).maxRenderedOptions,
                )),
                this.showOptions(t.options, e.id)),
              this.updateSelectedOption(t.selected))
            ) {
              this.destroyInfo();
              let { completion: n } = t.options[t.selected],
                { info: r } = n;
              if (!r) return;
              let i = "string" == typeof r ? document.createTextNode(r) : r(n);
              if (!i) return;
              "then" in i
                ? i
                    .then((t) => {
                      t &&
                        this.view.state.field(this.stateField, !1) == e &&
                        this.addInfoPane(t, n);
                    })
                    .catch((e) => r5(this.view.state, e, "completion info"))
                : this.addInfoPane(i, n);
            }
          }
          addInfoPane(e, t) {
            this.destroyInfo();
            let n = (this.info = document.createElement("div"));
            if (
              ((n.className = "cm-tooltip cm-completionInfo"),
              null != e.nodeType)
            )
              n.appendChild(e), (this.infoDestroy = null);
            else {
              let { dom: t, destroy: r } = e;
              n.appendChild(t), (this.infoDestroy = r || null);
            }
            this.dom.appendChild(n),
              this.view.requestMeasure(this.placeInfoReq);
          }
          updateSelectedOption(e) {
            var t, n;
            let r,
              i,
              s,
              o = null;
            for (
              let t = this.list.firstChild, n = this.range.from;
              t;
              t = t.nextSibling, n++
            )
              "LI" == t.nodeName && t.id
                ? n == e
                  ? t.hasAttribute("aria-selected") ||
                    (t.setAttribute("aria-selected", "true"), (o = t))
                  : t.hasAttribute("aria-selected") &&
                    t.removeAttribute("aria-selected")
                : n--;
            return (
              o &&
                ((t = this.list),
                (n = o),
                (r = t.getBoundingClientRect()),
                (i = n.getBoundingClientRect()),
                (s = r.height / t.offsetHeight),
                i.top < r.top
                  ? (t.scrollTop -= (r.top - i.top) / s)
                  : i.bottom > r.bottom &&
                    (t.scrollTop += (i.bottom - r.bottom) / s)),
              o
            );
          }
          measureInfo() {
            let e = this.dom.querySelector("[aria-selected]");
            if (!e || !this.info) return null;
            let t = this.dom.getBoundingClientRect(),
              n = this.info.getBoundingClientRect(),
              r = e.getBoundingClientRect(),
              i = this.space;
            if (!i) {
              let e = this.dom.ownerDocument.documentElement;
              i = {
                left: 0,
                top: 0,
                right: e.clientWidth,
                bottom: e.clientHeight,
              };
            }
            return r.top > Math.min(i.bottom, t.bottom) - 10 ||
              r.bottom < Math.max(i.top, t.top) + 10
              ? null
              : this.view.state
                  .facet(a4)
                  .positionInfo(this.view, t, r, n, i, this.dom);
          }
          placeInfo(e) {
            this.info &&
              (e
                ? (e.style && (this.info.style.cssText = e.style),
                  (this.info.className =
                    "cm-tooltip cm-completionInfo " + (e.class || "")))
                : (this.info.style.cssText = "top: -1e6px"));
          }
          createListBox(e, t, n) {
            let r = document.createElement("ul");
            (r.id = t),
              r.setAttribute("role", "listbox"),
              r.setAttribute("aria-expanded", "true"),
              r.setAttribute(
                "aria-label",
                this.view.state.phrase("Completions"),
              ),
              r.addEventListener("mousedown", (e) => {
                e.target == r && e.preventDefault();
              });
            let i = null;
            for (let s = n.from; s < n.to; s++) {
              let { completion: o, match: a } = e[s],
                { section: l } = o;
              if (l) {
                let e = "string" == typeof l ? l : l.name;
                e != i &&
                  (s > n.from || 0 == n.from) &&
                  ((i = e),
                  "string" != typeof l && l.header
                    ? r.appendChild(l.header(l))
                    : (r.appendChild(
                        document.createElement("completion-section"),
                      ).textContent = e));
              }
              let c = r.appendChild(document.createElement("li"));
              (c.id = t + "-" + s), c.setAttribute("role", "option");
              let u = this.optionClass(o);
              for (let e of (u && (c.className = u), this.optionContent)) {
                let t = e(o, this.view.state, this.view, a);
                t && c.appendChild(t);
              }
            }
            return (
              n.from && r.classList.add("cm-completionListIncompleteTop"),
              n.to < e.length &&
                r.classList.add("cm-completionListIncompleteBottom"),
              r
            );
          }
          destroyInfo() {
            this.info &&
              (this.infoDestroy && this.infoDestroy(),
              this.info.remove(),
              (this.info = null));
          }
          destroy() {
            this.destroyInfo();
          }
        }
        function le(e) {
          return (
            100 * (e.boost || 0) + 10 * !!e.apply + 5 * !!e.info + +!!e.type
          );
        }
        class lt {
          constructor(e, t, n, r, i, s) {
            (this.options = e),
              (this.attrs = t),
              (this.tooltip = n),
              (this.timestamp = r),
              (this.selected = i),
              (this.disabled = s);
          }
          setSelected(e, t) {
            return e == this.selected || e >= this.options.length
              ? this
              : new lt(
                  this.options,
                  ls(t, e),
                  this.tooltip,
                  this.timestamp,
                  e,
                  this.disabled,
                );
          }
          static build(e, t, n, r, i, s) {
            if (r && !s && e.some((e) => e.isPending)) return r.setDisabled();
            let o = (function (e, t) {
              let n = [],
                r = null,
                i = (e) => {
                  n.push(e);
                  let { section: t } = e.completion;
                  if (t) {
                    r || (r = []);
                    let e = "string" == typeof t ? t : t.name;
                    r.some((t) => t.name == e) ||
                      r.push("string" == typeof t ? { name: e } : t);
                  }
                },
                s = t.facet(a4);
              for (let r of e)
                if (r.hasResult()) {
                  let e = r.result.getMatch;
                  if (!1 === r.result.filter)
                    for (let t of r.result.options)
                      i(new aG(t, r.source, e ? e(t) : [], 1e9 - n.length));
                  else {
                    let n = t.sliceDoc(r.from, r.to),
                      o,
                      a = s.filterStrict ? new a3(n) : new a5(n);
                    for (let t of r.result.options)
                      if ((o = a.match(t.label))) {
                        let n = t.displayLabel
                          ? e
                            ? e(t, o.matched)
                            : []
                          : o.matched;
                        i(new aG(t, r.source, n, o.score + (t.boost || 0)));
                      }
                  }
                }
              if (r) {
                let e = Object.create(null),
                  t = 0;
                for (let n of r.sort((e, t) => {
                  var n, r;
                  return (
                    (null != (n = e.rank) ? n : 1e9) -
                      (null != (r = t.rank) ? r : 1e9) ||
                    (e.name < t.name ? -1 : 1)
                  );
                }))
                  (t -= 1e5), (e[n.name] = t);
                for (let t of n) {
                  let { section: n } = t.completion;
                  n && (t.score += e["string" == typeof n ? n : n.name]);
                }
              }
              let o = [],
                a = null,
                l = s.compareCompletions;
              for (let e of n.sort(
                (e, t) => t.score - e.score || l(e.completion, t.completion),
              )) {
                let t = e.completion;
                a &&
                a.label == t.label &&
                a.detail == t.detail &&
                (null == a.type || null == t.type || a.type == t.type) &&
                a.apply == t.apply &&
                a.boost == t.boost
                  ? le(e.completion) > le(a) && (o[o.length - 1] = e)
                  : o.push(e),
                  (a = e.completion);
              }
              return o;
            })(e, t);
            if (!o.length)
              return r && e.some((e) => e.isPending) ? r.setDisabled() : null;
            let a = t.facet(a4).selectOnOpen ? 0 : -1;
            if (r && r.selected != a && -1 != r.selected) {
              let e = r.options[r.selected].completion;
              for (let t = 0; t < o.length; t++)
                if (o[t].completion == e) {
                  a = t;
                  break;
                }
            }
            return new lt(
              o,
              ls(n, a),
              {
                pos: e.reduce(
                  (e, t) => (t.hasResult() ? Math.min(e, t.from) : e),
                  1e8,
                ),
                create: lf,
                above: i.aboveCursor,
              },
              r ? r.timestamp : Date.now(),
              a,
              !1,
            );
          }
          map(e) {
            return new lt(
              this.options,
              this.attrs,
              Object.assign(Object.assign({}, this.tooltip), {
                pos: e.mapPos(this.tooltip.pos),
              }),
              this.timestamp,
              this.selected,
              this.disabled,
            );
          }
          setDisabled() {
            return new lt(
              this.options,
              this.attrs,
              this.tooltip,
              this.timestamp,
              this.selected,
              !0,
            );
          }
        }
        class ln {
          constructor(e, t, n) {
            (this.active = e), (this.id = t), (this.open = n);
          }
          static start() {
            return new ln(
              lo,
              "cm-ac-" + Math.floor(2e6 * Math.random()).toString(36),
              null,
            );
          }
          update(e) {
            let { state: t } = e,
              n = t.facet(a4),
              r = (
                n.override || t.languageDataAt("autocomplete", aY(t)).map(a0)
              ).map((t) =>
                (
                  this.active.find((e) => e.source == t) ||
                  new ll(t, +!!this.active.some((e) => 0 != e.state))
                ).update(e, n),
              );
            r.length == this.active.length &&
              r.every((e, t) => e == this.active[t]) &&
              (r = this.active);
            let i = this.open,
              s = e.effects.some((e) => e.is(lu));
            for (let o of (i && e.docChanged && (i = i.map(e.changes)),
            e.selection ||
            r.some(
              (t) => t.hasResult() && e.changes.touchesRange(t.from, t.to),
            ) ||
            !(function (e, t) {
              if (e == t) return !0;
              for (let n = 0, r = 0; ; ) {
                for (; n < e.length && !e[n].hasResult(); ) n++;
                for (; r < t.length && !t[r].hasResult(); ) r++;
                let i = n == e.length,
                  s = r == t.length;
                if (i || s) return i == s;
                if (e[n++].result != t[r++].result) return !1;
              }
            })(r, this.active) ||
            s
              ? (i = lt.build(r, t, this.id, i, n, s))
              : i && i.disabled && !r.some((e) => e.isPending) && (i = null),
            !i &&
              r.every((e) => !e.isPending) &&
              r.some((e) => e.hasResult()) &&
              (r = r.map((e) => (e.hasResult() ? new ll(e.source, 0) : e))),
            e.effects))
              o.is(ld) && (i = i && i.setSelected(o.value, this.id));
            return r == this.active && i == this.open
              ? this
              : new ln(r, this.id, i);
          }
          get tooltip() {
            return this.open ? this.open.tooltip : null;
          }
          get attrs() {
            return this.open ? this.open.attrs : this.active.length ? lr : li;
          }
        }
        let lr = { "aria-autocomplete": "list" },
          li = {};
        function ls(e, t) {
          let n = {
            "aria-autocomplete": "list",
            "aria-haspopup": "listbox",
            "aria-controls": e,
          };
          return t > -1 && (n["aria-activedescendant"] = e + "-" + t), n;
        }
        let lo = [];
        function la(e, t) {
          if (e.isUserEvent("input.complete")) {
            let n = e.annotation(aX);
            if (n && t.activateOnCompletion(n)) return 12;
          }
          let n = e.isUserEvent("input.type");
          return n && t.activateOnTyping
            ? 5
            : n
              ? 1
              : e.isUserEvent("delete.backward")
                ? 2
                : e.selection
                  ? 8
                  : 16 * !!e.docChanged;
        }
        class ll {
          constructor(e, t, n = !1) {
            (this.source = e), (this.state = t), (this.explicit = n);
          }
          hasResult() {
            return !1;
          }
          get isPending() {
            return 1 == this.state;
          }
          update(e, t) {
            let n = la(e, t),
              r = this;
            for (let t of ((8 & n || (16 & n && this.touches(e))) &&
              (r = new ll(r.source, 0)),
            4 & n && 0 == r.state && (r = new ll(this.source, 1)),
            (r = r.updateFor(e, n)),
            e.effects))
              if (t.is(a1)) r = new ll(r.source, 1, t.value);
              else if (t.is(a2)) r = new ll(r.source, 0);
              else if (t.is(lu))
                for (let e of t.value) e.source == r.source && (r = e);
            return r;
          }
          updateFor(e, t) {
            return this.map(e.changes);
          }
          map(e) {
            return this;
          }
          touches(e) {
            return e.changes.touchesRange(aY(e.state));
          }
        }
        class lc extends ll {
          constructor(e, t, n, r, i, s) {
            super(e, 3, t),
              (this.limit = n),
              (this.result = r),
              (this.from = i),
              (this.to = s);
          }
          hasResult() {
            return !0;
          }
          updateFor(e, t) {
            var n;
            if (!(3 & t)) return this.map(e.changes);
            let r = this.result;
            r.map && !e.changes.empty && (r = r.map(r, e.changes));
            let i = e.changes.mapPos(this.from),
              s = e.changes.mapPos(this.to, 1),
              o = aY(e.state);
            if (
              o > s ||
              !r ||
              (2 & t && (aY(e.startState) == this.from || o < this.limit))
            )
              return new ll(this.source, 4 & t ? 1 : 0);
            let a = e.changes.mapPos(this.limit);
            return !(function (e, t, n, r) {
              if (!e) return !1;
              let i = t.sliceDoc(n, r);
              return "function" == typeof e ? e(i, n, r, t) : aK(e, !0).test(i);
            })(r.validFor, e.state, i, s)
              ? r.update && (r = r.update(r, i, s, new aV(e.state, o, !1)))
                ? new lc(
                    this.source,
                    this.explicit,
                    a,
                    r,
                    r.from,
                    null != (n = r.to) ? n : aY(e.state),
                  )
                : new ll(this.source, 1, this.explicit)
              : new lc(this.source, this.explicit, a, r, i, s);
          }
          map(e) {
            return e.empty
              ? this
              : (
                    this.result.map
                      ? this.result.map(this.result, e)
                      : this.result
                  )
                ? new lc(
                    this.source,
                    this.explicit,
                    e.mapPos(this.limit),
                    this.result,
                    e.mapPos(this.from),
                    e.mapPos(this.to, 1),
                  )
                : new ll(this.source, 0);
          }
          touches(e) {
            return e.changes.touchesRange(this.from, this.to);
          }
        }
        let lu = t4.define({ map: (e, t) => e.map((e) => e.map(t)) }),
          ld = t4.define(),
          lh = tB.define({
            create: () => ln.start(),
            update: (e, t) => e.update(t),
            provide: (e) => [
              oc.from(e, (e) => e.tooltip),
              sI.contentAttributes.from(e, (e) => e.attrs),
            ],
          });
        function lp(e, t) {
          let n = t.completion.apply || t.completion.label,
            r = e.state.field(lh).active.find((e) => e.source == t.source);
          return (
            r instanceof lc &&
            ("string" == typeof n
              ? e.dispatch(
                  Object.assign(
                    Object.assign(
                      {},
                      (function (e, t, n, r) {
                        let { main: i } = e.selection,
                          s = n - i.from,
                          o = r - i.from;
                        return Object.assign(
                          Object.assign(
                            {},
                            e.changeByRange((a) => {
                              if (
                                a != i &&
                                n != r &&
                                e.sliceDoc(a.from + s, a.from + o) !=
                                  e.sliceDoc(n, r)
                              )
                                return { range: a };
                              let l = e.toText(t);
                              return {
                                changes: {
                                  from: a.from + s,
                                  to: r == i.from ? a.to : a.from + o,
                                  insert: l,
                                },
                                range: tN.cursor(a.from + s + l.length),
                              };
                            }),
                          ),
                          { scrollIntoView: !0, userEvent: "input.complete" },
                        );
                      })(e.state, n, r.from, r.to),
                    ),
                    { annotations: aX.of(t.completion) },
                  ),
                )
              : n(e, t.completion, r.from, r.to),
            !0)
          );
        }
        let lf = (e) => new a7(e, lh, lp);
        function lm(e, t = "option") {
          return (n) => {
            let r = n.state.field(lh, !1);
            if (
              !r ||
              !r.open ||
              r.open.disabled ||
              Date.now() - r.open.timestamp < n.state.facet(a4).interactionDelay
            )
              return !1;
            let i = 1,
              s;
            "page" == t &&
              (s = of(n, r.open.tooltip)) &&
              (i = Math.max(
                2,
                Math.floor(
                  s.dom.offsetHeight / s.dom.querySelector("li").offsetHeight,
                ) - 1,
              ));
            let { length: o } = r.open.options,
              a =
                r.open.selected > -1
                  ? r.open.selected + i * (e ? 1 : -1)
                  : e
                    ? 0
                    : o - 1;
            return (
              a < 0
                ? (a = "page" == t ? 0 : o - 1)
                : a >= o && (a = "page" == t ? o - 1 : 0),
              n.dispatch({ effects: ld.of(a) }),
              !0
            );
          };
        }
        let lg = (e) =>
          !!e.state.field(lh, !1) && (e.dispatch({ effects: a1.of(!0) }), !0);
        class ly {
          constructor(e, t) {
            (this.active = e),
              (this.context = t),
              (this.time = Date.now()),
              (this.updates = []),
              (this.done = void 0);
          }
        }
        let lv = "object" == typeof navigator && /Win/.test(navigator.platform),
          lb = sI.baseTheme({
            ".cm-tooltip.cm-tooltip-autocomplete": {
              "& > ul": {
                fontFamily: "monospace",
                whiteSpace: "nowrap",
                overflow: "hidden auto",
                maxWidth_fallback: "700px",
                maxWidth: "min(700px, 95vw)",
                minWidth: "250px",
                maxHeight: "10em",
                height: "100%",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li, & > completion-section": {
                  padding: "1px 3px",
                  lineHeight: 1.2,
                },
                "& > li": {
                  overflowX: "hidden",
                  textOverflow: "ellipsis",
                  cursor: "pointer",
                },
                "& > completion-section": {
                  display: "list-item",
                  borderBottom: "1px solid silver",
                  paddingLeft: "0.5em",
                  opacity: 0.7,
                },
              },
            },
            "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
              background: "#17c",
              color: "white",
            },
            "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
              background: "#777",
            },
            "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
              background: "#347",
              color: "white",
            },
            "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
              background: "#444",
            },
            ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after":
              {
                content: '"\xb7\xb7\xb7"',
                opacity: 0.5,
                display: "block",
                textAlign: "center",
              },
            ".cm-tooltip.cm-completionInfo": {
              position: "absolute",
              padding: "3px 9px",
              width: "max-content",
              maxWidth: "400px",
              boxSizing: "border-box",
              whiteSpace: "pre-line",
            },
            ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
            ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
            ".cm-completionInfo.cm-completionInfo-left-narrow": {
              right: "30px",
            },
            ".cm-completionInfo.cm-completionInfo-right-narrow": {
              left: "30px",
            },
            "&light .cm-snippetField": { backgroundColor: "#00000022" },
            "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
            ".cm-snippetFieldPosition": {
              verticalAlign: "text-top",
              width: 0,
              height: "1.15em",
              display: "inline-block",
              margin: "0 -0.7px -.7em",
              borderLeft: "1.4px dotted #888",
            },
            ".cm-completionMatchedText": { textDecoration: "underline" },
            ".cm-completionDetail": {
              marginLeft: "0.5em",
              fontStyle: "italic",
            },
            ".cm-completionIcon": {
              fontSize: "90%",
              width: ".8em",
              display: "inline-block",
              textAlign: "center",
              paddingRight: ".6em",
              opacity: "0.6",
              boxSizing: "content-box",
            },
            ".cm-completionIcon-function, .cm-completionIcon-method": {
              "&:after": { content: "'ƒ'" },
            },
            ".cm-completionIcon-class": { "&:after": { content: "'○'" } },
            ".cm-completionIcon-interface": { "&:after": { content: "'◌'" } },
            ".cm-completionIcon-variable": {
              "&:after": { content: "'\uD835\uDC65'" },
            },
            ".cm-completionIcon-constant": {
              "&:after": { content: "'\uD835\uDC36'" },
            },
            ".cm-completionIcon-type": {
              "&:after": { content: "'\uD835\uDC61'" },
            },
            ".cm-completionIcon-enum": { "&:after": { content: "'∪'" } },
            ".cm-completionIcon-property": { "&:after": { content: "'□'" } },
            ".cm-completionIcon-keyword": {
              "&:after": { content: "'\uD83D\uDD11︎'" },
            },
            ".cm-completionIcon-namespace": { "&:after": { content: "'▢'" } },
            ".cm-completionIcon-text": {
              "&:after": {
                content: "'abc'",
                fontSize: "50%",
                verticalAlign: "middle",
              },
            },
          });
        class lx {
          constructor(e, t, n, r) {
            (this.field = e), (this.line = t), (this.from = n), (this.to = r);
          }
        }
        class lk {
          constructor(e, t, n) {
            (this.field = e), (this.from = t), (this.to = n);
          }
          map(e) {
            let t = e.mapPos(this.from, -1, tx.TrackDel),
              n = e.mapPos(this.to, 1, tx.TrackDel);
            return null == t || null == n ? null : new lk(this.field, t, n);
          }
        }
        class lw {
          constructor(e, t) {
            (this.lines = e), (this.fieldPositions = t);
          }
          instantiate(e, t) {
            let n = [],
              r = [t],
              i = e.doc.lineAt(t),
              s = /^\s*/.exec(i.text)[0];
            for (let i of this.lines) {
              if (n.length) {
                let n = s,
                  o = /^\t*/.exec(i)[0].length;
                for (let t = 0; t < o; t++) n += e.facet(o9);
                r.push(t + n.length - o), (i = n + i.slice(o));
              }
              n.push(i), (t += i.length + 1);
            }
            return {
              text: n,
              ranges: this.fieldPositions.map(
                (e) => new lk(e.field, r[e.line] + e.from, r[e.line] + e.to),
              ),
            };
          }
          static parse(e) {
            let t = [],
              n = [],
              r = [],
              i;
            for (let s of e.split(/\r\n?|\n/)) {
              for (
                ;
                (i = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(
                  s,
                ));

              ) {
                let e = i[1] ? +i[1] : null,
                  o = i[2] || i[3] || "",
                  a = -1,
                  l = o.replace(/\\[{}]/g, (e) => e[1]);
                for (let n = 0; n < t.length; n++)
                  (null != e ? t[n].seq == e : l && t[n].name == l) && (a = n);
                if (a < 0) {
                  let n = 0;
                  for (
                    ;
                    n < t.length &&
                    (null == e || (null != t[n].seq && t[n].seq < e));

                  )
                    n++;
                  for (let i of (t.splice(n, 0, { seq: e, name: l }),
                  (a = n),
                  r))
                    i.field >= a && i.field++;
                }
                r.push(new lx(a, n.length, i.index, i.index + l.length)),
                  (s =
                    s.slice(0, i.index) + o + s.slice(i.index + i[0].length));
              }
              (s = s.replace(/\\([{}])/g, (e, t, i) => {
                for (let e of r)
                  e.line == n.length && e.from > i && (e.from--, e.to--);
                return t;
              })),
                n.push(s);
            }
            return new lw(n, r);
          }
        }
        let l_ = rg.widget({
            widget: new (class extends rf {
              toDOM() {
                let e = document.createElement("span");
                return (e.className = "cm-snippetFieldPosition"), e;
              }
              ignoreEvent() {
                return !1;
              }
            })(),
          }),
          lO = rg.mark({ class: "cm-snippetField" });
        class lT {
          constructor(e, t) {
            (this.ranges = e),
              (this.active = t),
              (this.deco = rg.set(
                e.map((e) => (e.from == e.to ? l_ : lO).range(e.from, e.to)),
              ));
          }
          map(e) {
            let t = [];
            for (let n of this.ranges) {
              let r = n.map(e);
              if (!r) return null;
              t.push(r);
            }
            return new lT(t, this.active);
          }
          selectionInsideField(e) {
            return e.ranges.every((e) =>
              this.ranges.some(
                (t) =>
                  t.field == this.active && t.from <= e.from && t.to >= e.to,
              ),
            );
          }
        }
        let lS = t4.define({ map: (e, t) => e && e.map(t) }),
          lE = t4.define(),
          lC = tB.define({
            create: () => null,
            update(e, t) {
              for (let n of t.effects) {
                if (n.is(lS)) return n.value;
                if (n.is(lE) && e) return new lT(e.ranges, n.value);
              }
              return (
                e && t.docChanged && (e = e.map(t.changes)),
                e &&
                  t.selection &&
                  !e.selectionInsideField(t.selection) &&
                  (e = null),
                e
              );
            },
            provide: (e) =>
              sI.decorations.from(e, (e) => (e ? e.deco : rg.none)),
          });
        function lA(e, t) {
          return tN.create(
            e.filter((e) => e.field == t).map((e) => tN.range(e.from, e.to)),
          );
        }
        function lN(e) {
          return ({ state: t, dispatch: n }) => {
            let r = t.field(lC, !1);
            if (!r || (e < 0 && 0 == r.active)) return !1;
            let i = r.active + e,
              s = e > 0 && !r.ranges.some((t) => t.field == i + e);
            return (
              n(
                t.update({
                  selection: lA(r.ranges, i),
                  effects: lS.of(s ? null : new lT(r.ranges, i)),
                  scrollIntoView: !0,
                }),
              ),
              !0
            );
          };
        }
        let lI = lN(1),
          lD = [
            { key: "Tab", run: lI, shift: lN(-1) },
            {
              key: "Escape",
              run: ({ state: e, dispatch: t }) =>
                !!e.field(lC, !1) &&
                (t(e.update({ effects: lS.of(null) })), !0),
            },
          ],
          lP = tP.define({ combine: (e) => (e.length ? e[0] : lD) }),
          lR = tq.highest(sB.compute([lP], (e) => e.facet(lP)));
        function lM(e, t) {
          let n;
          return Object.assign(Object.assign({}, t), {
            apply:
              ((n = lw.parse(e)),
              (e, t, r, i) => {
                let { text: s, ranges: o } = n.instantiate(e.state, r),
                  { main: a } = e.state.selection,
                  l = {
                    changes: {
                      from: r,
                      to: i == a.from ? a.to : i,
                      insert: to.of(s),
                    },
                    scrollIntoView: !0,
                    annotations: t
                      ? [aX.of(t), t8.userEvent.of("input.complete")]
                      : void 0,
                  };
                if (
                  (o.length && (l.selection = lA(o, 0)),
                  o.some((e) => e.field > 0))
                ) {
                  let t = new lT(o, 0),
                    n = (l.effects = [lS.of(t)]);
                  void 0 === e.state.field(lC, !1) &&
                    n.push(t4.appendConfig.of([lC, lR, lL, lb]));
                }
                e.dispatch(e.state.update(l));
              }),
          });
        }
        let lL = sI.domEventHandlers({
            mousedown(e, t) {
              let n = t.state.field(lC, !1),
                r;
              if (
                !n ||
                null == (r = t.posAtCoords({ x: e.clientX, y: e.clientY }))
              )
                return !1;
              let i = n.ranges.find((e) => e.from <= r && e.to >= r);
              return (
                !!i &&
                i.field != n.active &&
                (t.dispatch({
                  selection: lA(n.ranges, i.field),
                  effects: lS.of(
                    n.ranges.some((e) => e.field > i.field)
                      ? new lT(n.ranges, i.field)
                      : null,
                  ),
                  scrollIntoView: !0,
                }),
                !0)
              );
            },
          }),
          lj = {
            brackets: ["(", "[", "{", "'", '"'],
            before: ")]}:;>",
            stringPrefixes: [],
          },
          lF = t4.define({
            map(e, t) {
              let n = t.mapPos(e, -1, tx.TrackAfter);
              return null == n ? void 0 : n;
            },
          }),
          lB = new (class extends ns {})();
        (lB.startSide = 1), (lB.endSide = -1);
        let lz = tB.define({
            create: () => nc.empty,
            update(e, t) {
              if (((e = e.map(t.changes)), t.selection)) {
                let n = t.state.doc.lineAt(t.selection.main.head);
                e = e.update({ filter: (e) => e >= n.from && e <= n.to });
              }
              for (let n of t.effects)
                n.is(lF) &&
                  (e = e.update({ add: [lB.range(n.value, n.value + 1)] }));
              return e;
            },
          }),
          l$ = "()[]{}<>\xab\xbb\xbb\xab［］｛｝",
          lq =
            "object" == typeof navigator &&
            /Android\b/.test(navigator.userAgent);
        function lU(e, t) {
          let n = !1;
          return (
            e.field(lz).between(0, e.doc.length, (e) => {
              e == t && (n = !0);
            }),
            n
          );
        }
        function lH(e, t) {
          let n = e.sliceString(t, t + 2);
          return n.slice(0, tv(tg(n, 0)));
        }
        function lQ(e, t) {
          let n = oK(e).resolveInner(t + 1);
          return n.parent && n.from == t;
        }
        function lV(e, t, n) {
          let r = e.charCategorizer(t);
          if (r(e.sliceDoc(t - 1, t)) != nt.Word) return t;
          for (let i of n) {
            let n = t - i.length;
            if (e.sliceDoc(n, t) == i && r(e.sliceDoc(n - 1, n)) != nt.Word)
              return n;
          }
          return -1;
        }
        (e, t, n, r) => {
          if ((lq ? e.composing : e.compositionStarted) || e.state.readOnly)
            return !1;
          let i = e.state.selection.main;
          if (
            r.length > 2 ||
            (2 == r.length && 1 == tv(tg(r, 0))) ||
            t != i.from ||
            n != i.to
          )
            return !1;
          let s = (function (e, t) {
            var n, r;
            let i =
                ((n = e),
                (r = e.selection.main.head),
                n.languageDataAt("closeBrackets", r)[0] || lj),
              s = i.brackets || lj.brackets;
            for (let n of s) {
              let r = (function (e) {
                for (let t = 0; t < l$.length; t += 2)
                  if (l$.charCodeAt(t) == e) return l$.charAt(t + 1);
                return ty(e < 128 ? e : e + 1);
              })(tg(n, 0));
              if (t == n)
                return r == n
                  ? (function (e, t, n, r) {
                      let i = r.stringPrefixes || lj.stringPrefixes,
                        s = null,
                        o = e.changeByRange((r) => {
                          if (!r.empty)
                            return {
                              changes: [
                                { insert: t, from: r.from },
                                { insert: t, from: r.to },
                              ],
                              effects: lF.of(r.to + t.length),
                              range: tN.range(
                                r.anchor + t.length,
                                r.head + t.length,
                              ),
                            };
                          let o = r.head,
                            a = lH(e.doc, o),
                            l;
                          if (a == t) {
                            if (lQ(e, o))
                              return {
                                changes: { insert: t + t, from: o },
                                effects: lF.of(o + t.length),
                                range: tN.cursor(o + t.length),
                              };
                            else if (lU(e, o)) {
                              let r =
                                n &&
                                e.sliceDoc(o, o + 3 * t.length) == t + t + t
                                  ? t + t + t
                                  : t;
                              return {
                                changes: {
                                  from: o,
                                  to: o + r.length,
                                  insert: r,
                                },
                                range: tN.cursor(o + r.length),
                              };
                            }
                          } else if (
                            n &&
                            e.sliceDoc(o - 2 * t.length, o) == t + t &&
                            (l = lV(e, o - 2 * t.length, i)) > -1 &&
                            lQ(e, l)
                          )
                            return {
                              changes: { insert: t + t + t + t, from: o },
                              effects: lF.of(o + t.length),
                              range: tN.cursor(o + t.length),
                            };
                          else if (
                            e.charCategorizer(o)(a) != nt.Word &&
                            lV(e, o, i) > -1 &&
                            !(function (e, t, n, r) {
                              let i = oK(e).resolveInner(t, -1),
                                s = r.reduce(
                                  (e, t) => Math.max(e, t.length),
                                  0,
                                );
                              for (let o = 0; o < 5; o++) {
                                let o = e.sliceDoc(
                                    i.from,
                                    Math.min(i.to, i.from + n.length + s),
                                  ),
                                  a = o.indexOf(n);
                                if (
                                  !a ||
                                  (a > -1 && r.indexOf(o.slice(0, a)) > -1)
                                ) {
                                  let t = i.firstChild;
                                  for (
                                    ;
                                    t &&
                                    t.from == i.from &&
                                    t.to - t.from > n.length + a;

                                  ) {
                                    if (e.sliceDoc(t.to - n.length, t.to) == n)
                                      return !1;
                                    t = t.firstChild;
                                  }
                                  return !0;
                                }
                                let l = i.to == t && i.parent;
                                if (!l) break;
                                i = l;
                              }
                              return !1;
                            })(e, o, t, i)
                          )
                            return {
                              changes: { insert: t + t, from: o },
                              effects: lF.of(o + t.length),
                              range: tN.cursor(o + t.length),
                            };
                          return { range: (s = r) };
                        });
                      return s
                        ? null
                        : e.update(o, {
                            scrollIntoView: !0,
                            userEvent: "input.type",
                          });
                    })(e, n, s.indexOf(n + n + n) > -1, i)
                  : (function (e, t, n, r) {
                      let i = null,
                        s = e.changeByRange((s) => {
                          if (!s.empty)
                            return {
                              changes: [
                                { insert: t, from: s.from },
                                { insert: n, from: s.to },
                              ],
                              effects: lF.of(s.to + t.length),
                              range: tN.range(
                                s.anchor + t.length,
                                s.head + t.length,
                              ),
                            };
                          let o = lH(e.doc, s.head);
                          return !o || /\s/.test(o) || r.indexOf(o) > -1
                            ? {
                                changes: { insert: t + n, from: s.head },
                                effects: lF.of(s.head + t.length),
                                range: tN.cursor(s.head + t.length),
                              }
                            : { range: (i = s) };
                        });
                      return i
                        ? null
                        : e.update(s, {
                            scrollIntoView: !0,
                            userEvent: "input.type",
                          });
                    })(e, n, r, i.before || lj.before);
              if (t == r && lU(e, e.selection.main.from))
                return (function (e, t, n) {
                  let r = null,
                    i = e.changeByRange((t) =>
                      t.empty && lH(e.doc, t.head) == n
                        ? {
                            changes: {
                              from: t.head,
                              to: t.head + n.length,
                              insert: n,
                            },
                            range: tN.cursor(t.head + n.length),
                          }
                        : (r = { range: t }),
                    );
                  return r
                    ? null
                    : e.update(i, {
                        scrollIntoView: !0,
                        userEvent: "input.type",
                      });
                })(e, 0, r);
            }
            return null;
          })(e.state, r);
          return !!s && (e.dispatch(s), !0);
        };
        let lW = [
            { key: "Ctrl-Space", run: lg },
            { mac: "Alt-`", run: lg },
            {
              key: "Escape",
              run: (e) => {
                let t = e.state.field(lh, !1);
                return (
                  !!t &&
                  !!t.active.some((e) => 0 != e.state) &&
                  (e.dispatch({ effects: a2.of(null) }), !0)
                );
              },
            },
            { key: "ArrowDown", run: lm(!0) },
            { key: "ArrowUp", run: lm(!1) },
            { key: "PageDown", run: lm(!0, "page") },
            { key: "PageUp", run: lm(!1, "page") },
            {
              key: "Enter",
              run: (e) => {
                let t = e.state.field(lh, !1);
                return (
                  !(
                    e.state.readOnly ||
                    !t ||
                    !t.open ||
                    t.open.selected < 0 ||
                    t.open.disabled ||
                    Date.now() - t.open.timestamp <
                      e.state.facet(a4).interactionDelay
                  ) && lp(e, t.open.options[t.open.selected])
                );
              },
            },
          ],
          lZ = ((e) => (e.facet(a4).defaultKeymap ? [lW] : []), new j()),
          lG = new Set([
            "Script",
            "Body",
            "FunctionDefinition",
            "ClassDefinition",
            "LambdaExpression",
            "ForStatement",
            "MatchClause",
          ]);
        function lY(e) {
          return (t, n, r) => {
            if (r) return !1;
            let i = t.node.getChild("VariableName");
            return i && n(i, e), !0;
          };
        }
        let lK = {
            FunctionDefinition: lY("function"),
            ClassDefinition: lY("class"),
            ForStatement(e, t, n) {
              if (n) {
                for (let n = e.node.firstChild; n; n = n.nextSibling)
                  if ("VariableName" == n.name) t(n, "variable");
                  else if ("in" == n.name) break;
              }
            },
            ImportStatement(e, t) {
              var n, r;
              let { node: i } = e,
                s = (null == (n = i.firstChild) ? void 0 : n.name) == "from";
              for (let e = i.getChild("import"); e; e = e.nextSibling)
                "VariableName" == e.name &&
                  (null == (r = e.nextSibling) ? void 0 : r.name) != "as" &&
                  t(e, s ? "variable" : "namespace");
            },
            AssignStatement(e, t) {
              for (let n = e.node.firstChild; n; n = n.nextSibling)
                if ("VariableName" == n.name) t(n, "variable");
                else if (":" == n.name || "AssignOp" == n.name) break;
            },
            ParamList(e, t) {
              for (let n = null, r = e.node.firstChild; r; r = r.nextSibling)
                "VariableName" != r.name ||
                  (n && /\*|AssignOp/.test(n.name)) ||
                  t(r, "variable"),
                  (n = r);
            },
            CapturePattern: lY("variable"),
            AsPattern: lY("variable"),
            __proto__: null,
          },
          lX = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/,
          lJ = ["String", "FormatString", "Comment", "PropertyName"],
          l0 = [
            "__annotations__",
            "__builtins__",
            "__debug__",
            "__doc__",
            "__import__",
            "__name__",
            "__loader__",
            "__package__",
            "__spec__",
            "False",
            "None",
            "True",
          ]
            .map((e) => ({ label: e, type: "constant" }))
            .concat(
              [
                "ArithmeticError",
                "AssertionError",
                "AttributeError",
                "BaseException",
                "BlockingIOError",
                "BrokenPipeError",
                "BufferError",
                "BytesWarning",
                "ChildProcessError",
                "ConnectionAbortedError",
                "ConnectionError",
                "ConnectionRefusedError",
                "ConnectionResetError",
                "DeprecationWarning",
                "EOFError",
                "Ellipsis",
                "EncodingWarning",
                "EnvironmentError",
                "Exception",
                "FileExistsError",
                "FileNotFoundError",
                "FloatingPointError",
                "FutureWarning",
                "GeneratorExit",
                "IOError",
                "ImportError",
                "ImportWarning",
                "IndentationError",
                "IndexError",
                "InterruptedError",
                "IsADirectoryError",
                "KeyError",
                "KeyboardInterrupt",
                "LookupError",
                "MemoryError",
                "ModuleNotFoundError",
                "NameError",
                "NotADirectoryError",
                "NotImplemented",
                "NotImplementedError",
                "OSError",
                "OverflowError",
                "PendingDeprecationWarning",
                "PermissionError",
                "ProcessLookupError",
                "RecursionError",
                "ReferenceError",
                "ResourceWarning",
                "RuntimeError",
                "RuntimeWarning",
                "StopAsyncIteration",
                "StopIteration",
                "SyntaxError",
                "SyntaxWarning",
                "SystemError",
                "SystemExit",
                "TabError",
                "TimeoutError",
                "TypeError",
                "UnboundLocalError",
                "UnicodeDecodeError",
                "UnicodeEncodeError",
                "UnicodeError",
                "UnicodeTranslateError",
                "UnicodeWarning",
                "UserWarning",
                "ValueError",
                "Warning",
                "ZeroDivisionError",
              ].map((e) => ({ label: e, type: "type" })),
            )
            .concat(
              [
                "bool",
                "bytearray",
                "bytes",
                "classmethod",
                "complex",
                "float",
                "frozenset",
                "int",
                "list",
                "map",
                "memoryview",
                "object",
                "range",
                "set",
                "staticmethod",
                "str",
                "super",
                "tuple",
                "type",
              ].map((e) => ({ label: e, type: "class" })),
            )
            .concat(
              [
                "abs",
                "aiter",
                "all",
                "anext",
                "any",
                "ascii",
                "bin",
                "breakpoint",
                "callable",
                "chr",
                "compile",
                "delattr",
                "dict",
                "dir",
                "divmod",
                "enumerate",
                "eval",
                "exec",
                "exit",
                "filter",
                "format",
                "getattr",
                "globals",
                "hasattr",
                "hash",
                "help",
                "hex",
                "id",
                "input",
                "isinstance",
                "issubclass",
                "iter",
                "len",
                "license",
                "locals",
                "max",
                "min",
                "next",
                "oct",
                "open",
                "ord",
                "pow",
                "print",
                "property",
                "quit",
                "repr",
                "reversed",
                "round",
                "setattr",
                "slice",
                "sorted",
                "sum",
                "vars",
                "zip",
              ].map((e) => ({ label: e, type: "function" })),
            ),
          l1 = [
            lM("def ${name}(${params}):\n	${}", {
              label: "def",
              detail: "function",
              type: "keyword",
            }),
            lM("for ${name} in ${collection}:\n	${}", {
              label: "for",
              detail: "loop",
              type: "keyword",
            }),
            lM("while ${}:\n	${}", {
              label: "while",
              detail: "loop",
              type: "keyword",
            }),
            lM("try:\n	${}\nexcept ${error}:\n	${}", {
              label: "try",
              detail: "/ except block",
              type: "keyword",
            }),
            lM("if ${}:\n	\n", {
              label: "if",
              detail: "block",
              type: "keyword",
            }),
            lM("if ${}:\n	${}\nelse:\n	${}", {
              label: "if",
              detail: "/ else block",
              type: "keyword",
            }),
            lM("class ${name}:\n	def __init__(self, ${params}):\n			${}", {
              label: "class",
              detail: "definition",
              type: "keyword",
            }),
            lM("import ${module}", {
              label: "import",
              detail: "statement",
              type: "keyword",
            }),
            lM("from ${module} import ${names}", {
              label: "from",
              detail: "import",
              type: "keyword",
            }),
          ];
        function l2(e) {
          let { node: t, pos: n } = e,
            r = e.lineIndent(n, -1),
            i = null;
          for (;;) {
            let s = t.childBefore(n);
            if (s)
              if ("Comment" == s.name) n = s.from;
              else if ("Body" == s.name || "MatchBody" == s.name)
                e.baseIndentFor(s) + e.unit <= r && (i = s), (t = s);
              else if ("MatchClause" == s.name) t = s;
              else if (s.type.is("Statement")) t = s;
              else break;
            else break;
          }
          return i;
        }
        function l5(e, t) {
          let n = e.baseIndentFor(t),
            r = e.lineAt(e.pos, -1),
            i = r.from + r.text.length;
          return (/^\s*($|#)/.test(r.text) &&
            e.node.to < i + 100 &&
            !/\S/.test(e.state.sliceDoc(i, e.node.to)) &&
            e.lineIndent(e.pos, -1) <= n) ||
            (/^\s*(else:|elif |except |finally:|case\s+[^=:]+:)/.test(
              e.textAfter,
            ) &&
              e.lineIndent(e.pos, -1) > n)
            ? null
            : n + e.unit;
        }
        function l3(e, t) {
          return ({ state: n, dispatch: r }) => {
            if (n.readOnly) return !1;
            let i = e(t, n);
            return !!i && (r(n.update(i)), !0);
          };
        }
        function l4(e, t) {
          let n = e.languageDataAt("commentTokens", t, 1);
          return n.length ? n[0] : {};
        }
        function l8(e, t, n = t.selection.ranges) {
          let r = n.map((e) => l4(t, e.from).block);
          if (!r.every((e) => e)) return null;
          let i = n.map((e, n) =>
            (function (e, { open: t, close: n }, r, i) {
              let s,
                o,
                a = e.sliceDoc(r - 50, r),
                l = e.sliceDoc(i, i + 50),
                c = /\s*$/.exec(a)[0].length,
                u = /^\s*/.exec(l)[0].length,
                d = a.length - c;
              if (
                a.slice(d - t.length, d) == t &&
                l.slice(u, u + n.length) == n
              )
                return {
                  open: { pos: r - c, margin: c && 1 },
                  close: { pos: i + u, margin: u && 1 },
                };
              i - r <= 100
                ? (s = o = e.sliceDoc(r, i))
                : ((s = e.sliceDoc(r, r + 50)), (o = e.sliceDoc(i - 50, i)));
              let h = /^\s*/.exec(s)[0].length,
                p = /\s*$/.exec(o)[0].length,
                f = o.length - p - n.length;
              return s.slice(h, h + t.length) == t &&
                o.slice(f, f + n.length) == n
                ? {
                    open: {
                      pos: r + h + t.length,
                      margin: +!!/\s/.test(s.charAt(h + t.length)),
                    },
                    close: {
                      pos: i - p - n.length,
                      margin: +!!/\s/.test(o.charAt(f - 1)),
                    },
                  }
                : null;
            })(t, r[n], e.from, e.to),
          );
          if (2 != e && !i.every((e) => e))
            return {
              changes: t.changes(
                n.map((e, t) =>
                  i[t]
                    ? []
                    : [
                        { from: e.from, insert: r[t].open + " " },
                        { from: e.to, insert: " " + r[t].close },
                      ],
                ),
              ),
            };
          if (1 != e && i.some((e) => e)) {
            let e = [];
            for (let t = 0, n; t < i.length; t++)
              if ((n = i[t])) {
                let i = r[t],
                  { open: s, close: o } = n;
                e.push(
                  { from: s.pos - i.open.length, to: s.pos + s.margin },
                  { from: o.pos - o.margin, to: o.pos + i.close.length },
                );
              }
            return { changes: e };
          }
          return null;
        }
        (o = aZ(l0.concat(l1))),
          eV.keyword,
          eV.name,
          eV.deleted,
          eV.character,
          eV.propertyName,
          eV.macroName,
          eV.variableName,
          eV.labelName,
          eV.color,
          eV.name,
          eV.name,
          eV.name,
          eV.separator,
          eV.typeName,
          eV.className,
          eV.number,
          eV.changed,
          eV.annotation,
          eV.modifier,
          eV.self,
          eV.namespace,
          eV.operator,
          eV.operatorKeyword,
          eV.url,
          eV.escape,
          eV.regexp,
          eV.link,
          eV.string,
          eV.meta,
          eV.comment,
          eV.strong,
          eV.emphasis,
          eV.strikethrough,
          eV.link,
          eV.heading,
          eV.atom,
          eV.bool,
          eV.variableName,
          eV.processingInstruction,
          eV.string,
          eV.inserted,
          eV.invalid,
          (e, t) =>
            l8(
              e,
              t,
              (function (e) {
                let t = [];
                for (let n of e.selection.ranges) {
                  let r = e.doc.lineAt(n.from),
                    i = n.to <= r.to ? r : e.doc.lineAt(n.to);
                  i.from > r.from &&
                    i.from == n.to &&
                    (i = n.to == r.to + 1 ? r : e.doc.lineAt(n.to - 1));
                  let s = t.length - 1;
                  s >= 0 && t[s].to > r.from
                    ? (t[s].to = i.to)
                    : t.push({
                        from: r.from + /^\s*/.exec(r.text)[0].length,
                        to: i.to,
                      });
                }
                return t;
              })(t),
            );
        let l6 = t2.define(),
          l9 = t2.define(),
          l7 = tP.define(),
          ce = tP.define({
            combine: (e) =>
              ni(
                e,
                { minDepth: 100, newGroupDelay: 500, joinToEvent: (e, t) => t },
                {
                  minDepth: Math.max,
                  newGroupDelay: Math.min,
                  joinToEvent: (e, t) => (n, r) => e(n, r) || t(n, r),
                },
              ),
          }),
          ct = tB.define({
            create: () => cu.empty,
            update(e, t) {
              let n = t.state.facet(ce),
                r = t.annotation(l6);
              if (r) {
                let i = cr.fromTransaction(t, r.selection),
                  s = r.side,
                  o = 0 == s ? e.undone : e.done;
                return (
                  (o = i
                    ? ci(o, o.length, n.minDepth, i)
                    : ca(o, t.startState.selection)),
                  new cu(0 == s ? r.rest : o, 0 == s ? o : r.rest)
                );
              }
              let i = t.annotation(l9);
              if (
                (("full" == i || "before" == i) && (e = e.isolate()),
                !1 === t.annotation(t8.addToHistory))
              )
                return t.changes.empty ? e : e.addMapping(t.changes.desc);
              let s = cr.fromTransaction(t),
                o = t.annotation(t8.time),
                a = t.annotation(t8.userEvent);
              return (
                s
                  ? (e = e.addChanges(s, o, a, n, t))
                  : t.selection &&
                    (e = e.addSelection(
                      t.startState.selection,
                      o,
                      a,
                      n.newGroupDelay,
                    )),
                ("full" == i || "after" == i) && (e = e.isolate()),
                e
              );
            },
            toJSON: (e) => ({
              done: e.done.map((e) => e.toJSON()),
              undone: e.undone.map((e) => e.toJSON()),
            }),
            fromJSON: (e) =>
              new cu(e.done.map(cr.fromJSON), e.undone.map(cr.fromJSON)),
          });
        function cn(e, t) {
          return function ({ state: n, dispatch: r }) {
            if (!t && n.readOnly) return !1;
            let i = n.field(ct, !1);
            if (!i) return !1;
            let s = i.pop(e, n, t);
            return !!s && (r(s), !0);
          };
        }
        class cr {
          constructor(e, t, n, r, i) {
            (this.changes = e),
              (this.effects = t),
              (this.mapped = n),
              (this.startSelection = r),
              (this.selectionsAfter = i);
          }
          setSelAfter(e) {
            return new cr(
              this.changes,
              this.effects,
              this.mapped,
              this.startSelection,
              e,
            );
          }
          toJSON() {
            var e, t, n;
            return {
              changes: null == (e = this.changes) ? void 0 : e.toJSON(),
              mapped: null == (t = this.mapped) ? void 0 : t.toJSON(),
              startSelection:
                null == (n = this.startSelection) ? void 0 : n.toJSON(),
              selectionsAfter: this.selectionsAfter.map((e) => e.toJSON()),
            };
          }
          static fromJSON(e) {
            return new cr(
              e.changes && tw.fromJSON(e.changes),
              [],
              e.mapped && tk.fromJSON(e.mapped),
              e.startSelection && tN.fromJSON(e.startSelection),
              e.selectionsAfter.map(tN.fromJSON),
            );
          }
          static fromTransaction(e, t) {
            let n = co;
            for (let t of e.startState.facet(l7)) {
              let r = t(e);
              r.length && (n = n.concat(r));
            }
            return !n.length && e.changes.empty
              ? null
              : new cr(
                  e.changes.invert(e.startState.doc),
                  n,
                  void 0,
                  t || e.startState.selection,
                  co,
                );
          }
          static selection(e) {
            return new cr(void 0, co, void 0, void 0, e);
          }
        }
        function ci(e, t, n, r) {
          let i = e.slice(t + 1 > n + 20 ? t - n - 1 : 0, t);
          return i.push(r), i;
        }
        function cs(e, t) {
          return e.length ? (t.length ? e.concat(t) : e) : t;
        }
        let co = [];
        function ca(e, t) {
          if (!e.length) return [cr.selection([t])];
          {
            let n = e[e.length - 1],
              r = n.selectionsAfter.slice(
                Math.max(0, n.selectionsAfter.length - 200),
              );
            return r.length && r[r.length - 1].eq(t)
              ? e
              : (r.push(t), ci(e, e.length - 1, 1e9, n.setSelAfter(r)));
          }
        }
        function cl(e, t) {
          if (!e.length) return e;
          let n = e.length,
            r = co;
          for (; n; ) {
            let i = (function (e, t, n) {
              let r = cs(
                e.selectionsAfter.length
                  ? e.selectionsAfter.map((e) => e.map(t))
                  : co,
                n,
              );
              if (!e.changes) return cr.selection(r);
              let i = e.changes.map(t),
                s = t.mapDesc(e.changes, !0),
                o = e.mapped ? e.mapped.composeDesc(s) : s;
              return new cr(
                i,
                t4.mapEffects(e.effects, t),
                o,
                e.startSelection.map(s),
                r,
              );
            })(e[n - 1], t, r);
            if ((i.changes && !i.changes.empty) || i.effects.length) {
              let t = e.slice(0, n);
              return (t[n - 1] = i), t;
            }
            (t = i.mapped), n--, (r = i.selectionsAfter);
          }
          return r.length ? [cr.selection(r)] : co;
        }
        let cc = /^(input\.type|delete)($|\.)/;
        class cu {
          constructor(e, t, n = 0, r) {
            (this.done = e),
              (this.undone = t),
              (this.prevTime = n),
              (this.prevUserEvent = r);
          }
          isolate() {
            return this.prevTime ? new cu(this.done, this.undone) : this;
          }
          addChanges(e, t, n, r, i) {
            var s, o;
            let a,
              l,
              c = this.done,
              u = c[c.length - 1];
            return new cu(
              (c =
                u &&
                u.changes &&
                !u.changes.empty &&
                e.changes &&
                (!n || cc.test(n)) &&
                ((!u.selectionsAfter.length &&
                  t - this.prevTime < r.newGroupDelay &&
                  r.joinToEvent(
                    i,
                    ((s = u.changes),
                    (o = e.changes),
                    (a = []),
                    (l = !1),
                    s.iterChangedRanges((e, t) => a.push(e, t)),
                    o.iterChangedRanges((e, t, n, r) => {
                      for (let e = 0; e < a.length; ) {
                        let t = a[e++],
                          i = a[e++];
                        r >= t && n <= i && (l = !0);
                      }
                    }),
                    l),
                  )) ||
                  "input.type.compose" == n)
                  ? ci(
                      c,
                      c.length - 1,
                      r.minDepth,
                      new cr(
                        e.changes.compose(u.changes),
                        cs(t4.mapEffects(e.effects, u.changes), u.effects),
                        u.mapped,
                        u.startSelection,
                        co,
                      ),
                    )
                  : ci(c, c.length, r.minDepth, e)),
              co,
              t,
              n,
            );
          }
          addSelection(e, t, n, r) {
            var i;
            let s = this.done.length
              ? this.done[this.done.length - 1].selectionsAfter
              : co;
            return s.length > 0 &&
              t - this.prevTime < r &&
              n == this.prevUserEvent &&
              n &&
              /^select($|\.)/.test(n) &&
              ((i = s[s.length - 1]),
              i.ranges.length == e.ranges.length &&
                0 ===
                  i.ranges.filter((t, n) => t.empty != e.ranges[n].empty)
                    .length)
              ? this
              : new cu(ca(this.done, e), this.undone, t, n);
          }
          addMapping(e) {
            return new cu(
              cl(this.done, e),
              cl(this.undone, e),
              this.prevTime,
              this.prevUserEvent,
            );
          }
          pop(e, t, n) {
            let r = 0 == e ? this.done : this.undone;
            if (0 == r.length) return null;
            let i = r[r.length - 1],
              s = i.selectionsAfter[0] || t.selection;
            if (n && i.selectionsAfter.length) {
              let n, o;
              return t.update({
                selection: i.selectionsAfter[i.selectionsAfter.length - 1],
                annotations: l6.of({
                  side: e,
                  rest:
                    ((n = r[r.length - 1]),
                    ((o = r.slice())[r.length - 1] = n.setSelAfter(
                      n.selectionsAfter.slice(0, n.selectionsAfter.length - 1),
                    )),
                    o),
                  selection: s,
                }),
                userEvent: 0 == e ? "select.undo" : "select.redo",
                scrollIntoView: !0,
              });
            }
            {
              if (!i.changes) return null;
              let n = 1 == r.length ? co : r.slice(0, r.length - 1);
              return (
                i.mapped && (n = cl(n, i.mapped)),
                t.update({
                  changes: i.changes,
                  selection: i.startSelection,
                  effects: i.effects,
                  annotations: l6.of({ side: e, rest: n, selection: s }),
                  filter: !1,
                  userEvent: 0 == e ? "undo" : "redo",
                  scrollIntoView: !0,
                })
              );
            }
          }
        }
        function cd(e, t) {
          return tN.create(e.ranges.map(t), e.mainIndex);
        }
        function ch(e, t) {
          return e.update({
            selection: t,
            scrollIntoView: !0,
            userEvent: "select",
          });
        }
        function cp({ state: e, dispatch: t }, n) {
          let r = cd(e.selection, n);
          return !r.eq(e.selection, !0) && (t(ch(e, r)), !0);
        }
        function cf(e, t) {
          return tN.cursor(t ? e.to : e.from);
        }
        function cm(e, t) {
          return cp(e, (n) => (n.empty ? e.moveByChar(n, t) : cf(n, t)));
        }
        function cg(e) {
          return e.textDirectionAt(e.state.selection.main.head) == rC.LTR;
        }
        cu.empty = new cu(co, co);
        let cy =
          "undefined" != typeof Intl && Intl.Segmenter
            ? new Intl.Segmenter(void 0, { granularity: "word" })
            : null;
        function cv(e, t) {
          return cp(e, (n) => {
            if (!n.empty) return cf(n, t);
            let r = e.moveVertically(n, t);
            return r.head != n.head ? r : e.moveToLineBoundary(n, t);
          });
        }
        function cb(e) {
          let t = e.scrollDOM.clientHeight < e.scrollDOM.scrollHeight - 2,
            n = 0,
            r = 0,
            i;
          if (t) {
            for (let t of e.state.facet(sI.scrollMargins)) {
              let i = t(e);
              (null == i ? void 0 : i.top) &&
                (n = Math.max(null == i ? void 0 : i.top, n)),
                (null == i ? void 0 : i.bottom) &&
                  (r = Math.max(null == i ? void 0 : i.bottom, r));
            }
            i = e.scrollDOM.clientHeight - n - r;
          } else i = (e.dom.ownerDocument.defaultView || window).innerHeight;
          return {
            marginTop: n,
            marginBottom: r,
            selfScroll: t,
            height: Math.max(e.defaultLineHeight, i - 5),
          };
        }
        function cx(e, t) {
          let n,
            r = cb(e),
            { state: i } = e,
            s = cd(i.selection, (n) =>
              n.empty ? e.moveVertically(n, t, r.height) : cf(n, t),
            );
          if (s.eq(i.selection)) return !1;
          if (r.selfScroll) {
            let t = e.coordsAtPos(i.selection.main.head),
              o = e.scrollDOM.getBoundingClientRect(),
              a = o.top + r.marginTop,
              l = o.bottom - r.marginBottom;
            t &&
              t.top > a &&
              t.bottom < l &&
              (n = sI.scrollIntoView(s.main.head, {
                y: "start",
                yMargin: t.top - a,
              }));
          }
          return e.dispatch(ch(i, s), { effects: n }), !0;
        }
        function ck(e, t) {
          let n = cd(e.state.selection, (e) => {
            let n = t(e);
            return tN.range(
              e.anchor,
              n.head,
              n.goalColumn,
              n.bidiLevel || void 0,
            );
          });
          return !n.eq(e.state.selection) && (e.dispatch(ch(e.state, n)), !0);
        }
        function cw(e, t) {
          return ck(e, (n) => e.moveByChar(n, t));
        }
        function c_(e, t) {
          return ck(e, (n) => e.moveVertically(n, t));
        }
        function cO(e, t) {
          return ck(e, (n) => e.moveVertically(n, t, cb(e).height));
        }
        function cT(e, t) {
          if (e.state.readOnly) return !1;
          let n = "delete.selection",
            { state: r } = e,
            i = r.changeByRange((r) => {
              let { from: i, to: s } = r;
              if (i == s) {
                let o = t(r);
                o < i
                  ? ((n = "delete.backward"), (o = cS(e, o, !1)))
                  : o > i && ((n = "delete.forward"), (o = cS(e, o, !0))),
                  (i = Math.min(i, o)),
                  (s = Math.max(s, o));
              } else (i = cS(e, i, !1)), (s = cS(e, s, !0));
              return i == s
                ? { range: r }
                : {
                    changes: { from: i, to: s },
                    range: tN.cursor(i, i < r.head ? -1 : 1),
                  };
            });
          return (
            !i.changes.empty &&
            (e.dispatch(
              r.update(i, {
                scrollIntoView: !0,
                userEvent: n,
                effects:
                  "delete.selection" == n
                    ? sI.announce.of(r.phrase("Selection deleted"))
                    : void 0,
              }),
            ),
            !0)
          );
        }
        function cS(e, t, n) {
          if (e instanceof sI)
            for (let r of e.state.facet(sI.atomicRanges).map((t) => t(e)))
              r.between(t, t, (e, r) => {
                e < t && r > t && (t = n ? r : e);
              });
          return t;
        }
        let cE = (e, t, n) =>
            cT(e, (r) => {
              let i = r.from,
                { state: s } = e,
                o = s.doc.lineAt(i),
                a,
                l;
              if (
                n &&
                !t &&
                i > o.from &&
                i < o.from + 200 &&
                !/[^ \t]/.test((a = o.text.slice(0, i - o.from)))
              ) {
                if ("	" == a[a.length - 1]) return i - 1;
                let e = nk(a, s.tabSize) % o7(s) || o7(s);
                for (let t = 0; t < e && " " == a[a.length - 1 - t]; t++) i--;
                l = i;
              } else
                (l = tm(o.text, i - o.from, t, t) + o.from) == i &&
                o.number != (t ? s.doc.lines : 1)
                  ? (l += t ? 1 : -1)
                  : !t &&
                    /[\ufe00-\ufe0f]/.test(
                      o.text.slice(l - o.from, i - o.from),
                    ) &&
                    (l = tm(o.text, l - o.from, !1, !1) + o.from);
              return l;
            }),
          cC = (e, t) =>
            cT(e, (n) => {
              let r = n.head,
                { state: i } = e,
                s = i.doc.lineAt(r),
                o = i.charCategorizer(r);
              for (let e = null; ; ) {
                if (r == (t ? s.to : s.from)) {
                  r == n.head &&
                    s.number != (t ? i.doc.lines : 1) &&
                    (r += t ? 1 : -1);
                  break;
                }
                let a = tm(s.text, r - s.from, t) + s.from,
                  l = s.text.slice(
                    Math.min(r, a) - s.from,
                    Math.max(r, a) - s.from,
                  ),
                  c = o(l);
                if (null != e && c != e) break;
                (" " != l || r != n.head) && (e = c), (r = a);
              }
              return r;
            });
        function cA(e) {
          let t = [],
            n = -1;
          for (let r of e.selection.ranges) {
            let i = e.doc.lineAt(r.from),
              s = e.doc.lineAt(r.to);
            if (
              (r.empty || r.to != s.from || (s = e.doc.lineAt(r.to - 1)),
              n >= i.number)
            ) {
              let e = t[t.length - 1];
              (e.to = s.to), e.ranges.push(r);
            } else t.push({ from: i.from, to: s.to, ranges: [r] });
            n = s.number + 1;
          }
          return t;
        }
        function cN(e) {
          return ({ state: t, dispatch: n }) => {
            if (t.readOnly) return !1;
            let r = t.changeByRange((n) => {
              let { from: r, to: i } = n,
                s = t.doc.lineAt(r),
                o =
                  !e &&
                  r == i &&
                  (function (e, t) {
                    if (/\(\)|\[\]|\{\}/.test(e.sliceDoc(t - 1, t + 1)))
                      return { from: t, to: t };
                    let n = oK(e).resolveInner(t),
                      r = n.childBefore(t),
                      i = n.childAfter(t),
                      s;
                    return r &&
                      i &&
                      r.to <= t &&
                      i.from >= t &&
                      (s = r.type.prop(h.closedBy)) &&
                      s.indexOf(i.name) > -1 &&
                      e.doc.lineAt(r.to).from == e.doc.lineAt(i.from).from &&
                      !/\S/.test(e.sliceDoc(r.to, i.from))
                      ? { from: r.to, to: i.from }
                      : null;
                  })(t, r);
              e && (r = i = (i <= s.to ? s : t.doc.lineAt(i)).to);
              let a = new at(t, { simulateBreak: r, simulateDoubleBreak: !!o }),
                l = (function (e, t) {
                  for (let n of (e instanceof nr && (e = new at(e)),
                  e.state.facet(o6))) {
                    let r = n(e, t);
                    if (void 0 !== r) return r;
                  }
                  let n = oK(e.state);
                  return n.length >= t
                    ? (function (e, t, n) {
                        let r = t.resolveStack(n),
                          i = t
                            .resolveInner(n, -1)
                            .resolve(n, 0)
                            .enterUnfinishedNodesBefore(n);
                        if (i != r.node) {
                          let e = [];
                          for (
                            let t = i;
                            t &&
                            !(
                              t.from < r.node.from ||
                              t.to > r.node.to ||
                              (t.from == r.node.from && t.type == r.node.type)
                            );
                            t = t.parent
                          )
                            e.push(t);
                          for (let t = e.length - 1; t >= 0; t--)
                            r = { node: e[t], next: r };
                        }
                        return ar(r, e, n);
                      })(e, n, t)
                    : null;
                })(a, r);
              for (
                null == l &&
                (l = nk(/^\s*/.exec(t.doc.lineAt(r).text)[0], t.tabSize));
                i < s.to && /\s/.test(s.text[i - s.from]);

              )
                i++;
              o
                ? ({ from: r, to: i } = o)
                : r > s.from &&
                  r < s.from + 100 &&
                  !/\S/.test(s.text.slice(0, r)) &&
                  (r = s.from);
              let c = ["", ae(t, l)];
              return (
                o && c.push(ae(t, a.lineIndent(s.from, -1))),
                {
                  changes: { from: r, to: i, insert: to.of(c) },
                  range: tN.cursor(r + 1 + c[1].length),
                }
              );
            });
            return (
              n(t.update(r, { scrollIntoView: !0, userEvent: "input" })), !0
            );
          };
        }
        var cI = n(47602);
        let cD =
          "function" == typeof String.prototype.normalize
            ? (e) => e.normalize("NFKD")
            : (e) => e;
        class cP {
          constructor(e, t, n = 0, r = e.length, i, s) {
            (this.test = s),
              (this.value = { from: 0, to: 0 }),
              (this.done = !1),
              (this.matches = []),
              (this.buffer = ""),
              (this.bufferPos = 0),
              (this.iter = e.iterRange(n, r)),
              (this.bufferStart = n),
              (this.normalize = i ? (e) => i(cD(e)) : cD),
              (this.query = this.normalize(t));
          }
          peek() {
            if (this.bufferPos == this.buffer.length) {
              if (
                ((this.bufferStart += this.buffer.length),
                this.iter.next(),
                this.iter.done)
              )
                return -1;
              (this.bufferPos = 0), (this.buffer = this.iter.value);
            }
            return tg(this.buffer, this.bufferPos);
          }
          next() {
            for (; this.matches.length; ) this.matches.pop();
            return this.nextOverlapping();
          }
          nextOverlapping() {
            for (;;) {
              let e = this.peek();
              if (e < 0) return (this.done = !0), this;
              let t = ty(e),
                n = this.bufferStart + this.bufferPos;
              this.bufferPos += tv(e);
              let r = this.normalize(t);
              if (r.length)
                for (let e = 0, i = n; ; e++) {
                  let s = r.charCodeAt(e),
                    o = this.match(s, i, this.bufferPos + this.bufferStart);
                  if (e == r.length - 1) {
                    if (o) return (this.value = o), this;
                    break;
                  }
                  i == n && e < t.length && t.charCodeAt(e) == s && i++;
                }
            }
          }
          match(e, t, n) {
            let r = null;
            for (let t = 0; t < this.matches.length; t += 2) {
              let i = this.matches[t],
                s = !1;
              this.query.charCodeAt(i) == e &&
                (i == this.query.length - 1
                  ? (r = { from: this.matches[t + 1], to: n })
                  : (this.matches[t]++, (s = !0))),
                s || (this.matches.splice(t, 2), (t -= 2));
            }
            return (
              this.query.charCodeAt(0) == e &&
                (1 == this.query.length
                  ? (r = { from: t, to: n })
                  : this.matches.push(1, t)),
              r &&
                this.test &&
                !this.test(r.from, r.to, this.buffer, this.bufferStart) &&
                (r = null),
              r
            );
          }
        }
        "undefined" != typeof Symbol &&
          (cP.prototype[Symbol.iterator] = function () {
            return this;
          });
        let cR = { from: -1, to: -1, match: /.*/.exec("") },
          cM = "gm" + (null == /x/.unicode ? "" : "u");
        class cL {
          constructor(e, t, n, r = 0, i = e.length) {
            if (
              ((this.text = e),
              (this.to = i),
              (this.curLine = ""),
              (this.done = !1),
              (this.value = cR),
              /\\[sWDnr]|\n|\r|\[\^/.test(t))
            )
              return new cB(e, t, n, r, i);
            (this.re = new RegExp(
              t,
              cM + ((null == n ? void 0 : n.ignoreCase) ? "i" : ""),
            )),
              (this.test = null == n ? void 0 : n.test),
              (this.iter = e.iter());
            let s = e.lineAt(r);
            (this.curLineStart = s.from),
              (this.matchPos = cz(e, r)),
              this.getLine(this.curLineStart);
          }
          getLine(e) {
            this.iter.next(e),
              this.iter.lineBreak
                ? (this.curLine = "")
                : ((this.curLine = this.iter.value),
                  this.curLineStart + this.curLine.length > this.to &&
                    (this.curLine = this.curLine.slice(
                      0,
                      this.to - this.curLineStart,
                    )),
                  this.iter.next());
          }
          nextLine() {
            (this.curLineStart = this.curLineStart + this.curLine.length + 1),
              this.curLineStart > this.to
                ? (this.curLine = "")
                : this.getLine(0);
          }
          next() {
            for (let e = this.matchPos - this.curLineStart; ; ) {
              this.re.lastIndex = e;
              let t = this.matchPos <= this.to && this.re.exec(this.curLine);
              if (t) {
                let n = this.curLineStart + t.index,
                  r = n + t[0].length;
                if (
                  ((this.matchPos = cz(this.text, r + +(n == r))),
                  n == this.curLineStart + this.curLine.length &&
                    this.nextLine(),
                  (n < r || n > this.value.to) &&
                    (!this.test || this.test(n, r, t)))
                )
                  return (this.value = { from: n, to: r, match: t }), this;
                e = this.matchPos - this.curLineStart;
              } else {
                if (!(this.curLineStart + this.curLine.length < this.to))
                  return (this.done = !0), this;
                this.nextLine(), (e = 0);
              }
            }
          }
        }
        let cj = new WeakMap();
        class cF {
          constructor(e, t) {
            (this.from = e), (this.text = t);
          }
          get to() {
            return this.from + this.text.length;
          }
          static get(e, t, n) {
            let r = cj.get(e);
            if (!r || r.from >= n || r.to <= t) {
              let r = new cF(t, e.sliceString(t, n));
              return cj.set(e, r), r;
            }
            if (r.from == t && r.to == n) return r;
            let { text: i, from: s } = r;
            return (
              s > t && ((i = e.sliceString(t, s) + i), (s = t)),
              r.to < n && (i += e.sliceString(r.to, n)),
              cj.set(e, new cF(s, i)),
              new cF(t, i.slice(t - s, n - s))
            );
          }
        }
        class cB {
          constructor(e, t, n, r, i) {
            (this.text = e),
              (this.to = i),
              (this.done = !1),
              (this.value = cR),
              (this.matchPos = cz(e, r)),
              (this.re = new RegExp(
                t,
                cM + ((null == n ? void 0 : n.ignoreCase) ? "i" : ""),
              )),
              (this.test = null == n ? void 0 : n.test),
              (this.flat = cF.get(e, r, this.chunkEnd(r + 5e3)));
          }
          chunkEnd(e) {
            return e >= this.to ? this.to : this.text.lineAt(e).to;
          }
          next() {
            for (;;) {
              let e = (this.re.lastIndex = this.matchPos - this.flat.from),
                t = this.re.exec(this.flat.text);
              if (
                (t &&
                  !t[0] &&
                  t.index == e &&
                  ((this.re.lastIndex = e + 1),
                  (t = this.re.exec(this.flat.text))),
                t)
              ) {
                let e = this.flat.from + t.index,
                  n = e + t[0].length;
                if (
                  (this.flat.to >= this.to ||
                    t.index + t[0].length <= this.flat.text.length - 10) &&
                  (!this.test || this.test(e, n, t))
                )
                  return (
                    (this.value = { from: e, to: n, match: t }),
                    (this.matchPos = cz(this.text, n + +(e == n))),
                    this
                  );
              }
              if (this.flat.to == this.to) return (this.done = !0), this;
              this.flat = cF.get(
                this.text,
                this.flat.from,
                this.chunkEnd(this.flat.from + 2 * this.flat.text.length),
              );
            }
          }
        }
        function cz(e, t) {
          if (t >= e.length) return t;
          let n = e.lineAt(t),
            r;
          for (
            ;
            t < n.to &&
            (r = n.text.charCodeAt(t - n.from)) >= 56320 &&
            r < 57344;

          )
            t++;
          return t;
        }
        function c$(e) {
          let t = String(
              e.state.doc.lineAt(e.state.selection.main.head).number,
            ),
            n = (0, cI.A)("input", {
              class: "cm-textfield",
              name: "line",
              value: t,
            });
          function r() {
            let t = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(n.value);
            if (!t) return;
            let { state: r } = e,
              i = r.doc.lineAt(r.selection.main.head),
              [, s, o, a, l] = t,
              c = a ? +a.slice(1) : 0,
              u = o ? +o : i.number;
            if (o && l) {
              let e = u / 100;
              s && (e = e * ("-" == s ? -1 : 1) + i.number / r.doc.lines),
                (u = Math.round(r.doc.lines * e));
            } else o && s && (u = u * ("-" == s ? -1 : 1) + i.number);
            let d = r.doc.line(Math.max(1, Math.min(r.doc.lines, u))),
              h = tN.cursor(d.from + Math.max(0, Math.min(c, d.length)));
            e.dispatch({
              effects: [cq.of(!1), sI.scrollIntoView(h.from, { y: "center" })],
              selection: h,
            }),
              e.focus();
          }
          return {
            dom: (0, cI.A)(
              "form",
              {
                class: "cm-gotoLine",
                onkeydown: (t) => {
                  27 == t.keyCode
                    ? (t.preventDefault(),
                      e.dispatch({ effects: cq.of(!1) }),
                      e.focus())
                    : 13 == t.keyCode && (t.preventDefault(), r());
                },
                onsubmit: (e) => {
                  e.preventDefault(), r();
                },
              },
              (0, cI.A)("label", e.state.phrase("Go to line"), ": ", n),
              " ",
              (0, cI.A)(
                "button",
                { class: "cm-button", type: "submit" },
                e.state.phrase("go"),
              ),
              (0, cI.A)(
                "button",
                {
                  name: "close",
                  onclick: () => {
                    e.dispatch({ effects: cq.of(!1) }), e.focus();
                  },
                  "aria-label": e.state.phrase("close"),
                  type: "button",
                },
                ["\xd7"],
              ),
            ),
          };
        }
        "undefined" != typeof Symbol &&
          (cL.prototype[Symbol.iterator] = cB.prototype[Symbol.iterator] =
            function () {
              return this;
            });
        let cq = t4.define(),
          cU = {
            highlightWordAroundCursor: !1,
            minSelectionLength: 1,
            maxMatches: 100,
            wholeWords: !1,
          },
          cH = tP.define({
            combine: (e) =>
              ni(e, cU, {
                highlightWordAroundCursor: (e, t) => e || t,
                minSelectionLength: Math.min,
                maxMatches: Math.min,
              }),
          }),
          cQ = rg.mark({ class: "cm-selectionMatch" }),
          cV = rg.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
        function cW(e, t, n, r) {
          return (
            (0 == n || e(t.sliceDoc(n - 1, n)) != nt.Word) &&
            (r == t.doc.length || e(t.sliceDoc(r, r + 1)) != nt.Word)
          );
        }
        let cZ = tP.define({
          combine: (e) =>
            ni(e, {
              top: !1,
              caseSensitive: !1,
              literal: !1,
              regexp: !1,
              wholeWord: !1,
              createPanel: (e) => new uh(e),
              scrollToMatch: (e) => sI.scrollIntoView(e),
            }),
        });
        class cG {
          constructor(e) {
            (this.search = e.search),
              (this.caseSensitive = !!e.caseSensitive),
              (this.literal = !!e.literal),
              (this.regexp = !!e.regexp),
              (this.replace = e.replace || ""),
              (this.valid =
                !!this.search &&
                (!this.regexp ||
                  (function (e) {
                    try {
                      return new RegExp(e, cM), !0;
                    } catch (e) {
                      return !1;
                    }
                  })(this.search))),
              (this.unquoted = this.unquote(this.search)),
              (this.wholeWord = !!e.wholeWord);
          }
          unquote(e) {
            return this.literal
              ? e
              : e.replace(/\\([nrt\\])/g, (e, t) =>
                  "n" == t ? "\n" : "r" == t ? "\r" : "t" == t ? "	" : "\\",
                );
          }
          eq(e) {
            return (
              this.search == e.search &&
              this.replace == e.replace &&
              this.caseSensitive == e.caseSensitive &&
              this.regexp == e.regexp &&
              this.wholeWord == e.wholeWord
            );
          }
          create() {
            return this.regexp ? new c2(this) : new cX(this);
          }
          getCursor(e, t = 0, n) {
            let r = e.doc ? e : nr.create({ doc: e });
            return (
              null == n && (n = r.doc.length),
              this.regexp ? cJ(this, r, t, n) : cK(this, r, t, n)
            );
          }
        }
        class cY {
          constructor(e) {
            this.spec = e;
          }
        }
        function cK(e, t, n, r) {
          var i, s;
          return new cP(
            t.doc,
            e.unquoted,
            n,
            r,
            e.caseSensitive ? void 0 : (e) => e.toLowerCase(),
            e.wholeWord
              ? ((i = t.doc),
                (s = t.charCategorizer(t.selection.main.head)),
                (e, t, n, r) => (
                  (r > e || r + n.length < t) &&
                    ((r = Math.max(0, e - 2)),
                    (n = i.sliceString(r, Math.min(i.length, t + 2)))),
                  (s(c0(n, e - r)) != nt.Word || s(c1(n, e - r)) != nt.Word) &&
                    (s(c1(n, t - r)) != nt.Word || s(c0(n, t - r)) != nt.Word)
                ))
              : void 0,
          );
        }
        class cX extends cY {
          constructor(e) {
            super(e);
          }
          nextMatch(e, t, n) {
            let r = cK(this.spec, e, n, e.doc.length).nextOverlapping();
            if (r.done) {
              let n = Math.min(e.doc.length, t + this.spec.unquoted.length);
              r = cK(this.spec, e, 0, n).nextOverlapping();
            }
            return r.done || (r.value.from == t && r.value.to == n)
              ? null
              : r.value;
          }
          prevMatchInRange(e, t, n) {
            for (let r = n; ; ) {
              let n = Math.max(t, r - 1e4 - this.spec.unquoted.length),
                i = cK(this.spec, e, n, r),
                s = null;
              for (; !i.nextOverlapping().done; ) s = i.value;
              if (s) return s;
              if (n == t) return null;
              r -= 1e4;
            }
          }
          prevMatch(e, t, n) {
            let r = this.prevMatchInRange(e, 0, t);
            return (
              r ||
                (r = this.prevMatchInRange(
                  e,
                  Math.max(0, n - this.spec.unquoted.length),
                  e.doc.length,
                )),
              r && (r.from != t || r.to != n) ? r : null
            );
          }
          getReplacement(e) {
            return this.spec.unquote(this.spec.replace);
          }
          matchAll(e, t) {
            let n = cK(this.spec, e, 0, e.doc.length),
              r = [];
            for (; !n.next().done; ) {
              if (r.length >= t) return null;
              r.push(n.value);
            }
            return r;
          }
          highlight(e, t, n, r) {
            let i = cK(
              this.spec,
              e,
              Math.max(0, t - this.spec.unquoted.length),
              Math.min(n + this.spec.unquoted.length, e.doc.length),
            );
            for (; !i.next().done; ) r(i.value.from, i.value.to);
          }
        }
        function cJ(e, t, n, r) {
          var i;
          return new cL(
            t.doc,
            e.search,
            {
              ignoreCase: !e.caseSensitive,
              test: e.wholeWord
                ? ((i = t.charCategorizer(t.selection.main.head)),
                  (e, t, n) =>
                    !n[0].length ||
                    ((i(c0(n.input, n.index)) != nt.Word ||
                      i(c1(n.input, n.index)) != nt.Word) &&
                      (i(c1(n.input, n.index + n[0].length)) != nt.Word ||
                        i(c0(n.input, n.index + n[0].length)) != nt.Word)))
                : void 0,
            },
            n,
            r,
          );
        }
        function c0(e, t) {
          return e.slice(tm(e, t, !1), t);
        }
        function c1(e, t) {
          return e.slice(t, tm(e, t));
        }
        class c2 extends cY {
          nextMatch(e, t, n) {
            let r = cJ(this.spec, e, n, e.doc.length).next();
            return (
              r.done && (r = cJ(this.spec, e, 0, t).next()),
              r.done ? null : r.value
            );
          }
          prevMatchInRange(e, t, n) {
            for (let r = 1; ; r++) {
              let i = Math.max(t, n - 1e4 * r),
                s = cJ(this.spec, e, i, n),
                o = null;
              for (; !s.next().done; ) o = s.value;
              if (o && (i == t || o.from > i + 10)) return o;
              if (i == t) return null;
            }
          }
          prevMatch(e, t, n) {
            return (
              this.prevMatchInRange(e, 0, t) ||
              this.prevMatchInRange(e, n, e.doc.length)
            );
          }
          getReplacement(e) {
            return this.spec
              .unquote(this.spec.replace)
              .replace(/\$([$&]|\d+)/g, (t, n) => {
                if ("&" == n) return e.match[0];
                if ("$" == n) return "$";
                for (let t = n.length; t > 0; t--) {
                  let r = +n.slice(0, t);
                  if (r > 0 && r < e.match.length)
                    return e.match[r] + n.slice(t);
                }
                return t;
              });
          }
          matchAll(e, t) {
            let n = cJ(this.spec, e, 0, e.doc.length),
              r = [];
            for (; !n.next().done; ) {
              if (r.length >= t) return null;
              r.push(n.value);
            }
            return r;
          }
          highlight(e, t, n, r) {
            let i = cJ(
              this.spec,
              e,
              Math.max(0, t - 250),
              Math.min(n + 250, e.doc.length),
            );
            for (; !i.next().done; ) r(i.value.from, i.value.to);
          }
        }
        let c5 = t4.define(),
          c3 = t4.define(),
          c4 = tB.define({
            create: (e) => new c8(ua(e).create(), null),
            update(e, t) {
              for (let n of t.effects)
                n.is(c5)
                  ? (e = new c8(n.value.create(), e.panel))
                  : n.is(c3) && (e = new c8(e.query, n.value ? uo : null));
              return e;
            },
            provide: (e) => ok.from(e, (e) => e.panel),
          });
        class c8 {
          constructor(e, t) {
            (this.query = e), (this.panel = t);
          }
        }
        let c6 = rg.mark({ class: "cm-searchMatch" }),
          c9 = rg.mark({ class: "cm-searchMatch cm-searchMatch-selected" }),
          c7 = r6.fromClass(
            class {
              constructor(e) {
                (this.view = e),
                  (this.decorations = this.highlight(e.state.field(c4)));
              }
              update(e) {
                let t = e.state.field(c4);
                (t != e.startState.field(c4) ||
                  e.docChanged ||
                  e.selectionSet ||
                  e.viewportChanged) &&
                  (this.decorations = this.highlight(t));
              }
              highlight({ query: e, panel: t }) {
                if (!t || !e.spec.valid) return rg.none;
                let { view: n } = this,
                  r = new nu();
                for (let t = 0, i = n.visibleRanges, s = i.length; t < s; t++) {
                  let { from: o, to: a } = i[t];
                  for (; t < s - 1 && a > i[t + 1].from - 500; ) a = i[++t].to;
                  e.highlight(n.state, o, a, (e, t) => {
                    let i = n.state.selection.ranges.some(
                      (n) => n.from == e && n.to == t,
                    );
                    r.add(e, t, i ? c9 : c6);
                  });
                }
                return r.finish();
              }
            },
            { decorations: (e) => e.decorations },
          );
        function ue(e) {
          return (t) => {
            let n = t.state.field(c4, !1);
            return n && n.query.spec.valid ? e(t, n) : uu(t);
          };
        }
        let ut = ue((e, { query: t }) => {
            let { to: n } = e.state.selection.main,
              r = t.nextMatch(e.state, n, n);
            if (!r) return !1;
            let i = tN.single(r.from, r.to),
              s = e.state.facet(cZ);
            return (
              e.dispatch({
                selection: i,
                effects: [um(e, r), s.scrollToMatch(i.main, e)],
                userEvent: "select.search",
              }),
              uc(e),
              !0
            );
          }),
          un = ue((e, { query: t }) => {
            let { state: n } = e,
              { from: r } = n.selection.main,
              i = t.prevMatch(n, r, r);
            if (!i) return !1;
            let s = tN.single(i.from, i.to),
              o = e.state.facet(cZ);
            return (
              e.dispatch({
                selection: s,
                effects: [um(e, i), o.scrollToMatch(s.main, e)],
                userEvent: "select.search",
              }),
              uc(e),
              !0
            );
          }),
          ur = ue((e, { query: t }) => {
            let n = t.matchAll(e.state, 1e3);
            return (
              !!n &&
              !!n.length &&
              (e.dispatch({
                selection: tN.create(n.map((e) => tN.range(e.from, e.to))),
                userEvent: "select.search.matches",
              }),
              !0)
            );
          }),
          ui = ue((e, { query: t }) => {
            let { state: n } = e,
              { from: r, to: i } = n.selection.main;
            if (n.readOnly) return !1;
            let s = t.nextMatch(n, r, r);
            if (!s) return !1;
            let o = s,
              a = [],
              l,
              c,
              u = [];
            o.from == r &&
              o.to == i &&
              ((c = n.toText(t.getReplacement(o))),
              a.push({ from: o.from, to: o.to, insert: c }),
              (o = t.nextMatch(n, o.from, o.to)),
              u.push(
                sI.announce.of(
                  n.phrase("replaced match on line $", n.doc.lineAt(r).number) +
                    ".",
                ),
              ));
            let d = e.state.changes(a);
            return (
              o &&
                ((l = tN.single(o.from, o.to).map(d)),
                u.push(um(e, o)),
                u.push(n.facet(cZ).scrollToMatch(l.main, e))),
              e.dispatch({
                changes: d,
                selection: l,
                effects: u,
                userEvent: "input.replace",
              }),
              !0
            );
          }),
          us = ue((e, { query: t }) => {
            if (e.state.readOnly) return !1;
            let n = t.matchAll(e.state, 1e9).map((e) => {
              let { from: n, to: r } = e;
              return { from: n, to: r, insert: t.getReplacement(e) };
            });
            if (!n.length) return !1;
            let r = e.state.phrase("replaced $ matches", n.length) + ".";
            return (
              e.dispatch({
                changes: n,
                effects: sI.announce.of(r),
                userEvent: "input.replace.all",
              }),
              !0
            );
          });
        function uo(e) {
          return e.state.facet(cZ).createPanel(e);
        }
        function ua(e, t) {
          var n, r, i, s, o;
          let a = e.selection.main,
            l = a.empty || a.to > a.from + 100 ? "" : e.sliceDoc(a.from, a.to);
          if (t && !l) return t;
          let c = e.facet(cZ);
          return new cG({
            search: (
              null != (n = null == t ? void 0 : t.literal) ? n : c.literal
            )
              ? l
              : l.replace(/\n/g, "\\n"),
            caseSensitive:
              null != (r = null == t ? void 0 : t.caseSensitive)
                ? r
                : c.caseSensitive,
            literal:
              null != (i = null == t ? void 0 : t.literal) ? i : c.literal,
            regexp: null != (s = null == t ? void 0 : t.regexp) ? s : c.regexp,
            wholeWord:
              null != (o = null == t ? void 0 : t.wholeWord) ? o : c.wholeWord,
          });
        }
        function ul(e) {
          let t = oy(e, uo);
          return t && t.dom.querySelector("[main-field]");
        }
        function uc(e) {
          let t = ul(e);
          t && t == e.root.activeElement && t.select();
        }
        let uu = (e) => {
            let t = e.state.field(c4, !1);
            if (t && t.panel) {
              let n = ul(e);
              if (n && n != e.root.activeElement) {
                let r = ua(e.state, t.query.spec);
                r.valid && e.dispatch({ effects: c5.of(r) }),
                  n.focus(),
                  n.select();
              }
            } else
              e.dispatch({
                effects: [
                  c3.of(!0),
                  t ? c5.of(ua(e.state, t.query.spec)) : t4.appendConfig.of(uy),
                ],
              });
            return !0;
          },
          ud = (e) => {
            let t = e.state.field(c4, !1);
            if (!t || !t.panel) return !1;
            let n = oy(e, uo);
            return (
              n && n.dom.contains(e.root.activeElement) && e.focus(),
              e.dispatch({ effects: c3.of(!1) }),
              !0
            );
          };
        class uh {
          constructor(e) {
            this.view = e;
            let t = (this.query = e.state.field(c4).query.spec);
            function n(e, t, n) {
              return (0, cI.A)(
                "button",
                { class: "cm-button", name: e, onclick: t, type: "button" },
                n,
              );
            }
            (this.commit = this.commit.bind(this)),
              (this.searchField = (0, cI.A)("input", {
                value: t.search,
                placeholder: up(e, "Find"),
                "aria-label": up(e, "Find"),
                class: "cm-textfield",
                name: "search",
                form: "",
                "main-field": "true",
                onchange: this.commit,
                onkeyup: this.commit,
              })),
              (this.replaceField = (0, cI.A)("input", {
                value: t.replace,
                placeholder: up(e, "Replace"),
                "aria-label": up(e, "Replace"),
                class: "cm-textfield",
                name: "replace",
                form: "",
                onchange: this.commit,
                onkeyup: this.commit,
              })),
              (this.caseField = (0, cI.A)("input", {
                type: "checkbox",
                name: "case",
                form: "",
                checked: t.caseSensitive,
                onchange: this.commit,
              })),
              (this.reField = (0, cI.A)("input", {
                type: "checkbox",
                name: "re",
                form: "",
                checked: t.regexp,
                onchange: this.commit,
              })),
              (this.wordField = (0, cI.A)("input", {
                type: "checkbox",
                name: "word",
                form: "",
                checked: t.wholeWord,
                onchange: this.commit,
              })),
              (this.dom = (0, cI.A)(
                "div",
                { onkeydown: (e) => this.keydown(e), class: "cm-search" },
                [
                  this.searchField,
                  n("next", () => ut(e), [up(e, "next")]),
                  n("prev", () => un(e), [up(e, "previous")]),
                  n("select", () => ur(e), [up(e, "all")]),
                  (0, cI.A)("label", null, [
                    this.caseField,
                    up(e, "match case"),
                  ]),
                  (0, cI.A)("label", null, [this.reField, up(e, "regexp")]),
                  (0, cI.A)("label", null, [this.wordField, up(e, "by word")]),
                  ...(e.state.readOnly
                    ? []
                    : [
                        (0, cI.A)("br"),
                        this.replaceField,
                        n("replace", () => ui(e), [up(e, "replace")]),
                        n("replaceAll", () => us(e), [up(e, "replace all")]),
                      ]),
                  (0, cI.A)(
                    "button",
                    {
                      name: "close",
                      onclick: () => ud(e),
                      "aria-label": up(e, "close"),
                      type: "button",
                    },
                    ["\xd7"],
                  ),
                ],
              ));
          }
          commit() {
            let e = new cG({
              search: this.searchField.value,
              caseSensitive: this.caseField.checked,
              regexp: this.reField.checked,
              wholeWord: this.wordField.checked,
              replace: this.replaceField.value,
            });
            e.eq(this.query) ||
              ((this.query = e), this.view.dispatch({ effects: c5.of(e) }));
          }
          keydown(e) {
            var t, n;
            ((t = this.view), (n = "search-panel"), sH(s$(t.state), e, t, n))
              ? e.preventDefault()
              : 13 == e.keyCode && e.target == this.searchField
                ? (e.preventDefault(), (e.shiftKey ? un : ut)(this.view))
                : 13 == e.keyCode &&
                  e.target == this.replaceField &&
                  (e.preventDefault(), ui(this.view));
          }
          update(e) {
            for (let t of e.transactions)
              for (let e of t.effects)
                e.is(c5) && !e.value.eq(this.query) && this.setQuery(e.value);
          }
          setQuery(e) {
            (this.query = e),
              (this.searchField.value = e.search),
              (this.replaceField.value = e.replace),
              (this.caseField.checked = e.caseSensitive),
              (this.reField.checked = e.regexp),
              (this.wordField.checked = e.wholeWord);
          }
          mount() {
            this.searchField.select();
          }
          get pos() {
            return 80;
          }
          get top() {
            return this.view.state.facet(cZ).top;
          }
        }
        function up(e, t) {
          return e.state.phrase(t);
        }
        let uf = /[\s\.,:;?!]/;
        function um(e, { from: t, to: n }) {
          let r = e.state.doc.lineAt(t),
            i = e.state.doc.lineAt(n).to,
            s = Math.max(r.from, t - 30),
            o = Math.min(i, n + 30),
            a = e.state.sliceDoc(s, o);
          if (s != r.from) {
            for (let e = 0; e < 30; e++)
              if (!uf.test(a[e + 1]) && uf.test(a[e])) {
                a = a.slice(e);
                break;
              }
          }
          if (o != i) {
            for (let e = a.length - 1; e > a.length - 30; e--)
              if (!uf.test(a[e - 1]) && uf.test(a[e])) {
                a = a.slice(0, e);
                break;
              }
          }
          return sI.announce.of(
            `${e.state.phrase("current match")}. ${a} ${e.state.phrase("on line")} ${r.number}.`,
          );
        }
        let ug = sI.baseTheme({
            ".cm-panel.cm-search": {
              padding: "2px 6px 4px",
              position: "relative",
              "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0,
              },
              "& input, & button, & label": { margin: ".2em .6em .2em 0" },
              "& input[type=checkbox]": { marginRight: ".2em" },
              "& label": { fontSize: "80%", whiteSpace: "pre" },
            },
            "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
            "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
            "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
            "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" },
          }),
          uy = [c4, tq.low(c7), ug];
        class uv {
          constructor(e, t, n) {
            (this.from = e), (this.to = t), (this.diagnostic = n);
          }
        }
        class ub {
          constructor(e, t, n) {
            (this.diagnostics = e), (this.panel = t), (this.selected = n);
          }
          static init(e, t, n) {
            let r = n.facet(uA).markerFilter;
            r && (e = r(e, n));
            let i = e.slice().sort((e, t) => e.from - t.from || e.to - t.to),
              s = new nu(),
              o = [],
              a = 0;
            for (let e = 0; ; ) {
              let t,
                r,
                l = e == i.length ? null : i[e];
              if (!l && !o.length) break;
              for (
                o.length
                  ? ((t = a),
                    (r = o.reduce(
                      (e, t) => Math.min(e, t.to),
                      l && l.from > t ? l.from : 1e8,
                    )))
                  : ((t = l.from), (r = l.to), o.push(l), e++);
                e < i.length;

              ) {
                let n = i[e];
                if (n.from == t && (n.to > n.from || n.to == t))
                  o.push(n), e++, (r = Math.min(n.to, r));
                else {
                  r = Math.min(n.from, r);
                  break;
                }
              }
              let c = uF(o);
              if (
                o.some(
                  (e) =>
                    e.from == e.to ||
                    (e.from == e.to - 1 && n.doc.lineAt(e.from).to == e.from),
                )
              )
                s.add(
                  t,
                  t,
                  rg.widget({ widget: new uD(c), diagnostics: o.slice() }),
                );
              else {
                let e = o.reduce(
                  (e, t) => (t.markClass ? e + " " + t.markClass : e),
                  "",
                );
                s.add(
                  t,
                  r,
                  rg.mark({
                    class: "cm-lintRange cm-lintRange-" + c + e,
                    diagnostics: o.slice(),
                    inclusiveEnd: o.some((e) => e.to > r),
                  }),
                );
              }
              a = r;
              for (let e = 0; e < o.length; e++)
                o[e].to <= a && o.splice(e--, 1);
            }
            let l = s.finish();
            return new ub(l, t, ux(l));
          }
        }
        function ux(e, t = null, n = 0) {
          let r = null;
          return (
            e.between(n, 1e9, (e, n, { spec: i }) => {
              if (!(t && 0 > i.diagnostics.indexOf(t)))
                if (r) {
                  if (0 > i.diagnostics.indexOf(r.diagnostic)) return !1;
                  r = new uv(r.from, n, r.diagnostic);
                } else r = new uv(e, n, t || i.diagnostics[0]);
            }),
            r
          );
        }
        function uk(e, t) {
          let n = t.pos,
            r = t.end || n,
            i = e.state.facet(uA).hideOn(e, n, r);
          if (null != i) return i;
          let s = e.startState.doc.lineAt(t.pos);
          return !!(
            e.effects.some((e) => e.is(uw)) ||
            e.changes.touchesRange(s.from, Math.max(s.to, r))
          );
        }
        let uw = t4.define(),
          u_ = t4.define(),
          uO = t4.define(),
          uT = tB.define({
            create: () => new ub(rg.none, null, null),
            update(e, t) {
              if (t.docChanged && e.diagnostics.size) {
                let n = e.diagnostics.map(t.changes),
                  r = null,
                  i = e.panel;
                if (e.selected) {
                  let i = t.changes.mapPos(e.selected.from, 1);
                  r = ux(n, e.selected.diagnostic, i) || ux(n, null, i);
                }
                !n.size && i && t.state.facet(uA).autoPanel && (i = null),
                  (e = new ub(n, i, r));
              }
              for (let n of t.effects)
                if (n.is(uw)) {
                  let r = t.state.facet(uA).autoPanel
                    ? n.value.length
                      ? uR.open
                      : null
                    : e.panel;
                  e = ub.init(n.value, r, t.state);
                } else
                  n.is(u_)
                    ? (e = new ub(
                        e.diagnostics,
                        n.value ? uR.open : null,
                        e.selected,
                      ))
                    : n.is(uO) && (e = new ub(e.diagnostics, e.panel, n.value));
              return e;
            },
            provide: (e) => [
              ok.from(e, (e) => e.panel),
              sI.decorations.from(e, (e) => e.diagnostics),
            ],
          }),
          uS = rg.mark({ class: "cm-lintRange cm-lintRange-active" });
        function uE(e, t) {
          return (0, cI.A)(
            "ul",
            { class: "cm-tooltip-lint" },
            t.map((t) => uI(e, t, !1)),
          );
        }
        let uC = (e) => {
            let t = e.state.field(uT, !1);
            return !!t && !!t.panel && (e.dispatch({ effects: u_.of(!1) }), !0);
          },
          uA = tP.define({
            combine: (e) =>
              Object.assign(
                { sources: e.map((e) => e.source).filter((e) => null != e) },
                ni(
                  e.map((e) => e.config),
                  {
                    delay: 750,
                    markerFilter: null,
                    tooltipFilter: null,
                    needsRefresh: null,
                    hideOn: () => null,
                  },
                  {
                    needsRefresh: (e, t) =>
                      e ? (t ? (n) => e(n) || t(n) : e) : t,
                  },
                ),
              ),
          });
        function uN(e) {
          let t = [];
          if (e)
            c: for (let { name: n } of e) {
              for (let e = 0; e < n.length; e++) {
                let r = n[e];
                if (
                  /[a-zA-Z]/.test(r) &&
                  !t.some((e) => e.toLowerCase() == r.toLowerCase())
                ) {
                  t.push(r);
                  continue c;
                }
              }
              t.push("");
            }
          return t;
        }
        function uI(e, t, n) {
          var r;
          let i = n ? uN(t.actions) : [];
          return (0, cI.A)(
            "li",
            { class: "cm-diagnostic cm-diagnostic-" + t.severity },
            (0, cI.A)(
              "span",
              { class: "cm-diagnosticText" },
              t.renderMessage ? t.renderMessage(e) : t.message,
            ),
            null == (r = t.actions)
              ? void 0
              : r.map((n, r) => {
                  let s = !1,
                    o = (r) => {
                      if ((r.preventDefault(), s)) return;
                      s = !0;
                      let i = ux(e.state.field(uT).diagnostics, t);
                      i && n.apply(e, i.from, i.to);
                    },
                    { name: a } = n,
                    l = i[r] ? a.indexOf(i[r]) : -1,
                    c =
                      l < 0
                        ? a
                        : [
                            a.slice(0, l),
                            (0, cI.A)("u", a.slice(l, l + 1)),
                            a.slice(l + 1),
                          ];
                  return (0, cI.A)(
                    "button",
                    {
                      type: "button",
                      class: "cm-diagnosticAction",
                      onclick: o,
                      onmousedown: o,
                      "aria-label": ` Action: ${a}${l < 0 ? "" : ` (access key "${i[r]})"`}.`,
                    },
                    c,
                  );
                }),
            t.source &&
              (0, cI.A)("div", { class: "cm-diagnosticSource" }, t.source),
          );
        }
        class uD extends rf {
          constructor(e) {
            super(), (this.sev = e);
          }
          eq(e) {
            return e.sev == this.sev;
          }
          toDOM() {
            return (0, cI.A)("span", {
              class: "cm-lintPoint cm-lintPoint-" + this.sev,
            });
          }
        }
        class uP {
          constructor(e, t) {
            (this.diagnostic = t),
              (this.id =
                "item_" + Math.floor(0xffffffff * Math.random()).toString(16)),
              (this.dom = uI(e, t, !0)),
              (this.dom.id = this.id),
              this.dom.setAttribute("role", "option");
          }
        }
        class uR {
          constructor(e) {
            (this.view = e),
              (this.items = []),
              (this.list = (0, cI.A)("ul", {
                tabIndex: 0,
                role: "listbox",
                "aria-label": this.view.state.phrase("Diagnostics"),
                onkeydown: (t) => {
                  if (27 == t.keyCode) uC(this.view), this.view.focus();
                  else if (38 == t.keyCode || 33 == t.keyCode)
                    this.moveSelection(
                      (this.selectedIndex - 1 + this.items.length) %
                        this.items.length,
                    );
                  else if (40 == t.keyCode || 34 == t.keyCode)
                    this.moveSelection(
                      (this.selectedIndex + 1) % this.items.length,
                    );
                  else if (36 == t.keyCode) this.moveSelection(0);
                  else if (35 == t.keyCode)
                    this.moveSelection(this.items.length - 1);
                  else if (13 == t.keyCode) this.view.focus();
                  else {
                    if (
                      !(t.keyCode >= 65) ||
                      !(t.keyCode <= 90) ||
                      !(this.selectedIndex >= 0)
                    )
                      return;
                    let { diagnostic: n } = this.items[this.selectedIndex],
                      r = uN(n.actions);
                    for (let i = 0; i < r.length; i++)
                      if (r[i].toUpperCase().charCodeAt(0) == t.keyCode) {
                        let t = ux(this.view.state.field(uT).diagnostics, n);
                        t && n.actions[i].apply(e, t.from, t.to);
                      }
                  }
                  t.preventDefault();
                },
                onclick: (e) => {
                  for (let t = 0; t < this.items.length; t++)
                    this.items[t].dom.contains(e.target) &&
                      this.moveSelection(t);
                },
              })),
              (this.dom = (0, cI.A)(
                "div",
                { class: "cm-panel-lint" },
                this.list,
                (0, cI.A)(
                  "button",
                  {
                    type: "button",
                    name: "close",
                    "aria-label": this.view.state.phrase("close"),
                    onclick: () => uC(this.view),
                  },
                  "\xd7",
                ),
              )),
              this.update();
          }
          get selectedIndex() {
            let e = this.view.state.field(uT).selected;
            if (!e) return -1;
            for (let t = 0; t < this.items.length; t++)
              if (this.items[t].diagnostic == e.diagnostic) return t;
            return -1;
          }
          update() {
            let { diagnostics: e, selected: t } = this.view.state.field(uT),
              n = 0,
              r = !1,
              i = null,
              s = new Set();
            for (
              e.between(0, this.view.state.doc.length, (e, o, { spec: a }) => {
                for (let e of a.diagnostics) {
                  if (s.has(e)) continue;
                  s.add(e);
                  let o = -1,
                    a;
                  for (let t = n; t < this.items.length; t++)
                    if (this.items[t].diagnostic == e) {
                      o = t;
                      break;
                    }
                  o < 0
                    ? ((a = new uP(this.view, e)),
                      this.items.splice(n, 0, a),
                      (r = !0))
                    : ((a = this.items[o]),
                      o > n && (this.items.splice(n, o - n), (r = !0))),
                    t && a.diagnostic == t.diagnostic
                      ? a.dom.hasAttribute("aria-selected") ||
                        (a.dom.setAttribute("aria-selected", "true"), (i = a))
                      : a.dom.hasAttribute("aria-selected") &&
                        a.dom.removeAttribute("aria-selected"),
                    n++;
                }
              });
              n < this.items.length &&
              !(1 == this.items.length && this.items[0].diagnostic.from < 0);

            )
              (r = !0), this.items.pop();
            0 == this.items.length &&
              (this.items.push(
                new uP(this.view, {
                  from: -1,
                  to: -1,
                  severity: "info",
                  message: this.view.state.phrase("No diagnostics"),
                }),
              ),
              (r = !0)),
              i
                ? (this.list.setAttribute("aria-activedescendant", i.id),
                  this.view.requestMeasure({
                    key: this,
                    read: () => ({
                      sel: i.dom.getBoundingClientRect(),
                      panel: this.list.getBoundingClientRect(),
                    }),
                    write: ({ sel: e, panel: t }) => {
                      let n = t.height / this.list.offsetHeight;
                      e.top < t.top
                        ? (this.list.scrollTop -= (t.top - e.top) / n)
                        : e.bottom > t.bottom &&
                          (this.list.scrollTop += (e.bottom - t.bottom) / n);
                    },
                  }))
                : this.selectedIndex < 0 &&
                  this.list.removeAttribute("aria-activedescendant"),
              r && this.sync();
          }
          sync() {
            let e = this.list.firstChild;
            function t() {
              let t = e;
              (e = t.nextSibling), t.remove();
            }
            for (let n of this.items)
              if (n.dom.parentNode == this.list) {
                for (; e != n.dom; ) t();
                e = n.dom.nextSibling;
              } else this.list.insertBefore(n.dom, e);
            for (; e; ) t();
          }
          moveSelection(e) {
            if (this.selectedIndex < 0) return;
            let t = ux(
              this.view.state.field(uT).diagnostics,
              this.items[e].diagnostic,
            );
            t &&
              this.view.dispatch({
                selection: { anchor: t.from, head: t.to },
                scrollIntoView: !0,
                effects: uO.of(t),
              });
          }
          static open(e) {
            return new uR(e);
          }
        }
        function uM(e, t = 'viewBox="0 0 40 40"') {
          return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${t}>${encodeURIComponent(e)}</svg>')`;
        }
        function uL(e) {
          return uM(
            `<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${e}" fill="none" stroke-width=".7"/>`,
            'width="6" height="3"',
          );
        }
        let uj = sI.baseTheme({
          ".cm-diagnostic": {
            padding: "3px 6px 3px 8px",
            marginLeft: "-1px",
            display: "block",
            whiteSpace: "pre-wrap",
          },
          ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
          ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
          ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
          ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
          ".cm-diagnosticAction": {
            font: "inherit",
            border: "none",
            padding: "2px 4px",
            backgroundColor: "#444",
            color: "white",
            borderRadius: "3px",
            marginLeft: "8px",
            cursor: "pointer",
          },
          ".cm-diagnosticSource": { fontSize: "70%", opacity: 0.7 },
          ".cm-lintRange": {
            backgroundPosition: "left bottom",
            backgroundRepeat: "repeat-x",
            paddingBottom: "0.7px",
          },
          ".cm-lintRange-error": { backgroundImage: uL("#d11") },
          ".cm-lintRange-warning": { backgroundImage: uL("orange") },
          ".cm-lintRange-info": { backgroundImage: uL("#999") },
          ".cm-lintRange-hint": { backgroundImage: uL("#66d") },
          ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
          ".cm-tooltip-lint": { padding: 0, margin: 0 },
          ".cm-lintPoint": {
            position: "relative",
            "&:after": {
              content: '""',
              position: "absolute",
              bottom: 0,
              left: "-2px",
              borderLeft: "3px solid transparent",
              borderRight: "3px solid transparent",
              borderBottom: "4px solid #d11",
            },
          },
          ".cm-lintPoint-warning": {
            "&:after": { borderBottomColor: "orange" },
          },
          ".cm-lintPoint-info": { "&:after": { borderBottomColor: "#999" } },
          ".cm-lintPoint-hint": { "&:after": { borderBottomColor: "#66d" } },
          ".cm-panel.cm-panel-lint": {
            position: "relative",
            "& ul": {
              maxHeight: "100px",
              overflowY: "auto",
              "& [aria-selected]": {
                backgroundColor: "#ddd",
                "& u": { textDecoration: "underline" },
              },
              "&:focus [aria-selected]": {
                background_fallback: "#bdf",
                backgroundColor: "Highlight",
                color_fallback: "white",
                color: "HighlightText",
              },
              "& u": { textDecoration: "none" },
              padding: 0,
              margin: 0,
            },
            "& [name=close]": {
              position: "absolute",
              top: "0",
              right: "2px",
              background: "inherit",
              border: "none",
              font: "inherit",
              padding: 0,
              margin: 0,
            },
          },
        });
        function uF(e) {
          let t = "hint",
            n = 1;
          for (let i of e) {
            var r;
            let e =
              "error" == (r = i.severity)
                ? 4
                : "warning" == r
                  ? 3
                  : "info" == r
                    ? 2
                    : 1;
            e > n && ((n = e), (t = i.severity));
          }
          return t;
        }
        class uB extends oO {
          constructor(e) {
            super(), (this.diagnostics = e), (this.severity = uF(e));
          }
          toDOM(e) {
            let t = document.createElement("div");
            t.className = "cm-lint-marker cm-lint-marker-" + this.severity;
            let n = this.diagnostics,
              r = e.state.facet(uH).tooltipFilter;
            return (
              r && (n = r(n, e.state)),
              n.length &&
                (t.onmouseover = () =>
                  (function (e, t, n) {
                    function r() {
                      let r,
                        i = e.elementAtHeight(
                          t.getBoundingClientRect().top + 5 - e.documentTop,
                        );
                      e.coordsAtPos(i.from) &&
                        e.dispatch({
                          effects: u$.of({
                            pos: i.from,
                            above: !1,
                            clip: !1,
                            create: () => ({
                              dom: uE(e, n),
                              getCoords: () => t.getBoundingClientRect(),
                            }),
                          }),
                        }),
                        (t.onmouseout = t.onmousemove = null),
                        (r = (n) => {
                          let i = t.getBoundingClientRect();
                          if (
                            !(n.clientX > i.left - 10) ||
                            !(n.clientX < i.right + 10) ||
                            !(n.clientY > i.top - 10) ||
                            !(n.clientY < i.bottom + 10)
                          ) {
                            for (let e = n.target; e; e = e.parentNode)
                              if (
                                1 == e.nodeType &&
                                e.classList.contains("cm-tooltip-lint")
                              )
                                return;
                            window.removeEventListener("mousemove", r),
                              e.state.field(uq) &&
                                e.dispatch({ effects: u$.of(null) });
                          }
                        }),
                        window.addEventListener("mousemove", r);
                    }
                    let { hoverTime: i } = e.state.facet(uH),
                      s = setTimeout(r, i);
                    (t.onmouseout = () => {
                      clearTimeout(s), (t.onmouseout = t.onmousemove = null);
                    }),
                      (t.onmousemove = () => {
                        clearTimeout(s), (s = setTimeout(r, i));
                      });
                  })(e, t, n)),
              t
            );
          }
        }
        (s = {
          class: "cm-gutter-lint",
          markers: (e) => e.state.field(uz),
          widgetMarker: (e, t, n) => {
            let r = [];
            return (
              e.state.field(uz).between(n.from, n.to, (e, t, i) => {
                e > n.from && e < n.to && r.push(...i.diagnostics);
              }),
              r.length ? new uB(r) : null
            );
          },
        }),
          (function (e) {
            let t = [oN];
          })(),
          oC.of({ ...oE, ...s });
        let uz = tB.define({
            create: () => nc.empty,
            update(e, t) {
              e = e.map(t.changes);
              let n = t.state.facet(uH).markerFilter;
              for (let r of t.effects)
                if (r.is(uw)) {
                  let i = r.value;
                  n && (i = n(i || [], t.state)),
                    (e = (function (e, t) {
                      let n = Object.create(null);
                      for (let r of t) {
                        let t = e.lineAt(r.from);
                        (n[t.from] || (n[t.from] = [])).push(r);
                      }
                      let r = [];
                      for (let e in n) r.push(new uB(n[e]).range(+e));
                      return nc.of(r, !0);
                    })(t.state.doc, i.slice(0)));
                }
              return e;
            },
          }),
          u$ = t4.define(),
          uq = tB.define({
            create: () => null,
            update: (e, t) => (
              e &&
                t.docChanged &&
                (e = uk(t, e)
                  ? null
                  : Object.assign(Object.assign({}, e), {
                      pos: t.changes.mapPos(e.pos),
                    })),
              t.effects.reduce((e, t) => (t.is(u$) ? t.value : e), e)
            ),
            provide: (e) => oc.from(e),
          }),
          uU = [
            uT,
            sI.decorations.compute([uT], (e) => {
              let { selected: t, panel: n } = e.field(uT);
              return t && n && t.from != t.to
                ? rg.set([uS.range(t.from, t.to)])
                : rg.none;
            }),
            (function (e, t = {}) {
              let n = t4.define(),
                r = tB.define({
                  create: () => [],
                  update(e, r) {
                    if (
                      e.length &&
                      (t.hideOnChange && (r.docChanged || r.selection)
                        ? (e = [])
                        : t.hideOn && (e = e.filter((e) => !t.hideOn(r, e))),
                      r.docChanged)
                    ) {
                      let t = [];
                      for (let n of e) {
                        let e = r.changes.mapPos(n.pos, -1, tx.TrackDel);
                        if (null != e) {
                          let i = Object.assign(Object.create(null), n);
                          (i.pos = e),
                            null != i.end && (i.end = r.changes.mapPos(i.end)),
                            t.push(i);
                        }
                      }
                      e = t;
                    }
                    for (let t of r.effects)
                      t.is(n) && (e = t.value), t.is(om) && (e = []);
                    return e;
                  },
                  provide: (e) => ou.from(e),
                });
              return {
                active: r,
                extension: [
                  r,
                  r6.define((i) => new op(i, e, r, n, t.hoverTime || 300)),
                  oh,
                ],
              };
            })(
              function (e, t, n) {
                let { diagnostics: r } = e.state.field(uT),
                  i,
                  s = -1,
                  o = -1;
                r.between(t - +(n < 0), t + +(n > 0), (e, r, { spec: a }) => {
                  if (
                    t >= e &&
                    t <= r &&
                    (e == r || ((t > e || n > 0) && (t < r || n < 0)))
                  )
                    return (i = a.diagnostics), (s = e), (o = r), !1;
                });
                let a = e.state.facet(uA).tooltipFilter;
                return (i && a && (i = a(i, e.state)), i)
                  ? {
                      pos: s,
                      end: o,
                      above: e.state.doc.lineAt(s).to < o,
                      create: () => ({ dom: uE(e, i) }),
                    }
                  : null;
              },
              { hideOn: uk },
            ),
            uj,
          ],
          uH = tP.define({
            combine: (e) =>
              ni(e, {
                hoverTime: 300,
                markerFilter: null,
                tooltipFilter: null,
              }),
          });
        var uQ = n(84205);
        let uV = (0, uQ.memo)(
          function ({ content: e, onSaveContent: t, status: n }) {
            let r = (0, uQ.useRef)(null);
            return (
              (0, uQ.useRef)(null),
              (0, c.jsx)("div", {
                className: "relative not-prose w-full pb-[calc(80dvh)] text-sm",
                ref: r,
              })
            );
          },
          function (e, t) {
            return (
              e.suggestions === t.suggestions &&
              e.currentVersionIndex === t.currentVersionIndex &&
              e.isCurrentVersion === t.isCurrentVersion &&
              ("streaming" !== e.status || "streaming" !== t.status) &&
              e.content === t.content
            );
          },
        );
      },
      74075: (e) => {
        "use strict";
        e.exports = require("zlib");
      },
      74614: (e, t, n) => {
        "use strict";
        let r;
        n.r(t),
          n.d(t, {
            default: () => x,
            experimental_ppr: () => p,
            generateImageMetadata: () => v,
            generateMetadata: () => y,
            generateViewport: () => b,
            metadata: () => h,
          });
        var i = n(63033),
          s = n(35242),
          o = n(15058),
          a = n(42057),
          l = n(16714),
          c = n(98699),
          u = n(14795),
          d = n(60442);
        let h = {
            title: "Unified Chat - Hijraah",
            description: "Chat with our AI assistant to get immigration help",
          },
          p = !0;
        async function f({ children: e }) {
          let [t, n] = await Promise.all([(0, u.j2)(), (0, o.UL)()]),
            r = n.get("sidebar:state")?.value !== "true";
          return (0, s.jsxs)(s.Fragment, {
            children: [
              (0, s.jsx)(a.default, {
                src: "https://cdn.jsdelivr.net/pyodide/v0.23.4/full/pyodide.js",
                strategy: "beforeInteractive",
              }),
              (0, s.jsxs)(c.SidebarProvider, {
                defaultOpen: !r,
                children: [
                  (0, s.jsx)(l.AppSidebar, {}),
                  (0, s.jsx)(c.SidebarInset, { children: e }),
                ],
              }),
            ],
          });
        }
        let m = { ...i },
          g =
            "workUnitAsyncStorage" in m
              ? m.workUnitAsyncStorage
              : "requestAsyncStorage" in m
                ? m.requestAsyncStorage
                : void 0;
        r = new Proxy(f, {
          apply: (e, t, n) => {
            let r, i, s;
            try {
              let e = g?.getStore();
              (r = e?.headers.get("sentry-trace") ?? void 0),
                (i = e?.headers.get("baggage") ?? void 0),
                (s = e?.headers);
            } catch (e) {}
            return d
              .wrapServerComponentWithSentry(e, {
                componentRoute: "/(ai-unified)/chat",
                componentType: "Layout",
                sentryTraceHeader: r,
                baggageHeader: i,
                headers: s,
              })
              .apply(t, n);
          },
        });
        let y = void 0,
          v = void 0,
          b = void 0,
          x = r;
      },
      74619: (e) => {
        function t(e) {
          var t = Error("Cannot find module '" + e + "'");
          throw ((t.code = "MODULE_NOT_FOUND"), t);
        }
        (t.keys = () => []), (t.resolve = t), (t.id = 74619), (e.exports = t);
      },
      74824: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { Ss: () => m, jK: () => p, zn: () => f });
            var i = n(61268),
              s = n(82523),
              o = n(14077),
              a = n(76503),
              l = n(89437),
              c = n(94434),
              u = n(59483),
              d = n(60684),
              h = e([c, u, d]);
            [c, u, d] = h.then ? (await h)() : h;
            let p = (e) => {
                let t = o.S4.fromSchema(u.L8),
                  n = (0, l.renderToString)((0, i.jsx)(c.o, { content: e })),
                  r = document.createElement("div");
                return (r.innerHTML = n), t.parse(r);
              },
              f = (e) => s.lR.serialize(e),
              m = (e, t) => {
                let n = [];
                for (let t of e)
                  n.push(
                    a.NZ.inline(
                      t.selectionStart,
                      t.selectionEnd,
                      { class: "suggestion-highlight" },
                      { suggestionId: t.id, type: "highlight" },
                    ),
                  ),
                    n.push(
                      a.NZ.widget(
                        t.selectionStart,
                        (e) => {
                          let { dom: n } = (0, d.Lh)(t, e);
                          return n;
                        },
                        { suggestionId: t.id, type: "widget" },
                      ),
                    );
                return a.zF.create(t.state.doc, n);
              };
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      74998: (e) => {
        "use strict";
        e.exports = require("perf_hooks");
      },
      75302: (e, t, n) => {
        "use strict";
        n.d(t, { Ay: () => ed, jE: () => ep });
        var r = n(84205),
          i = n(90304),
          s = n(79029),
          o = n(61268);
        function a(e, t, n) {
          let r = "function" == typeof e.colSpan ? e.colSpan(n) : 1;
          if (Number.isInteger(r) && r > 1 && (!e.frozen || e.idx + r - 1 <= t))
            return r;
        }
        function l(e) {
          e.stopPropagation();
        }
        function c(e) {
          e?.scrollIntoView({ inline: "nearest", block: "nearest" });
        }
        function u(e) {
          let t = !1,
            n = {
              ...e,
              preventGridDefault() {
                t = !0;
              },
              isGridDefaultPrevented: () => t,
            };
          return Object.setPrototypeOf(n, Object.getPrototypeOf(e)), n;
        }
        let d = new Set([
          "Unidentified",
          "Alt",
          "AltGraph",
          "CapsLock",
          "Control",
          "Fn",
          "FnLock",
          "Meta",
          "NumLock",
          "ScrollLock",
          "Shift",
          "Tab",
          "ArrowDown",
          "ArrowLeft",
          "ArrowRight",
          "ArrowUp",
          "End",
          "Home",
          "PageDown",
          "PageUp",
          "Insert",
          "ContextMenu",
          "Escape",
          "Pause",
          "Play",
          "PrintScreen",
          "F1",
          "F3",
          "F4",
          "F5",
          "F6",
          "F7",
          "F8",
          "F9",
          "F10",
          "F11",
          "F12",
        ]);
        function h(e) {
          return (e.ctrlKey || e.metaKey) && "Control" !== e.key;
        }
        function p(e, t) {
          return (
            null != e.renderEditCell &&
            ("function" == typeof e.editable ? e.editable(t) : e.editable) !==
              !1
          );
        }
        let f = "rdg-cell cj343x07-0-0-beta-47";
        function m(e) {
          return { "--rdg-grid-row-start": e };
        }
        function g(e, t, n) {
          let r = t + 1,
            i = `calc(${n - 1} * var(--rdg-header-row-height))`;
          return void 0 === e.parent
            ? {
                insetBlockStart: 0,
                gridRowStart: 1,
                gridRowEnd: r,
                paddingBlockStart: i,
              }
            : {
                insetBlockStart: `calc(${t - n} * var(--rdg-header-row-height))`,
                gridRowStart: r - n,
                gridRowEnd: r,
                paddingBlockStart: i,
              };
        }
        function y(e, t = 1) {
          let n = e.idx + 1;
          return {
            gridColumnStart: n,
            gridColumnEnd: n + t,
            insetInlineStart: e.frozen
              ? `var(--rdg-frozen-left-${e.idx})`
              : void 0,
          };
        }
        function v(e, ...t) {
          return (0, s.A)(
            f,
            ...t,
            e.frozen && "rdg-cell-frozen csofj7r7-0-0-beta-47",
          );
        }
        let { min: b, max: x, floor: k, sign: w, abs: _ } = Math;
        function O(e) {
          if ("function" != typeof e)
            throw Error(
              "Please specify the rowKeyGetter prop to use selection",
            );
        }
        function T(e, { minWidth: t, maxWidth: n }) {
          return ((e = x(e, t)), "number" == typeof n && n >= t) ? b(e, n) : e;
        }
        function S(e, t) {
          return void 0 === e.parent ? t : e.level - e.parent.level;
        }
        function E({ onChange: e, indeterminate: t, ...n }) {
          return (0, o.jsx)("input", {
            ref: (e) => {
              e && (e.indeterminate = !0 === t);
            },
            type: "checkbox",
            className: "rdg-checkbox-input c1bn88vv7-0-0-beta-47",
            onChange: function (t) {
              e(t.target.checked, t.nativeEvent.shiftKey);
            },
            ...n,
          });
        }
        function C({
          groupKey: e,
          isExpanded: t,
          tabIndex: n,
          toggleGroup: r,
        }) {
          return jsxs("span", {
            className: null,
            tabIndex: n,
            onKeyDown: function ({ key: e }) {
              "Enter" === e && r();
            },
            children: [
              e,
              jsx("svg", {
                viewBox: "0 0 14 8",
                width: "14",
                height: "8",
                className: null,
                "aria-hidden": !0,
                children: jsx("path", {
                  d: t ? "M1 1 L 7 7 L 13 1" : "M1 7 L 7 1 L 13 7",
                }),
              }),
            ],
          });
        }
        function A(e) {
          try {
            return e.row[e.column.key];
          } catch {
            return null;
          }
        }
        let N = (0, r.createContext)(void 0),
          I = N.Provider;
        function D() {
          return (0, r.useContext)(N);
        }
        let P = (0, r.createContext)(void 0),
          R = P.Provider,
          M = (0, r.createContext)(void 0),
          L = M.Provider,
          j = (0, r.createContext)(void 0).Provider,
          F = (0, r.createContext)(void 0).Provider,
          B = "rdg-select-column",
          z = "undefined" == typeof window ? r.useEffect : r.useLayoutEffect;
        function $(e, t) {
          let n = `[data-measuring-cell-key="${CSS.escape(t)}"]`,
            r = e.current?.querySelector(n);
          return r?.getBoundingClientRect().width;
        }
        function q(e) {
          let t = (0, r.useRef)(e);
          (0, r.useEffect)(() => {
            t.current = e;
          });
          let n = (0, r.useCallback)((...e) => {
            t.current(...e);
          }, []);
          return e ? n : e;
        }
        function U(e) {
          let [t, n] = (0, r.useState)(!1);
          return (
            t && !e && n(!1),
            {
              tabIndex: e && !t ? 0 : -1,
              childTabIndex: e ? 0 : -1,
              onFocus: e
                ? function (e) {
                    e.target !== e.currentTarget && n(!0);
                  }
                : void 0,
            }
          );
        }
        function H({
          gridRowStart: e,
          rows: t,
          column: n,
          columnWidth: r,
          maxColIdx: i,
          isLastRow: a,
          selectedPosition: l,
          latestDraggedOverRowIdx: c,
          isCellEditable: u,
          onRowsChange: d,
          onFill: h,
          onClick: p,
          setDragging: f,
          setDraggedOverRowIdx: m,
        }) {
          let { idx: g, rowIdx: v } = l;
          function b(e, r) {
            let i = t[v],
              s = [...t],
              o = [];
            for (let a = e; a < r; a++)
              if (u({ rowIdx: a, idx: g })) {
                let e = h({ columnKey: n.key, sourceRow: i, targetRow: t[a] });
                e !== t[a] && ((s[a] = e), o.push(a));
              }
            o.length > 0 && d?.(s, { indexes: o, column: n });
          }
          return (0, o.jsx)("div", {
            style: (function () {
              let s = n.colSpan?.({ type: "ROW", row: t[v] }) ?? 1,
                { insetInlineStart: o, ...l } = y(n, s),
                c = "calc(var(--rdg-drag-handle-size) * -0.5 + 1px)",
                u = n.idx + s - 1 === i;
              return {
                ...l,
                gridRowStart: e,
                marginInlineEnd: u ? void 0 : c,
                marginBlockEnd: a ? void 0 : c,
                insetInlineStart: o
                  ? `calc(${o} + ${r}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`
                  : void 0,
              };
            })(),
            className: (0, s.A)(
              "rdg-cell-drag-handle c1w9bbhr7-0-0-beta-47",
              n.frozen && "c1creorc7-0-0-beta-47",
            ),
            onClick: p,
            onMouseDown: function (e) {
              function t(e) {
                1 !== e.buttons && n();
              }
              function n() {
                window.removeEventListener("mouseover", t),
                  window.removeEventListener("mouseup", n),
                  f(!1),
                  (function () {
                    let e = c.current;
                    void 0 !== e &&
                      (b(v < e ? v + 1 : e, v < e ? e + 1 : v), m(void 0));
                  })();
              }
              e.preventDefault(),
                1 === e.buttons &&
                  (f(!0),
                  window.addEventListener("mouseover", t),
                  window.addEventListener("mouseup", n));
            },
            onDoubleClick: function (e) {
              e.stopPropagation(), b(v + 1, t.length);
            },
          });
        }
        function Q({
          column: e,
          colSpan: t,
          row: n,
          rowIdx: i,
          onRowChange: s,
          closeEditor: a,
          onKeyDown: l,
          navigate: c,
        }) {
          let d = (0, r.useRef)(void 0),
            h = e.editorOptions?.commitOnOutsideClick !== !1,
            p = q(() => {
              m(!0, !1);
            });
          function f() {
            cancelAnimationFrame(d.current);
          }
          function m(e = !1, t = !0) {
            e ? s(n, !0, t) : a(t);
          }
          function g(e, t = !1) {
            s(e, t, t);
          }
          (0, r.useEffect)(() => {
            if (h)
              return (
                addEventListener("mousedown", e, { capture: !0 }),
                () => {
                  removeEventListener("mousedown", e, { capture: !0 }), f();
                }
              );
            function e() {
              d.current = requestAnimationFrame(p);
            }
          }, [h, p]);
          let { cellClass: b } = e,
            x = v(
              e,
              "rdg-editor-container",
              "function" == typeof b ? b(n) : b,
              !e.editorOptions?.displayCellContent && "cis5rrm7-0-0-beta-47",
            );
          return (0, o.jsx)("div", {
            role: "gridcell",
            "aria-colindex": e.idx + 1,
            "aria-colspan": t,
            "aria-selected": !0,
            className: x,
            style: y(e, t),
            onKeyDown: function (t) {
              if (l) {
                let r = u(t);
                if (
                  (l(
                    {
                      mode: "EDIT",
                      row: n,
                      column: e,
                      rowIdx: i,
                      navigate() {
                        c(t);
                      },
                      onClose: m,
                    },
                    r,
                  ),
                  r.isGridDefaultPrevented())
                )
                  return;
              }
              "Escape" === t.key
                ? m()
                : "Enter" === t.key
                  ? m(!0)
                  : (function ({ key: e, target: t }) {
                      return (
                        !!(
                          "Tab" === e &&
                          (t instanceof HTMLInputElement ||
                            t instanceof HTMLTextAreaElement ||
                            t instanceof HTMLSelectElement)
                        ) &&
                        t
                          .closest(".rdg-editor-container")
                          ?.querySelectorAll("input, textarea, select")
                          .length === 1
                      );
                    })(t) && c(t);
            },
            onMouseDownCapture: f,
            children:
              null != e.renderEditCell &&
              (0, o.jsxs)(o.Fragment, {
                children: [
                  e.renderEditCell({
                    column: e,
                    row: n,
                    rowIdx: i,
                    onRowChange: g,
                    onClose: m,
                  }),
                  e.editorOptions?.displayCellContent &&
                    e.renderCell({
                      column: e,
                      row: n,
                      rowIdx: i,
                      isCellEditable: !0,
                      tabIndex: -1,
                      onRowChange: g,
                    }),
                ],
              }),
          });
        }
        function V({ column: e, rowIdx: t, isCellSelected: n, selectCell: r }) {
          let { tabIndex: i, onFocus: a } = U(n),
            { colSpan: l } = e,
            c = S(e, t),
            u = e.idx + 1;
          return (0, o.jsx)("div", {
            role: "columnheader",
            "aria-colindex": u,
            "aria-colspan": l,
            "aria-rowspan": c,
            "aria-selected": n,
            tabIndex: i,
            className: (0, s.A)(f, e.headerCellClass),
            style: { ...g(e, t, c), gridColumnStart: u, gridColumnEnd: u + l },
            onFocus: a,
            onClick: function () {
              r({ idx: e.idx, rowIdx: t });
            },
            children: e.name,
          });
        }
        function W({ column: e, sortDirection: t, priority: n }) {
          return e.sortable
            ? (0, o.jsx)(Z, { sortDirection: t, priority: n, children: e.name })
            : e.name;
        }
        function Z({ sortDirection: e, priority: t, children: n }) {
          let r = D().renderSortStatus;
          return (0, o.jsxs)("span", {
            className: "h44jtk67-0-0-beta-47",
            children: [
              (0, o.jsx)("span", {
                className: "rdg-header-sort-name hcgkhxz7-0-0-beta-47",
                children: n,
              }),
              (0, o.jsx)("span", {
                children: r({ sortDirection: e, priority: t }),
              }),
            ],
          });
        }
        function G({
          column: e,
          colSpan: t,
          rowIdx: n,
          isCellSelected: i,
          onColumnResize: s,
          onColumnsReorder: a,
          sortColumns: c,
          onSortColumnsChange: u,
          selectCell: d,
          shouldFocusGrid: h,
          direction: p,
          dragDropKey: f,
        }) {
          let m,
            [b, x] = (0, r.useState)(!1),
            [k, w] = (0, r.useState)(!1),
            _ = "rtl" === p,
            O = S(e, n),
            { tabIndex: E, childTabIndex: C, onFocus: A } = U(i),
            N = c?.findIndex((t) => t.columnKey === e.key),
            I = void 0 !== N && N > -1 ? c[N] : void 0,
            D = I?.direction,
            P = void 0 !== I && c.length > 1 ? N + 1 : void 0,
            R = D && !P ? ("ASC" === D ? "ascending" : "descending") : void 0,
            { sortable: M, resizable: L, draggable: j } = e,
            F = v(
              e,
              e.headerCellClass,
              M && "c6l2wv17-0-0-beta-47",
              L && "rdg-cell-resizable c1kqdw7y7-0-0-beta-47",
              j && "rdg-cell-draggable",
              b && "rdg-cell-dragging c1bezg5o7-0-0-beta-47",
              k && "rdg-cell-drag-over c1vc96037-0-0-beta-47",
            ),
            B = e.renderHeaderCell ?? W;
          function z(t) {
            if (null == u) return;
            let { sortDescendingFirst: n } = e;
            if (void 0 === I) {
              let r = { columnKey: e.key, direction: n ? "DESC" : "ASC" };
              u(c && t ? [...c, r] : [r]);
            } else {
              let r;
              if (
                (((!0 === n && "DESC" === D) || (!0 !== n && "ASC" === D)) &&
                  (r = {
                    columnKey: e.key,
                    direction: "ASC" === D ? "DESC" : "ASC",
                  }),
                t)
              ) {
                let e = [...c];
                r ? (e[N] = r) : e.splice(N, 1), u(e);
              } else u(r ? [r] : []);
            }
          }
          return (
            j &&
              (m = {
                draggable: !0,
                onDragStart: function (t) {
                  t.dataTransfer.setData(f, e.key),
                    (t.dataTransfer.dropEffect = "move"),
                    x(!0);
                },
                onDragEnd: function () {
                  x(!1);
                },
                onDragOver: function (e) {
                  e.preventDefault(), (e.dataTransfer.dropEffect = "move");
                },
                onDragEnter: function (e) {
                  Y(e) && w(!0);
                },
                onDragLeave: function (e) {
                  Y(e) && w(!1);
                },
                onDrop: function (t) {
                  if ((w(!1), t.dataTransfer.types.includes(f.toLowerCase()))) {
                    let n = t.dataTransfer.getData(f.toLowerCase());
                    n !== e.key && (t.preventDefault(), a?.(n, e.key));
                  }
                },
              }),
            (0, o.jsxs)("div", {
              role: "columnheader",
              "aria-colindex": e.idx + 1,
              "aria-colspan": t,
              "aria-rowspan": O,
              "aria-selected": i,
              "aria-sort": R,
              tabIndex: h ? 0 : E,
              className: F,
              style: { ...g(e, n, O), ...y(e, t) },
              onFocus: function (e) {
                A?.(e), h && d({ idx: 0, rowIdx: n });
              },
              onClick: function (t) {
                d({ idx: e.idx, rowIdx: n }), M && z(t.ctrlKey || t.metaKey);
              },
              onKeyDown: M
                ? function (e) {
                    (" " === e.key || "Enter" === e.key) &&
                      (e.preventDefault(), z(e.ctrlKey || e.metaKey));
                  }
                : void 0,
              ...m,
              children: [
                B({ column: e, sortDirection: D, priority: P, tabIndex: C }),
                L &&
                  (0, o.jsx)("div", {
                    className: "r1y6ywlx7-0-0-beta-47",
                    onClick: l,
                    onPointerDown: function (t) {
                      if ("mouse" === t.pointerType && 1 !== t.buttons) return;
                      t.preventDefault();
                      let { currentTarget: n, pointerId: r } = t,
                        i = n.parentElement,
                        { right: o, left: a } = i.getBoundingClientRect(),
                        l = _ ? t.clientX - a : o - t.clientX,
                        c = !1;
                      function u(t) {
                        let {
                            width: n,
                            right: r,
                            left: o,
                          } = i.getBoundingClientRect(),
                          a = _ ? r + l - t.clientX : t.clientX + l - o;
                        (a = T(a, e)), n > 0 && a !== n && s(e, a);
                      }
                      function d() {
                        (c = !0), s(e, "max-content");
                      }
                      n.setPointerCapture(r),
                        n.addEventListener("pointermove", u),
                        n.addEventListener("dblclick", d),
                        n.addEventListener("lostpointercapture", function e(t) {
                          c || u(t),
                            n.removeEventListener("pointermove", u),
                            n.removeEventListener("dblclick", d),
                            n.removeEventListener("lostpointercapture", e);
                        });
                    },
                  }),
              ],
            })
          );
        }
        function Y(e) {
          let t = e.relatedTarget;
          return !e.currentTarget.contains(t);
        }
        let K = "rdg-row r1upfr807-0-0-beta-47",
          X = "rdg-row-selected",
          J = "rdg-header-row h10tskcx7-0-0-beta-47",
          ee = (0, r.memo)(function ({
            rowIdx: e,
            columns: t,
            onColumnResize: n,
            onColumnsReorder: i,
            sortColumns: l,
            onSortColumnsChange: c,
            lastFrozenColumnIndex: u,
            selectedCellIdx: d,
            selectCell: h,
            shouldFocusGrid: p,
            direction: f,
          }) {
            let m = (0, r.useId)(),
              g = [];
            for (let r = 0; r < t.length; r++) {
              let s = t[r],
                y = a(s, u, { type: "HEADER" });
              void 0 !== y && (r += y - 1),
                g.push(
                  (0, o.jsx)(
                    G,
                    {
                      column: s,
                      colSpan: y,
                      rowIdx: e,
                      isCellSelected: d === s.idx,
                      onColumnResize: n,
                      onColumnsReorder: i,
                      onSortColumnsChange: c,
                      sortColumns: l,
                      selectCell: h,
                      shouldFocusGrid: p && 0 === r,
                      direction: f,
                      dragDropKey: m,
                    },
                    s.key,
                  ),
                );
            }
            return (0, o.jsx)("div", {
              role: "row",
              "aria-rowindex": e,
              className: (0, s.A)(J, -1 === d && X),
              children: g,
            });
          }),
          et = (0, r.memo)(function ({
            rowIdx: e,
            level: t,
            columns: n,
            selectedCellIdx: r,
            selectCell: i,
          }) {
            let s = [],
              a = new Set();
            for (let l of n) {
              let { parent: n } = l;
              if (void 0 !== n) {
                for (; n.level > t && void 0 !== n.parent; ) n = n.parent;
                if (n.level === t && !a.has(n)) {
                  a.add(n);
                  let { idx: t } = n;
                  s.push(
                    (0, o.jsx)(
                      V,
                      {
                        column: n,
                        rowIdx: e,
                        isCellSelected: r === t,
                        selectCell: i,
                      },
                      t,
                    ),
                  );
                }
              }
            }
            return (0, o.jsx)("div", {
              role: "row",
              "aria-rowindex": e,
              className: J,
              children: s,
            });
          }),
          en = (0, r.memo)(function ({
            column: e,
            colSpan: t,
            isCellSelected: n,
            isCopied: r,
            isDraggedOver: i,
            row: s,
            rowIdx: a,
            onClick: l,
            onDoubleClick: c,
            onContextMenu: d,
            onRowChange: h,
            selectCell: f,
            ...m
          }) {
            let { tabIndex: g, childTabIndex: b, onFocus: x } = U(n),
              { cellClass: k } = e,
              w = v(
                e,
                "function" == typeof k ? k(s) : k,
                r && "rdg-cell-copied c6ra8a37-0-0-beta-47",
                i && "rdg-cell-dragged-over cq910m07-0-0-beta-47",
              ),
              _ = p(e, s);
            function O(t) {
              f({ rowIdx: a, idx: e.idx }, t);
            }
            return (0, o.jsx)("div", {
              role: "gridcell",
              "aria-colindex": e.idx + 1,
              "aria-colspan": t,
              "aria-selected": n,
              "aria-readonly": !_ || void 0,
              tabIndex: g,
              className: w,
              style: y(e, t),
              onClick: function (t) {
                if (l) {
                  let n = u(t);
                  if (
                    (l({ row: s, column: e, selectCell: O }, n),
                    n.isGridDefaultPrevented())
                  )
                    return;
                }
                O();
              },
              onDoubleClick: function (t) {
                if (c) {
                  let n = u(t);
                  if (
                    (c({ row: s, column: e, selectCell: O }, n),
                    n.isGridDefaultPrevented())
                  )
                    return;
                }
                O(!0);
              },
              onContextMenu: function (t) {
                if (d) {
                  let n = u(t);
                  if (
                    (d({ row: s, column: e, selectCell: O }, n),
                    n.isGridDefaultPrevented())
                  )
                    return;
                }
                O();
              },
              onFocus: x,
              ...m,
              children: e.renderCell({
                column: e,
                row: s,
                rowIdx: a,
                isCellEditable: _,
                tabIndex: b,
                onRowChange: function (t) {
                  h(e, t);
                },
              }),
            });
          }),
          er = (0, r.memo)(
            (0, r.forwardRef)(function (
              {
                className: e,
                rowIdx: t,
                gridRowStart: n,
                selectedCellIdx: i,
                isRowSelectionDisabled: l,
                isRowSelected: c,
                copiedCellIdx: u,
                draggedOverCellIdx: d,
                lastFrozenColumnIndex: h,
                row: p,
                viewportColumns: f,
                selectedCellEditor: g,
                onCellClick: y,
                onCellDoubleClick: v,
                onCellContextMenu: b,
                rowClass: x,
                setDraggedOverRowIdx: k,
                onMouseEnter: w,
                onRowChange: _,
                selectCell: O,
                ...T
              },
              S,
            ) {
              let E = q((e, n) => {
                _(e, t, n);
              });
              e = (0, s.A)(
                K,
                `rdg-row-${t % 2 == 0 ? "even" : "odd"}`,
                x?.(p, t),
                e,
                -1 === i && X,
              );
              let C = [];
              for (let e = 0; e < f.length; e++) {
                let n = f[e],
                  { idx: r } = n,
                  s = a(n, h, { type: "ROW", row: p });
                void 0 !== s && (e += s - 1);
                let l = i === r;
                l && g
                  ? C.push(g)
                  : C.push(
                      (0, o.jsx)(
                        en,
                        {
                          column: n,
                          colSpan: s,
                          row: p,
                          rowIdx: t,
                          isCopied: u === r,
                          isDraggedOver: d === r,
                          isCellSelected: l,
                          onClick: y,
                          onDoubleClick: v,
                          onContextMenu: b,
                          onRowChange: E,
                          selectCell: O,
                        },
                        n.key,
                      ),
                    );
              }
              let A = (0, r.useMemo)(
                () => ({ isRowSelected: c, isRowSelectionDisabled: l }),
                [l, c],
              );
              return (0, o.jsx)(R, {
                value: A,
                children: (0, o.jsx)("div", {
                  role: "row",
                  ref: S,
                  className: e,
                  onMouseEnter: function (e) {
                    k?.(t), w?.(e);
                  },
                  style: m(n),
                  ...T,
                  children: C,
                }),
              });
            }),
          );
        function ei(e, t) {
          return (0, o.jsx)(er, { ...t }, e);
        }
        function es({
          scrollToPosition: { idx: e, rowIdx: t },
          gridElement: n,
          setScrollToCellPosition: i,
        }) {
          let s = (0, r.useRef)(null);
          return (
            z(() => {
              c(s.current);
            }),
            z(() => {
              let e = new IntersectionObserver(
                function () {
                  i(null);
                },
                { root: n, threshold: 1 },
              );
              return (
                e.observe(s.current),
                () => {
                  e.disconnect();
                }
              );
            }, [n, i]),
            (0, o.jsx)("div", {
              ref: s,
              style: {
                gridColumn: void 0 === e ? "1/-1" : e + 1,
                gridRow: void 0 === t ? "1/-1" : t + 2,
              },
            })
          );
        }
        function eo({ sortDirection: e, priority: t }) {
          return (0, o.jsxs)(o.Fragment, {
            children: [
              (function ({ sortDirection: e }) {
                return void 0 === e
                  ? null
                  : (0, o.jsx)("svg", {
                      viewBox: "0 0 12 8",
                      width: "12",
                      height: "8",
                      className: "rdg-sort-arrow a3ejtar7-0-0-beta-47",
                      "aria-hidden": !0,
                      children: (0, o.jsx)("path", {
                        d: "ASC" === e ? "M0 8 6 0 12 8" : "M0 0 6 8 12 0",
                      }),
                    });
              })({ sortDirection: e }),
              (function ({ priority: e }) {
                return e;
              })({ priority: t }),
            ],
          });
        }
        let ea = (0, r.memo)(function ({
            column: e,
            colSpan: t,
            row: n,
            rowIdx: r,
            isCellSelected: i,
            selectCell: s,
          }) {
            let { tabIndex: a, childTabIndex: l, onFocus: c } = U(i),
              { summaryCellClass: u } = e,
              d = v(
                e,
                "s8wc6fl7-0-0-beta-47",
                "function" == typeof u ? u(n) : u,
              );
            return (0, o.jsx)("div", {
              role: "gridcell",
              "aria-colindex": e.idx + 1,
              "aria-colspan": t,
              "aria-selected": i,
              tabIndex: a,
              className: d,
              style: y(e, t),
              onClick: function () {
                s({ rowIdx: r, idx: e.idx });
              },
              onFocus: c,
              children: e.renderSummaryCell?.({
                column: e,
                row: n,
                tabIndex: l,
              }),
            });
          }),
          el = (0, r.memo)(function ({
            rowIdx: e,
            gridRowStart: t,
            row: n,
            viewportColumns: r,
            top: i,
            bottom: l,
            lastFrozenColumnIndex: c,
            selectedCellIdx: u,
            isTop: d,
            selectCell: h,
            "aria-rowindex": p,
          }) {
            let f = [];
            for (let t = 0; t < r.length; t++) {
              let i = r[t],
                s = a(i, c, { type: "SUMMARY", row: n });
              void 0 !== s && (t += s - 1);
              let l = u === i.idx;
              f.push(
                (0, o.jsx)(
                  ea,
                  {
                    column: i,
                    colSpan: s,
                    row: n,
                    rowIdx: e,
                    isCellSelected: l,
                    selectCell: h,
                  },
                  i.key,
                ),
              );
            }
            return (0, o.jsx)("div", {
              role: "row",
              "aria-rowindex": p,
              className: (0, s.A)(
                K,
                `rdg-row-${e % 2 == 0 ? "even" : "odd"}`,
                "rdg-summary-row skuhp557-0-0-beta-47",
                d
                  ? "rdg-top-summary-row tf8l5ub7-0-0-beta-47"
                  : "rdg-bottom-summary-row",
                -1 === u && X,
              ),
              style: {
                ...m(t),
                "--rdg-summary-row-top": void 0 !== i ? `${i}px` : void 0,
                "--rdg-summary-row-bottom": void 0 !== l ? `${l}px` : void 0,
              },
              children: f,
            });
          });
        function ec(e) {
          return e.querySelector(':scope > [role="row"] > [tabindex="0"]');
        }
        function eu(e, t) {
          return e.idx === t.idx && e.rowIdx === t.rowIdx;
        }
        let ed = (0, r.forwardRef)(function (e, t) {
          let {
              columns: n,
              rows: l,
              topSummaryRows: f,
              bottomSummaryRows: m,
              rowKeyGetter: g,
              onRowsChange: y,
              rowHeight: v,
              headerRowHeight: S,
              summaryRowHeight: C,
              selectedRows: N,
              isRowSelectionDisabled: P,
              onSelectedRowsChange: R,
              sortColumns: M,
              onSortColumnsChange: U,
              defaultColumnOptions: V,
              onCellClick: W,
              onCellDoubleClick: Z,
              onCellContextMenu: G,
              onCellKeyDown: Y,
              onSelectedCellChange: K,
              onScroll: X,
              onColumnResize: J,
              onColumnsReorder: en,
              onFill: er,
              onCopy: ea,
              onPaste: ed,
              enableVirtualization: eh,
              renderers: ep,
              className: ef,
              style: em,
              rowClass: eg,
              direction: ey,
              role: ev,
              "aria-label": eb,
              "aria-labelledby": ex,
              "aria-describedby": ek,
              "aria-rowcount": ew,
              "data-testid": e_,
            } = e,
            eO = D(),
            eT = ev ?? "grid",
            eS = v ?? 35,
            eE = S ?? ("number" == typeof eS ? eS : 35),
            eC = C ?? ("number" == typeof eS ? eS : 35),
            eA = ep?.renderRow ?? eO?.renderRow ?? ei,
            eN = ep?.renderSortStatus ?? eO?.renderSortStatus ?? eo,
            eI = ep?.renderCheckbox ?? eO?.renderCheckbox ?? E,
            eD = ep?.noRowsFallback ?? eO?.noRowsFallback,
            eP = eh ?? !0,
            eR = ey ?? "ltr",
            [eM, eL] = (0, r.useState)(0),
            [ej, eF] = (0, r.useState)(0),
            [eB, ez] = (0, r.useState)(() => new Map()),
            [e$, eq] = (0, r.useState)(() => new Map()),
            [eU, eH] = (0, r.useState)(null),
            [eQ, eV] = (0, r.useState)(!1),
            [eW, eZ] = (0, r.useState)(void 0),
            [eG, eY] = (0, r.useState)(null),
            eK = (0, r.useCallback)(
              (e) => eB.get(e.key) ?? e$.get(e.key) ?? e.width,
              [e$, eB],
            ),
            [eX, eJ, e0, e1] = (function () {
              let e = (0, r.useRef)(null),
                [t, n] = (0, r.useState)(1),
                [s, o] = (0, r.useState)(1),
                [a, l] = (0, r.useState)(0);
              return (
                z(() => {
                  let { ResizeObserver: t } = window;
                  if (null == t) return;
                  let {
                      clientWidth: r,
                      clientHeight: s,
                      offsetWidth: a,
                      offsetHeight: c,
                    } = e.current,
                    { width: u, height: d } = e.current.getBoundingClientRect(),
                    h = c - s;
                  n(u - a + r), o(d - h), l(h);
                  let p = new t((t) => {
                    let r = t[0].contentBoxSize[0],
                      { clientHeight: s, offsetHeight: a } = e.current;
                    (0, i.flushSync)(() => {
                      n(r.inlineSize), o(r.blockSize), l(a - s);
                    });
                  });
                  return (
                    p.observe(e.current),
                    () => {
                      p.disconnect();
                    }
                  );
                }, []),
                [e, t, s, a]
              );
            })(),
            {
              columns: e2,
              colSpanColumns: e5,
              lastFrozenColumnIndex: e3,
              headerRowsCount: e4,
              colOverscanStartIdx: e8,
              colOverscanEndIdx: e6,
              templateColumns: e9,
              layoutCssVars: e7,
              totalFrozenColumnWidth: te,
            } = (function ({
              rawColumns: e,
              defaultColumnOptions: t,
              getColumnWidth: n,
              viewportWidth: i,
              scrollLeft: s,
              enableVirtualization: o,
            }) {
              let a = t?.width ?? "auto",
                l = t?.minWidth ?? 50,
                c = t?.maxWidth ?? void 0,
                u = t?.renderCell ?? A,
                d = t?.sortable ?? !1,
                h = t?.resizable ?? !1,
                p = t?.draggable ?? !1,
                {
                  columns: f,
                  colSpanColumns: m,
                  lastFrozenColumnIndex: g,
                  headerRowsCount: y,
                } = (0, r.useMemo)(() => {
                  let t = -1,
                    n = 1,
                    r = [];
                  !(function e(i, s, o) {
                    for (let f of i) {
                      if ("children" in f) {
                        let t = {
                          name: f.name,
                          parent: o,
                          idx: -1,
                          colSpan: 0,
                          level: 0,
                          headerCellClass: f.headerCellClass,
                        };
                        e(f.children, s + 1, t);
                        continue;
                      }
                      let i = f.frozen ?? !1,
                        m = {
                          ...f,
                          parent: o,
                          idx: 0,
                          level: 0,
                          frozen: i,
                          width: f.width ?? a,
                          minWidth: f.minWidth ?? l,
                          maxWidth: f.maxWidth ?? c,
                          sortable: f.sortable ?? d,
                          resizable: f.resizable ?? h,
                          draggable: f.draggable ?? p,
                          renderCell: f.renderCell ?? u,
                        };
                      r.push(m), i && t++, s > n && (n = s);
                    }
                  })(e, 1),
                    r.sort(({ key: e, frozen: t }, { key: n, frozen: r }) =>
                      e === B ? -1 : n === B ? 1 : t ? (r ? 0 : -1) : +!!r,
                    );
                  let i = [];
                  return (
                    r.forEach((e, t) => {
                      (e.idx = t),
                        (function e(t, n, r) {
                          if (
                            (r < t.level && (t.level = r), void 0 !== t.parent)
                          ) {
                            let { parent: i } = t;
                            -1 === i.idx && (i.idx = n),
                              (i.colSpan += 1),
                              e(i, n, r - 1);
                          }
                        })(e, t, 0),
                        null != e.colSpan && i.push(e);
                    }),
                    {
                      columns: r,
                      colSpanColumns: i,
                      lastFrozenColumnIndex: t,
                      headerRowsCount: n,
                    }
                  );
                }, [e, a, l, c, u, h, d, p]),
                {
                  templateColumns: v,
                  layoutCssVars: k,
                  totalFrozenColumnWidth: w,
                  columnMetrics: _,
                } = (0, r.useMemo)(() => {
                  let e = new Map(),
                    t = 0,
                    r = 0,
                    i = [];
                  for (let r of f) {
                    let s = n(r);
                    (s = "number" == typeof s ? T(s, r) : r.minWidth),
                      i.push(`${s}px`),
                      e.set(r, { width: s, left: t }),
                      (t += s);
                  }
                  if (-1 !== g) {
                    let t = e.get(f[g]);
                    r = t.left + t.width;
                  }
                  let s = {};
                  for (let t = 0; t <= g; t++) {
                    let n = f[t];
                    s[`--rdg-frozen-left-${n.idx}`] = `${e.get(n).left}px`;
                  }
                  return {
                    templateColumns: i,
                    layoutCssVars: s,
                    totalFrozenColumnWidth: r,
                    columnMetrics: e,
                  };
                }, [n, f, g]),
                [O, S] = (0, r.useMemo)(() => {
                  if (!o) return [0, f.length - 1];
                  let e = s + w,
                    t = s + i,
                    n = f.length - 1,
                    r = b(g + 1, n);
                  if (e >= t) return [r, r];
                  let a = r;
                  for (; a < n; ) {
                    let { left: t, width: n } = _.get(f[a]);
                    if (t + n > e) break;
                    a++;
                  }
                  let l = a;
                  for (; l < n; ) {
                    let { left: e, width: n } = _.get(f[l]);
                    if (e + n >= t) break;
                    l++;
                  }
                  return [x(r, a - 1), b(n, l + 1)];
                }, [_, f, g, s, w, i, o]);
              return {
                columns: f,
                colSpanColumns: m,
                colOverscanStartIdx: O,
                colOverscanEndIdx: S,
                templateColumns: v,
                layoutCssVars: k,
                headerRowsCount: y,
                lastFrozenColumnIndex: g,
                totalFrozenColumnWidth: w,
              };
            })({
              rawColumns: n,
              defaultColumnOptions: V,
              getColumnWidth: eK,
              scrollLeft: ej,
              viewportWidth: eJ,
              enableVirtualization: eP,
            }),
            tt = f?.length ?? 0,
            tn = m?.length ?? 0,
            tr = tt + tn,
            ti = e4 + tt,
            ts = e4 - 1,
            to = -ti,
            ta = to + ts,
            tl = l.length + tn - 1,
            [tc, tu] = (0, r.useState)(() => ({
              idx: -1,
              rowIdx: to - 1,
              mode: "SELECT",
            })),
            td = (0, r.useRef)(tc),
            th = (0, r.useRef)(eW),
            tp = (0, r.useRef)(-1),
            tf = (0, r.useRef)(null),
            tm = (0, r.useRef)(!1),
            tg = "treegrid" === eT,
            ty = e4 * eE,
            tv = tr * eC,
            tb = e0 - ty - tv,
            tx = null != N && null != R,
            tk = "rtl" === eR,
            tw = tk ? "ArrowRight" : "ArrowLeft",
            t_ = tk ? "ArrowLeft" : "ArrowRight",
            tO = ew ?? e4 + l.length + tr,
            tT = (0, r.useMemo)(
              () => ({ renderCheckbox: eI, renderSortStatus: eN }),
              [eI, eN],
            ),
            tS = (0, r.useMemo)(() => {
              let e = !1,
                t = !1;
              if (null != g && null != N && N.size > 0) {
                for (let n of l)
                  if ((N.has(g(n)) ? (e = !0) : (t = !0), e && t)) break;
              }
              return { isRowSelected: e && !t, isIndeterminate: e && t };
            }, [l, N, g]),
            {
              rowOverscanStartIdx: tE,
              rowOverscanEndIdx: tC,
              totalRowHeight: tA,
              gridTemplateRows: tN,
              getRowTop: tI,
              getRowHeight: tD,
              findRowIdx: tP,
            } = (function ({
              rows: e,
              rowHeight: t,
              clientHeight: n,
              scrollTop: i,
              enableVirtualization: s,
            }) {
              let {
                  totalRowHeight: o,
                  gridTemplateRows: a,
                  getRowTop: l,
                  getRowHeight: c,
                  findRowIdx: u,
                } = (0, r.useMemo)(() => {
                  if ("number" == typeof t)
                    return {
                      totalRowHeight: t * e.length,
                      gridTemplateRows: ` repeat(${e.length}, ${t}px)`,
                      getRowTop: (e) => e * t,
                      getRowHeight: () => t,
                      findRowIdx: (e) => k(e / t),
                    };
                  let n = 0,
                    r = " ",
                    i = e.map((e) => {
                      let i = t(e),
                        s = { top: n, height: i };
                      return (r += `${i}px `), (n += i), s;
                    }),
                    s = (t) => x(0, b(e.length - 1, t));
                  return {
                    totalRowHeight: n,
                    gridTemplateRows: r,
                    getRowTop: (e) => i[s(e)].top,
                    getRowHeight: (e) => i[s(e)].height,
                    findRowIdx(e) {
                      let t = 0,
                        n = i.length - 1;
                      for (; t <= n; ) {
                        let r = t + k((n - t) / 2),
                          s = i[r].top;
                        if (s === e) return r;
                        if ((s < e ? (t = r + 1) : s > e && (n = r - 1), t > n))
                          return n;
                      }
                      return 0;
                    },
                  };
                }, [t, e]),
                d = 0,
                h = e.length - 1;
              if (s) {
                let t = u(i),
                  r = u(i + n);
                (d = x(0, t - 4)), (h = b(e.length - 1, r + 4));
              }
              return {
                rowOverscanStartIdx: d,
                rowOverscanEndIdx: h,
                totalRowHeight: o,
                gridTemplateRows: a,
                getRowTop: l,
                getRowHeight: c,
                findRowIdx: u,
              };
            })({
              rows: l,
              rowHeight: eS,
              clientHeight: tb,
              scrollTop: eM,
              enableVirtualization: eP,
            }),
            tR = (function ({
              columns: e,
              colSpanColumns: t,
              rows: n,
              topSummaryRows: i,
              bottomSummaryRows: s,
              colOverscanStartIdx: o,
              colOverscanEndIdx: l,
              lastFrozenColumnIndex: c,
              rowOverscanStartIdx: u,
              rowOverscanEndIdx: d,
            }) {
              let h = (0, r.useMemo)(() => {
                if (0 === o) return 0;
                let e = o,
                  r = (t, n) => void 0 !== n && t + n > o && ((e = t), !0);
                for (let o of t) {
                  let t = o.idx;
                  if (t >= e || r(t, a(o, c, { type: "HEADER" }))) break;
                  for (
                    let e = u;
                    e <= d && !r(t, a(o, c, { type: "ROW", row: n[e] }));
                    e++
                  );
                  if (null != i) {
                    for (let e of i)
                      if (r(t, a(o, c, { type: "SUMMARY", row: e }))) break;
                  }
                  if (null != s) {
                    for (let e of s)
                      if (r(t, a(o, c, { type: "SUMMARY", row: e }))) break;
                  }
                }
                return e;
              }, [u, d, n, i, s, o, c, t]);
              return (0, r.useMemo)(() => {
                let t = [];
                for (let n = 0; n <= l; n++) {
                  let r = e[n];
                  (!(n < h) || r.frozen) && t.push(r);
                }
                return t;
              }, [h, l, e]);
            })({
              columns: e2,
              colSpanColumns: e5,
              colOverscanStartIdx: e8,
              colOverscanEndIdx: e6,
              lastFrozenColumnIndex: e3,
              rowOverscanStartIdx: tE,
              rowOverscanEndIdx: tC,
              rows: l,
              topSummaryRows: f,
              bottomSummaryRows: m,
            }),
            { gridTemplateColumns: tM, handleColumnResize: tL } = (function (
              e,
              t,
              n,
              s,
              o,
              a,
              l,
              c,
              u,
              d,
            ) {
              let h = (0, r.useRef)(o),
                p = e.length === t.length,
                f = p && o !== h.current,
                m = [...n],
                g = [];
              for (let { key: e, idx: n, width: r } of t)
                "string" != typeof r ||
                  (!f && l.has(e)) ||
                  a.has(e) ||
                  ((m[n] = r), g.push(e));
              let y = m.join(" ");
              function v(e) {
                0 !== e.length &&
                  u((t) => {
                    let n = new Map(t),
                      r = !1;
                    for (let i of e) {
                      let e = $(s, i);
                      (r ||= e !== t.get(i)),
                        void 0 === e ? n.delete(i) : n.set(i, e);
                    }
                    return r ? n : t;
                  });
              }
              return (
                z(() => {
                  (h.current = o), v(g);
                }),
                {
                  gridTemplateColumns: y,
                  handleColumnResize: function (e, r) {
                    let { key: o } = e,
                      l = [...n],
                      u = [];
                    for (let { key: e, idx: n, width: i } of t)
                      if (o === e) {
                        let e = "number" == typeof r ? `${r}px` : r;
                        l[n] = e;
                      } else
                        p &&
                          "string" == typeof i &&
                          !a.has(e) &&
                          ((l[n] = i), u.push(e));
                    s.current.style.gridTemplateColumns = l.join(" ");
                    let h = "number" == typeof r ? r : $(s, o);
                    (0, i.flushSync)(() => {
                      c((e) => {
                        let t = new Map(e);
                        return t.set(o, h), t;
                      }),
                        v(u);
                    }),
                      d?.(e.idx, h);
                  },
                }
              );
            })(e2, tR, e9, eX, eJ, eB, e$, ez, eq, J),
            tj = tg ? -1 : 0,
            tF = e2.length - 1,
            tB = t3(tc),
            tz = t4(tc),
            t$ = eE + tA + tv + e1,
            tq = q(tL),
            tU = q(en),
            tH = q(U),
            tQ = q(W),
            tV = q(Z),
            tW = q(G),
            tZ = q(function (e) {
              if (!R) return;
              O(g);
              let t = new Set(N);
              for (let n of l) {
                if (P?.(n) === !0) continue;
                let r = g(n);
                e.checked ? t.add(r) : t.delete(r);
              }
              R(t);
            }),
            tG = q(t0),
            tY = q(t1),
            tK = q(t6),
            tX = q(({ idx: e, rowIdx: t }) => {
              t6({ rowIdx: to + t - 1, idx: e });
            });
          z(() => {
            if (!tB || eu(tc, td.current)) {
              td.current = tc;
              return;
            }
            (td.current = tc),
              -1 === tc.idx &&
                (tf.current.focus({ preventScroll: !0 }), c(tf.current));
          }),
            z(() => {
              tm.current && ((tm.current = !1), t7());
            }),
            (0, r.useImperativeHandle)(t, () => ({
              element: eX.current,
              scrollToCell({ idx: e, rowIdx: t }) {
                let n = void 0 !== e && e > e3 && e < e2.length ? e : void 0,
                  r = void 0 !== t && t5(t) ? t : void 0;
                (void 0 !== n || void 0 !== r) && eY({ idx: n, rowIdx: r });
              },
              selectCell: t6,
            }));
          let tJ = (0, r.useCallback)((e) => {
            eZ(e), (th.current = e);
          }, []);
          function t0(e) {
            if (!R) return;
            O(g);
            let { row: t, checked: n, isShiftClick: r } = e;
            if (P?.(t) === !0) return;
            let i = new Set(N),
              s = g(t),
              o = tp.current,
              a = l.indexOf(t);
            if (
              ((tp.current = a),
              n ? i.add(s) : i.delete(s),
              r && -1 !== o && o !== a && o < l.length)
            ) {
              let e = w(a - o);
              for (let t = o + e; t !== a; t += e) {
                let e = l[t];
                P?.(e) !== !0 && (n ? i.add(g(e)) : i.delete(g(e)));
              }
            }
            R(i);
          }
          function t1(e, t, n) {
            if ("function" != typeof y || n === l[t]) return;
            let r = [...l];
            (r[t] = n), y(r, { indexes: [t], column: e });
          }
          function t2() {
            "EDIT" === tc.mode && t1(e2[tc.idx], tc.rowIdx, tc.row);
          }
          function t5(e) {
            return e >= 0 && e < l.length;
          }
          function t3({ idx: e, rowIdx: t }) {
            var n;
            return t >= to && t <= tl && (n = e) >= tj && n <= tF;
          }
          function t4({ idx: e, rowIdx: t }) {
            var n;
            return t5(t) && (n = e) >= tj && n <= tF;
          }
          function t8(e) {
            return (
              (function ({ idx: e, rowIdx: t }) {
                return t5(t) && e >= 0 && e <= tF;
              })(e) &&
              (function ({ selectedPosition: e, columns: t, rows: n }) {
                return p(t[e.idx], n[e.rowIdx]);
              })({ columns: e2, rows: l, selectedPosition: e })
            );
          }
          function t6(e, t) {
            if (!t3(e)) return;
            t2();
            let n = l[e.rowIdx],
              r = eu(tc, e);
            t && t8(e)
              ? tu({ ...e, mode: "EDIT", row: n, originalRow: n })
              : r
                ? c(ec(eX.current))
                : ((tm.current = !0), tu({ ...e, mode: "SELECT" })),
              K && !r && K({ rowIdx: e.rowIdx, row: n, column: e2[e.idx] });
          }
          function t9(e) {
            let { key: t, shiftKey: n } = e,
              r = "NONE";
            if ("Tab" === t) {
              if (
                (function ({
                  maxColIdx: e,
                  minRowIdx: t,
                  maxRowIdx: n,
                  selectedPosition: { rowIdx: r, idx: i },
                  shiftKey: s,
                }) {
                  return s ? 0 === i && r === t : i === e && r === n;
                })({
                  shiftKey: n,
                  maxColIdx: tF,
                  minRowIdx: to,
                  maxRowIdx: tl,
                  selectedPosition: tc,
                })
              )
                return void t2();
              r = "CHANGE_ROW";
            }
            e.preventDefault();
            let i = (function (e, t, n) {
              let { idx: r, rowIdx: i } = tc,
                s = tB && -1 === r;
              switch (e) {
                case "ArrowUp":
                  return { idx: r, rowIdx: i - 1 };
                case "ArrowDown":
                  return { idx: r, rowIdx: i + 1 };
                case tw:
                  return { idx: r - 1, rowIdx: i };
                case t_:
                  return { idx: r + 1, rowIdx: i };
                case "Tab":
                  return { idx: r + (n ? -1 : 1), rowIdx: i };
                case "Home":
                  if (s) return { idx: r, rowIdx: to };
                  return { idx: 0, rowIdx: t ? to : i };
                case "End":
                  if (s) return { idx: r, rowIdx: tl };
                  return { idx: tF, rowIdx: t ? tl : i };
                case "PageUp": {
                  if (tc.rowIdx === to) return tc;
                  let e = tI(i) + tD(i) - tb;
                  return { idx: r, rowIdx: e > 0 ? tP(e) : 0 };
                }
                case "PageDown": {
                  if (tc.rowIdx >= l.length) return tc;
                  let e = tI(i) + tb;
                  return { idx: r, rowIdx: e < tA ? tP(e) : l.length - 1 };
                }
                default:
                  return tc;
              }
            })(t, h(e), n);
            if (eu(tc, i)) return;
            let s = (function ({
              moveUp: e,
              moveNext: t,
              cellNavigationMode: n,
              columns: r,
              colSpanColumns: i,
              rows: s,
              topSummaryRows: o,
              bottomSummaryRows: l,
              minRowIdx: c,
              mainHeaderRowIdx: u,
              maxRowIdx: d,
              currentPosition: { idx: h, rowIdx: p },
              nextPosition: f,
              lastFrozenColumnIndex: m,
              isCellWithinBounds: g,
            }) {
              let { idx: y, rowIdx: v } = f,
                b = r.length,
                x = (e) => {
                  for (let t of i) {
                    let n = t.idx;
                    if (n > y) break;
                    let r = (function ({
                      rows: e,
                      topSummaryRows: t,
                      bottomSummaryRows: n,
                      rowIdx: r,
                      mainHeaderRowIdx: i,
                      lastFrozenColumnIndex: s,
                      column: o,
                    }) {
                      let l = t?.length ?? 0;
                      return r === i
                        ? a(o, s, { type: "HEADER" })
                        : t && r > i && r <= l + i
                          ? a(o, s, { type: "SUMMARY", row: t[r + l] })
                          : r >= 0 && r < e.length
                            ? a(o, s, { type: "ROW", row: e[r] })
                            : n
                              ? a(o, s, {
                                  type: "SUMMARY",
                                  row: n[r - e.length],
                                })
                              : void 0;
                    })({
                      rows: s,
                      topSummaryRows: o,
                      bottomSummaryRows: l,
                      rowIdx: v,
                      mainHeaderRowIdx: u,
                      lastFrozenColumnIndex: m,
                      column: t,
                    });
                    if (r && y > n && y < r + n) {
                      y = n + (e ? r : 0);
                      break;
                    }
                  }
                },
                k = (e) => e.level + u;
              if (
                (g(f) &&
                  (x(t),
                  v < u &&
                    (() => {
                      if (t) {
                        let e = r[y].parent;
                        for (; void 0 !== e; ) {
                          let t = k(e);
                          if (v === t) {
                            y = e.idx + e.colSpan;
                            break;
                          }
                          e = e.parent;
                        }
                      } else if (e) {
                        let e = r[y].parent,
                          t = !1;
                        for (; void 0 !== e; ) {
                          let n = k(e);
                          if (v >= n) {
                            (y = e.idx), (v = n), (t = !0);
                            break;
                          }
                          e = e.parent;
                        }
                        t || ((y = h), (v = p));
                      }
                    })()),
                "CHANGE_ROW" === n)
              ) {
                let e = y === b,
                  t = -1 === y;
                e
                  ? v !== d && ((y = 0), (v += 1))
                  : t && (v !== c && ((v -= 1), (y = b - 1)), x(!1));
              }
              if (v < u) {
                let e = r[y].parent,
                  t = v;
                for (v = u; void 0 !== e; ) {
                  let n = k(e);
                  n >= t && ((v = n), (y = e.idx)), (e = e.parent);
                }
              }
              return { idx: y, rowIdx: v };
            })({
              moveUp: "ArrowUp" === t,
              moveNext: t === t_ || ("Tab" === t && !n),
              columns: e2,
              colSpanColumns: e5,
              rows: l,
              topSummaryRows: f,
              bottomSummaryRows: m,
              minRowIdx: to,
              mainHeaderRowIdx: ta,
              maxRowIdx: tl,
              lastFrozenColumnIndex: e3,
              cellNavigationMode: r,
              currentPosition: tc,
              nextPosition: i,
              isCellWithinBounds: t3,
            });
            t6(s);
          }
          function t7() {
            let e = ec(eX.current);
            null !== e &&
              (c(e),
              (e.querySelector('[tabindex="0"]') ?? e).focus({
                preventScroll: !0,
              }));
          }
          function ne(e) {
            let t = -1 === tc.idx ? void 0 : e2[tc.idx];
            return void 0 === t || tc.rowIdx !== e || tR.includes(t)
              ? tR
              : tc.idx > e6
                ? [...tR, t]
                : [...tR.slice(0, e3 + 1), t, ...tR.slice(e3 + 1)];
          }
          (tc.idx > tF || tc.rowIdx > tl) &&
            (tu({ idx: -1, rowIdx: to - 1, mode: "SELECT" }), tJ(void 0));
          let nt = `repeat(${e4}, ${eE}px)`;
          tt > 0 && (nt += ` repeat(${tt}, ${eC}px)`),
            l.length > 0 && (nt += tN),
            tn > 0 && (nt += ` repeat(${tn}, ${eC}px)`);
          let nn = -1 === tc.idx && tc.rowIdx !== to - 1;
          return (0, o.jsxs)("div", {
            role: eT,
            "aria-label": eb,
            "aria-labelledby": ex,
            "aria-describedby": ek,
            "aria-multiselectable": !!tx || void 0,
            "aria-colcount": e2.length,
            "aria-rowcount": tO,
            className: (0, s.A)(
              "rdg rnvodz57-0-0-beta-47",
              ef,
              eQ && "rdg-viewport-dragging vlqv91k7-0-0-beta-47",
            ),
            style: {
              ...em,
              scrollPaddingInlineStart:
                tc.idx > e3 || eG?.idx !== void 0 ? `${te}px` : void 0,
              scrollPaddingBlock:
                t5(tc.rowIdx) || eG?.rowIdx !== void 0
                  ? `${ty + tt * eC}px ${tn * eC}px`
                  : void 0,
              gridTemplateColumns: tM,
              gridTemplateRows: nt,
              "--rdg-header-row-height": `${eE}px`,
              "--rdg-scroll-height": `${t$}px`,
              ...e7,
            },
            dir: eR,
            ref: eX,
            onScroll: function (e) {
              let { scrollTop: t, scrollLeft: n } = e.currentTarget;
              (0, i.flushSync)(() => {
                eL(t), eF(_(n));
              }),
                X?.(e);
            },
            onKeyDown: function (e) {
              let { idx: t, rowIdx: n, mode: r } = tc;
              if ("EDIT" === r) return;
              if (Y && t5(n)) {
                let r = l[n],
                  i = u(e);
                if (
                  (Y(
                    {
                      mode: "SELECT",
                      row: r,
                      column: e2[t],
                      rowIdx: n,
                      selectCell: t6,
                    },
                    i,
                  ),
                  i.isGridDefaultPrevented())
                )
                  return;
              }
              if (!(e.target instanceof Element)) return;
              let i = null !== e.target.closest(".rdg-cell"),
                s = tg && e.target === tf.current;
              if (!i && !s) return;
              let { keyCode: o } = e;
              if (tz && (null != ed || null != ea) && h(e)) {
                if (67 === o) {
                  if (window.getSelection()?.isCollapsed === !1) return;
                  let { idx: e, rowIdx: t } = tc,
                    n = l[t],
                    r = e2[e].key;
                  eH({ row: n, columnKey: r }),
                    ea?.({ sourceRow: n, sourceColumnKey: r });
                  return;
                }
                if (86 === o)
                  return void (function () {
                    if (!ed || !y || null === eU || !t8(tc)) return;
                    let { idx: e, rowIdx: t } = tc,
                      n = e2[e],
                      r = l[t],
                      i = ed({
                        sourceRow: eU.row,
                        sourceColumnKey: eU.columnKey,
                        targetRow: r,
                        targetColumnKey: n.key,
                      });
                    t1(n, t, i);
                  })();
              }
              switch (e.key) {
                case "Escape":
                  eH(null);
                  return;
                case "ArrowUp":
                case "ArrowDown":
                case "ArrowLeft":
                case "ArrowRight":
                case "Tab":
                case "Home":
                case "End":
                case "PageUp":
                case "PageDown":
                  t9(e);
                  break;
                default:
                  !(function (e) {
                    if (!tz) return;
                    let t = l[tc.rowIdx],
                      { key: n, shiftKey: r } = e;
                    if (tx && r && " " === n) {
                      O(g);
                      let n = g(t);
                      t0({ row: t, checked: !N.has(n), isShiftClick: !1 }),
                        e.preventDefault();
                      return;
                    }
                    !t8(tc) ||
                      (h(e) && 86 !== e.keyCode) ||
                      d.has(e.key) ||
                      tu(({ idx: e, rowIdx: n }) => ({
                        idx: e,
                        rowIdx: n,
                        mode: "EDIT",
                        row: t,
                        originalRow: t,
                      }));
                  })(e);
              }
            },
            "data-testid": e_,
            children: [
              (0, o.jsxs)(I, {
                value: tT,
                children: [
                  (0, o.jsx)(F, {
                    value: tZ,
                    children: (0, o.jsxs)(j, {
                      value: tS,
                      children: [
                        Array.from({ length: ts }, (e, t) =>
                          (0, o.jsx)(
                            et,
                            {
                              rowIdx: t + 1,
                              level: -ts + t,
                              columns: ne(to + t),
                              selectedCellIdx:
                                tc.rowIdx === to + t ? tc.idx : void 0,
                              selectCell: tX,
                            },
                            t,
                          ),
                        ),
                        (0, o.jsx)(ee, {
                          rowIdx: e4,
                          columns: ne(ta),
                          onColumnResize: tq,
                          onColumnsReorder: tU,
                          sortColumns: M,
                          onSortColumnsChange: tH,
                          lastFrozenColumnIndex: e3,
                          selectedCellIdx: tc.rowIdx === ta ? tc.idx : void 0,
                          selectCell: tX,
                          shouldFocusGrid: !tB,
                          direction: eR,
                        }),
                      ],
                    }),
                  }),
                  0 === l.length && eD
                    ? eD
                    : (0, o.jsxs)(o.Fragment, {
                        children: [
                          f?.map((e, t) => {
                            let n = e4 + 1 + t,
                              r = ta + 1 + t,
                              i = tc.rowIdx === r;
                            return (0, o.jsx)(
                              el,
                              {
                                "aria-rowindex": n,
                                rowIdx: r,
                                gridRowStart: n,
                                row: e,
                                top: ty + eC * t,
                                bottom: void 0,
                                viewportColumns: ne(r),
                                lastFrozenColumnIndex: e3,
                                selectedCellIdx: i ? tc.idx : void 0,
                                isTop: !0,
                                selectCell: tK,
                              },
                              t,
                            );
                          }),
                          (0, o.jsx)(L, {
                            value: tG,
                            children: (function () {
                              let e = [],
                                { idx: t, rowIdx: n } = tc,
                                r = tz && n < tE ? tE - 1 : tE,
                                s = tz && n > tC ? tC + 1 : tC;
                              for (let c = r; c <= s; c++) {
                                let r = c === tE - 1 || c === tC + 1,
                                  s = r ? n : c,
                                  u = tR,
                                  d = -1 === t ? void 0 : e2[t];
                                void 0 !== d && (u = r ? [d] : ne(s));
                                let h = l[s],
                                  p = ti + s + 1,
                                  f = s,
                                  m = !1;
                                "function" == typeof g &&
                                  ((f = g(h)), (m = N?.has(f) ?? !1)),
                                  e.push(
                                    eA(f, {
                                      "aria-rowindex": ti + s + 1,
                                      "aria-selected": tx ? m : void 0,
                                      rowIdx: s,
                                      row: h,
                                      viewportColumns: u,
                                      isRowSelectionDisabled: P?.(h) ?? !1,
                                      isRowSelected: m,
                                      onCellClick: tQ,
                                      onCellDoubleClick: tV,
                                      onCellContextMenu: tW,
                                      rowClass: eg,
                                      gridRowStart: p,
                                      copiedCellIdx:
                                        null !== eU && eU.row === h
                                          ? e2.findIndex(
                                              (e) => e.key === eU.columnKey,
                                            )
                                          : void 0,
                                      selectedCellIdx: n === s ? t : void 0,
                                      draggedOverCellIdx: (function (e) {
                                        if (void 0 === eW) return;
                                        let { rowIdx: t } = tc;
                                        return (
                                          t < eW
                                            ? t < e && e <= eW
                                            : t > e && e >= eW
                                        )
                                          ? tc.idx
                                          : void 0;
                                      })(s),
                                      setDraggedOverRowIdx: eQ ? tJ : void 0,
                                      lastFrozenColumnIndex: e3,
                                      onRowChange: tY,
                                      selectCell: tK,
                                      selectedCellEditor: (function (e) {
                                        if (
                                          tc.rowIdx !== e ||
                                          "SELECT" === tc.mode
                                        )
                                          return;
                                        let { idx: t, row: n } = tc,
                                          r = e2[t],
                                          s = a(r, e3, { type: "ROW", row: n }),
                                          c = (e) => {
                                            (tm.current = e),
                                              tu(({ idx: e, rowIdx: t }) => ({
                                                idx: e,
                                                rowIdx: t,
                                                mode: "SELECT",
                                              }));
                                          };
                                        return (
                                          l[tc.rowIdx] !== tc.originalRow &&
                                            c(!1),
                                          (0, o.jsx)(
                                            Q,
                                            {
                                              column: r,
                                              colSpan: s,
                                              row: n,
                                              rowIdx: e,
                                              onRowChange: (e, t, n) => {
                                                t
                                                  ? (0, i.flushSync)(() => {
                                                      t1(r, tc.rowIdx, e), c(n);
                                                    })
                                                  : tu((t) => ({
                                                      ...t,
                                                      row: e,
                                                    }));
                                              },
                                              closeEditor: c,
                                              onKeyDown: Y,
                                              navigate: t9,
                                            },
                                            r.key,
                                          )
                                        );
                                      })(s),
                                    }),
                                  );
                              }
                              return e;
                            })(),
                          }),
                          m?.map((e, t) => {
                            let n = ti + l.length + t + 1,
                              r = l.length + t,
                              i = tc.rowIdx === r,
                              s = tb > tA ? e0 - eC * (m.length - t) : void 0,
                              a =
                                void 0 === s ? eC * (m.length - 1 - t) : void 0;
                            return (0, o.jsx)(
                              el,
                              {
                                "aria-rowindex": tO - tn + t + 1,
                                rowIdx: r,
                                gridRowStart: n,
                                row: e,
                                top: s,
                                bottom: a,
                                viewportColumns: ne(r),
                                lastFrozenColumnIndex: e3,
                                selectedCellIdx: i ? tc.idx : void 0,
                                isTop: !1,
                                selectCell: tK,
                              },
                              t,
                            );
                          }),
                        ],
                      }),
                ],
              }),
              (function () {
                if (null == er || "EDIT" === tc.mode || !t4(tc)) return;
                let { idx: e, rowIdx: t } = tc,
                  n = e2[e];
                if (null == n.renderEditCell || !1 === n.editable) return;
                let r = eK(n);
                return (0, o.jsx)(H, {
                  gridRowStart: ti + t + 1,
                  rows: l,
                  column: n,
                  columnWidth: r,
                  maxColIdx: tF,
                  isLastRow: t === tl,
                  selectedPosition: tc,
                  isCellEditable: t8,
                  latestDraggedOverRowIdx: th,
                  onRowsChange: y,
                  onClick: t7,
                  onFill: er,
                  setDragging: eV,
                  setDraggedOverRowIdx: tJ,
                });
              })(),
              tR.map(({ key: e, idx: t, minWidth: n, maxWidth: r }) =>
                (0, o.jsx)(
                  "div",
                  {
                    className: "mlln6zg7-0-0-beta-47",
                    style: { gridColumnStart: t + 1, minWidth: n, maxWidth: r },
                    "data-measuring-cell-key": e,
                  },
                  e,
                ),
              ),
              tg &&
                (0, o.jsx)("div", {
                  ref: tf,
                  tabIndex: nn ? 0 : -1,
                  className: (0, s.A)(
                    "f1lsfrzw7-0-0-beta-47",
                    nn && [
                      "r190mhd37-0-0-beta-47",
                      -1 !== e3 && "r139qu9m7-0-0-beta-47",
                    ],
                    !t5(tc.rowIdx) && "f1cte0lg7-0-0-beta-47",
                  ),
                  style: { gridRowStart: tc.rowIdx + ti + 1 },
                }),
              null !== eG &&
                (0, o.jsx)(es, {
                  scrollToPosition: eG,
                  setScrollToCellPosition: eY,
                  gridElement: eX.current,
                }),
            ],
          });
        });
        function eh(e) {
          e?.focus(), e?.select();
        }
        function ep({ row: e, column: t, onRowChange: n, onClose: r }) {
          return (0, o.jsx)("input", {
            className: "rdg-text-editor t7vyx3i7-0-0-beta-47",
            ref: eh,
            value: e[t.key],
            onChange: (r) => n({ ...e, [t.key]: r.target.value }),
            onBlur: () => r(!0, !1),
          });
        }
      },
      75919: (e) => {
        "use strict";
        e.exports = require("node:worker_threads");
      },
      76503: (e, t, n) => {
        "use strict";
        n.d(t, { Lz: () => tq, NZ: () => tg, zF: () => tb });
        var r = n(34088),
          i = n(14077),
          s = n(64680);
        let o = function (e) {
            for (var t = 0; ; t++) if (!(e = e.previousSibling)) return t;
          },
          a = function (e) {
            let t = e.assignedSlot || e.parentNode;
            return t && 11 == t.nodeType ? t.host : t;
          },
          l = null,
          c = function (e, t, n) {
            let r = l || (l = document.createRange());
            return (
              r.setEnd(e, null == n ? e.nodeValue.length : n),
              r.setStart(e, t || 0),
              r
            );
          },
          u = function () {
            l = null;
          },
          d = function (e, t, n, r) {
            return n && (p(e, t, n, r, -1) || p(e, t, n, r, 1));
          },
          h = /^(img|br|input|textarea|hr)$/i;
        function p(e, t, n, r, i) {
          for (var s; ; ) {
            if (e == n && t == r) return !0;
            if (t == (i < 0 ? 0 : f(e))) {
              let n = e.parentNode;
              if (
                !n ||
                1 != n.nodeType ||
                m(e) ||
                h.test(e.nodeName) ||
                "false" == e.contentEditable
              )
                return !1;
              (t = o(e) + (i < 0 ? 0 : 1)), (e = n);
            } else {
              if (1 != e.nodeType) return !1;
              let n = e.childNodes[t + (i < 0 ? -1 : 0)];
              if (1 == n.nodeType && "false" == n.contentEditable)
                if (null == (s = n.pmViewDesc) || !s.ignoreForSelection)
                  return !1;
                else t += i;
              else (e = n), (t = i < 0 ? f(e) : 0);
            }
          }
        }
        function f(e) {
          return 3 == e.nodeType ? e.nodeValue.length : e.childNodes.length;
        }
        function m(e) {
          let t;
          for (let n = e; n && !(t = n.pmViewDesc); n = n.parentNode);
          return (
            t && t.node && t.node.isBlock && (t.dom == e || t.contentDOM == e)
          );
        }
        let g = function (e) {
          return (
            e.focusNode &&
            d(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset)
          );
        };
        function y(e, t) {
          let n = document.createEvent("Event");
          return (
            n.initEvent("keydown", !0, !0),
            (n.keyCode = e),
            (n.key = n.code = t),
            n
          );
        }
        let v = "undefined" != typeof navigator ? navigator : null,
          b = "undefined" != typeof document ? document : null,
          x = (v && v.userAgent) || "",
          k = /Edge\/(\d+)/.exec(x),
          w = /MSIE \d/.exec(x),
          _ = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(x),
          O = !!(w || _ || k),
          T = w ? document.documentMode : _ ? +_[1] : k ? +k[1] : 0,
          S = !O && /gecko\/(\d+)/i.test(x);
        S && (/Firefox\/(\d+)/.exec(x) || [0, 0])[1];
        let E = !O && /Chrome\/(\d+)/.exec(x),
          C = !!E,
          A = E ? +E[1] : 0,
          N = !O && !!v && /Apple Computer/.test(v.vendor),
          I = N && (/Mobile\/\w+/.test(x) || (!!v && v.maxTouchPoints > 2)),
          D = I || (!!v && /Mac/.test(v.platform)),
          P = !!v && /Win/.test(v.platform),
          R = /Android \d/.test(x),
          M = !!b && "webkitFontSmoothing" in b.documentElement.style,
          L = M
            ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1]
            : 0;
        function j(e, t) {
          return "number" == typeof e ? e : e[t];
        }
        function F(e, t, n) {
          let r = e.someProp("scrollThreshold") || 0,
            i = e.someProp("scrollMargin") || 5,
            s = e.dom.ownerDocument;
          for (let o = n || e.dom; o; ) {
            if (1 != o.nodeType) {
              o = a(o);
              continue;
            }
            let e = o,
              n = e == s.body,
              l = n
                ? (function (e) {
                    let t = e.defaultView && e.defaultView.visualViewport;
                    return t
                      ? { left: 0, right: t.width, top: 0, bottom: t.height }
                      : {
                          left: 0,
                          right: e.documentElement.clientWidth,
                          top: 0,
                          bottom: e.documentElement.clientHeight,
                        };
                  })(s)
                : (function (e) {
                    let t = e.getBoundingClientRect(),
                      n = t.width / e.offsetWidth || 1,
                      r = t.height / e.offsetHeight || 1;
                    return {
                      left: t.left,
                      right: t.left + e.clientWidth * n,
                      top: t.top,
                      bottom: t.top + e.clientHeight * r,
                    };
                  })(e),
              c = 0,
              u = 0;
            if (
              (t.top < l.top + j(r, "top")
                ? (u = -(l.top - t.top + j(i, "top")))
                : t.bottom > l.bottom - j(r, "bottom") &&
                  (u =
                    t.bottom - t.top > l.bottom - l.top
                      ? t.top + j(i, "top") - l.top
                      : t.bottom - l.bottom + j(i, "bottom")),
              t.left < l.left + j(r, "left")
                ? (c = -(l.left - t.left + j(i, "left")))
                : t.right > l.right - j(r, "right") &&
                  (c = t.right - l.right + j(i, "right")),
              c || u)
            )
              if (n) s.defaultView.scrollBy(c, u);
              else {
                let n = e.scrollLeft,
                  r = e.scrollTop;
                u && (e.scrollTop += u), c && (e.scrollLeft += c);
                let i = e.scrollLeft - n,
                  s = e.scrollTop - r;
                t = {
                  left: t.left - i,
                  top: t.top - s,
                  right: t.right - i,
                  bottom: t.bottom - s,
                };
              }
            let d = n ? "fixed" : getComputedStyle(o).position;
            if (/^(fixed|sticky)$/.test(d)) break;
            o = "absolute" == d ? o.offsetParent : a(o);
          }
        }
        function B(e) {
          let t = [],
            n = e.ownerDocument;
          for (
            let r = e;
            r &&
            (t.push({ dom: r, top: r.scrollTop, left: r.scrollLeft }), e != n);
            r = a(r)
          );
          return t;
        }
        function z(e, t) {
          for (let n = 0; n < e.length; n++) {
            let { dom: r, top: i, left: s } = e[n];
            r.scrollTop != i + t && (r.scrollTop = i + t),
              r.scrollLeft != s && (r.scrollLeft = s);
          }
        }
        let $ = null;
        function q(e, t) {
          return (
            e.left >= t.left - 1 &&
            e.left <= t.right + 1 &&
            e.top >= t.top - 1 &&
            e.top <= t.bottom + 1
          );
        }
        function U(e) {
          return e.top < e.bottom || e.left < e.right;
        }
        function H(e, t) {
          let n = e.getClientRects();
          if (n.length) {
            let e = n[t < 0 ? 0 : n.length - 1];
            if (U(e)) return e;
          }
          return Array.prototype.find.call(n, U) || e.getBoundingClientRect();
        }
        let Q = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
        function V(e, t, n) {
          let {
              node: r,
              offset: i,
              atom: s,
            } = e.docView.domFromPos(t, n < 0 ? -1 : 1),
            o = M || S;
          if (3 == r.nodeType)
            if (
              o &&
              (Q.test(r.nodeValue) || (n < 0 ? !i : i == r.nodeValue.length))
            ) {
              let e = H(c(r, i, i), n);
              if (
                S &&
                i &&
                /\s/.test(r.nodeValue[i - 1]) &&
                i < r.nodeValue.length
              ) {
                let t = H(c(r, i - 1, i - 1), -1);
                if (t.top == e.top) {
                  let n = H(c(r, i, i + 1), -1);
                  if (n.top != e.top) return W(n, n.left < t.left);
                }
              }
              return e;
            } else {
              let e = i,
                t = i,
                s = n < 0 ? 1 : -1;
              return (
                n < 0 && !i
                  ? (t++, (s = -1))
                  : n >= 0 && i == r.nodeValue.length
                    ? (e--, (s = 1))
                    : n < 0
                      ? e--
                      : t++,
                W(H(c(r, e, t), s), s < 0)
              );
            }
          if (!e.state.doc.resolve(t - (s || 0)).parent.inlineContent) {
            if (null == s && i && (n < 0 || i == f(r))) {
              let e = r.childNodes[i - 1];
              if (1 == e.nodeType) return Z(e.getBoundingClientRect(), !1);
            }
            if (null == s && i < f(r)) {
              let e = r.childNodes[i];
              if (1 == e.nodeType) return Z(e.getBoundingClientRect(), !0);
            }
            return Z(r.getBoundingClientRect(), n >= 0);
          }
          if (null == s && i && (n < 0 || i == f(r))) {
            let e = r.childNodes[i - 1],
              t =
                3 == e.nodeType
                  ? c(e, f(e) - +!o)
                  : 1 != e.nodeType || ("BR" == e.nodeName && e.nextSibling)
                    ? null
                    : e;
            if (t) return W(H(t, 1), !1);
          }
          if (null == s && i < f(r)) {
            let e = r.childNodes[i];
            for (; e.pmViewDesc && e.pmViewDesc.ignoreForCoords; )
              e = e.nextSibling;
            let t = e
              ? 3 == e.nodeType
                ? c(e, 0, +!o)
                : 1 == e.nodeType
                  ? e
                  : null
              : null;
            if (t) return W(H(t, -1), !0);
          }
          return W(H(3 == r.nodeType ? c(r) : r, -n), n >= 0);
        }
        function W(e, t) {
          if (0 == e.width) return e;
          let n = t ? e.left : e.right;
          return { top: e.top, bottom: e.bottom, left: n, right: n };
        }
        function Z(e, t) {
          if (0 == e.height) return e;
          let n = t ? e.top : e.bottom;
          return { top: n, bottom: n, left: e.left, right: e.right };
        }
        function G(e, t, n) {
          let r = e.state,
            i = e.root.activeElement;
          r != t && e.updateState(t), i != e.dom && e.focus();
          try {
            return n();
          } finally {
            r != t && e.updateState(r), i != e.dom && i && i.focus();
          }
        }
        let Y = /[\u0590-\u08ac]/,
          K = null,
          X = null,
          J = !1;
        class ee {
          constructor(e, t, n, r) {
            (this.parent = e),
              (this.children = t),
              (this.dom = n),
              (this.contentDOM = r),
              (this.dirty = 0),
              (n.pmViewDesc = this);
          }
          matchesWidget(e) {
            return !1;
          }
          matchesMark(e) {
            return !1;
          }
          matchesNode(e, t, n) {
            return !1;
          }
          matchesHack(e) {
            return !1;
          }
          parseRule() {
            return null;
          }
          stopEvent(e) {
            return !1;
          }
          get size() {
            let e = 0;
            for (let t = 0; t < this.children.length; t++)
              e += this.children[t].size;
            return e;
          }
          get border() {
            return 0;
          }
          destroy() {
            (this.parent = void 0),
              this.dom.pmViewDesc == this && (this.dom.pmViewDesc = void 0);
            for (let e = 0; e < this.children.length; e++)
              this.children[e].destroy();
          }
          posBeforeChild(e) {
            for (let t = 0, n = this.posAtStart; ; t++) {
              let r = this.children[t];
              if (r == e) return n;
              n += r.size;
            }
          }
          get posBefore() {
            return this.parent.posBeforeChild(this);
          }
          get posAtStart() {
            return this.parent
              ? this.parent.posBeforeChild(this) + this.border
              : 0;
          }
          get posAfter() {
            return this.posBefore + this.size;
          }
          get posAtEnd() {
            return this.posAtStart + this.size - 2 * this.border;
          }
          localPosFromDOM(e, t, n) {
            let r;
            if (
              this.contentDOM &&
              this.contentDOM.contains(1 == e.nodeType ? e : e.parentNode)
            )
              if (n < 0) {
                let n, r;
                if (e == this.contentDOM) n = e.childNodes[t - 1];
                else {
                  for (; e.parentNode != this.contentDOM; ) e = e.parentNode;
                  n = e.previousSibling;
                }
                for (; n && !((r = n.pmViewDesc) && r.parent == this); )
                  n = n.previousSibling;
                return n ? this.posBeforeChild(r) + r.size : this.posAtStart;
              } else {
                let n, r;
                if (e == this.contentDOM) n = e.childNodes[t];
                else {
                  for (; e.parentNode != this.contentDOM; ) e = e.parentNode;
                  n = e.nextSibling;
                }
                for (; n && !((r = n.pmViewDesc) && r.parent == this); )
                  n = n.nextSibling;
                return n ? this.posBeforeChild(r) : this.posAtEnd;
              }
            if (e == this.dom && this.contentDOM) r = t > o(this.contentDOM);
            else if (
              this.contentDOM &&
              this.contentDOM != this.dom &&
              this.dom.contains(this.contentDOM)
            )
              r = 2 & e.compareDocumentPosition(this.contentDOM);
            else if (this.dom.firstChild) {
              if (0 == t)
                for (let t = e; ; t = t.parentNode) {
                  if (t == this.dom) {
                    r = !1;
                    break;
                  }
                  if (t.previousSibling) break;
                }
              if (null == r && t == e.childNodes.length)
                for (let t = e; ; t = t.parentNode) {
                  if (t == this.dom) {
                    r = !0;
                    break;
                  }
                  if (t.nextSibling) break;
                }
            }
            return (null == r ? n > 0 : r) ? this.posAtEnd : this.posAtStart;
          }
          nearestDesc(e, t = !1) {
            for (let n = !0, r = e; r; r = r.parentNode) {
              let i = this.getDesc(r),
                s;
              if (i && (!t || i.node))
                if (
                  !n ||
                  !(s = i.nodeDOM) ||
                  (1 == s.nodeType
                    ? s.contains(1 == e.nodeType ? e : e.parentNode)
                    : s == e)
                )
                  return i;
                else n = !1;
            }
          }
          getDesc(e) {
            let t = e.pmViewDesc;
            for (let e = t; e; e = e.parent) if (e == this) return t;
          }
          posFromDOM(e, t, n) {
            for (let r = e; r; r = r.parentNode) {
              let i = this.getDesc(r);
              if (i) return i.localPosFromDOM(e, t, n);
            }
            return -1;
          }
          descAt(e) {
            for (let t = 0, n = 0; t < this.children.length; t++) {
              let r = this.children[t],
                i = n + r.size;
              if (n == e && i != n) {
                for (; !r.border && r.children.length; )
                  for (let e = 0; e < r.children.length; e++) {
                    let t = r.children[e];
                    if (t.size) {
                      r = t;
                      break;
                    }
                  }
                return r;
              }
              if (e < i) return r.descAt(e - n - r.border);
              n = i;
            }
          }
          domFromPos(e, t) {
            if (!this.contentDOM)
              return { node: this.dom, offset: 0, atom: e + 1 };
            let n = 0,
              r = 0;
            for (let t = 0; n < this.children.length; n++) {
              let i = this.children[n],
                s = t + i.size;
              if (s > e || i instanceof ea) {
                r = e - t;
                break;
              }
              t = s;
            }
            if (r)
              return this.children[n].domFromPos(
                r - this.children[n].border,
                t,
              );
            for (
              let e;
              n &&
              !(e = this.children[n - 1]).size &&
              e instanceof et &&
              e.side >= 0;
              n--
            );
            if (t <= 0) {
              let e,
                r = !0;
              for (
                ;
                (e = n ? this.children[n - 1] : null) &&
                e.dom.parentNode != this.contentDOM;
                n--, r = !1
              );
              return e && t && r && !e.border && !e.domAtom
                ? e.domFromPos(e.size, t)
                : { node: this.contentDOM, offset: e ? o(e.dom) + 1 : 0 };
            }
            {
              let e,
                r = !0;
              for (
                ;
                (e = n < this.children.length ? this.children[n] : null) &&
                e.dom.parentNode != this.contentDOM;
                n++, r = !1
              );
              return e && r && !e.border && !e.domAtom
                ? e.domFromPos(0, t)
                : {
                    node: this.contentDOM,
                    offset: e ? o(e.dom) : this.contentDOM.childNodes.length,
                  };
            }
          }
          parseRange(e, t, n = 0) {
            if (0 == this.children.length)
              return {
                node: this.contentDOM,
                from: e,
                to: t,
                fromOffset: 0,
                toOffset: this.contentDOM.childNodes.length,
              };
            let r = -1,
              i = -1;
            for (let s = n, a = 0; ; a++) {
              let n = this.children[a],
                l = s + n.size;
              if (-1 == r && e <= l) {
                let i = s + n.border;
                if (
                  e >= i &&
                  t <= l - n.border &&
                  n.node &&
                  n.contentDOM &&
                  this.contentDOM.contains(n.contentDOM)
                )
                  return n.parseRange(e, t, i);
                e = s;
                for (let t = a; t > 0; t--) {
                  let n = this.children[t - 1];
                  if (
                    n.size &&
                    n.dom.parentNode == this.contentDOM &&
                    !n.emptyChildAt(1)
                  ) {
                    r = o(n.dom) + 1;
                    break;
                  }
                  e -= n.size;
                }
                -1 == r && (r = 0);
              }
              if (r > -1 && (l > t || a == this.children.length - 1)) {
                t = l;
                for (let e = a + 1; e < this.children.length; e++) {
                  let n = this.children[e];
                  if (
                    n.size &&
                    n.dom.parentNode == this.contentDOM &&
                    !n.emptyChildAt(-1)
                  ) {
                    i = o(n.dom);
                    break;
                  }
                  t += n.size;
                }
                -1 == i && (i = this.contentDOM.childNodes.length);
                break;
              }
              s = l;
            }
            return {
              node: this.contentDOM,
              from: e,
              to: t,
              fromOffset: r,
              toOffset: i,
            };
          }
          emptyChildAt(e) {
            if (this.border || !this.contentDOM || !this.children.length)
              return !1;
            let t = this.children[e < 0 ? 0 : this.children.length - 1];
            return 0 == t.size || t.emptyChildAt(e);
          }
          domAfterPos(e) {
            let { node: t, offset: n } = this.domFromPos(e, 0);
            if (1 != t.nodeType || n == t.childNodes.length)
              throw RangeError("No node after pos " + e);
            return t.childNodes[n];
          }
          setSelection(e, t, n, r = !1) {
            let i = Math.min(e, t),
              s = Math.max(e, t);
            for (let o = 0, a = 0; o < this.children.length; o++) {
              let l = this.children[o],
                c = a + l.size;
              if (i > a && s < c)
                return l.setSelection(e - a - l.border, t - a - l.border, n, r);
              a = c;
            }
            let a = this.domFromPos(e, e ? -1 : 1),
              l = t == e ? a : this.domFromPos(t, t ? -1 : 1),
              c = n.root.getSelection(),
              u = n.domSelectionRange(),
              h = !1;
            if ((S || N) && e == t) {
              let { node: e, offset: t } = a;
              if (3 == e.nodeType) {
                if (
                  (h = !!(t && "\n" == e.nodeValue[t - 1])) &&
                  t == e.nodeValue.length
                )
                  for (let t = e, n; t; t = t.parentNode) {
                    if ((n = t.nextSibling)) {
                      "BR" == n.nodeName &&
                        (a = l = { node: n.parentNode, offset: o(n) + 1 });
                      break;
                    }
                    let e = t.pmViewDesc;
                    if (e && e.node && e.node.isBlock) break;
                  }
              } else {
                let n = e.childNodes[t - 1];
                h = n && ("BR" == n.nodeName || "false" == n.contentEditable);
              }
            }
            if (
              S &&
              u.focusNode &&
              u.focusNode != l.node &&
              1 == u.focusNode.nodeType
            ) {
              let e = u.focusNode.childNodes[u.focusOffset];
              e && "false" == e.contentEditable && (r = !0);
            }
            if (
              !(r || (h && N)) &&
              d(a.node, a.offset, u.anchorNode, u.anchorOffset) &&
              d(l.node, l.offset, u.focusNode, u.focusOffset)
            )
              return;
            let p = !1;
            if ((c.extend || e == t) && !h) {
              c.collapse(a.node, a.offset);
              try {
                e != t && c.extend(l.node, l.offset), (p = !0);
              } catch (e) {}
            }
            if (!p) {
              if (e > t) {
                let e = a;
                (a = l), (l = e);
              }
              let n = document.createRange();
              n.setEnd(l.node, l.offset),
                n.setStart(a.node, a.offset),
                c.removeAllRanges(),
                c.addRange(n);
            }
          }
          ignoreMutation(e) {
            return !this.contentDOM && "selection" != e.type;
          }
          get contentLost() {
            return (
              this.contentDOM &&
              this.contentDOM != this.dom &&
              !this.dom.contains(this.contentDOM)
            );
          }
          markDirty(e, t) {
            for (let n = 0, r = 0; r < this.children.length; r++) {
              let i = this.children[r],
                s = n + i.size;
              if (n == s ? e <= s && t >= n : e < s && t > n) {
                let r = n + i.border,
                  o = s - i.border;
                if (e >= r && t <= o) {
                  (this.dirty = e == n || t == s ? 2 : 1),
                    e == r &&
                    t == o &&
                    (i.contentLost || i.dom.parentNode != this.contentDOM)
                      ? (i.dirty = 3)
                      : i.markDirty(e - r, t - r);
                  return;
                }
                i.dirty =
                  i.dom != i.contentDOM ||
                  i.dom.parentNode != this.contentDOM ||
                  i.children.length
                    ? 3
                    : 2;
              }
              n = s;
            }
            this.dirty = 2;
          }
          markParentsDirty() {
            let e = 1;
            for (let t = this.parent; t; t = t.parent, e++) {
              let n = 1 == e ? 2 : 1;
              t.dirty < n && (t.dirty = n);
            }
          }
          get domAtom() {
            return !1;
          }
          get ignoreForCoords() {
            return !1;
          }
          get ignoreForSelection() {
            return !1;
          }
          isText(e) {
            return !1;
          }
        }
        class et extends ee {
          constructor(e, t, n, r) {
            let i,
              s = t.type.toDOM;
            if (
              ("function" == typeof s &&
                (s = s(n, () =>
                  i ? (i.parent ? i.parent.posBeforeChild(i) : void 0) : r,
                )),
              !t.type.spec.raw)
            ) {
              if (1 != s.nodeType) {
                let e = document.createElement("span");
                e.appendChild(s), (s = e);
              }
              (s.contentEditable = "false"),
                s.classList.add("ProseMirror-widget");
            }
            super(e, [], s, null),
              (this.widget = t),
              (this.widget = t),
              (i = this);
          }
          matchesWidget(e) {
            return 0 == this.dirty && e.type.eq(this.widget.type);
          }
          parseRule() {
            return { ignore: !0 };
          }
          stopEvent(e) {
            let t = this.widget.spec.stopEvent;
            return !!t && t(e);
          }
          ignoreMutation(e) {
            return "selection" != e.type || this.widget.spec.ignoreSelection;
          }
          destroy() {
            this.widget.type.destroy(this.dom), super.destroy();
          }
          get domAtom() {
            return !0;
          }
          get ignoreForSelection() {
            return !!this.widget.type.spec.relaxedSide;
          }
          get side() {
            return this.widget.type.side;
          }
        }
        class en extends ee {
          constructor(e, t, n, r) {
            super(e, [], t, null), (this.textDOM = n), (this.text = r);
          }
          get size() {
            return this.text.length;
          }
          localPosFromDOM(e, t) {
            return e != this.textDOM
              ? this.posAtStart + (t ? this.size : 0)
              : this.posAtStart + t;
          }
          domFromPos(e) {
            return { node: this.textDOM, offset: e };
          }
          ignoreMutation(e) {
            return (
              "characterData" === e.type && e.target.nodeValue == e.oldValue
            );
          }
        }
        class er extends ee {
          constructor(e, t, n, r, i) {
            super(e, [], n, r), (this.mark = t), (this.spec = i);
          }
          static create(e, t, n, r) {
            let s = r.nodeViews[t.type.name],
              o = s && s(t, r, n);
            return (
              (o && o.dom) ||
                (o = i.ZF.renderSpec(
                  document,
                  t.type.spec.toDOM(t, n),
                  null,
                  t.attrs,
                )),
              new er(e, t, o.dom, o.contentDOM || o.dom, o)
            );
          }
          parseRule() {
            return 3 & this.dirty || this.mark.type.spec.reparseInView
              ? null
              : {
                  mark: this.mark.type.name,
                  attrs: this.mark.attrs,
                  contentElement: this.contentDOM,
                };
          }
          matchesMark(e) {
            return 3 != this.dirty && this.mark.eq(e);
          }
          markDirty(e, t) {
            if ((super.markDirty(e, t), 0 != this.dirty)) {
              let e = this.parent;
              for (; !e.node; ) e = e.parent;
              e.dirty < this.dirty && (e.dirty = this.dirty), (this.dirty = 0);
            }
          }
          slice(e, t, n) {
            let r = er.create(this.parent, this.mark, !0, n),
              i = this.children,
              s = this.size;
            t < s && (i = ev(i, t, s, n)), e > 0 && (i = ev(i, 0, e, n));
            for (let e = 0; e < i.length; e++) i[e].parent = r;
            return (r.children = i), r;
          }
          ignoreMutation(e) {
            return this.spec.ignoreMutation
              ? this.spec.ignoreMutation(e)
              : super.ignoreMutation(e);
          }
          destroy() {
            this.spec.destroy && this.spec.destroy(), super.destroy();
          }
        }
        class ei extends ee {
          constructor(e, t, n, r, i, s, o, a, l) {
            super(e, [], i, s),
              (this.node = t),
              (this.outerDeco = n),
              (this.innerDeco = r),
              (this.nodeDOM = o);
          }
          static create(e, t, n, r, s, o) {
            let a = s.nodeViews[t.type.name],
              l,
              c =
                a &&
                a(
                  t,
                  s,
                  () =>
                    l ? (l.parent ? l.parent.posBeforeChild(l) : void 0) : o,
                  n,
                  r,
                ),
              u = c && c.dom,
              d = c && c.contentDOM;
            if (t.isText)
              if (u) {
                if (3 != u.nodeType)
                  throw RangeError("Text must be rendered as a DOM text node");
              } else u = document.createTextNode(t.text);
            else if (!u) {
              let e = i.ZF.renderSpec(
                document,
                t.type.spec.toDOM(t),
                null,
                t.attrs,
              );
              ({ dom: u, contentDOM: d } = e);
            }
            d ||
              t.isText ||
              "BR" == u.nodeName ||
              (u.hasAttribute("contenteditable") ||
                (u.contentEditable = "false"),
              t.type.spec.draggable && (u.draggable = !0));
            let h = u;
            return ((u = ep(u, n, t)), c)
              ? (l = new el(e, t, n, r, u, d || null, h, c, s, o + 1))
              : t.isText
                ? new eo(e, t, n, r, u, h, s)
                : new ei(e, t, n, r, u, d || null, h, s, o + 1);
          }
          parseRule() {
            if (this.node.type.spec.reparseInView) return null;
            let e = { node: this.node.type.name, attrs: this.node.attrs };
            if (
              ("pre" == this.node.type.whitespace &&
                (e.preserveWhitespace = "full"),
              this.contentDOM)
            )
              if (this.contentLost) {
                for (let t = this.children.length - 1; t >= 0; t--) {
                  let n = this.children[t];
                  if (this.dom.contains(n.dom.parentNode)) {
                    e.contentElement = n.dom.parentNode;
                    break;
                  }
                }
                e.contentElement || (e.getContent = () => i.FK.empty);
              } else e.contentElement = this.contentDOM;
            else e.getContent = () => this.node.content;
            return e;
          }
          matchesNode(e, t, n) {
            return (
              0 == this.dirty &&
              e.eq(this.node) &&
              ef(t, this.outerDeco) &&
              n.eq(this.innerDeco)
            );
          }
          get size() {
            return this.node.nodeSize;
          }
          get border() {
            return +!this.node.isLeaf;
          }
          updateChildren(e, t) {
            let n = this.node.inlineContent,
              r = t,
              s = e.composing ? this.localCompositionInfo(e, t) : null,
              o = s && s.pos > -1 ? s : null,
              a = s && s.pos < 0,
              l = new eg(this, o && o.node, e);
            (function (e, t, n, r) {
              let i = t.locals(e),
                s = 0;
              if (0 == i.length) {
                for (let n = 0; n < e.childCount; n++) {
                  let o = e.child(n);
                  r(o, i, t.forChild(s, o), n), (s += o.nodeSize);
                }
                return;
              }
              let o = 0,
                a = [],
                l = null;
              for (let c = 0; ; ) {
                let u, d, h, p;
                for (; o < i.length && i[o].to == s; ) {
                  let e = i[o++];
                  e.widget && (u ? (d || (d = [u])).push(e) : (u = e));
                }
                if (u)
                  if (d) {
                    d.sort(ey);
                    for (let e = 0; e < d.length; e++) n(d[e], c, !!l);
                  } else n(u, c, !!l);
                if (l) (p = -1), (h = l), (l = null);
                else if (c < e.childCount) (p = c), (h = e.child(c++));
                else break;
                for (let e = 0; e < a.length; e++)
                  a[e].to <= s && a.splice(e--, 1);
                for (; o < i.length && i[o].from <= s && i[o].to > s; )
                  a.push(i[o++]);
                let f = s + h.nodeSize;
                if (h.isText) {
                  let e = f;
                  o < i.length && i[o].from < e && (e = i[o].from);
                  for (let t = 0; t < a.length; t++)
                    a[t].to < e && (e = a[t].to);
                  e < f &&
                    ((l = h.cut(e - s)),
                    (h = h.cut(0, e - s)),
                    (f = e),
                    (p = -1));
                } else for (; o < i.length && i[o].to < f; ) o++;
                let m =
                  h.isInline && !h.isLeaf
                    ? a.filter((e) => !e.inline)
                    : a.slice();
                r(h, m, t.forChild(s, h), p), (s = f);
              }
            })(
              this.node,
              this.innerDeco,
              (t, s, o) => {
                t.spec.marks
                  ? l.syncToMarks(t.spec.marks, n, e)
                  : t.type.side >= 0 &&
                    !o &&
                    l.syncToMarks(
                      s == this.node.childCount
                        ? i.CU.none
                        : this.node.child(s).marks,
                      n,
                      e,
                    ),
                  l.placeWidget(t, e, r);
              },
              (t, i, o, c) => {
                let u;
                l.syncToMarks(t.marks, n, e),
                  l.findNodeMatch(t, i, o, c) ||
                    (a &&
                      e.state.selection.from > r &&
                      e.state.selection.to < r + t.nodeSize &&
                      (u = l.findIndexWithChild(s.node)) > -1 &&
                      l.updateNodeAt(t, i, o, u, e)) ||
                    l.updateNextNode(t, i, o, e, c, r) ||
                    l.addNode(t, i, o, e, r),
                  (r += t.nodeSize);
              },
            ),
              l.syncToMarks([], n, e),
              this.node.isTextblock && l.addTextblockHacks(),
              l.destroyRest(),
              (l.changed || 2 == this.dirty) &&
                (o && this.protectLocalComposition(e, o),
                (function e(t, n, r) {
                  let i = t.firstChild,
                    s = !1;
                  for (let o = 0; o < n.length; o++) {
                    let a = n[o],
                      l = a.dom;
                    if (l.parentNode == t) {
                      for (; l != i; ) (i = em(i)), (s = !0);
                      i = i.nextSibling;
                    } else (s = !0), t.insertBefore(l, i);
                    if (a instanceof er) {
                      let n = i ? i.previousSibling : t.lastChild;
                      e(a.contentDOM, a.children, r),
                        (i = n ? n.nextSibling : t.firstChild);
                    }
                  }
                  for (; i; ) (i = em(i)), (s = !0);
                  s && r.trackWrites == t && (r.trackWrites = null);
                })(this.contentDOM, this.children, e),
                I &&
                  (function (e) {
                    if ("UL" == e.nodeName || "OL" == e.nodeName) {
                      let t = e.style.cssText;
                      (e.style.cssText = t + "; list-style: square !important"),
                        window.getComputedStyle(e).listStyle,
                        (e.style.cssText = t);
                    }
                  })(this.dom));
          }
          localCompositionInfo(e, t) {
            let { from: n, to: i } = e.state.selection;
            if (
              !(e.state.selection instanceof r.U3) ||
              n < t ||
              i > t + this.node.content.size
            )
              return null;
            let s = e.input.compositionNode;
            if (!s || !this.dom.contains(s.parentNode)) return null;
            if (!this.node.inlineContent) return { node: s, pos: -1, text: "" };
            {
              let e = s.nodeValue,
                r = (function (e, t, n, r) {
                  for (let i = 0, s = 0; i < e.childCount && s <= r; ) {
                    let o = e.child(i++),
                      a = s;
                    if (((s += o.nodeSize), !o.isText)) continue;
                    let l = o.text;
                    for (; i < e.childCount; ) {
                      let t = e.child(i++);
                      if (((s += t.nodeSize), !t.isText)) break;
                      l += t.text;
                    }
                    if (s >= n) {
                      if (s >= r && l.slice(r - t.length - a, r - a) == t)
                        return r - t.length;
                      let e = a < r ? l.lastIndexOf(t, r - a - 1) : -1;
                      if (e >= 0 && e + t.length + a >= n) return a + e;
                      if (
                        n == r &&
                        l.length >= r + t.length - a &&
                        l.slice(r - a, r - a + t.length) == t
                      )
                        return r;
                    }
                  }
                  return -1;
                })(this.node.content, e, n - t, i - t);
              return r < 0 ? null : { node: s, pos: r, text: e };
            }
          }
          protectLocalComposition(e, { node: t, pos: n, text: r }) {
            if (this.getDesc(t)) return;
            let i = t;
            for (; i.parentNode != this.contentDOM; i = i.parentNode) {
              for (; i.previousSibling; )
                i.parentNode.removeChild(i.previousSibling);
              for (; i.nextSibling; ) i.parentNode.removeChild(i.nextSibling);
              i.pmViewDesc && (i.pmViewDesc = void 0);
            }
            let s = new en(this, i, t, r);
            e.input.compositionNodes.push(s),
              (this.children = ev(this.children, n, n + r.length, e, s));
          }
          update(e, t, n, r) {
            return (
              3 != this.dirty &&
              !!e.sameMarkup(this.node) &&
              (this.updateInner(e, t, n, r), !0)
            );
          }
          updateInner(e, t, n, r) {
            this.updateOuterDeco(t),
              (this.node = e),
              (this.innerDeco = n),
              this.contentDOM && this.updateChildren(r, this.posAtStart),
              (this.dirty = 0);
          }
          updateOuterDeco(e) {
            if (ef(e, this.outerDeco)) return;
            let t = 1 != this.nodeDOM.nodeType,
              n = this.dom;
            (this.dom = eh(
              this.dom,
              this.nodeDOM,
              ed(this.outerDeco, this.node, t),
              ed(e, this.node, t),
            )),
              this.dom != n &&
                ((n.pmViewDesc = void 0), (this.dom.pmViewDesc = this)),
              (this.outerDeco = e);
          }
          selectNode() {
            1 == this.nodeDOM.nodeType &&
              this.nodeDOM.classList.add("ProseMirror-selectednode"),
              (this.contentDOM || !this.node.type.spec.draggable) &&
                (this.dom.draggable = !0);
          }
          deselectNode() {
            1 == this.nodeDOM.nodeType &&
              (this.nodeDOM.classList.remove("ProseMirror-selectednode"),
              (this.contentDOM || !this.node.type.spec.draggable) &&
                this.dom.removeAttribute("draggable"));
          }
          get domAtom() {
            return this.node.isAtom;
          }
        }
        function es(e, t, n, r, i) {
          ep(r, t, e);
          let s = new ei(void 0, e, t, n, r, r, r, i, 0);
          return s.contentDOM && s.updateChildren(i, 0), s;
        }
        class eo extends ei {
          constructor(e, t, n, r, i, s, o) {
            super(e, t, n, r, i, null, s, o, 0);
          }
          parseRule() {
            let e = this.nodeDOM.parentNode;
            for (; e && e != this.dom && !e.pmIsDeco; ) e = e.parentNode;
            return { skip: e || !0 };
          }
          update(e, t, n, r) {
            return (
              3 != this.dirty &&
              (0 == this.dirty || !!this.inParent()) &&
              !!e.sameMarkup(this.node) &&
              (this.updateOuterDeco(t),
              (0 != this.dirty || e.text != this.node.text) &&
                e.text != this.nodeDOM.nodeValue &&
                ((this.nodeDOM.nodeValue = e.text),
                r.trackWrites == this.nodeDOM && (r.trackWrites = null)),
              (this.node = e),
              (this.dirty = 0),
              !0)
            );
          }
          inParent() {
            let e = this.parent.contentDOM;
            for (let t = this.nodeDOM; t; t = t.parentNode)
              if (t == e) return !0;
            return !1;
          }
          domFromPos(e) {
            return { node: this.nodeDOM, offset: e };
          }
          localPosFromDOM(e, t, n) {
            return e == this.nodeDOM
              ? this.posAtStart + Math.min(t, this.node.text.length)
              : super.localPosFromDOM(e, t, n);
          }
          ignoreMutation(e) {
            return "characterData" != e.type && "selection" != e.type;
          }
          slice(e, t, n) {
            let r = this.node.cut(e, t),
              i = document.createTextNode(r.text);
            return new eo(
              this.parent,
              r,
              this.outerDeco,
              this.innerDeco,
              i,
              i,
              n,
            );
          }
          markDirty(e, t) {
            super.markDirty(e, t),
              this.dom != this.nodeDOM &&
                (0 == e || t == this.nodeDOM.nodeValue.length) &&
                (this.dirty = 3);
          }
          get domAtom() {
            return !1;
          }
          isText(e) {
            return this.node.text == e;
          }
        }
        class ea extends ee {
          parseRule() {
            return { ignore: !0 };
          }
          matchesHack(e) {
            return 0 == this.dirty && this.dom.nodeName == e;
          }
          get domAtom() {
            return !0;
          }
          get ignoreForCoords() {
            return "IMG" == this.dom.nodeName;
          }
        }
        class el extends ei {
          constructor(e, t, n, r, i, s, o, a, l, c) {
            super(e, t, n, r, i, s, o, l, c), (this.spec = a);
          }
          update(e, t, n, r) {
            if (3 == this.dirty) return !1;
            if (
              this.spec.update &&
              (this.node.type == e.type || this.spec.multiType)
            ) {
              let i = this.spec.update(e, t, n);
              return i && this.updateInner(e, t, n, r), i;
            }
            return (
              (!!this.contentDOM || !!e.isLeaf) && super.update(e, t, n, r)
            );
          }
          selectNode() {
            this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
          }
          deselectNode() {
            this.spec.deselectNode
              ? this.spec.deselectNode()
              : super.deselectNode();
          }
          setSelection(e, t, n, r) {
            this.spec.setSelection
              ? this.spec.setSelection(e, t, n.root)
              : super.setSelection(e, t, n, r);
          }
          destroy() {
            this.spec.destroy && this.spec.destroy(), super.destroy();
          }
          stopEvent(e) {
            return !!this.spec.stopEvent && this.spec.stopEvent(e);
          }
          ignoreMutation(e) {
            return this.spec.ignoreMutation
              ? this.spec.ignoreMutation(e)
              : super.ignoreMutation(e);
          }
        }
        let ec = function (e) {
          e && (this.nodeName = e);
        };
        ec.prototype = Object.create(null);
        let eu = [new ec()];
        function ed(e, t, n) {
          if (0 == e.length) return eu;
          let r = n ? eu[0] : new ec(),
            i = [r];
          for (let s = 0; s < e.length; s++) {
            let o = e[s].type.attrs;
            if (o)
              for (let e in (o.nodeName && i.push((r = new ec(o.nodeName))),
              o)) {
                let s = o[e];
                null != s &&
                  (n &&
                    1 == i.length &&
                    i.push((r = new ec(t.isInline ? "span" : "div"))),
                  "class" == e
                    ? (r.class = (r.class ? r.class + " " : "") + s)
                    : "style" == e
                      ? (r.style = (r.style ? r.style + ";" : "") + s)
                      : "nodeName" != e && (r[e] = s));
              }
          }
          return i;
        }
        function eh(e, t, n, r) {
          if (n == eu && r == eu) return t;
          let i = t;
          for (let t = 0; t < r.length; t++) {
            let s = r[t],
              o = n[t];
            if (t) {
              let t;
              (o &&
                o.nodeName == s.nodeName &&
                i != e &&
                (t = i.parentNode) &&
                t.nodeName.toLowerCase() == s.nodeName) ||
                (((t = document.createElement(s.nodeName)).pmIsDeco = !0),
                t.appendChild(i),
                (o = eu[0])),
                (i = t);
            }
            !(function (e, t, n) {
              for (let r in t)
                "class" == r ||
                  "style" == r ||
                  "nodeName" == r ||
                  r in n ||
                  e.removeAttribute(r);
              for (let r in n)
                "class" != r &&
                  "style" != r &&
                  "nodeName" != r &&
                  n[r] != t[r] &&
                  e.setAttribute(r, n[r]);
              if (t.class != n.class) {
                let r = t.class ? t.class.split(" ").filter(Boolean) : [],
                  i = n.class ? n.class.split(" ").filter(Boolean) : [];
                for (let t = 0; t < r.length; t++)
                  -1 == i.indexOf(r[t]) && e.classList.remove(r[t]);
                for (let t = 0; t < i.length; t++)
                  -1 == r.indexOf(i[t]) && e.classList.add(i[t]);
                0 == e.classList.length && e.removeAttribute("class");
              }
              if (t.style != n.style) {
                if (t.style) {
                  let n =
                      /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g,
                    r;
                  for (; (r = n.exec(t.style)); ) e.style.removeProperty(r[1]);
                }
                n.style && (e.style.cssText += n.style);
              }
            })(i, o || eu[0], s);
          }
          return i;
        }
        function ep(e, t, n) {
          return eh(e, e, eu, ed(t, n, 1 != e.nodeType));
        }
        function ef(e, t) {
          if (e.length != t.length) return !1;
          for (let n = 0; n < e.length; n++)
            if (!e[n].type.eq(t[n].type)) return !1;
          return !0;
        }
        function em(e) {
          let t = e.nextSibling;
          return e.parentNode.removeChild(e), t;
        }
        class eg {
          constructor(e, t, n) {
            (this.lock = t),
              (this.view = n),
              (this.index = 0),
              (this.stack = []),
              (this.changed = !1),
              (this.top = e),
              (this.preMatch = (function (e, t) {
                let n = t,
                  r = n.children.length,
                  i = e.childCount,
                  s = new Map(),
                  o = [];
                o: for (; i > 0; ) {
                  let a;
                  for (;;)
                    if (r) {
                      let e = n.children[r - 1];
                      if (e instanceof er) (n = e), (r = e.children.length);
                      else {
                        (a = e), r--;
                        break;
                      }
                    } else if (n == t) break o;
                    else (r = n.parent.children.indexOf(n)), (n = n.parent);
                  let l = a.node;
                  if (l) {
                    if (l != e.child(i - 1)) break;
                    --i, s.set(a, i), o.push(a);
                  }
                }
                return { index: i, matched: s, matches: o.reverse() };
              })(e.node.content, e));
          }
          destroyBetween(e, t) {
            if (e != t) {
              for (let n = e; n < t; n++) this.top.children[n].destroy();
              this.top.children.splice(e, t - e), (this.changed = !0);
            }
          }
          destroyRest() {
            this.destroyBetween(this.index, this.top.children.length);
          }
          syncToMarks(e, t, n) {
            let r = 0,
              i = this.stack.length >> 1,
              s = Math.min(i, e.length);
            for (
              ;
              r < s &&
              (r == i - 1 ? this.top : this.stack[(r + 1) << 1]).matchesMark(
                e[r],
              ) &&
              !1 !== e[r].type.spec.spanning;

            )
              r++;
            for (; r < i; )
              this.destroyRest(),
                (this.top.dirty = 0),
                (this.index = this.stack.pop()),
                (this.top = this.stack.pop()),
                i--;
            for (; i < e.length; ) {
              this.stack.push(this.top, this.index + 1);
              let r = -1;
              for (
                let t = this.index;
                t < Math.min(this.index + 3, this.top.children.length);
                t++
              ) {
                let n = this.top.children[t];
                if (n.matchesMark(e[i]) && !this.isLocked(n.dom)) {
                  r = t;
                  break;
                }
              }
              if (r > -1)
                r > this.index &&
                  ((this.changed = !0), this.destroyBetween(this.index, r)),
                  (this.top = this.top.children[this.index]);
              else {
                let r = er.create(this.top, e[i], t, n);
                this.top.children.splice(this.index, 0, r),
                  (this.top = r),
                  (this.changed = !0);
              }
              (this.index = 0), i++;
            }
          }
          findNodeMatch(e, t, n, r) {
            let i = -1,
              s;
            if (
              r >= this.preMatch.index &&
              (s = this.preMatch.matches[r - this.preMatch.index]).parent ==
                this.top &&
              s.matchesNode(e, t, n)
            )
              i = this.top.children.indexOf(s, this.index);
            else
              for (
                let r = this.index,
                  s = Math.min(this.top.children.length, r + 5);
                r < s;
                r++
              ) {
                let s = this.top.children[r];
                if (s.matchesNode(e, t, n) && !this.preMatch.matched.has(s)) {
                  i = r;
                  break;
                }
              }
            return (
              !(i < 0) && (this.destroyBetween(this.index, i), this.index++, !0)
            );
          }
          updateNodeAt(e, t, n, r, i) {
            let s = this.top.children[r];
            return (
              3 == s.dirty && s.dom == s.contentDOM && (s.dirty = 2),
              !!s.update(e, t, n, i) &&
                (this.destroyBetween(this.index, r), this.index++, !0)
            );
          }
          findIndexWithChild(e) {
            for (;;) {
              let t = e.parentNode;
              if (!t) return -1;
              if (t == this.top.contentDOM) {
                let t = e.pmViewDesc;
                if (t) {
                  for (let e = this.index; e < this.top.children.length; e++)
                    if (this.top.children[e] == t) return e;
                }
                return -1;
              }
              e = t;
            }
          }
          updateNextNode(e, t, n, r, i, s) {
            for (let o = this.index; o < this.top.children.length; o++) {
              let a = this.top.children[o];
              if (a instanceof ei) {
                let l = this.preMatch.matched.get(a);
                if (null != l && l != i) return !1;
                let c = a.dom,
                  u,
                  d =
                    this.isLocked(c) &&
                    !(
                      e.isText &&
                      a.node &&
                      a.node.isText &&
                      a.nodeDOM.nodeValue == e.text &&
                      3 != a.dirty &&
                      ef(t, a.outerDeco)
                    );
                if (!d && a.update(e, t, n, r))
                  return (
                    this.destroyBetween(this.index, o),
                    a.dom != c && (this.changed = !0),
                    this.index++,
                    !0
                  );
                if (!d && (u = this.recreateWrapper(a, e, t, n, r, s)))
                  return (
                    this.destroyBetween(this.index, o),
                    (this.top.children[this.index] = u),
                    u.contentDOM &&
                      ((u.dirty = 2),
                      u.updateChildren(r, s + 1),
                      (u.dirty = 0)),
                    (this.changed = !0),
                    this.index++,
                    !0
                  );
                break;
              }
            }
            return !1;
          }
          recreateWrapper(e, t, n, r, i, s) {
            if (
              e.dirty ||
              t.isAtom ||
              !e.children.length ||
              !e.node.content.eq(t.content) ||
              !ef(n, e.outerDeco) ||
              !r.eq(e.innerDeco)
            )
              return null;
            let o = ei.create(this.top, t, n, r, i, s);
            if (o.contentDOM)
              for (let t of ((o.children = e.children),
              (e.children = []),
              o.children))
                t.parent = o;
            return e.destroy(), o;
          }
          addNode(e, t, n, r, i) {
            let s = ei.create(this.top, e, t, n, r, i);
            s.contentDOM && s.updateChildren(r, i + 1),
              this.top.children.splice(this.index++, 0, s),
              (this.changed = !0);
          }
          placeWidget(e, t, n) {
            let r =
              this.index < this.top.children.length
                ? this.top.children[this.index]
                : null;
            if (
              r &&
              r.matchesWidget(e) &&
              (e == r.widget || !r.widget.type.toDOM.parentNode)
            )
              this.index++;
            else {
              let r = new et(this.top, e, t, n);
              this.top.children.splice(this.index++, 0, r), (this.changed = !0);
            }
          }
          addTextblockHacks() {
            let e = this.top.children[this.index - 1],
              t = this.top;
            for (; e instanceof er; )
              e = (t = e).children[t.children.length - 1];
            (!e ||
              !(e instanceof eo) ||
              /\n$/.test(e.node.text) ||
              (this.view.requiresGeckoHackNode && /\s$/.test(e.node.text))) &&
              ((N || C) &&
                e &&
                "false" == e.dom.contentEditable &&
                this.addHackNode("IMG", t),
              this.addHackNode("BR", this.top));
          }
          addHackNode(e, t) {
            if (
              t == this.top &&
              this.index < t.children.length &&
              t.children[this.index].matchesHack(e)
            )
              this.index++;
            else {
              let n = document.createElement(e);
              "IMG" == e &&
                ((n.className = "ProseMirror-separator"), (n.alt = "")),
                "BR" == e && (n.className = "ProseMirror-trailingBreak");
              let r = new ea(this.top, [], n, null);
              t != this.top
                ? t.children.push(r)
                : t.children.splice(this.index++, 0, r),
                (this.changed = !0);
            }
          }
          isLocked(e) {
            return (
              this.lock &&
              (e == this.lock ||
                (1 == e.nodeType && e.contains(this.lock.parentNode)))
            );
          }
        }
        function ey(e, t) {
          return e.type.side - t.type.side;
        }
        function ev(e, t, n, r, i) {
          let s = [];
          for (let o = 0, a = 0; o < e.length; o++) {
            let l = e[o],
              c = a,
              u = (a += l.size);
            c >= n || u <= t
              ? s.push(l)
              : (c < t && s.push(l.slice(0, t - c, r)),
                i && (s.push(i), (i = void 0)),
                u > n && s.push(l.slice(n - c, l.size, r)));
          }
          return s;
        }
        function eb(e, t = null) {
          let n = e.domSelectionRange(),
            i = e.state.doc;
          if (!n.focusNode) return null;
          let s = e.docView.nearestDesc(n.focusNode),
            a = s && 0 == s.size,
            l = e.docView.posFromDOM(n.focusNode, n.focusOffset, 1);
          if (l < 0) return null;
          let c = i.resolve(l),
            u,
            d;
          if (g(n)) {
            for (u = l; s && !s.node; ) s = s.parent;
            let e = s.node;
            if (
              s &&
              e.isAtom &&
              r.nh.isSelectable(e) &&
              s.parent &&
              !(
                e.isInline &&
                (function (e, t, n) {
                  for (let r = 0 == t, i = t == f(e); r || i; ) {
                    if (e == n) return !0;
                    let t = o(e);
                    if (!(e = e.parentNode)) return !1;
                    (r = r && 0 == t), (i = i && t == f(e));
                  }
                })(n.focusNode, n.focusOffset, s.dom)
              )
            ) {
              let e = s.posBefore;
              d = new r.nh(l == e ? c : i.resolve(e));
            }
          } else {
            if (
              n instanceof e.dom.ownerDocument.defaultView.Selection &&
              n.rangeCount > 1
            ) {
              let t = l,
                r = l;
              for (let i = 0; i < n.rangeCount; i++) {
                let s = n.getRangeAt(i);
                (t = Math.min(
                  t,
                  e.docView.posFromDOM(s.startContainer, s.startOffset, 1),
                )),
                  (r = Math.max(
                    r,
                    e.docView.posFromDOM(s.endContainer, s.endOffset, -1),
                  ));
              }
              if (t < 0) return null;
              ([u, l] = r == e.state.selection.anchor ? [r, t] : [t, r]),
                (c = i.resolve(l));
            } else u = e.docView.posFromDOM(n.anchorNode, n.anchorOffset, 1);
            if (u < 0) return null;
          }
          let h = i.resolve(u);
          if (!d) {
            let n =
              "pointer" == t || (e.state.selection.head < c.pos && !a) ? 1 : -1;
            d = eC(e, h, c, n);
          }
          return d;
        }
        function ex(e) {
          return e.editable
            ? e.hasFocus()
            : eN(e) &&
                document.activeElement &&
                document.activeElement.contains(e.dom);
        }
        function ek(e, t = !1) {
          let n = e.state.selection;
          if ((eS(e, n), ex(e))) {
            if (
              !t &&
              e.input.mouseDown &&
              e.input.mouseDown.allowDefault &&
              C
            ) {
              let t = e.domSelectionRange(),
                n = e.domObserver.currentSelection;
              if (
                t.anchorNode &&
                n.anchorNode &&
                d(t.anchorNode, t.anchorOffset, n.anchorNode, n.anchorOffset)
              ) {
                (e.input.mouseDown.delayedSelectionSync = !0),
                  e.domObserver.setCurSelection();
                return;
              }
            }
            if ((e.domObserver.disconnectSelection(), e.cursorWrapper))
              !(function (e) {
                let t = e.domSelection(),
                  n = document.createRange();
                if (!t) return;
                let r = e.cursorWrapper.dom,
                  i = "IMG" == r.nodeName;
                i ? n.setStart(r.parentNode, o(r) + 1) : n.setStart(r, 0),
                  n.collapse(!0),
                  t.removeAllRanges(),
                  t.addRange(n),
                  !i &&
                    !e.state.selection.visible &&
                    O &&
                    T <= 11 &&
                    ((r.disabled = !0), (r.disabled = !1));
              })(e);
            else {
              var i;
              let s,
                o,
                a,
                l,
                { anchor: c, head: u } = n,
                d,
                h;
              ew &&
                !(n instanceof r.U3) &&
                (n.$from.parent.inlineContent || (d = e_(e, n.from)),
                n.empty || n.$from.parent.inlineContent || (h = e_(e, n.to))),
                e.docView.setSelection(c, u, e, t),
                ew && (d && eT(d), h && eT(h)),
                n.visible
                  ? e.dom.classList.remove("ProseMirror-hideselection")
                  : (e.dom.classList.add("ProseMirror-hideselection"),
                    "onselectionchange" in document &&
                      ((s = (i = e).dom.ownerDocument).removeEventListener(
                        "selectionchange",
                        i.input.hideSelectionGuard,
                      ),
                      (a = (o = i.domSelectionRange()).anchorNode),
                      (l = o.anchorOffset),
                      s.addEventListener(
                        "selectionchange",
                        (i.input.hideSelectionGuard = () => {
                          (o.anchorNode != a || o.anchorOffset != l) &&
                            (s.removeEventListener(
                              "selectionchange",
                              i.input.hideSelectionGuard,
                            ),
                            setTimeout(() => {
                              (!ex(i) || i.state.selection.visible) &&
                                i.dom.classList.remove(
                                  "ProseMirror-hideselection",
                                );
                            }, 20));
                        }),
                      )));
            }
            e.domObserver.setCurSelection(), e.domObserver.connectSelection();
          }
        }
        let ew = N || (C && A < 63);
        function e_(e, t) {
          let { node: n, offset: r } = e.docView.domFromPos(t, 0),
            i = r < n.childNodes.length ? n.childNodes[r] : null,
            s = r ? n.childNodes[r - 1] : null;
          if (N && i && "false" == i.contentEditable) return eO(i);
          if (
            (!i || "false" == i.contentEditable) &&
            (!s || "false" == s.contentEditable)
          ) {
            if (i) return eO(i);
            else if (s) return eO(s);
          }
        }
        function eO(e) {
          return (
            (e.contentEditable = "true"),
            N && e.draggable && ((e.draggable = !1), (e.wasDraggable = !0)),
            e
          );
        }
        function eT(e) {
          (e.contentEditable = "false"),
            e.wasDraggable && ((e.draggable = !0), (e.wasDraggable = null));
        }
        function eS(e, t) {
          if (t instanceof r.nh) {
            let n = e.docView.descAt(t.from);
            n != e.lastSelectedViewDesc &&
              (eE(e), n && n.selectNode(), (e.lastSelectedViewDesc = n));
          } else eE(e);
        }
        function eE(e) {
          e.lastSelectedViewDesc &&
            (e.lastSelectedViewDesc.parent &&
              e.lastSelectedViewDesc.deselectNode(),
            (e.lastSelectedViewDesc = void 0));
        }
        function eC(e, t, n, i) {
          return (
            e.someProp("createSelectionBetween", (r) => r(e, t, n)) ||
            r.U3.between(t, n, i)
          );
        }
        function eA(e) {
          return (!e.editable || !!e.hasFocus()) && eN(e);
        }
        function eN(e) {
          let t = e.domSelectionRange();
          if (!t.anchorNode) return !1;
          try {
            return (
              e.dom.contains(
                3 == t.anchorNode.nodeType
                  ? t.anchorNode.parentNode
                  : t.anchorNode,
              ) &&
              (e.editable ||
                e.dom.contains(
                  3 == t.focusNode.nodeType
                    ? t.focusNode.parentNode
                    : t.focusNode,
                ))
            );
          } catch (e) {
            return !1;
          }
        }
        function eI(e, t) {
          let { $anchor: n, $head: i } = e.selection,
            s = t > 0 ? n.max(i) : n.min(i),
            o = s.parent.inlineContent
              ? s.depth
                ? e.doc.resolve(t > 0 ? s.after() : s.before())
                : null
              : s;
          return o && r.LN.findFrom(o, t);
        }
        function eD(e, t) {
          return e.dispatch(e.state.tr.setSelection(t).scrollIntoView()), !0;
        }
        function eP(e, t, n) {
          let i = e.state.selection;
          if (i instanceof r.U3) {
            if (n.indexOf("s") > -1) {
              let { $head: n } = i,
                s = n.textOffset ? null : t < 0 ? n.nodeBefore : n.nodeAfter;
              if (!s || s.isText || !s.isLeaf) return !1;
              let o = e.state.doc.resolve(
                n.pos + s.nodeSize * (t < 0 ? -1 : 1),
              );
              return eD(e, new r.U3(i.$anchor, o));
            } else if (!i.empty) return !1;
            else if (e.endOfTextblock(t > 0 ? "forward" : "backward")) {
              let n = eI(e.state, t);
              return !!n && n instanceof r.nh && eD(e, n);
            } else if (!(D && n.indexOf("m") > -1)) {
              let n = i.$head,
                s = n.textOffset ? null : t < 0 ? n.nodeBefore : n.nodeAfter,
                o;
              if (!s || s.isText) return !1;
              let a = t < 0 ? n.pos - s.nodeSize : n.pos;
              return (
                !!(s.isAtom || ((o = e.docView.descAt(a)) && !o.contentDOM)) &&
                (r.nh.isSelectable(s)
                  ? eD(
                      e,
                      new r.nh(
                        t < 0 ? e.state.doc.resolve(n.pos - s.nodeSize) : n,
                      ),
                    )
                  : !!M &&
                    eD(
                      e,
                      new r.U3(e.state.doc.resolve(t < 0 ? a : a + s.nodeSize)),
                    ))
              );
            }
          } else {
            if (i instanceof r.nh && i.node.isInline)
              return eD(e, new r.U3(t > 0 ? i.$to : i.$from));
            let n = eI(e.state, t);
            return !!n && eD(e, n);
          }
        }
        function eR(e) {
          return 3 == e.nodeType ? e.nodeValue.length : e.childNodes.length;
        }
        function eM(e, t) {
          let n = e.pmViewDesc;
          return (
            n && 0 == n.size && (t < 0 || e.nextSibling || "BR" != e.nodeName)
          );
        }
        function eL(e, t) {
          return t < 0
            ? (function (e) {
                let t = e.domSelectionRange(),
                  n = t.focusNode,
                  r = t.focusOffset;
                if (!n) return;
                let i,
                  s,
                  a = !1;
                for (
                  S &&
                  1 == n.nodeType &&
                  r < eR(n) &&
                  eM(n.childNodes[r], -1) &&
                  (a = !0);
                  ;

                )
                  if (r > 0)
                    if (1 != n.nodeType) break;
                    else {
                      let e = n.childNodes[r - 1];
                      if (eM(e, -1)) (i = n), (s = --r);
                      else if (3 == e.nodeType) r = (n = e).nodeValue.length;
                      else break;
                    }
                  else if (ej(n)) break;
                  else {
                    let t = n.previousSibling;
                    for (; t && eM(t, -1); )
                      (i = n.parentNode), (s = o(t)), (t = t.previousSibling);
                    if (t) r = eR((n = t));
                    else {
                      if ((n = n.parentNode) == e.dom) break;
                      r = 0;
                    }
                  }
                a ? eF(e, n, r) : i && eF(e, i, s);
              })(e)
            : (function (e) {
                let t,
                  n,
                  r = e.domSelectionRange(),
                  i = r.focusNode,
                  s = r.focusOffset;
                if (!i) return;
                let a = eR(i);
                for (;;)
                  if (s < a) {
                    if (1 != i.nodeType) break;
                    if (eM(i.childNodes[s], 1)) (t = i), (n = ++s);
                    else break;
                  } else if (ej(i)) break;
                  else {
                    let r = i.nextSibling;
                    for (; r && eM(r, 1); )
                      (t = r.parentNode), (n = o(r) + 1), (r = r.nextSibling);
                    if (r) (s = 0), (a = eR((i = r)));
                    else {
                      if ((i = i.parentNode) == e.dom) break;
                      s = a = 0;
                    }
                  }
                t && eF(e, t, n);
              })(e);
        }
        function ej(e) {
          let t = e.pmViewDesc;
          return t && t.node && t.node.isBlock;
        }
        function eF(e, t, n) {
          if (3 != t.nodeType) {
            let e, r;
            (r = (function (e, t) {
              for (; e && t == e.childNodes.length && !m(e); )
                (t = o(e) + 1), (e = e.parentNode);
              for (; e && t < e.childNodes.length; ) {
                let n = e.childNodes[t];
                if (3 == n.nodeType) return n;
                if (1 == n.nodeType && "false" == n.contentEditable) break;
                (e = n), (t = 0);
              }
            })(t, n))
              ? ((t = r), (n = 0))
              : (e = (function (e, t) {
                  for (; e && !t && !m(e); ) (t = o(e)), (e = e.parentNode);
                  for (; e && t; ) {
                    let n = e.childNodes[t - 1];
                    if (3 == n.nodeType) return n;
                    if (1 == n.nodeType && "false" == n.contentEditable) break;
                    t = (e = n).childNodes.length;
                  }
                })(t, n)) && ((t = e), (n = e.nodeValue.length));
          }
          let r = e.domSelection();
          if (!r) return;
          if (g(r)) {
            let e = document.createRange();
            e.setEnd(t, n),
              e.setStart(t, n),
              r.removeAllRanges(),
              r.addRange(e);
          } else r.extend && r.extend(t, n);
          e.domObserver.setCurSelection();
          let { state: i } = e;
          setTimeout(() => {
            e.state == i && ek(e);
          }, 50);
        }
        function eB(e, t) {
          let n = e.state.doc.resolve(t);
          if (!(C || P) && n.parent.inlineContent) {
            let r = e.coordsAtPos(t);
            if (t > n.start()) {
              let n = e.coordsAtPos(t - 1),
                i = (n.top + n.bottom) / 2;
              if (i > r.top && i < r.bottom && Math.abs(n.left - r.left) > 1)
                return n.left < r.left ? "ltr" : "rtl";
            }
            if (t < n.end()) {
              let n = e.coordsAtPos(t + 1),
                i = (n.top + n.bottom) / 2;
              if (i > r.top && i < r.bottom && Math.abs(n.left - r.left) > 1)
                return n.left > r.left ? "ltr" : "rtl";
            }
          }
          return "rtl" == getComputedStyle(e.dom).direction ? "rtl" : "ltr";
        }
        function ez(e, t, n) {
          let i = e.state.selection;
          if (
            (i instanceof r.U3 && !i.empty) ||
            n.indexOf("s") > -1 ||
            (D && n.indexOf("m") > -1)
          )
            return !1;
          let { $from: s, $to: o } = i;
          if (
            !s.parent.inlineContent ||
            e.endOfTextblock(t < 0 ? "up" : "down")
          ) {
            let n = eI(e.state, t);
            if (n && n instanceof r.nh) return eD(e, n);
          }
          if (!s.parent.inlineContent) {
            let n = t < 0 ? s : o,
              a = i instanceof r.i5 ? r.LN.near(n, t) : r.LN.findFrom(n, t);
            return !!a && eD(e, a);
          }
          return !1;
        }
        function e$(e, t) {
          if (!(e.state.selection instanceof r.U3)) return !0;
          let { $head: n, $anchor: i, empty: s } = e.state.selection;
          if (!n.sameParent(i)) return !0;
          if (!s) return !1;
          if (e.endOfTextblock(t > 0 ? "forward" : "backward")) return !0;
          let o = !n.textOffset && (t < 0 ? n.nodeBefore : n.nodeAfter);
          if (o && !o.isText) {
            let r = e.state.tr;
            return (
              t < 0
                ? r.delete(n.pos - o.nodeSize, n.pos)
                : r.delete(n.pos, n.pos + o.nodeSize),
              e.dispatch(r),
              !0
            );
          }
          return !1;
        }
        function eq(e, t, n) {
          e.domObserver.stop(), (t.contentEditable = n), e.domObserver.start();
        }
        function eU(e, t) {
          e.someProp("transformCopied", (n) => {
            t = n(t, e);
          });
          let n = [],
            { content: r, openStart: s, openEnd: o } = t;
          for (
            ;
            s > 1 && o > 1 && 1 == r.childCount && 1 == r.firstChild.childCount;

          ) {
            s--, o--;
            let e = r.firstChild;
            n.push(
              e.type.name,
              e.attrs != e.type.defaultAttrs ? e.attrs : null,
            ),
              (r = e.content);
          }
          let a =
              e.someProp("clipboardSerializer") ||
              i.ZF.fromSchema(e.state.schema),
            l = eK(),
            c = l.createElement("div");
          c.appendChild(a.serializeFragment(r, { document: l }));
          let u = c.firstChild,
            d,
            h = 0;
          for (; u && 1 == u.nodeType && (d = eG[u.nodeName.toLowerCase()]); ) {
            for (let e = d.length - 1; e >= 0; e--) {
              let t = l.createElement(d[e]);
              for (; c.firstChild; ) t.appendChild(c.firstChild);
              c.appendChild(t), h++;
            }
            u = c.firstChild;
          }
          return (
            u &&
              1 == u.nodeType &&
              u.setAttribute(
                "data-pm-slice",
                `${s} ${o}${h ? ` -${h}` : ""} ${JSON.stringify(n)}`,
              ),
            {
              dom: c,
              text:
                e.someProp("clipboardTextSerializer", (n) => n(t, e)) ||
                t.content.textBetween(0, t.content.size, "\n\n"),
              slice: t,
            }
          );
        }
        function eH(e, t, n, r, s) {
          let o,
            a,
            l = s.parent.type.spec.code;
          if (!n && !t) return null;
          let c = t && (r || l || !n);
          if (c) {
            if (
              (e.someProp("transformPastedText", (n) => {
                t = n(t, l || r, e);
              }),
              l)
            )
              return t
                ? new i.Ji(
                    i.FK.from(e.state.schema.text(t.replace(/\r\n?/g, "\n"))),
                    0,
                    0,
                  )
                : i.Ji.empty;
            let n = e.someProp("clipboardTextParser", (n) => n(t, s, r, e));
            if (n) a = n;
            else {
              let n = s.marks(),
                { schema: r } = e.state,
                a = i.ZF.fromSchema(r);
              (o = document.createElement("div")),
                t.split(/(?:\r\n?|\n)+/).forEach((e) => {
                  let t = o.appendChild(document.createElement("p"));
                  e && t.appendChild(a.serializeNode(r.text(e, n)));
                });
            }
          } else
            e.someProp("transformPastedHTML", (t) => {
              n = t(n, e);
            }),
              (o = (function (e) {
                var t;
                let n,
                  r = /^(\s*<meta [^>]*>)*/.exec(e);
                r && (e = e.slice(r[0].length));
                let i = eK().createElement("div"),
                  s = /<([a-z][^>\s]+)/i.exec(e),
                  o;
                if (
                  ((o = s && eG[s[1].toLowerCase()]) &&
                    (e =
                      o.map((e) => "<" + e + ">").join("") +
                      e +
                      o
                        .map((e) => "</" + e + ">")
                        .reverse()
                        .join("")),
                  (i.innerHTML =
                    ((t = e),
                    (n = window.trustedTypes)
                      ? (eX ||
                          (eX =
                            n.defaultPolicy ||
                            n.createPolicy("ProseMirrorClipboard", {
                              createHTML: (e) => e,
                            })),
                        eX.createHTML(t))
                      : t)),
                  o)
                )
                  for (let e = 0; e < o.length; e++)
                    i = i.querySelector(o[e]) || i;
                return i;
              })(n)),
              M &&
                (function (e) {
                  let t = e.querySelectorAll(
                    C
                      ? "span:not([class]):not([style])"
                      : "span.Apple-converted-space",
                  );
                  for (let n = 0; n < t.length; n++) {
                    let r = t[n];
                    1 == r.childNodes.length &&
                      "\xa0" == r.textContent &&
                      r.parentNode &&
                      r.parentNode.replaceChild(
                        e.ownerDocument.createTextNode(" "),
                        r,
                      );
                  }
                })(o);
          let u = o && o.querySelector("[data-pm-slice]"),
            d =
              u &&
              /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(
                u.getAttribute("data-pm-slice") || "",
              );
          if (d && d[3])
            for (let e = +d[3]; e > 0; e--) {
              let e = o.firstChild;
              for (; e && 1 != e.nodeType; ) e = e.nextSibling;
              if (!e) break;
              o = e;
            }
          if (
            (a ||
              (a = (
                e.someProp("clipboardParser") ||
                e.someProp("domParser") ||
                i.S4.fromSchema(e.state.schema)
              ).parseSlice(o, {
                preserveWhitespace: !!(c || d),
                context: s,
                ruleFromNode: (e) =>
                  "BR" != e.nodeName ||
                  e.nextSibling ||
                  !e.parentNode ||
                  eQ.test(e.parentNode.nodeName)
                    ? null
                    : { ignore: !0 },
              })),
            d)
          )
            a = (function (e, t) {
              if (!e.size) return e;
              let n = e.content.firstChild.type.schema,
                r;
              try {
                r = JSON.parse(t);
              } catch (t) {
                return e;
              }
              let { content: s, openStart: o, openEnd: a } = e;
              for (let e = r.length - 2; e >= 0; e -= 2) {
                let t = n.nodes[r[e]];
                if (!t || t.hasRequiredAttrs()) break;
                (s = i.FK.from(t.create(r[e + 1], s))), o++, a++;
              }
              return new i.Ji(s, o, a);
            })(eZ(a, +d[1], +d[2]), d[4]);
          else if (
            (a = i.Ji.maxOpen(
              (function (e, t) {
                if (e.childCount < 2) return e;
                for (let n = t.depth; n >= 0; n--) {
                  let r = t.node(n).contentMatchAt(t.index(n)),
                    s,
                    o = [];
                  if (
                    (e.forEach((e) => {
                      if (!o) return;
                      let t = r.findWrapping(e.type),
                        n;
                      if (!t) return (o = null);
                      if (
                        (n =
                          o.length &&
                          s.length &&
                          (function e(t, n, r, s, o) {
                            if (o < t.length && o < n.length && t[o] == n[o]) {
                              let a = e(t, n, r, s.lastChild, o + 1);
                              if (a)
                                return s.copy(
                                  s.content.replaceChild(s.childCount - 1, a),
                                );
                              if (
                                s
                                  .contentMatchAt(s.childCount)
                                  .matchType(
                                    o == t.length - 1 ? r.type : t[o + 1],
                                  )
                              )
                                return s.copy(
                                  s.content.append(i.FK.from(eV(r, t, o + 1))),
                                );
                            }
                          })(t, s, e, o[o.length - 1], 0))
                      )
                        o[o.length - 1] = n;
                      else {
                        o.length &&
                          (o[o.length - 1] = (function e(t, n) {
                            if (0 == n) return t;
                            let r = t.content.replaceChild(
                                t.childCount - 1,
                                e(t.lastChild, n - 1),
                              ),
                              s = t
                                .contentMatchAt(t.childCount)
                                .fillBefore(i.FK.empty, !0);
                            return t.copy(r.append(s));
                          })(o[o.length - 1], s.length));
                        let n = eV(e, t);
                        o.push(n), (r = r.matchType(n.type)), (s = t);
                      }
                    }),
                    o)
                  )
                    return i.FK.from(o);
                }
                return e;
              })(a.content, s),
              !0,
            )).openStart ||
            a.openEnd
          ) {
            let e = 0,
              t = 0;
            for (
              let t = a.content.firstChild;
              e < a.openStart && !t.type.spec.isolating;
              e++, t = t.firstChild
            );
            for (
              let e = a.content.lastChild;
              t < a.openEnd && !e.type.spec.isolating;
              t++, e = e.lastChild
            );
            a = eZ(a, e, t);
          }
          return (
            e.someProp("transformPasted", (t) => {
              a = t(a, e);
            }),
            a
          );
        }
        let eQ =
          /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
        function eV(e, t, n = 0) {
          for (let r = t.length - 1; r >= n; r--)
            e = t[r].create(null, i.FK.from(e));
          return e;
        }
        function eW(e, t, n, r, s, o) {
          let a = t < 0 ? e.firstChild : e.lastChild,
            l = a.content;
          return (
            e.childCount > 1 && (o = 0),
            s < r - 1 && (l = eW(l, t, n, r, s + 1, o)),
            s >= n &&
              (l =
                t < 0
                  ? a
                      .contentMatchAt(0)
                      .fillBefore(l, o <= s)
                      .append(l)
                  : l.append(
                      a.contentMatchAt(a.childCount).fillBefore(i.FK.empty, !0),
                    )),
            e.replaceChild(t < 0 ? 0 : e.childCount - 1, a.copy(l))
          );
        }
        function eZ(e, t, n) {
          return (
            t < e.openStart &&
              (e = new i.Ji(
                eW(e.content, -1, t, e.openStart, 0, e.openEnd),
                t,
                e.openEnd,
              )),
            n < e.openEnd &&
              (e = new i.Ji(
                eW(e.content, 1, n, e.openEnd, 0, 0),
                e.openStart,
                n,
              )),
            e
          );
        }
        let eG = {
            thead: ["table"],
            tbody: ["table"],
            tfoot: ["table"],
            caption: ["table"],
            colgroup: ["table"],
            col: ["table", "colgroup"],
            tr: ["table", "tbody"],
            td: ["table", "tbody", "tr"],
            th: ["table", "tbody", "tr"],
          },
          eY = null;
        function eK() {
          return (
            eY || (eY = document.implementation.createHTMLDocument("title"))
          );
        }
        let eX = null,
          eJ = {},
          e0 = {},
          e1 = { touchstart: !0, touchmove: !0 };
        class e2 {
          constructor() {
            (this.shiftKey = !1),
              (this.mouseDown = null),
              (this.lastKeyCode = null),
              (this.lastKeyCodeTime = 0),
              (this.lastClick = { time: 0, x: 0, y: 0, type: "", button: 0 }),
              (this.lastSelectionOrigin = null),
              (this.lastSelectionTime = 0),
              (this.lastIOSEnter = 0),
              (this.lastIOSEnterFallbackTimeout = -1),
              (this.lastFocus = 0),
              (this.lastTouch = 0),
              (this.lastChromeDelete = 0),
              (this.composing = !1),
              (this.compositionNode = null),
              (this.composingTimeout = -1),
              (this.compositionNodes = []),
              (this.compositionEndedAt = -2e8),
              (this.compositionID = 1),
              (this.compositionPendingChanges = 0),
              (this.domChangeCount = 0),
              (this.eventHandlers = Object.create(null)),
              (this.hideSelectionGuard = null);
          }
        }
        function e5(e, t) {
          (e.input.lastSelectionOrigin = t),
            (e.input.lastSelectionTime = Date.now());
        }
        function e3(e) {
          e.someProp("handleDOMEvents", (t) => {
            for (let n in t)
              e.input.eventHandlers[n] ||
                e.dom.addEventListener(
                  n,
                  (e.input.eventHandlers[n] = (t) => e4(e, t)),
                );
          });
        }
        function e4(e, t) {
          return e.someProp("handleDOMEvents", (n) => {
            let r = n[t.type];
            return !!r && (r(e, t) || t.defaultPrevented);
          });
        }
        function e8(e) {
          return { left: e.clientX, top: e.clientY };
        }
        function e6(e, t, n, r, i) {
          if (-1 == r) return !1;
          let s = e.state.doc.resolve(r);
          for (let r = s.depth + 1; r > 0; r--)
            if (
              e.someProp(t, (t) =>
                r > s.depth
                  ? t(e, n, s.nodeAfter, s.before(r), i, !0)
                  : t(e, n, s.node(r), s.before(r), i, !1),
              )
            )
              return !0;
          return !1;
        }
        function e9(e, t, n) {
          if ((e.focused || e.focus(), e.state.selection.eq(t))) return;
          let r = e.state.tr.setSelection(t);
          "pointer" == n && r.setMeta("pointer", !0), e.dispatch(r);
        }
        (e0.keydown = (e, t) => {
          if (
            ((e.input.shiftKey = 16 == t.keyCode || t.shiftKey), !tt(e, t)) &&
            ((e.input.lastKeyCode = t.keyCode),
            (e.input.lastKeyCodeTime = Date.now()),
            !R || !C || 13 != t.keyCode)
          )
            if (
              (229 != t.keyCode && e.domObserver.forceFlush(),
              !I || 13 != t.keyCode || t.ctrlKey || t.altKey || t.metaKey)
            )
              e.someProp("handleKeyDown", (n) => n(e, t)) ||
              (function (e, t) {
                let n,
                  r = t.keyCode,
                  i =
                    ((n = ""),
                    t.ctrlKey && (n += "c"),
                    t.metaKey && (n += "m"),
                    t.altKey && (n += "a"),
                    t.shiftKey && (n += "s"),
                    n);
                if (8 == r || (D && 72 == r && "c" == i))
                  return e$(e, -1) || eL(e, -1);
                if ((46 == r && !t.shiftKey) || (D && 68 == r && "c" == i))
                  return e$(e, 1) || eL(e, 1);
                if (13 == r || 27 == r) return !0;
                if (37 == r || (D && 66 == r && "c" == i)) {
                  let t =
                    37 == r
                      ? "ltr" == eB(e, e.state.selection.from)
                        ? -1
                        : 1
                      : -1;
                  return eP(e, t, i) || eL(e, t);
                }
                if (39 == r || (D && 70 == r && "c" == i)) {
                  let t =
                    39 == r
                      ? "ltr" == eB(e, e.state.selection.from)
                        ? 1
                        : -1
                      : 1;
                  return eP(e, t, i) || eL(e, t);
                } else if (38 == r || (D && 80 == r && "c" == i))
                  return ez(e, -1, i) || eL(e, -1);
                else if (40 == r || (D && 78 == r && "c" == i))
                  return (
                    (function (e) {
                      if (!N || e.state.selection.$head.parentOffset > 0)
                        return !1;
                      let { focusNode: t, focusOffset: n } =
                        e.domSelectionRange();
                      if (
                        t &&
                        1 == t.nodeType &&
                        0 == n &&
                        t.firstChild &&
                        "false" == t.firstChild.contentEditable
                      ) {
                        let n = t.firstChild;
                        eq(e, n, "true"),
                          setTimeout(() => eq(e, n, "false"), 20);
                      }
                      return !1;
                    })(e) ||
                    ez(e, 1, i) ||
                    eL(e, 1)
                  );
                else if (
                  i == (D ? "m" : "c") &&
                  (66 == r || 73 == r || 89 == r || 90 == r)
                )
                  return !0;
                return !1;
              })(e, t)
                ? t.preventDefault()
                : e5(e, "key");
            else {
              let t = Date.now();
              (e.input.lastIOSEnter = t),
                (e.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
                  e.input.lastIOSEnter == t &&
                    (e.someProp("handleKeyDown", (t) => t(e, y(13, "Enter"))),
                    (e.input.lastIOSEnter = 0));
                }, 200));
            }
        }),
          (e0.keyup = (e, t) => {
            16 == t.keyCode && (e.input.shiftKey = !1);
          }),
          (e0.keypress = (e, t) => {
            if (
              tt(e, t) ||
              !t.charCode ||
              (t.ctrlKey && !t.altKey) ||
              (D && t.metaKey)
            )
              return;
            if (e.someProp("handleKeyPress", (n) => n(e, t)))
              return void t.preventDefault();
            let n = e.state.selection;
            if (!(n instanceof r.U3) || !n.$from.sameParent(n.$to)) {
              let r = String.fromCharCode(t.charCode),
                i = () => e.state.tr.insertText(r).scrollIntoView();
              /[\r\n]/.test(r) ||
                e.someProp("handleTextInput", (t) =>
                  t(e, n.$from.pos, n.$to.pos, r, i),
                ) ||
                e.dispatch(i()),
                t.preventDefault();
            }
          });
        let e7 = D ? "metaKey" : "ctrlKey";
        eJ.mousedown = (e, t) => {
          e.input.shiftKey = t.shiftKey;
          let n = ts(e),
            i = Date.now(),
            s = "singleClick";
          i - e.input.lastClick.time < 500 &&
            (function (e, t) {
              let n = t.x - e.clientX,
                r = t.y - e.clientY;
              return n * n + r * r < 100;
            })(t, e.input.lastClick) &&
            !t[e7] &&
            e.input.lastClick.button == t.button &&
            ("singleClick" == e.input.lastClick.type
              ? (s = "doubleClick")
              : "doubleClick" == e.input.lastClick.type && (s = "tripleClick")),
            (e.input.lastClick = {
              time: i,
              x: t.clientX,
              y: t.clientY,
              type: s,
              button: t.button,
            });
          let o = e.posAtCoords(e8(t));
          o &&
            ("singleClick" == s
              ? (e.input.mouseDown && e.input.mouseDown.done(),
                (e.input.mouseDown = new te(e, o, t, !!n)))
              : ("doubleClick" == s
                    ? function (e, t, n, r) {
                        return (
                          e6(e, "handleDoubleClickOn", t, n, r) ||
                          e.someProp("handleDoubleClick", (n) => n(e, t, r))
                        );
                      }
                    : function (e, t, n, i) {
                        return (
                          e6(e, "handleTripleClickOn", t, n, i) ||
                          e.someProp("handleTripleClick", (n) => n(e, t, i)) ||
                          (function (e, t, n) {
                            if (0 != n.button) return !1;
                            let i = e.state.doc;
                            if (-1 == t)
                              return (
                                !!i.inlineContent &&
                                (e9(
                                  e,
                                  r.U3.create(i, 0, i.content.size),
                                  "pointer",
                                ),
                                !0)
                              );
                            let s = i.resolve(t);
                            for (let t = s.depth + 1; t > 0; t--) {
                              let n = t > s.depth ? s.nodeAfter : s.node(t),
                                o = s.before(t);
                              if (n.inlineContent)
                                e9(
                                  e,
                                  r.U3.create(i, o + 1, o + 1 + n.content.size),
                                  "pointer",
                                );
                              else {
                                if (!r.nh.isSelectable(n)) continue;
                                e9(e, r.nh.create(i, o), "pointer");
                              }
                              return !0;
                            }
                          })(e, n, i)
                        );
                      })(e, o.pos, o.inside, t)
                ? t.preventDefault()
                : e5(e, "pointer"));
        };
        class te {
          constructor(e, t, n, i) {
            let s, o;
            if (
              ((this.view = e),
              (this.pos = t),
              (this.event = n),
              (this.flushed = i),
              (this.delayedSelectionSync = !1),
              (this.mightDrag = null),
              (this.startDoc = e.state.doc),
              (this.selectNode = !!n[e7]),
              (this.allowDefault = n.shiftKey),
              t.inside > -1)
            )
              (s = e.state.doc.nodeAt(t.inside)), (o = t.inside);
            else {
              let n = e.state.doc.resolve(t.pos);
              (s = n.parent), (o = n.depth ? n.before() : 0);
            }
            let a = i ? null : n.target,
              l = a ? e.docView.nearestDesc(a, !0) : null;
            this.target = l && 1 == l.dom.nodeType ? l.dom : null;
            let { selection: c } = e.state;
            ((0 == n.button &&
              s.type.spec.draggable &&
              !1 !== s.type.spec.selectable) ||
              (c instanceof r.nh && c.from <= o && c.to > o)) &&
              (this.mightDrag = {
                node: s,
                pos: o,
                addAttr: !!(this.target && !this.target.draggable),
                setUneditable: !!(
                  this.target &&
                  S &&
                  !this.target.hasAttribute("contentEditable")
                ),
              }),
              this.target &&
                this.mightDrag &&
                (this.mightDrag.addAttr || this.mightDrag.setUneditable) &&
                (this.view.domObserver.stop(),
                this.mightDrag.addAttr && (this.target.draggable = !0),
                this.mightDrag.setUneditable &&
                  setTimeout(() => {
                    this.view.input.mouseDown == this &&
                      this.target.setAttribute("contentEditable", "false");
                  }, 20),
                this.view.domObserver.start()),
              e.root.addEventListener(
                "mouseup",
                (this.up = this.up.bind(this)),
              ),
              e.root.addEventListener(
                "mousemove",
                (this.move = this.move.bind(this)),
              ),
              e5(e, "pointer");
          }
          done() {
            this.view.root.removeEventListener("mouseup", this.up),
              this.view.root.removeEventListener("mousemove", this.move),
              this.mightDrag &&
                this.target &&
                (this.view.domObserver.stop(),
                this.mightDrag.addAttr &&
                  this.target.removeAttribute("draggable"),
                this.mightDrag.setUneditable &&
                  this.target.removeAttribute("contentEditable"),
                this.view.domObserver.start()),
              this.delayedSelectionSync && setTimeout(() => ek(this.view)),
              (this.view.input.mouseDown = null);
          }
          up(e) {
            if ((this.done(), !this.view.dom.contains(e.target))) return;
            let t = this.pos;
            if (
              (this.view.state.doc != this.startDoc &&
                (t = this.view.posAtCoords(e8(e))),
              this.updateAllowDefault(e),
              this.allowDefault || !t)
            )
              e5(this.view, "pointer");
            else {
              var n, i, s, o;
              ((n = this.view),
              (i = t.pos),
              (s = t.inside),
              (o = this.selectNode),
              e6(n, "handleClickOn", i, s, e) ||
                n.someProp("handleClick", (t) => t(n, i, e)) ||
                (o
                  ? (function (e, t) {
                      if (-1 == t) return !1;
                      let n = e.state.selection,
                        i,
                        s;
                      n instanceof r.nh && (i = n.node);
                      let o = e.state.doc.resolve(t);
                      for (let e = o.depth + 1; e > 0; e--) {
                        let t = e > o.depth ? o.nodeAfter : o.node(e);
                        if (r.nh.isSelectable(t)) {
                          s =
                            i &&
                            n.$from.depth > 0 &&
                            e >= n.$from.depth &&
                            o.before(n.$from.depth + 1) == n.$from.pos
                              ? o.before(n.$from.depth)
                              : o.before(e);
                          break;
                        }
                      }
                      return (
                        null != s &&
                        (e9(e, r.nh.create(e.state.doc, s), "pointer"), !0)
                      );
                    })(n, s)
                  : (function (e, t) {
                      if (-1 == t) return !1;
                      let n = e.state.doc.resolve(t),
                        i = n.nodeAfter;
                      return (
                        !!(i && i.isAtom && r.nh.isSelectable(i)) &&
                        (e9(e, new r.nh(n), "pointer"), !0)
                      );
                    })(n, s)))
                ? e.preventDefault()
                : 0 == e.button &&
                    (this.flushed ||
                      (N && this.mightDrag && !this.mightDrag.node.isAtom) ||
                      (C &&
                        !this.view.state.selection.visible &&
                        2 >=
                          Math.min(
                            Math.abs(t.pos - this.view.state.selection.from),
                            Math.abs(t.pos - this.view.state.selection.to),
                          )))
                  ? (e9(
                      this.view,
                      r.LN.near(this.view.state.doc.resolve(t.pos)),
                      "pointer",
                    ),
                    e.preventDefault())
                  : e5(this.view, "pointer");
            }
          }
          move(e) {
            this.updateAllowDefault(e),
              e5(this.view, "pointer"),
              0 == e.buttons && this.done();
          }
          updateAllowDefault(e) {
            !this.allowDefault &&
              (Math.abs(this.event.x - e.clientX) > 4 ||
                Math.abs(this.event.y - e.clientY) > 4) &&
              (this.allowDefault = !0);
          }
        }
        function tt(e, t) {
          return (
            !!e.composing ||
            (!!(
              N && 500 > Math.abs(t.timeStamp - e.input.compositionEndedAt)
            ) &&
              ((e.input.compositionEndedAt = -2e8), !0))
          );
        }
        (eJ.touchstart = (e) => {
          (e.input.lastTouch = Date.now()), ts(e), e5(e, "pointer");
        }),
          (eJ.touchmove = (e) => {
            (e.input.lastTouch = Date.now()), e5(e, "pointer");
          }),
          (eJ.contextmenu = (e) => ts(e));
        let tn = R ? 5e3 : -1;
        function tr(e, t) {
          clearTimeout(e.input.composingTimeout),
            t > -1 && (e.input.composingTimeout = setTimeout(() => ts(e), t));
        }
        function ti(e) {
          let t;
          for (
            e.composing &&
            ((e.input.composing = !1),
            (e.input.compositionEndedAt =
              ((t = document.createEvent("Event")).initEvent("event", !0, !0),
              t.timeStamp)));
            e.input.compositionNodes.length > 0;

          )
            e.input.compositionNodes.pop().markParentsDirty();
        }
        function ts(e, t = !1) {
          if (!R || !(e.domObserver.flushingSoon >= 0)) {
            if (
              (e.domObserver.forceFlush(),
              ti(e),
              t || (e.docView && e.docView.dirty))
            ) {
              let n = eb(e),
                r = e.state.selection;
              return (
                n && !n.eq(r)
                  ? e.dispatch(e.state.tr.setSelection(n))
                  : (e.markCursor || t) &&
                      !r.$from.node(r.$from.sharedDepth(r.to)).inlineContent
                    ? e.dispatch(e.state.tr.deleteSelection())
                    : e.updateState(e.state),
                !0
              );
            }
            return !1;
          }
        }
        (e0.compositionstart = e0.compositionupdate =
          (e) => {
            if (!e.composing) {
              e.domObserver.flush();
              let { state: t } = e,
                n = t.selection.$to;
              if (
                t.selection instanceof r.U3 &&
                (t.storedMarks ||
                  (!n.textOffset &&
                    n.parentOffset &&
                    n.nodeBefore.marks.some(
                      (e) => !1 === e.type.spec.inclusive,
                    )))
              )
                (e.markCursor = e.state.storedMarks || n.marks()),
                  ts(e, !0),
                  (e.markCursor = null);
              else if (
                (ts(e, !t.selection.empty),
                S &&
                  t.selection.empty &&
                  n.parentOffset &&
                  !n.textOffset &&
                  n.nodeBefore.marks.length)
              ) {
                let t = e.domSelectionRange();
                for (
                  let n = t.focusNode, r = t.focusOffset;
                  n && 1 == n.nodeType && 0 != r;

                ) {
                  let t = r < 0 ? n.lastChild : n.childNodes[r - 1];
                  if (!t) break;
                  if (3 == t.nodeType) {
                    let n = e.domSelection();
                    n && n.collapse(t, t.nodeValue.length);
                    break;
                  }
                  (n = t), (r = -1);
                }
              }
              e.input.composing = !0;
            }
            tr(e, tn);
          }),
          (e0.compositionend = (e, t) => {
            e.composing &&
              ((e.input.composing = !1),
              (e.input.compositionEndedAt = t.timeStamp),
              (e.input.compositionPendingChanges =
                e.domObserver.pendingRecords().length
                  ? e.input.compositionID
                  : 0),
              (e.input.compositionNode = null),
              e.input.compositionPendingChanges &&
                Promise.resolve().then(() => e.domObserver.flush()),
              e.input.compositionID++,
              tr(e, 20));
          });
        let to = (O && T < 15) || (I && L < 604);
        function ta(e, t, n, r, s) {
          let o = eH(e, t, n, r, e.state.selection.$from);
          if (e.someProp("handlePaste", (t) => t(e, s, o || i.Ji.empty)))
            return !0;
          if (!o) return !1;
          let a =
              0 == o.openStart && 0 == o.openEnd && 1 == o.content.childCount
                ? o.content.firstChild
                : null,
            l = a
              ? e.state.tr.replaceSelectionWith(a, r)
              : e.state.tr.replaceSelection(o);
          return (
            e.dispatch(
              l
                .scrollIntoView()
                .setMeta("paste", !0)
                .setMeta("uiEvent", "paste"),
            ),
            !0
          );
        }
        function tl(e) {
          let t = e.getData("text/plain") || e.getData("Text");
          if (t) return t;
          let n = e.getData("text/uri-list");
          return n ? n.replace(/\r?\n/g, " ") : "";
        }
        (eJ.copy = e0.cut =
          (e, t) => {
            let n = e.state.selection,
              r = "cut" == t.type;
            if (n.empty) return;
            let i = to ? null : t.clipboardData,
              { dom: s, text: o } = eU(e, n.content());
            i
              ? (t.preventDefault(),
                i.clearData(),
                i.setData("text/html", s.innerHTML),
                i.setData("text/plain", o))
              : (function (e, t) {
                  if (!e.dom.parentNode) return;
                  let n = e.dom.parentNode.appendChild(
                    document.createElement("div"),
                  );
                  n.appendChild(t),
                    (n.style.cssText =
                      "position: fixed; left: -10000px; top: 10px");
                  let r = getSelection(),
                    i = document.createRange();
                  i.selectNodeContents(t),
                    e.dom.blur(),
                    r.removeAllRanges(),
                    r.addRange(i),
                    setTimeout(() => {
                      n.parentNode && n.parentNode.removeChild(n), e.focus();
                    }, 50);
                })(e, s),
              r &&
                e.dispatch(
                  e.state.tr
                    .deleteSelection()
                    .scrollIntoView()
                    .setMeta("uiEvent", "cut"),
                );
          }),
          (e0.paste = (e, t) => {
            if (e.composing && !R) return;
            let n = to ? null : t.clipboardData,
              r = e.input.shiftKey && 45 != e.input.lastKeyCode;
            n && ta(e, tl(n), n.getData("text/html"), r, t)
              ? t.preventDefault()
              : (function (e, t) {
                  if (!e.dom.parentNode) return;
                  let n =
                      e.input.shiftKey ||
                      e.state.selection.$from.parent.type.spec.code,
                    r = e.dom.parentNode.appendChild(
                      document.createElement(n ? "textarea" : "div"),
                    );
                  n || (r.contentEditable = "true"),
                    (r.style.cssText =
                      "position: fixed; left: -10000px; top: 10px"),
                    r.focus();
                  let i = e.input.shiftKey && 45 != e.input.lastKeyCode;
                  setTimeout(() => {
                    e.focus(),
                      r.parentNode && r.parentNode.removeChild(r),
                      n
                        ? ta(e, r.value, null, i, t)
                        : ta(e, r.textContent, r.innerHTML, i, t);
                  }, 50);
                })(e, t);
          });
        class tc {
          constructor(e, t, n) {
            (this.slice = e), (this.move = t), (this.node = n);
          }
        }
        let tu = D ? "altKey" : "ctrlKey";
        function td(e, t) {
          let n = e.someProp("dragCopies", (e) => !e(t));
          return null != n ? n : !t[tu];
        }
        for (let e in ((eJ.dragstart = (e, t) => {
          let n,
            i = e.input.mouseDown;
          if ((i && i.done(), !t.dataTransfer)) return;
          let s = e.state.selection,
            o = s.empty ? null : e.posAtCoords(e8(t));
          if (
            o &&
            o.pos >= s.from &&
            o.pos <= (s instanceof r.nh ? s.to - 1 : s.to)
          );
          else if (i && i.mightDrag)
            n = r.nh.create(e.state.doc, i.mightDrag.pos);
          else if (t.target && 1 == t.target.nodeType) {
            let i = e.docView.nearestDesc(t.target, !0);
            i &&
              i.node.type.spec.draggable &&
              i != e.docView &&
              (n = r.nh.create(e.state.doc, i.posBefore));
          }
          let a = (n || e.state.selection).content(),
            { dom: l, text: c, slice: u } = eU(e, a);
          (t.dataTransfer.files.length && C && !(A > 120)) ||
            t.dataTransfer.clearData(),
            t.dataTransfer.setData(to ? "Text" : "text/html", l.innerHTML),
            (t.dataTransfer.effectAllowed = "copyMove"),
            to || t.dataTransfer.setData("text/plain", c),
            (e.dragging = new tc(u, td(e, t), n));
        }),
        (eJ.dragend = (e) => {
          let t = e.dragging;
          window.setTimeout(() => {
            e.dragging == t && (e.dragging = null);
          }, 50);
        }),
        (e0.dragover = e0.dragenter = (e, t) => t.preventDefault()),
        (e0.drop = (e, t) => {
          let n = e.dragging;
          if (((e.dragging = null), !t.dataTransfer)) return;
          let o = e.posAtCoords(e8(t));
          if (!o) return;
          let a = e.state.doc.resolve(o.pos),
            l = n && n.slice;
          l
            ? e.someProp("transformPasted", (t) => {
                l = t(l, e);
              })
            : (l = eH(
                e,
                tl(t.dataTransfer),
                to ? null : t.dataTransfer.getData("text/html"),
                !1,
                a,
              ));
          let c = !!(n && td(e, t));
          if (e.someProp("handleDrop", (n) => n(e, t, l || i.Ji.empty, c)))
            return void t.preventDefault();
          if (!l) return;
          t.preventDefault();
          let u = l ? (0, s.Um)(e.state.doc, a.pos, l) : a.pos;
          null == u && (u = a.pos);
          let d = e.state.tr;
          if (c) {
            let { node: e } = n;
            e ? e.replace(d) : d.deleteSelection();
          }
          let h = d.mapping.map(u),
            p = 0 == l.openStart && 0 == l.openEnd && 1 == l.content.childCount,
            f = d.doc;
          if (
            (p
              ? d.replaceRangeWith(h, h, l.content.firstChild)
              : d.replaceRange(h, h, l),
            d.doc.eq(f))
          )
            return;
          let m = d.doc.resolve(h);
          if (
            p &&
            r.nh.isSelectable(l.content.firstChild) &&
            m.nodeAfter &&
            m.nodeAfter.sameMarkup(l.content.firstChild)
          )
            d.setSelection(new r.nh(m));
          else {
            let t = d.mapping.map(u);
            d.mapping.maps[d.mapping.maps.length - 1].forEach(
              (e, n, r, i) => (t = i),
            ),
              d.setSelection(eC(e, m, d.doc.resolve(t)));
          }
          e.focus(), e.dispatch(d.setMeta("uiEvent", "drop"));
        }),
        (eJ.focus = (e) => {
          (e.input.lastFocus = Date.now()),
            e.focused ||
              (e.domObserver.stop(),
              e.dom.classList.add("ProseMirror-focused"),
              e.domObserver.start(),
              (e.focused = !0),
              setTimeout(() => {
                e.docView &&
                  e.hasFocus() &&
                  !e.domObserver.currentSelection.eq(e.domSelectionRange()) &&
                  ek(e);
              }, 20));
        }),
        (eJ.blur = (e, t) => {
          e.focused &&
            (e.domObserver.stop(),
            e.dom.classList.remove("ProseMirror-focused"),
            e.domObserver.start(),
            t.relatedTarget &&
              e.dom.contains(t.relatedTarget) &&
              e.domObserver.currentSelection.clear(),
            (e.focused = !1));
        }),
        (eJ.beforeinput = (e, t) => {
          if (C && R && "deleteContentBackward" == t.inputType) {
            e.domObserver.flushSoon();
            let { domChangeCount: t } = e.input;
            setTimeout(() => {
              if (
                e.input.domChangeCount != t ||
                (e.dom.blur(),
                e.focus(),
                e.someProp("handleKeyDown", (t) => t(e, y(8, "Backspace"))))
              )
                return;
              let { $cursor: n } = e.state.selection;
              n &&
                n.pos > 0 &&
                e.dispatch(
                  e.state.tr.delete(n.pos - 1, n.pos).scrollIntoView(),
                );
            }, 50);
          }
        }),
        e0))
          eJ[e] = e0[e];
        function th(e, t) {
          if (e == t) return !0;
          for (let n in e) if (e[n] !== t[n]) return !1;
          for (let n in t) if (!(n in e)) return !1;
          return !0;
        }
        class tp {
          constructor(e, t) {
            (this.toDOM = e),
              (this.spec = t || tv),
              (this.side = this.spec.side || 0);
          }
          map(e, t, n, r) {
            let { pos: i, deleted: s } = e.mapResult(
              t.from + r,
              this.side < 0 ? -1 : 1,
            );
            return s ? null : new tg(i - n, i - n, this);
          }
          valid() {
            return !0;
          }
          eq(e) {
            return (
              this == e ||
              (e instanceof tp &&
                ((this.spec.key && this.spec.key == e.spec.key) ||
                  (this.toDOM == e.toDOM && th(this.spec, e.spec))))
            );
          }
          destroy(e) {
            this.spec.destroy && this.spec.destroy(e);
          }
        }
        class tf {
          constructor(e, t) {
            (this.attrs = e), (this.spec = t || tv);
          }
          map(e, t, n, r) {
            let i = e.map(t.from + r, this.spec.inclusiveStart ? -1 : 1) - n,
              s = e.map(t.to + r, this.spec.inclusiveEnd ? 1 : -1) - n;
            return i >= s ? null : new tg(i, s, this);
          }
          valid(e, t) {
            return t.from < t.to;
          }
          eq(e) {
            return (
              this == e ||
              (e instanceof tf &&
                th(this.attrs, e.attrs) &&
                th(this.spec, e.spec))
            );
          }
          static is(e) {
            return e.type instanceof tf;
          }
          destroy() {}
        }
        class tm {
          constructor(e, t) {
            (this.attrs = e), (this.spec = t || tv);
          }
          map(e, t, n, r) {
            let i = e.mapResult(t.from + r, 1);
            if (i.deleted) return null;
            let s = e.mapResult(t.to + r, -1);
            return s.deleted || s.pos <= i.pos
              ? null
              : new tg(i.pos - n, s.pos - n, this);
          }
          valid(e, t) {
            let { index: n, offset: r } = e.content.findIndex(t.from),
              i;
            return (
              r == t.from && !(i = e.child(n)).isText && r + i.nodeSize == t.to
            );
          }
          eq(e) {
            return (
              this == e ||
              (e instanceof tm &&
                th(this.attrs, e.attrs) &&
                th(this.spec, e.spec))
            );
          }
          destroy() {}
        }
        class tg {
          constructor(e, t, n) {
            (this.from = e), (this.to = t), (this.type = n);
          }
          copy(e, t) {
            return new tg(e, t, this.type);
          }
          eq(e, t = 0) {
            return (
              this.type.eq(e.type) &&
              this.from + t == e.from &&
              this.to + t == e.to
            );
          }
          map(e, t, n) {
            return this.type.map(e, this, t, n);
          }
          static widget(e, t, n) {
            return new tg(e, e, new tp(t, n));
          }
          static inline(e, t, n, r) {
            return new tg(e, t, new tf(n, r));
          }
          static node(e, t, n, r) {
            return new tg(e, t, new tm(n, r));
          }
          get spec() {
            return this.type.spec;
          }
          get inline() {
            return this.type instanceof tf;
          }
          get widget() {
            return this.type instanceof tp;
          }
        }
        let ty = [],
          tv = {};
        class tb {
          constructor(e, t) {
            (this.local = e.length ? e : ty),
              (this.children = t.length ? t : ty);
          }
          static create(e, t) {
            return t.length ? tT(t, e, 0, tv) : tx;
          }
          find(e, t, n) {
            let r = [];
            return (
              this.findInner(null == e ? 0 : e, null == t ? 1e9 : t, r, 0, n), r
            );
          }
          findInner(e, t, n, r, i) {
            for (let s = 0; s < this.local.length; s++) {
              let o = this.local[s];
              o.from <= t &&
                o.to >= e &&
                (!i || i(o.spec)) &&
                n.push(o.copy(o.from + r, o.to + r));
            }
            for (let s = 0; s < this.children.length; s += 3)
              if (this.children[s] < t && this.children[s + 1] > e) {
                let o = this.children[s] + 1;
                this.children[s + 2].findInner(e - o, t - o, n, r + o, i);
              }
          }
          map(e, t, n) {
            return this == tx || 0 == e.maps.length
              ? this
              : this.mapInner(e, t, 0, 0, n || tv);
          }
          mapInner(e, t, n, r, i) {
            let s;
            for (let o = 0; o < this.local.length; o++) {
              let a = this.local[o].map(e, n, r);
              a && a.type.valid(t, a)
                ? (s || (s = [])).push(a)
                : i.onRemove && i.onRemove(this.local[o].spec);
            }
            return this.children.length
              ? (function (e, t, n, r, i, s, o) {
                  let a = e.slice();
                  for (let e = 0, t = s; e < n.maps.length; e++) {
                    let r = 0;
                    n.maps[e].forEach((e, n, i, s) => {
                      let o = s - i - (n - e);
                      for (let i = 0; i < a.length; i += 3) {
                        let s = a[i + 1];
                        if (s < 0 || e > s + t - r) continue;
                        let l = a[i] + t - r;
                        n >= l
                          ? (a[i + 1] = e <= l ? -2 : -1)
                          : e >= t && o && ((a[i] += o), (a[i + 1] += o));
                      }
                      r += o;
                    }),
                      (t = n.maps[e].map(t, -1));
                  }
                  let l = !1;
                  for (let t = 0; t < a.length; t += 3)
                    if (a[t + 1] < 0) {
                      if (-2 == a[t + 1]) {
                        (l = !0), (a[t + 1] = -1);
                        continue;
                      }
                      let c = n.map(e[t] + s),
                        u = c - i;
                      if (u < 0 || u >= r.content.size) {
                        l = !0;
                        continue;
                      }
                      let d = n.map(e[t + 1] + s, -1) - i,
                        { index: h, offset: p } = r.content.findIndex(u),
                        f = r.maybeChild(h);
                      if (f && p == u && p + f.nodeSize == d) {
                        let r = a[t + 2].mapInner(n, f, c + 1, e[t] + s + 1, o);
                        r != tx
                          ? ((a[t] = u), (a[t + 1] = d), (a[t + 2] = r))
                          : ((a[t + 1] = -2), (l = !0));
                      } else l = !0;
                    }
                  if (l) {
                    let l = tT(
                      (function (e, t, n, r, i, s, o) {
                        for (let a = 0; a < e.length; a += 3)
                          -1 == e[a + 1] &&
                            (function e(t, s) {
                              for (let e = 0; e < t.local.length; e++) {
                                let a = t.local[e].map(r, i, s);
                                a
                                  ? n.push(a)
                                  : o.onRemove && o.onRemove(t.local[e].spec);
                              }
                              for (let n = 0; n < t.children.length; n += 3)
                                e(t.children[n + 2], t.children[n] + s + 1);
                            })(e[a + 2], t[a] + s + 1);
                        return n;
                      })(a, e, t, n, i, s, o),
                      r,
                      0,
                      o,
                    );
                    t = l.local;
                    for (let e = 0; e < a.length; e += 3)
                      a[e + 1] < 0 && (a.splice(e, 3), (e -= 3));
                    for (let e = 0, t = 0; e < l.children.length; e += 3) {
                      let n = l.children[e];
                      for (; t < a.length && a[t] < n; ) t += 3;
                      a.splice(
                        t,
                        0,
                        l.children[e],
                        l.children[e + 1],
                        l.children[e + 2],
                      );
                    }
                  }
                  return new tb(t.sort(tS), a);
                })(this.children, s || [], e, t, n, r, i)
              : s
                ? new tb(s.sort(tS), ty)
                : tx;
          }
          add(e, t) {
            return t.length
              ? this == tx
                ? tb.create(e, t)
                : this.addInner(e, t, 0)
              : this;
          }
          addInner(e, t, n) {
            let r,
              i = 0;
            e.forEach((e, s) => {
              let o = s + n,
                a;
              if ((a = t_(t, e, o))) {
                for (
                  r || (r = this.children.slice());
                  i < r.length && r[i] < s;

                )
                  i += 3;
                r[i] == s
                  ? (r[i + 2] = r[i + 2].addInner(e, a, o + 1))
                  : r.splice(i, 0, s, s + e.nodeSize, tT(a, e, o + 1, tv)),
                  (i += 3);
              }
            });
            let s = tw(i ? tO(t) : t, -n);
            for (let t = 0; t < s.length; t++)
              s[t].type.valid(e, s[t]) || s.splice(t--, 1);
            return new tb(
              s.length ? this.local.concat(s).sort(tS) : this.local,
              r || this.children,
            );
          }
          remove(e) {
            return 0 == e.length || this == tx ? this : this.removeInner(e, 0);
          }
          removeInner(e, t) {
            let n = this.children,
              r = this.local;
            for (let r = 0; r < n.length; r += 3) {
              let i,
                s = n[r] + t,
                o = n[r + 1] + t;
              for (let t = 0, n; t < e.length; t++)
                (n = e[t]) &&
                  n.from > s &&
                  n.to < o &&
                  ((e[t] = null), (i || (i = [])).push(n));
              if (!i) continue;
              n == this.children && (n = this.children.slice());
              let a = n[r + 2].removeInner(i, s + 1);
              a != tx ? (n[r + 2] = a) : (n.splice(r, 3), (r -= 3));
            }
            if (r.length) {
              for (let n = 0, i; n < e.length; n++)
                if ((i = e[n]))
                  for (let e = 0; e < r.length; e++)
                    r[e].eq(i, t) &&
                      (r == this.local && (r = this.local.slice()),
                      r.splice(e--, 1));
            }
            return n == this.children && r == this.local
              ? this
              : r.length || n.length
                ? new tb(r, n)
                : tx;
          }
          forChild(e, t) {
            let n, r;
            if (this == tx) return this;
            if (t.isLeaf) return tb.empty;
            for (let t = 0; t < this.children.length; t += 3)
              if (this.children[t] >= e) {
                this.children[t] == e && (n = this.children[t + 2]);
                break;
              }
            let i = e + 1,
              s = i + t.content.size;
            for (let e = 0; e < this.local.length; e++) {
              let t = this.local[e];
              if (t.from < s && t.to > i && t.type instanceof tf) {
                let e = Math.max(i, t.from) - i,
                  n = Math.min(s, t.to) - i;
                e < n && (r || (r = [])).push(t.copy(e, n));
              }
            }
            if (r) {
              let e = new tb(r.sort(tS), ty);
              return n ? new tk([e, n]) : e;
            }
            return n || tx;
          }
          eq(e) {
            if (this == e) return !0;
            if (
              !(e instanceof tb) ||
              this.local.length != e.local.length ||
              this.children.length != e.children.length
            )
              return !1;
            for (let t = 0; t < this.local.length; t++)
              if (!this.local[t].eq(e.local[t])) return !1;
            for (let t = 0; t < this.children.length; t += 3)
              if (
                this.children[t] != e.children[t] ||
                this.children[t + 1] != e.children[t + 1] ||
                !this.children[t + 2].eq(e.children[t + 2])
              )
                return !1;
            return !0;
          }
          locals(e) {
            return tE(this.localsInner(e));
          }
          localsInner(e) {
            if (this == tx) return ty;
            if (e.inlineContent || !this.local.some(tf.is)) return this.local;
            let t = [];
            for (let e = 0; e < this.local.length; e++)
              this.local[e].type instanceof tf || t.push(this.local[e]);
            return t;
          }
          forEachSet(e) {
            e(this);
          }
        }
        (tb.empty = new tb([], [])), (tb.removeOverlap = tE);
        let tx = tb.empty;
        class tk {
          constructor(e) {
            this.members = e;
          }
          map(e, t) {
            let n = this.members.map((n) => n.map(e, t, tv));
            return tk.from(n);
          }
          forChild(e, t) {
            if (t.isLeaf) return tb.empty;
            let n = [];
            for (let r = 0; r < this.members.length; r++) {
              let i = this.members[r].forChild(e, t);
              i != tx &&
                (i instanceof tk ? (n = n.concat(i.members)) : n.push(i));
            }
            return tk.from(n);
          }
          eq(e) {
            if (!(e instanceof tk) || e.members.length != this.members.length)
              return !1;
            for (let t = 0; t < this.members.length; t++)
              if (!this.members[t].eq(e.members[t])) return !1;
            return !0;
          }
          locals(e) {
            let t,
              n = !0;
            for (let r = 0; r < this.members.length; r++) {
              let i = this.members[r].localsInner(e);
              if (i.length)
                if (t) {
                  n && ((t = t.slice()), (n = !1));
                  for (let e = 0; e < i.length; e++) t.push(i[e]);
                } else t = i;
            }
            return t ? tE(n ? t : t.sort(tS)) : ty;
          }
          static from(e) {
            switch (e.length) {
              case 0:
                return tx;
              case 1:
                return e[0];
              default:
                return new tk(
                  e.every((e) => e instanceof tb)
                    ? e
                    : e.reduce(
                        (e, t) => e.concat(t instanceof tb ? t : t.members),
                        [],
                      ),
                );
            }
          }
          forEachSet(e) {
            for (let t = 0; t < this.members.length; t++)
              this.members[t].forEachSet(e);
          }
        }
        function tw(e, t) {
          if (!t || !e.length) return e;
          let n = [];
          for (let r = 0; r < e.length; r++) {
            let i = e[r];
            n.push(new tg(i.from + t, i.to + t, i.type));
          }
          return n;
        }
        function t_(e, t, n) {
          if (t.isLeaf) return null;
          let r = n + t.nodeSize,
            i = null;
          for (let t = 0, s; t < e.length; t++)
            (s = e[t]) &&
              s.from > n &&
              s.to < r &&
              ((i || (i = [])).push(s), (e[t] = null));
          return i;
        }
        function tO(e) {
          let t = [];
          for (let n = 0; n < e.length; n++) null != e[n] && t.push(e[n]);
          return t;
        }
        function tT(e, t, n, r) {
          let i = [],
            s = !1;
          t.forEach((t, o) => {
            let a = t_(e, t, o + n);
            if (a) {
              s = !0;
              let e = tT(a, t, n + o + 1, r);
              e != tx && i.push(o, o + t.nodeSize, e);
            }
          });
          let o = tw(s ? tO(e) : e, -n).sort(tS);
          for (let e = 0; e < o.length; e++)
            o[e].type.valid(t, o[e]) ||
              (r.onRemove && r.onRemove(o[e].spec), o.splice(e--, 1));
          return o.length || i.length ? new tb(o, i) : tx;
        }
        function tS(e, t) {
          return e.from - t.from || e.to - t.to;
        }
        function tE(e) {
          let t = e;
          for (let n = 0; n < t.length - 1; n++) {
            let r = t[n];
            if (r.from != r.to)
              for (let i = n + 1; i < t.length; i++) {
                let s = t[i];
                if (s.from == r.from) {
                  s.to != r.to &&
                    (t == e && (t = e.slice()),
                    (t[i] = s.copy(s.from, r.to)),
                    tC(t, i + 1, s.copy(r.to, s.to)));
                  continue;
                }
                s.from < r.to &&
                  (t == e && (t = e.slice()),
                  (t[n] = r.copy(r.from, s.from)),
                  tC(t, i, r.copy(s.from, r.to)));
                break;
              }
          }
          return t;
        }
        function tC(e, t, n) {
          for (; t < e.length && tS(n, e[t]) > 0; ) t++;
          e.splice(t, 0, n);
        }
        function tA(e) {
          let t = [];
          return (
            e.someProp("decorations", (n) => {
              let r = n(e.state);
              r && r != tx && t.push(r);
            }),
            e.cursorWrapper &&
              t.push(tb.create(e.state.doc, [e.cursorWrapper.deco])),
            tk.from(t)
          );
        }
        let tN = {
            childList: !0,
            characterData: !0,
            characterDataOldValue: !0,
            attributes: !0,
            attributeOldValue: !0,
            subtree: !0,
          },
          tI = O && T <= 11;
        class tD {
          constructor() {
            (this.anchorNode = null),
              (this.anchorOffset = 0),
              (this.focusNode = null),
              (this.focusOffset = 0);
          }
          set(e) {
            (this.anchorNode = e.anchorNode),
              (this.anchorOffset = e.anchorOffset),
              (this.focusNode = e.focusNode),
              (this.focusOffset = e.focusOffset);
          }
          clear() {
            this.anchorNode = this.focusNode = null;
          }
          eq(e) {
            return (
              e.anchorNode == this.anchorNode &&
              e.anchorOffset == this.anchorOffset &&
              e.focusNode == this.focusNode &&
              e.focusOffset == this.focusOffset
            );
          }
        }
        class tP {
          constructor(e, t) {
            (this.view = e),
              (this.handleDOMChange = t),
              (this.queue = []),
              (this.flushingSoon = -1),
              (this.observer = null),
              (this.currentSelection = new tD()),
              (this.onCharData = null),
              (this.suppressingSelectionUpdates = !1),
              (this.lastChangedTextNode = null),
              (this.observer =
                window.MutationObserver &&
                new window.MutationObserver((e) => {
                  for (let t = 0; t < e.length; t++) this.queue.push(e[t]);
                  O &&
                  T <= 11 &&
                  e.some(
                    (e) =>
                      ("childList" == e.type && e.removedNodes.length) ||
                      ("characterData" == e.type &&
                        e.oldValue.length > e.target.nodeValue.length),
                  )
                    ? this.flushSoon()
                    : this.flush();
                })),
              tI &&
                (this.onCharData = (e) => {
                  this.queue.push({
                    target: e.target,
                    type: "characterData",
                    oldValue: e.prevValue,
                  }),
                    this.flushSoon();
                }),
              (this.onSelectionChange = this.onSelectionChange.bind(this));
          }
          flushSoon() {
            this.flushingSoon < 0 &&
              (this.flushingSoon = window.setTimeout(() => {
                (this.flushingSoon = -1), this.flush();
              }, 20));
          }
          forceFlush() {
            this.flushingSoon > -1 &&
              (window.clearTimeout(this.flushingSoon),
              (this.flushingSoon = -1),
              this.flush());
          }
          start() {
            this.observer &&
              (this.observer.takeRecords(),
              this.observer.observe(this.view.dom, tN)),
              this.onCharData &&
                this.view.dom.addEventListener(
                  "DOMCharacterDataModified",
                  this.onCharData,
                ),
              this.connectSelection();
          }
          stop() {
            if (this.observer) {
              let e = this.observer.takeRecords();
              if (e.length) {
                for (let t = 0; t < e.length; t++) this.queue.push(e[t]);
                window.setTimeout(() => this.flush(), 20);
              }
              this.observer.disconnect();
            }
            this.onCharData &&
              this.view.dom.removeEventListener(
                "DOMCharacterDataModified",
                this.onCharData,
              ),
              this.disconnectSelection();
          }
          connectSelection() {
            this.view.dom.ownerDocument.addEventListener(
              "selectionchange",
              this.onSelectionChange,
            );
          }
          disconnectSelection() {
            this.view.dom.ownerDocument.removeEventListener(
              "selectionchange",
              this.onSelectionChange,
            );
          }
          suppressSelectionUpdates() {
            (this.suppressingSelectionUpdates = !0),
              setTimeout(() => (this.suppressingSelectionUpdates = !1), 50);
          }
          onSelectionChange() {
            if (eA(this.view)) {
              if (this.suppressingSelectionUpdates) return ek(this.view);
              if (O && T <= 11 && !this.view.state.selection.empty) {
                let e = this.view.domSelectionRange();
                if (
                  e.focusNode &&
                  d(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset)
                )
                  return this.flushSoon();
              }
              this.flush();
            }
          }
          setCurSelection() {
            this.currentSelection.set(this.view.domSelectionRange());
          }
          ignoreSelectionChange(e) {
            if (!e.focusNode) return !0;
            let t = new Set(),
              n;
            for (let n = e.focusNode; n; n = a(n)) t.add(n);
            for (let r = e.anchorNode; r; r = a(r))
              if (t.has(r)) {
                n = r;
                break;
              }
            let r = n && this.view.docView.nearestDesc(n);
            if (
              r &&
              r.ignoreMutation({
                type: "selection",
                target: 3 == n.nodeType ? n.parentNode : n,
              })
            )
              return this.setCurSelection(), !0;
          }
          pendingRecords() {
            if (this.observer)
              for (let e of this.observer.takeRecords()) this.queue.push(e);
            return this.queue;
          }
          flush() {
            var e;
            let { view: t } = this;
            if (!t.docView || this.flushingSoon > -1) return;
            let n = this.pendingRecords();
            n.length && (this.queue = []);
            let i = t.domSelectionRange(),
              s =
                !this.suppressingSelectionUpdates &&
                !this.currentSelection.eq(i) &&
                eA(t) &&
                !this.ignoreSelectionChange(i),
              o = -1,
              a = -1,
              l = !1,
              c = [];
            if (t.editable)
              for (let e = 0; e < n.length; e++) {
                let t = this.registerMutation(n[e], c);
                t &&
                  ((o = o < 0 ? t.from : Math.min(t.from, o)),
                  (a = a < 0 ? t.to : Math.max(t.to, a)),
                  t.typeOver && (l = !0));
              }
            if (S && c.length) {
              let e = c.filter((e) => "BR" == e.nodeName);
              if (2 == e.length) {
                let [t, n] = e;
                t.parentNode && t.parentNode.parentNode == n.parentNode
                  ? n.remove()
                  : t.remove();
              } else {
                let { focusNode: n } = this.currentSelection;
                for (let r of e) {
                  let e = r.parentNode;
                  e &&
                    "LI" == e.nodeName &&
                    (!n ||
                      (function (e, t) {
                        for (
                          let n = t.parentNode;
                          n && n != e.dom;
                          n = n.parentNode
                        ) {
                          let t = e.docView.nearestDesc(n, !0);
                          if (t && t.node.isBlock) return n;
                        }
                        return null;
                      })(t, n) != e) &&
                    r.remove();
                }
              }
            }
            let u = null;
            o < 0 &&
            s &&
            t.input.lastFocus > Date.now() - 200 &&
            Math.max(t.input.lastTouch, t.input.lastClick.time) <
              Date.now() - 300 &&
            g(i) &&
            (u = eb(t)) &&
            u.eq(r.LN.near(t.state.doc.resolve(0), 1))
              ? ((t.input.lastFocus = 0),
                ek(t),
                this.currentSelection.set(i),
                t.scrollToSelection())
              : (o > -1 || s) &&
                (o > -1 &&
                  (t.docView.markDirty(o, a),
                  (e = t),
                  !tR.has(e) &&
                    (tR.set(e, null),
                    -1 !==
                      ["normal", "nowrap", "pre-line"].indexOf(
                        getComputedStyle(e.dom).whiteSpace,
                      )) &&
                    ((e.requiresGeckoHackNode = S),
                    tM ||
                      (console.warn(
                        "ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.",
                      ),
                      (tM = !0)))),
                this.handleDOMChange(o, a, l, c),
                t.docView && t.docView.dirty
                  ? t.updateState(t.state)
                  : this.currentSelection.eq(i) || ek(t),
                this.currentSelection.set(i));
          }
          registerMutation(e, t) {
            if (t.indexOf(e.target) > -1) return null;
            let n = this.view.docView.nearestDesc(e.target);
            if (
              ("attributes" == e.type &&
                (n == this.view.docView ||
                  "contenteditable" == e.attributeName ||
                  ("style" == e.attributeName &&
                    !e.oldValue &&
                    !e.target.getAttribute("style")))) ||
              !n ||
              n.ignoreMutation(e)
            )
              return null;
            if ("childList" == e.type) {
              for (let n = 0; n < e.addedNodes.length; n++) {
                let r = e.addedNodes[n];
                t.push(r), 3 == r.nodeType && (this.lastChangedTextNode = r);
              }
              if (
                n.contentDOM &&
                n.contentDOM != n.dom &&
                !n.contentDOM.contains(e.target)
              )
                return { from: n.posBefore, to: n.posAfter };
              let r = e.previousSibling,
                i = e.nextSibling;
              if (O && T <= 11 && e.addedNodes.length)
                for (let t = 0; t < e.addedNodes.length; t++) {
                  let { previousSibling: n, nextSibling: s } = e.addedNodes[t];
                  (!n || 0 > Array.prototype.indexOf.call(e.addedNodes, n)) &&
                    (r = n),
                    (!s || 0 > Array.prototype.indexOf.call(e.addedNodes, s)) &&
                      (i = s);
                }
              let s = r && r.parentNode == e.target ? o(r) + 1 : 0,
                a = n.localPosFromDOM(e.target, s, -1),
                l =
                  i && i.parentNode == e.target
                    ? o(i)
                    : e.target.childNodes.length;
              return { from: a, to: n.localPosFromDOM(e.target, l, 1) };
            }
            return "attributes" == e.type
              ? { from: n.posAtStart - n.border, to: n.posAtEnd + n.border }
              : ((this.lastChangedTextNode = e.target),
                {
                  from: n.posAtStart,
                  to: n.posAtEnd,
                  typeOver: e.target.nodeValue == e.oldValue,
                });
          }
        }
        let tR = new WeakMap(),
          tM = !1;
        function tL(e, t) {
          let n = t.startContainer,
            r = t.startOffset,
            i = t.endContainer,
            s = t.endOffset,
            o = e.domAtPos(e.state.selection.anchor);
          return (
            d(o.node, o.offset, i, s) && ([n, r, i, s] = [i, s, n, r]),
            { anchorNode: n, anchorOffset: r, focusNode: i, focusOffset: s }
          );
        }
        function tj(e) {
          let t = e.pmViewDesc;
          if (t) return t.parseRule();
          if ("BR" == e.nodeName && e.parentNode) {
            if (N && /^(ul|ol)$/i.test(e.parentNode.nodeName)) {
              let e = document.createElement("div");
              return e.appendChild(document.createElement("li")), { skip: e };
            } else if (
              e.parentNode.lastChild == e ||
              (N && /^(tr|table)$/i.test(e.parentNode.nodeName))
            )
              return { ignore: !0 };
          } else if ("IMG" == e.nodeName && e.getAttribute("mark-placeholder"))
            return { ignore: !0 };
          return null;
        }
        let tF =
          /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
        function tB(e, t, n) {
          return Math.max(n.anchor, n.head) > t.content.size
            ? null
            : eC(e, t.resolve(n.anchor), t.resolve(n.head));
        }
        function tz(e, t, n) {
          let r = e.depth,
            i = t ? e.end() : e.pos;
          for (; r > 0 && (t || e.indexAfter(r) == e.node(r).childCount); )
            r--, i++, (t = !1);
          if (n) {
            let t = e.node(r).maybeChild(e.indexAfter(r));
            for (; t && !t.isLeaf; ) (t = t.firstChild), i++;
          }
          return i;
        }
        function t$(e) {
          if (2 != e.length) return !1;
          let t = e.charCodeAt(0),
            n = e.charCodeAt(1);
          return t >= 56320 && t <= 57343 && n >= 55296 && n <= 56319;
        }
        class tq {
          constructor(e, t) {
            (this._root = null),
              (this.focused = !1),
              (this.trackWrites = null),
              (this.mounted = !1),
              (this.markCursor = null),
              (this.cursorWrapper = null),
              (this.lastSelectedViewDesc = void 0),
              (this.input = new e2()),
              (this.prevDirectPlugins = []),
              (this.pluginViews = []),
              (this.requiresGeckoHackNode = !1),
              (this.dragging = null),
              (this._props = t),
              (this.state = t.state),
              (this.directPlugins = t.plugins || []),
              this.directPlugins.forEach(tW),
              (this.dispatch = this.dispatch.bind(this)),
              (this.dom = (e && e.mount) || document.createElement("div")),
              e &&
                (e.appendChild
                  ? e.appendChild(this.dom)
                  : "function" == typeof e
                    ? e(this.dom)
                    : e.mount && (this.mounted = !0)),
              (this.editable = tQ(this)),
              tH(this),
              (this.nodeViews = tV(this)),
              (this.docView = es(
                this.state.doc,
                tU(this),
                tA(this),
                this.dom,
                this,
              )),
              (this.domObserver = new tP(this, (e, t, n, s) =>
                (function (e, t, n, s, o) {
                  let a,
                    l,
                    c,
                    u,
                    d =
                      e.input.compositionPendingChanges ||
                      (e.composing ? e.input.compositionID : 0);
                  if (((e.input.compositionPendingChanges = 0), t < 0)) {
                    let t =
                        e.input.lastSelectionTime > Date.now() - 50
                          ? e.input.lastSelectionOrigin
                          : null,
                      n = eb(e, t);
                    if (n && !e.state.selection.eq(n)) {
                      if (
                        C &&
                        R &&
                        13 === e.input.lastKeyCode &&
                        Date.now() - 100 < e.input.lastKeyCodeTime &&
                        e.someProp("handleKeyDown", (t) => t(e, y(13, "Enter")))
                      )
                        return;
                      let r = e.state.tr.setSelection(n);
                      "pointer" == t
                        ? r.setMeta("pointer", !0)
                        : "key" == t && r.scrollIntoView(),
                        d && r.setMeta("composition", d),
                        e.dispatch(r);
                    }
                    return;
                  }
                  let h = e.state.doc.resolve(t),
                    p = h.sharedDepth(n);
                  (t = h.before(p + 1)),
                    (n = e.state.doc.resolve(n).after(p + 1));
                  let f = e.state.selection,
                    m = (function (e, t, n) {
                      let r,
                        {
                          node: s,
                          fromOffset: o,
                          toOffset: a,
                          from: l,
                          to: c,
                        } = e.docView.parseRange(t, n),
                        u = e.domSelectionRange(),
                        d = u.anchorNode;
                      if (
                        (d &&
                          e.dom.contains(1 == d.nodeType ? d : d.parentNode) &&
                          ((r = [{ node: d, offset: u.anchorOffset }]),
                          g(u) ||
                            r.push({
                              node: u.focusNode,
                              offset: u.focusOffset,
                            })),
                        C && 8 === e.input.lastKeyCode)
                      )
                        for (let e = a; e > o; e--) {
                          let t = s.childNodes[e - 1],
                            n = t.pmViewDesc;
                          if ("BR" == t.nodeName && !n) {
                            a = e;
                            break;
                          }
                          if (!n || n.size) break;
                        }
                      let h = e.state.doc,
                        p =
                          e.someProp("domParser") ||
                          i.S4.fromSchema(e.state.schema),
                        f = h.resolve(l),
                        m = null,
                        y = p.parse(s, {
                          topNode: f.parent,
                          topMatch: f.parent.contentMatchAt(f.index()),
                          topOpen: !0,
                          from: o,
                          to: a,
                          preserveWhitespace:
                            "pre" != f.parent.type.whitespace || "full",
                          findPositions: r,
                          ruleFromNode: tj,
                          context: f,
                        });
                      if (r && null != r[0].pos) {
                        let e = r[0].pos,
                          t = r[1] && r[1].pos;
                        null == t && (t = e),
                          (m = { anchor: e + l, head: t + l });
                      }
                      return { doc: y, sel: m, from: l, to: c };
                    })(e, t, n),
                    v = e.state.doc,
                    b = v.slice(m.from, m.to);
                  8 === e.input.lastKeyCode &&
                  Date.now() - 100 < e.input.lastKeyCodeTime
                    ? ((a = e.state.selection.to), (l = "end"))
                    : ((a = e.state.selection.from), (l = "start")),
                    (e.input.lastKeyCode = null);
                  let x = (function (e, t, n, r, i) {
                    let s = e.findDiffStart(t, n);
                    if (null == s) return null;
                    let { a: o, b: a } = e.findDiffEnd(
                      t,
                      n + e.size,
                      n + t.size,
                    );
                    if ("end" == i) {
                      let e = Math.max(0, s - Math.min(o, a));
                      r -= o + e - s;
                    }
                    if (o < s && e.size < t.size) {
                      let e = r <= s && r >= o ? s - r : 0;
                      (s -= e) &&
                        s < t.size &&
                        t$(t.textBetween(s - 1, s + 1)) &&
                        (s += e ? 1 : -1),
                        (a = s + (a - o)),
                        (o = s);
                    } else if (a < s) {
                      let t = r <= s && r >= a ? s - r : 0;
                      (s -= t) &&
                        s < e.size &&
                        t$(e.textBetween(s - 1, s + 1)) &&
                        (s += t ? 1 : -1),
                        (o = s + (o - a)),
                        (a = s);
                    }
                    return { start: s, endA: o, endB: a };
                  })(b.content, m.doc.content, m.from, a, l);
                  if (
                    (x && e.input.domChangeCount++,
                    ((I && e.input.lastIOSEnter > Date.now() - 225) || R) &&
                      o.some((e) => 1 == e.nodeType && !tF.test(e.nodeName)) &&
                      (!x || x.endA >= x.endB) &&
                      e.someProp("handleKeyDown", (t) => t(e, y(13, "Enter"))))
                  ) {
                    e.input.lastIOSEnter = 0;
                    return;
                  }
                  if (!x)
                    if (
                      s &&
                      f instanceof r.U3 &&
                      !f.empty &&
                      f.$head.sameParent(f.$anchor) &&
                      !e.composing &&
                      !(m.sel && m.sel.anchor != m.sel.head)
                    )
                      x = { start: f.from, endA: f.to, endB: f.to };
                    else {
                      if (m.sel) {
                        let t = tB(e, e.state.doc, m.sel);
                        if (t && !t.eq(e.state.selection)) {
                          let n = e.state.tr.setSelection(t);
                          d && n.setMeta("composition", d), e.dispatch(n);
                        }
                      }
                      return;
                    }
                  e.state.selection.from < e.state.selection.to &&
                    x.start == x.endB &&
                    e.state.selection instanceof r.U3 &&
                    (x.start > e.state.selection.from &&
                    x.start <= e.state.selection.from + 2 &&
                    e.state.selection.from >= m.from
                      ? (x.start = e.state.selection.from)
                      : x.endA < e.state.selection.to &&
                        x.endA >= e.state.selection.to - 2 &&
                        e.state.selection.to <= m.to &&
                        ((x.endB += e.state.selection.to - x.endA),
                        (x.endA = e.state.selection.to))),
                    O &&
                      T <= 11 &&
                      x.endB == x.start + 1 &&
                      x.endA == x.start &&
                      x.start > m.from &&
                      " \xa0" ==
                        m.doc.textBetween(
                          x.start - m.from - 1,
                          x.start - m.from + 1,
                        ) &&
                      (x.start--, x.endA--, x.endB--);
                  let k = m.doc.resolveNoCache(x.start - m.from),
                    w = m.doc.resolveNoCache(x.endB - m.from),
                    _ = v.resolve(x.start),
                    S =
                      k.sameParent(w) &&
                      k.parent.inlineContent &&
                      _.end() >= x.endA;
                  if (
                    ((I &&
                      e.input.lastIOSEnter > Date.now() - 225 &&
                      (!S ||
                        o.some(
                          (e) => "DIV" == e.nodeName || "P" == e.nodeName,
                        ))) ||
                      (!S &&
                        k.pos < m.doc.content.size &&
                        (!k.sameParent(w) || !k.parent.inlineContent) &&
                        !/\S/.test(m.doc.textBetween(k.pos, w.pos, "", "")) &&
                        (c = r.LN.findFrom(m.doc.resolve(k.pos + 1), 1, !0)) &&
                        c.head > k.pos)) &&
                    e.someProp("handleKeyDown", (t) => t(e, y(13, "Enter")))
                  ) {
                    e.input.lastIOSEnter = 0;
                    return;
                  }
                  if (
                    e.state.selection.anchor > x.start &&
                    (function (e, t, n, r, i) {
                      if (n - t <= i.pos - r.pos || tz(r, !0, !1) < i.pos)
                        return !1;
                      let s = e.resolve(t);
                      if (!r.parent.isTextblock) {
                        let e = s.nodeAfter;
                        return null != e && n == t + e.nodeSize;
                      }
                      if (
                        s.parentOffset < s.parent.content.size ||
                        !s.parent.isTextblock
                      )
                        return !1;
                      let o = e.resolve(tz(s, !0, !0));
                      return (
                        !(
                          !o.parent.isTextblock ||
                          o.pos > n ||
                          tz(o, !0, !1) < n
                        ) &&
                        r.parent.content
                          .cut(r.parentOffset)
                          .eq(o.parent.content)
                      );
                    })(v, x.start, x.endA, k, w) &&
                    e.someProp("handleKeyDown", (t) => t(e, y(8, "Backspace")))
                  ) {
                    R && C && e.domObserver.suppressSelectionUpdates();
                    return;
                  }
                  C &&
                    x.endB == x.start &&
                    (e.input.lastChromeDelete = Date.now()),
                    R &&
                      !S &&
                      k.start() != w.start() &&
                      0 == w.parentOffset &&
                      k.depth == w.depth &&
                      m.sel &&
                      m.sel.anchor == m.sel.head &&
                      m.sel.head == x.endA &&
                      ((x.endB -= 2),
                      (w = m.doc.resolveNoCache(x.endB - m.from)),
                      setTimeout(() => {
                        e.someProp("handleKeyDown", function (t) {
                          return t(e, y(13, "Enter"));
                        });
                      }, 20));
                  let E = x.start,
                    A = x.endA,
                    N = (t) => {
                      let n =
                        t ||
                        e.state.tr.replace(
                          E,
                          A,
                          m.doc.slice(x.start - m.from, x.endB - m.from),
                        );
                      if (m.sel) {
                        let t = tB(e, n.doc, m.sel);
                        t &&
                          !(
                            (C &&
                              e.composing &&
                              t.empty &&
                              (x.start != x.endB ||
                                e.input.lastChromeDelete < Date.now() - 100) &&
                              (t.head == E ||
                                t.head == n.mapping.map(A) - 1)) ||
                            (O && t.empty && t.head == E)
                          ) &&
                          n.setSelection(t);
                      }
                      return (
                        d && n.setMeta("composition", d), n.scrollIntoView()
                      );
                    };
                  if (S) {
                    if (k.pos == w.pos) {
                      O &&
                        T <= 11 &&
                        0 == k.parentOffset &&
                        (e.domObserver.suppressSelectionUpdates(),
                        setTimeout(() => ek(e), 20));
                      let t = N(e.state.tr.delete(E, A)),
                        n = v.resolve(x.start).marksAcross(v.resolve(x.endA));
                      n && t.ensureMarks(n), e.dispatch(t);
                    } else if (
                      x.endA == x.endB &&
                      (u = (function (e, t) {
                        let n = e.firstChild.marks,
                          r = t.firstChild.marks,
                          s = n,
                          o = r,
                          a,
                          l,
                          c;
                        for (let e = 0; e < r.length; e++)
                          s = r[e].removeFromSet(s);
                        for (let e = 0; e < n.length; e++)
                          o = n[e].removeFromSet(o);
                        if (1 == s.length && 0 == o.length)
                          (l = s[0]),
                            (a = "add"),
                            (c = (e) => e.mark(l.addToSet(e.marks)));
                        else {
                          if (0 != s.length || 1 != o.length) return null;
                          (l = o[0]),
                            (a = "remove"),
                            (c = (e) => e.mark(l.removeFromSet(e.marks)));
                        }
                        let u = [];
                        for (let e = 0; e < t.childCount; e++)
                          u.push(c(t.child(e)));
                        if (i.FK.from(u).eq(e)) return { mark: l, type: a };
                      })(
                        k.parent.content.cut(k.parentOffset, w.parentOffset),
                        _.parent.content.cut(
                          _.parentOffset,
                          x.endA - _.start(),
                        ),
                      ))
                    ) {
                      let t = N(e.state.tr);
                      "add" == u.type
                        ? t.addMark(E, A, u.mark)
                        : t.removeMark(E, A, u.mark),
                        e.dispatch(t);
                    } else if (
                      k.parent.child(k.index()).isText &&
                      k.index() == w.index() - +!w.textOffset
                    ) {
                      let t = k.parent.textBetween(
                          k.parentOffset,
                          w.parentOffset,
                        ),
                        n = () => N(e.state.tr.insertText(t, E, A));
                      e.someProp("handleTextInput", (r) => r(e, E, A, t, n)) ||
                        e.dispatch(n());
                    }
                  } else e.dispatch(N());
                })(this, e, t, n, s),
              )),
              this.domObserver.start(),
              (function (e) {
                for (let t in eJ) {
                  let n = eJ[t];
                  e.dom.addEventListener(
                    t,
                    (e.input.eventHandlers[t] = (t) => {
                      !(function (e, t) {
                        if (!t.bubbles) return !0;
                        if (t.defaultPrevented) return !1;
                        for (let n = t.target; n != e.dom; n = n.parentNode)
                          if (
                            !n ||
                            11 == n.nodeType ||
                            (n.pmViewDesc && n.pmViewDesc.stopEvent(t))
                          )
                            return !1;
                        return !0;
                      })(e, t) ||
                        e4(e, t) ||
                        (!e.editable && t.type in e0) ||
                        n(e, t);
                    }),
                    e1[t] ? { passive: !0 } : void 0,
                  );
                }
                N && e.dom.addEventListener("input", () => null), e3(e);
              })(this),
              this.updatePluginViews();
          }
          get composing() {
            return this.input.composing;
          }
          get props() {
            if (this._props.state != this.state) {
              let e = this._props;
              for (let t in ((this._props = {}), e)) this._props[t] = e[t];
              this._props.state = this.state;
            }
            return this._props;
          }
          update(e) {
            e.handleDOMEvents != this._props.handleDOMEvents && e3(this);
            let t = this._props;
            (this._props = e),
              e.plugins &&
                (e.plugins.forEach(tW), (this.directPlugins = e.plugins)),
              this.updateStateInner(e.state, t);
          }
          setProps(e) {
            let t = {};
            for (let e in this._props) t[e] = this._props[e];
            for (let n in ((t.state = this.state), e)) t[n] = e[n];
            this.update(t);
          }
          updateState(e) {
            this.updateStateInner(e, this._props);
          }
          updateStateInner(e, t) {
            var n, r, i;
            let s = this.state,
              a = !1,
              l = !1;
            e.storedMarks && this.composing && (ti(this), (l = !0)),
              (this.state = e);
            let c = s.plugins != e.plugins || this._props.plugins != t.plugins;
            if (
              c ||
              this._props.plugins != t.plugins ||
              this._props.nodeViews != t.nodeViews
            ) {
              let e = tV(this);
              (function (e, t) {
                let n = 0,
                  r = 0;
                for (let r in e) {
                  if (e[r] != t[r]) return !0;
                  n++;
                }
                for (let e in t) r++;
                return n != r;
              })(e, this.nodeViews) && ((this.nodeViews = e), (a = !0));
            }
            (c || t.handleDOMEvents != this._props.handleDOMEvents) && e3(this),
              (this.editable = tQ(this)),
              tH(this);
            let u = tA(this),
              h = tU(this),
              p =
                s.plugins == e.plugins || s.doc.eq(e.doc)
                  ? e.scrollToSelection > s.scrollToSelection
                    ? "to selection"
                    : "preserve"
                  : "reset",
              g = a || !this.docView.matchesNode(e.doc, h, u);
            (g || !e.selection.eq(s.selection)) && (l = !0);
            let y =
              "preserve" == p &&
              l &&
              null == this.dom.style.overflowAnchor &&
              (function (e) {
                let t,
                  n,
                  r = e.dom.getBoundingClientRect(),
                  i = Math.max(0, r.top);
                for (
                  let s = (r.left + r.right) / 2, o = i + 1;
                  o < Math.min(innerHeight, r.bottom);
                  o += 5
                ) {
                  let r = e.root.elementFromPoint(s, o);
                  if (!r || r == e.dom || !e.dom.contains(r)) continue;
                  let a = r.getBoundingClientRect();
                  if (a.top >= i - 20) {
                    (t = r), (n = a.top);
                    break;
                  }
                }
                return { refDOM: t, refTop: n, stack: B(e.dom) };
              })(this);
            if (l) {
              let t, n, l;
              this.domObserver.stop();
              let c =
                g &&
                (O || C) &&
                !this.composing &&
                !s.selection.empty &&
                !e.selection.empty &&
                ((r = s.selection),
                (i = e.selection),
                (l = Math.min(
                  r.$anchor.sharedDepth(r.head),
                  i.$anchor.sharedDepth(i.head),
                )),
                r.$anchor.start(l) != i.$anchor.start(l));
              if (g) {
                let t = C
                  ? (this.trackWrites = this.domSelectionRange().focusNode)
                  : null;
                this.composing &&
                  (this.input.compositionNode = (function (e) {
                    let t = e.domSelectionRange();
                    if (!t.focusNode) return null;
                    let n = (function (e, t) {
                        for (;;) {
                          if (3 == e.nodeType && t) return e;
                          if (1 == e.nodeType && t > 0) {
                            if ("false" == e.contentEditable) return null;
                            t = f((e = e.childNodes[t - 1]));
                          } else {
                            if (!e.parentNode || m(e)) return null;
                            (t = o(e)), (e = e.parentNode);
                          }
                        }
                      })(t.focusNode, t.focusOffset),
                      r = (function (e, t) {
                        for (;;) {
                          if (3 == e.nodeType && t < e.nodeValue.length)
                            return e;
                          if (1 == e.nodeType && t < e.childNodes.length) {
                            if ("false" == e.contentEditable) return null;
                            (e = e.childNodes[t]), (t = 0);
                          } else {
                            if (!e.parentNode || m(e)) return null;
                            (t = o(e) + 1), (e = e.parentNode);
                          }
                        }
                      })(t.focusNode, t.focusOffset);
                    if (n && r && n != r) {
                      let t = r.pmViewDesc,
                        i = e.domObserver.lastChangedTextNode;
                      if (n == i || r == i) return i;
                      if (!t || !t.isText(r.nodeValue)) return r;
                      if (e.input.compositionNode == r) {
                        let e = n.pmViewDesc;
                        if (!(!e || !e.isText(n.nodeValue))) return r;
                      }
                    }
                    return n || r;
                  })(this)),
                  (a || !this.docView.update(e.doc, h, u, this)) &&
                    (this.docView.updateOuterDeco(h),
                    this.docView.destroy(),
                    (this.docView = es(e.doc, h, u, this.dom, this))),
                  t && !this.trackWrites && (c = !0);
              }
              c ||
              !(
                this.input.mouseDown &&
                this.domObserver.currentSelection.eq(
                  this.domSelectionRange(),
                ) &&
                ((t = this.docView.domFromPos(this.state.selection.anchor, 0)),
                (n = this.domSelectionRange()),
                d(t.node, t.offset, n.anchorNode, n.anchorOffset))
              )
                ? ek(this, c)
                : (eS(this, e.selection), this.domObserver.setCurSelection()),
                this.domObserver.start();
            }
            this.updatePluginViews(s),
              (null == (n = this.dragging) ? void 0 : n.node) &&
                !s.doc.eq(e.doc) &&
                this.updateDraggedNode(this.dragging, s),
              "reset" == p
                ? (this.dom.scrollTop = 0)
                : "to selection" == p
                  ? this.scrollToSelection()
                  : y &&
                    (function ({ refDOM: e, refTop: t, stack: n }) {
                      let r = e ? e.getBoundingClientRect().top : 0;
                      z(n, 0 == r ? 0 : r - t);
                    })(y);
          }
          scrollToSelection() {
            let e = this.domSelectionRange().focusNode;
            if (e && this.dom.contains(1 == e.nodeType ? e : e.parentNode))
              if (this.someProp("handleScrollToSelection", (e) => e(this)));
              else if (this.state.selection instanceof r.nh) {
                let t = this.docView.domAfterPos(this.state.selection.from);
                1 == t.nodeType && F(this, t.getBoundingClientRect(), e);
              } else F(this, this.coordsAtPos(this.state.selection.head, 1), e);
          }
          destroyPluginViews() {
            let e;
            for (; (e = this.pluginViews.pop()); ) e.destroy && e.destroy();
          }
          updatePluginViews(e) {
            if (
              e &&
              e.plugins == this.state.plugins &&
              this.directPlugins == this.prevDirectPlugins
            )
              for (let t = 0; t < this.pluginViews.length; t++) {
                let n = this.pluginViews[t];
                n.update && n.update(this, e);
              }
            else {
              (this.prevDirectPlugins = this.directPlugins),
                this.destroyPluginViews();
              for (let e = 0; e < this.directPlugins.length; e++) {
                let t = this.directPlugins[e];
                t.spec.view && this.pluginViews.push(t.spec.view(this));
              }
              for (let e = 0; e < this.state.plugins.length; e++) {
                let t = this.state.plugins[e];
                t.spec.view && this.pluginViews.push(t.spec.view(this));
              }
            }
          }
          updateDraggedNode(e, t) {
            let n = e.node,
              i = -1;
            if (this.state.doc.nodeAt(n.from) == n.node) i = n.from;
            else {
              let e =
                n.from + (this.state.doc.content.size - t.doc.content.size);
              (e > 0 && this.state.doc.nodeAt(e)) == n.node && (i = e);
            }
            this.dragging = new tc(
              e.slice,
              e.move,
              i < 0 ? void 0 : r.nh.create(this.state.doc, i),
            );
          }
          someProp(e, t) {
            let n = this._props && this._props[e],
              r;
            if (null != n && (r = t ? t(n) : n)) return r;
            for (let n = 0; n < this.directPlugins.length; n++) {
              let i = this.directPlugins[n].props[e];
              if (null != i && (r = t ? t(i) : i)) return r;
            }
            let i = this.state.plugins;
            if (i)
              for (let n = 0; n < i.length; n++) {
                let s = i[n].props[e];
                if (null != s && (r = t ? t(s) : s)) return r;
              }
          }
          hasFocus() {
            if (O) {
              let e = this.root.activeElement;
              if (e == this.dom) return !0;
              if (!e || !this.dom.contains(e)) return !1;
              for (; e && this.dom != e && this.dom.contains(e); ) {
                if ("false" == e.contentEditable) return !1;
                e = e.parentElement;
              }
              return !0;
            }
            return this.root.activeElement == this.dom;
          }
          focus() {
            this.domObserver.stop(),
              this.editable &&
                (function (e) {
                  if (e.setActive) return e.setActive();
                  if ($) return e.focus($);
                  let t = B(e);
                  e.focus(
                    null == $
                      ? {
                          get preventScroll() {
                            return ($ = { preventScroll: !0 }), !0;
                          },
                        }
                      : void 0,
                  ),
                    $ || (($ = !1), z(t, 0));
                })(this.dom),
              ek(this),
              this.domObserver.start();
          }
          get root() {
            let e = this._root;
            if (null == e) {
              for (let e = this.dom.parentNode; e; e = e.parentNode)
                if (9 == e.nodeType || (11 == e.nodeType && e.host))
                  return (
                    e.getSelection ||
                      (Object.getPrototypeOf(e).getSelection = () =>
                        e.ownerDocument.getSelection()),
                    (this._root = e)
                  );
            }
            return e || document;
          }
          updateRoot() {
            this._root = null;
          }
          posAtCoords(e) {
            return (function (e, t) {
              var n;
              let r,
                i,
                s = e.dom.ownerDocument,
                o,
                l = 0,
                u = (function (e, t, n) {
                  if (e.caretPositionFromPoint)
                    try {
                      let r = e.caretPositionFromPoint(t, n);
                      if (r)
                        return {
                          node: r.offsetNode,
                          offset: Math.min(f(r.offsetNode), r.offset),
                        };
                    } catch (e) {}
                  if (e.caretRangeFromPoint) {
                    let r = e.caretRangeFromPoint(t, n);
                    if (r)
                      return {
                        node: r.startContainer,
                        offset: Math.min(f(r.startContainer), r.startOffset),
                      };
                  }
                })(s, t.left, t.top);
              u && ({ node: o, offset: l } = u);
              let d = (e.root.elementFromPoint ? e.root : s).elementFromPoint(
                t.left,
                t.top,
              );
              if (!d || !e.dom.contains(1 != d.nodeType ? d.parentNode : d)) {
                let n = e.dom.getBoundingClientRect();
                if (
                  !q(t, n) ||
                  !(d = (function e(t, n, r) {
                    let i = t.childNodes.length;
                    if (i && r.top < r.bottom)
                      for (
                        let s = Math.max(
                            0,
                            Math.min(
                              i - 1,
                              Math.floor(
                                (i * (n.top - r.top)) / (r.bottom - r.top),
                              ) - 2,
                            ),
                          ),
                          o = s;
                        ;

                      ) {
                        let r = t.childNodes[o];
                        if (1 == r.nodeType) {
                          let t = r.getClientRects();
                          for (let i = 0; i < t.length; i++) {
                            let s = t[i];
                            if (q(n, s)) return e(r, n, s);
                          }
                        }
                        if ((o = (o + 1) % i) == s) break;
                      }
                    return t;
                  })(e.dom, t, n))
                )
                  return null;
              }
              if (N)
                for (let e = d; o && e; e = a(e)) e.draggable && (o = void 0);
              if (
                ((d =
                  (r = (n = d).parentNode) &&
                  /^li$/i.test(r.nodeName) &&
                  t.left < n.getBoundingClientRect().left
                    ? r
                    : n),
                o)
              ) {
                let n;
                if (
                  S &&
                  1 == o.nodeType &&
                  (l = Math.min(l, o.childNodes.length)) < o.childNodes.length
                ) {
                  let e = o.childNodes[l],
                    n;
                  "IMG" == e.nodeName &&
                    (n = e.getBoundingClientRect()).right <= t.left &&
                    n.bottom > t.top &&
                    l++;
                }
                M &&
                  l &&
                  1 == o.nodeType &&
                  1 == (n = o.childNodes[l - 1]).nodeType &&
                  "false" == n.contentEditable &&
                  n.getBoundingClientRect().top >= t.top &&
                  l--,
                  o == e.dom &&
                  l == o.childNodes.length - 1 &&
                  1 == o.lastChild.nodeType &&
                  t.top > o.lastChild.getBoundingClientRect().bottom
                    ? (i = e.state.doc.content.size)
                    : (0 == l ||
                        1 != o.nodeType ||
                        "BR" != o.childNodes[l - 1].nodeName) &&
                      (i = (function (e, t, n, r) {
                        let i = -1;
                        for (let n = t, s = !1; n != e.dom; ) {
                          let t = e.docView.nearestDesc(n, !0),
                            o;
                          if (!t) return null;
                          if (
                            1 == t.dom.nodeType &&
                            ((t.node.isBlock && t.parent) || !t.contentDOM) &&
                            ((o = t.dom.getBoundingClientRect()).width ||
                              o.height) &&
                            (t.node.isBlock &&
                              t.parent &&
                              ((!s && o.left > r.left) || o.top > r.top
                                ? (i = t.posBefore)
                                : ((!s && o.right < r.left) ||
                                    o.bottom < r.top) &&
                                  (i = t.posAfter),
                              (s = !0)),
                            !t.contentDOM && i < 0 && !t.node.isText)
                          )
                            return (
                              t.node.isBlock
                                ? r.top < (o.top + o.bottom) / 2
                                : r.left < (o.left + o.right) / 2
                            )
                              ? t.posBefore
                              : t.posAfter;
                          n = t.dom.parentNode;
                        }
                        return i > -1 ? i : e.docView.posFromDOM(t, n, -1);
                      })(e, o, l, t));
              }
              null == i &&
                (i = (function (e, t, n) {
                  let { node: r, offset: i } = (function e(t, n) {
                      let r,
                        i,
                        s,
                        o = 2e8,
                        a,
                        l = 0,
                        u = n.top,
                        d = n.top;
                      for (
                        let e = t.firstChild, h = 0;
                        e;
                        e = e.nextSibling, h++
                      ) {
                        let t;
                        if (1 == e.nodeType) t = e.getClientRects();
                        else {
                          if (3 != e.nodeType) continue;
                          t = c(e).getClientRects();
                        }
                        for (let c = 0; c < t.length; c++) {
                          let p = t[c];
                          if (p.top <= u && p.bottom >= d) {
                            (u = Math.max(p.bottom, u)),
                              (d = Math.min(p.top, d));
                            let t =
                              p.left > n.left
                                ? p.left - n.left
                                : p.right < n.left
                                  ? n.left - p.right
                                  : 0;
                            if (t < o) {
                              (s = e),
                                (o = t),
                                (a =
                                  t && 3 == s.nodeType
                                    ? {
                                        left:
                                          p.right < n.left ? p.right : p.left,
                                        top: n.top,
                                      }
                                    : n),
                                1 == e.nodeType &&
                                  t &&
                                  (l = h + +(n.left >= (p.left + p.right) / 2));
                              continue;
                            }
                          } else
                            p.top > n.top &&
                              !r &&
                              p.left <= n.left &&
                              p.right >= n.left &&
                              ((r = e),
                              (i = {
                                left: Math.max(
                                  p.left,
                                  Math.min(p.right, n.left),
                                ),
                                top: p.top,
                              }));
                          !s &&
                            ((n.left >= p.right && n.top >= p.top) ||
                              (n.left >= p.left && n.top >= p.bottom)) &&
                            (l = h + 1);
                        }
                      }
                      return (!s && r && ((s = r), (a = i), (o = 0)),
                      s && 3 == s.nodeType)
                        ? (function (e, t) {
                            let n = e.nodeValue.length,
                              r = document.createRange();
                            for (let i = 0; i < n; i++) {
                              r.setEnd(e, i + 1), r.setStart(e, i);
                              let n = H(r, 1);
                              if (n.top != n.bottom && q(t, n))
                                return {
                                  node: e,
                                  offset:
                                    i + +(t.left >= (n.left + n.right) / 2),
                                };
                            }
                            return { node: e, offset: 0 };
                          })(s, a)
                        : !s || (o && 1 == s.nodeType)
                          ? { node: t, offset: l }
                          : e(s, a);
                    })(t, n),
                    s = -1;
                  if (1 == r.nodeType && !r.firstChild) {
                    let e = r.getBoundingClientRect();
                    s =
                      e.left != e.right && n.left > (e.left + e.right) / 2
                        ? 1
                        : -1;
                  }
                  return e.docView.posFromDOM(r, i, s);
                })(e, d, t));
              let h = e.docView.nearestDesc(d, !0);
              return { pos: i, inside: h ? h.posAtStart - h.border : -1 };
            })(this, e);
          }
          coordsAtPos(e, t = 1) {
            return V(this, e, t);
          }
          domAtPos(e, t = 0) {
            return this.docView.domFromPos(e, t);
          }
          nodeDOM(e) {
            let t = this.docView.descAt(e);
            return t ? t.nodeDOM : null;
          }
          posAtDOM(e, t, n = -1) {
            let r = this.docView.posFromDOM(e, t, n);
            if (null == r)
              throw RangeError("DOM position not inside the editor");
            return r;
          }
          endOfTextblock(e, t) {
            return (function (e, t, n) {
              let r, i;
              return K == t && X == n
                ? J
                : ((K = t),
                  (X = n),
                  (J =
                    "up" == n || "down" == n
                      ? ((r = t.selection),
                        (i = "up" == n ? r.$from : r.$to),
                        G(e, t, () => {
                          let { node: t } = e.docView.domFromPos(
                            i.pos,
                            "up" == n ? -1 : 1,
                          );
                          for (;;) {
                            let n = e.docView.nearestDesc(t, !0);
                            if (!n) break;
                            if (n.node.isBlock) {
                              t = n.contentDOM || n.dom;
                              break;
                            }
                            t = n.dom.parentNode;
                          }
                          let r = V(e, i.pos, 1);
                          for (let e = t.firstChild; e; e = e.nextSibling) {
                            let t;
                            if (1 == e.nodeType) t = e.getClientRects();
                            else {
                              if (3 != e.nodeType) continue;
                              t = c(e, 0, e.nodeValue.length).getClientRects();
                            }
                            for (let e = 0; e < t.length; e++) {
                              let i = t[e];
                              if (
                                i.bottom > i.top + 1 &&
                                ("up" == n
                                  ? r.top - i.top > (i.bottom - r.top) * 2
                                  : i.bottom - r.bottom >
                                    (r.bottom - i.top) * 2)
                              )
                                return !1;
                            }
                          }
                          return !0;
                        }))
                      : (function (e, t, n) {
                          let { $head: r } = t.selection;
                          if (!r.parent.isTextblock) return !1;
                          let i = r.parentOffset,
                            s = i == r.parent.content.size,
                            o = e.domSelection();
                          return o
                            ? Y.test(r.parent.textContent) && o.modify
                              ? G(e, t, () => {
                                  let {
                                      focusNode: t,
                                      focusOffset: i,
                                      anchorNode: s,
                                      anchorOffset: a,
                                    } = e.domSelectionRange(),
                                    l = o.caretBidiLevel;
                                  o.modify("move", n, "character");
                                  let c = r.depth
                                      ? e.docView.domAfterPos(r.before())
                                      : e.dom,
                                    { focusNode: u, focusOffset: d } =
                                      e.domSelectionRange(),
                                    h =
                                      (u &&
                                        !c.contains(
                                          1 == u.nodeType ? u : u.parentNode,
                                        )) ||
                                      (t == u && i == d);
                                  try {
                                    o.collapse(s, a),
                                      t &&
                                        (t != s || i != a) &&
                                        o.extend &&
                                        o.extend(t, i);
                                  } catch (e) {}
                                  return null != l && (o.caretBidiLevel = l), h;
                                })
                              : "left" == n || "backward" == n
                                ? !i
                                : s
                            : r.pos == r.start() || r.pos == r.end();
                        })(e, t, n)));
            })(this, t || this.state, e);
          }
          pasteHTML(e, t) {
            return ta(this, "", e, !1, t || new ClipboardEvent("paste"));
          }
          pasteText(e, t) {
            return ta(this, e, null, !0, t || new ClipboardEvent("paste"));
          }
          serializeForClipboard(e) {
            return eU(this, e);
          }
          destroy() {
            if (this.docView) {
              for (let e in (this.domObserver.stop(), this.input.eventHandlers))
                this.dom.removeEventListener(e, this.input.eventHandlers[e]);
              clearTimeout(this.input.composingTimeout),
                clearTimeout(this.input.lastIOSEnterFallbackTimeout),
                this.destroyPluginViews(),
                this.mounted
                  ? (this.docView.update(this.state.doc, [], tA(this), this),
                    (this.dom.textContent = ""))
                  : this.dom.parentNode &&
                    this.dom.parentNode.removeChild(this.dom),
                this.docView.destroy(),
                (this.docView = null),
                u();
            }
          }
          get isDestroyed() {
            return null == this.docView;
          }
          dispatchEvent(e) {
            !e4(this, e) &&
              eJ[e.type] &&
              (this.editable || !(e.type in e0)) &&
              eJ[e.type](this, e);
          }
          domSelectionRange() {
            let e = this.domSelection();
            return e
              ? (N &&
                  11 === this.root.nodeType &&
                  (function (e) {
                    let t = e.activeElement;
                    for (; t && t.shadowRoot; ) t = t.shadowRoot.activeElement;
                    return t;
                  })(this.dom.ownerDocument) == this.dom &&
                  (function (e, t) {
                    let n;
                    if (t.getComposedRanges) {
                      let n = t.getComposedRanges(e.root)[0];
                      if (n) return tL(e, n);
                    }
                    function r(e) {
                      e.preventDefault(),
                        e.stopImmediatePropagation(),
                        (n = e.getTargetRanges()[0]);
                    }
                    return (
                      e.dom.addEventListener("beforeinput", r, !0),
                      document.execCommand("indent"),
                      e.dom.removeEventListener("beforeinput", r, !0),
                      n ? tL(e, n) : null
                    );
                  })(this, e)) ||
                  e
              : {
                  focusNode: null,
                  focusOffset: 0,
                  anchorNode: null,
                  anchorOffset: 0,
                };
          }
          domSelection() {
            return this.root.getSelection();
          }
        }
        function tU(e) {
          let t = Object.create(null);
          return (
            (t.class = "ProseMirror"),
            (t.contenteditable = String(e.editable)),
            e.someProp("attributes", (n) => {
              if (("function" == typeof n && (n = n(e.state)), n))
                for (let e in n)
                  "class" == e
                    ? (t.class += " " + n[e])
                    : "style" == e
                      ? (t.style = (t.style ? t.style + ";" : "") + n[e])
                      : t[e] ||
                        "contenteditable" == e ||
                        "nodeName" == e ||
                        (t[e] = String(n[e]));
            }),
            t.translate || (t.translate = "no"),
            [tg.node(0, e.state.doc.content.size, t)]
          );
        }
        function tH(e) {
          if (e.markCursor) {
            let t = document.createElement("img");
            (t.className = "ProseMirror-separator"),
              t.setAttribute("mark-placeholder", "true"),
              t.setAttribute("alt", ""),
              (e.cursorWrapper = {
                dom: t,
                deco: tg.widget(e.state.selection.from, t, {
                  raw: !0,
                  marks: e.markCursor,
                }),
              });
          } else e.cursorWrapper = null;
        }
        function tQ(e) {
          return !e.someProp("editable", (t) => !1 === t(e.state));
        }
        function tV(e) {
          let t = Object.create(null);
          function n(e) {
            for (let n in e)
              Object.prototype.hasOwnProperty.call(t, n) || (t[n] = e[n]);
          }
          return e.someProp("nodeViews", n), e.someProp("markViews", n), t;
        }
        function tW(e) {
          if (
            e.spec.state ||
            e.spec.filterTransaction ||
            e.spec.appendTransaction
          )
            throw RangeError(
              "Plugins passed directly to the view must not have a state component",
            );
        }
        tq.prototype.dispatch = function (e) {
          let t = this._props.dispatchTransaction;
          t ? t.call(this, e) : this.updateState(this.state.apply(e));
        };
      },
      76760: (e) => {
        "use strict";
        e.exports = require("node:path");
      },
      77001: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, {
              Tabs: () => l,
              TabsContent: () => d,
              TabsList: () => c,
              TabsTrigger: () => u,
            });
            var i = n(61268),
              s = n(28366);
            n(84205);
            var o = n(15942),
              a = e([o]);
            function l({ className: e, ...t }) {
              return (0, i.jsx)(s.bL, {
                "data-slot": "tabs",
                className: (0, o.cn)("flex flex-col gap-2", e),
                ...t,
              });
            }
            function c({ className: e, ...t }) {
              return (0, i.jsx)(s.B8, {
                "data-slot": "tabs-list",
                className: (0, o.cn)(
                  "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
                  e,
                ),
                ...t,
              });
            }
            function u({ className: e, ...t }) {
              return (0, i.jsx)(s.l9, {
                "data-slot": "tabs-trigger",
                className: (0, o.cn)(
                  "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
                  e,
                ),
                ...t,
              });
            }
            function d({ className: e, ...t }) {
              return (0, i.jsx)(s.UC, {
                "data-slot": "tabs-content",
                className: (0, o.cn)("flex-1 outline-none", e),
                ...t,
              });
            }
            (o = (a.then ? (await a)() : a)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      77030: (e) => {
        "use strict";
        e.exports = require("node:net");
      },
      77032: (e, t, n) => {
        Promise.resolve().then(n.t.bind(n, 11299, 23)),
          Promise.resolve().then(n.t.bind(n, 81119, 23)),
          Promise.resolve().then(n.t.bind(n, 68259, 23)),
          Promise.resolve().then(n.t.bind(n, 36914, 23)),
          Promise.resolve().then(n.t.bind(n, 15142, 23)),
          Promise.resolve().then(n.t.bind(n, 98554, 23)),
          Promise.resolve().then(n.t.bind(n, 88424, 23)),
          Promise.resolve().then(n.t.bind(n, 64834, 23));
      },
      77598: (e) => {
        "use strict";
        e.exports = require("node:crypto");
      },
      77749: (e, t) => {
        "use strict";
        var n, r;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getParsedType = t.ZodParsedType = t.objectUtil = t.util = void 0),
          (function (e) {
            (e.assertEqual = (e) => {}),
              (e.assertIs = function (e) {}),
              (e.assertNever = function (e) {
                throw Error();
              }),
              (e.arrayToEnum = (e) => {
                let t = {};
                for (let n of e) t[n] = n;
                return t;
              }),
              (e.getValidEnumValues = (t) => {
                let n = e
                    .objectKeys(t)
                    .filter((e) => "number" != typeof t[t[e]]),
                  r = {};
                for (let e of n) r[e] = t[e];
                return e.objectValues(r);
              }),
              (e.objectValues = (t) =>
                e.objectKeys(t).map(function (e) {
                  return t[e];
                })),
              (e.objectKeys =
                "function" == typeof Object.keys
                  ? (e) => Object.keys(e)
                  : (e) => {
                      let t = [];
                      for (let n in e)
                        Object.prototype.hasOwnProperty.call(e, n) && t.push(n);
                      return t;
                    }),
              (e.find = (e, t) => {
                for (let n of e) if (t(n)) return n;
              }),
              (e.isInteger =
                "function" == typeof Number.isInteger
                  ? (e) => Number.isInteger(e)
                  : (e) =>
                      "number" == typeof e &&
                      Number.isFinite(e) &&
                      Math.floor(e) === e),
              (e.joinValues = function (e, t = " | ") {
                return e
                  .map((e) => ("string" == typeof e ? `'${e}'` : e))
                  .join(t);
              }),
              (e.jsonStringifyReplacer = (e, t) =>
                "bigint" == typeof t ? t.toString() : t);
          })(n || (t.util = n = {})),
          ((r || (t.objectUtil = r = {})).mergeShapes = (e, t) => ({
            ...e,
            ...t,
          })),
          (t.ZodParsedType = n.arrayToEnum([
            "string",
            "nan",
            "number",
            "integer",
            "float",
            "boolean",
            "date",
            "bigint",
            "symbol",
            "function",
            "undefined",
            "null",
            "array",
            "object",
            "unknown",
            "promise",
            "void",
            "never",
            "map",
            "set",
          ])),
          (t.getParsedType = (e) => {
            switch (typeof e) {
              case "undefined":
                return t.ZodParsedType.undefined;
              case "string":
                return t.ZodParsedType.string;
              case "number":
                return Number.isNaN(e)
                  ? t.ZodParsedType.nan
                  : t.ZodParsedType.number;
              case "boolean":
                return t.ZodParsedType.boolean;
              case "function":
                return t.ZodParsedType.function;
              case "bigint":
                return t.ZodParsedType.bigint;
              case "symbol":
                return t.ZodParsedType.symbol;
              case "object":
                if (Array.isArray(e)) return t.ZodParsedType.array;
                if (null === e) return t.ZodParsedType.null;
                if (
                  e.then &&
                  "function" == typeof e.then &&
                  e.catch &&
                  "function" == typeof e.catch
                )
                  return t.ZodParsedType.promise;
                if ("undefined" != typeof Map && e instanceof Map)
                  return t.ZodParsedType.map;
                if ("undefined" != typeof Set && e instanceof Set)
                  return t.ZodParsedType.set;
                if ("undefined" != typeof Date && e instanceof Date)
                  return t.ZodParsedType.date;
                return t.ZodParsedType.object;
              default:
                return t.ZodParsedType.unknown;
            }
          });
      },
      79428: (e) => {
        "use strict";
        e.exports = require("buffer");
      },
      79551: (e) => {
        "use strict";
        e.exports = require("url");
      },
      79646: (e) => {
        "use strict";
        e.exports = require("child_process");
      },
      80481: (e) => {
        "use strict";
        e.exports = require("node:readline");
      },
      80618: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 });
        let r = n(70964),
          i = n(77749);
        t.default = (e, t) => {
          let n;
          switch (e.code) {
            case r.ZodIssueCode.invalid_type:
              n =
                e.received === i.ZodParsedType.undefined
                  ? "Required"
                  : `Expected ${e.expected}, received ${e.received}`;
              break;
            case r.ZodIssueCode.invalid_literal:
              n = `Invalid literal value, expected ${JSON.stringify(e.expected, i.util.jsonStringifyReplacer)}`;
              break;
            case r.ZodIssueCode.unrecognized_keys:
              n = `Unrecognized key(s) in object: ${i.util.joinValues(e.keys, ", ")}`;
              break;
            case r.ZodIssueCode.invalid_union:
              n = "Invalid input";
              break;
            case r.ZodIssueCode.invalid_union_discriminator:
              n = `Invalid discriminator value. Expected ${i.util.joinValues(e.options)}`;
              break;
            case r.ZodIssueCode.invalid_enum_value:
              n = `Invalid enum value. Expected ${i.util.joinValues(e.options)}, received '${e.received}'`;
              break;
            case r.ZodIssueCode.invalid_arguments:
              n = "Invalid function arguments";
              break;
            case r.ZodIssueCode.invalid_return_type:
              n = "Invalid function return type";
              break;
            case r.ZodIssueCode.invalid_date:
              n = "Invalid date";
              break;
            case r.ZodIssueCode.invalid_string:
              "object" == typeof e.validation
                ? "includes" in e.validation
                  ? ((n = `Invalid input: must include "${e.validation.includes}"`),
                    "number" == typeof e.validation.position &&
                      (n = `${n} at one or more positions greater than or equal to ${e.validation.position}`))
                  : "startsWith" in e.validation
                    ? (n = `Invalid input: must start with "${e.validation.startsWith}"`)
                    : "endsWith" in e.validation
                      ? (n = `Invalid input: must end with "${e.validation.endsWith}"`)
                      : i.util.assertNever(e.validation)
                : (n =
                    "regex" !== e.validation
                      ? `Invalid ${e.validation}`
                      : "Invalid");
              break;
            case r.ZodIssueCode.too_small:
              n =
                "array" === e.type
                  ? `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "more than"} ${e.minimum} element(s)`
                  : "string" === e.type
                    ? `String must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "over"} ${e.minimum} character(s)`
                    : "number" === e.type || "bigint" === e.type
                      ? `Number must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${e.minimum}`
                      : "date" === e.type
                        ? `Date must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(e.minimum))}`
                        : "Invalid input";
              break;
            case r.ZodIssueCode.too_big:
              n =
                "array" === e.type
                  ? `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "less than"} ${e.maximum} element(s)`
                  : "string" === e.type
                    ? `String must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "under"} ${e.maximum} character(s)`
                    : "number" === e.type
                      ? `Number must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}`
                      : "bigint" === e.type
                        ? `BigInt must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}`
                        : "date" === e.type
                          ? `Date must be ${e.exact ? "exactly" : e.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(e.maximum))}`
                          : "Invalid input";
              break;
            case r.ZodIssueCode.custom:
              n = "Invalid input";
              break;
            case r.ZodIssueCode.invalid_intersection_types:
              n = "Intersection results could not be merged";
              break;
            case r.ZodIssueCode.not_multiple_of:
              n = `Number must be a multiple of ${e.multipleOf}`;
              break;
            case r.ZodIssueCode.not_finite:
              n = "Number must be finite";
              break;
            default:
              (n = t.defaultError), i.util.assertNever(e);
          }
          return { message: n };
        };
      },
      80629: (e, t, n) => {
        "use strict";
        n.d(t, { zM: () => a });
        var r = n(92858),
          i = n(43758);
        class s extends i.pe {
          static [r.i] = "PgBooleanBuilder";
          constructor(e) {
            super(e, "boolean", "PgBoolean");
          }
          build(e) {
            return new o(e, this.config);
          }
        }
        class o extends i.Kl {
          static [r.i] = "PgBoolean";
          getSQLType() {
            return "boolean";
          }
        }
        function a(e) {
          return new s(e ?? "");
        }
      },
      81630: (e) => {
        "use strict";
        e.exports = require("http");
      },
      82311: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { g: () => h });
            var i = n(61268),
              s = n(84205),
              o = n(28909),
              a = n(93336),
              l = n(69127),
              c = n(15942),
              u = n(12253),
              d = e([o, a, c]);
            [o, a, c] = d.then ? (await d)() : d;
            let p = [
              {
                id: "private",
                label: "Private",
                description: "Only you can access this chat",
                icon: (0, i.jsx)(u.XA, {}),
              },
              {
                id: "public",
                label: "Public",
                description: "Anyone with the link can access this chat",
                icon: (0, i.jsx)(u.fC, {}),
              },
            ];
            function h({ chatId: e, className: t, visibility: n }) {
              let [r, d] = (0, s.useState)(!1),
                { visibilityType: h, setVisibilityType: f } = (0, l.I)({
                  chatId: e,
                  initialVisibility: n,
                }),
                m = (0, s.useMemo)(() => p.find((e) => e.id === h), [h]);
              return (0, i.jsxs)(a.rI, {
                open: r,
                onOpenChange: d,
                children: [
                  (0, i.jsx)(a.ty, {
                    asChild: !0,
                    className: (0, c.cn)(
                      "w-fit data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
                      t,
                    ),
                    children: (0, i.jsxs)(o.$, {
                      variant: "outline",
                      className: "hidden md:flex md:px-2 md:h-[34px]",
                      children: [m?.icon, m?.label, (0, i.jsx)(u.D3, {})],
                    }),
                  }),
                  (0, i.jsx)(a.SQ, {
                    align: "start",
                    className: "min-w-[300px]",
                    children: p.map((e) =>
                      (0, i.jsxs)(
                        a._2,
                        {
                          onSelect: () => {
                            f(e.id), d(!1);
                          },
                          className:
                            "gap-4 group/item flex flex-row justify-between items-center",
                          "data-active": e.id === h,
                          children: [
                            (0, i.jsxs)("div", {
                              className: "flex flex-col gap-1 items-start",
                              children: [
                                e.label,
                                e.description &&
                                  (0, i.jsx)("div", {
                                    className: "text-xs text-muted-foreground",
                                    children: e.description,
                                  }),
                              ],
                            }),
                            (0, i.jsx)("div", {
                              className:
                                "text-foreground dark:text-foreground opacity-0 group-data-[active=true]/item:opacity-100",
                              children: (0, i.jsx)(u.PW, {}),
                            }),
                          ],
                        },
                        e.id,
                      ),
                    ),
                  }),
                ],
              });
            }
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      82523: (e, t, n) => {
        "use strict";
        n.d(t, { lR: () => tW });
        var r,
          i,
          s,
          o,
          a,
          l,
          c,
          u = {};
        n.r(u),
          n.d(u, {
            decode: () => y,
            encode: () => x,
            format: () => k,
            parse: () => D,
          });
        var d = {};
        n.r(d),
          n.d(d, {
            Any: () => M,
            Cc: () => L,
            Cf: () => j,
            P: () => P,
            S: () => R,
            Z: () => F,
          });
        var h = {};
        n.r(h),
          n.d(h, {
            arrayReplaceAt: () => ee,
            assign: () => J,
            escapeHtml: () => eh,
            escapeRE: () => ef,
            fromCodePoint: () => en,
            has: () => X,
            isMdAsciiPunct: () => ev,
            isPunctChar: () => ey,
            isSpace: () => em,
            isString: () => Y,
            isValidEntityCode: () => et,
            isWhiteSpace: () => eg,
            lib: () => ex,
            normalizeReference: () => eb,
            unescapeAll: () => ea,
            unescapeMd: () => eo,
          });
        var p = {};
        n.r(p),
          n.d(p, {
            parseLinkDestination: () => ew,
            parseLinkLabel: () => ek,
            parseLinkTitle: () => e_,
          });
        var f = n(14077);
        let m = {};
        function g(e, t) {
          "string" != typeof t && (t = g.defaultChars);
          let n = (function (e) {
            let t = m[e];
            if (t) return t;
            t = m[e] = [];
            for (let e = 0; e < 128; e++) {
              let n = String.fromCharCode(e);
              t.push(n);
            }
            for (let n = 0; n < e.length; n++) {
              let r = e.charCodeAt(n);
              t[r] = "%" + ("0" + r.toString(16).toUpperCase()).slice(-2);
            }
            return t;
          })(t);
          return e.replace(/(%[a-f0-9]{2})+/gi, function (e) {
            let t = "";
            for (let r = 0, i = e.length; r < i; r += 3) {
              let s = parseInt(e.slice(r + 1, r + 3), 16);
              if (s < 128) {
                t += n[s];
                continue;
              }
              if ((224 & s) == 192 && r + 3 < i) {
                let n = parseInt(e.slice(r + 4, r + 6), 16);
                if ((192 & n) == 128) {
                  let e = ((s << 6) & 1984) | (63 & n);
                  e < 128 ? (t += "��") : (t += String.fromCharCode(e)),
                    (r += 3);
                  continue;
                }
              }
              if ((240 & s) == 224 && r + 6 < i) {
                let n = parseInt(e.slice(r + 4, r + 6), 16),
                  i = parseInt(e.slice(r + 7, r + 9), 16);
                if ((192 & n) == 128 && (192 & i) == 128) {
                  let e = ((s << 12) & 61440) | ((n << 6) & 4032) | (63 & i);
                  e < 2048 || (e >= 55296 && e <= 57343)
                    ? (t += "���")
                    : (t += String.fromCharCode(e)),
                    (r += 6);
                  continue;
                }
              }
              if ((248 & s) == 240 && r + 9 < i) {
                let n = parseInt(e.slice(r + 4, r + 6), 16),
                  i = parseInt(e.slice(r + 7, r + 9), 16),
                  o = parseInt(e.slice(r + 10, r + 12), 16);
                if ((192 & n) == 128 && (192 & i) == 128 && (192 & o) == 128) {
                  let e =
                    ((s << 18) & 1835008) |
                    ((n << 12) & 258048) |
                    ((i << 6) & 4032) |
                    (63 & o);
                  e < 65536 || e > 1114111
                    ? (t += "����")
                    : ((e -= 65536),
                      (t += String.fromCharCode(
                        55296 + (e >> 10),
                        56320 + (1023 & e),
                      ))),
                    (r += 9);
                  continue;
                }
              }
              t += "�";
            }
            return t;
          });
        }
        (g.defaultChars = ";/?:@&=+$,#"), (g.componentChars = "");
        let y = g,
          v = {};
        function b(e, t, n) {
          "string" != typeof t && ((n = t), (t = b.defaultChars)),
            void 0 === n && (n = !0);
          let r = (function (e) {
              let t = v[e];
              if (t) return t;
              t = v[e] = [];
              for (let e = 0; e < 128; e++) {
                let n = String.fromCharCode(e);
                /^[0-9a-z]$/i.test(n)
                  ? t.push(n)
                  : t.push(
                      "%" + ("0" + e.toString(16).toUpperCase()).slice(-2),
                    );
              }
              for (let n = 0; n < e.length; n++) t[e.charCodeAt(n)] = e[n];
              return t;
            })(t),
            i = "";
          for (let t = 0, s = e.length; t < s; t++) {
            let o = e.charCodeAt(t);
            if (
              n &&
              37 === o &&
              t + 2 < s &&
              /^[0-9a-f]{2}$/i.test(e.slice(t + 1, t + 3))
            ) {
              (i += e.slice(t, t + 3)), (t += 2);
              continue;
            }
            if (o < 128) {
              i += r[o];
              continue;
            }
            if (o >= 55296 && o <= 57343) {
              if (o >= 55296 && o <= 56319 && t + 1 < s) {
                let n = e.charCodeAt(t + 1);
                if (n >= 56320 && n <= 57343) {
                  (i += encodeURIComponent(e[t] + e[t + 1])), t++;
                  continue;
                }
              }
              i += "%EF%BF%BD";
              continue;
            }
            i += encodeURIComponent(e[t]);
          }
          return i;
        }
        (b.defaultChars = ";/?:@&=+$,-_.!~*'()#"),
          (b.componentChars = "-_.!~*'()");
        let x = b;
        function k(e) {
          let t = "";
          return (
            (t += e.protocol || ""),
            (t += e.slashes ? "//" : ""),
            (t += e.auth ? e.auth + "@" : ""),
            e.hostname && -1 !== e.hostname.indexOf(":")
              ? (t += "[" + e.hostname + "]")
              : (t += e.hostname || ""),
            (t += e.port ? ":" + e.port : ""),
            (t += e.pathname || ""),
            (t += e.search || ""),
            (t += e.hash || "")
          );
        }
        function w() {
          (this.protocol = null),
            (this.slashes = null),
            (this.auth = null),
            (this.port = null),
            (this.hostname = null),
            (this.hash = null),
            (this.search = null),
            (this.pathname = null);
        }
        let _ = /^([a-z0-9.+-]+:)/i,
          O = /:[0-9]*$/,
          T = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
          S = ["%", "/", "?", ";", "#"].concat(
            ["'"].concat(
              ["{", "}", "|", "\\", "^", "`"].concat([
                "<",
                ">",
                '"',
                "`",
                " ",
                "\r",
                "\n",
                "	",
              ]),
            ),
          ),
          E = ["/", "?", "#"],
          C = /^[+a-z0-9A-Z_-]{0,63}$/,
          A = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
          N = { javascript: !0, "javascript:": !0 },
          I = {
            http: !0,
            https: !0,
            ftp: !0,
            gopher: !0,
            file: !0,
            "http:": !0,
            "https:": !0,
            "ftp:": !0,
            "gopher:": !0,
            "file:": !0,
          };
        (w.prototype.parse = function (e, t) {
          let n,
            r,
            i,
            s = e;
          if (((s = s.trim()), !t && 1 === e.split("#").length)) {
            let e = T.exec(s);
            if (e)
              return (this.pathname = e[1]), e[2] && (this.search = e[2]), this;
          }
          let o = _.exec(s);
          if (
            (o &&
              ((n = (o = o[0]).toLowerCase()),
              (this.protocol = o),
              (s = s.substr(o.length))),
            (t || o || s.match(/^\/\/[^@\/]+@[^@\/]+/)) &&
              (i = "//" === s.substr(0, 2)) &&
              !(o && N[o]) &&
              ((s = s.substr(2)), (this.slashes = !0)),
            !N[o] && (i || (o && !I[o])))
          ) {
            let e,
              t,
              n = -1;
            for (let e = 0; e < E.length; e++)
              -1 !== (r = s.indexOf(E[e])) && (-1 === n || r < n) && (n = r);
            -1 !==
              (t = -1 === n ? s.lastIndexOf("@") : s.lastIndexOf("@", n)) &&
              ((e = s.slice(0, t)), (s = s.slice(t + 1)), (this.auth = e)),
              (n = -1);
            for (let e = 0; e < S.length; e++)
              -1 !== (r = s.indexOf(S[e])) && (-1 === n || r < n) && (n = r);
            -1 === n && (n = s.length), ":" === s[n - 1] && n--;
            let i = s.slice(0, n);
            (s = s.slice(n)),
              this.parseHost(i),
              (this.hostname = this.hostname || "");
            let o =
              "[" === this.hostname[0] &&
              "]" === this.hostname[this.hostname.length - 1];
            if (!o) {
              let e = this.hostname.split(/\./);
              for (let t = 0, n = e.length; t < n; t++) {
                let n = e[t];
                if (n && !n.match(C)) {
                  let r = "";
                  for (let e = 0, t = n.length; e < t; e++)
                    n.charCodeAt(e) > 127 ? (r += "x") : (r += n[e]);
                  if (!r.match(C)) {
                    let r = e.slice(0, t),
                      i = e.slice(t + 1),
                      o = n.match(A);
                    o && (r.push(o[1]), i.unshift(o[2])),
                      i.length && (s = i.join(".") + s),
                      (this.hostname = r.join("."));
                    break;
                  }
                }
              }
            }
            this.hostname.length > 255 && (this.hostname = ""),
              o &&
                (this.hostname = this.hostname.substr(
                  1,
                  this.hostname.length - 2,
                ));
          }
          let a = s.indexOf("#");
          -1 !== a && ((this.hash = s.substr(a)), (s = s.slice(0, a)));
          let l = s.indexOf("?");
          return (
            -1 !== l && ((this.search = s.substr(l)), (s = s.slice(0, l))),
            s && (this.pathname = s),
            I[n] && this.hostname && !this.pathname && (this.pathname = ""),
            this
          );
        }),
          (w.prototype.parseHost = function (e) {
            let t = O.exec(e);
            t &&
              (":" !== (t = t[0]) && (this.port = t.substr(1)),
              (e = e.substr(0, e.length - t.length))),
              e && (this.hostname = e);
          });
        let D = function (e, t) {
            if (e && e instanceof w) return e;
            let n = new w();
            return n.parse(e, t), n;
          },
          P =
            /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/,
          R =
            /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/,
          M =
            /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,
          L = /[\0-\x1F\x7F-\x9F]/,
          j =
            /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/,
          F = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/,
          B = new Uint16Array(
            'ᵁ<\xd5ıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig耻\xc6䃆P耻&䀦cute耻\xc1䃁reve;䄂Āiyx}rc耻\xc2䃂;䐐r;쀀\ud835\udd04rave耻\xc0䃀pha;䎑acr;䄀d;橓Āgp\x9d\xa1on;䄄f;쀀\ud835\udd38plyFunction;恡ing耻\xc5䃅Ācs\xbe\xc3r;쀀\ud835\udc9cign;扔ilde耻\xc3䃃ml耻\xc4䃄Ѐaceforsu\xe5\xfb\xfeėĜĢħĪĀcr\xea\xf2kslash;或Ŷ\xf6\xf8;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀\ud835\udd05pf;쀀\ud835\udd39eve;䋘c\xf2ēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻\xa9䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻\xc7䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷\xf2ſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀\ud835\udc9epĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀\ud835\udd07Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀\ud835\udd3bƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegra\xecȹoɴ͹\0\0ͻ\xbb͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔e\xe5ˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀\ud835\udc9frok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻\xd0䃐cute耻\xc9䃉ƀaiyӒӗӜron;䄚rc耻\xca䃊;䐭ot;䄖r;쀀\ud835\udd08rave耻\xc8䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀\ud835\udd3csilon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻\xcb䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀\ud835\udd09lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀\ud835\udd3dAll;戀riertrf;愱c\xf2׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀\ud835\udd0a;拙pf;쀀\ud835\udd3eeater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀\ud835\udca2;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅ\xf2کrok;䄦mpńېۘownHum\xf0įqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻\xcd䃍Āiyܓܘrc耻\xce䃎;䐘ot;䄰r;愑rave耻\xcc䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lie\xf3ϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀\ud835\udd40a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻\xcf䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀\ud835\udd0dpf;쀀\ud835\udd41ǣ߇\0ߌr;쀀\ud835\udca5rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀\ud835\udd0epf;쀀\ud835\udd42cr;쀀\ud835\udca6րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ight\xe1Μs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀\ud835\udd0fĀ;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊight\xe1οight\xe1ϊf;쀀\ud835\udd43erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂ\xf2ࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀\ud835\udd10nusPlus;戓pf;쀀\ud835\udd44c\xf2੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘\xeb૙eryThi\xee૙tedĀGL૸ଆreaterGreate\xf2ٳessLes\xf3ੈLine;䀊r;쀀\ud835\udd11ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀\ud835\udca9ilde耻\xd1䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻\xd3䃓Āiy෎ීrc耻\xd4䃔;䐞blac;䅐r;쀀\ud835\udd12rave耻\xd2䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀\ud835\udd46enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀\ud835\udcaaash耻\xd8䃘iŬื฼de耻\xd5䃕es;樷ml耻\xd6䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀\ud835\udd13i;䎦;䎠usMinus;䂱Āipຢອncareplan\xe5ڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀\ud835\udcab;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀\ud835\udd14pf;愚cr;쀀\ud835\udcac؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻\xae䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r\xbbཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀\ud835\udd16ortȀDLRUᄪᄴᄾᅉownArrow\xbbОeftArrow\xbb࢚ightArrow\xbb࿝pArrow;憑gma;䎣allCircle;战pf;쀀\ud835\udd4aɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀\ud835\udcaear;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Th\xe1ྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et\xbbሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻\xde䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀\ud835\udd17Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀\ud835\udd4bipleDot;惛Āctዖዛr;쀀\ud835\udcafrok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻\xda䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻\xdb䃛;䐣blac;䅰r;쀀\ud835\udd18rave耻\xd9䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀\ud835\udd4cЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥own\xe1ϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀\ud835\udcb0ilde;䅨ml耻\xdc䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀\ud835\udd19pf;쀀\ud835\udd4dcr;쀀\ud835\udcb1dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀\ud835\udd1apf;쀀\ud835\udd4ecr;쀀\ud835\udcb2Ȁfiosᓋᓐᓒᓘr;쀀\ud835\udd1b;䎞pf;쀀\ud835\udd4fcr;쀀\ud835\udcb3ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻\xdd䃝Āiyᔉᔍrc;䅶;䐫r;쀀\ud835\udd1cpf;쀀\ud835\udd50cr;쀀\ud835\udcb4ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidt\xe8૙a;䎖r;愨pf;愤cr;쀀\ud835\udcb5௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻\xe1䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻\xe2䃢te肻\xb4̆;䐰lig耻\xe6䃦Ā;r\xb2ᖺ;쀀\ud835\udd1erave耻\xe0䃠ĀepᗊᗖĀfpᗏᗔsym;愵\xe8ᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e\xbbᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢\xbb\xb9arr;捼Āgpᙣᙧon;䄅f;쀀\ud835\udd52΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒ\xf1ᚃing耻\xe5䃥ƀctyᚡᚦᚨr;쀀\ud835\udcb6;䀪mpĀ;e዁ᚯ\xf1ʈilde耻\xe3䃣ml耻\xe4䃤Āciᛂᛈonin\xf4ɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e\xbbᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰s\xe9ᜌno\xf5ēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀\ud835\udd1fg΀costuvwឍឝឳេ៕៛៞ƀaiuបពរ\xf0ݠrc;旯p\xbb፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄e\xe5ᑄ\xe5ᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀\ud835\udd53Ā;tᏋᡣom\xbbᏌtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻\xa6䂦Ȁceioᥑᥖᥚᥠr;쀀\ud835\udcb7mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t\xbb᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁\xeeړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻\xe7䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻\xb8ƭptyv;榲t脀\xa2;eᨭᨮ䂢r\xe4Ʋr;쀀\ud835\udd20ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark\xbbᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟\xbbཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it\xbb᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;q\xc7\xc6ɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁\xeeᅠeĀmx᫱᫶ent\xbb᫩e\xf3ɍǧ᫾\0ᬇĀ;dኻᬂot;橭n\xf4Ɇƀfryᬐᬔᬗ;쀀\ud835\udd54o\xe4ɔ脀\xa9;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀\ud835\udcb8Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒre\xe3᭳u\xe3᭵ee;拎edge;拏en耻\xa4䂤earrowĀlrᯮ᯳eft\xbbᮀight\xbbᮽe\xe4ᯝĀciᰁᰇonin\xf4Ƿnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍r\xf2΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸\xf2ᄳhĀ;vᱚᱛ怐\xbbऊūᱡᱧarow;椏a\xe3̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻\xb0䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀\ud835\udd21arĀlrᲳᲵ\xbbࣜ\xbbသʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀\xf7;o᳧ᳰntimes;拇n\xf8᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀\ud835\udd55ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedg\xe5\xfanƀadhᄮᵝᵧownarrow\xf3ᲃarpoonĀlrᵲᵶef\xf4Ჴigh\xf4ᲶŢᵿᶅkaro\xf7གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀\ud835\udcb9;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃r\xf2Щa\xf2ྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴo\xf4ᲉĀcsḎḔute耻\xe9䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻\xea䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀\ud835\udd22ƀ;rsṐṑṗ檚ave耻\xe8䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et\xbbẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀\ud835\udd56ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on\xbbớ;䏵ȀcsuvỪỳἋἣĀioữḱrc\xbbḮɩỹ\0\0ỻ\xedՈantĀglἂἆtr\xbbṝess\xbbṺƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯o\xf4͒ĀahὉὋ;䎷耻\xf0䃰Āmrὓὗl耻\xeb䃫o;悬ƀcipὡὤὧl;䀡s\xf4ծĀeoὬὴctatio\xeeՙnential\xe5չৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotse\xf1Ṅy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀\ud835\udd23lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀\ud835\udd57ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻\xbd䂽;慓耻\xbc䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻\xbe䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀\ud835\udcbbࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lan\xf4٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀\ud835\udd24Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox\xbbℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀\ud835\udd58Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎pro\xf8₞r;楸qĀlqؿ↖les\xf3₈i\xed٫Āen↣↭rtneqq;쀀≩︀\xc5↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽r\xf2ΠȀilmr⇐⇔⇗⇛rs\xf0ᒄf\xbb․il\xf4کĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it\xbb∊lip;怦con;抹r;쀀\ud835\udd25sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀\ud835\udd59bar;怕ƀclt≯≴≸r;쀀\ud835\udcbdas\xe8⇴rok;䄧Ābp⊂⊇ull;恃hen\xbbᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻\xed䃭ƀ;iyݱ⊰⊵rc耻\xee䃮;䐸Ācx⊼⊿y;䐵cl耻\xa1䂡ĀfrΟ⋉;쀀\ud835\udd26rave耻\xec䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓in\xe5ގar\xf4ܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝do\xf4⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙er\xf3ᕣ\xe3⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀\ud835\udd5aa;䎹uest耻\xbf䂿Āci⎊⎏r;쀀\ud835\udcbenʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻\xef䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀\ud835\udd27ath;䈷pf;쀀\ud835\udd5bǣ⏬\0⏱r;쀀\ud835\udcbfrcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀\ud835\udd28reen;䄸cy;䑅cy;䑜pf;쀀\ud835\udd5ccr;쀀\ud835\udcc0஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼r\xf2৆\xf2Εail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴ra\xeeࡌbda;䎻gƀ;dlࢎⓁⓃ;榑\xe5ࢎ;檅uo耻\xab䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝\xeb≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼\xecࢰ\xe2┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□a\xe9⓶arpoonĀdu▯▴own\xbbњp\xbb०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoon\xf3྘quigarro\xf7⇰hreetimes;拋ƀ;qs▋ও◺lan\xf4বʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋ppro\xf8Ⓠot;拖qĀgq♃♅\xf4উgt\xf2⒌\xf4ছi\xedলƀilr♕࣡♚sht;楼;쀀\ud835\udd29Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖r\xf2◁orne\xf2ᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che\xbb⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox\xbb⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽r\xebࣁgƀlmr⛿✍✔eftĀar০✇ight\xe1৲apsto;柼ight\xe1৽parrowĀlr✥✩ef\xf4⓭ight;憬ƀafl✶✹✽r;榅;쀀\ud835\udd5dus;樭imes;樴š❋❏st;戗\xe1ፎƀ;ef❗❘᠀旊nge\xbb❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇r\xf2ࢨorne\xf2ᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀\ud835\udcc1mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹re\xe5◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀\xc5⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻\xaf䂯Āet⡗⡙;時Ā;e⡞⡟朠se\xbb⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻ow\xeeҌef\xf4ए\xf0Ꮡker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle\xbbᘦr;쀀\ud835\udd2ao;愧ƀcdn⢯⢴⣉ro耻\xb5䂵Ȁ;acdᑤ⢽⣀⣄s\xf4ᚧir;櫰ot肻\xb7Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛\xf2−\xf0ઁĀdp⣩⣮els;抧f;쀀\ud835\udd5eĀct⣸⣽r;쀀\ud835\udcc2pos\xbbᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la\xbb˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉ro\xf8඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻\xa0ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸ui\xf6ୣĀei⩊⩎ar;椨\xed஘istĀ;s஠டr;쀀\ud835\udd2bȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lan\xf4௢i\xed௪Ā;rஶ⪁\xbbஷƀAap⪊⪍⪑r\xf2⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹r\xf2⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro\xf7⫁ightarro\xf7⪐ƀ;qs఻⪺⫪lan\xf4ౕĀ;sౕ⫴\xbbశi\xedౝĀ;rవ⫾iĀ;eచథi\xe4ඐĀpt⬌⬑f;쀀\ud835\udd5f膀\xac;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lle\xec୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳u\xe5ಥĀ;cಘ⭸Ā;eಒ⭽\xf1ಘȀAait⮈⮋⮝⮧r\xf2⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow\xbb⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉u\xe5൅;쀀\ud835\udcc3ortɭ⬅\0\0⯖ar\xe1⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭\xe5೸\xe5ഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗ\xf1സȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇ\xecௗlde耻\xf1䃱\xe7ృiangleĀlrⱒⱜeftĀ;eచⱚ\xf1దightĀ;eೋⱥ\xf1೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻\xf3䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻\xf4䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀\ud835\udd2cͯ⵹\0\0⵼\0ⶂn;䋛ave耻\xf2䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨr\xf2᪀Āir⶝ⶠr;榾oss;榻n\xe5๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀\ud835\udd60ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨r\xf2᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f\xbbⷿ耻\xaa䂪耻\xba䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧\xf2⸁ash耻\xf8䃸l;折iŬⸯ⸴de耻\xf5䃵esĀ;aǛ⸺s;樶ml耻\xf6䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀\xb6;l⹭⹮䂶le\xecЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀\ud835\udd2dƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕ma\xf4੶ne;明ƀ;tv⺿⻀⻈䏀chfork\xbb´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎\xf6⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻\xb1ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀\ud835\udd61nd耻\xa3䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷u\xe5໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾ppro\xf8⽃urlye\xf1໙\xf1໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨i\xedໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺\xf0⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴\xef໻rel;抰Āci⿀⿅r;쀀\ud835\udcc5;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀\ud835\udd2epf;쀀\ud835\udd62rime;恗cr;쀀\ud835\udcc6ƀaeo⿸〉〓tĀei⿾々rnion\xf3ڰnt;樖stĀ;e【】䀿\xf1Ἑ\xf4༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがr\xf2Ⴓ\xf2ϝail;検ar\xf2ᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕i\xe3ᅮmptyv;榳gȀ;del࿑らるろ;榒;榥\xe5࿑uo耻\xbb䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞\xeb≝\xf0✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶al\xf3༞ƀabrョリヮr\xf2៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗\xec࿲\xe2ヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜn\xe5Ⴛar\xf4ྩt;断ƀilrㅩဣㅮsht;楽;쀀\ud835\udd2fĀaoㅷㆆrĀduㅽㅿ\xbbѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭa\xe9トarpoonĀduㆻㆿow\xeeㅾp\xbb႒eftĀah㇊㇐rrow\xf3࿪arpoon\xf3Ցightarrows;應quigarro\xf7ニhreetimes;拌g;䋚ingdotse\xf1ἲƀahm㈍㈐㈓r\xf2࿪a\xf2Ց;怏oustĀ;a㈞㈟掱che\xbb㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾r\xebဃƀafl㉇㉊㉎r;榆;쀀\ud835\udd63us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒ar\xf2㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀\ud835\udcc7Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠re\xe5ㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛qu\xef➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡u\xe5ᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓i\xedሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒\xeb∨Ā;oਸ਼਴t耻\xa7䂧i;䀻war;椩mĀin㍩\xf0nu\xf3\xf1t;朶rĀ;o㍶⁕쀀\ud835\udd30Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜i\xe4ᑤara\xec⹯耻\xad䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲ar\xf2ᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetm\xe9㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀\ud835\udd64aĀdr㑍ЂesĀ;u㑔㑕晠it\xbb㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍\xf1ᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝\xf1ᆮƀ;afᅻ㒦ְrť㒫ֱ\xbbᅼar\xf2ᅈȀcemt㒹㒾㓂㓅r;쀀\ud835\udcc8tm\xee\xf1i\xec㐕ar\xe6ᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psilo\xeeỠh\xe9⺯s\xbb⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦ppro\xf8㋺urlye\xf1ᇾ\xf1ᇳƀaes㖂㖈㌛ppro\xf8㌚q\xf1㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻\xb9䂹耻\xb2䂲耻\xb3䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨\xeb∮Ā;oਫ਩war;椪lig耻\xdf䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄r\xeb๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀\ud835\udd31Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮ppro\xf8዁im\xbbኬs\xf0ኞĀas㚺㚮\xf0዁rn耻\xfe䃾Ǭ̟㛆⋧es膀\xd7;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀\xe1⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀\ud835\udd65rk;櫚\xe1㍢rime;怴ƀaip㜏㜒㝤d\xe5ቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own\xbbᶻeftĀ;e⠀㜾\xf1म;扜ightĀ;e㊪㝋\xf1ၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀\ud835\udcc9;䑆cy;䑛rok;䅧Āio㞋㞎x\xf4᝷headĀlr㞗㞠eftarro\xf7ࡏightarrow\xbbཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶r\xf2ϭar;楣Ācr㟜㟢ute耻\xfa䃺\xf2ᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻\xfb䃻;䑃ƀabh㠃㠆㠋r\xf2Ꭽlac;䅱a\xf2ᏃĀir㠓㠘sht;楾;쀀\ud835\udd32rave耻\xf9䃹š㠧㠱rĀlr㠬㠮\xbbॗ\xbbႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r\xbb㡆op;挏ri;旸Āal㡖㡚cr;䅫肻\xa8͉Āgp㡢㡦on;䅳f;쀀\ud835\udd66̀adhlsuᅋ㡸㡽፲㢑㢠own\xe1ᎳarpoonĀlr㢈㢌ef\xf4㠭igh\xf4㠯iƀ;hl㢙㢚㢜䏅\xbbᏺon\xbb㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r\xbb㢽op;挎ng;䅯ri;旹cr;쀀\ud835\udccaƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨\xbb᠓Āam㣯㣲r\xf2㢨l耻\xfc䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠r\xf2ϷarĀ;v㤦㤧櫨;櫩as\xe8ϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖app\xe1␕othin\xe7ẖƀhir㓫⻈㥙op\xf4⾵Ā;hᎷ㥢\xefㆍĀiu㥩㥭gm\xe1㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟et\xe1㚜iangleĀlr㦪㦯eft\xbbथight\xbbၑy;䐲ash\xbbံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨa\xf2ᑩr;쀀\ud835\udd33tr\xe9㦮suĀbp㧯㧱\xbbജ\xbb൙pf;쀀\ud835\udd67ro\xf0໻tr\xe9㦴Ācu㨆㨋r;쀀\ud835\udccbĀbp㨐㨘nĀEe㦀㨖\xbb㥾nĀEe㦒㨞\xbb㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀\ud835\udd34pf;쀀\ud835\udd68Ā;eᑹ㩦at\xe8ᑹcr;쀀\ud835\udcccૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tr\xe9៑r;쀀\ud835\udd35ĀAa㪔㪗r\xf2σr\xf2৶;䎾ĀAa㪡㪤r\xf2θr\xf2৫a\xf0✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀\ud835\udd69im\xe5ឲĀAa㫇㫊r\xf2ώr\xf2ਁĀcq㫒ីr;쀀\ud835\udccdĀpt៖㫜r\xe9។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻\xfd䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻\xa5䂥r;쀀\ud835\udd36cy;䑗pf;쀀\ud835\udd6acr;쀀\ud835\udcceĀcm㬦㬩y;䑎l耻\xff䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡tr\xe6ᕟa;䎶r;쀀\ud835\udd37cy;䐶grarr;懝pf;쀀\ud835\udd6bcr;쀀\ud835\udccfĀjn㮅㮇;怍j;怌'
              .split("")
              .map((e) => e.charCodeAt(0)),
          ),
          z = new Uint16Array(
            "Ȁaglq	\x15\x18\x1bɭ\x0f\0\0\x12p;䀦os;䀧t;䀾t;䀼uot;䀢"
              .split("")
              .map((e) => e.charCodeAt(0)),
          ),
          $ = new Map([
            [0, 65533],
            [128, 8364],
            [130, 8218],
            [131, 402],
            [132, 8222],
            [133, 8230],
            [134, 8224],
            [135, 8225],
            [136, 710],
            [137, 8240],
            [138, 352],
            [139, 8249],
            [140, 338],
            [142, 381],
            [145, 8216],
            [146, 8217],
            [147, 8220],
            [148, 8221],
            [149, 8226],
            [150, 8211],
            [151, 8212],
            [152, 732],
            [153, 8482],
            [154, 353],
            [155, 8250],
            [156, 339],
            [158, 382],
            [159, 376],
          ]),
          q =
            null != (r = String.fromCodePoint)
              ? r
              : function (e) {
                  let t = "";
                  return (
                    e > 65535 &&
                      ((e -= 65536),
                      (t += String.fromCharCode(((e >>> 10) & 1023) | 55296)),
                      (e = 56320 | (1023 & e))),
                    (t += String.fromCharCode(e))
                  );
                };
        function U(e) {
          return e >= i.ZERO && e <= i.NINE;
        }
        !(function (e) {
          (e[(e.NUM = 35)] = "NUM"),
            (e[(e.SEMI = 59)] = "SEMI"),
            (e[(e.EQUALS = 61)] = "EQUALS"),
            (e[(e.ZERO = 48)] = "ZERO"),
            (e[(e.NINE = 57)] = "NINE"),
            (e[(e.LOWER_A = 97)] = "LOWER_A"),
            (e[(e.LOWER_F = 102)] = "LOWER_F"),
            (e[(e.LOWER_X = 120)] = "LOWER_X"),
            (e[(e.LOWER_Z = 122)] = "LOWER_Z"),
            (e[(e.UPPER_A = 65)] = "UPPER_A"),
            (e[(e.UPPER_F = 70)] = "UPPER_F"),
            (e[(e.UPPER_Z = 90)] = "UPPER_Z");
        })(i || (i = {})),
          !(function (e) {
            (e[(e.VALUE_LENGTH = 49152)] = "VALUE_LENGTH"),
              (e[(e.BRANCH_LENGTH = 16256)] = "BRANCH_LENGTH"),
              (e[(e.JUMP_TABLE = 127)] = "JUMP_TABLE");
          })(s || (s = {})),
          !(function (e) {
            (e[(e.EntityStart = 0)] = "EntityStart"),
              (e[(e.NumericStart = 1)] = "NumericStart"),
              (e[(e.NumericDecimal = 2)] = "NumericDecimal"),
              (e[(e.NumericHex = 3)] = "NumericHex"),
              (e[(e.NamedEntity = 4)] = "NamedEntity");
          })(o || (o = {})),
          (function (e) {
            (e[(e.Legacy = 0)] = "Legacy"),
              (e[(e.Strict = 1)] = "Strict"),
              (e[(e.Attribute = 2)] = "Attribute");
          })(a || (a = {}));
        class H {
          constructor(e, t, n) {
            (this.decodeTree = e),
              (this.emitCodePoint = t),
              (this.errors = n),
              (this.state = o.EntityStart),
              (this.consumed = 1),
              (this.result = 0),
              (this.treeIndex = 0),
              (this.excess = 1),
              (this.decodeMode = a.Strict);
          }
          startEntity(e) {
            (this.decodeMode = e),
              (this.state = o.EntityStart),
              (this.result = 0),
              (this.treeIndex = 0),
              (this.excess = 1),
              (this.consumed = 1);
          }
          write(e, t) {
            switch (this.state) {
              case o.EntityStart:
                if (e.charCodeAt(t) === i.NUM)
                  return (
                    (this.state = o.NumericStart),
                    (this.consumed += 1),
                    this.stateNumericStart(e, t + 1)
                  );
                return (
                  (this.state = o.NamedEntity), this.stateNamedEntity(e, t)
                );
              case o.NumericStart:
                return this.stateNumericStart(e, t);
              case o.NumericDecimal:
                return this.stateNumericDecimal(e, t);
              case o.NumericHex:
                return this.stateNumericHex(e, t);
              case o.NamedEntity:
                return this.stateNamedEntity(e, t);
            }
          }
          stateNumericStart(e, t) {
            return t >= e.length
              ? -1
              : (32 | e.charCodeAt(t)) === i.LOWER_X
                ? ((this.state = o.NumericHex),
                  (this.consumed += 1),
                  this.stateNumericHex(e, t + 1))
                : ((this.state = o.NumericDecimal),
                  this.stateNumericDecimal(e, t));
          }
          addToNumericResult(e, t, n, r) {
            if (t !== n) {
              let i = n - t;
              (this.result =
                this.result * Math.pow(r, i) + parseInt(e.substr(t, i), r)),
                (this.consumed += i);
            }
          }
          stateNumericHex(e, t) {
            let n = t;
            for (; t < e.length; ) {
              var r;
              let s = e.charCodeAt(t);
              if (
                !U(s) &&
                (!((r = s) >= i.UPPER_A) || !(r <= i.UPPER_F)) &&
                (!(r >= i.LOWER_A) || !(r <= i.LOWER_F))
              )
                return (
                  this.addToNumericResult(e, n, t, 16),
                  this.emitNumericEntity(s, 3)
                );
              t += 1;
            }
            return this.addToNumericResult(e, n, t, 16), -1;
          }
          stateNumericDecimal(e, t) {
            let n = t;
            for (; t < e.length; ) {
              let r = e.charCodeAt(t);
              if (!U(r))
                return (
                  this.addToNumericResult(e, n, t, 10),
                  this.emitNumericEntity(r, 2)
                );
              t += 1;
            }
            return this.addToNumericResult(e, n, t, 10), -1;
          }
          emitNumericEntity(e, t) {
            var n, r, s;
            if (this.consumed <= t)
              return (
                null == (n = this.errors) ||
                  n.absenceOfDigitsInNumericCharacterReference(this.consumed),
                0
              );
            if (e === i.SEMI) this.consumed += 1;
            else if (this.decodeMode === a.Strict) return 0;
            return (
              this.emitCodePoint(
                ((r = this.result) >= 55296 && r <= 57343) || r > 1114111
                  ? 65533
                  : null != (s = $.get(r))
                    ? s
                    : r,
                this.consumed,
              ),
              this.errors &&
                (e !== i.SEMI &&
                  this.errors.missingSemicolonAfterCharacterReference(),
                this.errors.validateNumericCharacterReference(this.result)),
              this.consumed
            );
          }
          stateNamedEntity(e, t) {
            let { decodeTree: n } = this,
              r = n[this.treeIndex],
              o = (r & s.VALUE_LENGTH) >> 14;
            for (; t < e.length; t++, this.excess++) {
              let l = e.charCodeAt(t);
              if (
                ((this.treeIndex = (function (e, t, n, r) {
                  let i = (t & s.BRANCH_LENGTH) >> 7,
                    o = t & s.JUMP_TABLE;
                  if (0 === i) return 0 !== o && r === o ? n : -1;
                  if (o) {
                    let t = r - o;
                    return t < 0 || t >= i ? -1 : e[n + t] - 1;
                  }
                  let a = n,
                    l = a + i - 1;
                  for (; a <= l; ) {
                    let t = (a + l) >>> 1,
                      n = e[t];
                    if (n < r) a = t + 1;
                    else {
                      if (!(n > r)) return e[t + i];
                      l = t - 1;
                    }
                  }
                  return -1;
                })(n, r, this.treeIndex + Math.max(1, o), l)),
                this.treeIndex < 0)
              )
                return 0 === this.result ||
                  (this.decodeMode === a.Attribute &&
                    (0 === o ||
                      (function (e) {
                        var t;
                        return (
                          e === i.EQUALS ||
                          ((t = e) >= i.UPPER_A && t <= i.UPPER_Z) ||
                          (t >= i.LOWER_A && t <= i.LOWER_Z) ||
                          U(t)
                        );
                      })(l)))
                  ? 0
                  : this.emitNotTerminatedNamedEntity();
              if (0 != (o = ((r = n[this.treeIndex]) & s.VALUE_LENGTH) >> 14)) {
                if (l === i.SEMI)
                  return this.emitNamedEntityData(
                    this.treeIndex,
                    o,
                    this.consumed + this.excess,
                  );
                this.decodeMode !== a.Strict &&
                  ((this.result = this.treeIndex),
                  (this.consumed += this.excess),
                  (this.excess = 0));
              }
            }
            return -1;
          }
          emitNotTerminatedNamedEntity() {
            var e;
            let { result: t, decodeTree: n } = this,
              r = (n[t] & s.VALUE_LENGTH) >> 14;
            return (
              this.emitNamedEntityData(t, r, this.consumed),
              null == (e = this.errors) ||
                e.missingSemicolonAfterCharacterReference(),
              this.consumed
            );
          }
          emitNamedEntityData(e, t, n) {
            let { decodeTree: r } = this;
            return (
              this.emitCodePoint(
                1 === t ? r[e] & ~s.VALUE_LENGTH : r[e + 1],
                n,
              ),
              3 === t && this.emitCodePoint(r[e + 2], n),
              n
            );
          }
          end() {
            var e;
            switch (this.state) {
              case o.NamedEntity:
                return 0 !== this.result &&
                  (this.decodeMode !== a.Attribute ||
                    this.result === this.treeIndex)
                  ? this.emitNotTerminatedNamedEntity()
                  : 0;
              case o.NumericDecimal:
                return this.emitNumericEntity(0, 2);
              case o.NumericHex:
                return this.emitNumericEntity(0, 3);
              case o.NumericStart:
                return (
                  null == (e = this.errors) ||
                    e.absenceOfDigitsInNumericCharacterReference(this.consumed),
                  0
                );
              case o.EntityStart:
                return 0;
            }
          }
        }
        function Q(e) {
          let t = "",
            n = new H(e, (e) => (t += q(e)));
          return function (e, r) {
            let i = 0,
              s = 0;
            for (; (s = e.indexOf("&", s)) >= 0; ) {
              (t += e.slice(i, s)), n.startEntity(r);
              let o = n.write(e, s + 1);
              if (o < 0) {
                i = s + n.end();
                break;
              }
              (i = s + o), (s = 0 === o ? i + 1 : i);
            }
            let o = t + e.slice(i);
            return (t = ""), o;
          };
        }
        let V = Q(B);
        function W(e, t = a.Legacy) {
          return V(e, t);
        }
        Q(z);
        let Z = new Map([
          [34, "&quot;"],
          [38, "&amp;"],
          [39, "&apos;"],
          [60, "&lt;"],
          [62, "&gt;"],
        ]);
        function G(e, t) {
          return function (n) {
            let r,
              i = 0,
              s = "";
            for (; (r = e.exec(n)); )
              i !== r.index && (s += n.substring(i, r.index)),
                (s += t.get(r[0].charCodeAt(0))),
                (i = r.index + 1);
            return s + n.substring(i);
          };
        }
        null != String.prototype.codePointAt ||
          ((e, t) =>
            (64512 & e.charCodeAt(t)) == 55296
              ? (e.charCodeAt(t) - 55296) * 1024 +
                e.charCodeAt(t + 1) -
                56320 +
                65536
              : e.charCodeAt(t)),
          G(/[&<>'"]/g, Z),
          G(
            /["&\u00A0]/g,
            new Map([
              [34, "&quot;"],
              [38, "&amp;"],
              [160, "&nbsp;"],
            ]),
          ),
          G(
            /[&<>\u00A0]/g,
            new Map([
              [38, "&amp;"],
              [60, "&lt;"],
              [62, "&gt;"],
              [160, "&nbsp;"],
            ]),
          );
        function Y(e) {
          return "[object String]" === Object.prototype.toString.call(e);
        }
        !(function (e) {
          (e[(e.XML = 0)] = "XML"), (e[(e.HTML = 1)] = "HTML");
        })(l || (l = {})),
          (function (e) {
            (e[(e.UTF8 = 0)] = "UTF8"),
              (e[(e.ASCII = 1)] = "ASCII"),
              (e[(e.Extensive = 2)] = "Extensive"),
              (e[(e.Attribute = 3)] = "Attribute"),
              (e[(e.Text = 4)] = "Text");
          })(c || (c = {}));
        let K = Object.prototype.hasOwnProperty;
        function X(e, t) {
          return K.call(e, t);
        }
        function J(e) {
          let t = Array.prototype.slice.call(arguments, 1);
          return (
            t.forEach(function (t) {
              if (t) {
                if ("object" != typeof t) throw TypeError(t + "must be object");
                Object.keys(t).forEach(function (n) {
                  e[n] = t[n];
                });
              }
            }),
            e
          );
        }
        function ee(e, t, n) {
          return [].concat(e.slice(0, t), n, e.slice(t + 1));
        }
        function et(e) {
          return (
            (!(e >= 55296) || !(e <= 57343)) &&
            (!(e >= 64976) || !(e <= 65007)) &&
            (65535 & e) != 65535 &&
            (65535 & e) != 65534 &&
            (!(e >= 0) || !(e <= 8)) &&
            11 !== e &&
            (!(e >= 14) || !(e <= 31)) &&
            (!(e >= 127) || !(e <= 159)) &&
            !(e > 1114111) &&
            !0
          );
        }
        function en(e) {
          return e > 65535
            ? String.fromCharCode(
                55296 + ((e -= 65536) >> 10),
                56320 + (1023 & e),
              )
            : String.fromCharCode(e);
        }
        let er = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g,
          ei = RegExp(
            er.source + "|" + /&([a-z#][a-z0-9]{1,31});/gi.source,
            "gi",
          ),
          es = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;
        function eo(e) {
          return 0 > e.indexOf("\\") ? e : e.replace(er, "$1");
        }
        function ea(e) {
          return 0 > e.indexOf("\\") && 0 > e.indexOf("&")
            ? e
            : e.replace(ei, function (e, t, n) {
                if (t) return t;
                if (35 === n.charCodeAt(0) && es.test(n)) {
                  let t =
                    "x" === n[1].toLowerCase()
                      ? parseInt(n.slice(2), 16)
                      : parseInt(n.slice(1), 10);
                  return et(t) ? en(t) : e;
                }
                let r = W(e);
                return r !== e ? r : e;
              });
        }
        let el = /[&<>"]/,
          ec = /[&<>"]/g,
          eu = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;" };
        function ed(e) {
          return eu[e];
        }
        function eh(e) {
          return el.test(e) ? e.replace(ec, ed) : e;
        }
        let ep = /[.?*+^$[\]\\(){}|-]/g;
        function ef(e) {
          return e.replace(ep, "\\$&");
        }
        function em(e) {
          switch (e) {
            case 9:
            case 32:
              return !0;
          }
          return !1;
        }
        function eg(e) {
          if (e >= 8192 && e <= 8202) return !0;
          switch (e) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 160:
            case 5760:
            case 8239:
            case 8287:
            case 12288:
              return !0;
          }
          return !1;
        }
        function ey(e) {
          return P.test(e) || R.test(e);
        }
        function ev(e) {
          switch (e) {
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 123:
            case 124:
            case 125:
            case 126:
              return !0;
            default:
              return !1;
          }
        }
        function eb(e) {
          return (e = e.trim().replace(/\s+/g, " "))
            .toLowerCase()
            .toUpperCase();
        }
        let ex = { mdurl: u, ucmicro: d };
        function ek(e, t, n) {
          let r,
            i,
            s,
            o,
            a = e.posMax,
            l = e.pos;
          for (e.pos = t + 1, r = 1; e.pos < a; ) {
            if (93 === (s = e.src.charCodeAt(e.pos)) && 0 == --r) {
              i = !0;
              break;
            }
            if (((o = e.pos), e.md.inline.skipToken(e), 91 === s)) {
              if (o === e.pos - 1) r++;
              else if (n) return (e.pos = l), -1;
            }
          }
          let c = -1;
          return i && (c = e.pos), (e.pos = l), c;
        }
        function ew(e, t, n) {
          let r,
            i = t,
            s = { ok: !1, pos: 0, str: "" };
          if (60 === e.charCodeAt(i)) {
            for (i++; i < n && 10 !== (r = e.charCodeAt(i)) && 60 !== r; ) {
              if (62 === r) {
                (s.pos = i + 1), (s.str = ea(e.slice(t + 1, i))), (s.ok = !0);
                break;
              }
              if (92 === r && i + 1 < n) {
                i += 2;
                continue;
              }
              i++;
            }
            return s;
          }
          let o = 0;
          for (
            ;
            i < n && 32 !== (r = e.charCodeAt(i)) && !(r < 32) && 127 !== r;

          ) {
            if (92 === r && i + 1 < n) {
              if (32 === e.charCodeAt(i + 1)) break;
              i += 2;
              continue;
            }
            if (40 === r && ++o > 32) return s;
            if (41 === r) {
              if (0 === o) break;
              o--;
            }
            i++;
          }
          return (
            t === i ||
              0 !== o ||
              ((s.str = ea(e.slice(t, i))), (s.pos = i), (s.ok = !0)),
            s
          );
        }
        function e_(e, t, n, r) {
          let i,
            s = t,
            o = { ok: !1, can_continue: !1, pos: 0, str: "", marker: 0 };
          if (r) (o.str = r.str), (o.marker = r.marker);
          else {
            if (s >= n) return o;
            let r = e.charCodeAt(s);
            if (34 !== r && 39 !== r && 40 !== r) return o;
            t++, s++, 40 === r && (r = 41), (o.marker = r);
          }
          for (; s < n; ) {
            if ((i = e.charCodeAt(s)) === o.marker)
              return (
                (o.pos = s + 1), (o.str += ea(e.slice(t, s))), (o.ok = !0), o
              );
            if (40 === i && 41 === o.marker) return o;
            92 === i && s + 1 < n && s++, s++;
          }
          return (o.can_continue = !0), (o.str += ea(e.slice(t, s))), o;
        }
        let eO = {};
        function eT() {
          this.rules = J({}, eO);
        }
        function eS() {
          (this.__rules__ = []), (this.__cache__ = null);
        }
        function eE(e, t, n) {
          (this.type = e),
            (this.tag = t),
            (this.attrs = null),
            (this.map = null),
            (this.nesting = n),
            (this.level = 0),
            (this.children = null),
            (this.content = ""),
            (this.markup = ""),
            (this.info = ""),
            (this.meta = null),
            (this.block = !1),
            (this.hidden = !1);
        }
        function eC(e, t, n) {
          (this.src = e),
            (this.env = n),
            (this.tokens = []),
            (this.inlineMode = !1),
            (this.md = t);
        }
        (eO.code_inline = function (e, t, n, r, i) {
          let s = e[t];
          return "<code" + i.renderAttrs(s) + ">" + eh(s.content) + "</code>";
        }),
          (eO.code_block = function (e, t, n, r, i) {
            let s = e[t];
            return (
              "<pre" +
              i.renderAttrs(s) +
              "><code>" +
              eh(e[t].content) +
              "</code></pre>\n"
            );
          }),
          (eO.fence = function (e, t, n, r, i) {
            let s,
              o = e[t],
              a = o.info ? ea(o.info).trim() : "",
              l = "",
              c = "";
            if (a) {
              let e = a.split(/(\s+)/g);
              (l = e[0]), (c = e.slice(2).join(""));
            }
            if (
              0 ===
              (s =
                (n.highlight && n.highlight(o.content, l, c)) ||
                eh(o.content)).indexOf("<pre")
            )
              return s + "\n";
            if (a) {
              let e = o.attrIndex("class"),
                t = o.attrs ? o.attrs.slice() : [];
              return (
                e < 0
                  ? t.push(["class", n.langPrefix + l])
                  : ((t[e] = t[e].slice()),
                    (t[e][1] += " " + n.langPrefix + l)),
                `<pre><code${i.renderAttrs({ attrs: t })}>${s}</code></pre>
`
              );
            }
            return `<pre><code${i.renderAttrs(o)}>${s}</code></pre>
`;
          }),
          (eO.image = function (e, t, n, r, i) {
            let s = e[t];
            return (
              (s.attrs[s.attrIndex("alt")][1] = i.renderInlineAsText(
                s.children,
                n,
                r,
              )),
              i.renderToken(e, t, n)
            );
          }),
          (eO.hardbreak = function (e, t, n) {
            return n.xhtmlOut ? "<br />\n" : "<br>\n";
          }),
          (eO.softbreak = function (e, t, n) {
            return n.breaks ? (n.xhtmlOut ? "<br />\n" : "<br>\n") : "\n";
          }),
          (eO.text = function (e, t) {
            return eh(e[t].content);
          }),
          (eO.html_block = function (e, t) {
            return e[t].content;
          }),
          (eO.html_inline = function (e, t) {
            return e[t].content;
          }),
          (eT.prototype.renderAttrs = function (e) {
            let t, n, r;
            if (!e.attrs) return "";
            for (t = 0, r = "", n = e.attrs.length; t < n; t++)
              r += " " + eh(e.attrs[t][0]) + '="' + eh(e.attrs[t][1]) + '"';
            return r;
          }),
          (eT.prototype.renderToken = function (e, t, n) {
            let r = e[t],
              i = "";
            if (r.hidden) return "";
            r.block && -1 !== r.nesting && t && e[t - 1].hidden && (i += "\n"),
              (i += (-1 === r.nesting ? "</" : "<") + r.tag),
              (i += this.renderAttrs(r)),
              0 === r.nesting && n.xhtmlOut && (i += " /");
            let s = !1;
            if (r.block && ((s = !0), 1 === r.nesting && t + 1 < e.length)) {
              let n = e[t + 1];
              "inline" === n.type || n.hidden
                ? (s = !1)
                : -1 === n.nesting && n.tag === r.tag && (s = !1);
            }
            return i + (s ? ">\n" : ">");
          }),
          (eT.prototype.renderInline = function (e, t, n) {
            let r = "",
              i = this.rules;
            for (let s = 0, o = e.length; s < o; s++) {
              let o = e[s].type;
              void 0 !== i[o]
                ? (r += i[o](e, s, t, n, this))
                : (r += this.renderToken(e, s, t));
            }
            return r;
          }),
          (eT.prototype.renderInlineAsText = function (e, t, n) {
            let r = "";
            for (let i = 0, s = e.length; i < s; i++)
              switch (e[i].type) {
                case "text":
                case "html_inline":
                case "html_block":
                  r += e[i].content;
                  break;
                case "image":
                  r += this.renderInlineAsText(e[i].children, t, n);
                  break;
                case "softbreak":
                case "hardbreak":
                  r += "\n";
              }
            return r;
          }),
          (eT.prototype.render = function (e, t, n) {
            let r = "",
              i = this.rules;
            for (let s = 0, o = e.length; s < o; s++) {
              let o = e[s].type;
              "inline" === o
                ? (r += this.renderInline(e[s].children, t, n))
                : void 0 !== i[o]
                  ? (r += i[o](e, s, t, n, this))
                  : (r += this.renderToken(e, s, t, n));
            }
            return r;
          }),
          (eS.prototype.__find__ = function (e) {
            for (let t = 0; t < this.__rules__.length; t++)
              if (this.__rules__[t].name === e) return t;
            return -1;
          }),
          (eS.prototype.__compile__ = function () {
            let e = this,
              t = [""];
            e.__rules__.forEach(function (e) {
              e.enabled &&
                e.alt.forEach(function (e) {
                  0 > t.indexOf(e) && t.push(e);
                });
            }),
              (e.__cache__ = {}),
              t.forEach(function (t) {
                (e.__cache__[t] = []),
                  e.__rules__.forEach(function (n) {
                    n.enabled &&
                      ((t && 0 > n.alt.indexOf(t)) ||
                        e.__cache__[t].push(n.fn));
                  });
              });
          }),
          (eS.prototype.at = function (e, t, n) {
            let r = this.__find__(e);
            if (-1 === r) throw Error("Parser rule not found: " + e);
            (this.__rules__[r].fn = t),
              (this.__rules__[r].alt = (n || {}).alt || []),
              (this.__cache__ = null);
          }),
          (eS.prototype.before = function (e, t, n, r) {
            let i = this.__find__(e);
            if (-1 === i) throw Error("Parser rule not found: " + e);
            this.__rules__.splice(i, 0, {
              name: t,
              enabled: !0,
              fn: n,
              alt: (r || {}).alt || [],
            }),
              (this.__cache__ = null);
          }),
          (eS.prototype.after = function (e, t, n, r) {
            let i = this.__find__(e);
            if (-1 === i) throw Error("Parser rule not found: " + e);
            this.__rules__.splice(i + 1, 0, {
              name: t,
              enabled: !0,
              fn: n,
              alt: (r || {}).alt || [],
            }),
              (this.__cache__ = null);
          }),
          (eS.prototype.push = function (e, t, n) {
            this.__rules__.push({
              name: e,
              enabled: !0,
              fn: t,
              alt: (n || {}).alt || [],
            }),
              (this.__cache__ = null);
          }),
          (eS.prototype.enable = function (e, t) {
            Array.isArray(e) || (e = [e]);
            let n = [];
            return (
              e.forEach(function (e) {
                let r = this.__find__(e);
                if (r < 0) {
                  if (t) return;
                  throw Error("Rules manager: invalid rule name " + e);
                }
                (this.__rules__[r].enabled = !0), n.push(e);
              }, this),
              (this.__cache__ = null),
              n
            );
          }),
          (eS.prototype.enableOnly = function (e, t) {
            Array.isArray(e) || (e = [e]),
              this.__rules__.forEach(function (e) {
                e.enabled = !1;
              }),
              this.enable(e, t);
          }),
          (eS.prototype.disable = function (e, t) {
            Array.isArray(e) || (e = [e]);
            let n = [];
            return (
              e.forEach(function (e) {
                let r = this.__find__(e);
                if (r < 0) {
                  if (t) return;
                  throw Error("Rules manager: invalid rule name " + e);
                }
                (this.__rules__[r].enabled = !1), n.push(e);
              }, this),
              (this.__cache__ = null),
              n
            );
          }),
          (eS.prototype.getRules = function (e) {
            return (
              null === this.__cache__ && this.__compile__(),
              this.__cache__[e] || []
            );
          }),
          (eE.prototype.attrIndex = function (e) {
            if (!this.attrs) return -1;
            let t = this.attrs;
            for (let n = 0, r = t.length; n < r; n++)
              if (t[n][0] === e) return n;
            return -1;
          }),
          (eE.prototype.attrPush = function (e) {
            this.attrs ? this.attrs.push(e) : (this.attrs = [e]);
          }),
          (eE.prototype.attrSet = function (e, t) {
            let n = this.attrIndex(e),
              r = [e, t];
            n < 0 ? this.attrPush(r) : (this.attrs[n] = r);
          }),
          (eE.prototype.attrGet = function (e) {
            let t = this.attrIndex(e),
              n = null;
            return t >= 0 && (n = this.attrs[t][1]), n;
          }),
          (eE.prototype.attrJoin = function (e, t) {
            let n = this.attrIndex(e);
            n < 0
              ? this.attrPush([e, t])
              : (this.attrs[n][1] = this.attrs[n][1] + " " + t);
          }),
          (eC.prototype.Token = eE);
        let eA = /\r\n?|\n/g,
          eN = /\0/g,
          eI = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/,
          eD = /\((c|tm|r)\)/i,
          eP = /\((c|tm|r)\)/gi,
          eR = { c: "\xa9", r: "\xae", tm: "™" };
        function eM(e, t) {
          return eR[t.toLowerCase()];
        }
        let eL = /['"]/,
          ej = /['"]/g;
        function eF(e, t, n) {
          return e.slice(0, t) + n + e.slice(t + 1);
        }
        let eB = [
          [
            "normalize",
            function (e) {
              let t;
              (t = (t = e.src.replace(eA, "\n")).replace(eN, "�")), (e.src = t);
            },
          ],
          [
            "block",
            function (e) {
              let t;
              e.inlineMode
                ? (((t = new e.Token("inline", "", 0)).content = e.src),
                  (t.map = [0, 1]),
                  (t.children = []),
                  e.tokens.push(t))
                : e.md.block.parse(e.src, e.md, e.env, e.tokens);
            },
          ],
          [
            "inline",
            function (e) {
              let t = e.tokens;
              for (let n = 0, r = t.length; n < r; n++) {
                let r = t[n];
                "inline" === r.type &&
                  e.md.inline.parse(r.content, e.md, e.env, r.children);
              }
            },
          ],
          [
            "linkify",
            function (e) {
              let t = e.tokens;
              if (e.md.options.linkify)
                for (let i = 0, s = t.length; i < s; i++) {
                  if (
                    "inline" !== t[i].type ||
                    !e.md.linkify.pretest(t[i].content)
                  )
                    continue;
                  let s = t[i].children,
                    o = 0;
                  for (let a = s.length - 1; a >= 0; a--) {
                    let l = s[a];
                    if ("link_close" === l.type) {
                      for (
                        a--;
                        s[a].level !== l.level && "link_open" !== s[a].type;

                      )
                        a--;
                      continue;
                    }
                    if ("html_inline" === l.type) {
                      var n, r;
                      (n = l.content),
                        /^<a[>\s]/i.test(n) && o > 0 && o--,
                        (r = l.content),
                        /^<\/a\s*>/i.test(r) && o++;
                    }
                    if (
                      !(o > 0) &&
                      "text" === l.type &&
                      e.md.linkify.test(l.content)
                    ) {
                      let n = l.content,
                        r = e.md.linkify.match(n),
                        o = [],
                        c = l.level,
                        u = 0;
                      r.length > 0 &&
                        0 === r[0].index &&
                        a > 0 &&
                        "text_special" === s[a - 1].type &&
                        (r = r.slice(1));
                      for (let t = 0; t < r.length; t++) {
                        let i = r[t].url,
                          s = e.md.normalizeLink(i);
                        if (!e.md.validateLink(s)) continue;
                        let a = r[t].text;
                        a = r[t].schema
                          ? "mailto:" !== r[t].schema || /^mailto:/i.test(a)
                            ? e.md.normalizeLinkText(a)
                            : e.md
                                .normalizeLinkText("mailto:" + a)
                                .replace(/^mailto:/, "")
                          : e.md
                              .normalizeLinkText("http://" + a)
                              .replace(/^http:\/\//, "");
                        let l = r[t].index;
                        if (l > u) {
                          let t = new e.Token("text", "", 0);
                          (t.content = n.slice(u, l)), (t.level = c), o.push(t);
                        }
                        let d = new e.Token("link_open", "a", 1);
                        (d.attrs = [["href", s]]),
                          (d.level = c++),
                          (d.markup = "linkify"),
                          (d.info = "auto"),
                          o.push(d);
                        let h = new e.Token("text", "", 0);
                        (h.content = a), (h.level = c), o.push(h);
                        let p = new e.Token("link_close", "a", -1);
                        (p.level = --c),
                          (p.markup = "linkify"),
                          (p.info = "auto"),
                          o.push(p),
                          (u = r[t].lastIndex);
                      }
                      if (u < n.length) {
                        let t = new e.Token("text", "", 0);
                        (t.content = n.slice(u)), (t.level = c), o.push(t);
                      }
                      t[i].children = s = ee(s, a, o);
                    }
                  }
                }
            },
          ],
          [
            "replacements",
            function (e) {
              let t;
              if (e.md.options.typographer)
                for (t = e.tokens.length - 1; t >= 0; t--)
                  "inline" === e.tokens[t].type &&
                    (eD.test(e.tokens[t].content) &&
                      (function (e) {
                        let t = 0;
                        for (let n = e.length - 1; n >= 0; n--) {
                          let r = e[n];
                          "text" !== r.type ||
                            t ||
                            (r.content = r.content.replace(eP, eM)),
                            "link_open" === r.type && "auto" === r.info && t--,
                            "link_close" === r.type && "auto" === r.info && t++;
                        }
                      })(e.tokens[t].children),
                    eI.test(e.tokens[t].content) &&
                      (function (e) {
                        let t = 0;
                        for (let n = e.length - 1; n >= 0; n--) {
                          let r = e[n];
                          "text" === r.type &&
                            !t &&
                            eI.test(r.content) &&
                            (r.content = r.content
                              .replace(/\+-/g, "\xb1")
                              .replace(/\.{2,}/g, "…")
                              .replace(/([?!])…/g, "$1..")
                              .replace(/([?!]){4,}/g, "$1$1$1")
                              .replace(/,{2,}/g, ",")
                              .replace(/(^|[^-])---(?=[^-]|$)/gm, "$1—")
                              .replace(/(^|\s)--(?=\s|$)/gm, "$1–")
                              .replace(/(^|[^-\s])--(?=[^-\s]|$)/gm, "$1–")),
                            "link_open" === r.type && "auto" === r.info && t--,
                            "link_close" === r.type && "auto" === r.info && t++;
                        }
                      })(e.tokens[t].children));
            },
          ],
          [
            "smartquotes",
            function (e) {
              if (e.md.options.typographer)
                for (let t = e.tokens.length - 1; t >= 0; t--)
                  "inline" === e.tokens[t].type &&
                    eL.test(e.tokens[t].content) &&
                    (function (e, t) {
                      let n,
                        r = [];
                      for (let i = 0; i < e.length; i++) {
                        let s = e[i],
                          o = e[i].level;
                        for (
                          n = r.length - 1;
                          n >= 0 && !(r[n].level <= o);
                          n--
                        );
                        if (((r.length = n + 1), "text" !== s.type)) continue;
                        let a = s.content,
                          l = 0,
                          c = a.length;
                        u: for (; l < c; ) {
                          ej.lastIndex = l;
                          let u = ej.exec(a);
                          if (!u) break;
                          let d = !0,
                            h = !0;
                          l = u.index + 1;
                          let p = "'" === u[0],
                            f = 32;
                          if (u.index - 1 >= 0) f = a.charCodeAt(u.index - 1);
                          else
                            for (
                              n = i - 1;
                              n >= 0 &&
                              "softbreak" !== e[n].type &&
                              "hardbreak" !== e[n].type;
                              n--
                            )
                              if (e[n].content) {
                                f = e[n].content.charCodeAt(
                                  e[n].content.length - 1,
                                );
                                break;
                              }
                          let m = 32;
                          if (l < c) m = a.charCodeAt(l);
                          else
                            for (
                              n = i + 1;
                              n < e.length &&
                              "softbreak" !== e[n].type &&
                              "hardbreak" !== e[n].type;
                              n++
                            )
                              if (e[n].content) {
                                m = e[n].content.charCodeAt(0);
                                break;
                              }
                          let g = ev(f) || ey(String.fromCharCode(f)),
                            y = ev(m) || ey(String.fromCharCode(m)),
                            v = eg(f),
                            b = eg(m);
                          if (
                            (b ? (d = !1) : y && !(v || g) && (d = !1),
                            v ? (h = !1) : g && !(b || y) && (h = !1),
                            34 === m &&
                              '"' === u[0] &&
                              f >= 48 &&
                              f <= 57 &&
                              (h = d = !1),
                            d && h && ((d = g), (h = y)),
                            !d && !h)
                          ) {
                            p && (s.content = eF(s.content, u.index, "’"));
                            continue;
                          }
                          if (h)
                            for (n = r.length - 1; n >= 0; n--) {
                              let d = r[n];
                              if (r[n].level < o) break;
                              if (d.single === p && r[n].level === o) {
                                let o, h;
                                (d = r[n]),
                                  p
                                    ? ((o = t.md.options.quotes[2]),
                                      (h = t.md.options.quotes[3]))
                                    : ((o = t.md.options.quotes[0]),
                                      (h = t.md.options.quotes[1])),
                                  (s.content = eF(s.content, u.index, h)),
                                  (e[d.token].content = eF(
                                    e[d.token].content,
                                    d.pos,
                                    o,
                                  )),
                                  (l += h.length - 1),
                                  d.token === i && (l += o.length - 1),
                                  (c = (a = s.content).length),
                                  (r.length = n);
                                continue u;
                              }
                            }
                          d
                            ? r.push({
                                token: i,
                                pos: u.index,
                                single: p,
                                level: o,
                              })
                            : h &&
                              p &&
                              (s.content = eF(s.content, u.index, "’"));
                        }
                      }
                    })(e.tokens[t].children, e);
            },
          ],
          [
            "text_join",
            function (e) {
              let t,
                n,
                r = e.tokens,
                i = r.length;
              for (let e = 0; e < i; e++) {
                if ("inline" !== r[e].type) continue;
                let i = r[e].children,
                  s = i.length;
                for (t = 0; t < s; t++)
                  "text_special" === i[t].type && (i[t].type = "text");
                for (t = n = 0; t < s; t++)
                  "text" === i[t].type && t + 1 < s && "text" === i[t + 1].type
                    ? (i[t + 1].content = i[t].content + i[t + 1].content)
                    : (t !== n && (i[n] = i[t]), n++);
                t !== n && (i.length = n);
              }
            },
          ],
        ];
        function ez() {
          this.ruler = new eS();
          for (let e = 0; e < eB.length; e++)
            this.ruler.push(eB[e][0], eB[e][1]);
        }
        function e$(e, t, n, r) {
          (this.src = e),
            (this.md = t),
            (this.env = n),
            (this.tokens = r),
            (this.bMarks = []),
            (this.eMarks = []),
            (this.tShift = []),
            (this.sCount = []),
            (this.bsCount = []),
            (this.blkIndent = 0),
            (this.line = 0),
            (this.lineMax = 0),
            (this.tight = !1),
            (this.ddIndent = -1),
            (this.listIndent = -1),
            (this.parentType = "root"),
            (this.level = 0);
          let i = this.src;
          for (
            let e = 0, t = 0, n = 0, r = 0, s = i.length, o = !1;
            t < s;
            t++
          ) {
            let a = i.charCodeAt(t);
            if (!o)
              if (em(a)) {
                n++, 9 === a ? (r += 4 - (r % 4)) : r++;
                continue;
              } else o = !0;
            (10 === a || t === s - 1) &&
              (10 !== a && t++,
              this.bMarks.push(e),
              this.eMarks.push(t),
              this.tShift.push(n),
              this.sCount.push(r),
              this.bsCount.push(0),
              (o = !1),
              (n = 0),
              (r = 0),
              (e = t + 1));
          }
          this.bMarks.push(i.length),
            this.eMarks.push(i.length),
            this.tShift.push(0),
            this.sCount.push(0),
            this.bsCount.push(0),
            (this.lineMax = this.bMarks.length - 1);
        }
        function eq(e, t) {
          let n = e.bMarks[t] + e.tShift[t],
            r = e.eMarks[t];
          return e.src.slice(n, r);
        }
        function eU(e) {
          let t = [],
            n = e.length,
            r = 0,
            i = e.charCodeAt(r),
            s = !1,
            o = 0,
            a = "";
          for (; r < n; )
            124 === i &&
              (s
                ? ((a += e.substring(o, r - 1)), (o = r))
                : (t.push(a + e.substring(o, r)), (a = ""), (o = r + 1))),
              (s = 92 === i),
              r++,
              (i = e.charCodeAt(r));
          return t.push(a + e.substring(o)), t;
        }
        function eH(e, t) {
          let n = e.eMarks[t],
            r = e.bMarks[t] + e.tShift[t],
            i = e.src.charCodeAt(r++);
          return (42 !== i && 45 !== i && 43 !== i) ||
            (r < n && !em(e.src.charCodeAt(r)))
            ? -1
            : r;
        }
        function eQ(e, t) {
          let n = e.bMarks[t] + e.tShift[t],
            r = e.eMarks[t],
            i = n;
          if (i + 1 >= r) return -1;
          let s = e.src.charCodeAt(i++);
          if (s < 48 || s > 57) return -1;
          for (;;) {
            if (i >= r) return -1;
            if ((s = e.src.charCodeAt(i++)) >= 48 && s <= 57) {
              if (i - n >= 10) return -1;
              continue;
            }
            if (41 === s || 46 === s) break;
            return -1;
          }
          return i < r && !em((s = e.src.charCodeAt(i))) ? -1 : i;
        }
        (ez.prototype.process = function (e) {
          let t = this.ruler.getRules("");
          for (let n = 0, r = t.length; n < r; n++) t[n](e);
        }),
          (ez.prototype.State = eC),
          (e$.prototype.push = function (e, t, n) {
            let r = new eE(e, t, n);
            return (
              (r.block = !0),
              n < 0 && this.level--,
              (r.level = this.level),
              n > 0 && this.level++,
              this.tokens.push(r),
              r
            );
          }),
          (e$.prototype.isEmpty = function (e) {
            return this.bMarks[e] + this.tShift[e] >= this.eMarks[e];
          }),
          (e$.prototype.skipEmptyLines = function (e) {
            for (
              let t = this.lineMax;
              e < t && !(this.bMarks[e] + this.tShift[e] < this.eMarks[e]);
              e++
            );
            return e;
          }),
          (e$.prototype.skipSpaces = function (e) {
            for (
              let t = this.src.length;
              e < t && em(this.src.charCodeAt(e));
              e++
            );
            return e;
          }),
          (e$.prototype.skipSpacesBack = function (e, t) {
            if (e <= t) return e;
            for (; e > t; ) if (!em(this.src.charCodeAt(--e))) return e + 1;
            return e;
          }),
          (e$.prototype.skipChars = function (e, t) {
            for (
              let n = this.src.length;
              e < n && this.src.charCodeAt(e) === t;
              e++
            );
            return e;
          }),
          (e$.prototype.skipCharsBack = function (e, t, n) {
            if (e <= n) return e;
            for (; e > n; ) if (t !== this.src.charCodeAt(--e)) return e + 1;
            return e;
          }),
          (e$.prototype.getLines = function (e, t, n, r) {
            if (e >= t) return "";
            let i = Array(t - e);
            for (let s = 0, o = e; o < t; o++, s++) {
              let e,
                a = 0,
                l = this.bMarks[o],
                c = l;
              for (
                e = o + 1 < t || r ? this.eMarks[o] + 1 : this.eMarks[o];
                c < e && a < n;

              ) {
                let e = this.src.charCodeAt(c);
                if (em(e))
                  9 === e ? (a += 4 - ((a + this.bsCount[o]) % 4)) : a++;
                else if (c - l < this.tShift[o]) a++;
                else break;
                c++;
              }
              a > n
                ? (i[s] = Array(a - n + 1).join(" ") + this.src.slice(c, e))
                : (i[s] = this.src.slice(c, e));
            }
            return i.join("");
          }),
          (e$.prototype.Token = eE);
        let eV =
            "<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",
          eW = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",
          eZ = RegExp(
            "^(?:" +
              eV +
              "|" +
              eW +
              "|\x3c!---?>|\x3c!--(?:[^-]|-[^-]|--[^>])*--\x3e|<[?][\\s\\S]*?[?]>|<![A-Za-z][^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)",
          ),
          eG = RegExp("^(?:" + eV + "|" + eW + ")"),
          eY = [
            [
              /^<(script|pre|style|textarea)(?=(\s|>|$))/i,
              /<\/(script|pre|style|textarea)>/i,
              !0,
            ],
            [/^<!--/, /-->/, !0],
            [/^<\?/, /\?>/, !0],
            [/^<![A-Z]/, />/, !0],
            [/^<!\[CDATA\[/, /\]\]>/, !0],
            [
              RegExp(
                "^</?(address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?=(\\s|/?>|$))",
                "i",
              ),
              /^$/,
              !0,
            ],
            [RegExp(eG.source + "\\s*$"), /^$/, !1],
          ],
          eK = [
            [
              "table",
              function (e, t, n, r) {
                let i;
                if (t + 2 > n) return !1;
                let s = t + 1;
                if (e.sCount[s] < e.blkIndent || e.sCount[s] - e.blkIndent >= 4)
                  return !1;
                let o = e.bMarks[s] + e.tShift[s];
                if (o >= e.eMarks[s]) return !1;
                let a = e.src.charCodeAt(o++);
                if ((124 !== a && 45 !== a && 58 !== a) || o >= e.eMarks[s])
                  return !1;
                let l = e.src.charCodeAt(o++);
                if (
                  (124 !== l && 45 !== l && 58 !== l && !em(l)) ||
                  (45 === a && em(l))
                )
                  return !1;
                for (; o < e.eMarks[s]; ) {
                  let t = e.src.charCodeAt(o);
                  if (124 !== t && 45 !== t && 58 !== t && !em(t)) return !1;
                  o++;
                }
                let c = eq(e, t + 1),
                  u = c.split("|"),
                  d = [];
                for (let e = 0; e < u.length; e++) {
                  let t = u[e].trim();
                  if (!t)
                    if (0 === e || e === u.length - 1) continue;
                    else return !1;
                  if (!/^:?-+:?$/.test(t)) return !1;
                  58 === t.charCodeAt(t.length - 1)
                    ? d.push(58 === t.charCodeAt(0) ? "center" : "right")
                    : 58 === t.charCodeAt(0)
                      ? d.push("left")
                      : d.push("");
                }
                if (
                  -1 === (c = eq(e, t).trim()).indexOf("|") ||
                  e.sCount[t] - e.blkIndent >= 4
                )
                  return !1;
                (u = eU(c)).length && "" === u[0] && u.shift(),
                  u.length && "" === u[u.length - 1] && u.pop();
                let h = u.length;
                if (0 === h || h !== d.length) return !1;
                if (r) return !0;
                let p = e.parentType;
                e.parentType = "table";
                let f = e.md.block.ruler.getRules("blockquote"),
                  m = e.push("table_open", "table", 1),
                  g = [t, 0];
                (m.map = g),
                  (e.push("thead_open", "thead", 1).map = [t, t + 1]),
                  (e.push("tr_open", "tr", 1).map = [t, t + 1]);
                for (let t = 0; t < u.length; t++) {
                  let n = e.push("th_open", "th", 1);
                  d[t] && (n.attrs = [["style", "text-align:" + d[t]]]);
                  let r = e.push("inline", "", 0);
                  (r.content = u[t].trim()),
                    (r.children = []),
                    e.push("th_close", "th", -1);
                }
                e.push("tr_close", "tr", -1),
                  e.push("thead_close", "thead", -1);
                let y = 0;
                for (s = t + 2; s < n && !(e.sCount[s] < e.blkIndent); s++) {
                  let r = !1;
                  for (let t = 0, i = f.length; t < i; t++)
                    if (f[t](e, s, n, !0)) {
                      r = !0;
                      break;
                    }
                  if (
                    r ||
                    !(c = eq(e, s).trim()) ||
                    e.sCount[s] - e.blkIndent >= 4 ||
                    ((u = eU(c)).length && "" === u[0] && u.shift(),
                    u.length && "" === u[u.length - 1] && u.pop(),
                    (y += h - u.length) > 65536)
                  )
                    break;
                  s === t + 2 &&
                    (e.push("tbody_open", "tbody", 1).map = i = [t + 2, 0]),
                    (e.push("tr_open", "tr", 1).map = [s, s + 1]);
                  for (let t = 0; t < h; t++) {
                    let n = e.push("td_open", "td", 1);
                    d[t] && (n.attrs = [["style", "text-align:" + d[t]]]);
                    let r = e.push("inline", "", 0);
                    (r.content = u[t] ? u[t].trim() : ""),
                      (r.children = []),
                      e.push("td_close", "td", -1);
                  }
                  e.push("tr_close", "tr", -1);
                }
                return (
                  i && (e.push("tbody_close", "tbody", -1), (i[1] = s)),
                  e.push("table_close", "table", -1),
                  (g[1] = s),
                  (e.parentType = p),
                  (e.line = s),
                  !0
                );
              },
              ["paragraph", "reference"],
            ],
            [
              "code",
              function (e, t, n) {
                if (e.sCount[t] - e.blkIndent < 4) return !1;
                let r = t + 1,
                  i = r;
                for (; r < n; ) {
                  if (e.isEmpty(r)) {
                    r++;
                    continue;
                  }
                  if (e.sCount[r] - e.blkIndent >= 4) {
                    i = ++r;
                    continue;
                  }
                  break;
                }
                e.line = i;
                let s = e.push("code_block", "code", 0);
                return (
                  (s.content = e.getLines(t, i, 4 + e.blkIndent, !1) + "\n"),
                  (s.map = [t, e.line]),
                  !0
                );
              },
            ],
            [
              "fence",
              function (e, t, n, r) {
                let i = e.bMarks[t] + e.tShift[t],
                  s = e.eMarks[t];
                if (e.sCount[t] - e.blkIndent >= 4 || i + 3 > s) return !1;
                let o = e.src.charCodeAt(i);
                if (126 !== o && 96 !== o) return !1;
                let a = i,
                  l = (i = e.skipChars(i, o)) - a;
                if (l < 3) return !1;
                let c = e.src.slice(a, i),
                  u = e.src.slice(i, s);
                if (96 === o && u.indexOf(String.fromCharCode(o)) >= 0)
                  return !1;
                if (r) return !0;
                let d = t,
                  h = !1;
                for (
                  ;
                  !(++d >= n) &&
                  (!((i = a = e.bMarks[d] + e.tShift[d]) < (s = e.eMarks[d])) ||
                    !(e.sCount[d] < e.blkIndent));

                ) {
                  if (
                    !(
                      e.src.charCodeAt(i) !== o ||
                      e.sCount[d] - e.blkIndent >= 4 ||
                      (i = e.skipChars(i, o)) - a < l
                    ) &&
                    !((i = e.skipSpaces(i)) < s)
                  ) {
                    h = !0;
                    break;
                  }
                }
                (l = e.sCount[t]), (e.line = d + +!!h);
                let p = e.push("fence", "code", 0);
                return (
                  (p.info = u),
                  (p.content = e.getLines(t + 1, d, l, !0)),
                  (p.markup = c),
                  (p.map = [t, e.line]),
                  !0
                );
              },
              ["paragraph", "reference", "blockquote", "list"],
            ],
            [
              "blockquote",
              function (e, t, n, r) {
                let i,
                  s = e.bMarks[t] + e.tShift[t],
                  o = e.eMarks[t],
                  a = e.lineMax;
                if (
                  e.sCount[t] - e.blkIndent >= 4 ||
                  62 !== e.src.charCodeAt(s)
                )
                  return !1;
                if (r) return !0;
                let l = [],
                  c = [],
                  u = [],
                  d = [],
                  h = e.md.block.ruler.getRules("blockquote"),
                  p = e.parentType;
                e.parentType = "blockquote";
                let f = !1;
                for (i = t; i < n; i++) {
                  let t = e.sCount[i] < e.blkIndent;
                  if ((s = e.bMarks[i] + e.tShift[i]) >= (o = e.eMarks[i]))
                    break;
                  if (62 === e.src.charCodeAt(s++) && !t) {
                    let t,
                      n,
                      r = e.sCount[i] + 1;
                    32 === e.src.charCodeAt(s)
                      ? (s++, r++, (n = !1), (t = !0))
                      : 9 === e.src.charCodeAt(s)
                        ? ((t = !0),
                          (e.bsCount[i] + r) % 4 == 3
                            ? (s++, r++, (n = !1))
                            : (n = !0))
                        : (t = !1);
                    let a = r;
                    for (l.push(e.bMarks[i]), e.bMarks[i] = s; s < o; ) {
                      let t = e.src.charCodeAt(s);
                      if (em(t))
                        9 === t
                          ? (a += 4 - ((a + e.bsCount[i] + +!!n) % 4))
                          : a++;
                      else break;
                      s++;
                    }
                    (f = s >= o),
                      c.push(e.bsCount[i]),
                      (e.bsCount[i] = e.sCount[i] + 1 + +!!t),
                      u.push(e.sCount[i]),
                      (e.sCount[i] = a - r),
                      d.push(e.tShift[i]),
                      (e.tShift[i] = s - e.bMarks[i]);
                    continue;
                  }
                  if (f) break;
                  let r = !1;
                  for (let t = 0, s = h.length; t < s; t++)
                    if (h[t](e, i, n, !0)) {
                      r = !0;
                      break;
                    }
                  if (r) {
                    (e.lineMax = i),
                      0 !== e.blkIndent &&
                        (l.push(e.bMarks[i]),
                        c.push(e.bsCount[i]),
                        d.push(e.tShift[i]),
                        u.push(e.sCount[i]),
                        (e.sCount[i] -= e.blkIndent));
                    break;
                  }
                  l.push(e.bMarks[i]),
                    c.push(e.bsCount[i]),
                    d.push(e.tShift[i]),
                    u.push(e.sCount[i]),
                    (e.sCount[i] = -1);
                }
                let m = e.blkIndent;
                e.blkIndent = 0;
                let g = e.push("blockquote_open", "blockquote", 1);
                g.markup = ">";
                let y = [t, 0];
                (g.map = y),
                  e.md.block.tokenize(e, t, i),
                  (e.push("blockquote_close", "blockquote", -1).markup = ">"),
                  (e.lineMax = a),
                  (e.parentType = p),
                  (y[1] = e.line);
                for (let n = 0; n < d.length; n++)
                  (e.bMarks[n + t] = l[n]),
                    (e.tShift[n + t] = d[n]),
                    (e.sCount[n + t] = u[n]),
                    (e.bsCount[n + t] = c[n]);
                return (e.blkIndent = m), !0;
              },
              ["paragraph", "reference", "blockquote", "list"],
            ],
            [
              "hr",
              function (e, t, n, r) {
                let i = e.eMarks[t];
                if (e.sCount[t] - e.blkIndent >= 4) return !1;
                let s = e.bMarks[t] + e.tShift[t],
                  o = e.src.charCodeAt(s++);
                if (42 !== o && 45 !== o && 95 !== o) return !1;
                let a = 1;
                for (; s < i; ) {
                  let t = e.src.charCodeAt(s++);
                  if (t !== o && !em(t)) return !1;
                  t === o && a++;
                }
                if (a < 3) return !1;
                if (r) return !0;
                e.line = t + 1;
                let l = e.push("hr", "hr", 0);
                return (
                  (l.map = [t, e.line]),
                  (l.markup = Array(a + 1).join(String.fromCharCode(o))),
                  !0
                );
              },
              ["paragraph", "reference", "blockquote", "list"],
            ],
            [
              "list",
              function (e, t, n, r) {
                let i,
                  s,
                  o,
                  a,
                  l,
                  c,
                  u,
                  d = t,
                  h = !0;
                if (
                  e.sCount[d] - e.blkIndent >= 4 ||
                  (e.listIndent >= 0 &&
                    e.sCount[d] - e.listIndent >= 4 &&
                    e.sCount[d] < e.blkIndent)
                )
                  return !1;
                let p = !1;
                if (
                  (r &&
                    "paragraph" === e.parentType &&
                    e.sCount[d] >= e.blkIndent &&
                    (p = !0),
                  (u = eQ(e, d)) >= 0)
                ) {
                  if (
                    ((l = !0),
                    (o = e.bMarks[d] + e.tShift[d]),
                    (c = Number(e.src.slice(o, u - 1))),
                    p && 1 !== c)
                  )
                    return !1;
                } else {
                  if (!((u = eH(e, d)) >= 0)) return !1;
                  l = !1;
                }
                if (p && e.skipSpaces(u) >= e.eMarks[d]) return !1;
                if (r) return !0;
                let f = e.src.charCodeAt(u - 1),
                  m = e.tokens.length;
                l
                  ? ((a = e.push("ordered_list_open", "ol", 1)),
                    1 !== c && (a.attrs = [["start", c]]))
                  : (a = e.push("bullet_list_open", "ul", 1));
                let g = [d, 0];
                (a.map = g), (a.markup = String.fromCharCode(f));
                let y = !1,
                  v = e.md.block.ruler.getRules("list"),
                  b = e.parentType;
                for (e.parentType = "list"; d < n; ) {
                  let t;
                  (s = u), (i = e.eMarks[d]);
                  let r = e.sCount[d] + u - (e.bMarks[d] + e.tShift[d]),
                    c = r;
                  for (; s < i; ) {
                    let t = e.src.charCodeAt(s);
                    if (9 === t) c += 4 - ((c + e.bsCount[d]) % 4);
                    else if (32 === t) c++;
                    else break;
                    s++;
                  }
                  let p = s;
                  (t = p >= i ? 1 : c - r) > 4 && (t = 1);
                  let m = r + t;
                  (a = e.push("list_item_open", "li", 1)).markup =
                    String.fromCharCode(f);
                  let g = [d, 0];
                  (a.map = g), l && (a.info = e.src.slice(o, u - 1));
                  let b = e.tight,
                    x = e.tShift[d],
                    k = e.sCount[d],
                    w = e.listIndent;
                  if (
                    ((e.listIndent = e.blkIndent),
                    (e.blkIndent = m),
                    (e.tight = !0),
                    (e.tShift[d] = p - e.bMarks[d]),
                    (e.sCount[d] = c),
                    p >= i && e.isEmpty(d + 1)
                      ? (e.line = Math.min(e.line + 2, n))
                      : e.md.block.tokenize(e, d, n, !0),
                    (!e.tight || y) && (h = !1),
                    (y = e.line - d > 1 && e.isEmpty(e.line - 1)),
                    (e.blkIndent = e.listIndent),
                    (e.listIndent = w),
                    (e.tShift[d] = x),
                    (e.sCount[d] = k),
                    (e.tight = b),
                    ((a = e.push("list_item_close", "li", -1)).markup =
                      String.fromCharCode(f)),
                    (d = e.line),
                    (g[1] = d),
                    d >= n ||
                      e.sCount[d] < e.blkIndent ||
                      e.sCount[d] - e.blkIndent >= 4)
                  )
                    break;
                  let _ = !1;
                  for (let t = 0, r = v.length; t < r; t++)
                    if (v[t](e, d, n, !0)) {
                      _ = !0;
                      break;
                    }
                  if (_) break;
                  if (l) {
                    if ((u = eQ(e, d)) < 0) break;
                    o = e.bMarks[d] + e.tShift[d];
                  } else if ((u = eH(e, d)) < 0) break;
                  if (f !== e.src.charCodeAt(u - 1)) break;
                }
                return (
                  ((a = l
                    ? e.push("ordered_list_close", "ol", -1)
                    : e.push("bullet_list_close", "ul", -1)).markup =
                    String.fromCharCode(f)),
                  (g[1] = d),
                  (e.line = d),
                  (e.parentType = b),
                  h &&
                    (function (e, t) {
                      let n = e.level + 2;
                      for (let r = t + 2, i = e.tokens.length - 2; r < i; r++)
                        e.tokens[r].level === n &&
                          "paragraph_open" === e.tokens[r].type &&
                          ((e.tokens[r + 2].hidden = !0),
                          (e.tokens[r].hidden = !0),
                          (r += 2));
                    })(e, m),
                  !0
                );
              },
              ["paragraph", "reference", "blockquote"],
            ],
            [
              "reference",
              function (e, t, n, r) {
                let i,
                  s = e.bMarks[t] + e.tShift[t],
                  o = e.eMarks[t],
                  a = t + 1;
                if (
                  e.sCount[t] - e.blkIndent >= 4 ||
                  91 !== e.src.charCodeAt(s)
                )
                  return !1;
                function l(t) {
                  let n = e.lineMax;
                  if (t >= n || e.isEmpty(t)) return null;
                  let r = !1;
                  if (
                    (e.sCount[t] - e.blkIndent > 3 && (r = !0),
                    e.sCount[t] < 0 && (r = !0),
                    !r)
                  ) {
                    let r = e.md.block.ruler.getRules("reference"),
                      i = e.parentType;
                    e.parentType = "reference";
                    let s = !1;
                    for (let i = 0, o = r.length; i < o; i++)
                      if (r[i](e, t, n, !0)) {
                        s = !0;
                        break;
                      }
                    if (((e.parentType = i), s)) return null;
                  }
                  let i = e.bMarks[t] + e.tShift[t],
                    s = e.eMarks[t];
                  return e.src.slice(i, s + 1);
                }
                let c = e.src.slice(s, o + 1);
                o = c.length;
                let u = -1;
                for (s = 1; s < o; s++) {
                  let e = c.charCodeAt(s);
                  if (91 === e) return !1;
                  if (93 === e) {
                    u = s;
                    break;
                  }
                  if (10 === e) {
                    let e = l(a);
                    null !== e && ((c += e), (o = c.length), a++);
                  } else if (92 === e && ++s < o && 10 === c.charCodeAt(s)) {
                    let e = l(a);
                    null !== e && ((c += e), (o = c.length), a++);
                  }
                }
                if (u < 0 || 58 !== c.charCodeAt(u + 1)) return !1;
                for (s = u + 2; s < o; s++) {
                  let e = c.charCodeAt(s);
                  if (10 === e) {
                    let e = l(a);
                    null !== e && ((c += e), (o = c.length), a++);
                  } else if (em(e));
                  else break;
                }
                let d = e.md.helpers.parseLinkDestination(c, s, o);
                if (!d.ok) return !1;
                let h = e.md.normalizeLink(d.str);
                if (!e.md.validateLink(h)) return !1;
                let p = (s = d.pos),
                  f = a,
                  m = s;
                for (; s < o; s++) {
                  let e = c.charCodeAt(s);
                  if (10 === e) {
                    let e = l(a);
                    null !== e && ((c += e), (o = c.length), a++);
                  } else if (em(e));
                  else break;
                }
                let g = e.md.helpers.parseLinkTitle(c, s, o);
                for (; g.can_continue; ) {
                  let t = l(a);
                  if (null === t) break;
                  (c += t),
                    (s = o),
                    (o = c.length),
                    a++,
                    (g = e.md.helpers.parseLinkTitle(c, s, o, g));
                }
                for (
                  s < o && m !== s && g.ok
                    ? ((i = g.str), (s = g.pos))
                    : ((i = ""), (s = p), (a = f));
                  s < o && em(c.charCodeAt(s));

                )
                  s++;
                if (s < o && 10 !== c.charCodeAt(s) && i)
                  for (i = "", s = p, a = f; s < o && em(c.charCodeAt(s)); )
                    s++;
                if (s < o && 10 !== c.charCodeAt(s)) return !1;
                let y = eb(c.slice(1, u));
                return (
                  !!y &&
                  (!!r ||
                    (void 0 === e.env.references && (e.env.references = {}),
                    void 0 === e.env.references[y] &&
                      (e.env.references[y] = { title: i, href: h }),
                    (e.line = a),
                    !0))
                );
              },
            ],
            [
              "html_block",
              function (e, t, n, r) {
                let i = e.bMarks[t] + e.tShift[t],
                  s = e.eMarks[t];
                if (
                  e.sCount[t] - e.blkIndent >= 4 ||
                  !e.md.options.html ||
                  60 !== e.src.charCodeAt(i)
                )
                  return !1;
                let o = e.src.slice(i, s),
                  a = 0;
                for (; a < eY.length && !eY[a][0].test(o); a++);
                if (a === eY.length) return !1;
                if (r) return eY[a][2];
                let l = t + 1;
                if (!eY[a][1].test(o)) {
                  for (; l < n && !(e.sCount[l] < e.blkIndent); l++)
                    if (
                      ((i = e.bMarks[l] + e.tShift[l]),
                      (s = e.eMarks[l]),
                      (o = e.src.slice(i, s)),
                      eY[a][1].test(o))
                    ) {
                      0 !== o.length && l++;
                      break;
                    }
                }
                e.line = l;
                let c = e.push("html_block", "", 0);
                return (
                  (c.map = [t, l]),
                  (c.content = e.getLines(t, l, e.blkIndent, !0)),
                  !0
                );
              },
              ["paragraph", "reference", "blockquote"],
            ],
            [
              "heading",
              function (e, t, n, r) {
                let i = e.bMarks[t] + e.tShift[t],
                  s = e.eMarks[t];
                if (e.sCount[t] - e.blkIndent >= 4) return !1;
                let o = e.src.charCodeAt(i);
                if (35 !== o || i >= s) return !1;
                let a = 1;
                for (o = e.src.charCodeAt(++i); 35 === o && i < s && a <= 6; )
                  a++, (o = e.src.charCodeAt(++i));
                if (a > 6 || (i < s && !em(o))) return !1;
                if (r) return !0;
                s = e.skipSpacesBack(s, i);
                let l = e.skipCharsBack(s, 35, i);
                l > i && em(e.src.charCodeAt(l - 1)) && (s = l),
                  (e.line = t + 1);
                let c = e.push("heading_open", "h" + String(a), 1);
                (c.markup = "########".slice(0, a)), (c.map = [t, e.line]);
                let u = e.push("inline", "", 0);
                return (
                  (u.content = e.src.slice(i, s).trim()),
                  (u.map = [t, e.line]),
                  (u.children = []),
                  (e.push("heading_close", "h" + String(a), -1).markup =
                    "########".slice(0, a)),
                  !0
                );
              },
              ["paragraph", "reference", "blockquote"],
            ],
            [
              "lheading",
              function (e, t, n) {
                let r,
                  i = e.md.block.ruler.getRules("paragraph");
                if (e.sCount[t] - e.blkIndent >= 4) return !1;
                let s = e.parentType;
                e.parentType = "paragraph";
                let o = 0,
                  a = t + 1;
                for (; a < n && !e.isEmpty(a); a++) {
                  if (e.sCount[a] - e.blkIndent > 3) continue;
                  if (e.sCount[a] >= e.blkIndent) {
                    let t = e.bMarks[a] + e.tShift[a],
                      n = e.eMarks[a];
                    if (
                      t < n &&
                      (45 === (r = e.src.charCodeAt(t)) || 61 === r) &&
                      ((t = e.skipChars(t, r)), (t = e.skipSpaces(t)) >= n)
                    ) {
                      o = 61 === r ? 1 : 2;
                      break;
                    }
                  }
                  if (e.sCount[a] < 0) continue;
                  let t = !1;
                  for (let r = 0, s = i.length; r < s; r++)
                    if (i[r](e, a, n, !0)) {
                      t = !0;
                      break;
                    }
                  if (t) break;
                }
                if (!o) return !1;
                let l = e.getLines(t, a, e.blkIndent, !1).trim();
                e.line = a + 1;
                let c = e.push("heading_open", "h" + String(o), 1);
                (c.markup = String.fromCharCode(r)), (c.map = [t, e.line]);
                let u = e.push("inline", "", 0);
                return (
                  (u.content = l),
                  (u.map = [t, e.line - 1]),
                  (u.children = []),
                  (e.push("heading_close", "h" + String(o), -1).markup =
                    String.fromCharCode(r)),
                  (e.parentType = s),
                  !0
                );
              },
            ],
            [
              "paragraph",
              function (e, t, n) {
                let r = e.md.block.ruler.getRules("paragraph"),
                  i = e.parentType,
                  s = t + 1;
                for (e.parentType = "paragraph"; s < n && !e.isEmpty(s); s++) {
                  if (e.sCount[s] - e.blkIndent > 3 || e.sCount[s] < 0)
                    continue;
                  let t = !1;
                  for (let i = 0, o = r.length; i < o; i++)
                    if (r[i](e, s, n, !0)) {
                      t = !0;
                      break;
                    }
                  if (t) break;
                }
                let o = e.getLines(t, s, e.blkIndent, !1).trim();
                (e.line = s),
                  (e.push("paragraph_open", "p", 1).map = [t, e.line]);
                let a = e.push("inline", "", 0);
                return (
                  (a.content = o),
                  (a.map = [t, e.line]),
                  (a.children = []),
                  e.push("paragraph_close", "p", -1),
                  (e.parentType = i),
                  !0
                );
              },
            ],
          ];
        function eX() {
          this.ruler = new eS();
          for (let e = 0; e < eK.length; e++)
            this.ruler.push(eK[e][0], eK[e][1], {
              alt: (eK[e][2] || []).slice(),
            });
        }
        function eJ(e, t, n, r) {
          (this.src = e),
            (this.env = n),
            (this.md = t),
            (this.tokens = r),
            (this.tokens_meta = Array(r.length)),
            (this.pos = 0),
            (this.posMax = this.src.length),
            (this.level = 0),
            (this.pending = ""),
            (this.pendingLevel = 0),
            (this.cache = {}),
            (this.delimiters = []),
            (this._prev_delimiters = []),
            (this.backticks = {}),
            (this.backticksScanned = !1),
            (this.linkLevel = 0);
        }
        (eX.prototype.tokenize = function (e, t, n) {
          let r = this.ruler.getRules(""),
            i = r.length,
            s = e.md.options.maxNesting,
            o = t,
            a = !1;
          for (
            ;
            o < n &&
            ((e.line = o = e.skipEmptyLines(o)),
            !(o >= n) && !(e.sCount[o] < e.blkIndent));

          ) {
            if (e.level >= s) {
              e.line = n;
              break;
            }
            let t = e.line,
              l = !1;
            for (let s = 0; s < i; s++)
              if ((l = r[s](e, o, n, !1))) {
                if (t >= e.line)
                  throw Error("block rule didn't increment state.line");
                break;
              }
            if (!l) throw Error("none of the block rules matched");
            (e.tight = !a),
              e.isEmpty(e.line - 1) && (a = !0),
              (o = e.line) < n && e.isEmpty(o) && ((a = !0), (e.line = ++o));
          }
        }),
          (eX.prototype.parse = function (e, t, n, r) {
            if (!e) return;
            let i = new this.State(e, t, n, r);
            this.tokenize(i, i.line, i.lineMax);
          }),
          (eX.prototype.State = e$),
          (eJ.prototype.pushPending = function () {
            let e = new eE("text", "", 0);
            return (
              (e.content = this.pending),
              (e.level = this.pendingLevel),
              this.tokens.push(e),
              (this.pending = ""),
              e
            );
          }),
          (eJ.prototype.push = function (e, t, n) {
            this.pending && this.pushPending();
            let r = new eE(e, t, n),
              i = null;
            return (
              n < 0 &&
                (this.level--, (this.delimiters = this._prev_delimiters.pop())),
              (r.level = this.level),
              n > 0 &&
                (this.level++,
                this._prev_delimiters.push(this.delimiters),
                (this.delimiters = []),
                (i = { delimiters: this.delimiters })),
              (this.pendingLevel = this.level),
              this.tokens.push(r),
              this.tokens_meta.push(i),
              r
            );
          }),
          (eJ.prototype.scanDelims = function (e, t) {
            let n = this.posMax,
              r = this.src.charCodeAt(e),
              i = e > 0 ? this.src.charCodeAt(e - 1) : 32,
              s = e;
            for (; s < n && this.src.charCodeAt(s) === r; ) s++;
            let o = s - e,
              a = s < n ? this.src.charCodeAt(s) : 32,
              l = ev(i) || ey(String.fromCharCode(i)),
              c = ev(a) || ey(String.fromCharCode(a)),
              u = eg(i),
              d = eg(a),
              h = !d && (!c || u || l),
              p = !u && (!l || d || c);
            return {
              can_open: h && (t || !p || l),
              can_close: p && (t || !h || c),
              length: o,
            };
          }),
          (eJ.prototype.Token = eE);
        let e0 = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i,
          e1 = [];
        for (let e = 0; e < 256; e++) e1.push(0);
        function e2(e, t) {
          let n,
            r = [],
            i = t.length;
          for (let s = 0; s < i; s++) {
            let i = t[s];
            if (126 !== i.marker || -1 === i.end) continue;
            let o = t[i.end];
            ((n = e.tokens[i.token]).type = "s_open"),
              (n.tag = "s"),
              (n.nesting = 1),
              (n.markup = "~~"),
              (n.content = ""),
              ((n = e.tokens[o.token]).type = "s_close"),
              (n.tag = "s"),
              (n.nesting = -1),
              (n.markup = "~~"),
              (n.content = ""),
              "text" === e.tokens[o.token - 1].type &&
                "~" === e.tokens[o.token - 1].content &&
                r.push(o.token - 1);
          }
          for (; r.length; ) {
            let t = r.pop(),
              i = t + 1;
            for (; i < e.tokens.length && "s_close" === e.tokens[i].type; ) i++;
            t !== --i &&
              ((n = e.tokens[i]),
              (e.tokens[i] = e.tokens[t]),
              (e.tokens[t] = n));
          }
        }
        "\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function (e) {
          e1[e.charCodeAt(0)] = 1;
        });
        let e5 = {
          tokenize: function (e, t) {
            let n,
              r = e.pos,
              i = e.src.charCodeAt(r);
            if (t || 126 !== i) return !1;
            let s = e.scanDelims(e.pos, !0),
              o = s.length,
              a = String.fromCharCode(i);
            if (o < 2) return !1;
            o % 2 && ((e.push("text", "", 0).content = a), o--);
            for (let t = 0; t < o; t += 2)
              (e.push("text", "", 0).content = a + a),
                e.delimiters.push({
                  marker: i,
                  length: 0,
                  token: e.tokens.length - 1,
                  end: -1,
                  open: s.can_open,
                  close: s.can_close,
                });
            return (e.pos += s.length), !0;
          },
          postProcess: function (e) {
            let t = e.tokens_meta,
              n = e.tokens_meta.length;
            e2(e, e.delimiters);
            for (let r = 0; r < n; r++)
              t[r] && t[r].delimiters && e2(e, t[r].delimiters);
          },
        };
        function e3(e, t) {
          let n = t.length;
          for (let r = n - 1; r >= 0; r--) {
            let n = t[r];
            if ((95 !== n.marker && 42 !== n.marker) || -1 === n.end) continue;
            let i = t[n.end],
              s =
                r > 0 &&
                t[r - 1].end === n.end + 1 &&
                t[r - 1].marker === n.marker &&
                t[r - 1].token === n.token - 1 &&
                t[n.end + 1].token === i.token + 1,
              o = String.fromCharCode(n.marker),
              a = e.tokens[n.token];
            (a.type = s ? "strong_open" : "em_open"),
              (a.tag = s ? "strong" : "em"),
              (a.nesting = 1),
              (a.markup = s ? o + o : o),
              (a.content = "");
            let l = e.tokens[i.token];
            (l.type = s ? "strong_close" : "em_close"),
              (l.tag = s ? "strong" : "em"),
              (l.nesting = -1),
              (l.markup = s ? o + o : o),
              (l.content = ""),
              s &&
                ((e.tokens[t[r - 1].token].content = ""),
                (e.tokens[t[n.end + 1].token].content = ""),
                r--);
          }
        }
        let e4 = {
            tokenize: function (e, t) {
              let n = e.pos,
                r = e.src.charCodeAt(n);
              if (t || (95 !== r && 42 !== r)) return !1;
              let i = e.scanDelims(e.pos, 42 === r);
              for (let t = 0; t < i.length; t++)
                (e.push("text", "", 0).content = String.fromCharCode(r)),
                  e.delimiters.push({
                    marker: r,
                    length: i.length,
                    token: e.tokens.length - 1,
                    end: -1,
                    open: i.can_open,
                    close: i.can_close,
                  });
              return (e.pos += i.length), !0;
            },
            postProcess: function (e) {
              let t = e.tokens_meta,
                n = e.tokens_meta.length;
              e3(e, e.delimiters);
              for (let r = 0; r < n; r++)
                t[r] && t[r].delimiters && e3(e, t[r].delimiters);
            },
          },
          e8 =
            /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/,
          e6 = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/,
          e9 = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,
          e7 = /^&([a-z][a-z0-9]{1,31});/i;
        function te(e) {
          let t = {},
            n = e.length;
          if (!n) return;
          let r = 0,
            i = -2,
            s = [];
          for (let o = 0; o < n; o++) {
            let n = e[o];
            if (
              (s.push(0),
              (e[r].marker !== n.marker || i !== n.token - 1) && (r = o),
              (i = n.token),
              (n.length = n.length || 0),
              !n.close)
            )
              continue;
            t.hasOwnProperty(n.marker) ||
              (t[n.marker] = [-1, -1, -1, -1, -1, -1]);
            let a = t[n.marker][3 * !!n.open + (n.length % 3)],
              l = r - s[r] - 1,
              c = l;
            for (; l > a; l -= s[l] + 1) {
              let t = e[l];
              if (t.marker === n.marker && t.open && t.end < 0) {
                let r = !1;
                if (
                  ((t.close || n.open) &&
                    (t.length + n.length) % 3 == 0 &&
                    (t.length % 3 != 0 || n.length % 3 != 0) &&
                    (r = !0),
                  !r)
                ) {
                  let r = l > 0 && !e[l - 1].open ? s[l - 1] + 1 : 0;
                  (s[o] = o - l + r),
                    (s[l] = r),
                    (n.open = !1),
                    (t.end = o),
                    (t.close = !1),
                    (c = -1),
                    (i = -2);
                  break;
                }
              }
            }
            -1 !== c && (t[n.marker][3 * !!n.open + ((n.length || 0) % 3)] = c);
          }
        }
        let tt = [
            [
              "text",
              function (e, t) {
                let n = e.pos;
                for (
                  ;
                  n < e.posMax &&
                  !(function (e) {
                    switch (e) {
                      case 10:
                      case 33:
                      case 35:
                      case 36:
                      case 37:
                      case 38:
                      case 42:
                      case 43:
                      case 45:
                      case 58:
                      case 60:
                      case 61:
                      case 62:
                      case 64:
                      case 91:
                      case 92:
                      case 93:
                      case 94:
                      case 95:
                      case 96:
                      case 123:
                      case 125:
                      case 126:
                        return !0;
                      default:
                        return !1;
                    }
                  })(e.src.charCodeAt(n));

                )
                  n++;
                return (
                  n !== e.pos &&
                  (t || (e.pending += e.src.slice(e.pos, n)), (e.pos = n), !0)
                );
              },
            ],
            [
              "linkify",
              function (e, t) {
                if (!e.md.options.linkify || e.linkLevel > 0) return !1;
                let n = e.pos;
                if (
                  n + 3 > e.posMax ||
                  58 !== e.src.charCodeAt(n) ||
                  47 !== e.src.charCodeAt(n + 1) ||
                  47 !== e.src.charCodeAt(n + 2)
                )
                  return !1;
                let r = e.pending.match(e0);
                if (!r) return !1;
                let i = r[1],
                  s = e.md.linkify.matchAtStart(e.src.slice(n - i.length));
                if (!s) return !1;
                let o = s.url;
                if (o.length <= i.length) return !1;
                o = o.replace(/\*+$/, "");
                let a = e.md.normalizeLink(o);
                if (!e.md.validateLink(a)) return !1;
                if (!t) {
                  e.pending = e.pending.slice(0, -i.length);
                  let t = e.push("link_open", "a", 1);
                  (t.attrs = [["href", a]]),
                    (t.markup = "linkify"),
                    (t.info = "auto"),
                    (e.push("text", "", 0).content = e.md.normalizeLinkText(o));
                  let n = e.push("link_close", "a", -1);
                  (n.markup = "linkify"), (n.info = "auto");
                }
                return (e.pos += o.length - i.length), !0;
              },
            ],
            [
              "newline",
              function (e, t) {
                let n = e.pos;
                if (10 !== e.src.charCodeAt(n)) return !1;
                let r = e.pending.length - 1,
                  i = e.posMax;
                if (!t)
                  if (r >= 0 && 32 === e.pending.charCodeAt(r))
                    if (r >= 1 && 32 === e.pending.charCodeAt(r - 1)) {
                      let t = r - 1;
                      for (; t >= 1 && 32 === e.pending.charCodeAt(t - 1); )
                        t--;
                      (e.pending = e.pending.slice(0, t)),
                        e.push("hardbreak", "br", 0);
                    } else
                      (e.pending = e.pending.slice(0, -1)),
                        e.push("softbreak", "br", 0);
                  else e.push("softbreak", "br", 0);
                for (n++; n < i && em(e.src.charCodeAt(n)); ) n++;
                return (e.pos = n), !0;
              },
            ],
            [
              "escape",
              function (e, t) {
                let n = e.pos,
                  r = e.posMax;
                if (92 !== e.src.charCodeAt(n) || ++n >= r) return !1;
                let i = e.src.charCodeAt(n);
                if (10 === i) {
                  for (
                    t || e.push("hardbreak", "br", 0), n++;
                    n < r && em((i = e.src.charCodeAt(n)));

                  )
                    n++;
                  return (e.pos = n), !0;
                }
                let s = e.src[n];
                if (i >= 55296 && i <= 56319 && n + 1 < r) {
                  let t = e.src.charCodeAt(n + 1);
                  t >= 56320 && t <= 57343 && ((s += e.src[n + 1]), n++);
                }
                let o = "\\" + s;
                if (!t) {
                  let t = e.push("text_special", "", 0);
                  i < 256 && 0 !== e1[i] ? (t.content = s) : (t.content = o),
                    (t.markup = o),
                    (t.info = "escape");
                }
                return (e.pos = n + 1), !0;
              },
            ],
            [
              "backticks",
              function (e, t) {
                let n,
                  r = e.pos;
                if (96 !== e.src.charCodeAt(r)) return !1;
                let i = r;
                r++;
                let s = e.posMax;
                for (; r < s && 96 === e.src.charCodeAt(r); ) r++;
                let o = e.src.slice(i, r),
                  a = o.length;
                if (e.backticksScanned && (e.backticks[a] || 0) <= i)
                  return t || (e.pending += o), (e.pos += a), !0;
                let l = r;
                for (; -1 !== (n = e.src.indexOf("`", l)); ) {
                  for (l = n + 1; l < s && 96 === e.src.charCodeAt(l); ) l++;
                  let i = l - n;
                  if (i === a) {
                    if (!t) {
                      let t = e.push("code_inline", "code", 0);
                      (t.markup = o),
                        (t.content = e.src
                          .slice(r, n)
                          .replace(/\n/g, " ")
                          .replace(/^ (.+) $/, "$1"));
                    }
                    return (e.pos = l), !0;
                  }
                  e.backticks[i] = n;
                }
                return (
                  (e.backticksScanned = !0),
                  t || (e.pending += o),
                  (e.pos += a),
                  !0
                );
              },
            ],
            ["strikethrough", e5.tokenize],
            ["emphasis", e4.tokenize],
            [
              "link",
              function (e, t) {
                let n,
                  r,
                  i,
                  s,
                  o = "",
                  a = "",
                  l = e.pos,
                  c = !0;
                if (91 !== e.src.charCodeAt(e.pos)) return !1;
                let u = e.pos,
                  d = e.posMax,
                  h = e.pos + 1,
                  p = e.md.helpers.parseLinkLabel(e, e.pos, !0);
                if (p < 0) return !1;
                let f = p + 1;
                if (f < d && 40 === e.src.charCodeAt(f)) {
                  for (
                    c = !1, f++;
                    f < d && (em((n = e.src.charCodeAt(f))) || 10 === n);
                    f++
                  );
                  if (f >= d) return !1;
                  if (
                    ((l = f),
                    (i = e.md.helpers.parseLinkDestination(e.src, f, e.posMax))
                      .ok)
                  ) {
                    for (
                      o = e.md.normalizeLink(i.str),
                        e.md.validateLink(o) ? (f = i.pos) : (o = ""),
                        l = f;
                      f < d && (em((n = e.src.charCodeAt(f))) || 10 === n);
                      f++
                    );
                    if (
                      ((i = e.md.helpers.parseLinkTitle(e.src, f, e.posMax)),
                      f < d && l !== f && i.ok)
                    )
                      for (
                        a = i.str, f = i.pos;
                        f < d && (em((n = e.src.charCodeAt(f))) || 10 === n);
                        f++
                      );
                  }
                  (f >= d || 41 !== e.src.charCodeAt(f)) && (c = !0), f++;
                }
                if (c) {
                  if (void 0 === e.env.references) return !1;
                  if (
                    (f < d && 91 === e.src.charCodeAt(f)
                      ? ((l = f + 1),
                        (f = e.md.helpers.parseLinkLabel(e, f)) >= 0
                          ? (r = e.src.slice(l, f++))
                          : (f = p + 1))
                      : (f = p + 1),
                    r || (r = e.src.slice(h, p)),
                    !(s = e.env.references[eb(r)]))
                  )
                    return (e.pos = u), !1;
                  (o = s.href), (a = s.title);
                }
                if (!t) {
                  (e.pos = h), (e.posMax = p);
                  let t = e.push("link_open", "a", 1),
                    n = [["href", o]];
                  (t.attrs = n),
                    a && n.push(["title", a]),
                    e.linkLevel++,
                    e.md.inline.tokenize(e),
                    e.linkLevel--,
                    e.push("link_close", "a", -1);
                }
                return (e.pos = f), (e.posMax = d), !0;
              },
            ],
            [
              "image",
              function (e, t) {
                let n,
                  r,
                  i,
                  s,
                  o,
                  a,
                  l,
                  c,
                  u = "",
                  d = e.pos,
                  h = e.posMax;
                if (
                  33 !== e.src.charCodeAt(e.pos) ||
                  91 !== e.src.charCodeAt(e.pos + 1)
                )
                  return !1;
                let p = e.pos + 2,
                  f = e.md.helpers.parseLinkLabel(e, e.pos + 1, !1);
                if (f < 0) return !1;
                if ((s = f + 1) < h && 40 === e.src.charCodeAt(s)) {
                  for (
                    s++;
                    s < h && (em((n = e.src.charCodeAt(s))) || 10 === n);
                    s++
                  );
                  if (s >= h) return !1;
                  for (
                    c = s,
                      (a = e.md.helpers.parseLinkDestination(
                        e.src,
                        s,
                        e.posMax,
                      )).ok &&
                        ((u = e.md.normalizeLink(a.str)),
                        e.md.validateLink(u) ? (s = a.pos) : (u = "")),
                      c = s;
                    s < h && (em((n = e.src.charCodeAt(s))) || 10 === n);
                    s++
                  );
                  if (
                    ((a = e.md.helpers.parseLinkTitle(e.src, s, e.posMax)),
                    s < h && c !== s && a.ok)
                  )
                    for (
                      l = a.str, s = a.pos;
                      s < h && (em((n = e.src.charCodeAt(s))) || 10 === n);
                      s++
                    );
                  else l = "";
                  if (s >= h || 41 !== e.src.charCodeAt(s))
                    return (e.pos = d), !1;
                  s++;
                } else {
                  if (void 0 === e.env.references) return !1;
                  if (
                    (s < h && 91 === e.src.charCodeAt(s)
                      ? ((c = s + 1),
                        (s = e.md.helpers.parseLinkLabel(e, s)) >= 0
                          ? (i = e.src.slice(c, s++))
                          : (s = f + 1))
                      : (s = f + 1),
                    i || (i = e.src.slice(p, f)),
                    !(o = e.env.references[eb(i)]))
                  )
                    return (e.pos = d), !1;
                  (u = o.href), (l = o.title);
                }
                if (!t) {
                  r = e.src.slice(p, f);
                  let t = [];
                  e.md.inline.parse(r, e.md, e.env, t);
                  let n = e.push("image", "img", 0),
                    i = [
                      ["src", u],
                      ["alt", ""],
                    ];
                  (n.attrs = i),
                    (n.children = t),
                    (n.content = r),
                    l && i.push(["title", l]);
                }
                return (e.pos = s), (e.posMax = h), !0;
              },
            ],
            [
              "autolink",
              function (e, t) {
                let n = e.pos;
                if (60 !== e.src.charCodeAt(n)) return !1;
                let r = e.pos,
                  i = e.posMax;
                for (;;) {
                  if (++n >= i) return !1;
                  let t = e.src.charCodeAt(n);
                  if (60 === t) return !1;
                  if (62 === t) break;
                }
                let s = e.src.slice(r + 1, n);
                if (e6.test(s)) {
                  let n = e.md.normalizeLink(s);
                  if (!e.md.validateLink(n)) return !1;
                  if (!t) {
                    let t = e.push("link_open", "a", 1);
                    (t.attrs = [["href", n]]),
                      (t.markup = "autolink"),
                      (t.info = "auto"),
                      (e.push("text", "", 0).content =
                        e.md.normalizeLinkText(s));
                    let r = e.push("link_close", "a", -1);
                    (r.markup = "autolink"), (r.info = "auto");
                  }
                  return (e.pos += s.length + 2), !0;
                }
                if (e8.test(s)) {
                  let n = e.md.normalizeLink("mailto:" + s);
                  if (!e.md.validateLink(n)) return !1;
                  if (!t) {
                    let t = e.push("link_open", "a", 1);
                    (t.attrs = [["href", n]]),
                      (t.markup = "autolink"),
                      (t.info = "auto"),
                      (e.push("text", "", 0).content =
                        e.md.normalizeLinkText(s));
                    let r = e.push("link_close", "a", -1);
                    (r.markup = "autolink"), (r.info = "auto");
                  }
                  return (e.pos += s.length + 2), !0;
                }
                return !1;
              },
            ],
            [
              "html_inline",
              function (e, t) {
                if (!e.md.options.html) return !1;
                let n = e.posMax,
                  r = e.pos;
                if (60 !== e.src.charCodeAt(r) || r + 2 >= n) return !1;
                let i = e.src.charCodeAt(r + 1);
                if (
                  33 !== i &&
                  63 !== i &&
                  47 !== i &&
                  !(function (e) {
                    let t = 32 | e;
                    return t >= 97 && t <= 122;
                  })(i)
                )
                  return !1;
                let s = e.src.slice(r).match(eZ);
                if (!s) return !1;
                if (!t) {
                  var o, a;
                  let t = e.push("html_inline", "", 0);
                  (t.content = s[0]),
                    (o = t.content),
                    /^<a[>\s]/i.test(o) && e.linkLevel++,
                    (a = t.content),
                    /^<\/a\s*>/i.test(a) && e.linkLevel--;
                }
                return (e.pos += s[0].length), !0;
              },
            ],
            [
              "entity",
              function (e, t) {
                let n = e.pos,
                  r = e.posMax;
                if (38 !== e.src.charCodeAt(n) || n + 1 >= r) return !1;
                if (35 === e.src.charCodeAt(n + 1)) {
                  let r = e.src.slice(n).match(e9);
                  if (r) {
                    if (!t) {
                      let t =
                          "x" === r[1][0].toLowerCase()
                            ? parseInt(r[1].slice(1), 16)
                            : parseInt(r[1], 10),
                        n = e.push("text_special", "", 0);
                      (n.content = et(t) ? en(t) : en(65533)),
                        (n.markup = r[0]),
                        (n.info = "entity");
                    }
                    return (e.pos += r[0].length), !0;
                  }
                } else {
                  let r = e.src.slice(n).match(e7);
                  if (r) {
                    let n = W(r[0]);
                    if (n !== r[0]) {
                      if (!t) {
                        let t = e.push("text_special", "", 0);
                        (t.content = n), (t.markup = r[0]), (t.info = "entity");
                      }
                      return (e.pos += r[0].length), !0;
                    }
                  }
                }
                return !1;
              },
            ],
          ],
          tn = [
            [
              "balance_pairs",
              function (e) {
                let t = e.tokens_meta,
                  n = e.tokens_meta.length;
                te(e.delimiters);
                for (let e = 0; e < n; e++)
                  t[e] && t[e].delimiters && te(t[e].delimiters);
              },
            ],
            ["strikethrough", e5.postProcess],
            ["emphasis", e4.postProcess],
            [
              "fragments_join",
              function (e) {
                let t,
                  n,
                  r = 0,
                  i = e.tokens,
                  s = e.tokens.length;
                for (t = n = 0; t < s; t++)
                  i[t].nesting < 0 && r--,
                    (i[t].level = r),
                    i[t].nesting > 0 && r++,
                    "text" === i[t].type &&
                    t + 1 < s &&
                    "text" === i[t + 1].type
                      ? (i[t + 1].content = i[t].content + i[t + 1].content)
                      : (t !== n && (i[n] = i[t]), n++);
                t !== n && (i.length = n);
              },
            ],
          ];
        function tr() {
          this.ruler = new eS();
          for (let e = 0; e < tt.length; e++)
            this.ruler.push(tt[e][0], tt[e][1]);
          this.ruler2 = new eS();
          for (let e = 0; e < tn.length; e++)
            this.ruler2.push(tn[e][0], tn[e][1]);
        }
        function ti(e) {
          let t = Array.prototype.slice.call(arguments, 1);
          return (
            t.forEach(function (t) {
              t &&
                Object.keys(t).forEach(function (n) {
                  e[n] = t[n];
                });
            }),
            e
          );
        }
        function ts(e) {
          return Object.prototype.toString.call(e);
        }
        function to(e) {
          return "[object Function]" === ts(e);
        }
        function ta(e) {
          return e.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
        }
        (tr.prototype.skipToken = function (e) {
          let t = e.pos,
            n = this.ruler.getRules(""),
            r = n.length,
            i = e.md.options.maxNesting,
            s = e.cache;
          if (void 0 !== s[t]) {
            e.pos = s[t];
            return;
          }
          let o = !1;
          if (e.level < i) {
            for (let i = 0; i < r; i++)
              if ((e.level++, (o = n[i](e, !0)), e.level--, o)) {
                if (t >= e.pos)
                  throw Error("inline rule didn't increment state.pos");
                break;
              }
          } else e.pos = e.posMax;
          !o && e.pos++, (s[t] = e.pos);
        }),
          (tr.prototype.tokenize = function (e) {
            let t = this.ruler.getRules(""),
              n = t.length,
              r = e.posMax,
              i = e.md.options.maxNesting;
            for (; e.pos < r; ) {
              let s = e.pos,
                o = !1;
              if (e.level < i) {
                for (let r = 0; r < n; r++)
                  if ((o = t[r](e, !1))) {
                    if (s >= e.pos)
                      throw Error("inline rule didn't increment state.pos");
                    break;
                  }
              }
              if (o) {
                if (e.pos >= r) break;
                continue;
              }
              e.pending += e.src[e.pos++];
            }
            e.pending && e.pushPending();
          }),
          (tr.prototype.parse = function (e, t, n, r) {
            let i = new this.State(e, t, n, r);
            this.tokenize(i);
            let s = this.ruler2.getRules(""),
              o = s.length;
            for (let e = 0; e < o; e++) s[e](i);
          }),
          (tr.prototype.State = eJ);
        let tl = { fuzzyLink: !0, fuzzyEmail: !0, fuzzyIP: !1 },
          tc = {
            "http:": {
              validate: function (e, t, n) {
                let r = e.slice(t);
                return (n.re.http ||
                  (n.re.http = RegExp(
                    "^\\/\\/" +
                      n.re.src_auth +
                      n.re.src_host_port_strict +
                      n.re.src_path,
                    "i",
                  )),
                n.re.http.test(r))
                  ? r.match(n.re.http)[0].length
                  : 0;
              },
            },
            "https:": "http:",
            "ftp:": "http:",
            "//": {
              validate: function (e, t, n) {
                let r = e.slice(t);
                return (n.re.no_http ||
                  (n.re.no_http = RegExp(
                    "^" +
                      n.re.src_auth +
                      "(?:localhost|(?:(?:" +
                      n.re.src_domain +
                      ")\\.)+" +
                      n.re.src_domain_root +
                      ")" +
                      n.re.src_port +
                      n.re.src_host_terminator +
                      n.re.src_path,
                    "i",
                  )),
                n.re.no_http.test(r))
                  ? (t >= 3 && ":" === e[t - 3]) || (t >= 3 && "/" === e[t - 3])
                    ? 0
                    : r.match(n.re.no_http)[0].length
                  : 0;
              },
            },
            "mailto:": {
              validate: function (e, t, n) {
                let r = e.slice(t);
                return (n.re.mailto ||
                  (n.re.mailto = RegExp(
                    "^" + n.re.src_email_name + "@" + n.re.src_host_strict,
                    "i",
                  )),
                n.re.mailto.test(r))
                  ? r.match(n.re.mailto)[0].length
                  : 0;
              },
            },
          },
          tu =
            "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split(
              "|",
            );
        function td() {
          return function (e, t) {
            t.normalize(e);
          };
        }
        function th(e) {
          let t = (e.re = (function (e) {
              let t = {};
              (e = e || {}),
                (t.src_Any = M.source),
                (t.src_Cc = L.source),
                (t.src_Z = F.source),
                (t.src_P = P.source),
                (t.src_ZPCc = [t.src_Z, t.src_P, t.src_Cc].join("|")),
                (t.src_ZCc = [t.src_Z, t.src_Cc].join("|"));
              let n = "[><｜]";
              return (
                (t.src_pseudo_letter =
                  "(?:(?!" + n + "|" + t.src_ZPCc + ")" + t.src_Any + ")"),
                (t.src_ip4 =
                  "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"),
                (t.src_auth = "(?:(?:(?!" + t.src_ZCc + "|[@/\\[\\]()]).)+@)?"),
                (t.src_port =
                  "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?"),
                (t.src_host_terminator =
                  "(?=$|" +
                  n +
                  "|" +
                  t.src_ZPCc +
                  ")(?!" +
                  (e["---"] ? "-(?!--)|" : "-|") +
                  "_|:\\d|\\.-|\\.(?!$|" +
                  t.src_ZPCc +
                  "))"),
                (t.src_path =
                  "(?:[/?#](?:(?!" +
                  t.src_ZCc +
                  "|" +
                  n +
                  "|[()[\\]{}.,\"'?!\\-;]).|\\[(?:(?!" +
                  t.src_ZCc +
                  "|\\]).)*\\]|\\((?:(?!" +
                  t.src_ZCc +
                  "|[)]).)*\\)|\\{(?:(?!" +
                  t.src_ZCc +
                  '|[}]).)*\\}|\\"(?:(?!' +
                  t.src_ZCc +
                  '|["]).)+\\"|\\\'(?:(?!' +
                  t.src_ZCc +
                  "|[']).)+\\'|\\'(?=" +
                  t.src_pseudo_letter +
                  "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" +
                  t.src_ZCc +
                  "|[.]|$)|" +
                  (e["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") +
                  ",(?!" +
                  t.src_ZCc +
                  "|$)|;(?!" +
                  t.src_ZCc +
                  "|$)|\\!+(?!" +
                  t.src_ZCc +
                  "|[!]|$)|\\?(?!" +
                  t.src_ZCc +
                  "|[?]|$))+|\\/)?"),
                (t.src_email_name =
                  '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*'),
                (t.src_xn = "xn--[a-z0-9\\-]{1,59}"),
                (t.src_domain_root =
                  "(?:" + t.src_xn + "|" + t.src_pseudo_letter + "{1,63})"),
                (t.src_domain =
                  "(?:" +
                  t.src_xn +
                  "|(?:" +
                  t.src_pseudo_letter +
                  ")|(?:" +
                  t.src_pseudo_letter +
                  "(?:-|" +
                  t.src_pseudo_letter +
                  "){0,61}" +
                  t.src_pseudo_letter +
                  "))"),
                (t.src_host =
                  "(?:(?:(?:(?:" +
                  t.src_domain +
                  ")\\.)*" +
                  t.src_domain +
                  "))"),
                (t.tpl_host_fuzzy =
                  "(?:" +
                  t.src_ip4 +
                  "|(?:(?:(?:" +
                  t.src_domain +
                  ")\\.)+(?:%TLDS%)))"),
                (t.tpl_host_no_ip_fuzzy =
                  "(?:(?:(?:" + t.src_domain + ")\\.)+(?:%TLDS%))"),
                (t.src_host_strict = t.src_host + t.src_host_terminator),
                (t.tpl_host_fuzzy_strict =
                  t.tpl_host_fuzzy + t.src_host_terminator),
                (t.src_host_port_strict =
                  t.src_host + t.src_port + t.src_host_terminator),
                (t.tpl_host_port_fuzzy_strict =
                  t.tpl_host_fuzzy + t.src_port + t.src_host_terminator),
                (t.tpl_host_port_no_ip_fuzzy_strict =
                  t.tpl_host_no_ip_fuzzy + t.src_port + t.src_host_terminator),
                (t.tpl_host_fuzzy_test =
                  "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" +
                  t.src_ZPCc +
                  "|>|$))"),
                (t.tpl_email_fuzzy =
                  "(^|" +
                  n +
                  '|"|\\(|' +
                  t.src_ZCc +
                  ")(" +
                  t.src_email_name +
                  "@" +
                  t.tpl_host_fuzzy_strict +
                  ")"),
                (t.tpl_link_fuzzy =
                  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" +
                  t.src_ZPCc +
                  "))((?![$+<=>^`|｜])" +
                  t.tpl_host_port_fuzzy_strict +
                  t.src_path +
                  ")"),
                (t.tpl_link_no_ip_fuzzy =
                  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" +
                  t.src_ZPCc +
                  "))((?![$+<=>^`|｜])" +
                  t.tpl_host_port_no_ip_fuzzy_strict +
                  t.src_path +
                  ")"),
                t
              );
            })(e.__opts__)),
            n = e.__tlds__.slice();
          function r(e) {
            return e.replace("%TLDS%", t.src_tlds);
          }
          e.onCompile(),
            e.__tlds_replaced__ ||
              n.push(
                "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]",
              ),
            n.push(t.src_xn),
            (t.src_tlds = n.join("|")),
            (t.email_fuzzy = RegExp(r(t.tpl_email_fuzzy), "i")),
            (t.link_fuzzy = RegExp(r(t.tpl_link_fuzzy), "i")),
            (t.link_no_ip_fuzzy = RegExp(r(t.tpl_link_no_ip_fuzzy), "i")),
            (t.host_fuzzy_test = RegExp(r(t.tpl_host_fuzzy_test), "i"));
          let i = [];
          function s(e, t) {
            throw Error('(LinkifyIt) Invalid schema "' + e + '": ' + t);
          }
          (e.__compiled__ = {}),
            Object.keys(e.__schemas__).forEach(function (t) {
              let n = e.__schemas__[t];
              if (null === n) return;
              let r = { validate: null, link: null };
              if (((e.__compiled__[t] = r), "[object Object]" === ts(n))) {
                if ("[object RegExp]" === ts(n.validate)) {
                  var o;
                  (o = n.validate),
                    (r.validate = function (e, t) {
                      let n = e.slice(t);
                      return o.test(n) ? n.match(o)[0].length : 0;
                    });
                } else to(n.validate) ? (r.validate = n.validate) : s(t, n);
                to(n.normalize)
                  ? (r.normalize = n.normalize)
                  : n.normalize
                    ? s(t, n)
                    : (r.normalize = td());
                return;
              }
              if ("[object String]" === ts(n)) return void i.push(t);
              s(t, n);
            }),
            i.forEach(function (t) {
              e.__compiled__[e.__schemas__[t]] &&
                ((e.__compiled__[t].validate =
                  e.__compiled__[e.__schemas__[t]].validate),
                (e.__compiled__[t].normalize =
                  e.__compiled__[e.__schemas__[t]].normalize));
            }),
            (e.__compiled__[""] = { validate: null, normalize: td() });
          let o = Object.keys(e.__compiled__)
            .filter(function (t) {
              return t.length > 0 && e.__compiled__[t];
            })
            .map(ta)
            .join("|");
          (e.re.schema_test = RegExp(
            "(^|(?!_)(?:[><｜]|" + t.src_ZPCc + "))(" + o + ")",
            "i",
          )),
            (e.re.schema_search = RegExp(
              "(^|(?!_)(?:[><｜]|" + t.src_ZPCc + "))(" + o + ")",
              "ig",
            )),
            (e.re.schema_at_start = RegExp(
              "^" + e.re.schema_search.source,
              "i",
            )),
            (e.re.pretest = RegExp(
              "(" +
                e.re.schema_test.source +
                ")|(" +
                e.re.host_fuzzy_test.source +
                ")|@",
              "i",
            )),
            (e.__index__ = -1),
            (e.__text_cache__ = "");
        }
        function tp(e, t) {
          let n = e.__index__,
            r = e.__last_index__,
            i = e.__text_cache__.slice(n, r);
          (this.schema = e.__schema__.toLowerCase()),
            (this.index = n + t),
            (this.lastIndex = r + t),
            (this.raw = i),
            (this.text = i),
            (this.url = i);
        }
        function tf(e, t) {
          let n = new tp(e, t);
          return e.__compiled__[n.schema].normalize(n, e), n;
        }
        function tm(e, t) {
          if (!(this instanceof tm)) return new tm(e, t);
          !t &&
            Object.keys(e || {}).reduce(function (e, t) {
              return e || tl.hasOwnProperty(t);
            }, !1) &&
            ((t = e), (e = {})),
            (this.__opts__ = ti({}, tl, t)),
            (this.__index__ = -1),
            (this.__last_index__ = -1),
            (this.__schema__ = ""),
            (this.__text_cache__ = ""),
            (this.__schemas__ = ti({}, tc, e)),
            (this.__compiled__ = {}),
            (this.__tlds__ = tu),
            (this.__tlds_replaced__ = !1),
            (this.re = {}),
            th(this);
        }
        (tm.prototype.add = function (e, t) {
          return (this.__schemas__[e] = t), th(this), this;
        }),
          (tm.prototype.set = function (e) {
            return (this.__opts__ = ti(this.__opts__, e)), this;
          }),
          (tm.prototype.test = function (e) {
            let t, n, r, i, s, o, a, l;
            if (((this.__text_cache__ = e), (this.__index__ = -1), !e.length))
              return !1;
            if (this.re.schema_test.test(e)) {
              for (
                (a = this.re.schema_search).lastIndex = 0;
                null !== (t = a.exec(e));

              )
                if ((i = this.testSchemaAt(e, t[2], a.lastIndex))) {
                  (this.__schema__ = t[2]),
                    (this.__index__ = t.index + t[1].length),
                    (this.__last_index__ = t.index + t[0].length + i);
                  break;
                }
            }
            return (
              this.__opts__.fuzzyLink &&
                this.__compiled__["http:"] &&
                (l = e.search(this.re.host_fuzzy_test)) >= 0 &&
                (this.__index__ < 0 || l < this.__index__) &&
                null !==
                  (n = e.match(
                    this.__opts__.fuzzyIP
                      ? this.re.link_fuzzy
                      : this.re.link_no_ip_fuzzy,
                  )) &&
                ((s = n.index + n[1].length),
                (this.__index__ < 0 || s < this.__index__) &&
                  ((this.__schema__ = ""),
                  (this.__index__ = s),
                  (this.__last_index__ = n.index + n[0].length))),
              this.__opts__.fuzzyEmail &&
                this.__compiled__["mailto:"] &&
                e.indexOf("@") >= 0 &&
                null !== (r = e.match(this.re.email_fuzzy)) &&
                ((s = r.index + r[1].length),
                (o = r.index + r[0].length),
                (this.__index__ < 0 ||
                  s < this.__index__ ||
                  (s === this.__index__ && o > this.__last_index__)) &&
                  ((this.__schema__ = "mailto:"),
                  (this.__index__ = s),
                  (this.__last_index__ = o))),
              this.__index__ >= 0
            );
          }),
          (tm.prototype.pretest = function (e) {
            return this.re.pretest.test(e);
          }),
          (tm.prototype.testSchemaAt = function (e, t, n) {
            return this.__compiled__[t.toLowerCase()]
              ? this.__compiled__[t.toLowerCase()].validate(e, n, this)
              : 0;
          }),
          (tm.prototype.match = function (e) {
            let t = [],
              n = 0;
            this.__index__ >= 0 &&
              this.__text_cache__ === e &&
              (t.push(tf(this, n)), (n = this.__last_index__));
            let r = n ? e.slice(n) : e;
            for (; this.test(r); )
              t.push(tf(this, n)),
                (r = r.slice(this.__last_index__)),
                (n += this.__last_index__);
            return t.length ? t : null;
          }),
          (tm.prototype.matchAtStart = function (e) {
            if (((this.__text_cache__ = e), (this.__index__ = -1), !e.length))
              return null;
            let t = this.re.schema_at_start.exec(e);
            if (!t) return null;
            let n = this.testSchemaAt(e, t[2], t[0].length);
            return n
              ? ((this.__schema__ = t[2]),
                (this.__index__ = t.index + t[1].length),
                (this.__last_index__ = t.index + t[0].length + n),
                tf(this, 0))
              : null;
          }),
          (tm.prototype.tlds = function (e, t) {
            return (
              ((e = Array.isArray(e) ? e : [e]), t)
                ? (this.__tlds__ = this.__tlds__
                    .concat(e)
                    .sort()
                    .filter(function (e, t, n) {
                      return e !== n[t - 1];
                    })
                    .reverse())
                : ((this.__tlds__ = e.slice()), (this.__tlds_replaced__ = !0)),
              th(this),
              this
            );
          }),
          (tm.prototype.normalize = function (e) {
            e.schema || (e.url = "http://" + e.url),
              "mailto:" !== e.schema ||
                /^mailto:/i.test(e.url) ||
                (e.url = "mailto:" + e.url);
          }),
          (tm.prototype.onCompile = function () {});
        let tg = /^xn--/,
          ty = /[^\0-\x7F]/,
          tv = /[\x2E\u3002\uFF0E\uFF61]/g,
          tb = {
            overflow: "Overflow: input needs wider integers to process",
            "not-basic": "Illegal input >= 0x80 (not a basic code point)",
            "invalid-input": "Invalid input",
          },
          tx = Math.floor,
          tk = String.fromCharCode;
        function tw(e) {
          throw RangeError(tb[e]);
        }
        function t_(e, t) {
          let n = e.split("@"),
            r = "";
          return (
            n.length > 1 && ((r = n[0] + "@"), (e = n[1])),
            r +
              (function (e, t) {
                let n = [],
                  r = e.length;
                for (; r--; ) n[r] = t(e[r]);
                return n;
              })((e = e.replace(tv, ".")).split("."), t).join(".")
          );
        }
        let tO = function (e, t) {
            return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
          },
          tT = function (e, t, n) {
            let r = 0;
            for (e = n ? tx(e / 700) : e >> 1, e += tx(e / t); e > 455; r += 36)
              e = tx(e / 35);
            return tx(r + (36 * e) / (e + 38));
          },
          tS = function (e) {
            let t = [],
              n = e.length,
              r = 0,
              i = 128,
              s = 72,
              o = e.lastIndexOf("-");
            o < 0 && (o = 0);
            for (let n = 0; n < o; ++n)
              e.charCodeAt(n) >= 128 && tw("not-basic"),
                t.push(e.charCodeAt(n));
            for (let l = o > 0 ? o + 1 : 0; l < n; ) {
              let o = r;
              for (let t = 1, i = 36; ; i += 36) {
                var a;
                l >= n && tw("invalid-input");
                let o =
                  (a = e.charCodeAt(l++)) >= 48 && a < 58
                    ? 26 + (a - 48)
                    : a >= 65 && a < 91
                      ? a - 65
                      : a >= 97 && a < 123
                        ? a - 97
                        : 36;
                o >= 36 && tw("invalid-input"),
                  o > tx((0x7fffffff - r) / t) && tw("overflow"),
                  (r += o * t);
                let c = i <= s ? 1 : i >= s + 26 ? 26 : i - s;
                if (o < c) break;
                let u = 36 - c;
                t > tx(0x7fffffff / u) && tw("overflow"), (t *= u);
              }
              let c = t.length + 1;
              (s = tT(r - o, c, 0 == o)),
                tx(r / c) > 0x7fffffff - i && tw("overflow"),
                (i += tx(r / c)),
                (r %= c),
                t.splice(r++, 0, i);
            }
            return String.fromCodePoint(...t);
          },
          tE = function (e) {
            let t = [],
              n = (e = (function (e) {
                let t = [],
                  n = 0,
                  r = e.length;
                for (; n < r; ) {
                  let i = e.charCodeAt(n++);
                  if (i >= 55296 && i <= 56319 && n < r) {
                    let r = e.charCodeAt(n++);
                    (64512 & r) == 56320
                      ? t.push(((1023 & i) << 10) + (1023 & r) + 65536)
                      : (t.push(i), n--);
                  } else t.push(i);
                }
                return t;
              })(e)).length,
              r = 128,
              i = 0,
              s = 72;
            for (let n of e) n < 128 && t.push(tk(n));
            let o = t.length,
              a = o;
            for (o && t.push("-"); a < n; ) {
              let n = 0x7fffffff;
              for (let t of e) t >= r && t < n && (n = t);
              let l = a + 1;
              for (let c of (n - r > tx((0x7fffffff - i) / l) && tw("overflow"),
              (i += (n - r) * l),
              (r = n),
              e))
                if ((c < r && ++i > 0x7fffffff && tw("overflow"), c === r)) {
                  let e = i;
                  for (let n = 36; ; n += 36) {
                    let r = n <= s ? 1 : n >= s + 26 ? 26 : n - s;
                    if (e < r) break;
                    let i = e - r,
                      o = 36 - r;
                    t.push(tk(tO(r + (i % o), 0))), (e = tx(i / o));
                  }
                  t.push(tk(tO(e, 0))), (s = tT(i, l, a === o)), (i = 0), ++a;
                }
              ++i, ++r;
            }
            return t.join("");
          },
          tC = {
            toASCII: function (e) {
              return t_(e, function (e) {
                return ty.test(e) ? "xn--" + tE(e) : e;
              });
            },
            toUnicode: function (e) {
              return t_(e, function (e) {
                return tg.test(e) ? tS(e.slice(4).toLowerCase()) : e;
              });
            },
          },
          tA = {
            default: {
              options: {
                html: !1,
                xhtmlOut: !1,
                breaks: !1,
                langPrefix: "language-",
                linkify: !1,
                typographer: !1,
                quotes: "“”‘’",
                highlight: null,
                maxNesting: 100,
              },
              components: { core: {}, block: {}, inline: {} },
            },
            zero: {
              options: {
                html: !1,
                xhtmlOut: !1,
                breaks: !1,
                langPrefix: "language-",
                linkify: !1,
                typographer: !1,
                quotes: "“”‘’",
                highlight: null,
                maxNesting: 20,
              },
              components: {
                core: { rules: ["normalize", "block", "inline", "text_join"] },
                block: { rules: ["paragraph"] },
                inline: {
                  rules: ["text"],
                  rules2: ["balance_pairs", "fragments_join"],
                },
              },
            },
            commonmark: {
              options: {
                html: !0,
                xhtmlOut: !0,
                breaks: !1,
                langPrefix: "language-",
                linkify: !1,
                typographer: !1,
                quotes: "“”‘’",
                highlight: null,
                maxNesting: 20,
              },
              components: {
                core: { rules: ["normalize", "block", "inline", "text_join"] },
                block: {
                  rules: [
                    "blockquote",
                    "code",
                    "fence",
                    "heading",
                    "hr",
                    "html_block",
                    "lheading",
                    "list",
                    "reference",
                    "paragraph",
                  ],
                },
                inline: {
                  rules: [
                    "autolink",
                    "backticks",
                    "emphasis",
                    "entity",
                    "escape",
                    "html_inline",
                    "image",
                    "link",
                    "newline",
                    "text",
                  ],
                  rules2: ["balance_pairs", "emphasis", "fragments_join"],
                },
              },
            },
          },
          tN = /^(vbscript|javascript|file|data):/,
          tI = /^data:image\/(gif|png|jpeg|webp);/;
        function tD(e) {
          let t = e.trim().toLowerCase();
          return !tN.test(t) || tI.test(t);
        }
        let tP = ["http:", "https:", "mailto:"];
        function tR(e) {
          let t = D(e, !0);
          if (t.hostname && (!t.protocol || tP.indexOf(t.protocol) >= 0))
            try {
              t.hostname = tC.toASCII(t.hostname);
            } catch (e) {}
          return x(k(t));
        }
        function tM(e) {
          let t = D(e, !0);
          if (t.hostname && (!t.protocol || tP.indexOf(t.protocol) >= 0))
            try {
              t.hostname = tC.toUnicode(t.hostname);
            } catch (e) {}
          return y(k(t), y.defaultChars + "%");
        }
        function tL(e, t) {
          if (!(this instanceof tL)) return new tL(e, t);
          t || Y(e) || ((t = e || {}), (e = "default")),
            (this.inline = new tr()),
            (this.block = new eX()),
            (this.core = new ez()),
            (this.renderer = new eT()),
            (this.linkify = new tm()),
            (this.validateLink = tD),
            (this.normalizeLink = tR),
            (this.normalizeLinkText = tM),
            (this.utils = h),
            (this.helpers = J({}, p)),
            (this.options = {}),
            this.configure(e),
            t && this.set(t);
        }
        (tL.prototype.set = function (e) {
          return J(this.options, e), this;
        }),
          (tL.prototype.configure = function (e) {
            let t = this;
            if (Y(e)) {
              let t = e;
              if (!(e = tA[t]))
                throw Error(
                  'Wrong `markdown-it` preset "' + t + '", check name',
                );
            }
            if (!e) throw Error("Wrong `markdown-it` preset, can't be empty");
            return (
              e.options && t.set(e.options),
              e.components &&
                Object.keys(e.components).forEach(function (n) {
                  e.components[n].rules &&
                    t[n].ruler.enableOnly(e.components[n].rules),
                    e.components[n].rules2 &&
                      t[n].ruler2.enableOnly(e.components[n].rules2);
                }),
              this
            );
          }),
          (tL.prototype.enable = function (e, t) {
            let n = [];
            Array.isArray(e) || (e = [e]),
              ["core", "block", "inline"].forEach(function (t) {
                n = n.concat(this[t].ruler.enable(e, !0));
              }, this),
              (n = n.concat(this.inline.ruler2.enable(e, !0)));
            let r = e.filter(function (e) {
              return 0 > n.indexOf(e);
            });
            if (r.length && !t)
              throw Error("MarkdownIt. Failed to enable unknown rule(s): " + r);
            return this;
          }),
          (tL.prototype.disable = function (e, t) {
            let n = [];
            Array.isArray(e) || (e = [e]),
              ["core", "block", "inline"].forEach(function (t) {
                n = n.concat(this[t].ruler.disable(e, !0));
              }, this),
              (n = n.concat(this.inline.ruler2.disable(e, !0)));
            let r = e.filter(function (e) {
              return 0 > n.indexOf(e);
            });
            if (r.length && !t)
              throw Error(
                "MarkdownIt. Failed to disable unknown rule(s): " + r,
              );
            return this;
          }),
          (tL.prototype.use = function (e) {
            let t = [this].concat(Array.prototype.slice.call(arguments, 1));
            return e.apply(e, t), this;
          }),
          (tL.prototype.parse = function (e, t) {
            if ("string" != typeof e)
              throw Error("Input data should be a String");
            let n = new this.core.State(e, this, t);
            return this.core.process(n), n.tokens;
          }),
          (tL.prototype.render = function (e, t) {
            return (
              (t = t || {}),
              this.renderer.render(this.parse(e, t), this.options, t)
            );
          }),
          (tL.prototype.parseInline = function (e, t) {
            let n = new this.core.State(e, this, t);
            return (n.inlineMode = !0), this.core.process(n), n.tokens;
          }),
          (tL.prototype.renderInline = function (e, t) {
            return (
              (t = t || {}),
              this.renderer.render(this.parseInline(e, t), this.options, t)
            );
          });
        let tj = new f.Sj({
          nodes: {
            doc: { content: "block+" },
            paragraph: {
              content: "inline*",
              group: "block",
              parseDOM: [{ tag: "p" }],
              toDOM: () => ["p", 0],
            },
            blockquote: {
              content: "block+",
              group: "block",
              parseDOM: [{ tag: "blockquote" }],
              toDOM: () => ["blockquote", 0],
            },
            horizontal_rule: {
              group: "block",
              parseDOM: [{ tag: "hr" }],
              toDOM: () => ["div", ["hr"]],
            },
            heading: {
              attrs: { level: { default: 1 } },
              content: "(text | image)*",
              group: "block",
              defining: !0,
              parseDOM: [
                { tag: "h1", attrs: { level: 1 } },
                { tag: "h2", attrs: { level: 2 } },
                { tag: "h3", attrs: { level: 3 } },
                { tag: "h4", attrs: { level: 4 } },
                { tag: "h5", attrs: { level: 5 } },
                { tag: "h6", attrs: { level: 6 } },
              ],
              toDOM: (e) => ["h" + e.attrs.level, 0],
            },
            code_block: {
              content: "text*",
              group: "block",
              code: !0,
              defining: !0,
              marks: "",
              attrs: { params: { default: "" } },
              parseDOM: [
                {
                  tag: "pre",
                  preserveWhitespace: "full",
                  getAttrs: (e) => ({
                    params: e.getAttribute("data-params") || "",
                  }),
                },
              ],
              toDOM: (e) => [
                "pre",
                e.attrs.params ? { "data-params": e.attrs.params } : {},
                ["code", 0],
              ],
            },
            ordered_list: {
              content: "list_item+",
              group: "block",
              attrs: { order: { default: 1 }, tight: { default: !1 } },
              parseDOM: [
                {
                  tag: "ol",
                  getAttrs: (e) => ({
                    order: e.hasAttribute("start")
                      ? +e.getAttribute("start")
                      : 1,
                    tight: e.hasAttribute("data-tight"),
                  }),
                },
              ],
              toDOM: (e) => [
                "ol",
                {
                  start: 1 == e.attrs.order ? null : e.attrs.order,
                  "data-tight": e.attrs.tight ? "true" : null,
                },
                0,
              ],
            },
            bullet_list: {
              content: "list_item+",
              group: "block",
              attrs: { tight: { default: !1 } },
              parseDOM: [
                {
                  tag: "ul",
                  getAttrs: (e) => ({ tight: e.hasAttribute("data-tight") }),
                },
              ],
              toDOM: (e) => [
                "ul",
                { "data-tight": e.attrs.tight ? "true" : null },
                0,
              ],
            },
            list_item: {
              content: "block+",
              defining: !0,
              parseDOM: [{ tag: "li" }],
              toDOM: () => ["li", 0],
            },
            text: { group: "inline" },
            image: {
              inline: !0,
              attrs: {
                src: {},
                alt: { default: null },
                title: { default: null },
              },
              group: "inline",
              draggable: !0,
              parseDOM: [
                {
                  tag: "img[src]",
                  getAttrs: (e) => ({
                    src: e.getAttribute("src"),
                    title: e.getAttribute("title"),
                    alt: e.getAttribute("alt"),
                  }),
                },
              ],
              toDOM: (e) => ["img", e.attrs],
            },
            hard_break: {
              inline: !0,
              group: "inline",
              selectable: !1,
              parseDOM: [{ tag: "br" }],
              toDOM: () => ["br"],
            },
          },
          marks: {
            em: {
              parseDOM: [
                { tag: "i" },
                { tag: "em" },
                { style: "font-style=italic" },
                {
                  style: "font-style=normal",
                  clearMark: (e) => "em" == e.type.name,
                },
              ],
              toDOM: () => ["em"],
            },
            strong: {
              parseDOM: [
                { tag: "strong" },
                {
                  tag: "b",
                  getAttrs: (e) => "normal" != e.style.fontWeight && null,
                },
                {
                  style: "font-weight=400",
                  clearMark: (e) => "strong" == e.type.name,
                },
                {
                  style: "font-weight",
                  getAttrs: (e) => /^(bold(er)?|[5-9]\d{2,})$/.test(e) && null,
                },
              ],
              toDOM: () => ["strong"],
            },
            link: {
              attrs: { href: {}, title: { default: null } },
              inclusive: !1,
              parseDOM: [
                {
                  tag: "a[href]",
                  getAttrs: (e) => ({
                    href: e.getAttribute("href"),
                    title: e.getAttribute("title"),
                  }),
                },
              ],
              toDOM: (e) => ["a", e.attrs],
            },
            code: {
              code: !0,
              parseDOM: [{ tag: "code" }],
              toDOM: () => ["code"],
            },
          },
        });
        class tF {
          constructor(e, t) {
            (this.schema = e),
              (this.tokenHandlers = t),
              (this.stack = [
                {
                  type: e.topNodeType,
                  attrs: null,
                  content: [],
                  marks: f.CU.none,
                },
              ]);
          }
          top() {
            return this.stack[this.stack.length - 1];
          }
          push(e) {
            this.stack.length && this.top().content.push(e);
          }
          addText(e) {
            if (!e) return;
            let t = this.top(),
              n = t.content,
              r = n[n.length - 1],
              i = this.schema.text(e, t.marks),
              s;
            r &&
            (s = (function (e, t) {
              if (e.isText && t.isText && f.CU.sameSet(e.marks, t.marks))
                return e.withText(e.text + t.text);
            })(r, i))
              ? (n[n.length - 1] = s)
              : n.push(i);
          }
          openMark(e) {
            let t = this.top();
            t.marks = e.addToSet(t.marks);
          }
          closeMark(e) {
            let t = this.top();
            t.marks = e.removeFromSet(t.marks);
          }
          parseTokens(e) {
            for (let t = 0; t < e.length; t++) {
              let n = e[t],
                r = this.tokenHandlers[n.type];
              if (!r)
                throw Error(
                  "Token type `" +
                    n.type +
                    "` not supported by Markdown parser",
                );
              r(this, n, e, t);
            }
          }
          addNode(e, t, n) {
            let r = this.top(),
              i = e.createAndFill(t, n, r ? r.marks : []);
            return i ? (this.push(i), i) : null;
          }
          openNode(e, t) {
            this.stack.push({
              type: e,
              attrs: t,
              content: [],
              marks: f.CU.none,
            });
          }
          closeNode() {
            let e = this.stack.pop();
            return this.addNode(e.type, e.attrs, e.content);
          }
        }
        function tB(e, t, n, r) {
          return e.getAttrs
            ? e.getAttrs(t, n, r)
            : e.attrs instanceof Function
              ? e.attrs(t)
              : e.attrs;
        }
        function tz(e, t) {
          return (
            e.noCloseToken ||
            "code_inline" == t ||
            "code_block" == t ||
            "fence" == t
          );
        }
        function t$(e) {
          return "\n" == e[e.length - 1] ? e.slice(0, e.length - 1) : e;
        }
        function tq() {}
        class tU {
          constructor(e, t, n) {
            (this.schema = e),
              (this.tokenizer = t),
              (this.tokens = n),
              (this.tokenHandlers = (function (e, t) {
                let n = Object.create(null);
                for (let r in t) {
                  let i = t[r];
                  if (i.block) {
                    let t = e.nodeType(i.block);
                    tz(i, r)
                      ? (n[r] = (e, n, r, s) => {
                          e.openNode(t, tB(i, n, r, s)),
                            e.addText(t$(n.content)),
                            e.closeNode();
                        })
                      : ((n[r + "_open"] = (e, n, r, s) =>
                          e.openNode(t, tB(i, n, r, s))),
                        (n[r + "_close"] = (e) => e.closeNode()));
                  } else if (i.node) {
                    let t = e.nodeType(i.node);
                    n[r] = (e, n, r, s) => e.addNode(t, tB(i, n, r, s));
                  } else if (i.mark) {
                    let t = e.marks[i.mark];
                    tz(i, r)
                      ? (n[r] = (e, n, r, s) => {
                          e.openMark(t.create(tB(i, n, r, s))),
                            e.addText(t$(n.content)),
                            e.closeMark(t);
                        })
                      : ((n[r + "_open"] = (e, n, r, s) =>
                          e.openMark(t.create(tB(i, n, r, s)))),
                        (n[r + "_close"] = (e) => e.closeMark(t)));
                  } else if (i.ignore)
                    tz(i, r)
                      ? (n[r] = tq)
                      : ((n[r + "_open"] = tq), (n[r + "_close"] = tq));
                  else
                    throw RangeError(
                      "Unrecognized parsing spec " + JSON.stringify(i),
                    );
                }
                return (
                  (n.text = (e, t) => e.addText(t.content)),
                  (n.inline = (e, t) => e.parseTokens(t.children)),
                  (n.softbreak = n.softbreak || ((e) => e.addText(" "))),
                  n
                );
              })(e, n));
          }
          parse(e, t = {}) {
            let n = new tF(this.schema, this.tokenHandlers),
              r;
            n.parseTokens(this.tokenizer.parse(e, t));
            do r = n.closeNode();
            while (n.stack.length);
            return r || this.schema.topNodeType.createAndFill();
          }
        }
        function tH(e, t) {
          for (; ++t < e.length; )
            if ("list_item_open" != e[t].type) return e[t].hidden;
          return !1;
        }
        new tU(tj, tL("commonmark", { html: !1 }), {
          blockquote: { block: "blockquote" },
          paragraph: { block: "paragraph" },
          list_item: { block: "list_item" },
          bullet_list: {
            block: "bullet_list",
            getAttrs: (e, t, n) => ({ tight: tH(t, n) }),
          },
          ordered_list: {
            block: "ordered_list",
            getAttrs: (e, t, n) => ({
              order: +e.attrGet("start") || 1,
              tight: tH(t, n),
            }),
          },
          heading: {
            block: "heading",
            getAttrs: (e) => ({ level: +e.tag.slice(1) }),
          },
          code_block: { block: "code_block", noCloseToken: !0 },
          fence: {
            block: "code_block",
            getAttrs: (e) => ({ params: e.info || "" }),
            noCloseToken: !0,
          },
          hr: { node: "horizontal_rule" },
          image: {
            node: "image",
            getAttrs: (e) => ({
              src: e.attrGet("src"),
              title: e.attrGet("title") || null,
              alt: (e.children[0] && e.children[0].content) || null,
            }),
          },
          hardbreak: { node: "hard_break" },
          em: { mark: "em" },
          strong: { mark: "strong" },
          link: {
            mark: "link",
            getAttrs: (e) => ({
              href: e.attrGet("href"),
              title: e.attrGet("title") || null,
            }),
          },
          code_inline: { mark: "code", noCloseToken: !0 },
        });
        let tQ = { open: "", close: "", mixable: !0 };
        class tV {
          constructor(e, t, n = {}) {
            (this.nodes = e), (this.marks = t), (this.options = n);
          }
          serialize(e, t = {}) {
            t = Object.assign({}, this.options, t);
            let n = new tG(this.nodes, this.marks, t);
            return n.renderContent(e), n.out;
          }
        }
        let tW = new tV(
          {
            blockquote(e, t) {
              e.wrapBlock("> ", null, t, () => e.renderContent(t));
            },
            code_block(e, t) {
              let n = t.textContent.match(/`{3,}/gm),
                r = n ? n.sort().slice(-1)[0] + "`" : "```";
              e.write(r + (t.attrs.params || "") + "\n"),
                e.text(t.textContent, !1),
                e.write("\n"),
                e.write(r),
                e.closeBlock(t);
            },
            heading(e, t) {
              e.write(e.repeat("#", t.attrs.level) + " "),
                e.renderInline(t, !1),
                e.closeBlock(t);
            },
            horizontal_rule(e, t) {
              e.write(t.attrs.markup || "---"), e.closeBlock(t);
            },
            bullet_list(e, t) {
              e.renderList(t, "  ", () => (t.attrs.bullet || "*") + " ");
            },
            ordered_list(e, t) {
              let n = t.attrs.order || 1,
                r = String(n + t.childCount - 1).length,
                i = e.repeat(" ", r + 2);
              e.renderList(t, i, (t) => {
                let i = String(n + t);
                return e.repeat(" ", r - i.length) + i + ". ";
              });
            },
            list_item(e, t) {
              e.renderContent(t);
            },
            paragraph(e, t) {
              e.renderInline(t), e.closeBlock(t);
            },
            image(e, t) {
              e.write(
                "![" +
                  e.esc(t.attrs.alt || "") +
                  "](" +
                  t.attrs.src.replace(/[\(\)]/g, "\\$&") +
                  (t.attrs.title
                    ? ' "' + t.attrs.title.replace(/"/g, '\\"') + '"'
                    : "") +
                  ")",
              );
            },
            hard_break(e, t, n, r) {
              for (let i = r + 1; i < n.childCount; i++)
                if (n.child(i).type != t.type) return void e.write("\\\n");
            },
            text(e, t) {
              e.text(t.text, !e.inAutolink);
            },
          },
          {
            em: {
              open: "*",
              close: "*",
              mixable: !0,
              expelEnclosingWhitespace: !0,
            },
            strong: {
              open: "**",
              close: "**",
              mixable: !0,
              expelEnclosingWhitespace: !0,
            },
            link: {
              open: (e, t, n, r) => (
                (e.inAutolink = (function (e, t, n) {
                  if (e.attrs.title || !/^\w+:/.test(e.attrs.href)) return !1;
                  let r = t.child(n);
                  return (
                    !!r.isText &&
                    r.text == e.attrs.href &&
                    r.marks[r.marks.length - 1] == e &&
                    (n == t.childCount - 1 || !e.isInSet(t.child(n + 1).marks))
                  );
                })(t, n, r)),
                e.inAutolink ? "<" : "["
              ),
              close(e, t, n, r) {
                let { inAutolink: i } = e;
                return (
                  (e.inAutolink = void 0),
                  i
                    ? ">"
                    : "](" +
                      t.attrs.href.replace(/[\(\)"]/g, "\\$&") +
                      (t.attrs.title
                        ? ` "${t.attrs.title.replace(/"/g, '\\"')}"`
                        : "") +
                      ")"
                );
              },
              mixable: !0,
            },
            code: {
              open: (e, t, n, r) => tZ(n.child(r), -1),
              close: (e, t, n, r) => tZ(n.child(r - 1), 1),
              escape: !1,
            },
          },
        );
        function tZ(e, t) {
          let n = /`+/g,
            r,
            i = 0;
          if (e.isText)
            for (; (r = n.exec(e.text)); ) i = Math.max(i, r[0].length);
          let s = i > 0 && t > 0 ? " `" : "`";
          for (let e = 0; e < i; e++) s += "`";
          return i > 0 && t < 0 && (s += " "), s;
        }
        class tG {
          constructor(e, t, n) {
            (this.nodes = e),
              (this.marks = t),
              (this.options = n),
              (this.delim = ""),
              (this.out = ""),
              (this.closed = null),
              (this.inAutolink = void 0),
              (this.atBlockStart = !1),
              (this.inTightList = !1),
              void 0 === this.options.tightLists &&
                (this.options.tightLists = !1),
              void 0 === this.options.hardBreakNodeName &&
                (this.options.hardBreakNodeName = "hard_break");
          }
          flushClose(e = 2) {
            if (this.closed) {
              if ((this.atBlank() || (this.out += "\n"), e > 1)) {
                let t = this.delim,
                  n = /\s+$/.exec(t);
                n && (t = t.slice(0, t.length - n[0].length));
                for (let n = 1; n < e; n++) this.out += t + "\n";
              }
              this.closed = null;
            }
          }
          getMark(e) {
            let t = this.marks[e];
            if (!t) {
              if (!1 !== this.options.strict)
                throw Error(
                  `Mark type \`${e}\` not supported by Markdown renderer`,
                );
              t = tQ;
            }
            return t;
          }
          wrapBlock(e, t, n, r) {
            let i = this.delim;
            this.write(null != t ? t : e),
              (this.delim += e),
              r(),
              (this.delim = i),
              this.closeBlock(n);
          }
          atBlank() {
            return /(^|\n)$/.test(this.out);
          }
          ensureNewLine() {
            this.atBlank() || (this.out += "\n");
          }
          write(e) {
            this.flushClose(),
              this.delim && this.atBlank() && (this.out += this.delim),
              e && (this.out += e);
          }
          closeBlock(e) {
            this.closed = e;
          }
          text(e, t = !0) {
            let n = e.split("\n");
            for (let e = 0; e < n.length; e++)
              this.write(),
                !t &&
                  "[" == n[e][0] &&
                  /(^|[^\\])\!$/.test(this.out) &&
                  (this.out = this.out.slice(0, this.out.length - 1) + "\\!"),
                (this.out += t ? this.esc(n[e], this.atBlockStart) : n[e]),
                e != n.length - 1 && (this.out += "\n");
          }
          render(e, t, n) {
            if (this.nodes[e.type.name]) this.nodes[e.type.name](this, e, t, n);
            else if (!1 !== this.options.strict)
              throw Error(
                "Token type `" +
                  e.type.name +
                  "` not supported by Markdown renderer",
              );
            else
              !e.type.isLeaf &&
                (e.type.inlineContent
                  ? this.renderInline(e)
                  : this.renderContent(e),
                e.isBlock && this.closeBlock(e));
          }
          renderContent(e) {
            e.forEach((t, n, r) => this.render(t, e, r));
          }
          renderInline(e, t = !0) {
            this.atBlockStart = t;
            let n = [],
              r = "",
              i = (t, i, s) => {
                let o = t ? t.marks : [];
                t &&
                  t.type.name === this.options.hardBreakNodeName &&
                  (o = o.filter((t) => {
                    if (s + 1 == e.childCount) return !1;
                    let n = e.child(s + 1);
                    return (
                      t.isInSet(n.marks) && (!n.isText || /\S/.test(n.text))
                    );
                  }));
                let a = r;
                if (
                  ((r = ""),
                  t &&
                    t.isText &&
                    o.some((e) => {
                      let t = this.getMark(e.type.name);
                      return t && t.expelEnclosingWhitespace && !e.isInSet(n);
                    }))
                ) {
                  let [e, r, i] = /^(\s*)(.*)$/m.exec(t.text);
                  r && ((a += r), (t = i ? t.withText(i) : null) || (o = n));
                }
                if (
                  t &&
                  t.isText &&
                  o.some((t) => {
                    let n = this.getMark(t.type.name);
                    return (
                      n &&
                      n.expelEnclosingWhitespace &&
                      (s == e.childCount - 1 ||
                        !t.isInSet(e.child(s + 1).marks))
                    );
                  })
                ) {
                  let [e, i, s] = /^(.*?)(\s*)$/m.exec(t.text);
                  s && ((r = s), (t = i ? t.withText(i) : null) || (o = n));
                }
                let l = o.length ? o[o.length - 1] : null,
                  c = l && !1 === this.getMark(l.type.name).escape,
                  u = o.length - +!!c;
                o: for (let e = 0; e < u; e++) {
                  let t = o[e];
                  if (!this.getMark(t.type.name).mixable) break;
                  for (let r = 0; r < n.length; r++) {
                    let i = n[r];
                    if (!this.getMark(i.type.name).mixable) break;
                    if (t.eq(i)) {
                      e > r
                        ? (o = o
                            .slice(0, r)
                            .concat(t)
                            .concat(o.slice(r, e))
                            .concat(o.slice(e + 1, u)))
                        : r > e &&
                          (o = o
                            .slice(0, e)
                            .concat(o.slice(e + 1, r))
                            .concat(t)
                            .concat(o.slice(r, u)));
                      continue o;
                    }
                  }
                }
                let d = 0;
                for (; d < Math.min(n.length, u) && o[d].eq(n[d]); ) ++d;
                for (; d < n.length; )
                  this.text(this.markString(n.pop(), !1, e, s), !1);
                if ((a && this.text(a), t)) {
                  for (; n.length < u; ) {
                    let t = o[n.length];
                    n.push(t),
                      this.text(this.markString(t, !0, e, s), !1),
                      (this.atBlockStart = !1);
                  }
                  c && t.isText
                    ? this.text(
                        this.markString(l, !0, e, s) +
                          t.text +
                          this.markString(l, !1, e, s + 1),
                        !1,
                      )
                    : this.render(t, e, s),
                    (this.atBlockStart = !1);
                }
                (null == t ? void 0 : t.isText) &&
                  t.nodeSize > 0 &&
                  (this.atBlockStart = !1);
              };
            e.forEach(i), i(null, 0, e.childCount), (this.atBlockStart = !1);
          }
          renderList(e, t, n) {
            this.closed && this.closed.type == e.type
              ? this.flushClose(3)
              : this.inTightList && this.flushClose(1);
            let r =
                void 0 !== e.attrs.tight
                  ? e.attrs.tight
                  : this.options.tightLists,
              i = this.inTightList;
            (this.inTightList = r),
              e.forEach((i, s, o) => {
                o && r && this.flushClose(1),
                  this.wrapBlock(t, n(o), e, () => this.render(i, e, o));
              }),
              (this.inTightList = i);
          }
          esc(e, t = !1) {
            return (
              (e = e.replace(/[`*\\~\[\]_]/g, (t, n) =>
                "_" == t &&
                n > 0 &&
                n + 1 < e.length &&
                e[n - 1].match(/\w/) &&
                e[n + 1].match(/\w/)
                  ? t
                  : "\\" + t,
              )),
              t &&
                (e = e
                  .replace(/^(\+[ ]|[\-*>])/, "\\$&")
                  .replace(/^(\s*)(#{1,6})(\s|$)/, "$1\\$2$3")
                  .replace(/^(\s*\d+)\.\s/, "$1\\. ")),
              this.options.escapeExtraCharacters &&
                (e = e.replace(this.options.escapeExtraCharacters, "\\$&")),
              e
            );
          }
          quote(e) {
            let t =
              -1 == e.indexOf('"') ? '""' : -1 == e.indexOf("'") ? "''" : "()";
            return t[0] + e + t[1];
          }
          repeat(e, t) {
            let n = "";
            for (let r = 0; r < t; r++) n += e;
            return n;
          }
          markString(e, t, n, r) {
            let i = this.getMark(e.type.name),
              s = t ? i.open : i.close;
            return "string" == typeof s ? s : s(this, e, n, r);
          }
          getEnclosingWhitespace(e) {
            return {
              leading: (e.match(/^(\s+)/) || [void 0])[0],
              trailing: (e.match(/(\s+)$/) || [void 0])[0],
            };
          }
        }
      },
      82655: (e, t, n) => {
        "use strict";
        n.d(t, { Z5: () => a, sH: () => h });
        var r = n(92858),
          i = n(43326),
          s = n(43758);
        class o extends s.pe {
          static [r.i] = "PgNumericBuilder";
          constructor(e, t, n) {
            super(e, "string", "PgNumeric"),
              (this.config.precision = t),
              (this.config.scale = n);
          }
          build(e) {
            return new a(e, this.config);
          }
        }
        class a extends s.Kl {
          static [r.i] = "PgNumeric";
          precision;
          scale;
          constructor(e, t) {
            super(e, t), (this.precision = t.precision), (this.scale = t.scale);
          }
          mapFromDriverValue(e) {
            return "string" == typeof e ? e : String(e);
          }
          getSQLType() {
            return void 0 !== this.precision && void 0 !== this.scale
              ? `numeric(${this.precision}, ${this.scale})`
              : void 0 === this.precision
                ? "numeric"
                : `numeric(${this.precision})`;
          }
        }
        class l extends s.pe {
          static [r.i] = "PgNumericNumberBuilder";
          constructor(e, t, n) {
            super(e, "number", "PgNumericNumber"),
              (this.config.precision = t),
              (this.config.scale = n);
          }
          build(e) {
            return new c(e, this.config);
          }
        }
        class c extends s.Kl {
          static [r.i] = "PgNumericNumber";
          precision;
          scale;
          constructor(e, t) {
            super(e, t), (this.precision = t.precision), (this.scale = t.scale);
          }
          mapFromDriverValue(e) {
            return "number" == typeof e ? e : Number(e);
          }
          mapToDriverValue = String;
          getSQLType() {
            return void 0 !== this.precision && void 0 !== this.scale
              ? `numeric(${this.precision}, ${this.scale})`
              : void 0 === this.precision
                ? "numeric"
                : `numeric(${this.precision})`;
          }
        }
        class u extends s.pe {
          static [r.i] = "PgNumericBigIntBuilder";
          constructor(e, t, n) {
            super(e, "bigint", "PgNumericBigInt"),
              (this.config.precision = t),
              (this.config.scale = n);
          }
          build(e) {
            return new d(e, this.config);
          }
        }
        class d extends s.Kl {
          static [r.i] = "PgNumericBigInt";
          precision;
          scale;
          constructor(e, t) {
            super(e, t), (this.precision = t.precision), (this.scale = t.scale);
          }
          mapFromDriverValue = BigInt;
          mapToDriverValue = String;
          getSQLType() {
            return void 0 !== this.precision && void 0 !== this.scale
              ? `numeric(${this.precision}, ${this.scale})`
              : void 0 === this.precision
                ? "numeric"
                : `numeric(${this.precision})`;
          }
        }
        function h(e, t) {
          let { name: n, config: r } = (0, i.Ll)(e, t),
            s = r?.mode;
          return "number" === s
            ? new l(n, r?.precision, r?.scale)
            : "bigint" === s
              ? new u(n, r?.precision, r?.scale)
              : new o(n, r?.precision, r?.scale);
        }
      },
      83333: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { MC: () => o });
            var i = n(21725),
              s = e([i]);
            i = (s.then ? (await s)() : s)[0];
            let o = !!(
              process.env.PLAYWRIGHT_TEST_BASE_URL ||
              process.env.PLAYWRIGHT ||
              process.env.CI_PLAYWRIGHT
            );
            (0, i.p1)(), r();
          } catch (e) {
            r(e);
          }
        });
      },
      83997: (e) => {
        "use strict";
        e.exports = require("tty");
      },
      84297: (e) => {
        "use strict";
        e.exports = require("async_hooks");
      },
      85137: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { V: () => p });
            var i = n(61268),
              s = n(65666),
              o = n(6130),
              a = n(84205),
              l = n(48958),
              c = n(28909),
              u = n(15942),
              d = n(12253),
              h = e([c, u]);
            [c, u] = h.then ? (await h)() : h;
            let p = ({ suggestion: e, onApply: t, artifactKind: n }) => {
              let [r, h] = (0, a.useState)(!1),
                { width: p } = (0, l.lW)();
              return (0, i.jsx)(s.N, {
                children: r
                  ? (0, i.jsxs)(
                      o.P.div,
                      {
                        className:
                          "absolute bg-background p-3 flex flex-col gap-3 rounded-2xl border text-sm w-56 shadow-xl z-50 -right-12 md:-right-16 font-sans",
                        transition: {
                          type: "spring",
                          stiffness: 500,
                          damping: 30,
                        },
                        initial: { opacity: 0, y: -10 },
                        animate: { opacity: 1, y: -20 },
                        exit: { opacity: 0, y: -10 },
                        whileHover: { scale: 1.05 },
                        children: [
                          (0, i.jsxs)("div", {
                            className:
                              "flex flex-row items-center justify-between",
                            children: [
                              (0, i.jsxs)("div", {
                                className: "flex flex-row items-center gap-2",
                                children: [
                                  (0, i.jsx)("div", {
                                    className:
                                      "size-4 bg-muted-foreground/25 rounded-full",
                                  }),
                                  (0, i.jsx)("div", {
                                    className: "font-medium",
                                    children: "Assistant",
                                  }),
                                ],
                              }),
                              (0, i.jsx)("button", {
                                type: "button",
                                className:
                                  "text-xs text-gray-500 cursor-pointer",
                                onClick: () => {
                                  h(!1);
                                },
                                children: (0, i.jsx)(d.w0, { size: 12 }),
                              }),
                            ],
                          }),
                          (0, i.jsx)("div", { children: e.description }),
                          (0, i.jsx)(c.$, {
                            variant: "outline",
                            className: "w-fit py-1.5 px-3 rounded-full",
                            onClick: t,
                            children: "Apply",
                          }),
                        ],
                      },
                      e.id,
                    )
                  : (0, i.jsx)(o.P.div, {
                      className: (0, u.cn)(
                        "cursor-pointer text-muted-foreground p-1",
                        {
                          "absolute -right-8": "text" === n,
                          "sticky top-0 right-4": "code" === n,
                        },
                      ),
                      onClick: () => {
                        h(!0);
                      },
                      whileHover: { scale: 1.1 },
                      children: (0, i.jsx)(d.b1, {
                        size: p && p < 768 ? 16 : 14,
                      }),
                    }),
              });
            };
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      85352: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 43851)),
          Promise.resolve().then(n.bind(n, 33713)),
          Promise.resolve().then(n.bind(n, 3519)),
          Promise.resolve().then(n.t.bind(n, 99966, 23));
      },
      85488: (e) => {
        "use strict";
        e.exports = import("ai");
      },
      85743: (e, t, n) => {
        "use strict";
        n.d(t, {
          Ch: () => J,
          Di: () => N,
          Kq: () => V,
          M3: () => R,
          Tt: () => T,
          b8: () => el,
          hL: () => k,
          iM: () => ei,
          u6: () => q,
          xn: () => F,
        });
        var r,
          i,
          s,
          o,
          a,
          l,
          c,
          u,
          d,
          h,
          p,
          f = "vercel.ai.error",
          m = Symbol.for(f),
          g = class e extends Error {
            constructor({ name: e, message: t, cause: n }) {
              super(t), (this[r] = !0), (this.name = e), (this.cause = n);
            }
            static isInstance(t) {
              return e.hasMarker(t, f);
            }
            static hasMarker(e, t) {
              let n = Symbol.for(t);
              return (
                null != e &&
                "object" == typeof e &&
                n in e &&
                "boolean" == typeof e[n] &&
                !0 === e[n]
              );
            }
          };
        r = m;
        var y = g,
          v = "AI_APICallError",
          b = `vercel.ai.error.${v}`,
          x = Symbol.for(b),
          k = class extends y {
            constructor({
              message: e,
              url: t,
              requestBodyValues: n,
              statusCode: r,
              responseHeaders: s,
              responseBody: o,
              cause: a,
              isRetryable: l = null != r &&
                (408 === r || 409 === r || 429 === r || r >= 500),
              data: c,
            }) {
              super({ name: v, message: e, cause: a }),
                (this[i] = !0),
                (this.url = t),
                (this.requestBodyValues = n),
                (this.statusCode = r),
                (this.responseHeaders = s),
                (this.responseBody = o),
                (this.isRetryable = l),
                (this.data = c);
            }
            static isInstance(e) {
              return y.hasMarker(e, b);
            }
          };
        i = x;
        var w = "AI_EmptyResponseBodyError",
          _ = `vercel.ai.error.${w}`,
          O = Symbol.for(_),
          T = class extends y {
            constructor({ message: e = "Empty response body" } = {}) {
              super({ name: w, message: e }), (this[s] = !0);
            }
            static isInstance(e) {
              return y.hasMarker(e, _);
            }
          };
        function S(e) {
          return null == e
            ? "unknown error"
            : "string" == typeof e
              ? e
              : e instanceof Error
                ? e.message
                : JSON.stringify(e);
        }
        s = O;
        var E = "AI_InvalidArgumentError",
          C = `vercel.ai.error.${E}`,
          A = Symbol.for(C),
          N = class extends y {
            constructor({ message: e, cause: t, argument: n }) {
              super({ name: E, message: e, cause: t }),
                (this[o] = !0),
                (this.argument = n);
            }
            static isInstance(e) {
              return y.hasMarker(e, C);
            }
          };
        o = A;
        var I = "AI_InvalidPromptError",
          D = `vercel.ai.error.${I}`,
          P = Symbol.for(D),
          R = class extends y {
            constructor({ prompt: e, message: t, cause: n }) {
              super({ name: I, message: `Invalid prompt: ${t}`, cause: n }),
                (this[a] = !0),
                (this.prompt = e);
            }
            static isInstance(e) {
              return y.hasMarker(e, D);
            }
          };
        a = P;
        var M = "AI_InvalidResponseDataError",
          L = `vercel.ai.error.${M}`,
          j = Symbol.for(L),
          F = class extends y {
            constructor({
              data: e,
              message: t = `Invalid response data: ${JSON.stringify(e)}.`,
            }) {
              super({ name: M, message: t }), (this[l] = !0), (this.data = e);
            }
            static isInstance(e) {
              return y.hasMarker(e, L);
            }
          };
        l = j;
        var B = "AI_JSONParseError",
          z = `vercel.ai.error.${B}`,
          $ = Symbol.for(z),
          q = class extends y {
            constructor({ text: e, cause: t }) {
              super({
                name: B,
                message: `JSON parsing failed: Text: ${e}.
Error message: ${S(t)}`,
                cause: t,
              }),
                (this[c] = !0),
                (this.text = e);
            }
            static isInstance(e) {
              return y.hasMarker(e, z);
            }
          };
        c = $;
        var U = "AI_LoadAPIKeyError",
          H = `vercel.ai.error.${U}`,
          Q = Symbol.for(H),
          V = class extends y {
            constructor({ message: e }) {
              super({ name: U, message: e }), (this[u] = !0);
            }
            static isInstance(e) {
              return y.hasMarker(e, H);
            }
          };
        u = Q;
        var W = Symbol.for("vercel.ai.error.AI_LoadSettingError"),
          Z = Symbol.for("vercel.ai.error.AI_NoContentGeneratedError"),
          G = Symbol.for("vercel.ai.error.AI_NoSuchModelError"),
          Y = "AI_TooManyEmbeddingValuesForCallError",
          K = `vercel.ai.error.${Y}`,
          X = Symbol.for(K),
          J = class extends y {
            constructor(e) {
              super({
                name: Y,
                message: `Too many values for a single embedding call. The ${e.provider} model "${e.modelId}" can only embed up to ${e.maxEmbeddingsPerCall} values per call, but ${e.values.length} values were provided.`,
              }),
                (this[d] = !0),
                (this.provider = e.provider),
                (this.modelId = e.modelId),
                (this.maxEmbeddingsPerCall = e.maxEmbeddingsPerCall),
                (this.values = e.values);
            }
            static isInstance(e) {
              return y.hasMarker(e, K);
            }
          };
        d = X;
        var ee = "AI_TypeValidationError",
          et = `vercel.ai.error.${ee}`,
          en = Symbol.for(et),
          er = class e extends y {
            constructor({ value: e, cause: t }) {
              super({
                name: ee,
                message: `Type validation failed: Value: ${JSON.stringify(e)}.
Error message: ${S(t)}`,
                cause: t,
              }),
                (this[h] = !0),
                (this.value = e);
            }
            static isInstance(e) {
              return y.hasMarker(e, et);
            }
            static wrap({ value: t, cause: n }) {
              return e.isInstance(n) && n.value === t
                ? n
                : new e({ value: t, cause: n });
            }
          };
        h = en;
        var ei = er,
          es = "AI_UnsupportedFunctionalityError",
          eo = `vercel.ai.error.${es}`,
          ea = Symbol.for(eo),
          el = class extends y {
            constructor({
              functionality: e,
              message: t = `'${e}' functionality not supported.`,
            }) {
              super({ name: es, message: t }),
                (this[p] = !0),
                (this.functionality = e);
            }
            static isInstance(e) {
              return y.hasMarker(e, eo);
            }
          };
        function ec(e) {
          return (
            null === e ||
            "string" == typeof e ||
            "number" == typeof e ||
            "boolean" == typeof e ||
            (Array.isArray(e)
              ? e.every(ec)
              : "object" == typeof e &&
                Object.entries(e).every(
                  ([e, t]) => "string" == typeof e && ec(t),
                ))
          );
        }
        p = ea;
      },
      86305: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.r(t),
              n.d(t, {
                "400124e62bdb6c0bda9491300242483c2e3f7585dc": () => s.HV,
                "40126ff470a43535ad3f3b5edbf6a896ae355d2d69": () => s.er,
                "4055c9f9dce3c849928e65e87017b3609674121d00": () => i.M,
                "40735dc6111b525c561108795f1f8685d756e21bff": () => s.Yc,
                "40c8e4d0a0b142228792a85e0695f7964561b4b27d": () => s.I8,
              });
            var i = n(29997),
              s = n(72859),
              o = e([s]);
            (s = (o.then ? (await o)() : o)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      86327: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          Object.defineProperty(t, "setAttributesFromProps", {
            enumerable: !0,
            get: function () {
              return s;
            },
          });
        let n = {
            acceptCharset: "accept-charset",
            className: "class",
            htmlFor: "for",
            httpEquiv: "http-equiv",
            noModule: "noModule",
          },
          r = [
            "onLoad",
            "onReady",
            "dangerouslySetInnerHTML",
            "children",
            "onError",
            "strategy",
            "stylesheets",
          ];
        function i(e) {
          return ["async", "defer", "noModule"].includes(e);
        }
        function s(e, t) {
          for (let [s, o] of Object.entries(t)) {
            if (!t.hasOwnProperty(s) || r.includes(s) || void 0 === o) continue;
            let a = n[s] || s.toLowerCase();
            "SCRIPT" === e.tagName && i(a)
              ? (e[a] = !!o)
              : e.setAttribute(a, String(o)),
              (!1 === o ||
                ("SCRIPT" === e.tagName && i(a) && (!o || "false" === o))) &&
                (e.setAttribute(a, ""), e.removeAttribute(a));
          }
        }
        ("function" == typeof t.default ||
          ("object" == typeof t.default && null !== t.default)) &&
          void 0 === t.default.__esModule &&
          (Object.defineProperty(t.default, "__esModule", { value: !0 }),
          Object.assign(t.default, t),
          (e.exports = t.default));
      },
      86592: (e) => {
        "use strict";
        e.exports = require("node:inspector");
      },
      87113: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.r(t), n.d(t, { default: () => a });
            var i = n(61268);
            n(86896), n(84205);
            var s = n(28909),
              o = e([s]);
            function a({ error: e, reset: t }) {
              return (0, i.jsx)("html", {
                children: (0, i.jsx)("body", {
                  children: (0, i.jsxs)("div", {
                    className:
                      "flex min-h-screen flex-col items-center justify-center p-4 text-center",
                    children: [
                      (0, i.jsx)("h1", {
                        className: "text-4xl font-bold mb-4",
                        children: "Something went wrong!",
                      }),
                      (0, i.jsx)("p", {
                        className: "text-xl mb-8",
                        children: e.message || "An unexpected error occurred",
                      }),
                      (0, i.jsxs)("div", {
                        className: "space-x-4",
                        children: [
                          (0, i.jsx)(s.$, {
                            onClick: () => t(),
                            children: "Try again",
                          }),
                          (0, i.jsx)(s.$, {
                            variant: "outline",
                            onClick: () => (window.location.href = "/"),
                            children: "Go home",
                          }),
                        ],
                      }),
                      !1,
                    ],
                  }),
                }),
              });
            }
            (s = (o.then ? (await o)() : o)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      87216: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { Ck: () => g, dj: () => y });
            var i = n(61268),
              s = n(24419),
              o = n(91635),
              a = n(90495),
              l = n(61950),
              c = n(38568),
              u = n(89123),
              d = n(84205),
              h = n.n(d),
              p = n(15942),
              f = e([p]);
            p = (f.then ? (await f)() : f)[0];
            let b = (0, d.createContext)(void 0);
            s.Kq,
              (h().forwardRef(({ className: e, ...t }, n) =>
                (0, i.jsx)(s.LM, {
                  ref: n,
                  className: (0, p.cn)(
                    "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
                    e,
                  ),
                  ...t,
                }),
              ).displayName = s.LM.displayName);
            let x = (0, o.F)(
              "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
              {
                variants: {
                  variant: {
                    default: "border bg-background text-foreground",
                    destructive:
                      "destructive group border-destructive bg-destructive text-destructive-foreground",
                  },
                },
                defaultVariants: { variant: "default" },
              },
            );
            function m({
              title: e,
              description: t,
              variant: n = "default",
              onClose: r,
            }) {
              let s = {
                default: null,
                destructive: l.A,
                success: c.A,
                info: u.A,
              }[n];
              return (0, i.jsxs)("div", {
                className: `max-w-md rounded-lg border shadow-lg p-4 flex items-start gap-3 animate-slide-up-fade ${{ default: "bg-white border-gray-200", destructive: "bg-red-50 border-red-200 text-red-700", success: "bg-green-50 border-green-200 text-green-700", info: "bg-blue-50 border-blue-200 text-blue-700" }[n]}`,
                role: "alert",
                children: [
                  s && (0, i.jsx)(s, { className: "h-5 w-5 flex-shrink-0" }),
                  (0, i.jsxs)("div", {
                    className: "flex-1",
                    children: [
                      (0, i.jsx)("h3", {
                        className: "font-medium",
                        children: e,
                      }),
                      t &&
                        (0, i.jsx)("p", {
                          className: "text-sm mt-1 opacity-90",
                          children: t,
                        }),
                    ],
                  }),
                  (0, i.jsx)("button", {
                    onClick: r,
                    className:
                      "flex-shrink-0 rounded-full p-1 hover:bg-gray-100",
                    "aria-label": "Close",
                    children: (0, i.jsx)(a.A, { className: "h-4 w-4" }),
                  }),
                ],
              });
            }
            function g({ children: e }) {
              let [t, n] = (0, d.useState)([]),
                r = (0, d.useRef)(0),
                s = (0, d.useCallback)((e) => {
                  n((t) => t.filter((t) => t.id !== e));
                }, []),
                o = (0, d.useCallback)(
                  (e) => {
                    let t = `toast-${r.current++}`,
                      i = { ...e, id: t };
                    n((e) => [...e, i]),
                      setTimeout(() => {
                        s(t);
                      }, e.duration || 5e3);
                  },
                  [s],
                ),
                a = (0, d.useMemo)(
                  () => ({ toast: o, toasts: t, removeToast: s }),
                  [o, t, s],
                );
              return (0, i.jsxs)(b.Provider, {
                value: a,
                children: [e, (0, i.jsx)(v, {})],
              });
            }
            function y() {
              let e = (0, d.useContext)(b);
              if (!e)
                throw Error(
                  "useToast must be used within a CustomToastProvider",
                );
              return e;
            }
            function v() {
              let { toasts: e, removeToast: t } = y();
              return (0, i.jsx)("div", {
                className: "fixed bottom-0 right-0 p-4 space-y-2 z-50",
                children: e.map((e) =>
                  (0, i.jsx)(m, { ...e, onClose: () => t(e.id) }, e.id),
                ),
              });
            }
            (h().forwardRef(({ className: e, variant: t, ...n }, r) =>
              (0, i.jsx)(s.bL, {
                ref: r,
                className: (0, p.cn)(x({ variant: t }), e),
                ...n,
              }),
            ).displayName = s.bL.displayName),
              (h().forwardRef(({ className: e, ...t }, n) =>
                (0, i.jsx)(s.rc, {
                  ref: n,
                  className: (0, p.cn)(
                    "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
                    e,
                  ),
                  ...t,
                }),
              ).displayName = s.rc.displayName),
              (h().forwardRef(({ className: e, ...t }, n) =>
                (0, i.jsx)(s.bm, {
                  ref: n,
                  className: (0, p.cn)(
                    "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
                    e,
                  ),
                  "toast-close": "",
                  ...t,
                  children: (0, i.jsx)(a.A, { className: "h-4 w-4" }),
                }),
              ).displayName = s.bm.displayName),
              (h().forwardRef(({ className: e, ...t }, n) =>
                (0, i.jsx)(s.hE, {
                  ref: n,
                  className: (0, p.cn)("text-sm font-semibold", e),
                  ...t,
                }),
              ).displayName = s.hE.displayName),
              (h().forwardRef(({ className: e, ...t }, n) =>
                (0, i.jsx)(s.VY, {
                  ref: n,
                  className: (0, p.cn)("text-sm opacity-90", e),
                  ...t,
                }),
              ).displayName = s.VY.displayName),
              r();
          } catch (e) {
            r(e);
          }
        });
      },
      87447: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.r(t), n.d(t, { default: () => a });
            var i = n(61268);
            n(84205);
            var s = n(28909),
              o = e([s]);
            function a({ error: e, reset: t }) {
              return (0, i.jsx)("div", {
                className: "flex h-screen",
                children: (0, i.jsxs)("div", {
                  className: "m-auto text-center space-y-4",
                  children: [
                    (0, i.jsx)("h2", {
                      className: "text-2xl font-bold",
                      children: "Something went wrong!",
                    }),
                    (0, i.jsx)("p", {
                      className: "text-muted-foreground",
                      children: e.message,
                    }),
                    (0, i.jsx)(s.$, {
                      onClick: () => t(),
                      variant: "outline",
                      children: "Try again",
                    }),
                  ],
                }),
              });
            }
            (s = (o.then ? (await o)() : o)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      87826: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { S: () => h, k: () => u });
            var i = n(61268),
              s = n(89882),
              o = n(84205),
              a = n(87216),
              l = n(32367),
              c = e([a]);
            a = (c.then ? (await c)() : c)[0];
            let d = (0, o.createContext)(void 0);
            function u({ children: e }) {
              let [t, n] = (0, o.useState)([]),
                [r, c] = (0, o.useState)(null),
                [u, h] = (0, o.useState)([]),
                [p, f] = (0, o.useState)(!1),
                [m, g] = (0, o.useState)(null),
                y = (0, s.useRouter)(),
                { toast: v } = (0, a.dj)(),
                b = (0, l.AG)(),
                x = async (e) => {
                  try {
                    f(!0), g(null);
                    let { data: t, error: n } = await b
                      .from("artifacts")
                      .select("*")
                      .eq("id", e)
                      .single();
                    if (n) throw n;
                    c(t);
                    let { data: r, error: i } = await b
                      .from("artifact_messages")
                      .select("*")
                      .eq("artifact_id", e)
                      .order("created_at", { ascending: !0 });
                    if (i) throw i;
                    h(r || []);
                  } catch (e) {
                    console.error("Error fetching artifact:", e),
                      g("Failed to fetch artifact");
                  } finally {
                    f(!1);
                  }
                },
                k = async (e, t, n, r) => {
                  try {
                    f(!0), g(null);
                    let { data: i } = await b.auth.getUser();
                    if (!i?.user) throw Error("User not authenticated");
                    let s = {
                        title: e,
                        type: t,
                        content: n,
                        user_id: i.user.id,
                        chat_id: r,
                        visibility: "private",
                      },
                      { data: o, error: a } = await b
                        .from("artifacts")
                        .insert(s)
                        .select()
                        .single();
                    if (a) throw a;
                    return (
                      v({
                        title: "Artifact created",
                        description: `${e} has been created successfully`,
                        variant: "success",
                      }),
                      o
                    );
                  } catch (t) {
                    let e = "Failed to create artifact";
                    throw (
                      (g(e),
                      console.error(t),
                      v({
                        title: "Error",
                        description: e,
                        variant: "destructive",
                      }),
                      t)
                    );
                  } finally {
                    f(!1);
                  }
                },
                w = async (e, t) => {
                  try {
                    f(!0), g(null);
                    let { error: n } = await b
                      .from("artifacts")
                      .update({ ...t, updated_at: new Date().toISOString() })
                      .eq("id", e);
                    if (n) throw n;
                    v({
                      title: "Artifact updated",
                      description: "Your changes have been saved",
                      variant: "success",
                    });
                  } catch (t) {
                    let e = "Failed to update artifact";
                    g(e),
                      console.error(t),
                      v({
                        title: "Error",
                        description: e,
                        variant: "destructive",
                      });
                  } finally {
                    f(!1);
                  }
                },
                _ = async (e) => {
                  try {
                    f(!0), g(null);
                    let { error: t } = await b
                      .from("artifacts")
                      .delete()
                      .eq("id", e);
                    if (t) throw t;
                    r?.id === e && (c(null), y.push("/artifacts")),
                      v({
                        title: "Artifact deleted",
                        description: "The artifact has been removed",
                        variant: "success",
                      });
                  } catch (t) {
                    let e = "Failed to delete artifact";
                    g(e),
                      console.error(t),
                      v({
                        title: "Error",
                        description: e,
                        variant: "destructive",
                      });
                  } finally {
                    f(!1);
                  }
                },
                O = async (e, t, n) => {
                  try {
                    f(!0), g(null);
                    let { error: r } = await b
                      .from("artifact_messages")
                      .insert({ artifact_id: e, content: t, role: n });
                    if (r) throw r;
                    await x(e);
                  } catch (e) {
                    g("Failed to add message"), console.error(e);
                  } finally {
                    f(!1);
                  }
                },
                T = async (e, t) => {
                  try {
                    f(!0), g(null);
                    let { error: n } = await b
                      .from("artifacts")
                      .update({ visibility: t })
                      .eq("id", e);
                    if (n) throw n;
                    v({
                      title: "Visibility updated",
                      description: `Artifact is now ${t}`,
                      variant: "success",
                    });
                  } catch (t) {
                    let e = "Failed to update visibility";
                    g(e),
                      console.error(t),
                      v({
                        title: "Error",
                        description: e,
                        variant: "destructive",
                      });
                  } finally {
                    f(!1);
                  }
                };
              return (0, i.jsx)(d.Provider, {
                value: {
                  artifacts: t,
                  currentArtifact: r,
                  artifactMessages: u,
                  isLoading: p,
                  error: m,
                  createArtifact: k,
                  updateArtifact: w,
                  deleteArtifact: _,
                  getArtifact: x,
                  addArtifactMessage: O,
                  updateArtifactVisibility: T,
                },
                children: e,
              });
            }
            let h = () => {
              let e = (0, o.useContext)(d);
              if (void 0 === e)
                throw Error(
                  "useArtifact must be used within an ArtifactProvider",
                );
              return e;
            };
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      88787: (e, t, n) => {
        "use strict";
        let r, i;
        n.d(t, { Ak: () => a });
        var s = n(77598);
        function o(e) {
          !r || r.length < e
            ? ((r = Buffer.allocUnsafe(128 * e)),
              s.webcrypto.getRandomValues(r),
              (i = 0))
            : i + e > r.length && (s.webcrypto.getRandomValues(r), (i = 0)),
            (i += e);
        }
        function a(e = 21) {
          o((e |= 0));
          let t = "";
          for (let n = i - e; n < i; n++)
            t +=
              "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[
                63 & r[n]
              ];
          return t;
        }
      },
      88823: (e) => {
        var t = 0 / 0,
          n = /^\s+|\s+$/g,
          r = /^[-+]0x[0-9a-f]+$/i,
          i = /^0b[01]+$/i,
          s = /^0o[0-7]+$/i,
          o = parseInt,
          a =
            "object" == typeof global &&
            global &&
            global.Object === Object &&
            global,
          l = "object" == typeof self && self && self.Object === Object && self,
          c = a || l || Function("return this")(),
          u = Object.prototype.toString,
          d = Math.max,
          h = Math.min,
          p = function () {
            return c.Date.now();
          };
        function f(e) {
          var t = typeof e;
          return !!e && ("object" == t || "function" == t);
        }
        function m(e) {
          if ("number" == typeof e) return e;
          if (
            "symbol" == typeof (a = e) ||
            (a && "object" == typeof a && "[object Symbol]" == u.call(a))
          )
            return t;
          if (f(e)) {
            var a,
              l = "function" == typeof e.valueOf ? e.valueOf() : e;
            e = f(l) ? l + "" : l;
          }
          if ("string" != typeof e) return 0 === e ? e : +e;
          e = e.replace(n, "");
          var c = i.test(e);
          return c || s.test(e) ? o(e.slice(2), c ? 2 : 8) : r.test(e) ? t : +e;
        }
        e.exports = function (e, t, n) {
          var r,
            i,
            s,
            o,
            a,
            l,
            c = 0,
            u = !1,
            g = !1,
            y = !0;
          if ("function" != typeof e) throw TypeError("Expected a function");
          function v(t) {
            var n = r,
              s = i;
            return (r = i = void 0), (c = t), (o = e.apply(s, n));
          }
          function b(e) {
            var n = e - l,
              r = e - c;
            return void 0 === l || n >= t || n < 0 || (g && r >= s);
          }
          function x() {
            var e,
              n,
              r,
              i = p();
            if (b(i)) return k(i);
            a = setTimeout(
              x,
              ((e = i - l), (n = i - c), (r = t - e), g ? h(r, s - n) : r),
            );
          }
          function k(e) {
            return ((a = void 0), y && r) ? v(e) : ((r = i = void 0), o);
          }
          function w() {
            var e,
              n = p(),
              s = b(n);
            if (((r = arguments), (i = this), (l = n), s)) {
              if (void 0 === a)
                return (c = e = l), (a = setTimeout(x, t)), u ? v(e) : o;
              if (g) return (a = setTimeout(x, t)), v(l);
            }
            return void 0 === a && (a = setTimeout(x, t)), o;
          }
          return (
            (t = m(t) || 0),
            f(n) &&
              ((u = !!n.leading),
              (s = (g = "maxWait" in n) ? d(m(n.maxWait) || 0, t) : s),
              (y = "trailing" in n ? !!n.trailing : y)),
            (w.cancel = function () {
              void 0 !== a && clearTimeout(a),
                (c = 0),
                (r = l = i = a = void 0);
            }),
            (w.flush = function () {
              return void 0 === a ? o : k(p());
            }),
            w
          );
        };
      },
      89138: (e, t, n) => {
        "use strict";
        n.d(t, { dL: () => a, uR: () => l });
        var r = n(92858),
          i = n(18720),
          s = n(43758);
        class o extends s.pe {
          static [r.i] = "PgUUIDBuilder";
          constructor(e) {
            super(e, "string", "PgUUID");
          }
          defaultRandom() {
            return this.default((0, i.ll)`gen_random_uuid()`);
          }
          build(e) {
            return new a(e, this.config);
          }
        }
        class a extends s.Kl {
          static [r.i] = "PgUUID";
          getSQLType() {
            return "uuid";
          }
        }
        function l(e) {
          return new o(e ?? "");
        }
      },
      89394: (e, t, n) => {
        "use strict";
        n.d(t, { n: () => a });
        var r = n(61268),
          i = n(98849),
          s = n.n(i),
          o = n(12253);
        function a({ title: e, content: t, status: n, isInline: i }) {
          return (0, r.jsx)("div", {
            className: s()("flex flex-row items-center justify-center w-full", {
              "h-[calc(100dvh-60px)]": !i,
              "h-[200px]": i,
            }),
            children:
              "streaming" === n
                ? (0, r.jsxs)("div", {
                    className: "flex flex-row gap-4 items-center",
                    children: [
                      !i &&
                        (0, r.jsx)("div", {
                          className: "animate-spin",
                          children: (0, r.jsx)(o.hz, {}),
                        }),
                      (0, r.jsx)("div", { children: "Generating Image..." }),
                    ],
                  })
                : (0, r.jsx)("picture", {
                    children: (0, r.jsx)("img", {
                      className: s()("w-full h-fit max-w-[800px]", {
                        "p-0 md:p-20": !i,
                      }),
                      src: `data:image/png;base64,${t}`,
                      alt: e,
                    }),
                  }),
          });
        }
      },
      89663: (e, t, n) => {
        "use strict";
        let r;
        n.r(t),
          n.d(t, {
            default: () => b,
            experimental_ppr: () => h,
            generateImageMetadata: () => y,
            generateMetadata: () => g,
            generateViewport: () => v,
          });
        var i = n(63033),
          s = n(35242),
          o = n(15058),
          a = n(42057),
          l = n(16714),
          c = n(98699),
          u = n(14795),
          d = n(60442);
        let h = !0;
        async function p({ children: e }) {
          let [t, n] = await Promise.all([(0, u.j2)(), (0, o.UL)()]),
            r = n.get("sidebar:state")?.value !== "true";
          return (0, s.jsxs)(s.Fragment, {
            children: [
              (0, s.jsx)(a.default, {
                src: "https://cdn.jsdelivr.net/pyodide/v0.23.4/full/pyodide.js",
                strategy: "beforeInteractive",
              }),
              (0, s.jsxs)(c.SidebarProvider, {
                defaultOpen: !r,
                children: [
                  (0, s.jsx)(l.AppSidebar, {}),
                  (0, s.jsx)(c.SidebarInset, { children: e }),
                ],
              }),
            ],
          });
        }
        let f = { ...i },
          m =
            "workUnitAsyncStorage" in f
              ? f.workUnitAsyncStorage
              : "requestAsyncStorage" in f
                ? f.requestAsyncStorage
                : void 0;
        r = new Proxy(p, {
          apply: (e, t, n) => {
            let r, i, s;
            try {
              let e = m?.getStore();
              (r = e?.headers.get("sentry-trace") ?? void 0),
                (i = e?.headers.get("baggage") ?? void 0),
                (s = e?.headers);
            } catch (e) {}
            return d
              .wrapServerComponentWithSentry(e, {
                componentRoute: "/(ai-unified)",
                componentType: "Layout",
                sentryTraceHeader: r,
                baggageHeader: i,
                headers: s,
              })
              .apply(t, n);
          },
        });
        let g = void 0,
          y = void 0,
          v = void 0,
          b = r;
      },
      89783: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 53974));
      },
      90184: (e, t, n) => {
        Promise.resolve().then(n.t.bind(n, 2938, 23)),
          Promise.resolve().then(n.t.bind(n, 65405, 23)),
          Promise.resolve().then(n.t.bind(n, 83573, 23)),
          Promise.resolve().then(n.t.bind(n, 35348, 23)),
          Promise.resolve().then(n.t.bind(n, 39308, 23)),
          Promise.resolve().then(n.t.bind(n, 4784, 23)),
          Promise.resolve().then(n.t.bind(n, 60830, 23)),
          Promise.resolve().then(n.t.bind(n, 84360, 23));
      },
      90377: (e, t, n) => {
        "use strict";
        n.d(t, { Pq: () => a, iX: () => o });
        var r = n(92858),
          i = n(43758);
        class s extends i.pe {
          static [r.i] = "PgJsonBuilder";
          constructor(e) {
            super(e, "json", "PgJson");
          }
          build(e) {
            return new o(e, this.config);
          }
        }
        class o extends i.Kl {
          static [r.i] = "PgJson";
          constructor(e, t) {
            super(e, t);
          }
          getSQLType() {
            return "json";
          }
          mapToDriverValue(e) {
            return JSON.stringify(e);
          }
          mapFromDriverValue(e) {
            if ("string" == typeof e)
              try {
                return JSON.parse(e);
              } catch {}
            return e;
          }
        }
        function a(e) {
          return new s(e ?? "");
        }
      },
      90733: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { e: () => v });
            var i = n(61268),
              s = n(31655),
              o = n.n(s),
              a = n(89882),
              l = n(84205),
              c = n(48958),
              u = n(28909),
              d = n(12253),
              h = n(67166),
              p = n(33713),
              f = n(8716),
              m = n(89284),
              g = n(82311),
              y = e([u, h, p, f, m, g]);
            [u, h, p, f, m, g] = y.then ? (await y)() : y;
            let v = (0, l.memo)(
              function ({
                chatId: e,
                selectedModelId: t,
                visibility: n,
                isReadonly: r,
              }) {
                let s = (0, a.useRouter)(),
                  { open: l } = (0, p.cL)(),
                  { width: y } = (0, c.lW)();
                return (0, i.jsxs)("header", {
                  className:
                    "flex sticky top-0 bg-background py-1.5 items-center px-2 md:px-2 gap-2",
                  children: [
                    (0, i.jsx)(f.R, {}),
                    (!l || y < 768) &&
                      (0, i.jsxs)(m.m_, {
                        children: [
                          (0, i.jsx)(m.k$, {
                            asChild: !0,
                            children: (0, i.jsxs)(u.$, {
                              variant: "outline",
                              className:
                                "order-2 md:order-1 md:px-2 px-2 md:h-fit ml-auto md:ml-0",
                              onClick: () => {
                                s.push("/"), s.refresh();
                              },
                              children: [
                                (0, i.jsx)(d.c1, {}),
                                (0, i.jsx)("span", {
                                  className: "md:sr-only",
                                  children: "New Chat",
                                }),
                              ],
                            }),
                          }),
                          (0, i.jsx)(m.ZI, { children: "New Chat" }),
                        ],
                      }),
                    !r && (0, i.jsx)(h.B, { className: "order-1 md:order-2" }),
                    !r &&
                      (0, i.jsx)(g.g, {
                        chatId: e,
                        visibility: n,
                        className: "order-1 md:order-3",
                      }),
                    (0, i.jsx)(u.$, {
                      className:
                        "bg-zinc-900 dark:bg-zinc-100 hover:bg-zinc-800 dark:hover:bg-zinc-200 text-zinc-50 dark:text-zinc-900 hidden md:flex py-1.5 px-2 h-fit md:h-[34px] order-4 md:ml-auto",
                      asChild: !0,
                      children: (0, i.jsx)(o(), {
                        href: "https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fai-chatbot&env=AUTH_SECRET,OPENAI_API_KEY&envDescription=Learn%20more%20about%20how%20to%20get%20the%20API%20Keys%20for%20the%20application&envLink=https%3A%2F%2Fgithub.com%2Fvercel%2Fai-chatbot%2Fblob%2Fmain%2F.env.example&demo-title=AI%20Chatbot&demo-description=An%20Open-Source%20AI%20Chatbot%20Template%20Built%20With%20Next.js%20and%20the%20AI%20SDK%20by%20Vercel.&demo-url=https%3A%2F%2Fchat.vercel.ai&stores=%5B%7B%22type%22:%22postgres%22%7D,%7B%22type%22:%22blob%22%7D%5D",
                        target: "_blank",
                        children: (0, i.jsxs)(i.Fragment, {
                          children: [
                            (0, i.jsx)(d.PY, { size: 16 }),
                            "Deploy with Vercel",
                          ],
                        }),
                      }),
                    }),
                  ],
                });
              },
              (e, t) => e.selectedModelId === t.selectedModelId,
            );
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      90771: (e, t, n) => {
        "use strict";
        n.d(t, { WI: () => x });
        var r = n(84205),
          i = n(17407),
          s = n(8502),
          o = n(77536),
          a = n(16235),
          l = n(74994);
        let c = () => {},
          u = c(),
          d = Object,
          h = (e) => e === u,
          p = (e) => "function" == typeof e,
          f = new WeakMap(),
          m = (e, t) => d.prototype.toString.call(e) === `[object ${t}]`,
          g = 0,
          y = (e) => {
            let t,
              n,
              r = typeof e,
              i = m(e, "Date"),
              s = m(e, "RegExp"),
              o = m(e, "Object");
            if (d(e) !== e || i || s)
              t = i
                ? e.toJSON()
                : "symbol" == r
                  ? e.toString()
                  : "string" == r
                    ? JSON.stringify(e)
                    : "" + e;
            else {
              if ((t = f.get(e))) return t;
              if (((t = ++g + "~"), f.set(e, t), Array.isArray(e))) {
                for (n = 0, t = "@"; n < e.length; n++) t += y(e[n]) + ",";
                f.set(e, t);
              }
              if (o) {
                t = "#";
                let r = d.keys(e).sort();
                for (; !h((n = r.pop())); )
                  h(e[n]) || (t += n + ":" + y(e[n]) + ",");
                f.set(e, t);
              }
            }
            return t;
          },
          v = (e) => {
            if (p(e))
              try {
                e = e();
              } catch (t) {
                e = "";
              }
            let t = e;
            return [
              (e =
                "string" == typeof e
                  ? e
                  : (Array.isArray(e) ? e.length : e)
                    ? y(e)
                    : ""),
              t,
            ];
          },
          b = (e) => v(e ? e(0, null) : null)[0],
          x = (e) => o.q + b(e),
          k = Promise.resolve();
        (0, a.Ht)(i.Ay, (e) => (t, n, i) => {
          let a,
            c = (0, r.useRef)(!1),
            {
              cache: u,
              initialSize: d = 1,
              revalidateAll: h = !1,
              persistSize: p = !1,
              revalidateFirstPage: f = !0,
              revalidateOnMount: m = !1,
              parallel: g = !1,
            } = i,
            [, , , y] = s.b.get(s.c);
          try {
            (a = b(t)) && (a = o.q + a);
          } catch (e) {}
          let [v, x, w] = (0, s.z)(u, a),
            _ = (0, r.useCallback)(
              () => ((0, s.e)(v()._l) ? d : v()._l),
              [u, a, d],
            );
          (0, l.useSyncExternalStore)(
            (0, r.useCallback)(
              (e) =>
                a
                  ? w(a, () => {
                      e();
                    })
                  : () => {},
              [u, a],
            ),
            _,
            _,
          );
          let O = (0, r.useCallback)(() => {
              let e = v()._l;
              return (0, s.e)(e) ? d : e;
            }, [a, d]),
            T = (0, r.useRef)(O());
          (0, s.u)(() => {
            if (!c.current) {
              c.current = !0;
              return;
            }
            a && x({ _l: p ? T.current : O() });
          }, [a, u]);
          let S = m && !c.current,
            E = e(
              a,
              async (e) => {
                let r = v()._i,
                  o = v()._r;
                x({ _r: s.U });
                let a = [],
                  l = O(),
                  [c] = (0, s.z)(u, e),
                  d = c().data,
                  p = [],
                  m = null;
                for (let e = 0; e < l; ++e) {
                  let [l, c] = (0, s.s)(t(e, g ? null : m));
                  if (!l) break;
                  let [v, b] = (0, s.z)(u, l),
                    x = v().data,
                    k =
                      h ||
                      r ||
                      (0, s.e)(x) ||
                      (f && !e && !(0, s.e)(d)) ||
                      S ||
                      (d && !(0, s.e)(d[e]) && !i.compare(d[e], x));
                  if (n && ("function" == typeof o ? o(x, c) : k)) {
                    let t = async () => {
                      if (l in y) {
                        let e = y[l];
                        delete y[l], (x = await e);
                      } else x = await n(c);
                      b({ data: x, _k: c }), (a[e] = x);
                    };
                    g ? p.push(t) : await t();
                  } else a[e] = x;
                  g || (m = x);
                }
                return (
                  g && (await Promise.all(p.map((e) => e()))), x({ _i: s.U }), a
                );
              },
              i,
            ),
            C = (0, r.useCallback)(
              function (e, t) {
                let n = "boolean" == typeof t ? { revalidate: t } : t || {},
                  r = !1 !== n.revalidate;
                return a
                  ? (r &&
                      ((0, s.e)(e)
                        ? x({ _i: !0, _r: n.revalidate })
                        : x({ _i: !1, _r: n.revalidate })),
                    arguments.length
                      ? E.mutate(e, { ...n, revalidate: r })
                      : E.mutate())
                  : k;
              },
              [a, u],
            ),
            A = (0, r.useCallback)(
              (e) => {
                let n;
                if (!a) return k;
                let [, r] = (0, s.z)(u, a);
                if (
                  ((0, s.a)(e) ? (n = e(O())) : "number" == typeof e && (n = e),
                  "number" != typeof n)
                )
                  return k;
                r({ _l: n }), (T.current = n);
                let i = [],
                  [o] = (0, s.z)(u, a),
                  l = null;
                for (let e = 0; e < n; ++e) {
                  let [n] = (0, s.s)(t(e, l)),
                    [r] = (0, s.z)(u, n),
                    a = n ? r().data : s.U;
                  if ((0, s.e)(a)) return C(o().data);
                  i.push(a), (l = a);
                }
                return C(i);
              },
              [a, u, C, O],
            );
          return {
            size: O(),
            setSize: A,
            mutate: C,
            get data() {
              return E.data;
            },
            get error() {
              return E.error;
            },
            get isValidating() {
              return E.isValidating;
            },
            get isLoading() {
              return E.isLoading;
            },
          };
        });
      },
      90863: (e, t, n) => {
        "use strict";
        n.d(t, { Lq: () => l, TX: () => u, _o: () => c });
        var r = n(57826),
          i = n(58342),
          s = n(26457),
          o = n(70542);
        i.Ik({
          id: i.Yj(),
          status: i.k5([
            "pending",
            "running",
            "succeeded",
            "failed",
            "cancelled",
          ]),
          model: i.Yj(),
          fine_tuned_model: i.Yj().nullable(),
          category: i.Yj().nullable(),
          created_at: i.Yj(),
          finished_at: i.Yj().nullable(),
          error: i.Yj().nullable(),
          metadata: i.g1(i.bz()).optional(),
        });
        let a = new r.z4({ apiKey: o._.OPENAI_API_KEY });
        async function l(e) {
          try {
            let t = await a.fineTuning.jobs.retrieve(e),
              n = (0, s.AG)();
            return (
              await n
                .from("fine_tuning_jobs")
                .update({
                  status: t.status,
                  fine_tuned_model: t.fine_tuned_model,
                  finished_at: t.finished_at
                    ? new Date(1e3 * t.finished_at).toISOString()
                    : null,
                  error: t.error ? t.error.message : null,
                })
                .eq("id", e),
              {
                status: t.status,
                fineTunedModel: t.fine_tuned_model,
                finishedAt: t.finished_at
                  ? new Date(1e3 * t.finished_at).toISOString()
                  : null,
              }
            );
          } catch (e) {
            throw (
              (console.error("Error checking fine-tuning job status:", e), e)
            );
          }
        }
        async function c() {
          let e = (0, s.AG)(),
            { data: t, error: n } = await e
              .from("fine_tuning_jobs")
              .select("*")
              .order("created_at", { ascending: !1 });
          if (n) throw (console.error("Error listing fine-tuning jobs:", n), n);
          return t;
        }
        async function u(e) {
          try {
            let t = await a.fineTuning.jobs.cancel(e),
              n = (0, s.AG)();
            return (
              await n
                .from("fine_tuning_jobs")
                .update({ status: t.status })
                .eq("id", e),
              { status: t.status }
            );
          } catch (e) {
            throw (console.error("Error canceling fine-tuning job:", e), e);
          }
        }
      },
      91645: (e) => {
        "use strict";
        e.exports = require("net");
      },
      92858: (e, t, n) => {
        "use strict";
        n.d(t, { i: () => r, is: () => i });
        let r = Symbol.for("drizzle:entityKind");
        function i(e, t) {
          if (!e || "object" != typeof e) return !1;
          if (e instanceof t) return !0;
          if (!Object.prototype.hasOwnProperty.call(t, r))
            throw Error(
              `Class "${t.name ?? "<unknown>"}" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,
            );
          let n = Object.getPrototypeOf(e).constructor;
          if (n)
            for (; n; ) {
              if (r in n && n[r] === t[r]) return !0;
              n = Object.getPrototypeOf(n);
            }
          return !1;
        }
        Symbol.for("drizzle:hasOwnEntityKind");
      },
      93206: () => {},
      93678: (e, t, n) => {
        "use strict";
        n.d(t, {
          AU: () => h,
          B3: () => E,
          KJ: () => w,
          KL: () => v,
          Pe: () => x,
          RK: () => S,
          RO: () => f,
          RV: () => y,
          Tq: () => _,
          Uo: () => u,
          eq: () => l,
          gt: () => p,
          kZ: () => b,
          lt: () => m,
          mj: () => T,
          ne: () => c,
          o8: () => O,
          or: () => d,
          q1: () => C,
          t2: () => k,
          wJ: () => g,
        });
        var r = n(54557),
          i = n(92858),
          s = n(3021),
          o = n(18720);
        function a(e, t) {
          return !(0, o.eG)(t) ||
            (0, o.qt)(e) ||
            (0, i.is)(e, o.Iw) ||
            (0, i.is)(e, o.Or) ||
            (0, i.is)(e, r.V) ||
            (0, i.is)(e, s.XI) ||
            (0, i.is)(e, o.Ss)
            ? e
            : new o.Iw(e, t);
        }
        let l = (e, t) => (0, o.ll)`${e} = ${a(t, e)}`,
          c = (e, t) => (0, o.ll)`${e} <> ${a(t, e)}`;
        function u(...e) {
          let t = e.filter((e) => void 0 !== e);
          if (0 !== t.length)
            return new o.Xs(
              1 === t.length
                ? t
                : [
                    new o.DJ("("),
                    o.ll.join(t, new o.DJ(" and ")),
                    new o.DJ(")"),
                  ],
            );
        }
        function d(...e) {
          let t = e.filter((e) => void 0 !== e);
          if (0 !== t.length)
            return new o.Xs(
              1 === t.length
                ? t
                : [
                    new o.DJ("("),
                    o.ll.join(t, new o.DJ(" or ")),
                    new o.DJ(")"),
                  ],
            );
        }
        function h(e) {
          return (0, o.ll)`not ${e}`;
        }
        let p = (e, t) => (0, o.ll)`${e} > ${a(t, e)}`,
          f = (e, t) => (0, o.ll)`${e} >= ${a(t, e)}`,
          m = (e, t) => (0, o.ll)`${e} < ${a(t, e)}`,
          g = (e, t) => (0, o.ll)`${e} <= ${a(t, e)}`;
        function y(e, t) {
          return Array.isArray(t)
            ? 0 === t.length
              ? (0, o.ll)`false`
              : (0, o.ll)`${e} in ${t.map((t) => a(t, e))}`
            : (0, o.ll)`${e} in ${a(t, e)}`;
        }
        function v(e, t) {
          return Array.isArray(t)
            ? 0 === t.length
              ? (0, o.ll)`true`
              : (0, o.ll)`${e} not in ${t.map((t) => a(t, e))}`
            : (0, o.ll)`${e} not in ${a(t, e)}`;
        }
        function b(e) {
          return (0, o.ll)`${e} is null`;
        }
        function x(e) {
          return (0, o.ll)`${e} is not null`;
        }
        function k(e) {
          return (0, o.ll)`exists ${e}`;
        }
        function w(e) {
          return (0, o.ll)`not exists ${e}`;
        }
        function _(e, t, n) {
          return (0, o.ll)`${e} between ${a(t, e)} and ${a(n, e)}`;
        }
        function O(e, t, n) {
          return (0, o.ll)`${e} not between ${a(t, e)} and ${a(n, e)}`;
        }
        function T(e, t) {
          return (0, o.ll)`${e} like ${t}`;
        }
        function S(e, t) {
          return (0, o.ll)`${e} not like ${t}`;
        }
        function E(e, t) {
          return (0, o.ll)`${e} ilike ${t}`;
        }
        function C(e, t) {
          return (0, o.ll)`${e} not ilike ${t}`;
        }
      },
      94173: (e) => {
        "use strict";
        let t = "undefined" != typeof Buffer,
          n =
            /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/,
          r =
            /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
        function i(e, i, o) {
          null == o &&
            null !== i &&
            "object" == typeof i &&
            ((o = i), (i = void 0)),
            t && Buffer.isBuffer(e) && (e = e.toString()),
            e && 65279 === e.charCodeAt(0) && (e = e.slice(1));
          let a = JSON.parse(e, i);
          if (null === a || "object" != typeof a) return a;
          let l = (o && o.protoAction) || "error",
            c = (o && o.constructorAction) || "error";
          if ("ignore" === l && "ignore" === c) return a;
          if ("ignore" !== l && "ignore" !== c) {
            if (!1 === n.test(e) && !1 === r.test(e)) return a;
          } else if ("ignore" !== l && "ignore" === c) {
            if (!1 === n.test(e)) return a;
          } else if (!1 === r.test(e)) return a;
          return s(a, {
            protoAction: l,
            constructorAction: c,
            safe: o && o.safe,
          });
        }
        function s(
          e,
          {
            protoAction: t = "error",
            constructorAction: n = "error",
            safe: r,
          } = {},
        ) {
          let i = [e];
          for (; i.length; ) {
            let e = i;
            for (let s of ((i = []), e)) {
              if (
                "ignore" !== t &&
                Object.prototype.hasOwnProperty.call(s, "__proto__")
              ) {
                if (!0 === r) return null;
                if ("error" === t)
                  throw SyntaxError(
                    "Object contains forbidden prototype property",
                  );
                delete s.__proto__;
              }
              if (
                "ignore" !== n &&
                Object.prototype.hasOwnProperty.call(s, "constructor") &&
                Object.prototype.hasOwnProperty.call(s.constructor, "prototype")
              ) {
                if (!0 === r) return null;
                if ("error" === n)
                  throw SyntaxError(
                    "Object contains forbidden prototype property",
                  );
                delete s.constructor;
              }
              for (let e in s) {
                let t = s[e];
                t && "object" == typeof t && i.push(t);
              }
            }
          }
          return e;
        }
        function o(e, t, n) {
          let r = Error.stackTraceLimit;
          Error.stackTraceLimit = 0;
          try {
            return i(e, t, n);
          } finally {
            Error.stackTraceLimit = r;
          }
        }
        (e.exports = o),
          (e.exports.default = o),
          (e.exports.parse = o),
          (e.exports.safeParse = function (e, t) {
            let n = Error.stackTraceLimit;
            Error.stackTraceLimit = 0;
            try {
              return i(e, t, { safe: !0 });
            } catch (e) {
              return null;
            } finally {
              Error.stackTraceLimit = n;
            }
          }),
          (e.exports.scan = s);
      },
      94262: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { E: () => l });
            var i = n(61268);
            n(84205);
            var s = n(5451),
              o = n(71269),
              a = e([s, o]);
            [s, o] = a.then ? (await a)() : a;
            let l = ({ artifact: e }) => {
              let t = "",
                n = "plaintext";
              if ("string" == typeof e.content)
                try {
                  let r = JSON.parse(e.content);
                  "object" == typeof r && null !== r && r.code
                    ? ((t = r.code), (n = r.language || "plaintext"))
                    : (t = e.content);
                } catch (n) {
                  t = e.content;
                }
              else
                "object" == typeof e.content &&
                  null !== e.content &&
                  e.content.code &&
                  ((t = e.content.code),
                  (n = e.content.language || "plaintext"));
              return (0, i.jsxs)(s.Zp, {
                className: "h-full flex flex-col",
                children: [
                  (0, i.jsx)(s.aR, {
                    children: (0, i.jsx)(s.ZB, {
                      children: e.title || "Code Artifact",
                    }),
                  }),
                  (0, i.jsx)(s.Wu, {
                    className: "flex-1 overflow-auto p-0",
                    children: (0, i.jsx)(o.$, { language: n, value: t }),
                  }),
                ],
              });
            };
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      94434: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { o: () => d });
            var i = n(61268);
            n(84205);
            var s = n(84894),
              o = n(65638),
              a = n(95926),
              l = n(50616),
              c = n(15942),
              u = e([c]);
            function d({ content: e, className: t }) {
              return (0, i.jsx)("div", {
                className: (0, c.cn)(
                  "prose prose-sm dark:prose-invert max-w-none",
                  t,
                ),
                children: (0, i.jsx)(s.oz, {
                  remarkPlugins: [l.A],
                  rehypePlugins: [a.A],
                  components: {
                    code({ node: e, className: t, children: n, ...r }) {
                      let s = /language-(\w+)/.exec(t || "");
                      return t?.startsWith("language-") && s
                        ? (0, i.jsx)(o.Prism, {
                            language: s[1],
                            PreTag: "div",
                            children: String(n).replace(/\n$/, ""),
                          })
                        : (0, i.jsx)("code", {
                            className: t,
                            ...r,
                            children: n,
                          });
                    },
                    a: ({ node: e, ...t }) =>
                      (0, i.jsx)("a", {
                        target: "_blank",
                        rel: "noopener noreferrer",
                        className: "text-primary underline",
                        ...t,
                      }),
                    table: ({ node: e, ...t }) =>
                      (0, i.jsx)("div", {
                        className: "overflow-x-auto",
                        children: (0, i.jsx)("table", {
                          className: "border-collapse border border-border",
                          ...t,
                        }),
                      }),
                    th: ({ node: e, ...t }) =>
                      (0, i.jsx)("th", {
                        className:
                          "border border-border bg-muted px-4 py-2 text-left",
                        ...t,
                      }),
                    td: ({ node: e, ...t }) =>
                      (0, i.jsx)("td", {
                        className: "border border-border px-4 py-2",
                        ...t,
                      }),
                    img: ({ node: e, ...t }) =>
                      (0, i.jsx)("img", { className: "rounded-md", ...t }),
                  },
                  children: e,
                }),
              });
            }
            (c = (u.then ? (await u)() : u)[0]), r();
          } catch (e) {
            r(e);
          }
        });
      },
      94511: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 56460));
      },
      94735: (e) => {
        "use strict";
        e.exports = require("events");
      },
      94745: (e, t, n) => {
        "use strict";
        n.r(t), n.d(t, { default: () => r });
        let r = (0, n(26394).registerClientReference)(
          function () {
            throw Error(
              "Attempted to call the default export of \"E:\\\\downloads\\\\Hijraah\\\\apps\\\\web\\\\src\\\\app\\\\error.tsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\error.tsx",
          "default",
        );
      },
      95232: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            let c;
            n.d(t, { oQ: () => u });
            var i = n(67402),
              s = n(10265),
              o = n(84170),
              a = n(85488);
            n(70542), n(90863);
            var l = e([a]);
            a = (l.then ? (await l)() : l)[0];
            try {
              c = n(64306);
            } catch (e) {
              console.warn(
                "Fireworks SDK not installed, some models will not be available",
              );
            }
            let u = "gpt-4o-mini";
            (0, a.customProvider)({
              languageModels: {
                "gpt-4o": (0, o.N)("gpt-4o"),
                "gpt-4o-mini": (0, o.N)("gpt-4o-mini"),
                "gpt-3.5-turbo": (0, o.N)("gpt-3.5-turbo"),
                "gpt-4-turbo": (0, a.wrapLanguageModel)({
                  model: (0, o.N)("gpt-4-turbo"),
                  middleware: (0, a.extractReasoningMiddleware)({
                    tagName: "reasoning",
                  }),
                }),
                "claude-3-opus": (0, i.P)("claude-3-opus"),
                "claude-3-sonnet": (0, i.P)("claude-3-sonnet"),
                "gemini-pro": (0, s.q)("gemini-pro"),
                "deepseek-coder": c
                  ? c("accounts/fireworks/models/deepseek-coder")
                  : null,
              },
              imageModels: {
                "dall-e-3": o.N.image("dall-e-3"),
                "dall-e-2": o.N.image("dall-e-2"),
              },
            }),
              r();
          } catch (e) {
            r(e);
          }
        });
      },
      95437: (e, t, n) => {
        "use strict";
        n.d(t, { default: () => r });
        let r = (0, n(26394).registerClientReference)(
          function () {
            throw Error(
              "Attempted to call the default export of \"E:\\\\downloads\\\\Hijraah\\\\apps\\\\web\\\\src\\\\app\\\\(ai-unified)\\\\chat\\\\chat-client-page.tsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\app\\(ai-unified)\\chat\\chat-client-page.tsx",
          "default",
        );
      },
      95926: (e, t, n) => {
        "use strict";
        n.d(t, { A: () => ng });
        var r,
          i,
          s,
          o,
          a,
          l,
          c,
          u,
          d,
          h,
          p,
          f,
          m,
          g,
          y,
          v,
          b = {};
        n.r(b),
          n.d(b, {
            boolean: () => V,
            booleanish: () => W,
            commaOrSpaceSeparated: () => X,
            commaSeparated: () => K,
            number: () => G,
            overloadedBoolean: () => Z,
            spaceSeparated: () => Y,
          });
        var x = n(59026),
          k = n(83992),
          w = n(28878),
          _ = n(1758);
        let O = /[#.]/g;
        var T = n(73468),
          S = n(6300),
          E = n(28473);
        function C(e, t, n) {
          let r = n
            ? (function (e) {
                let t = new Map();
                for (let n of e) t.set(n.toLowerCase(), n);
                return t;
              })(n)
            : void 0;
          return function (n, i, ...s) {
            let o;
            if (null == n) (o = { type: "root", children: [] }), s.unshift(i);
            else {
              let a = (o = (function (e, t) {
                  let n,
                    r,
                    i = e || "",
                    s = {},
                    o = 0;
                  for (; o < i.length; ) {
                    O.lastIndex = o;
                    let e = O.exec(i),
                      t = i.slice(o, e ? e.index : i.length);
                    t &&
                      (n
                        ? "#" === n
                          ? (s.id = t)
                          : Array.isArray(s.className)
                            ? s.className.push(t)
                            : (s.className = [t])
                        : (r = t),
                      (o += t.length)),
                      e && ((n = e[0]), o++);
                  }
                  return {
                    type: "element",
                    tagName: r || t || "div",
                    properties: s,
                    children: [],
                  };
                })(n, t)).tagName.toLowerCase(),
                l = r ? r.get(a) : void 0;
              if (
                ((o.tagName = l || a),
                (function (e) {
                  if (null === e || "object" != typeof e || Array.isArray(e))
                    return !0;
                  if ("string" != typeof e.type) return !1;
                  for (let t of Object.keys(e)) {
                    let n = e[t];
                    if (n && "object" == typeof n) {
                      if (!Array.isArray(n)) return !0;
                      for (let e of n)
                        if ("number" != typeof e && "string" != typeof e)
                          return !0;
                    }
                  }
                  return !!("children" in e && Array.isArray(e.children));
                })(i))
              )
                s.unshift(i);
              else
                for (let [t, n] of Object.entries(i))
                  !(function (e, t, n, r) {
                    let i,
                      s = (0, T.I)(e, n);
                    if (null != r) {
                      if ("number" == typeof r) {
                        if (Number.isNaN(r)) return;
                        i = r;
                      } else
                        i =
                          "boolean" == typeof r
                            ? r
                            : "string" == typeof r
                              ? s.spaceSeparated
                                ? (0, E.q)(r)
                                : s.commaSeparated
                                  ? (0, _.q)(r)
                                  : s.commaOrSpaceSeparated
                                    ? (0, E.q)((0, _.q)(r).join(" "))
                                    : A(s, s.property, r)
                              : Array.isArray(r)
                                ? [...r]
                                : "style" === s.property
                                  ? (function (e) {
                                      let t = [];
                                      for (let [n, r] of Object.entries(e))
                                        t.push([n, r].join(": "));
                                      return t.join("; ");
                                    })(r)
                                  : String(r);
                      if (Array.isArray(i)) {
                        let e = [];
                        for (let t of i) e.push(A(s, s.property, t));
                        i = e;
                      }
                      "className" === s.property &&
                        Array.isArray(t.className) &&
                        (i = t.className.concat(i)),
                        (t[s.property] = i);
                    }
                  })(e, o.properties, t, n);
            }
            for (let e of s)
              !(function e(t, n) {
                if (null == n);
                else if ("number" == typeof n || "string" == typeof n)
                  t.push({ type: "text", value: String(n) });
                else if (Array.isArray(n)) for (let r of n) e(t, r);
                else if ("object" == typeof n && "type" in n)
                  "root" === n.type ? e(t, n.children) : t.push(n);
                else
                  throw Error(
                    "Expected node, nodes, or string, got `" + n + "`",
                  );
              })(o.children, e);
            return (
              "element" === o.type &&
                "template" === o.tagName &&
                ((o.content = { type: "root", children: o.children }),
                (o.children = [])),
              o
            );
          };
        }
        function A(e, t, n) {
          if ("string" == typeof n) {
            if (e.number && n && !Number.isNaN(Number(n))) return Number(n);
            if (
              (e.boolean || e.overloadedBoolean) &&
              ("" === n || (0, S.S)(n) === (0, S.S)(t))
            )
              return !0;
          }
          return n;
        }
        let N = C(w.qy, "div"),
          I = C(w.JW, "g", [
            "altGlyph",
            "altGlyphDef",
            "altGlyphItem",
            "animateColor",
            "animateMotion",
            "animateTransform",
            "clipPath",
            "feBlend",
            "feColorMatrix",
            "feComponentTransfer",
            "feComposite",
            "feConvolveMatrix",
            "feDiffuseLighting",
            "feDisplacementMap",
            "feDistantLight",
            "feDropShadow",
            "feFlood",
            "feFuncA",
            "feFuncB",
            "feFuncG",
            "feFuncR",
            "feGaussianBlur",
            "feImage",
            "feMerge",
            "feMergeNode",
            "feMorphology",
            "feOffset",
            "fePointLight",
            "feSpecularLighting",
            "feSpotLight",
            "feTile",
            "feTurbulence",
            "foreignObject",
            "glyphRef",
            "linearGradient",
            "radialGradient",
            "solidColor",
            "textArea",
            "textPath",
          ]);
        function D(e, t) {
          let n = e.indexOf("\r", t),
            r = e.indexOf("\n", t);
          return -1 === r ? n : -1 === n || n + 1 === r ? r : n < r ? n : r;
        }
        let P = {
            html: "http://www.w3.org/1999/xhtml",
            mathml: "http://www.w3.org/1998/Math/MathML",
            svg: "http://www.w3.org/2000/svg",
            xlink: "http://www.w3.org/1999/xlink",
            xml: "http://www.w3.org/XML/1998/namespace",
            xmlns: "http://www.w3.org/2000/xmlns/",
          },
          R = {}.hasOwnProperty,
          M = Object.prototype;
        function L(e, t) {
          let n;
          switch (t.nodeName) {
            case "#comment":
              return (n = { type: "comment", value: t.data }), F(e, t, n), n;
            case "#document":
            case "#document-fragment": {
              let r =
                "mode" in t &&
                ("quirks" === t.mode || "limited-quirks" === t.mode);
              if (
                ((n = {
                  type: "root",
                  children: j(e, t.childNodes),
                  data: { quirksMode: r },
                }),
                e.file && e.location)
              ) {
                let t = String(e.file),
                  r = (function (e) {
                    let t = String(e),
                      n = [];
                    return {
                      toOffset: function (e) {
                        if (
                          e &&
                          "number" == typeof e.line &&
                          "number" == typeof e.column &&
                          !Number.isNaN(e.line) &&
                          !Number.isNaN(e.column)
                        ) {
                          for (; n.length < e.line; ) {
                            let e = n[n.length - 1],
                              r = D(t, e),
                              i = -1 === r ? t.length + 1 : r + 1;
                            if (e === i) break;
                            n.push(i);
                          }
                          let r =
                            (e.line > 1 ? n[e.line - 2] : 0) + e.column - 1;
                          if (r < n[e.line - 1]) return r;
                        }
                      },
                      toPoint: function (e) {
                        if ("number" == typeof e && e > -1 && e <= t.length) {
                          let r = 0;
                          for (;;) {
                            let i = n[r];
                            if (void 0 === i) {
                              let e = D(t, n[r - 1]);
                              (i = -1 === e ? t.length + 1 : e + 1), (n[r] = i);
                            }
                            if (i > e)
                              return {
                                line: r + 1,
                                column: e - (r > 0 ? n[r - 1] : 0) + 1,
                                offset: e,
                              };
                            r++;
                          }
                        }
                      },
                    };
                  })(t),
                  i = r.toPoint(0),
                  s = r.toPoint(t.length);
                (0, k.ok)(i, "expected `start`"),
                  (0, k.ok)(s, "expected `end`"),
                  (n.position = { start: i, end: s });
              }
              return n;
            }
            case "#documentType":
              return F(e, t, (n = { type: "doctype" })), n;
            case "#text":
              return (n = { type: "text", value: t.value }), F(e, t, n), n;
            default:
              return (function (e, t) {
                let n = e.schema;
                e.schema = t.namespaceURI === P.svg ? w.JW : w.qy;
                let r = -1,
                  i = {};
                for (; ++r < t.attrs.length; ) {
                  let e = t.attrs[r],
                    n = (e.prefix ? e.prefix + ":" : "") + e.name;
                  R.call(M, n) || (i[n] = e.value);
                }
                let s = ("svg" === e.schema.space ? I : N)(
                  t.tagName,
                  i,
                  j(e, t.childNodes),
                );
                if ((F(e, t, s), "template" === s.tagName)) {
                  let n = t.sourceCodeLocation,
                    r = n && n.startTag && B(n.startTag),
                    i = n && n.endTag && B(n.endTag),
                    o = L(e, t.content);
                  r &&
                    i &&
                    e.file &&
                    (o.position = { start: r.end, end: i.start }),
                    (s.content = o);
                }
                return (e.schema = n), s;
              })(e, t);
          }
        }
        function j(e, t) {
          let n = -1,
            r = [];
          for (; ++n < t.length; ) {
            let i = L(e, t[n]);
            r.push(i);
          }
          return r;
        }
        function F(e, t, n) {
          if ("sourceCodeLocation" in t && t.sourceCodeLocation && e.file) {
            let r = (function (e, t, n) {
              let r = B(n);
              if ("element" === t.type) {
                let i = t.children[t.children.length - 1];
                if (
                  (r &&
                    !n.endTag &&
                    i &&
                    i.position &&
                    i.position.end &&
                    (r.end = Object.assign({}, i.position.end)),
                  e.verbose)
                ) {
                  let r,
                    i = {};
                  if (n.attrs)
                    for (r in n.attrs)
                      R.call(n.attrs, r) &&
                        (i[(0, T.I)(e.schema, r).property] = B(n.attrs[r]));
                  (0, k.ok)(n.startTag, "a start tag should exist");
                  let s = B(n.startTag),
                    o = n.endTag ? B(n.endTag) : void 0,
                    a = { opening: s };
                  o && (a.closing = o),
                    (a.properties = i),
                    (t.data = { position: a });
                }
              }
              return r;
            })(e, n, t.sourceCodeLocation);
            r && ((e.location = !0), (n.position = r));
          }
        }
        function B(e) {
          let t = z({
              line: e.startLine,
              column: e.startCol,
              offset: e.startOffset,
            }),
            n = z({ line: e.endLine, column: e.endCol, offset: e.endOffset });
          return t || n ? { start: t, end: n } : void 0;
        }
        function z(e) {
          return e.line && e.column ? e : void 0;
        }
        class $ {
          constructor(e, t, n) {
            (this.property = e), (this.normal = t), n && (this.space = n);
          }
        }
        function q(e, t) {
          let n = {},
            r = {},
            i = -1;
          for (; ++i < e.length; )
            Object.assign(n, e[i].property), Object.assign(r, e[i].normal);
          return new $(n, r, t);
        }
        function U(e) {
          return e.toLowerCase();
        }
        ($.prototype.property = {}),
          ($.prototype.normal = {}),
          ($.prototype.space = null);
        class H {
          constructor(e, t) {
            (this.property = e), (this.attribute = t);
          }
        }
        (H.prototype.space = null),
          (H.prototype.boolean = !1),
          (H.prototype.booleanish = !1),
          (H.prototype.overloadedBoolean = !1),
          (H.prototype.number = !1),
          (H.prototype.commaSeparated = !1),
          (H.prototype.spaceSeparated = !1),
          (H.prototype.commaOrSpaceSeparated = !1),
          (H.prototype.mustUseProperty = !1),
          (H.prototype.defined = !1);
        let Q = 0,
          V = J(),
          W = J(),
          Z = J(),
          G = J(),
          Y = J(),
          K = J(),
          X = J();
        function J() {
          return 2 ** ++Q;
        }
        let ee = Object.keys(b);
        class et extends H {
          constructor(e, t, n, r) {
            let i = -1;
            if (
              (super(e, t),
              (function (e, t, n) {
                n && (e[t] = n);
              })(this, "space", r),
              "number" == typeof n)
            )
              for (; ++i < ee.length; ) {
                let e = ee[i];
                !(function (e, t, n) {
                  n && (e[t] = n);
                })(this, ee[i], (n & b[e]) === b[e]);
              }
          }
        }
        et.prototype.defined = !0;
        let en = {}.hasOwnProperty;
        function er(e) {
          let t,
            n = {},
            r = {};
          for (t in e.properties)
            if (en.call(e.properties, t)) {
              let i = e.properties[t],
                s = new et(t, e.transform(e.attributes || {}, t), i, e.space);
              e.mustUseProperty &&
                e.mustUseProperty.includes(t) &&
                (s.mustUseProperty = !0),
                (n[t] = s),
                (r[U(t)] = t),
                (r[U(s.attribute)] = t);
            }
          return new $(n, r, e.space);
        }
        let ei = er({
            space: "xlink",
            transform: (e, t) => "xlink:" + t.slice(5).toLowerCase(),
            properties: {
              xLinkActuate: null,
              xLinkArcRole: null,
              xLinkHref: null,
              xLinkRole: null,
              xLinkShow: null,
              xLinkTitle: null,
              xLinkType: null,
            },
          }),
          es = er({
            space: "xml",
            transform: (e, t) => "xml:" + t.slice(3).toLowerCase(),
            properties: { xmlLang: null, xmlBase: null, xmlSpace: null },
          });
        function eo(e, t) {
          return t in e ? e[t] : t;
        }
        function ea(e, t) {
          return eo(e, t.toLowerCase());
        }
        let el = er({
            space: "xmlns",
            attributes: { xmlnsxlink: "xmlns:xlink" },
            transform: ea,
            properties: { xmlns: null, xmlnsXLink: null },
          }),
          ec = er({
            transform: (e, t) =>
              "role" === t ? t : "aria-" + t.slice(4).toLowerCase(),
            properties: {
              ariaActiveDescendant: null,
              ariaAtomic: W,
              ariaAutoComplete: null,
              ariaBusy: W,
              ariaChecked: W,
              ariaColCount: G,
              ariaColIndex: G,
              ariaColSpan: G,
              ariaControls: Y,
              ariaCurrent: null,
              ariaDescribedBy: Y,
              ariaDetails: null,
              ariaDisabled: W,
              ariaDropEffect: Y,
              ariaErrorMessage: null,
              ariaExpanded: W,
              ariaFlowTo: Y,
              ariaGrabbed: W,
              ariaHasPopup: null,
              ariaHidden: W,
              ariaInvalid: null,
              ariaKeyShortcuts: null,
              ariaLabel: null,
              ariaLabelledBy: Y,
              ariaLevel: G,
              ariaLive: null,
              ariaModal: W,
              ariaMultiLine: W,
              ariaMultiSelectable: W,
              ariaOrientation: null,
              ariaOwns: Y,
              ariaPlaceholder: null,
              ariaPosInSet: G,
              ariaPressed: W,
              ariaReadOnly: W,
              ariaRelevant: null,
              ariaRequired: W,
              ariaRoleDescription: Y,
              ariaRowCount: G,
              ariaRowIndex: G,
              ariaRowSpan: G,
              ariaSelected: W,
              ariaSetSize: G,
              ariaSort: null,
              ariaValueMax: G,
              ariaValueMin: G,
              ariaValueNow: G,
              ariaValueText: null,
              role: null,
            },
          }),
          eu = er({
            space: "html",
            attributes: {
              acceptcharset: "accept-charset",
              classname: "class",
              htmlfor: "for",
              httpequiv: "http-equiv",
            },
            transform: ea,
            mustUseProperty: ["checked", "multiple", "muted", "selected"],
            properties: {
              abbr: null,
              accept: K,
              acceptCharset: Y,
              accessKey: Y,
              action: null,
              allow: null,
              allowFullScreen: V,
              allowPaymentRequest: V,
              allowUserMedia: V,
              alt: null,
              as: null,
              async: V,
              autoCapitalize: null,
              autoComplete: Y,
              autoFocus: V,
              autoPlay: V,
              blocking: Y,
              capture: null,
              charSet: null,
              checked: V,
              cite: null,
              className: Y,
              cols: G,
              colSpan: null,
              content: null,
              contentEditable: W,
              controls: V,
              controlsList: Y,
              coords: G | K,
              crossOrigin: null,
              data: null,
              dateTime: null,
              decoding: null,
              default: V,
              defer: V,
              dir: null,
              dirName: null,
              disabled: V,
              download: Z,
              draggable: W,
              encType: null,
              enterKeyHint: null,
              fetchPriority: null,
              form: null,
              formAction: null,
              formEncType: null,
              formMethod: null,
              formNoValidate: V,
              formTarget: null,
              headers: Y,
              height: G,
              hidden: V,
              high: G,
              href: null,
              hrefLang: null,
              htmlFor: Y,
              httpEquiv: Y,
              id: null,
              imageSizes: null,
              imageSrcSet: null,
              inert: V,
              inputMode: null,
              integrity: null,
              is: null,
              isMap: V,
              itemId: null,
              itemProp: Y,
              itemRef: Y,
              itemScope: V,
              itemType: Y,
              kind: null,
              label: null,
              lang: null,
              language: null,
              list: null,
              loading: null,
              loop: V,
              low: G,
              manifest: null,
              max: null,
              maxLength: G,
              media: null,
              method: null,
              min: null,
              minLength: G,
              multiple: V,
              muted: V,
              name: null,
              nonce: null,
              noModule: V,
              noValidate: V,
              onAbort: null,
              onAfterPrint: null,
              onAuxClick: null,
              onBeforeMatch: null,
              onBeforePrint: null,
              onBeforeToggle: null,
              onBeforeUnload: null,
              onBlur: null,
              onCancel: null,
              onCanPlay: null,
              onCanPlayThrough: null,
              onChange: null,
              onClick: null,
              onClose: null,
              onContextLost: null,
              onContextMenu: null,
              onContextRestored: null,
              onCopy: null,
              onCueChange: null,
              onCut: null,
              onDblClick: null,
              onDrag: null,
              onDragEnd: null,
              onDragEnter: null,
              onDragExit: null,
              onDragLeave: null,
              onDragOver: null,
              onDragStart: null,
              onDrop: null,
              onDurationChange: null,
              onEmptied: null,
              onEnded: null,
              onError: null,
              onFocus: null,
              onFormData: null,
              onHashChange: null,
              onInput: null,
              onInvalid: null,
              onKeyDown: null,
              onKeyPress: null,
              onKeyUp: null,
              onLanguageChange: null,
              onLoad: null,
              onLoadedData: null,
              onLoadedMetadata: null,
              onLoadEnd: null,
              onLoadStart: null,
              onMessage: null,
              onMessageError: null,
              onMouseDown: null,
              onMouseEnter: null,
              onMouseLeave: null,
              onMouseMove: null,
              onMouseOut: null,
              onMouseOver: null,
              onMouseUp: null,
              onOffline: null,
              onOnline: null,
              onPageHide: null,
              onPageShow: null,
              onPaste: null,
              onPause: null,
              onPlay: null,
              onPlaying: null,
              onPopState: null,
              onProgress: null,
              onRateChange: null,
              onRejectionHandled: null,
              onReset: null,
              onResize: null,
              onScroll: null,
              onScrollEnd: null,
              onSecurityPolicyViolation: null,
              onSeeked: null,
              onSeeking: null,
              onSelect: null,
              onSlotChange: null,
              onStalled: null,
              onStorage: null,
              onSubmit: null,
              onSuspend: null,
              onTimeUpdate: null,
              onToggle: null,
              onUnhandledRejection: null,
              onUnload: null,
              onVolumeChange: null,
              onWaiting: null,
              onWheel: null,
              open: V,
              optimum: G,
              pattern: null,
              ping: Y,
              placeholder: null,
              playsInline: V,
              popover: null,
              popoverTarget: null,
              popoverTargetAction: null,
              poster: null,
              preload: null,
              readOnly: V,
              referrerPolicy: null,
              rel: Y,
              required: V,
              reversed: V,
              rows: G,
              rowSpan: G,
              sandbox: Y,
              scope: null,
              scoped: V,
              seamless: V,
              selected: V,
              shadowRootClonable: V,
              shadowRootDelegatesFocus: V,
              shadowRootMode: null,
              shape: null,
              size: G,
              sizes: null,
              slot: null,
              span: G,
              spellCheck: W,
              src: null,
              srcDoc: null,
              srcLang: null,
              srcSet: null,
              start: G,
              step: null,
              style: null,
              tabIndex: G,
              target: null,
              title: null,
              translate: null,
              type: null,
              typeMustMatch: V,
              useMap: null,
              value: W,
              width: G,
              wrap: null,
              writingSuggestions: null,
              align: null,
              aLink: null,
              archive: Y,
              axis: null,
              background: null,
              bgColor: null,
              border: G,
              borderColor: null,
              bottomMargin: G,
              cellPadding: null,
              cellSpacing: null,
              char: null,
              charOff: null,
              classId: null,
              clear: null,
              code: null,
              codeBase: null,
              codeType: null,
              color: null,
              compact: V,
              declare: V,
              event: null,
              face: null,
              frame: null,
              frameBorder: null,
              hSpace: G,
              leftMargin: G,
              link: null,
              longDesc: null,
              lowSrc: null,
              marginHeight: G,
              marginWidth: G,
              noResize: V,
              noHref: V,
              noShade: V,
              noWrap: V,
              object: null,
              profile: null,
              prompt: null,
              rev: null,
              rightMargin: G,
              rules: null,
              scheme: null,
              scrolling: W,
              standby: null,
              summary: null,
              text: null,
              topMargin: G,
              valueType: null,
              version: null,
              vAlign: null,
              vLink: null,
              vSpace: G,
              allowTransparency: null,
              autoCorrect: null,
              autoSave: null,
              disablePictureInPicture: V,
              disableRemotePlayback: V,
              prefix: null,
              property: null,
              results: G,
              security: null,
              unselectable: null,
            },
          }),
          ed = er({
            space: "svg",
            attributes: {
              accentHeight: "accent-height",
              alignmentBaseline: "alignment-baseline",
              arabicForm: "arabic-form",
              baselineShift: "baseline-shift",
              capHeight: "cap-height",
              className: "class",
              clipPath: "clip-path",
              clipRule: "clip-rule",
              colorInterpolation: "color-interpolation",
              colorInterpolationFilters: "color-interpolation-filters",
              colorProfile: "color-profile",
              colorRendering: "color-rendering",
              crossOrigin: "crossorigin",
              dataType: "datatype",
              dominantBaseline: "dominant-baseline",
              enableBackground: "enable-background",
              fillOpacity: "fill-opacity",
              fillRule: "fill-rule",
              floodColor: "flood-color",
              floodOpacity: "flood-opacity",
              fontFamily: "font-family",
              fontSize: "font-size",
              fontSizeAdjust: "font-size-adjust",
              fontStretch: "font-stretch",
              fontStyle: "font-style",
              fontVariant: "font-variant",
              fontWeight: "font-weight",
              glyphName: "glyph-name",
              glyphOrientationHorizontal: "glyph-orientation-horizontal",
              glyphOrientationVertical: "glyph-orientation-vertical",
              hrefLang: "hreflang",
              horizAdvX: "horiz-adv-x",
              horizOriginX: "horiz-origin-x",
              horizOriginY: "horiz-origin-y",
              imageRendering: "image-rendering",
              letterSpacing: "letter-spacing",
              lightingColor: "lighting-color",
              markerEnd: "marker-end",
              markerMid: "marker-mid",
              markerStart: "marker-start",
              navDown: "nav-down",
              navDownLeft: "nav-down-left",
              navDownRight: "nav-down-right",
              navLeft: "nav-left",
              navNext: "nav-next",
              navPrev: "nav-prev",
              navRight: "nav-right",
              navUp: "nav-up",
              navUpLeft: "nav-up-left",
              navUpRight: "nav-up-right",
              onAbort: "onabort",
              onActivate: "onactivate",
              onAfterPrint: "onafterprint",
              onBeforePrint: "onbeforeprint",
              onBegin: "onbegin",
              onCancel: "oncancel",
              onCanPlay: "oncanplay",
              onCanPlayThrough: "oncanplaythrough",
              onChange: "onchange",
              onClick: "onclick",
              onClose: "onclose",
              onCopy: "oncopy",
              onCueChange: "oncuechange",
              onCut: "oncut",
              onDblClick: "ondblclick",
              onDrag: "ondrag",
              onDragEnd: "ondragend",
              onDragEnter: "ondragenter",
              onDragExit: "ondragexit",
              onDragLeave: "ondragleave",
              onDragOver: "ondragover",
              onDragStart: "ondragstart",
              onDrop: "ondrop",
              onDurationChange: "ondurationchange",
              onEmptied: "onemptied",
              onEnd: "onend",
              onEnded: "onended",
              onError: "onerror",
              onFocus: "onfocus",
              onFocusIn: "onfocusin",
              onFocusOut: "onfocusout",
              onHashChange: "onhashchange",
              onInput: "oninput",
              onInvalid: "oninvalid",
              onKeyDown: "onkeydown",
              onKeyPress: "onkeypress",
              onKeyUp: "onkeyup",
              onLoad: "onload",
              onLoadedData: "onloadeddata",
              onLoadedMetadata: "onloadedmetadata",
              onLoadStart: "onloadstart",
              onMessage: "onmessage",
              onMouseDown: "onmousedown",
              onMouseEnter: "onmouseenter",
              onMouseLeave: "onmouseleave",
              onMouseMove: "onmousemove",
              onMouseOut: "onmouseout",
              onMouseOver: "onmouseover",
              onMouseUp: "onmouseup",
              onMouseWheel: "onmousewheel",
              onOffline: "onoffline",
              onOnline: "ononline",
              onPageHide: "onpagehide",
              onPageShow: "onpageshow",
              onPaste: "onpaste",
              onPause: "onpause",
              onPlay: "onplay",
              onPlaying: "onplaying",
              onPopState: "onpopstate",
              onProgress: "onprogress",
              onRateChange: "onratechange",
              onRepeat: "onrepeat",
              onReset: "onreset",
              onResize: "onresize",
              onScroll: "onscroll",
              onSeeked: "onseeked",
              onSeeking: "onseeking",
              onSelect: "onselect",
              onShow: "onshow",
              onStalled: "onstalled",
              onStorage: "onstorage",
              onSubmit: "onsubmit",
              onSuspend: "onsuspend",
              onTimeUpdate: "ontimeupdate",
              onToggle: "ontoggle",
              onUnload: "onunload",
              onVolumeChange: "onvolumechange",
              onWaiting: "onwaiting",
              onZoom: "onzoom",
              overlinePosition: "overline-position",
              overlineThickness: "overline-thickness",
              paintOrder: "paint-order",
              panose1: "panose-1",
              pointerEvents: "pointer-events",
              referrerPolicy: "referrerpolicy",
              renderingIntent: "rendering-intent",
              shapeRendering: "shape-rendering",
              stopColor: "stop-color",
              stopOpacity: "stop-opacity",
              strikethroughPosition: "strikethrough-position",
              strikethroughThickness: "strikethrough-thickness",
              strokeDashArray: "stroke-dasharray",
              strokeDashOffset: "stroke-dashoffset",
              strokeLineCap: "stroke-linecap",
              strokeLineJoin: "stroke-linejoin",
              strokeMiterLimit: "stroke-miterlimit",
              strokeOpacity: "stroke-opacity",
              strokeWidth: "stroke-width",
              tabIndex: "tabindex",
              textAnchor: "text-anchor",
              textDecoration: "text-decoration",
              textRendering: "text-rendering",
              transformOrigin: "transform-origin",
              typeOf: "typeof",
              underlinePosition: "underline-position",
              underlineThickness: "underline-thickness",
              unicodeBidi: "unicode-bidi",
              unicodeRange: "unicode-range",
              unitsPerEm: "units-per-em",
              vAlphabetic: "v-alphabetic",
              vHanging: "v-hanging",
              vIdeographic: "v-ideographic",
              vMathematical: "v-mathematical",
              vectorEffect: "vector-effect",
              vertAdvY: "vert-adv-y",
              vertOriginX: "vert-origin-x",
              vertOriginY: "vert-origin-y",
              wordSpacing: "word-spacing",
              writingMode: "writing-mode",
              xHeight: "x-height",
              playbackOrder: "playbackorder",
              timelineBegin: "timelinebegin",
            },
            transform: eo,
            properties: {
              about: X,
              accentHeight: G,
              accumulate: null,
              additive: null,
              alignmentBaseline: null,
              alphabetic: G,
              amplitude: G,
              arabicForm: null,
              ascent: G,
              attributeName: null,
              attributeType: null,
              azimuth: G,
              bandwidth: null,
              baselineShift: null,
              baseFrequency: null,
              baseProfile: null,
              bbox: null,
              begin: null,
              bias: G,
              by: null,
              calcMode: null,
              capHeight: G,
              className: Y,
              clip: null,
              clipPath: null,
              clipPathUnits: null,
              clipRule: null,
              color: null,
              colorInterpolation: null,
              colorInterpolationFilters: null,
              colorProfile: null,
              colorRendering: null,
              content: null,
              contentScriptType: null,
              contentStyleType: null,
              crossOrigin: null,
              cursor: null,
              cx: null,
              cy: null,
              d: null,
              dataType: null,
              defaultAction: null,
              descent: G,
              diffuseConstant: G,
              direction: null,
              display: null,
              dur: null,
              divisor: G,
              dominantBaseline: null,
              download: V,
              dx: null,
              dy: null,
              edgeMode: null,
              editable: null,
              elevation: G,
              enableBackground: null,
              end: null,
              event: null,
              exponent: G,
              externalResourcesRequired: null,
              fill: null,
              fillOpacity: G,
              fillRule: null,
              filter: null,
              filterRes: null,
              filterUnits: null,
              floodColor: null,
              floodOpacity: null,
              focusable: null,
              focusHighlight: null,
              fontFamily: null,
              fontSize: null,
              fontSizeAdjust: null,
              fontStretch: null,
              fontStyle: null,
              fontVariant: null,
              fontWeight: null,
              format: null,
              fr: null,
              from: null,
              fx: null,
              fy: null,
              g1: K,
              g2: K,
              glyphName: K,
              glyphOrientationHorizontal: null,
              glyphOrientationVertical: null,
              glyphRef: null,
              gradientTransform: null,
              gradientUnits: null,
              handler: null,
              hanging: G,
              hatchContentUnits: null,
              hatchUnits: null,
              height: null,
              href: null,
              hrefLang: null,
              horizAdvX: G,
              horizOriginX: G,
              horizOriginY: G,
              id: null,
              ideographic: G,
              imageRendering: null,
              initialVisibility: null,
              in: null,
              in2: null,
              intercept: G,
              k: G,
              k1: G,
              k2: G,
              k3: G,
              k4: G,
              kernelMatrix: X,
              kernelUnitLength: null,
              keyPoints: null,
              keySplines: null,
              keyTimes: null,
              kerning: null,
              lang: null,
              lengthAdjust: null,
              letterSpacing: null,
              lightingColor: null,
              limitingConeAngle: G,
              local: null,
              markerEnd: null,
              markerMid: null,
              markerStart: null,
              markerHeight: null,
              markerUnits: null,
              markerWidth: null,
              mask: null,
              maskContentUnits: null,
              maskUnits: null,
              mathematical: null,
              max: null,
              media: null,
              mediaCharacterEncoding: null,
              mediaContentEncodings: null,
              mediaSize: G,
              mediaTime: null,
              method: null,
              min: null,
              mode: null,
              name: null,
              navDown: null,
              navDownLeft: null,
              navDownRight: null,
              navLeft: null,
              navNext: null,
              navPrev: null,
              navRight: null,
              navUp: null,
              navUpLeft: null,
              navUpRight: null,
              numOctaves: null,
              observer: null,
              offset: null,
              onAbort: null,
              onActivate: null,
              onAfterPrint: null,
              onBeforePrint: null,
              onBegin: null,
              onCancel: null,
              onCanPlay: null,
              onCanPlayThrough: null,
              onChange: null,
              onClick: null,
              onClose: null,
              onCopy: null,
              onCueChange: null,
              onCut: null,
              onDblClick: null,
              onDrag: null,
              onDragEnd: null,
              onDragEnter: null,
              onDragExit: null,
              onDragLeave: null,
              onDragOver: null,
              onDragStart: null,
              onDrop: null,
              onDurationChange: null,
              onEmptied: null,
              onEnd: null,
              onEnded: null,
              onError: null,
              onFocus: null,
              onFocusIn: null,
              onFocusOut: null,
              onHashChange: null,
              onInput: null,
              onInvalid: null,
              onKeyDown: null,
              onKeyPress: null,
              onKeyUp: null,
              onLoad: null,
              onLoadedData: null,
              onLoadedMetadata: null,
              onLoadStart: null,
              onMessage: null,
              onMouseDown: null,
              onMouseEnter: null,
              onMouseLeave: null,
              onMouseMove: null,
              onMouseOut: null,
              onMouseOver: null,
              onMouseUp: null,
              onMouseWheel: null,
              onOffline: null,
              onOnline: null,
              onPageHide: null,
              onPageShow: null,
              onPaste: null,
              onPause: null,
              onPlay: null,
              onPlaying: null,
              onPopState: null,
              onProgress: null,
              onRateChange: null,
              onRepeat: null,
              onReset: null,
              onResize: null,
              onScroll: null,
              onSeeked: null,
              onSeeking: null,
              onSelect: null,
              onShow: null,
              onStalled: null,
              onStorage: null,
              onSubmit: null,
              onSuspend: null,
              onTimeUpdate: null,
              onToggle: null,
              onUnload: null,
              onVolumeChange: null,
              onWaiting: null,
              onZoom: null,
              opacity: null,
              operator: null,
              order: null,
              orient: null,
              orientation: null,
              origin: null,
              overflow: null,
              overlay: null,
              overlinePosition: G,
              overlineThickness: G,
              paintOrder: null,
              panose1: null,
              path: null,
              pathLength: G,
              patternContentUnits: null,
              patternTransform: null,
              patternUnits: null,
              phase: null,
              ping: Y,
              pitch: null,
              playbackOrder: null,
              pointerEvents: null,
              points: null,
              pointsAtX: G,
              pointsAtY: G,
              pointsAtZ: G,
              preserveAlpha: null,
              preserveAspectRatio: null,
              primitiveUnits: null,
              propagate: null,
              property: X,
              r: null,
              radius: null,
              referrerPolicy: null,
              refX: null,
              refY: null,
              rel: X,
              rev: X,
              renderingIntent: null,
              repeatCount: null,
              repeatDur: null,
              requiredExtensions: X,
              requiredFeatures: X,
              requiredFonts: X,
              requiredFormats: X,
              resource: null,
              restart: null,
              result: null,
              rotate: null,
              rx: null,
              ry: null,
              scale: null,
              seed: null,
              shapeRendering: null,
              side: null,
              slope: null,
              snapshotTime: null,
              specularConstant: G,
              specularExponent: G,
              spreadMethod: null,
              spacing: null,
              startOffset: null,
              stdDeviation: null,
              stemh: null,
              stemv: null,
              stitchTiles: null,
              stopColor: null,
              stopOpacity: null,
              strikethroughPosition: G,
              strikethroughThickness: G,
              string: null,
              stroke: null,
              strokeDashArray: X,
              strokeDashOffset: null,
              strokeLineCap: null,
              strokeLineJoin: null,
              strokeMiterLimit: G,
              strokeOpacity: G,
              strokeWidth: null,
              style: null,
              surfaceScale: G,
              syncBehavior: null,
              syncBehaviorDefault: null,
              syncMaster: null,
              syncTolerance: null,
              syncToleranceDefault: null,
              systemLanguage: X,
              tabIndex: G,
              tableValues: null,
              target: null,
              targetX: G,
              targetY: G,
              textAnchor: null,
              textDecoration: null,
              textRendering: null,
              textLength: null,
              timelineBegin: null,
              title: null,
              transformBehavior: null,
              type: null,
              typeOf: X,
              to: null,
              transform: null,
              transformOrigin: null,
              u1: null,
              u2: null,
              underlinePosition: G,
              underlineThickness: G,
              unicode: null,
              unicodeBidi: null,
              unicodeRange: null,
              unitsPerEm: G,
              values: null,
              vAlphabetic: G,
              vMathematical: G,
              vectorEffect: null,
              vHanging: G,
              vIdeographic: G,
              version: null,
              vertAdvY: G,
              vertOriginX: G,
              vertOriginY: G,
              viewBox: null,
              viewTarget: null,
              visibility: null,
              width: null,
              widths: null,
              wordSpacing: null,
              writingMode: null,
              x: null,
              x1: null,
              x2: null,
              xChannelSelector: null,
              xHeight: G,
              y: null,
              y1: null,
              y2: null,
              yChannelSelector: null,
              z: null,
              zoomAndPan: null,
            },
          }),
          eh = q([es, ei, el, ec, eu], "html"),
          ep = q([es, ei, el, ec, ed], "svg"),
          ef = /^data[-\w.:]+$/i,
          em = /-[a-z]/g,
          eg = /[A-Z]/g;
        function ey(e) {
          return "-" + e.toLowerCase();
        }
        function ev(e) {
          return e.charAt(1).toUpperCase();
        }
        let eb = {}.hasOwnProperty;
        function ex(e, t) {
          let n = t || {};
          function r(t, ...n) {
            let i = r.invalid,
              s = r.handlers;
            if (t && eb.call(t, e)) {
              let n = String(t[e]);
              i = eb.call(s, n) ? s[n] : r.unknown;
            }
            if (i) return i.call(this, t, ...n);
          }
          return (
            (r.handlers = n.handlers || {}),
            (r.invalid = n.invalid),
            (r.unknown = n.unknown),
            r
          );
        }
        let ek = {}.hasOwnProperty,
          ew = ex("type", {
            handlers: {
              root: function (e, t) {
                let n = {
                  nodeName: "#document",
                  mode: (e.data || {}).quirksMode ? "quirks" : "no-quirks",
                  childNodes: [],
                };
                return (n.childNodes = e_(e.children, n, t)), eO(e, n), n;
              },
              element: function (e, t) {
                let n,
                  r = t;
                "element" === e.type &&
                  "svg" === e.tagName.toLowerCase() &&
                  "html" === t.space &&
                  (r = ep);
                let i = [];
                if (e.properties) {
                  for (n in e.properties)
                    if ("children" !== n && ek.call(e.properties, n)) {
                      let t = (function (e, t, n) {
                        let r = (function (e, t) {
                          let n = U(t),
                            r = t,
                            i = H;
                          if (n in e.normal) return e.property[e.normal[n]];
                          if (
                            n.length > 4 &&
                            "data" === n.slice(0, 4) &&
                            ef.test(t)
                          ) {
                            if ("-" === t.charAt(4)) {
                              let e = t.slice(5).replace(em, ev);
                              r =
                                "data" + e.charAt(0).toUpperCase() + e.slice(1);
                            } else {
                              let e = t.slice(4);
                              if (!em.test(e)) {
                                let n = e.replace(eg, ey);
                                "-" !== n.charAt(0) && (n = "-" + n),
                                  (t = "data" + n);
                              }
                            }
                            i = et;
                          }
                          return new i(r, t);
                        })(e, t);
                        if (
                          !1 === n ||
                          null == n ||
                          ("number" == typeof n && Number.isNaN(n)) ||
                          (!n && r.boolean)
                        )
                          return;
                        Array.isArray(n) &&
                          (n = r.commaSeparated ? (0, _.A)(n) : (0, E.A)(n));
                        let i = {
                          name: r.attribute,
                          value: !0 === n ? "" : String(n),
                        };
                        if (
                          r.space &&
                          "html" !== r.space &&
                          "svg" !== r.space
                        ) {
                          let e = i.name.indexOf(":");
                          e < 0
                            ? (i.prefix = "")
                            : ((i.name = i.name.slice(e + 1)),
                              (i.prefix = r.attribute.slice(0, e))),
                            (i.namespace = P[r.space]);
                        }
                        return i;
                      })(r, n, e.properties[n]);
                      t && i.push(t);
                    }
                }
                let s = r.space;
                (0, k.ok)(s);
                let o = {
                  nodeName: e.tagName,
                  tagName: e.tagName,
                  attrs: i,
                  namespaceURI: P[s],
                  childNodes: [],
                  parentNode: null,
                };
                return (
                  (o.childNodes = e_(e.children, o, r)),
                  eO(e, o),
                  "template" === e.tagName &&
                    e.content &&
                    (o.content = (function (e, t) {
                      let n = {
                        nodeName: "#document-fragment",
                        childNodes: [],
                      };
                      return (n.childNodes = e_(e.children, n, t)), eO(e, n), n;
                    })(e.content, r)),
                  o
                );
              },
              text: function (e) {
                let t = { nodeName: "#text", value: e.value, parentNode: null };
                return eO(e, t), t;
              },
              comment: function (e) {
                let t = {
                  nodeName: "#comment",
                  data: e.value,
                  parentNode: null,
                };
                return eO(e, t), t;
              },
              doctype: function (e) {
                let t = {
                  nodeName: "#documentType",
                  name: "html",
                  publicId: "",
                  systemId: "",
                  parentNode: null,
                };
                return eO(e, t), t;
              },
            },
          });
        function e_(e, t, n) {
          let r = -1,
            i = [];
          if (e)
            for (; ++r < e.length; ) {
              let s = ew(e[r], n);
              (s.parentNode = t), i.push(s);
            }
          return i;
        }
        function eO(e, t) {
          let n = e.position;
          n &&
            n.start &&
            n.end &&
            ((0, k.ok)("number" == typeof n.start.offset),
            (0, k.ok)("number" == typeof n.end.offset),
            (t.sourceCodeLocation = {
              startLine: n.start.line,
              startCol: n.start.column,
              startOffset: n.start.offset,
              endLine: n.end.line,
              endCol: n.end.column,
              endOffset: n.end.offset,
            }));
        }
        let eT = [
            "area",
            "base",
            "basefont",
            "bgsound",
            "br",
            "col",
            "command",
            "embed",
            "frame",
            "hr",
            "image",
            "img",
            "input",
            "keygen",
            "link",
            "meta",
            "param",
            "source",
            "track",
            "wbr",
          ],
          eS = new Set([
            65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143,
            327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287,
            589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431,
            851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575,
            1114110, 1114111,
          ]);
        !(function (e) {
          (e[(e.EOF = -1)] = "EOF"),
            (e[(e.NULL = 0)] = "NULL"),
            (e[(e.TABULATION = 9)] = "TABULATION"),
            (e[(e.CARRIAGE_RETURN = 13)] = "CARRIAGE_RETURN"),
            (e[(e.LINE_FEED = 10)] = "LINE_FEED"),
            (e[(e.FORM_FEED = 12)] = "FORM_FEED"),
            (e[(e.SPACE = 32)] = "SPACE"),
            (e[(e.EXCLAMATION_MARK = 33)] = "EXCLAMATION_MARK"),
            (e[(e.QUOTATION_MARK = 34)] = "QUOTATION_MARK"),
            (e[(e.AMPERSAND = 38)] = "AMPERSAND"),
            (e[(e.APOSTROPHE = 39)] = "APOSTROPHE"),
            (e[(e.HYPHEN_MINUS = 45)] = "HYPHEN_MINUS"),
            (e[(e.SOLIDUS = 47)] = "SOLIDUS"),
            (e[(e.DIGIT_0 = 48)] = "DIGIT_0"),
            (e[(e.DIGIT_9 = 57)] = "DIGIT_9"),
            (e[(e.SEMICOLON = 59)] = "SEMICOLON"),
            (e[(e.LESS_THAN_SIGN = 60)] = "LESS_THAN_SIGN"),
            (e[(e.EQUALS_SIGN = 61)] = "EQUALS_SIGN"),
            (e[(e.GREATER_THAN_SIGN = 62)] = "GREATER_THAN_SIGN"),
            (e[(e.QUESTION_MARK = 63)] = "QUESTION_MARK"),
            (e[(e.LATIN_CAPITAL_A = 65)] = "LATIN_CAPITAL_A"),
            (e[(e.LATIN_CAPITAL_Z = 90)] = "LATIN_CAPITAL_Z"),
            (e[(e.RIGHT_SQUARE_BRACKET = 93)] = "RIGHT_SQUARE_BRACKET"),
            (e[(e.GRAVE_ACCENT = 96)] = "GRAVE_ACCENT"),
            (e[(e.LATIN_SMALL_A = 97)] = "LATIN_SMALL_A"),
            (e[(e.LATIN_SMALL_Z = 122)] = "LATIN_SMALL_Z");
        })(r || (r = {}));
        let eE = {
          DASH_DASH: "--",
          CDATA_START: "[CDATA[",
          DOCTYPE: "doctype",
          SCRIPT: "script",
          PUBLIC: "public",
          SYSTEM: "system",
        };
        function eC(e) {
          return e >= 55296 && e <= 57343;
        }
        function eA(e) {
          return (
            (32 !== e &&
              10 !== e &&
              13 !== e &&
              9 !== e &&
              12 !== e &&
              e >= 1 &&
              e <= 31) ||
            (e >= 127 && e <= 159)
          );
        }
        function eN(e) {
          return (e >= 64976 && e <= 65007) || eS.has(e);
        }
        !(function (e) {
          (e.controlCharacterInInputStream =
            "control-character-in-input-stream"),
            (e.noncharacterInInputStream = "noncharacter-in-input-stream"),
            (e.surrogateInInputStream = "surrogate-in-input-stream"),
            (e.nonVoidHtmlElementStartTagWithTrailingSolidus =
              "non-void-html-element-start-tag-with-trailing-solidus"),
            (e.endTagWithAttributes = "end-tag-with-attributes"),
            (e.endTagWithTrailingSolidus = "end-tag-with-trailing-solidus"),
            (e.unexpectedSolidusInTag = "unexpected-solidus-in-tag"),
            (e.unexpectedNullCharacter = "unexpected-null-character"),
            (e.unexpectedQuestionMarkInsteadOfTagName =
              "unexpected-question-mark-instead-of-tag-name"),
            (e.invalidFirstCharacterOfTagName =
              "invalid-first-character-of-tag-name"),
            (e.unexpectedEqualsSignBeforeAttributeName =
              "unexpected-equals-sign-before-attribute-name"),
            (e.missingEndTagName = "missing-end-tag-name"),
            (e.unexpectedCharacterInAttributeName =
              "unexpected-character-in-attribute-name"),
            (e.unknownNamedCharacterReference =
              "unknown-named-character-reference"),
            (e.missingSemicolonAfterCharacterReference =
              "missing-semicolon-after-character-reference"),
            (e.unexpectedCharacterAfterDoctypeSystemIdentifier =
              "unexpected-character-after-doctype-system-identifier"),
            (e.unexpectedCharacterInUnquotedAttributeValue =
              "unexpected-character-in-unquoted-attribute-value"),
            (e.eofBeforeTagName = "eof-before-tag-name"),
            (e.eofInTag = "eof-in-tag"),
            (e.missingAttributeValue = "missing-attribute-value"),
            (e.missingWhitespaceBetweenAttributes =
              "missing-whitespace-between-attributes"),
            (e.missingWhitespaceAfterDoctypePublicKeyword =
              "missing-whitespace-after-doctype-public-keyword"),
            (e.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers =
              "missing-whitespace-between-doctype-public-and-system-identifiers"),
            (e.missingWhitespaceAfterDoctypeSystemKeyword =
              "missing-whitespace-after-doctype-system-keyword"),
            (e.missingQuoteBeforeDoctypePublicIdentifier =
              "missing-quote-before-doctype-public-identifier"),
            (e.missingQuoteBeforeDoctypeSystemIdentifier =
              "missing-quote-before-doctype-system-identifier"),
            (e.missingDoctypePublicIdentifier =
              "missing-doctype-public-identifier"),
            (e.missingDoctypeSystemIdentifier =
              "missing-doctype-system-identifier"),
            (e.abruptDoctypePublicIdentifier =
              "abrupt-doctype-public-identifier"),
            (e.abruptDoctypeSystemIdentifier =
              "abrupt-doctype-system-identifier"),
            (e.cdataInHtmlContent = "cdata-in-html-content"),
            (e.incorrectlyOpenedComment = "incorrectly-opened-comment"),
            (e.eofInScriptHtmlCommentLikeText =
              "eof-in-script-html-comment-like-text"),
            (e.eofInDoctype = "eof-in-doctype"),
            (e.nestedComment = "nested-comment"),
            (e.abruptClosingOfEmptyComment = "abrupt-closing-of-empty-comment"),
            (e.eofInComment = "eof-in-comment"),
            (e.incorrectlyClosedComment = "incorrectly-closed-comment"),
            (e.eofInCdata = "eof-in-cdata"),
            (e.absenceOfDigitsInNumericCharacterReference =
              "absence-of-digits-in-numeric-character-reference"),
            (e.nullCharacterReference = "null-character-reference"),
            (e.surrogateCharacterReference = "surrogate-character-reference"),
            (e.characterReferenceOutsideUnicodeRange =
              "character-reference-outside-unicode-range"),
            (e.controlCharacterReference = "control-character-reference"),
            (e.noncharacterCharacterReference =
              "noncharacter-character-reference"),
            (e.missingWhitespaceBeforeDoctypeName =
              "missing-whitespace-before-doctype-name"),
            (e.missingDoctypeName = "missing-doctype-name"),
            (e.invalidCharacterSequenceAfterDoctypeName =
              "invalid-character-sequence-after-doctype-name"),
            (e.duplicateAttribute = "duplicate-attribute"),
            (e.nonConformingDoctype = "non-conforming-doctype"),
            (e.missingDoctype = "missing-doctype"),
            (e.misplacedDoctype = "misplaced-doctype"),
            (e.endTagWithoutMatchingOpenElement =
              "end-tag-without-matching-open-element"),
            (e.closingOfElementWithOpenChildElements =
              "closing-of-element-with-open-child-elements"),
            (e.disallowedContentInNoscriptInHead =
              "disallowed-content-in-noscript-in-head"),
            (e.openElementsLeftAfterEof = "open-elements-left-after-eof"),
            (e.abandonedHeadElementChild = "abandoned-head-element-child"),
            (e.misplacedStartTagForHeadElement =
              "misplaced-start-tag-for-head-element"),
            (e.nestedNoscriptInHead = "nested-noscript-in-head"),
            (e.eofInElementThatCanContainOnlyText =
              "eof-in-element-that-can-contain-only-text");
        })(i || (i = {}));
        class eI {
          constructor(e) {
            (this.handler = e),
              (this.html = ""),
              (this.pos = -1),
              (this.lastGapPos = -2),
              (this.gapStack = []),
              (this.skipNextNewLine = !1),
              (this.lastChunkWritten = !1),
              (this.endOfChunkHit = !1),
              (this.bufferWaterline = 65536),
              (this.isEol = !1),
              (this.lineStartPos = 0),
              (this.droppedBufferSize = 0),
              (this.line = 1),
              (this.lastErrOffset = -1);
          }
          get col() {
            return (
              this.pos -
              this.lineStartPos +
              Number(this.lastGapPos !== this.pos)
            );
          }
          get offset() {
            return this.droppedBufferSize + this.pos;
          }
          getError(e, t) {
            let { line: n, col: r, offset: i } = this,
              s = r + t,
              o = i + t;
            return {
              code: e,
              startLine: n,
              endLine: n,
              startCol: s,
              endCol: s,
              startOffset: o,
              endOffset: o,
            };
          }
          _err(e) {
            this.handler.onParseError &&
              this.lastErrOffset !== this.offset &&
              ((this.lastErrOffset = this.offset),
              this.handler.onParseError(this.getError(e, 0)));
          }
          _addGap() {
            this.gapStack.push(this.lastGapPos), (this.lastGapPos = this.pos);
          }
          _processSurrogate(e) {
            if (this.pos !== this.html.length - 1) {
              let t = this.html.charCodeAt(this.pos + 1);
              if (t >= 56320 && t <= 57343)
                return (
                  this.pos++, this._addGap(), (e - 55296) * 1024 + 9216 + t
                );
            } else if (!this.lastChunkWritten)
              return (this.endOfChunkHit = !0), r.EOF;
            return this._err(i.surrogateInInputStream), e;
          }
          willDropParsedChunk() {
            return this.pos > this.bufferWaterline;
          }
          dropParsedChunk() {
            this.willDropParsedChunk() &&
              ((this.html = this.html.substring(this.pos)),
              (this.lineStartPos -= this.pos),
              (this.droppedBufferSize += this.pos),
              (this.pos = 0),
              (this.lastGapPos = -2),
              (this.gapStack.length = 0));
          }
          write(e, t) {
            this.html.length > 0 ? (this.html += e) : (this.html = e),
              (this.endOfChunkHit = !1),
              (this.lastChunkWritten = t);
          }
          insertHtmlAtCurrentPos(e) {
            (this.html =
              this.html.substring(0, this.pos + 1) +
              e +
              this.html.substring(this.pos + 1)),
              (this.endOfChunkHit = !1);
          }
          startsWith(e, t) {
            if (this.pos + e.length > this.html.length)
              return (this.endOfChunkHit = !this.lastChunkWritten), !1;
            if (t) return this.html.startsWith(e, this.pos);
            for (let t = 0; t < e.length; t++)
              if ((32 | this.html.charCodeAt(this.pos + t)) !== e.charCodeAt(t))
                return !1;
            return !0;
          }
          peek(e) {
            let t = this.pos + e;
            if (t >= this.html.length)
              return (this.endOfChunkHit = !this.lastChunkWritten), r.EOF;
            let n = this.html.charCodeAt(t);
            return n === r.CARRIAGE_RETURN ? r.LINE_FEED : n;
          }
          advance() {
            if (
              (this.pos++,
              this.isEol &&
                ((this.isEol = !1),
                this.line++,
                (this.lineStartPos = this.pos)),
              this.pos >= this.html.length)
            )
              return (this.endOfChunkHit = !this.lastChunkWritten), r.EOF;
            let e = this.html.charCodeAt(this.pos);
            return e === r.CARRIAGE_RETURN
              ? ((this.isEol = !0), (this.skipNextNewLine = !0), r.LINE_FEED)
              : e === r.LINE_FEED && ((this.isEol = !0), this.skipNextNewLine)
                ? (this.line--,
                  (this.skipNextNewLine = !1),
                  this._addGap(),
                  this.advance())
                : ((this.skipNextNewLine = !1),
                  eC(e) && (e = this._processSurrogate(e)),
                  null === this.handler.onParseError ||
                    (e > 31 && e < 127) ||
                    e === r.LINE_FEED ||
                    e === r.CARRIAGE_RETURN ||
                    (e > 159 && e < 64976) ||
                    this._checkForProblematicCharacters(e),
                  e);
          }
          _checkForProblematicCharacters(e) {
            eA(e)
              ? this._err(i.controlCharacterInInputStream)
              : eN(e) && this._err(i.noncharacterInInputStream);
          }
          retreat(e) {
            for (this.pos -= e; this.pos < this.lastGapPos; )
              (this.lastGapPos = this.gapStack.pop()), this.pos--;
            this.isEol = !1;
          }
        }
        function eD(e, t) {
          for (let n = e.attrs.length - 1; n >= 0; n--)
            if (e.attrs[n].name === t) return e.attrs[n].value;
          return null;
        }
        !(function (e) {
          (e[(e.CHARACTER = 0)] = "CHARACTER"),
            (e[(e.NULL_CHARACTER = 1)] = "NULL_CHARACTER"),
            (e[(e.WHITESPACE_CHARACTER = 2)] = "WHITESPACE_CHARACTER"),
            (e[(e.START_TAG = 3)] = "START_TAG"),
            (e[(e.END_TAG = 4)] = "END_TAG"),
            (e[(e.COMMENT = 5)] = "COMMENT"),
            (e[(e.DOCTYPE = 6)] = "DOCTYPE"),
            (e[(e.EOF = 7)] = "EOF"),
            (e[(e.HIBERNATION = 8)] = "HIBERNATION");
        })(s || (s = {}));
        let eP = new Uint16Array(
            'ᵁ<\xd5ıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig耻\xc6䃆P耻&䀦cute耻\xc1䃁reve;䄂Āiyx}rc耻\xc2䃂;䐐r;쀀\ud835\udd04rave耻\xc0䃀pha;䎑acr;䄀d;橓Āgp\x9d\xa1on;䄄f;쀀\ud835\udd38plyFunction;恡ing耻\xc5䃅Ācs\xbe\xc3r;쀀\ud835\udc9cign;扔ilde耻\xc3䃃ml耻\xc4䃄Ѐaceforsu\xe5\xfb\xfeėĜĢħĪĀcr\xea\xf2kslash;或Ŷ\xf6\xf8;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀\ud835\udd05pf;쀀\ud835\udd39eve;䋘c\xf2ēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻\xa9䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻\xc7䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷\xf2ſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀\ud835\udc9epĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀\ud835\udd07Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀\ud835\udd3bƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegra\xecȹoɴ͹\0\0ͻ\xbb͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔e\xe5ˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀\ud835\udc9frok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻\xd0䃐cute耻\xc9䃉ƀaiyӒӗӜron;䄚rc耻\xca䃊;䐭ot;䄖r;쀀\ud835\udd08rave耻\xc8䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀\ud835\udd3csilon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻\xcb䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀\ud835\udd09lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀\ud835\udd3dAll;戀riertrf;愱c\xf2׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀\ud835\udd0a;拙pf;쀀\ud835\udd3eeater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀\ud835\udca2;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅ\xf2کrok;䄦mpńېۘownHum\xf0įqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻\xcd䃍Āiyܓܘrc耻\xce䃎;䐘ot;䄰r;愑rave耻\xcc䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lie\xf3ϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀\ud835\udd40a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻\xcf䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀\ud835\udd0dpf;쀀\ud835\udd41ǣ߇\0ߌr;쀀\ud835\udca5rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀\ud835\udd0epf;쀀\ud835\udd42cr;쀀\ud835\udca6րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ight\xe1Μs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀\ud835\udd0fĀ;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊight\xe1οight\xe1ϊf;쀀\ud835\udd43erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂ\xf2ࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀\ud835\udd10nusPlus;戓pf;쀀\ud835\udd44c\xf2੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘\xeb૙eryThi\xee૙tedĀGL૸ଆreaterGreate\xf2ٳessLes\xf3ੈLine;䀊r;쀀\ud835\udd11ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀\ud835\udca9ilde耻\xd1䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻\xd3䃓Āiy෎ීrc耻\xd4䃔;䐞blac;䅐r;쀀\ud835\udd12rave耻\xd2䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀\ud835\udd46enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀\ud835\udcaaash耻\xd8䃘iŬื฼de耻\xd5䃕es;樷ml耻\xd6䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀\ud835\udd13i;䎦;䎠usMinus;䂱Āipຢອncareplan\xe5ڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀\ud835\udcab;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀\ud835\udd14pf;愚cr;쀀\ud835\udcac؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻\xae䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r\xbbཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀\ud835\udd16ortȀDLRUᄪᄴᄾᅉownArrow\xbbОeftArrow\xbb࢚ightArrow\xbb࿝pArrow;憑gma;䎣allCircle;战pf;쀀\ud835\udd4aɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀\ud835\udcaear;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Th\xe1ྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et\xbbሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻\xde䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀\ud835\udd17Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀\ud835\udd4bipleDot;惛Āctዖዛr;쀀\ud835\udcafrok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻\xda䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻\xdb䃛;䐣blac;䅰r;쀀\ud835\udd18rave耻\xd9䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀\ud835\udd4cЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥own\xe1ϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀\ud835\udcb0ilde;䅨ml耻\xdc䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀\ud835\udd19pf;쀀\ud835\udd4dcr;쀀\ud835\udcb1dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀\ud835\udd1apf;쀀\ud835\udd4ecr;쀀\ud835\udcb2Ȁfiosᓋᓐᓒᓘr;쀀\ud835\udd1b;䎞pf;쀀\ud835\udd4fcr;쀀\ud835\udcb3ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻\xdd䃝Āiyᔉᔍrc;䅶;䐫r;쀀\ud835\udd1cpf;쀀\ud835\udd50cr;쀀\ud835\udcb4ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidt\xe8૙a;䎖r;愨pf;愤cr;쀀\ud835\udcb5௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻\xe1䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻\xe2䃢te肻\xb4̆;䐰lig耻\xe6䃦Ā;r\xb2ᖺ;쀀\ud835\udd1erave耻\xe0䃠ĀepᗊᗖĀfpᗏᗔsym;愵\xe8ᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e\xbbᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢\xbb\xb9arr;捼Āgpᙣᙧon;䄅f;쀀\ud835\udd52΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒ\xf1ᚃing耻\xe5䃥ƀctyᚡᚦᚨr;쀀\ud835\udcb6;䀪mpĀ;e዁ᚯ\xf1ʈilde耻\xe3䃣ml耻\xe4䃤Āciᛂᛈonin\xf4ɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e\xbbᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰s\xe9ᜌno\xf5ēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀\ud835\udd1fg΀costuvwឍឝឳេ៕៛៞ƀaiuបពរ\xf0ݠrc;旯p\xbb፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄e\xe5ᑄ\xe5ᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀\ud835\udd53Ā;tᏋᡣom\xbbᏌtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻\xa6䂦Ȁceioᥑᥖᥚᥠr;쀀\ud835\udcb7mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t\xbb᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁\xeeړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻\xe7䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻\xb8ƭptyv;榲t脀\xa2;eᨭᨮ䂢r\xe4Ʋr;쀀\ud835\udd20ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark\xbbᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟\xbbཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it\xbb᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;q\xc7\xc6ɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁\xeeᅠeĀmx᫱᫶ent\xbb᫩e\xf3ɍǧ᫾\0ᬇĀ;dኻᬂot;橭n\xf4Ɇƀfryᬐᬔᬗ;쀀\ud835\udd54o\xe4ɔ脀\xa9;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀\ud835\udcb8Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒre\xe3᭳u\xe3᭵ee;拎edge;拏en耻\xa4䂤earrowĀlrᯮ᯳eft\xbbᮀight\xbbᮽe\xe4ᯝĀciᰁᰇonin\xf4Ƿnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍r\xf2΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸\xf2ᄳhĀ;vᱚᱛ怐\xbbऊūᱡᱧarow;椏a\xe3̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻\xb0䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀\ud835\udd21arĀlrᲳᲵ\xbbࣜ\xbbသʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀\xf7;o᳧ᳰntimes;拇n\xf8᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀\ud835\udd55ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedg\xe5\xfanƀadhᄮᵝᵧownarrow\xf3ᲃarpoonĀlrᵲᵶef\xf4Ჴigh\xf4ᲶŢᵿᶅkaro\xf7གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀\ud835\udcb9;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃r\xf2Щa\xf2ྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴo\xf4ᲉĀcsḎḔute耻\xe9䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻\xea䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀\ud835\udd22ƀ;rsṐṑṗ檚ave耻\xe8䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et\xbbẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀\ud835\udd56ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on\xbbớ;䏵ȀcsuvỪỳἋἣĀioữḱrc\xbbḮɩỹ\0\0ỻ\xedՈantĀglἂἆtr\xbbṝess\xbbṺƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯o\xf4͒ĀahὉὋ;䎷耻\xf0䃰Āmrὓὗl耻\xeb䃫o;悬ƀcipὡὤὧl;䀡s\xf4ծĀeoὬὴctatio\xeeՙnential\xe5չৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotse\xf1Ṅy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀\ud835\udd23lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀\ud835\udd57ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻\xbd䂽;慓耻\xbc䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻\xbe䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀\ud835\udcbbࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lan\xf4٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀\ud835\udd24Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox\xbbℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀\ud835\udd58Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎pro\xf8₞r;楸qĀlqؿ↖les\xf3₈i\xed٫Āen↣↭rtneqq;쀀≩︀\xc5↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽r\xf2ΠȀilmr⇐⇔⇗⇛rs\xf0ᒄf\xbb․il\xf4کĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it\xbb∊lip;怦con;抹r;쀀\ud835\udd25sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀\ud835\udd59bar;怕ƀclt≯≴≸r;쀀\ud835\udcbdas\xe8⇴rok;䄧Ābp⊂⊇ull;恃hen\xbbᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻\xed䃭ƀ;iyݱ⊰⊵rc耻\xee䃮;䐸Ācx⊼⊿y;䐵cl耻\xa1䂡ĀfrΟ⋉;쀀\ud835\udd26rave耻\xec䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓in\xe5ގar\xf4ܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝do\xf4⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙er\xf3ᕣ\xe3⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀\ud835\udd5aa;䎹uest耻\xbf䂿Āci⎊⎏r;쀀\ud835\udcbenʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻\xef䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀\ud835\udd27ath;䈷pf;쀀\ud835\udd5bǣ⏬\0⏱r;쀀\ud835\udcbfrcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀\ud835\udd28reen;䄸cy;䑅cy;䑜pf;쀀\ud835\udd5ccr;쀀\ud835\udcc0஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼r\xf2৆\xf2Εail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴ra\xeeࡌbda;䎻gƀ;dlࢎⓁⓃ;榑\xe5ࢎ;檅uo耻\xab䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝\xeb≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼\xecࢰ\xe2┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□a\xe9⓶arpoonĀdu▯▴own\xbbњp\xbb०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoon\xf3྘quigarro\xf7⇰hreetimes;拋ƀ;qs▋ও◺lan\xf4বʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋ppro\xf8Ⓠot;拖qĀgq♃♅\xf4উgt\xf2⒌\xf4ছi\xedলƀilr♕࣡♚sht;楼;쀀\ud835\udd29Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖r\xf2◁orne\xf2ᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che\xbb⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox\xbb⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽r\xebࣁgƀlmr⛿✍✔eftĀar০✇ight\xe1৲apsto;柼ight\xe1৽parrowĀlr✥✩ef\xf4⓭ight;憬ƀafl✶✹✽r;榅;쀀\ud835\udd5dus;樭imes;樴š❋❏st;戗\xe1ፎƀ;ef❗❘᠀旊nge\xbb❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇r\xf2ࢨorne\xf2ᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀\ud835\udcc1mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹re\xe5◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀\xc5⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻\xaf䂯Āet⡗⡙;時Ā;e⡞⡟朠se\xbb⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻ow\xeeҌef\xf4ए\xf0Ꮡker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle\xbbᘦr;쀀\ud835\udd2ao;愧ƀcdn⢯⢴⣉ro耻\xb5䂵Ȁ;acdᑤ⢽⣀⣄s\xf4ᚧir;櫰ot肻\xb7Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛\xf2−\xf0ઁĀdp⣩⣮els;抧f;쀀\ud835\udd5eĀct⣸⣽r;쀀\ud835\udcc2pos\xbbᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la\xbb˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉ro\xf8඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻\xa0ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸ui\xf6ୣĀei⩊⩎ar;椨\xed஘istĀ;s஠டr;쀀\ud835\udd2bȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lan\xf4௢i\xed௪Ā;rஶ⪁\xbbஷƀAap⪊⪍⪑r\xf2⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹r\xf2⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro\xf7⫁ightarro\xf7⪐ƀ;qs఻⪺⫪lan\xf4ౕĀ;sౕ⫴\xbbశi\xedౝĀ;rవ⫾iĀ;eచథi\xe4ඐĀpt⬌⬑f;쀀\ud835\udd5f膀\xac;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lle\xec୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳u\xe5ಥĀ;cಘ⭸Ā;eಒ⭽\xf1ಘȀAait⮈⮋⮝⮧r\xf2⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow\xbb⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉u\xe5൅;쀀\ud835\udcc3ortɭ⬅\0\0⯖ar\xe1⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭\xe5೸\xe5ഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗ\xf1സȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇ\xecௗlde耻\xf1䃱\xe7ృiangleĀlrⱒⱜeftĀ;eచⱚ\xf1దightĀ;eೋⱥ\xf1೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻\xf3䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻\xf4䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀\ud835\udd2cͯ⵹\0\0⵼\0ⶂn;䋛ave耻\xf2䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨr\xf2᪀Āir⶝ⶠr;榾oss;榻n\xe5๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀\ud835\udd60ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨r\xf2᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f\xbbⷿ耻\xaa䂪耻\xba䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧\xf2⸁ash耻\xf8䃸l;折iŬⸯ⸴de耻\xf5䃵esĀ;aǛ⸺s;樶ml耻\xf6䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀\xb6;l⹭⹮䂶le\xecЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀\ud835\udd2dƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕ma\xf4੶ne;明ƀ;tv⺿⻀⻈䏀chfork\xbb´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎\xf6⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻\xb1ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀\ud835\udd61nd耻\xa3䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷u\xe5໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾ppro\xf8⽃urlye\xf1໙\xf1໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨i\xedໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺\xf0⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴\xef໻rel;抰Āci⿀⿅r;쀀\ud835\udcc5;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀\ud835\udd2epf;쀀\ud835\udd62rime;恗cr;쀀\ud835\udcc6ƀaeo⿸〉〓tĀei⿾々rnion\xf3ڰnt;樖stĀ;e【】䀿\xf1Ἑ\xf4༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがr\xf2Ⴓ\xf2ϝail;検ar\xf2ᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕i\xe3ᅮmptyv;榳gȀ;del࿑らるろ;榒;榥\xe5࿑uo耻\xbb䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞\xeb≝\xf0✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶al\xf3༞ƀabrョリヮr\xf2៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗\xec࿲\xe2ヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜn\xe5Ⴛar\xf4ྩt;断ƀilrㅩဣㅮsht;楽;쀀\ud835\udd2fĀaoㅷㆆrĀduㅽㅿ\xbbѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭa\xe9トarpoonĀduㆻㆿow\xeeㅾp\xbb႒eftĀah㇊㇐rrow\xf3࿪arpoon\xf3Ցightarrows;應quigarro\xf7ニhreetimes;拌g;䋚ingdotse\xf1ἲƀahm㈍㈐㈓r\xf2࿪a\xf2Ց;怏oustĀ;a㈞㈟掱che\xbb㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾r\xebဃƀafl㉇㉊㉎r;榆;쀀\ud835\udd63us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒ar\xf2㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀\ud835\udcc7Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠re\xe5ㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛qu\xef➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡u\xe5ᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓i\xedሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒\xeb∨Ā;oਸ਼਴t耻\xa7䂧i;䀻war;椩mĀin㍩\xf0nu\xf3\xf1t;朶rĀ;o㍶⁕쀀\ud835\udd30Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜i\xe4ᑤara\xec⹯耻\xad䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲ar\xf2ᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetm\xe9㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀\ud835\udd64aĀdr㑍ЂesĀ;u㑔㑕晠it\xbb㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍\xf1ᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝\xf1ᆮƀ;afᅻ㒦ְrť㒫ֱ\xbbᅼar\xf2ᅈȀcemt㒹㒾㓂㓅r;쀀\ud835\udcc8tm\xee\xf1i\xec㐕ar\xe6ᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psilo\xeeỠh\xe9⺯s\xbb⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦ppro\xf8㋺urlye\xf1ᇾ\xf1ᇳƀaes㖂㖈㌛ppro\xf8㌚q\xf1㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻\xb9䂹耻\xb2䂲耻\xb3䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨\xeb∮Ā;oਫ਩war;椪lig耻\xdf䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄r\xeb๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀\ud835\udd31Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮ppro\xf8዁im\xbbኬs\xf0ኞĀas㚺㚮\xf0዁rn耻\xfe䃾Ǭ̟㛆⋧es膀\xd7;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀\xe1⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀\ud835\udd65rk;櫚\xe1㍢rime;怴ƀaip㜏㜒㝤d\xe5ቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own\xbbᶻeftĀ;e⠀㜾\xf1म;扜ightĀ;e㊪㝋\xf1ၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀\ud835\udcc9;䑆cy;䑛rok;䅧Āio㞋㞎x\xf4᝷headĀlr㞗㞠eftarro\xf7ࡏightarrow\xbbཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶r\xf2ϭar;楣Ācr㟜㟢ute耻\xfa䃺\xf2ᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻\xfb䃻;䑃ƀabh㠃㠆㠋r\xf2Ꭽlac;䅱a\xf2ᏃĀir㠓㠘sht;楾;쀀\ud835\udd32rave耻\xf9䃹š㠧㠱rĀlr㠬㠮\xbbॗ\xbbႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r\xbb㡆op;挏ri;旸Āal㡖㡚cr;䅫肻\xa8͉Āgp㡢㡦on;䅳f;쀀\ud835\udd66̀adhlsuᅋ㡸㡽፲㢑㢠own\xe1ᎳarpoonĀlr㢈㢌ef\xf4㠭igh\xf4㠯iƀ;hl㢙㢚㢜䏅\xbbᏺon\xbb㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r\xbb㢽op;挎ng;䅯ri;旹cr;쀀\ud835\udccaƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨\xbb᠓Āam㣯㣲r\xf2㢨l耻\xfc䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠r\xf2ϷarĀ;v㤦㤧櫨;櫩as\xe8ϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖app\xe1␕othin\xe7ẖƀhir㓫⻈㥙op\xf4⾵Ā;hᎷ㥢\xefㆍĀiu㥩㥭gm\xe1㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟et\xe1㚜iangleĀlr㦪㦯eft\xbbथight\xbbၑy;䐲ash\xbbံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨa\xf2ᑩr;쀀\ud835\udd33tr\xe9㦮suĀbp㧯㧱\xbbജ\xbb൙pf;쀀\ud835\udd67ro\xf0໻tr\xe9㦴Ācu㨆㨋r;쀀\ud835\udccbĀbp㨐㨘nĀEe㦀㨖\xbb㥾nĀEe㦒㨞\xbb㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀\ud835\udd34pf;쀀\ud835\udd68Ā;eᑹ㩦at\xe8ᑹcr;쀀\ud835\udcccૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tr\xe9៑r;쀀\ud835\udd35ĀAa㪔㪗r\xf2σr\xf2৶;䎾ĀAa㪡㪤r\xf2θr\xf2৫a\xf0✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀\ud835\udd69im\xe5ឲĀAa㫇㫊r\xf2ώr\xf2ਁĀcq㫒ីr;쀀\ud835\udccdĀpt៖㫜r\xe9។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻\xfd䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻\xa5䂥r;쀀\ud835\udd36cy;䑗pf;쀀\ud835\udd6acr;쀀\ud835\udcceĀcm㬦㬩y;䑎l耻\xff䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡tr\xe6ᕟa;䎶r;쀀\ud835\udd37cy;䐶grarr;懝pf;쀀\ud835\udd6bcr;쀀\ud835\udccfĀjn㮅㮇;怍j;怌'
              .split("")
              .map((e) => e.charCodeAt(0)),
          ),
          eR = new Map([
            [0, 65533],
            [128, 8364],
            [130, 8218],
            [131, 402],
            [132, 8222],
            [133, 8230],
            [134, 8224],
            [135, 8225],
            [136, 710],
            [137, 8240],
            [138, 352],
            [139, 8249],
            [140, 338],
            [142, 381],
            [145, 8216],
            [146, 8217],
            [147, 8220],
            [148, 8221],
            [149, 8226],
            [150, 8211],
            [151, 8212],
            [152, 732],
            [153, 8482],
            [154, 353],
            [155, 8250],
            [156, 339],
            [158, 382],
            [159, 376],
          ]);
        o = String.fromCodePoint;
        function eM(e) {
          return e >= a.ZERO && e <= a.NINE;
        }
        !(function (e) {
          (e[(e.NUM = 35)] = "NUM"),
            (e[(e.SEMI = 59)] = "SEMI"),
            (e[(e.EQUALS = 61)] = "EQUALS"),
            (e[(e.ZERO = 48)] = "ZERO"),
            (e[(e.NINE = 57)] = "NINE"),
            (e[(e.LOWER_A = 97)] = "LOWER_A"),
            (e[(e.LOWER_F = 102)] = "LOWER_F"),
            (e[(e.LOWER_X = 120)] = "LOWER_X"),
            (e[(e.LOWER_Z = 122)] = "LOWER_Z"),
            (e[(e.UPPER_A = 65)] = "UPPER_A"),
            (e[(e.UPPER_F = 70)] = "UPPER_F"),
            (e[(e.UPPER_Z = 90)] = "UPPER_Z");
        })(a || (a = {})),
          !(function (e) {
            (e[(e.VALUE_LENGTH = 49152)] = "VALUE_LENGTH"),
              (e[(e.BRANCH_LENGTH = 16256)] = "BRANCH_LENGTH"),
              (e[(e.JUMP_TABLE = 127)] = "JUMP_TABLE");
          })(l || (l = {})),
          !(function (e) {
            (e[(e.EntityStart = 0)] = "EntityStart"),
              (e[(e.NumericStart = 1)] = "NumericStart"),
              (e[(e.NumericDecimal = 2)] = "NumericDecimal"),
              (e[(e.NumericHex = 3)] = "NumericHex"),
              (e[(e.NamedEntity = 4)] = "NamedEntity");
          })(c || (c = {})),
          (function (e) {
            (e[(e.Legacy = 0)] = "Legacy"),
              (e[(e.Strict = 1)] = "Strict"),
              (e[(e.Attribute = 2)] = "Attribute");
          })(u || (u = {}));
        class eL {
          constructor(e, t, n) {
            (this.decodeTree = e),
              (this.emitCodePoint = t),
              (this.errors = n),
              (this.state = c.EntityStart),
              (this.consumed = 1),
              (this.result = 0),
              (this.treeIndex = 0),
              (this.excess = 1),
              (this.decodeMode = u.Strict);
          }
          startEntity(e) {
            (this.decodeMode = e),
              (this.state = c.EntityStart),
              (this.result = 0),
              (this.treeIndex = 0),
              (this.excess = 1),
              (this.consumed = 1);
          }
          write(e, t) {
            switch (this.state) {
              case c.EntityStart:
                if (e.charCodeAt(t) === a.NUM)
                  return (
                    (this.state = c.NumericStart),
                    (this.consumed += 1),
                    this.stateNumericStart(e, t + 1)
                  );
                return (
                  (this.state = c.NamedEntity), this.stateNamedEntity(e, t)
                );
              case c.NumericStart:
                return this.stateNumericStart(e, t);
              case c.NumericDecimal:
                return this.stateNumericDecimal(e, t);
              case c.NumericHex:
                return this.stateNumericHex(e, t);
              case c.NamedEntity:
                return this.stateNamedEntity(e, t);
            }
          }
          stateNumericStart(e, t) {
            return t >= e.length
              ? -1
              : (32 | e.charCodeAt(t)) === a.LOWER_X
                ? ((this.state = c.NumericHex),
                  (this.consumed += 1),
                  this.stateNumericHex(e, t + 1))
                : ((this.state = c.NumericDecimal),
                  this.stateNumericDecimal(e, t));
          }
          addToNumericResult(e, t, n, r) {
            if (t !== n) {
              let i = n - t;
              (this.result =
                this.result * Math.pow(r, i) +
                Number.parseInt(e.substr(t, i), r)),
                (this.consumed += i);
            }
          }
          stateNumericHex(e, t) {
            let n = t;
            for (; t < e.length; ) {
              var r;
              let i = e.charCodeAt(t);
              if (
                !eM(i) &&
                (!((r = i) >= a.UPPER_A) || !(r <= a.UPPER_F)) &&
                (!(r >= a.LOWER_A) || !(r <= a.LOWER_F))
              )
                return (
                  this.addToNumericResult(e, n, t, 16),
                  this.emitNumericEntity(i, 3)
                );
              t += 1;
            }
            return this.addToNumericResult(e, n, t, 16), -1;
          }
          stateNumericDecimal(e, t) {
            let n = t;
            for (; t < e.length; ) {
              let r = e.charCodeAt(t);
              if (!eM(r))
                return (
                  this.addToNumericResult(e, n, t, 10),
                  this.emitNumericEntity(r, 2)
                );
              t += 1;
            }
            return this.addToNumericResult(e, n, t, 10), -1;
          }
          emitNumericEntity(e, t) {
            var n, r, i;
            if (this.consumed <= t)
              return (
                null == (n = this.errors) ||
                  n.absenceOfDigitsInNumericCharacterReference(this.consumed),
                0
              );
            if (e === a.SEMI) this.consumed += 1;
            else if (this.decodeMode === u.Strict) return 0;
            return (
              this.emitCodePoint(
                ((r = this.result) >= 55296 && r <= 57343) || r > 1114111
                  ? 65533
                  : null != (i = eR.get(r))
                    ? i
                    : r,
                this.consumed,
              ),
              this.errors &&
                (e !== a.SEMI &&
                  this.errors.missingSemicolonAfterCharacterReference(),
                this.errors.validateNumericCharacterReference(this.result)),
              this.consumed
            );
          }
          stateNamedEntity(e, t) {
            let { decodeTree: n } = this,
              r = n[this.treeIndex],
              i = (r & l.VALUE_LENGTH) >> 14;
            for (; t < e.length; t++, this.excess++) {
              let s = e.charCodeAt(t);
              if (
                ((this.treeIndex = (function (e, t, n, r) {
                  let i = (t & l.BRANCH_LENGTH) >> 7,
                    s = t & l.JUMP_TABLE;
                  if (0 === i) return 0 !== s && r === s ? n : -1;
                  if (s) {
                    let t = r - s;
                    return t < 0 || t >= i ? -1 : e[n + t] - 1;
                  }
                  let o = n,
                    a = o + i - 1;
                  for (; o <= a; ) {
                    let t = (o + a) >>> 1,
                      n = e[t];
                    if (n < r) o = t + 1;
                    else {
                      if (!(n > r)) return e[t + i];
                      a = t - 1;
                    }
                  }
                  return -1;
                })(n, r, this.treeIndex + Math.max(1, i), s)),
                this.treeIndex < 0)
              )
                return 0 === this.result ||
                  (this.decodeMode === u.Attribute &&
                    (0 === i ||
                      (function (e) {
                        var t;
                        return (
                          e === a.EQUALS ||
                          ((t = e) >= a.UPPER_A && t <= a.UPPER_Z) ||
                          (t >= a.LOWER_A && t <= a.LOWER_Z) ||
                          eM(t)
                        );
                      })(s)))
                  ? 0
                  : this.emitNotTerminatedNamedEntity();
              if (0 != (i = ((r = n[this.treeIndex]) & l.VALUE_LENGTH) >> 14)) {
                if (s === a.SEMI)
                  return this.emitNamedEntityData(
                    this.treeIndex,
                    i,
                    this.consumed + this.excess,
                  );
                this.decodeMode !== u.Strict &&
                  ((this.result = this.treeIndex),
                  (this.consumed += this.excess),
                  (this.excess = 0));
              }
            }
            return -1;
          }
          emitNotTerminatedNamedEntity() {
            var e;
            let { result: t, decodeTree: n } = this,
              r = (n[t] & l.VALUE_LENGTH) >> 14;
            return (
              this.emitNamedEntityData(t, r, this.consumed),
              null == (e = this.errors) ||
                e.missingSemicolonAfterCharacterReference(),
              this.consumed
            );
          }
          emitNamedEntityData(e, t, n) {
            let { decodeTree: r } = this;
            return (
              this.emitCodePoint(
                1 === t ? r[e] & ~l.VALUE_LENGTH : r[e + 1],
                n,
              ),
              3 === t && this.emitCodePoint(r[e + 2], n),
              n
            );
          }
          end() {
            var e;
            switch (this.state) {
              case c.NamedEntity:
                return 0 !== this.result &&
                  (this.decodeMode !== u.Attribute ||
                    this.result === this.treeIndex)
                  ? this.emitNotTerminatedNamedEntity()
                  : 0;
              case c.NumericDecimal:
                return this.emitNumericEntity(0, 2);
              case c.NumericHex:
                return this.emitNumericEntity(0, 3);
              case c.NumericStart:
                return (
                  null == (e = this.errors) ||
                    e.absenceOfDigitsInNumericCharacterReference(this.consumed),
                  0
                );
              case c.EntityStart:
                return 0;
            }
          }
        }
        !(function (e) {
          (e.HTML = "http://www.w3.org/1999/xhtml"),
            (e.MATHML = "http://www.w3.org/1998/Math/MathML"),
            (e.SVG = "http://www.w3.org/2000/svg"),
            (e.XLINK = "http://www.w3.org/1999/xlink"),
            (e.XML = "http://www.w3.org/XML/1998/namespace"),
            (e.XMLNS = "http://www.w3.org/2000/xmlns/");
        })(d || (d = {})),
          (function (e) {
            (e.TYPE = "type"),
              (e.ACTION = "action"),
              (e.ENCODING = "encoding"),
              (e.PROMPT = "prompt"),
              (e.NAME = "name"),
              (e.COLOR = "color"),
              (e.FACE = "face"),
              (e.SIZE = "size");
          })(h || (h = {})),
          (function (e) {
            (e.NO_QUIRKS = "no-quirks"),
              (e.QUIRKS = "quirks"),
              (e.LIMITED_QUIRKS = "limited-quirks");
          })(p || (p = {})),
          (function (e) {
            (e.A = "a"),
              (e.ADDRESS = "address"),
              (e.ANNOTATION_XML = "annotation-xml"),
              (e.APPLET = "applet"),
              (e.AREA = "area"),
              (e.ARTICLE = "article"),
              (e.ASIDE = "aside"),
              (e.B = "b"),
              (e.BASE = "base"),
              (e.BASEFONT = "basefont"),
              (e.BGSOUND = "bgsound"),
              (e.BIG = "big"),
              (e.BLOCKQUOTE = "blockquote"),
              (e.BODY = "body"),
              (e.BR = "br"),
              (e.BUTTON = "button"),
              (e.CAPTION = "caption"),
              (e.CENTER = "center"),
              (e.CODE = "code"),
              (e.COL = "col"),
              (e.COLGROUP = "colgroup"),
              (e.DD = "dd"),
              (e.DESC = "desc"),
              (e.DETAILS = "details"),
              (e.DIALOG = "dialog"),
              (e.DIR = "dir"),
              (e.DIV = "div"),
              (e.DL = "dl"),
              (e.DT = "dt"),
              (e.EM = "em"),
              (e.EMBED = "embed"),
              (e.FIELDSET = "fieldset"),
              (e.FIGCAPTION = "figcaption"),
              (e.FIGURE = "figure"),
              (e.FONT = "font"),
              (e.FOOTER = "footer"),
              (e.FOREIGN_OBJECT = "foreignObject"),
              (e.FORM = "form"),
              (e.FRAME = "frame"),
              (e.FRAMESET = "frameset"),
              (e.H1 = "h1"),
              (e.H2 = "h2"),
              (e.H3 = "h3"),
              (e.H4 = "h4"),
              (e.H5 = "h5"),
              (e.H6 = "h6"),
              (e.HEAD = "head"),
              (e.HEADER = "header"),
              (e.HGROUP = "hgroup"),
              (e.HR = "hr"),
              (e.HTML = "html"),
              (e.I = "i"),
              (e.IMG = "img"),
              (e.IMAGE = "image"),
              (e.INPUT = "input"),
              (e.IFRAME = "iframe"),
              (e.KEYGEN = "keygen"),
              (e.LABEL = "label"),
              (e.LI = "li"),
              (e.LINK = "link"),
              (e.LISTING = "listing"),
              (e.MAIN = "main"),
              (e.MALIGNMARK = "malignmark"),
              (e.MARQUEE = "marquee"),
              (e.MATH = "math"),
              (e.MENU = "menu"),
              (e.META = "meta"),
              (e.MGLYPH = "mglyph"),
              (e.MI = "mi"),
              (e.MO = "mo"),
              (e.MN = "mn"),
              (e.MS = "ms"),
              (e.MTEXT = "mtext"),
              (e.NAV = "nav"),
              (e.NOBR = "nobr"),
              (e.NOFRAMES = "noframes"),
              (e.NOEMBED = "noembed"),
              (e.NOSCRIPT = "noscript"),
              (e.OBJECT = "object"),
              (e.OL = "ol"),
              (e.OPTGROUP = "optgroup"),
              (e.OPTION = "option"),
              (e.P = "p"),
              (e.PARAM = "param"),
              (e.PLAINTEXT = "plaintext"),
              (e.PRE = "pre"),
              (e.RB = "rb"),
              (e.RP = "rp"),
              (e.RT = "rt"),
              (e.RTC = "rtc"),
              (e.RUBY = "ruby"),
              (e.S = "s"),
              (e.SCRIPT = "script"),
              (e.SEARCH = "search"),
              (e.SECTION = "section"),
              (e.SELECT = "select"),
              (e.SOURCE = "source"),
              (e.SMALL = "small"),
              (e.SPAN = "span"),
              (e.STRIKE = "strike"),
              (e.STRONG = "strong"),
              (e.STYLE = "style"),
              (e.SUB = "sub"),
              (e.SUMMARY = "summary"),
              (e.SUP = "sup"),
              (e.TABLE = "table"),
              (e.TBODY = "tbody"),
              (e.TEMPLATE = "template"),
              (e.TEXTAREA = "textarea"),
              (e.TFOOT = "tfoot"),
              (e.TD = "td"),
              (e.TH = "th"),
              (e.THEAD = "thead"),
              (e.TITLE = "title"),
              (e.TR = "tr"),
              (e.TRACK = "track"),
              (e.TT = "tt"),
              (e.U = "u"),
              (e.UL = "ul"),
              (e.SVG = "svg"),
              (e.VAR = "var"),
              (e.WBR = "wbr"),
              (e.XMP = "xmp");
          })(f || (f = {})),
          (function (e) {
            (e[(e.UNKNOWN = 0)] = "UNKNOWN"),
              (e[(e.A = 1)] = "A"),
              (e[(e.ADDRESS = 2)] = "ADDRESS"),
              (e[(e.ANNOTATION_XML = 3)] = "ANNOTATION_XML"),
              (e[(e.APPLET = 4)] = "APPLET"),
              (e[(e.AREA = 5)] = "AREA"),
              (e[(e.ARTICLE = 6)] = "ARTICLE"),
              (e[(e.ASIDE = 7)] = "ASIDE"),
              (e[(e.B = 8)] = "B"),
              (e[(e.BASE = 9)] = "BASE"),
              (e[(e.BASEFONT = 10)] = "BASEFONT"),
              (e[(e.BGSOUND = 11)] = "BGSOUND"),
              (e[(e.BIG = 12)] = "BIG"),
              (e[(e.BLOCKQUOTE = 13)] = "BLOCKQUOTE"),
              (e[(e.BODY = 14)] = "BODY"),
              (e[(e.BR = 15)] = "BR"),
              (e[(e.BUTTON = 16)] = "BUTTON"),
              (e[(e.CAPTION = 17)] = "CAPTION"),
              (e[(e.CENTER = 18)] = "CENTER"),
              (e[(e.CODE = 19)] = "CODE"),
              (e[(e.COL = 20)] = "COL"),
              (e[(e.COLGROUP = 21)] = "COLGROUP"),
              (e[(e.DD = 22)] = "DD"),
              (e[(e.DESC = 23)] = "DESC"),
              (e[(e.DETAILS = 24)] = "DETAILS"),
              (e[(e.DIALOG = 25)] = "DIALOG"),
              (e[(e.DIR = 26)] = "DIR"),
              (e[(e.DIV = 27)] = "DIV"),
              (e[(e.DL = 28)] = "DL"),
              (e[(e.DT = 29)] = "DT"),
              (e[(e.EM = 30)] = "EM"),
              (e[(e.EMBED = 31)] = "EMBED"),
              (e[(e.FIELDSET = 32)] = "FIELDSET"),
              (e[(e.FIGCAPTION = 33)] = "FIGCAPTION"),
              (e[(e.FIGURE = 34)] = "FIGURE"),
              (e[(e.FONT = 35)] = "FONT"),
              (e[(e.FOOTER = 36)] = "FOOTER"),
              (e[(e.FOREIGN_OBJECT = 37)] = "FOREIGN_OBJECT"),
              (e[(e.FORM = 38)] = "FORM"),
              (e[(e.FRAME = 39)] = "FRAME"),
              (e[(e.FRAMESET = 40)] = "FRAMESET"),
              (e[(e.H1 = 41)] = "H1"),
              (e[(e.H2 = 42)] = "H2"),
              (e[(e.H3 = 43)] = "H3"),
              (e[(e.H4 = 44)] = "H4"),
              (e[(e.H5 = 45)] = "H5"),
              (e[(e.H6 = 46)] = "H6"),
              (e[(e.HEAD = 47)] = "HEAD"),
              (e[(e.HEADER = 48)] = "HEADER"),
              (e[(e.HGROUP = 49)] = "HGROUP"),
              (e[(e.HR = 50)] = "HR"),
              (e[(e.HTML = 51)] = "HTML"),
              (e[(e.I = 52)] = "I"),
              (e[(e.IMG = 53)] = "IMG"),
              (e[(e.IMAGE = 54)] = "IMAGE"),
              (e[(e.INPUT = 55)] = "INPUT"),
              (e[(e.IFRAME = 56)] = "IFRAME"),
              (e[(e.KEYGEN = 57)] = "KEYGEN"),
              (e[(e.LABEL = 58)] = "LABEL"),
              (e[(e.LI = 59)] = "LI"),
              (e[(e.LINK = 60)] = "LINK"),
              (e[(e.LISTING = 61)] = "LISTING"),
              (e[(e.MAIN = 62)] = "MAIN"),
              (e[(e.MALIGNMARK = 63)] = "MALIGNMARK"),
              (e[(e.MARQUEE = 64)] = "MARQUEE"),
              (e[(e.MATH = 65)] = "MATH"),
              (e[(e.MENU = 66)] = "MENU"),
              (e[(e.META = 67)] = "META"),
              (e[(e.MGLYPH = 68)] = "MGLYPH"),
              (e[(e.MI = 69)] = "MI"),
              (e[(e.MO = 70)] = "MO"),
              (e[(e.MN = 71)] = "MN"),
              (e[(e.MS = 72)] = "MS"),
              (e[(e.MTEXT = 73)] = "MTEXT"),
              (e[(e.NAV = 74)] = "NAV"),
              (e[(e.NOBR = 75)] = "NOBR"),
              (e[(e.NOFRAMES = 76)] = "NOFRAMES"),
              (e[(e.NOEMBED = 77)] = "NOEMBED"),
              (e[(e.NOSCRIPT = 78)] = "NOSCRIPT"),
              (e[(e.OBJECT = 79)] = "OBJECT"),
              (e[(e.OL = 80)] = "OL"),
              (e[(e.OPTGROUP = 81)] = "OPTGROUP"),
              (e[(e.OPTION = 82)] = "OPTION"),
              (e[(e.P = 83)] = "P"),
              (e[(e.PARAM = 84)] = "PARAM"),
              (e[(e.PLAINTEXT = 85)] = "PLAINTEXT"),
              (e[(e.PRE = 86)] = "PRE"),
              (e[(e.RB = 87)] = "RB"),
              (e[(e.RP = 88)] = "RP"),
              (e[(e.RT = 89)] = "RT"),
              (e[(e.RTC = 90)] = "RTC"),
              (e[(e.RUBY = 91)] = "RUBY"),
              (e[(e.S = 92)] = "S"),
              (e[(e.SCRIPT = 93)] = "SCRIPT"),
              (e[(e.SEARCH = 94)] = "SEARCH"),
              (e[(e.SECTION = 95)] = "SECTION"),
              (e[(e.SELECT = 96)] = "SELECT"),
              (e[(e.SOURCE = 97)] = "SOURCE"),
              (e[(e.SMALL = 98)] = "SMALL"),
              (e[(e.SPAN = 99)] = "SPAN"),
              (e[(e.STRIKE = 100)] = "STRIKE"),
              (e[(e.STRONG = 101)] = "STRONG"),
              (e[(e.STYLE = 102)] = "STYLE"),
              (e[(e.SUB = 103)] = "SUB"),
              (e[(e.SUMMARY = 104)] = "SUMMARY"),
              (e[(e.SUP = 105)] = "SUP"),
              (e[(e.TABLE = 106)] = "TABLE"),
              (e[(e.TBODY = 107)] = "TBODY"),
              (e[(e.TEMPLATE = 108)] = "TEMPLATE"),
              (e[(e.TEXTAREA = 109)] = "TEXTAREA"),
              (e[(e.TFOOT = 110)] = "TFOOT"),
              (e[(e.TD = 111)] = "TD"),
              (e[(e.TH = 112)] = "TH"),
              (e[(e.THEAD = 113)] = "THEAD"),
              (e[(e.TITLE = 114)] = "TITLE"),
              (e[(e.TR = 115)] = "TR"),
              (e[(e.TRACK = 116)] = "TRACK"),
              (e[(e.TT = 117)] = "TT"),
              (e[(e.U = 118)] = "U"),
              (e[(e.UL = 119)] = "UL"),
              (e[(e.SVG = 120)] = "SVG"),
              (e[(e.VAR = 121)] = "VAR"),
              (e[(e.WBR = 122)] = "WBR"),
              (e[(e.XMP = 123)] = "XMP");
          })(m || (m = {}));
        let ej = new Map([
          [f.A, m.A],
          [f.ADDRESS, m.ADDRESS],
          [f.ANNOTATION_XML, m.ANNOTATION_XML],
          [f.APPLET, m.APPLET],
          [f.AREA, m.AREA],
          [f.ARTICLE, m.ARTICLE],
          [f.ASIDE, m.ASIDE],
          [f.B, m.B],
          [f.BASE, m.BASE],
          [f.BASEFONT, m.BASEFONT],
          [f.BGSOUND, m.BGSOUND],
          [f.BIG, m.BIG],
          [f.BLOCKQUOTE, m.BLOCKQUOTE],
          [f.BODY, m.BODY],
          [f.BR, m.BR],
          [f.BUTTON, m.BUTTON],
          [f.CAPTION, m.CAPTION],
          [f.CENTER, m.CENTER],
          [f.CODE, m.CODE],
          [f.COL, m.COL],
          [f.COLGROUP, m.COLGROUP],
          [f.DD, m.DD],
          [f.DESC, m.DESC],
          [f.DETAILS, m.DETAILS],
          [f.DIALOG, m.DIALOG],
          [f.DIR, m.DIR],
          [f.DIV, m.DIV],
          [f.DL, m.DL],
          [f.DT, m.DT],
          [f.EM, m.EM],
          [f.EMBED, m.EMBED],
          [f.FIELDSET, m.FIELDSET],
          [f.FIGCAPTION, m.FIGCAPTION],
          [f.FIGURE, m.FIGURE],
          [f.FONT, m.FONT],
          [f.FOOTER, m.FOOTER],
          [f.FOREIGN_OBJECT, m.FOREIGN_OBJECT],
          [f.FORM, m.FORM],
          [f.FRAME, m.FRAME],
          [f.FRAMESET, m.FRAMESET],
          [f.H1, m.H1],
          [f.H2, m.H2],
          [f.H3, m.H3],
          [f.H4, m.H4],
          [f.H5, m.H5],
          [f.H6, m.H6],
          [f.HEAD, m.HEAD],
          [f.HEADER, m.HEADER],
          [f.HGROUP, m.HGROUP],
          [f.HR, m.HR],
          [f.HTML, m.HTML],
          [f.I, m.I],
          [f.IMG, m.IMG],
          [f.IMAGE, m.IMAGE],
          [f.INPUT, m.INPUT],
          [f.IFRAME, m.IFRAME],
          [f.KEYGEN, m.KEYGEN],
          [f.LABEL, m.LABEL],
          [f.LI, m.LI],
          [f.LINK, m.LINK],
          [f.LISTING, m.LISTING],
          [f.MAIN, m.MAIN],
          [f.MALIGNMARK, m.MALIGNMARK],
          [f.MARQUEE, m.MARQUEE],
          [f.MATH, m.MATH],
          [f.MENU, m.MENU],
          [f.META, m.META],
          [f.MGLYPH, m.MGLYPH],
          [f.MI, m.MI],
          [f.MO, m.MO],
          [f.MN, m.MN],
          [f.MS, m.MS],
          [f.MTEXT, m.MTEXT],
          [f.NAV, m.NAV],
          [f.NOBR, m.NOBR],
          [f.NOFRAMES, m.NOFRAMES],
          [f.NOEMBED, m.NOEMBED],
          [f.NOSCRIPT, m.NOSCRIPT],
          [f.OBJECT, m.OBJECT],
          [f.OL, m.OL],
          [f.OPTGROUP, m.OPTGROUP],
          [f.OPTION, m.OPTION],
          [f.P, m.P],
          [f.PARAM, m.PARAM],
          [f.PLAINTEXT, m.PLAINTEXT],
          [f.PRE, m.PRE],
          [f.RB, m.RB],
          [f.RP, m.RP],
          [f.RT, m.RT],
          [f.RTC, m.RTC],
          [f.RUBY, m.RUBY],
          [f.S, m.S],
          [f.SCRIPT, m.SCRIPT],
          [f.SEARCH, m.SEARCH],
          [f.SECTION, m.SECTION],
          [f.SELECT, m.SELECT],
          [f.SOURCE, m.SOURCE],
          [f.SMALL, m.SMALL],
          [f.SPAN, m.SPAN],
          [f.STRIKE, m.STRIKE],
          [f.STRONG, m.STRONG],
          [f.STYLE, m.STYLE],
          [f.SUB, m.SUB],
          [f.SUMMARY, m.SUMMARY],
          [f.SUP, m.SUP],
          [f.TABLE, m.TABLE],
          [f.TBODY, m.TBODY],
          [f.TEMPLATE, m.TEMPLATE],
          [f.TEXTAREA, m.TEXTAREA],
          [f.TFOOT, m.TFOOT],
          [f.TD, m.TD],
          [f.TH, m.TH],
          [f.THEAD, m.THEAD],
          [f.TITLE, m.TITLE],
          [f.TR, m.TR],
          [f.TRACK, m.TRACK],
          [f.TT, m.TT],
          [f.U, m.U],
          [f.UL, m.UL],
          [f.SVG, m.SVG],
          [f.VAR, m.VAR],
          [f.WBR, m.WBR],
          [f.XMP, m.XMP],
        ]);
        function eF(e) {
          var t;
          return null != (t = ej.get(e)) ? t : m.UNKNOWN;
        }
        let eB = m,
          ez = {
            [d.HTML]: new Set([
              eB.ADDRESS,
              eB.APPLET,
              eB.AREA,
              eB.ARTICLE,
              eB.ASIDE,
              eB.BASE,
              eB.BASEFONT,
              eB.BGSOUND,
              eB.BLOCKQUOTE,
              eB.BODY,
              eB.BR,
              eB.BUTTON,
              eB.CAPTION,
              eB.CENTER,
              eB.COL,
              eB.COLGROUP,
              eB.DD,
              eB.DETAILS,
              eB.DIR,
              eB.DIV,
              eB.DL,
              eB.DT,
              eB.EMBED,
              eB.FIELDSET,
              eB.FIGCAPTION,
              eB.FIGURE,
              eB.FOOTER,
              eB.FORM,
              eB.FRAME,
              eB.FRAMESET,
              eB.H1,
              eB.H2,
              eB.H3,
              eB.H4,
              eB.H5,
              eB.H6,
              eB.HEAD,
              eB.HEADER,
              eB.HGROUP,
              eB.HR,
              eB.HTML,
              eB.IFRAME,
              eB.IMG,
              eB.INPUT,
              eB.LI,
              eB.LINK,
              eB.LISTING,
              eB.MAIN,
              eB.MARQUEE,
              eB.MENU,
              eB.META,
              eB.NAV,
              eB.NOEMBED,
              eB.NOFRAMES,
              eB.NOSCRIPT,
              eB.OBJECT,
              eB.OL,
              eB.P,
              eB.PARAM,
              eB.PLAINTEXT,
              eB.PRE,
              eB.SCRIPT,
              eB.SECTION,
              eB.SELECT,
              eB.SOURCE,
              eB.STYLE,
              eB.SUMMARY,
              eB.TABLE,
              eB.TBODY,
              eB.TD,
              eB.TEMPLATE,
              eB.TEXTAREA,
              eB.TFOOT,
              eB.TH,
              eB.THEAD,
              eB.TITLE,
              eB.TR,
              eB.TRACK,
              eB.UL,
              eB.WBR,
              eB.XMP,
            ]),
            [d.MATHML]: new Set([
              eB.MI,
              eB.MO,
              eB.MN,
              eB.MS,
              eB.MTEXT,
              eB.ANNOTATION_XML,
            ]),
            [d.SVG]: new Set([eB.TITLE, eB.FOREIGN_OBJECT, eB.DESC]),
            [d.XLINK]: new Set(),
            [d.XML]: new Set(),
            [d.XMLNS]: new Set(),
          },
          e$ = new Set([eB.H1, eB.H2, eB.H3, eB.H4, eB.H5, eB.H6]);
        f.STYLE,
          f.SCRIPT,
          f.XMP,
          f.IFRAME,
          f.NOEMBED,
          f.NOFRAMES,
          f.PLAINTEXT,
          !(function (e) {
            (e[(e.DATA = 0)] = "DATA"),
              (e[(e.RCDATA = 1)] = "RCDATA"),
              (e[(e.RAWTEXT = 2)] = "RAWTEXT"),
              (e[(e.SCRIPT_DATA = 3)] = "SCRIPT_DATA"),
              (e[(e.PLAINTEXT = 4)] = "PLAINTEXT"),
              (e[(e.TAG_OPEN = 5)] = "TAG_OPEN"),
              (e[(e.END_TAG_OPEN = 6)] = "END_TAG_OPEN"),
              (e[(e.TAG_NAME = 7)] = "TAG_NAME"),
              (e[(e.RCDATA_LESS_THAN_SIGN = 8)] = "RCDATA_LESS_THAN_SIGN"),
              (e[(e.RCDATA_END_TAG_OPEN = 9)] = "RCDATA_END_TAG_OPEN"),
              (e[(e.RCDATA_END_TAG_NAME = 10)] = "RCDATA_END_TAG_NAME"),
              (e[(e.RAWTEXT_LESS_THAN_SIGN = 11)] = "RAWTEXT_LESS_THAN_SIGN"),
              (e[(e.RAWTEXT_END_TAG_OPEN = 12)] = "RAWTEXT_END_TAG_OPEN"),
              (e[(e.RAWTEXT_END_TAG_NAME = 13)] = "RAWTEXT_END_TAG_NAME"),
              (e[(e.SCRIPT_DATA_LESS_THAN_SIGN = 14)] =
                "SCRIPT_DATA_LESS_THAN_SIGN"),
              (e[(e.SCRIPT_DATA_END_TAG_OPEN = 15)] =
                "SCRIPT_DATA_END_TAG_OPEN"),
              (e[(e.SCRIPT_DATA_END_TAG_NAME = 16)] =
                "SCRIPT_DATA_END_TAG_NAME"),
              (e[(e.SCRIPT_DATA_ESCAPE_START = 17)] =
                "SCRIPT_DATA_ESCAPE_START"),
              (e[(e.SCRIPT_DATA_ESCAPE_START_DASH = 18)] =
                "SCRIPT_DATA_ESCAPE_START_DASH"),
              (e[(e.SCRIPT_DATA_ESCAPED = 19)] = "SCRIPT_DATA_ESCAPED"),
              (e[(e.SCRIPT_DATA_ESCAPED_DASH = 20)] =
                "SCRIPT_DATA_ESCAPED_DASH"),
              (e[(e.SCRIPT_DATA_ESCAPED_DASH_DASH = 21)] =
                "SCRIPT_DATA_ESCAPED_DASH_DASH"),
              (e[(e.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN = 22)] =
                "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN"),
              (e[(e.SCRIPT_DATA_ESCAPED_END_TAG_OPEN = 23)] =
                "SCRIPT_DATA_ESCAPED_END_TAG_OPEN"),
              (e[(e.SCRIPT_DATA_ESCAPED_END_TAG_NAME = 24)] =
                "SCRIPT_DATA_ESCAPED_END_TAG_NAME"),
              (e[(e.SCRIPT_DATA_DOUBLE_ESCAPE_START = 25)] =
                "SCRIPT_DATA_DOUBLE_ESCAPE_START"),
              (e[(e.SCRIPT_DATA_DOUBLE_ESCAPED = 26)] =
                "SCRIPT_DATA_DOUBLE_ESCAPED"),
              (e[(e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH = 27)] =
                "SCRIPT_DATA_DOUBLE_ESCAPED_DASH"),
              (e[(e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH = 28)] =
                "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH"),
              (e[(e.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN = 29)] =
                "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN"),
              (e[(e.SCRIPT_DATA_DOUBLE_ESCAPE_END = 30)] =
                "SCRIPT_DATA_DOUBLE_ESCAPE_END"),
              (e[(e.BEFORE_ATTRIBUTE_NAME = 31)] = "BEFORE_ATTRIBUTE_NAME"),
              (e[(e.ATTRIBUTE_NAME = 32)] = "ATTRIBUTE_NAME"),
              (e[(e.AFTER_ATTRIBUTE_NAME = 33)] = "AFTER_ATTRIBUTE_NAME"),
              (e[(e.BEFORE_ATTRIBUTE_VALUE = 34)] = "BEFORE_ATTRIBUTE_VALUE"),
              (e[(e.ATTRIBUTE_VALUE_DOUBLE_QUOTED = 35)] =
                "ATTRIBUTE_VALUE_DOUBLE_QUOTED"),
              (e[(e.ATTRIBUTE_VALUE_SINGLE_QUOTED = 36)] =
                "ATTRIBUTE_VALUE_SINGLE_QUOTED"),
              (e[(e.ATTRIBUTE_VALUE_UNQUOTED = 37)] =
                "ATTRIBUTE_VALUE_UNQUOTED"),
              (e[(e.AFTER_ATTRIBUTE_VALUE_QUOTED = 38)] =
                "AFTER_ATTRIBUTE_VALUE_QUOTED"),
              (e[(e.SELF_CLOSING_START_TAG = 39)] = "SELF_CLOSING_START_TAG"),
              (e[(e.BOGUS_COMMENT = 40)] = "BOGUS_COMMENT"),
              (e[(e.MARKUP_DECLARATION_OPEN = 41)] = "MARKUP_DECLARATION_OPEN"),
              (e[(e.COMMENT_START = 42)] = "COMMENT_START"),
              (e[(e.COMMENT_START_DASH = 43)] = "COMMENT_START_DASH"),
              (e[(e.COMMENT = 44)] = "COMMENT"),
              (e[(e.COMMENT_LESS_THAN_SIGN = 45)] = "COMMENT_LESS_THAN_SIGN"),
              (e[(e.COMMENT_LESS_THAN_SIGN_BANG = 46)] =
                "COMMENT_LESS_THAN_SIGN_BANG"),
              (e[(e.COMMENT_LESS_THAN_SIGN_BANG_DASH = 47)] =
                "COMMENT_LESS_THAN_SIGN_BANG_DASH"),
              (e[(e.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH = 48)] =
                "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH"),
              (e[(e.COMMENT_END_DASH = 49)] = "COMMENT_END_DASH"),
              (e[(e.COMMENT_END = 50)] = "COMMENT_END"),
              (e[(e.COMMENT_END_BANG = 51)] = "COMMENT_END_BANG"),
              (e[(e.DOCTYPE = 52)] = "DOCTYPE"),
              (e[(e.BEFORE_DOCTYPE_NAME = 53)] = "BEFORE_DOCTYPE_NAME"),
              (e[(e.DOCTYPE_NAME = 54)] = "DOCTYPE_NAME"),
              (e[(e.AFTER_DOCTYPE_NAME = 55)] = "AFTER_DOCTYPE_NAME"),
              (e[(e.AFTER_DOCTYPE_PUBLIC_KEYWORD = 56)] =
                "AFTER_DOCTYPE_PUBLIC_KEYWORD"),
              (e[(e.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER = 57)] =
                "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER"),
              (e[(e.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED = 58)] =
                "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED"),
              (e[(e.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED = 59)] =
                "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED"),
              (e[(e.AFTER_DOCTYPE_PUBLIC_IDENTIFIER = 60)] =
                "AFTER_DOCTYPE_PUBLIC_IDENTIFIER"),
              (e[(e.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS = 61)] =
                "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS"),
              (e[(e.AFTER_DOCTYPE_SYSTEM_KEYWORD = 62)] =
                "AFTER_DOCTYPE_SYSTEM_KEYWORD"),
              (e[(e.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER = 63)] =
                "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER"),
              (e[(e.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED = 64)] =
                "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED"),
              (e[(e.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED = 65)] =
                "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED"),
              (e[(e.AFTER_DOCTYPE_SYSTEM_IDENTIFIER = 66)] =
                "AFTER_DOCTYPE_SYSTEM_IDENTIFIER"),
              (e[(e.BOGUS_DOCTYPE = 67)] = "BOGUS_DOCTYPE"),
              (e[(e.CDATA_SECTION = 68)] = "CDATA_SECTION"),
              (e[(e.CDATA_SECTION_BRACKET = 69)] = "CDATA_SECTION_BRACKET"),
              (e[(e.CDATA_SECTION_END = 70)] = "CDATA_SECTION_END"),
              (e[(e.CHARACTER_REFERENCE = 71)] = "CHARACTER_REFERENCE"),
              (e[(e.AMBIGUOUS_AMPERSAND = 72)] = "AMBIGUOUS_AMPERSAND");
          })(g || (g = {}));
        let eq = {
          DATA: g.DATA,
          RCDATA: g.RCDATA,
          RAWTEXT: g.RAWTEXT,
          SCRIPT_DATA: g.SCRIPT_DATA,
          PLAINTEXT: g.PLAINTEXT,
          CDATA_SECTION: g.CDATA_SECTION,
        };
        function eU(e) {
          return e >= r.LATIN_CAPITAL_A && e <= r.LATIN_CAPITAL_Z;
        }
        function eH(e) {
          return (e >= r.LATIN_SMALL_A && e <= r.LATIN_SMALL_Z) || eU(e);
        }
        function eQ(e) {
          return eH(e) || (e >= r.DIGIT_0 && e <= r.DIGIT_9);
        }
        function eV(e) {
          return (
            e === r.SPACE ||
            e === r.LINE_FEED ||
            e === r.TABULATION ||
            e === r.FORM_FEED
          );
        }
        function eW(e) {
          return eV(e) || e === r.SOLIDUS || e === r.GREATER_THAN_SIGN;
        }
        class eZ {
          constructor(e, t) {
            (this.options = e),
              (this.handler = t),
              (this.paused = !1),
              (this.inLoop = !1),
              (this.inForeignNode = !1),
              (this.lastStartTagName = ""),
              (this.active = !1),
              (this.state = g.DATA),
              (this.returnState = g.DATA),
              (this.entityStartPos = 0),
              (this.consumedAfterSnapshot = -1),
              (this.currentCharacterToken = null),
              (this.currentToken = null),
              (this.currentAttr = { name: "", value: "" }),
              (this.preprocessor = new eI(t)),
              (this.currentLocation = this.getCurrentLocation(-1)),
              (this.entityDecoder = new eL(
                eP,
                (e, t) => {
                  (this.preprocessor.pos = this.entityStartPos + t - 1),
                    this._flushCodePointConsumedAsCharacterReference(e);
                },
                t.onParseError
                  ? {
                      missingSemicolonAfterCharacterReference: () => {
                        this._err(i.missingSemicolonAfterCharacterReference, 1);
                      },
                      absenceOfDigitsInNumericCharacterReference: (e) => {
                        this._err(
                          i.absenceOfDigitsInNumericCharacterReference,
                          this.entityStartPos - this.preprocessor.pos + e,
                        );
                      },
                      validateNumericCharacterReference: (e) => {
                        let t = (function (e) {
                          if (e === r.NULL) return i.nullCharacterReference;
                          if (e > 1114111)
                            return i.characterReferenceOutsideUnicodeRange;
                          if (eC(e)) return i.surrogateCharacterReference;
                          if (eN(e)) return i.noncharacterCharacterReference;
                          if (eA(e) || e === r.CARRIAGE_RETURN)
                            return i.controlCharacterReference;
                          return null;
                        })(e);
                        t && this._err(t, 1);
                      },
                    }
                  : void 0,
              ));
          }
          _err(e, t = 0) {
            var n, r;
            null == (r = (n = this.handler).onParseError) ||
              r.call(n, this.preprocessor.getError(e, t));
          }
          getCurrentLocation(e) {
            return this.options.sourceCodeLocationInfo
              ? {
                  startLine: this.preprocessor.line,
                  startCol: this.preprocessor.col - e,
                  startOffset: this.preprocessor.offset - e,
                  endLine: -1,
                  endCol: -1,
                  endOffset: -1,
                }
              : null;
          }
          _runParsingLoop() {
            if (!this.inLoop) {
              for (this.inLoop = !0; this.active && !this.paused; ) {
                this.consumedAfterSnapshot = 0;
                let e = this._consume();
                this._ensureHibernation() || this._callState(e);
              }
              this.inLoop = !1;
            }
          }
          pause() {
            this.paused = !0;
          }
          resume(e) {
            if (!this.paused) throw Error("Parser was already resumed");
            (this.paused = !1),
              !this.inLoop &&
                (this._runParsingLoop(), this.paused || null == e || e());
          }
          write(e, t, n) {
            (this.active = !0),
              this.preprocessor.write(e, t),
              this._runParsingLoop(),
              this.paused || null == n || n();
          }
          insertHtmlAtCurrentPos(e) {
            (this.active = !0),
              this.preprocessor.insertHtmlAtCurrentPos(e),
              this._runParsingLoop();
          }
          _ensureHibernation() {
            return (
              !!this.preprocessor.endOfChunkHit &&
              (this.preprocessor.retreat(this.consumedAfterSnapshot),
              (this.consumedAfterSnapshot = 0),
              (this.active = !1),
              !0)
            );
          }
          _consume() {
            return this.consumedAfterSnapshot++, this.preprocessor.advance();
          }
          _advanceBy(e) {
            this.consumedAfterSnapshot += e;
            for (let t = 0; t < e; t++) this.preprocessor.advance();
          }
          _consumeSequenceIfMatch(e, t) {
            return (
              !!this.preprocessor.startsWith(e, t) &&
              (this._advanceBy(e.length - 1), !0)
            );
          }
          _createStartTagToken() {
            this.currentToken = {
              type: s.START_TAG,
              tagName: "",
              tagID: m.UNKNOWN,
              selfClosing: !1,
              ackSelfClosing: !1,
              attrs: [],
              location: this.getCurrentLocation(1),
            };
          }
          _createEndTagToken() {
            this.currentToken = {
              type: s.END_TAG,
              tagName: "",
              tagID: m.UNKNOWN,
              selfClosing: !1,
              ackSelfClosing: !1,
              attrs: [],
              location: this.getCurrentLocation(2),
            };
          }
          _createCommentToken(e) {
            this.currentToken = {
              type: s.COMMENT,
              data: "",
              location: this.getCurrentLocation(e),
            };
          }
          _createDoctypeToken(e) {
            this.currentToken = {
              type: s.DOCTYPE,
              name: e,
              forceQuirks: !1,
              publicId: null,
              systemId: null,
              location: this.currentLocation,
            };
          }
          _createCharacterToken(e, t) {
            this.currentCharacterToken = {
              type: e,
              chars: t,
              location: this.currentLocation,
            };
          }
          _createAttr(e) {
            (this.currentAttr = { name: e, value: "" }),
              (this.currentLocation = this.getCurrentLocation(0));
          }
          _leaveAttrName() {
            var e, t;
            let n = this.currentToken;
            null === eD(n, this.currentAttr.name)
              ? (n.attrs.push(this.currentAttr),
                n.location &&
                  this.currentLocation &&
                  (((null != (e = (t = n.location).attrs)
                    ? e
                    : (t.attrs = Object.create(null)))[this.currentAttr.name] =
                    this.currentLocation),
                  this._leaveAttrValue()))
              : this._err(i.duplicateAttribute);
          }
          _leaveAttrValue() {
            this.currentLocation &&
              ((this.currentLocation.endLine = this.preprocessor.line),
              (this.currentLocation.endCol = this.preprocessor.col),
              (this.currentLocation.endOffset = this.preprocessor.offset));
          }
          prepareToken(e) {
            this._emitCurrentCharacterToken(e.location),
              (this.currentToken = null),
              e.location &&
                ((e.location.endLine = this.preprocessor.line),
                (e.location.endCol = this.preprocessor.col + 1),
                (e.location.endOffset = this.preprocessor.offset + 1)),
              (this.currentLocation = this.getCurrentLocation(-1));
          }
          emitCurrentTagToken() {
            let e = this.currentToken;
            this.prepareToken(e),
              (e.tagID = eF(e.tagName)),
              e.type === s.START_TAG
                ? ((this.lastStartTagName = e.tagName),
                  this.handler.onStartTag(e))
                : (e.attrs.length > 0 && this._err(i.endTagWithAttributes),
                  e.selfClosing && this._err(i.endTagWithTrailingSolidus),
                  this.handler.onEndTag(e)),
              this.preprocessor.dropParsedChunk();
          }
          emitCurrentComment(e) {
            this.prepareToken(e),
              this.handler.onComment(e),
              this.preprocessor.dropParsedChunk();
          }
          emitCurrentDoctype(e) {
            this.prepareToken(e),
              this.handler.onDoctype(e),
              this.preprocessor.dropParsedChunk();
          }
          _emitCurrentCharacterToken(e) {
            if (this.currentCharacterToken) {
              switch (
                (e &&
                  this.currentCharacterToken.location &&
                  ((this.currentCharacterToken.location.endLine = e.startLine),
                  (this.currentCharacterToken.location.endCol = e.startCol),
                  (this.currentCharacterToken.location.endOffset =
                    e.startOffset)),
                this.currentCharacterToken.type)
              ) {
                case s.CHARACTER:
                  this.handler.onCharacter(this.currentCharacterToken);
                  break;
                case s.NULL_CHARACTER:
                  this.handler.onNullCharacter(this.currentCharacterToken);
                  break;
                case s.WHITESPACE_CHARACTER:
                  this.handler.onWhitespaceCharacter(
                    this.currentCharacterToken,
                  );
              }
              this.currentCharacterToken = null;
            }
          }
          _emitEOFToken() {
            let e = this.getCurrentLocation(0);
            e &&
              ((e.endLine = e.startLine),
              (e.endCol = e.startCol),
              (e.endOffset = e.startOffset)),
              this._emitCurrentCharacterToken(e),
              this.handler.onEof({ type: s.EOF, location: e }),
              (this.active = !1);
          }
          _appendCharToCurrentCharacterToken(e, t) {
            if (this.currentCharacterToken)
              if (this.currentCharacterToken.type === e) {
                this.currentCharacterToken.chars += t;
                return;
              } else
                (this.currentLocation = this.getCurrentLocation(0)),
                  this._emitCurrentCharacterToken(this.currentLocation),
                  this.preprocessor.dropParsedChunk();
            this._createCharacterToken(e, t);
          }
          _emitCodePoint(e) {
            let t = eV(e)
              ? s.WHITESPACE_CHARACTER
              : e === r.NULL
                ? s.NULL_CHARACTER
                : s.CHARACTER;
            this._appendCharToCurrentCharacterToken(t, String.fromCodePoint(e));
          }
          _emitChars(e) {
            this._appendCharToCurrentCharacterToken(s.CHARACTER, e);
          }
          _startCharacterReference() {
            (this.returnState = this.state),
              (this.state = g.CHARACTER_REFERENCE),
              (this.entityStartPos = this.preprocessor.pos),
              this.entityDecoder.startEntity(
                this._isCharacterReferenceInAttribute()
                  ? u.Attribute
                  : u.Legacy,
              );
          }
          _isCharacterReferenceInAttribute() {
            return (
              this.returnState === g.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||
              this.returnState === g.ATTRIBUTE_VALUE_SINGLE_QUOTED ||
              this.returnState === g.ATTRIBUTE_VALUE_UNQUOTED
            );
          }
          _flushCodePointConsumedAsCharacterReference(e) {
            this._isCharacterReferenceInAttribute()
              ? (this.currentAttr.value += String.fromCodePoint(e))
              : this._emitCodePoint(e);
          }
          _callState(e) {
            switch (this.state) {
              case g.DATA:
                this._stateData(e);
                break;
              case g.RCDATA:
                this._stateRcdata(e);
                break;
              case g.RAWTEXT:
                this._stateRawtext(e);
                break;
              case g.SCRIPT_DATA:
                this._stateScriptData(e);
                break;
              case g.PLAINTEXT:
                this._statePlaintext(e);
                break;
              case g.TAG_OPEN:
                this._stateTagOpen(e);
                break;
              case g.END_TAG_OPEN:
                this._stateEndTagOpen(e);
                break;
              case g.TAG_NAME:
                this._stateTagName(e);
                break;
              case g.RCDATA_LESS_THAN_SIGN:
                this._stateRcdataLessThanSign(e);
                break;
              case g.RCDATA_END_TAG_OPEN:
                this._stateRcdataEndTagOpen(e);
                break;
              case g.RCDATA_END_TAG_NAME:
                this._stateRcdataEndTagName(e);
                break;
              case g.RAWTEXT_LESS_THAN_SIGN:
                this._stateRawtextLessThanSign(e);
                break;
              case g.RAWTEXT_END_TAG_OPEN:
                this._stateRawtextEndTagOpen(e);
                break;
              case g.RAWTEXT_END_TAG_NAME:
                this._stateRawtextEndTagName(e);
                break;
              case g.SCRIPT_DATA_LESS_THAN_SIGN:
                this._stateScriptDataLessThanSign(e);
                break;
              case g.SCRIPT_DATA_END_TAG_OPEN:
                this._stateScriptDataEndTagOpen(e);
                break;
              case g.SCRIPT_DATA_END_TAG_NAME:
                this._stateScriptDataEndTagName(e);
                break;
              case g.SCRIPT_DATA_ESCAPE_START:
                this._stateScriptDataEscapeStart(e);
                break;
              case g.SCRIPT_DATA_ESCAPE_START_DASH:
                this._stateScriptDataEscapeStartDash(e);
                break;
              case g.SCRIPT_DATA_ESCAPED:
                this._stateScriptDataEscaped(e);
                break;
              case g.SCRIPT_DATA_ESCAPED_DASH:
                this._stateScriptDataEscapedDash(e);
                break;
              case g.SCRIPT_DATA_ESCAPED_DASH_DASH:
                this._stateScriptDataEscapedDashDash(e);
                break;
              case g.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:
                this._stateScriptDataEscapedLessThanSign(e);
                break;
              case g.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:
                this._stateScriptDataEscapedEndTagOpen(e);
                break;
              case g.SCRIPT_DATA_ESCAPED_END_TAG_NAME:
                this._stateScriptDataEscapedEndTagName(e);
                break;
              case g.SCRIPT_DATA_DOUBLE_ESCAPE_START:
                this._stateScriptDataDoubleEscapeStart(e);
                break;
              case g.SCRIPT_DATA_DOUBLE_ESCAPED:
                this._stateScriptDataDoubleEscaped(e);
                break;
              case g.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:
                this._stateScriptDataDoubleEscapedDash(e);
                break;
              case g.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:
                this._stateScriptDataDoubleEscapedDashDash(e);
                break;
              case g.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:
                this._stateScriptDataDoubleEscapedLessThanSign(e);
                break;
              case g.SCRIPT_DATA_DOUBLE_ESCAPE_END:
                this._stateScriptDataDoubleEscapeEnd(e);
                break;
              case g.BEFORE_ATTRIBUTE_NAME:
                this._stateBeforeAttributeName(e);
                break;
              case g.ATTRIBUTE_NAME:
                this._stateAttributeName(e);
                break;
              case g.AFTER_ATTRIBUTE_NAME:
                this._stateAfterAttributeName(e);
                break;
              case g.BEFORE_ATTRIBUTE_VALUE:
                this._stateBeforeAttributeValue(e);
                break;
              case g.ATTRIBUTE_VALUE_DOUBLE_QUOTED:
                this._stateAttributeValueDoubleQuoted(e);
                break;
              case g.ATTRIBUTE_VALUE_SINGLE_QUOTED:
                this._stateAttributeValueSingleQuoted(e);
                break;
              case g.ATTRIBUTE_VALUE_UNQUOTED:
                this._stateAttributeValueUnquoted(e);
                break;
              case g.AFTER_ATTRIBUTE_VALUE_QUOTED:
                this._stateAfterAttributeValueQuoted(e);
                break;
              case g.SELF_CLOSING_START_TAG:
                this._stateSelfClosingStartTag(e);
                break;
              case g.BOGUS_COMMENT:
                this._stateBogusComment(e);
                break;
              case g.MARKUP_DECLARATION_OPEN:
                this._stateMarkupDeclarationOpen(e);
                break;
              case g.COMMENT_START:
                this._stateCommentStart(e);
                break;
              case g.COMMENT_START_DASH:
                this._stateCommentStartDash(e);
                break;
              case g.COMMENT:
                this._stateComment(e);
                break;
              case g.COMMENT_LESS_THAN_SIGN:
                this._stateCommentLessThanSign(e);
                break;
              case g.COMMENT_LESS_THAN_SIGN_BANG:
                this._stateCommentLessThanSignBang(e);
                break;
              case g.COMMENT_LESS_THAN_SIGN_BANG_DASH:
                this._stateCommentLessThanSignBangDash(e);
                break;
              case g.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:
                this._stateCommentLessThanSignBangDashDash(e);
                break;
              case g.COMMENT_END_DASH:
                this._stateCommentEndDash(e);
                break;
              case g.COMMENT_END:
                this._stateCommentEnd(e);
                break;
              case g.COMMENT_END_BANG:
                this._stateCommentEndBang(e);
                break;
              case g.DOCTYPE:
                this._stateDoctype(e);
                break;
              case g.BEFORE_DOCTYPE_NAME:
                this._stateBeforeDoctypeName(e);
                break;
              case g.DOCTYPE_NAME:
                this._stateDoctypeName(e);
                break;
              case g.AFTER_DOCTYPE_NAME:
                this._stateAfterDoctypeName(e);
                break;
              case g.AFTER_DOCTYPE_PUBLIC_KEYWORD:
                this._stateAfterDoctypePublicKeyword(e);
                break;
              case g.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:
                this._stateBeforeDoctypePublicIdentifier(e);
                break;
              case g.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:
                this._stateDoctypePublicIdentifierDoubleQuoted(e);
                break;
              case g.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:
                this._stateDoctypePublicIdentifierSingleQuoted(e);
                break;
              case g.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:
                this._stateAfterDoctypePublicIdentifier(e);
                break;
              case g.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:
                this._stateBetweenDoctypePublicAndSystemIdentifiers(e);
                break;
              case g.AFTER_DOCTYPE_SYSTEM_KEYWORD:
                this._stateAfterDoctypeSystemKeyword(e);
                break;
              case g.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:
                this._stateBeforeDoctypeSystemIdentifier(e);
                break;
              case g.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:
                this._stateDoctypeSystemIdentifierDoubleQuoted(e);
                break;
              case g.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:
                this._stateDoctypeSystemIdentifierSingleQuoted(e);
                break;
              case g.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:
                this._stateAfterDoctypeSystemIdentifier(e);
                break;
              case g.BOGUS_DOCTYPE:
                this._stateBogusDoctype(e);
                break;
              case g.CDATA_SECTION:
                this._stateCdataSection(e);
                break;
              case g.CDATA_SECTION_BRACKET:
                this._stateCdataSectionBracket(e);
                break;
              case g.CDATA_SECTION_END:
                this._stateCdataSectionEnd(e);
                break;
              case g.CHARACTER_REFERENCE:
                this._stateCharacterReference();
                break;
              case g.AMBIGUOUS_AMPERSAND:
                this._stateAmbiguousAmpersand(e);
                break;
              default:
                throw Error("Unknown state");
            }
          }
          _stateData(e) {
            switch (e) {
              case r.LESS_THAN_SIGN:
                this.state = g.TAG_OPEN;
                break;
              case r.AMPERSAND:
                this._startCharacterReference();
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), this._emitCodePoint(e);
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(e);
            }
          }
          _stateRcdata(e) {
            switch (e) {
              case r.AMPERSAND:
                this._startCharacterReference();
                break;
              case r.LESS_THAN_SIGN:
                this.state = g.RCDATA_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), this._emitChars("�");
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(e);
            }
          }
          _stateRawtext(e) {
            switch (e) {
              case r.LESS_THAN_SIGN:
                this.state = g.RAWTEXT_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), this._emitChars("�");
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(e);
            }
          }
          _stateScriptData(e) {
            switch (e) {
              case r.LESS_THAN_SIGN:
                this.state = g.SCRIPT_DATA_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), this._emitChars("�");
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(e);
            }
          }
          _statePlaintext(e) {
            switch (e) {
              case r.NULL:
                this._err(i.unexpectedNullCharacter), this._emitChars("�");
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(e);
            }
          }
          _stateTagOpen(e) {
            if (eH(e))
              this._createStartTagToken(),
                (this.state = g.TAG_NAME),
                this._stateTagName(e);
            else
              switch (e) {
                case r.EXCLAMATION_MARK:
                  this.state = g.MARKUP_DECLARATION_OPEN;
                  break;
                case r.SOLIDUS:
                  this.state = g.END_TAG_OPEN;
                  break;
                case r.QUESTION_MARK:
                  this._err(i.unexpectedQuestionMarkInsteadOfTagName),
                    this._createCommentToken(1),
                    (this.state = g.BOGUS_COMMENT),
                    this._stateBogusComment(e);
                  break;
                case r.EOF:
                  this._err(i.eofBeforeTagName),
                    this._emitChars("<"),
                    this._emitEOFToken();
                  break;
                default:
                  this._err(i.invalidFirstCharacterOfTagName),
                    this._emitChars("<"),
                    (this.state = g.DATA),
                    this._stateData(e);
              }
          }
          _stateEndTagOpen(e) {
            if (eH(e))
              this._createEndTagToken(),
                (this.state = g.TAG_NAME),
                this._stateTagName(e);
            else
              switch (e) {
                case r.GREATER_THAN_SIGN:
                  this._err(i.missingEndTagName), (this.state = g.DATA);
                  break;
                case r.EOF:
                  this._err(i.eofBeforeTagName),
                    this._emitChars("</"),
                    this._emitEOFToken();
                  break;
                default:
                  this._err(i.invalidFirstCharacterOfTagName),
                    this._createCommentToken(2),
                    (this.state = g.BOGUS_COMMENT),
                    this._stateBogusComment(e);
              }
          }
          _stateTagName(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = g.BEFORE_ATTRIBUTE_NAME;
                break;
              case r.SOLIDUS:
                this.state = g.SELF_CLOSING_START_TAG;
                break;
              case r.GREATER_THAN_SIGN:
                (this.state = g.DATA), this.emitCurrentTagToken();
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), (t.tagName += "�");
                break;
              case r.EOF:
                this._err(i.eofInTag), this._emitEOFToken();
                break;
              default:
                t.tagName += String.fromCodePoint(eU(e) ? e + 32 : e);
            }
          }
          _stateRcdataLessThanSign(e) {
            e === r.SOLIDUS
              ? (this.state = g.RCDATA_END_TAG_OPEN)
              : (this._emitChars("<"),
                (this.state = g.RCDATA),
                this._stateRcdata(e));
          }
          _stateRcdataEndTagOpen(e) {
            eH(e)
              ? ((this.state = g.RCDATA_END_TAG_NAME),
                this._stateRcdataEndTagName(e))
              : (this._emitChars("</"),
                (this.state = g.RCDATA),
                this._stateRcdata(e));
          }
          handleSpecialEndTag(e) {
            if (!this.preprocessor.startsWith(this.lastStartTagName, !1))
              return !this._ensureHibernation();
            switch (
              (this._createEndTagToken(),
              (this.currentToken.tagName = this.lastStartTagName),
              this.preprocessor.peek(this.lastStartTagName.length))
            ) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                return (
                  this._advanceBy(this.lastStartTagName.length),
                  (this.state = g.BEFORE_ATTRIBUTE_NAME),
                  !1
                );
              case r.SOLIDUS:
                return (
                  this._advanceBy(this.lastStartTagName.length),
                  (this.state = g.SELF_CLOSING_START_TAG),
                  !1
                );
              case r.GREATER_THAN_SIGN:
                return (
                  this._advanceBy(this.lastStartTagName.length),
                  this.emitCurrentTagToken(),
                  (this.state = g.DATA),
                  !1
                );
              default:
                return !this._ensureHibernation();
            }
          }
          _stateRcdataEndTagName(e) {
            this.handleSpecialEndTag(e) &&
              (this._emitChars("</"),
              (this.state = g.RCDATA),
              this._stateRcdata(e));
          }
          _stateRawtextLessThanSign(e) {
            e === r.SOLIDUS
              ? (this.state = g.RAWTEXT_END_TAG_OPEN)
              : (this._emitChars("<"),
                (this.state = g.RAWTEXT),
                this._stateRawtext(e));
          }
          _stateRawtextEndTagOpen(e) {
            eH(e)
              ? ((this.state = g.RAWTEXT_END_TAG_NAME),
                this._stateRawtextEndTagName(e))
              : (this._emitChars("</"),
                (this.state = g.RAWTEXT),
                this._stateRawtext(e));
          }
          _stateRawtextEndTagName(e) {
            this.handleSpecialEndTag(e) &&
              (this._emitChars("</"),
              (this.state = g.RAWTEXT),
              this._stateRawtext(e));
          }
          _stateScriptDataLessThanSign(e) {
            switch (e) {
              case r.SOLIDUS:
                this.state = g.SCRIPT_DATA_END_TAG_OPEN;
                break;
              case r.EXCLAMATION_MARK:
                (this.state = g.SCRIPT_DATA_ESCAPE_START),
                  this._emitChars("<!");
                break;
              default:
                this._emitChars("<"),
                  (this.state = g.SCRIPT_DATA),
                  this._stateScriptData(e);
            }
          }
          _stateScriptDataEndTagOpen(e) {
            eH(e)
              ? ((this.state = g.SCRIPT_DATA_END_TAG_NAME),
                this._stateScriptDataEndTagName(e))
              : (this._emitChars("</"),
                (this.state = g.SCRIPT_DATA),
                this._stateScriptData(e));
          }
          _stateScriptDataEndTagName(e) {
            this.handleSpecialEndTag(e) &&
              (this._emitChars("</"),
              (this.state = g.SCRIPT_DATA),
              this._stateScriptData(e));
          }
          _stateScriptDataEscapeStart(e) {
            e === r.HYPHEN_MINUS
              ? ((this.state = g.SCRIPT_DATA_ESCAPE_START_DASH),
                this._emitChars("-"))
              : ((this.state = g.SCRIPT_DATA), this._stateScriptData(e));
          }
          _stateScriptDataEscapeStartDash(e) {
            e === r.HYPHEN_MINUS
              ? ((this.state = g.SCRIPT_DATA_ESCAPED_DASH_DASH),
                this._emitChars("-"))
              : ((this.state = g.SCRIPT_DATA), this._stateScriptData(e));
          }
          _stateScriptDataEscaped(e) {
            switch (e) {
              case r.HYPHEN_MINUS:
                (this.state = g.SCRIPT_DATA_ESCAPED_DASH), this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = g.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), this._emitChars("�");
                break;
              case r.EOF:
                this._err(i.eofInScriptHtmlCommentLikeText),
                  this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(e);
            }
          }
          _stateScriptDataEscapedDash(e) {
            switch (e) {
              case r.HYPHEN_MINUS:
                (this.state = g.SCRIPT_DATA_ESCAPED_DASH_DASH),
                  this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = g.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter),
                  (this.state = g.SCRIPT_DATA_ESCAPED),
                  this._emitChars("�");
                break;
              case r.EOF:
                this._err(i.eofInScriptHtmlCommentLikeText),
                  this._emitEOFToken();
                break;
              default:
                (this.state = g.SCRIPT_DATA_ESCAPED), this._emitCodePoint(e);
            }
          }
          _stateScriptDataEscapedDashDash(e) {
            switch (e) {
              case r.HYPHEN_MINUS:
                this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = g.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
              case r.GREATER_THAN_SIGN:
                (this.state = g.SCRIPT_DATA), this._emitChars(">");
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter),
                  (this.state = g.SCRIPT_DATA_ESCAPED),
                  this._emitChars("�");
                break;
              case r.EOF:
                this._err(i.eofInScriptHtmlCommentLikeText),
                  this._emitEOFToken();
                break;
              default:
                (this.state = g.SCRIPT_DATA_ESCAPED), this._emitCodePoint(e);
            }
          }
          _stateScriptDataEscapedLessThanSign(e) {
            e === r.SOLIDUS
              ? (this.state = g.SCRIPT_DATA_ESCAPED_END_TAG_OPEN)
              : eH(e)
                ? (this._emitChars("<"),
                  (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPE_START),
                  this._stateScriptDataDoubleEscapeStart(e))
                : (this._emitChars("<"),
                  (this.state = g.SCRIPT_DATA_ESCAPED),
                  this._stateScriptDataEscaped(e));
          }
          _stateScriptDataEscapedEndTagOpen(e) {
            eH(e)
              ? ((this.state = g.SCRIPT_DATA_ESCAPED_END_TAG_NAME),
                this._stateScriptDataEscapedEndTagName(e))
              : (this._emitChars("</"),
                (this.state = g.SCRIPT_DATA_ESCAPED),
                this._stateScriptDataEscaped(e));
          }
          _stateScriptDataEscapedEndTagName(e) {
            this.handleSpecialEndTag(e) &&
              (this._emitChars("</"),
              (this.state = g.SCRIPT_DATA_ESCAPED),
              this._stateScriptDataEscaped(e));
          }
          _stateScriptDataDoubleEscapeStart(e) {
            if (
              this.preprocessor.startsWith(eE.SCRIPT, !1) &&
              eW(this.preprocessor.peek(eE.SCRIPT.length))
            ) {
              this._emitCodePoint(e);
              for (let e = 0; e < eE.SCRIPT.length; e++)
                this._emitCodePoint(this._consume());
              this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED;
            } else
              this._ensureHibernation() ||
                ((this.state = g.SCRIPT_DATA_ESCAPED),
                this._stateScriptDataEscaped(e));
          }
          _stateScriptDataDoubleEscaped(e) {
            switch (e) {
              case r.HYPHEN_MINUS:
                (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED_DASH),
                  this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN),
                  this._emitChars("<");
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), this._emitChars("�");
                break;
              case r.EOF:
                this._err(i.eofInScriptHtmlCommentLikeText),
                  this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(e);
            }
          }
          _stateScriptDataDoubleEscapedDash(e) {
            switch (e) {
              case r.HYPHEN_MINUS:
                (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH),
                  this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN),
                  this._emitChars("<");
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter),
                  (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED),
                  this._emitChars("�");
                break;
              case r.EOF:
                this._err(i.eofInScriptHtmlCommentLikeText),
                  this._emitEOFToken();
                break;
              default:
                (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED),
                  this._emitCodePoint(e);
            }
          }
          _stateScriptDataDoubleEscapedDashDash(e) {
            switch (e) {
              case r.HYPHEN_MINUS:
                this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN),
                  this._emitChars("<");
                break;
              case r.GREATER_THAN_SIGN:
                (this.state = g.SCRIPT_DATA), this._emitChars(">");
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter),
                  (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED),
                  this._emitChars("�");
                break;
              case r.EOF:
                this._err(i.eofInScriptHtmlCommentLikeText),
                  this._emitEOFToken();
                break;
              default:
                (this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED),
                  this._emitCodePoint(e);
            }
          }
          _stateScriptDataDoubleEscapedLessThanSign(e) {
            e === r.SOLIDUS
              ? ((this.state = g.SCRIPT_DATA_DOUBLE_ESCAPE_END),
                this._emitChars("/"))
              : ((this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED),
                this._stateScriptDataDoubleEscaped(e));
          }
          _stateScriptDataDoubleEscapeEnd(e) {
            if (
              this.preprocessor.startsWith(eE.SCRIPT, !1) &&
              eW(this.preprocessor.peek(eE.SCRIPT.length))
            ) {
              this._emitCodePoint(e);
              for (let e = 0; e < eE.SCRIPT.length; e++)
                this._emitCodePoint(this._consume());
              this.state = g.SCRIPT_DATA_ESCAPED;
            } else
              this._ensureHibernation() ||
                ((this.state = g.SCRIPT_DATA_DOUBLE_ESCAPED),
                this._stateScriptDataDoubleEscaped(e));
          }
          _stateBeforeAttributeName(e) {
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.SOLIDUS:
              case r.GREATER_THAN_SIGN:
              case r.EOF:
                (this.state = g.AFTER_ATTRIBUTE_NAME),
                  this._stateAfterAttributeName(e);
                break;
              case r.EQUALS_SIGN:
                this._err(i.unexpectedEqualsSignBeforeAttributeName),
                  this._createAttr("="),
                  (this.state = g.ATTRIBUTE_NAME);
                break;
              default:
                this._createAttr(""),
                  (this.state = g.ATTRIBUTE_NAME),
                  this._stateAttributeName(e);
            }
          }
          _stateAttributeName(e) {
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
              case r.SOLIDUS:
              case r.GREATER_THAN_SIGN:
              case r.EOF:
                this._leaveAttrName(),
                  (this.state = g.AFTER_ATTRIBUTE_NAME),
                  this._stateAfterAttributeName(e);
                break;
              case r.EQUALS_SIGN:
                this._leaveAttrName(), (this.state = g.BEFORE_ATTRIBUTE_VALUE);
                break;
              case r.QUOTATION_MARK:
              case r.APOSTROPHE:
              case r.LESS_THAN_SIGN:
                this._err(i.unexpectedCharacterInAttributeName),
                  (this.currentAttr.name += String.fromCodePoint(e));
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter),
                  (this.currentAttr.name += "�");
                break;
              default:
                this.currentAttr.name += String.fromCodePoint(
                  eU(e) ? e + 32 : e,
                );
            }
          }
          _stateAfterAttributeName(e) {
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.SOLIDUS:
                this.state = g.SELF_CLOSING_START_TAG;
                break;
              case r.EQUALS_SIGN:
                this.state = g.BEFORE_ATTRIBUTE_VALUE;
                break;
              case r.GREATER_THAN_SIGN:
                (this.state = g.DATA), this.emitCurrentTagToken();
                break;
              case r.EOF:
                this._err(i.eofInTag), this._emitEOFToken();
                break;
              default:
                this._createAttr(""),
                  (this.state = g.ATTRIBUTE_NAME),
                  this._stateAttributeName(e);
            }
          }
          _stateBeforeAttributeValue(e) {
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.QUOTATION_MARK:
                this.state = g.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
                break;
              case r.APOSTROPHE:
                this.state = g.ATTRIBUTE_VALUE_SINGLE_QUOTED;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.missingAttributeValue),
                  (this.state = g.DATA),
                  this.emitCurrentTagToken();
                break;
              default:
                (this.state = g.ATTRIBUTE_VALUE_UNQUOTED),
                  this._stateAttributeValueUnquoted(e);
            }
          }
          _stateAttributeValueDoubleQuoted(e) {
            switch (e) {
              case r.QUOTATION_MARK:
                this.state = g.AFTER_ATTRIBUTE_VALUE_QUOTED;
                break;
              case r.AMPERSAND:
                this._startCharacterReference();
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter),
                  (this.currentAttr.value += "�");
                break;
              case r.EOF:
                this._err(i.eofInTag), this._emitEOFToken();
                break;
              default:
                this.currentAttr.value += String.fromCodePoint(e);
            }
          }
          _stateAttributeValueSingleQuoted(e) {
            switch (e) {
              case r.APOSTROPHE:
                this.state = g.AFTER_ATTRIBUTE_VALUE_QUOTED;
                break;
              case r.AMPERSAND:
                this._startCharacterReference();
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter),
                  (this.currentAttr.value += "�");
                break;
              case r.EOF:
                this._err(i.eofInTag), this._emitEOFToken();
                break;
              default:
                this.currentAttr.value += String.fromCodePoint(e);
            }
          }
          _stateAttributeValueUnquoted(e) {
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this._leaveAttrValue(), (this.state = g.BEFORE_ATTRIBUTE_NAME);
                break;
              case r.AMPERSAND:
                this._startCharacterReference();
                break;
              case r.GREATER_THAN_SIGN:
                this._leaveAttrValue(),
                  (this.state = g.DATA),
                  this.emitCurrentTagToken();
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter),
                  (this.currentAttr.value += "�");
                break;
              case r.QUOTATION_MARK:
              case r.APOSTROPHE:
              case r.LESS_THAN_SIGN:
              case r.EQUALS_SIGN:
              case r.GRAVE_ACCENT:
                this._err(i.unexpectedCharacterInUnquotedAttributeValue),
                  (this.currentAttr.value += String.fromCodePoint(e));
                break;
              case r.EOF:
                this._err(i.eofInTag), this._emitEOFToken();
                break;
              default:
                this.currentAttr.value += String.fromCodePoint(e);
            }
          }
          _stateAfterAttributeValueQuoted(e) {
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this._leaveAttrValue(), (this.state = g.BEFORE_ATTRIBUTE_NAME);
                break;
              case r.SOLIDUS:
                this._leaveAttrValue(), (this.state = g.SELF_CLOSING_START_TAG);
                break;
              case r.GREATER_THAN_SIGN:
                this._leaveAttrValue(),
                  (this.state = g.DATA),
                  this.emitCurrentTagToken();
                break;
              case r.EOF:
                this._err(i.eofInTag), this._emitEOFToken();
                break;
              default:
                this._err(i.missingWhitespaceBetweenAttributes),
                  (this.state = g.BEFORE_ATTRIBUTE_NAME),
                  this._stateBeforeAttributeName(e);
            }
          }
          _stateSelfClosingStartTag(e) {
            switch (e) {
              case r.GREATER_THAN_SIGN:
                (this.currentToken.selfClosing = !0),
                  (this.state = g.DATA),
                  this.emitCurrentTagToken();
                break;
              case r.EOF:
                this._err(i.eofInTag), this._emitEOFToken();
                break;
              default:
                this._err(i.unexpectedSolidusInTag),
                  (this.state = g.BEFORE_ATTRIBUTE_NAME),
                  this._stateBeforeAttributeName(e);
            }
          }
          _stateBogusComment(e) {
            let t = this.currentToken;
            switch (e) {
              case r.GREATER_THAN_SIGN:
                (this.state = g.DATA), this.emitCurrentComment(t);
                break;
              case r.EOF:
                this.emitCurrentComment(t), this._emitEOFToken();
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), (t.data += "�");
                break;
              default:
                t.data += String.fromCodePoint(e);
            }
          }
          _stateMarkupDeclarationOpen(e) {
            this._consumeSequenceIfMatch(eE.DASH_DASH, !0)
              ? (this._createCommentToken(eE.DASH_DASH.length + 1),
                (this.state = g.COMMENT_START))
              : this._consumeSequenceIfMatch(eE.DOCTYPE, !1)
                ? ((this.currentLocation = this.getCurrentLocation(
                    eE.DOCTYPE.length + 1,
                  )),
                  (this.state = g.DOCTYPE))
                : this._consumeSequenceIfMatch(eE.CDATA_START, !0)
                  ? this.inForeignNode
                    ? (this.state = g.CDATA_SECTION)
                    : (this._err(i.cdataInHtmlContent),
                      this._createCommentToken(eE.CDATA_START.length + 1),
                      (this.currentToken.data = "[CDATA["),
                      (this.state = g.BOGUS_COMMENT))
                  : this._ensureHibernation() ||
                    (this._err(i.incorrectlyOpenedComment),
                    this._createCommentToken(2),
                    (this.state = g.BOGUS_COMMENT),
                    this._stateBogusComment(e));
          }
          _stateCommentStart(e) {
            switch (e) {
              case r.HYPHEN_MINUS:
                this.state = g.COMMENT_START_DASH;
                break;
              case r.GREATER_THAN_SIGN: {
                this._err(i.abruptClosingOfEmptyComment), (this.state = g.DATA);
                let e = this.currentToken;
                this.emitCurrentComment(e);
                break;
              }
              default:
                (this.state = g.COMMENT), this._stateComment(e);
            }
          }
          _stateCommentStartDash(e) {
            let t = this.currentToken;
            switch (e) {
              case r.HYPHEN_MINUS:
                this.state = g.COMMENT_END;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.abruptClosingOfEmptyComment),
                  (this.state = g.DATA),
                  this.emitCurrentComment(t);
                break;
              case r.EOF:
                this._err(i.eofInComment),
                  this.emitCurrentComment(t),
                  this._emitEOFToken();
                break;
              default:
                (t.data += "-"),
                  (this.state = g.COMMENT),
                  this._stateComment(e);
            }
          }
          _stateComment(e) {
            let t = this.currentToken;
            switch (e) {
              case r.HYPHEN_MINUS:
                this.state = g.COMMENT_END_DASH;
                break;
              case r.LESS_THAN_SIGN:
                (t.data += "<"), (this.state = g.COMMENT_LESS_THAN_SIGN);
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), (t.data += "�");
                break;
              case r.EOF:
                this._err(i.eofInComment),
                  this.emitCurrentComment(t),
                  this._emitEOFToken();
                break;
              default:
                t.data += String.fromCodePoint(e);
            }
          }
          _stateCommentLessThanSign(e) {
            let t = this.currentToken;
            switch (e) {
              case r.EXCLAMATION_MARK:
                (t.data += "!"), (this.state = g.COMMENT_LESS_THAN_SIGN_BANG);
                break;
              case r.LESS_THAN_SIGN:
                t.data += "<";
                break;
              default:
                (this.state = g.COMMENT), this._stateComment(e);
            }
          }
          _stateCommentLessThanSignBang(e) {
            e === r.HYPHEN_MINUS
              ? (this.state = g.COMMENT_LESS_THAN_SIGN_BANG_DASH)
              : ((this.state = g.COMMENT), this._stateComment(e));
          }
          _stateCommentLessThanSignBangDash(e) {
            e === r.HYPHEN_MINUS
              ? (this.state = g.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH)
              : ((this.state = g.COMMENT_END_DASH),
                this._stateCommentEndDash(e));
          }
          _stateCommentLessThanSignBangDashDash(e) {
            e !== r.GREATER_THAN_SIGN &&
              e !== r.EOF &&
              this._err(i.nestedComment),
              (this.state = g.COMMENT_END),
              this._stateCommentEnd(e);
          }
          _stateCommentEndDash(e) {
            let t = this.currentToken;
            switch (e) {
              case r.HYPHEN_MINUS:
                this.state = g.COMMENT_END;
                break;
              case r.EOF:
                this._err(i.eofInComment),
                  this.emitCurrentComment(t),
                  this._emitEOFToken();
                break;
              default:
                (t.data += "-"),
                  (this.state = g.COMMENT),
                  this._stateComment(e);
            }
          }
          _stateCommentEnd(e) {
            let t = this.currentToken;
            switch (e) {
              case r.GREATER_THAN_SIGN:
                (this.state = g.DATA), this.emitCurrentComment(t);
                break;
              case r.EXCLAMATION_MARK:
                this.state = g.COMMENT_END_BANG;
                break;
              case r.HYPHEN_MINUS:
                t.data += "-";
                break;
              case r.EOF:
                this._err(i.eofInComment),
                  this.emitCurrentComment(t),
                  this._emitEOFToken();
                break;
              default:
                (t.data += "--"),
                  (this.state = g.COMMENT),
                  this._stateComment(e);
            }
          }
          _stateCommentEndBang(e) {
            let t = this.currentToken;
            switch (e) {
              case r.HYPHEN_MINUS:
                (t.data += "--!"), (this.state = g.COMMENT_END_DASH);
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.incorrectlyClosedComment),
                  (this.state = g.DATA),
                  this.emitCurrentComment(t);
                break;
              case r.EOF:
                this._err(i.eofInComment),
                  this.emitCurrentComment(t),
                  this._emitEOFToken();
                break;
              default:
                (t.data += "--!"),
                  (this.state = g.COMMENT),
                  this._stateComment(e);
            }
          }
          _stateDoctype(e) {
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = g.BEFORE_DOCTYPE_NAME;
                break;
              case r.GREATER_THAN_SIGN:
                (this.state = g.BEFORE_DOCTYPE_NAME),
                  this._stateBeforeDoctypeName(e);
                break;
              case r.EOF: {
                this._err(i.eofInDoctype), this._createDoctypeToken(null);
                let e = this.currentToken;
                (e.forceQuirks = !0),
                  this.emitCurrentDoctype(e),
                  this._emitEOFToken();
                break;
              }
              default:
                this._err(i.missingWhitespaceBeforeDoctypeName),
                  (this.state = g.BEFORE_DOCTYPE_NAME),
                  this._stateBeforeDoctypeName(e);
            }
          }
          _stateBeforeDoctypeName(e) {
            if (eU(e))
              this._createDoctypeToken(String.fromCharCode(e + 32)),
                (this.state = g.DOCTYPE_NAME);
            else
              switch (e) {
                case r.SPACE:
                case r.LINE_FEED:
                case r.TABULATION:
                case r.FORM_FEED:
                  break;
                case r.NULL:
                  this._err(i.unexpectedNullCharacter),
                    this._createDoctypeToken("�"),
                    (this.state = g.DOCTYPE_NAME);
                  break;
                case r.GREATER_THAN_SIGN: {
                  this._err(i.missingDoctypeName),
                    this._createDoctypeToken(null);
                  let e = this.currentToken;
                  (e.forceQuirks = !0),
                    this.emitCurrentDoctype(e),
                    (this.state = g.DATA);
                  break;
                }
                case r.EOF: {
                  this._err(i.eofInDoctype), this._createDoctypeToken(null);
                  let e = this.currentToken;
                  (e.forceQuirks = !0),
                    this.emitCurrentDoctype(e),
                    this._emitEOFToken();
                  break;
                }
                default:
                  this._createDoctypeToken(String.fromCodePoint(e)),
                    (this.state = g.DOCTYPE_NAME);
              }
          }
          _stateDoctypeName(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = g.AFTER_DOCTYPE_NAME;
                break;
              case r.GREATER_THAN_SIGN:
                (this.state = g.DATA), this.emitCurrentDoctype(t);
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), (t.name += "�");
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                t.name += String.fromCodePoint(eU(e) ? e + 32 : e);
            }
          }
          _stateAfterDoctypeName(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.GREATER_THAN_SIGN:
                (this.state = g.DATA), this.emitCurrentDoctype(t);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                this._consumeSequenceIfMatch(eE.PUBLIC, !1)
                  ? (this.state = g.AFTER_DOCTYPE_PUBLIC_KEYWORD)
                  : this._consumeSequenceIfMatch(eE.SYSTEM, !1)
                    ? (this.state = g.AFTER_DOCTYPE_SYSTEM_KEYWORD)
                    : this._ensureHibernation() ||
                      (this._err(i.invalidCharacterSequenceAfterDoctypeName),
                      (t.forceQuirks = !0),
                      (this.state = g.BOGUS_DOCTYPE),
                      this._stateBogusDoctype(e));
            }
          }
          _stateAfterDoctypePublicKeyword(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = g.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
              case r.QUOTATION_MARK:
                this._err(i.missingWhitespaceAfterDoctypePublicKeyword),
                  (t.publicId = ""),
                  (this.state = g.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED);
                break;
              case r.APOSTROPHE:
                this._err(i.missingWhitespaceAfterDoctypePublicKeyword),
                  (t.publicId = ""),
                  (this.state = g.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED);
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.missingDoctypePublicIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.DATA),
                  this.emitCurrentDoctype(t);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                this._err(i.missingQuoteBeforeDoctypePublicIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.BOGUS_DOCTYPE),
                  this._stateBogusDoctype(e);
            }
          }
          _stateBeforeDoctypePublicIdentifier(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.QUOTATION_MARK:
                (t.publicId = ""),
                  (this.state = g.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED);
                break;
              case r.APOSTROPHE:
                (t.publicId = ""),
                  (this.state = g.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED);
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.missingDoctypePublicIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.DATA),
                  this.emitCurrentDoctype(t);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                this._err(i.missingQuoteBeforeDoctypePublicIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.BOGUS_DOCTYPE),
                  this._stateBogusDoctype(e);
            }
          }
          _stateDoctypePublicIdentifierDoubleQuoted(e) {
            let t = this.currentToken;
            switch (e) {
              case r.QUOTATION_MARK:
                this.state = g.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), (t.publicId += "�");
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.abruptDoctypePublicIdentifier),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  (this.state = g.DATA);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                t.publicId += String.fromCodePoint(e);
            }
          }
          _stateDoctypePublicIdentifierSingleQuoted(e) {
            let t = this.currentToken;
            switch (e) {
              case r.APOSTROPHE:
                this.state = g.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), (t.publicId += "�");
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.abruptDoctypePublicIdentifier),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  (this.state = g.DATA);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                t.publicId += String.fromCodePoint(e);
            }
          }
          _stateAfterDoctypePublicIdentifier(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = g.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
                break;
              case r.GREATER_THAN_SIGN:
                (this.state = g.DATA), this.emitCurrentDoctype(t);
                break;
              case r.QUOTATION_MARK:
                this._err(
                  i.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers,
                ),
                  (t.systemId = ""),
                  (this.state = g.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED);
                break;
              case r.APOSTROPHE:
                this._err(
                  i.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers,
                ),
                  (t.systemId = ""),
                  (this.state = g.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                this._err(i.missingQuoteBeforeDoctypeSystemIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.BOGUS_DOCTYPE),
                  this._stateBogusDoctype(e);
            }
          }
          _stateBetweenDoctypePublicAndSystemIdentifiers(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.GREATER_THAN_SIGN:
                this.emitCurrentDoctype(t), (this.state = g.DATA);
                break;
              case r.QUOTATION_MARK:
                (t.systemId = ""),
                  (this.state = g.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED);
                break;
              case r.APOSTROPHE:
                (t.systemId = ""),
                  (this.state = g.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                this._err(i.missingQuoteBeforeDoctypeSystemIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.BOGUS_DOCTYPE),
                  this._stateBogusDoctype(e);
            }
          }
          _stateAfterDoctypeSystemKeyword(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = g.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
              case r.QUOTATION_MARK:
                this._err(i.missingWhitespaceAfterDoctypeSystemKeyword),
                  (t.systemId = ""),
                  (this.state = g.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED);
                break;
              case r.APOSTROPHE:
                this._err(i.missingWhitespaceAfterDoctypeSystemKeyword),
                  (t.systemId = ""),
                  (this.state = g.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED);
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.missingDoctypeSystemIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.DATA),
                  this.emitCurrentDoctype(t);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                this._err(i.missingQuoteBeforeDoctypeSystemIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.BOGUS_DOCTYPE),
                  this._stateBogusDoctype(e);
            }
          }
          _stateBeforeDoctypeSystemIdentifier(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.QUOTATION_MARK:
                (t.systemId = ""),
                  (this.state = g.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED);
                break;
              case r.APOSTROPHE:
                (t.systemId = ""),
                  (this.state = g.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED);
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.missingDoctypeSystemIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.DATA),
                  this.emitCurrentDoctype(t);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                this._err(i.missingQuoteBeforeDoctypeSystemIdentifier),
                  (t.forceQuirks = !0),
                  (this.state = g.BOGUS_DOCTYPE),
                  this._stateBogusDoctype(e);
            }
          }
          _stateDoctypeSystemIdentifierDoubleQuoted(e) {
            let t = this.currentToken;
            switch (e) {
              case r.QUOTATION_MARK:
                this.state = g.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), (t.systemId += "�");
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.abruptDoctypeSystemIdentifier),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  (this.state = g.DATA);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                t.systemId += String.fromCodePoint(e);
            }
          }
          _stateDoctypeSystemIdentifierSingleQuoted(e) {
            let t = this.currentToken;
            switch (e) {
              case r.APOSTROPHE:
                this.state = g.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter), (t.systemId += "�");
                break;
              case r.GREATER_THAN_SIGN:
                this._err(i.abruptDoctypeSystemIdentifier),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  (this.state = g.DATA);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                t.systemId += String.fromCodePoint(e);
            }
          }
          _stateAfterDoctypeSystemIdentifier(e) {
            let t = this.currentToken;
            switch (e) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.GREATER_THAN_SIGN:
                this.emitCurrentDoctype(t), (this.state = g.DATA);
                break;
              case r.EOF:
                this._err(i.eofInDoctype),
                  (t.forceQuirks = !0),
                  this.emitCurrentDoctype(t),
                  this._emitEOFToken();
                break;
              default:
                this._err(i.unexpectedCharacterAfterDoctypeSystemIdentifier),
                  (this.state = g.BOGUS_DOCTYPE),
                  this._stateBogusDoctype(e);
            }
          }
          _stateBogusDoctype(e) {
            let t = this.currentToken;
            switch (e) {
              case r.GREATER_THAN_SIGN:
                this.emitCurrentDoctype(t), (this.state = g.DATA);
                break;
              case r.NULL:
                this._err(i.unexpectedNullCharacter);
                break;
              case r.EOF:
                this.emitCurrentDoctype(t), this._emitEOFToken();
            }
          }
          _stateCdataSection(e) {
            switch (e) {
              case r.RIGHT_SQUARE_BRACKET:
                this.state = g.CDATA_SECTION_BRACKET;
                break;
              case r.EOF:
                this._err(i.eofInCdata), this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(e);
            }
          }
          _stateCdataSectionBracket(e) {
            e === r.RIGHT_SQUARE_BRACKET
              ? (this.state = g.CDATA_SECTION_END)
              : (this._emitChars("]"),
                (this.state = g.CDATA_SECTION),
                this._stateCdataSection(e));
          }
          _stateCdataSectionEnd(e) {
            switch (e) {
              case r.GREATER_THAN_SIGN:
                this.state = g.DATA;
                break;
              case r.RIGHT_SQUARE_BRACKET:
                this._emitChars("]");
                break;
              default:
                this._emitChars("]]"),
                  (this.state = g.CDATA_SECTION),
                  this._stateCdataSection(e);
            }
          }
          _stateCharacterReference() {
            let e = this.entityDecoder.write(
              this.preprocessor.html,
              this.preprocessor.pos,
            );
            if (e < 0)
              if (this.preprocessor.lastChunkWritten)
                e = this.entityDecoder.end();
              else {
                (this.active = !1),
                  (this.preprocessor.pos = this.preprocessor.html.length - 1),
                  (this.consumedAfterSnapshot = 0),
                  (this.preprocessor.endOfChunkHit = !0);
                return;
              }
            0 === e
              ? ((this.preprocessor.pos = this.entityStartPos),
                this._flushCodePointConsumedAsCharacterReference(r.AMPERSAND),
                (this.state =
                  !this._isCharacterReferenceInAttribute() &&
                  eQ(this.preprocessor.peek(1))
                    ? g.AMBIGUOUS_AMPERSAND
                    : this.returnState))
              : (this.state = this.returnState);
          }
          _stateAmbiguousAmpersand(e) {
            eQ(e)
              ? this._flushCodePointConsumedAsCharacterReference(e)
              : (e === r.SEMICOLON &&
                  this._err(i.unknownNamedCharacterReference),
                (this.state = this.returnState),
                this._callState(e));
          }
        }
        let eG = new Set([
            m.DD,
            m.DT,
            m.LI,
            m.OPTGROUP,
            m.OPTION,
            m.P,
            m.RB,
            m.RP,
            m.RT,
            m.RTC,
          ]),
          eY = new Set([
            ...eG,
            m.CAPTION,
            m.COLGROUP,
            m.TBODY,
            m.TD,
            m.TFOOT,
            m.TH,
            m.THEAD,
            m.TR,
          ]),
          eK = new Set([
            m.APPLET,
            m.CAPTION,
            m.HTML,
            m.MARQUEE,
            m.OBJECT,
            m.TABLE,
            m.TD,
            m.TEMPLATE,
            m.TH,
          ]),
          eX = new Set([...eK, m.OL, m.UL]),
          eJ = new Set([...eK, m.BUTTON]),
          e0 = new Set([m.ANNOTATION_XML, m.MI, m.MN, m.MO, m.MS, m.MTEXT]),
          e1 = new Set([m.DESC, m.FOREIGN_OBJECT, m.TITLE]),
          e2 = new Set([m.TR, m.TEMPLATE, m.HTML]),
          e5 = new Set([m.TBODY, m.TFOOT, m.THEAD, m.TEMPLATE, m.HTML]),
          e3 = new Set([m.TABLE, m.TEMPLATE, m.HTML]),
          e4 = new Set([m.TD, m.TH]);
        class e8 {
          get currentTmplContentOrNode() {
            return this._isInTemplate()
              ? this.treeAdapter.getTemplateContent(this.current)
              : this.current;
          }
          constructor(e, t, n) {
            (this.treeAdapter = t),
              (this.handler = n),
              (this.items = []),
              (this.tagIDs = []),
              (this.stackTop = -1),
              (this.tmplCount = 0),
              (this.currentTagId = m.UNKNOWN),
              (this.current = e);
          }
          _indexOf(e) {
            return this.items.lastIndexOf(e, this.stackTop);
          }
          _isInTemplate() {
            return (
              this.currentTagId === m.TEMPLATE &&
              this.treeAdapter.getNamespaceURI(this.current) === d.HTML
            );
          }
          _updateCurrentElement() {
            (this.current = this.items[this.stackTop]),
              (this.currentTagId = this.tagIDs[this.stackTop]);
          }
          push(e, t) {
            this.stackTop++,
              (this.items[this.stackTop] = e),
              (this.current = e),
              (this.tagIDs[this.stackTop] = t),
              (this.currentTagId = t),
              this._isInTemplate() && this.tmplCount++,
              this.handler.onItemPush(e, t, !0);
          }
          pop() {
            let e = this.current;
            this.tmplCount > 0 && this._isInTemplate() && this.tmplCount--,
              this.stackTop--,
              this._updateCurrentElement(),
              this.handler.onItemPop(e, !0);
          }
          replace(e, t) {
            let n = this._indexOf(e);
            (this.items[n] = t), n === this.stackTop && (this.current = t);
          }
          insertAfter(e, t, n) {
            let r = this._indexOf(e) + 1;
            this.items.splice(r, 0, t),
              this.tagIDs.splice(r, 0, n),
              this.stackTop++,
              r === this.stackTop && this._updateCurrentElement(),
              this.current &&
                void 0 !== this.currentTagId &&
                this.handler.onItemPush(
                  this.current,
                  this.currentTagId,
                  r === this.stackTop,
                );
          }
          popUntilTagNamePopped(e) {
            let t = this.stackTop + 1;
            do t = this.tagIDs.lastIndexOf(e, t - 1);
            while (
              t > 0 &&
              this.treeAdapter.getNamespaceURI(this.items[t]) !== d.HTML
            );
            this.shortenToLength(Math.max(t, 0));
          }
          shortenToLength(e) {
            for (; this.stackTop >= e; ) {
              let t = this.current;
              this.tmplCount > 0 &&
                this._isInTemplate() &&
                (this.tmplCount -= 1),
                this.stackTop--,
                this._updateCurrentElement(),
                this.handler.onItemPop(t, this.stackTop < e);
            }
          }
          popUntilElementPopped(e) {
            let t = this._indexOf(e);
            this.shortenToLength(Math.max(t, 0));
          }
          popUntilPopped(e, t) {
            let n = this._indexOfTagNames(e, t);
            this.shortenToLength(Math.max(n, 0));
          }
          popUntilNumberedHeaderPopped() {
            this.popUntilPopped(e$, d.HTML);
          }
          popUntilTableCellPopped() {
            this.popUntilPopped(e4, d.HTML);
          }
          popAllUpToHtmlElement() {
            (this.tmplCount = 0), this.shortenToLength(1);
          }
          _indexOfTagNames(e, t) {
            for (let n = this.stackTop; n >= 0; n--)
              if (
                e.has(this.tagIDs[n]) &&
                this.treeAdapter.getNamespaceURI(this.items[n]) === t
              )
                return n;
            return -1;
          }
          clearBackTo(e, t) {
            let n = this._indexOfTagNames(e, t);
            this.shortenToLength(n + 1);
          }
          clearBackToTableContext() {
            this.clearBackTo(e3, d.HTML);
          }
          clearBackToTableBodyContext() {
            this.clearBackTo(e5, d.HTML);
          }
          clearBackToTableRowContext() {
            this.clearBackTo(e2, d.HTML);
          }
          remove(e) {
            let t = this._indexOf(e);
            t >= 0 &&
              (t === this.stackTop
                ? this.pop()
                : (this.items.splice(t, 1),
                  this.tagIDs.splice(t, 1),
                  this.stackTop--,
                  this._updateCurrentElement(),
                  this.handler.onItemPop(e, !1)));
          }
          tryPeekProperlyNestedBodyElement() {
            return this.stackTop >= 1 && this.tagIDs[1] === m.BODY
              ? this.items[1]
              : null;
          }
          contains(e) {
            return this._indexOf(e) > -1;
          }
          getCommonAncestor(e) {
            let t = this._indexOf(e) - 1;
            return t >= 0 ? this.items[t] : null;
          }
          isRootHtmlElementCurrent() {
            return 0 === this.stackTop && this.tagIDs[0] === m.HTML;
          }
          hasInDynamicScope(e, t) {
            for (let n = this.stackTop; n >= 0; n--) {
              let r = this.tagIDs[n];
              switch (this.treeAdapter.getNamespaceURI(this.items[n])) {
                case d.HTML:
                  if (r === e) return !0;
                  if (t.has(r)) return !1;
                  break;
                case d.SVG:
                  if (e1.has(r)) return !1;
                  break;
                case d.MATHML:
                  if (e0.has(r)) return !1;
              }
            }
            return !0;
          }
          hasInScope(e) {
            return this.hasInDynamicScope(e, eK);
          }
          hasInListItemScope(e) {
            return this.hasInDynamicScope(e, eX);
          }
          hasInButtonScope(e) {
            return this.hasInDynamicScope(e, eJ);
          }
          hasNumberedHeaderInScope() {
            for (let e = this.stackTop; e >= 0; e--) {
              let t = this.tagIDs[e];
              switch (this.treeAdapter.getNamespaceURI(this.items[e])) {
                case d.HTML:
                  if (e$.has(t)) return !0;
                  if (eK.has(t)) return !1;
                  break;
                case d.SVG:
                  if (e1.has(t)) return !1;
                  break;
                case d.MATHML:
                  if (e0.has(t)) return !1;
              }
            }
            return !0;
          }
          hasInTableScope(e) {
            for (let t = this.stackTop; t >= 0; t--)
              if (this.treeAdapter.getNamespaceURI(this.items[t]) === d.HTML)
                switch (this.tagIDs[t]) {
                  case e:
                    return !0;
                  case m.TABLE:
                  case m.HTML:
                    return !1;
                }
            return !0;
          }
          hasTableBodyContextInTableScope() {
            for (let e = this.stackTop; e >= 0; e--)
              if (this.treeAdapter.getNamespaceURI(this.items[e]) === d.HTML)
                switch (this.tagIDs[e]) {
                  case m.TBODY:
                  case m.THEAD:
                  case m.TFOOT:
                    return !0;
                  case m.TABLE:
                  case m.HTML:
                    return !1;
                }
            return !0;
          }
          hasInSelectScope(e) {
            for (let t = this.stackTop; t >= 0; t--)
              if (this.treeAdapter.getNamespaceURI(this.items[t]) === d.HTML)
                switch (this.tagIDs[t]) {
                  case e:
                    return !0;
                  case m.OPTION:
                  case m.OPTGROUP:
                    break;
                  default:
                    return !1;
                }
            return !0;
          }
          generateImpliedEndTags() {
            for (; void 0 !== this.currentTagId && eG.has(this.currentTagId); )
              this.pop();
          }
          generateImpliedEndTagsThoroughly() {
            for (; void 0 !== this.currentTagId && eY.has(this.currentTagId); )
              this.pop();
          }
          generateImpliedEndTagsWithExclusion(e) {
            for (
              ;
              void 0 !== this.currentTagId &&
              this.currentTagId !== e &&
              eY.has(this.currentTagId);

            )
              this.pop();
          }
        }
        !(function (e) {
          (e[(e.Marker = 0)] = "Marker"), (e[(e.Element = 1)] = "Element");
        })(y || (y = {}));
        let e6 = { type: y.Marker };
        class e9 {
          constructor(e) {
            (this.treeAdapter = e), (this.entries = []), (this.bookmark = null);
          }
          _getNoahArkConditionCandidates(e, t) {
            let n = [],
              r = t.length,
              i = this.treeAdapter.getTagName(e),
              s = this.treeAdapter.getNamespaceURI(e);
            for (let e = 0; e < this.entries.length; e++) {
              let t = this.entries[e];
              if (t.type === y.Marker) break;
              let { element: o } = t;
              if (
                this.treeAdapter.getTagName(o) === i &&
                this.treeAdapter.getNamespaceURI(o) === s
              ) {
                let t = this.treeAdapter.getAttrList(o);
                t.length === r && n.push({ idx: e, attrs: t });
              }
            }
            return n;
          }
          _ensureNoahArkCondition(e) {
            if (this.entries.length < 3) return;
            let t = this.treeAdapter.getAttrList(e),
              n = this._getNoahArkConditionCandidates(e, t);
            if (n.length < 3) return;
            let r = new Map(t.map((e) => [e.name, e.value])),
              i = 0;
            for (let e = 0; e < n.length; e++) {
              let t = n[e];
              t.attrs.every((e) => r.get(e.name) === e.value) &&
                (i += 1) >= 3 &&
                this.entries.splice(t.idx, 1);
            }
          }
          insertMarker() {
            this.entries.unshift(e6);
          }
          pushElement(e, t) {
            this._ensureNoahArkCondition(e),
              this.entries.unshift({ type: y.Element, element: e, token: t });
          }
          insertElementAfterBookmark(e, t) {
            let n = this.entries.indexOf(this.bookmark);
            this.entries.splice(n, 0, {
              type: y.Element,
              element: e,
              token: t,
            });
          }
          removeEntry(e) {
            let t = this.entries.indexOf(e);
            -1 !== t && this.entries.splice(t, 1);
          }
          clearToLastMarker() {
            let e = this.entries.indexOf(e6);
            -1 === e
              ? (this.entries.length = 0)
              : this.entries.splice(0, e + 1);
          }
          getElementEntryInScopeWithTagName(e) {
            let t = this.entries.find(
              (t) =>
                t.type === y.Marker ||
                this.treeAdapter.getTagName(t.element) === e,
            );
            return t && t.type === y.Element ? t : null;
          }
          getElementEntry(e) {
            return this.entries.find(
              (t) => t.type === y.Element && t.element === e,
            );
          }
        }
        let e7 = {
            createDocument: () => ({
              nodeName: "#document",
              mode: p.NO_QUIRKS,
              childNodes: [],
            }),
            createDocumentFragment: () => ({
              nodeName: "#document-fragment",
              childNodes: [],
            }),
            createElement: (e, t, n) => ({
              nodeName: e,
              tagName: e,
              attrs: n,
              namespaceURI: t,
              childNodes: [],
              parentNode: null,
            }),
            createCommentNode: (e) => ({
              nodeName: "#comment",
              data: e,
              parentNode: null,
            }),
            createTextNode: (e) => ({
              nodeName: "#text",
              value: e,
              parentNode: null,
            }),
            appendChild(e, t) {
              e.childNodes.push(t), (t.parentNode = e);
            },
            insertBefore(e, t, n) {
              let r = e.childNodes.indexOf(n);
              e.childNodes.splice(r, 0, t), (t.parentNode = e);
            },
            setTemplateContent(e, t) {
              e.content = t;
            },
            getTemplateContent: (e) => e.content,
            setDocumentType(e, t, n, r) {
              let i = e.childNodes.find((e) => "#documentType" === e.nodeName);
              i
                ? ((i.name = t), (i.publicId = n), (i.systemId = r))
                : e7.appendChild(e, {
                    nodeName: "#documentType",
                    name: t,
                    publicId: n,
                    systemId: r,
                    parentNode: null,
                  });
            },
            setDocumentMode(e, t) {
              e.mode = t;
            },
            getDocumentMode: (e) => e.mode,
            detachNode(e) {
              if (e.parentNode) {
                let t = e.parentNode.childNodes.indexOf(e);
                e.parentNode.childNodes.splice(t, 1), (e.parentNode = null);
              }
            },
            insertText(e, t) {
              if (e.childNodes.length > 0) {
                let n = e.childNodes[e.childNodes.length - 1];
                if (e7.isTextNode(n)) {
                  n.value += t;
                  return;
                }
              }
              e7.appendChild(e, e7.createTextNode(t));
            },
            insertTextBefore(e, t, n) {
              let r = e.childNodes[e.childNodes.indexOf(n) - 1];
              r && e7.isTextNode(r)
                ? (r.value += t)
                : e7.insertBefore(e, e7.createTextNode(t), n);
            },
            adoptAttributes(e, t) {
              let n = new Set(e.attrs.map((e) => e.name));
              for (let r = 0; r < t.length; r++)
                n.has(t[r].name) || e.attrs.push(t[r]);
            },
            getFirstChild: (e) => e.childNodes[0],
            getChildNodes: (e) => e.childNodes,
            getParentNode: (e) => e.parentNode,
            getAttrList: (e) => e.attrs,
            getTagName: (e) => e.tagName,
            getNamespaceURI: (e) => e.namespaceURI,
            getTextNodeContent: (e) => e.value,
            getCommentNodeContent: (e) => e.data,
            getDocumentTypeNodeName: (e) => e.name,
            getDocumentTypeNodePublicId: (e) => e.publicId,
            getDocumentTypeNodeSystemId: (e) => e.systemId,
            isTextNode: (e) => "#text" === e.nodeName,
            isCommentNode: (e) => "#comment" === e.nodeName,
            isDocumentTypeNode: (e) => "#documentType" === e.nodeName,
            isElementNode: (e) =>
              Object.prototype.hasOwnProperty.call(e, "tagName"),
            setNodeSourceCodeLocation(e, t) {
              e.sourceCodeLocation = t;
            },
            getNodeSourceCodeLocation: (e) => e.sourceCodeLocation,
            updateNodeSourceCodeLocation(e, t) {
              e.sourceCodeLocation = { ...e.sourceCodeLocation, ...t };
            },
          },
          te = "html",
          tt = [
            "+//silmaril//dtd html pro v0r11 19970101//",
            "-//as//dtd html 3.0 aswedit + extensions//",
            "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
            "-//ietf//dtd html 2.0 level 1//",
            "-//ietf//dtd html 2.0 level 2//",
            "-//ietf//dtd html 2.0 strict level 1//",
            "-//ietf//dtd html 2.0 strict level 2//",
            "-//ietf//dtd html 2.0 strict//",
            "-//ietf//dtd html 2.0//",
            "-//ietf//dtd html 2.1e//",
            "-//ietf//dtd html 3.0//",
            "-//ietf//dtd html 3.2 final//",
            "-//ietf//dtd html 3.2//",
            "-//ietf//dtd html 3//",
            "-//ietf//dtd html level 0//",
            "-//ietf//dtd html level 1//",
            "-//ietf//dtd html level 2//",
            "-//ietf//dtd html level 3//",
            "-//ietf//dtd html strict level 0//",
            "-//ietf//dtd html strict level 1//",
            "-//ietf//dtd html strict level 2//",
            "-//ietf//dtd html strict level 3//",
            "-//ietf//dtd html strict//",
            "-//ietf//dtd html//",
            "-//metrius//dtd metrius presentational//",
            "-//microsoft//dtd internet explorer 2.0 html strict//",
            "-//microsoft//dtd internet explorer 2.0 html//",
            "-//microsoft//dtd internet explorer 2.0 tables//",
            "-//microsoft//dtd internet explorer 3.0 html strict//",
            "-//microsoft//dtd internet explorer 3.0 html//",
            "-//microsoft//dtd internet explorer 3.0 tables//",
            "-//netscape comm. corp.//dtd html//",
            "-//netscape comm. corp.//dtd strict html//",
            "-//o'reilly and associates//dtd html 2.0//",
            "-//o'reilly and associates//dtd html extended 1.0//",
            "-//o'reilly and associates//dtd html extended relaxed 1.0//",
            "-//sq//dtd html 2.0 hotmetal + extensions//",
            "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
            "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
            "-//spyglass//dtd html 2.0 extended//",
            "-//sun microsystems corp.//dtd hotjava html//",
            "-//sun microsystems corp.//dtd hotjava strict html//",
            "-//w3c//dtd html 3 1995-03-24//",
            "-//w3c//dtd html 3.2 draft//",
            "-//w3c//dtd html 3.2 final//",
            "-//w3c//dtd html 3.2//",
            "-//w3c//dtd html 3.2s draft//",
            "-//w3c//dtd html 4.0 frameset//",
            "-//w3c//dtd html 4.0 transitional//",
            "-//w3c//dtd html experimental 19960712//",
            "-//w3c//dtd html experimental 970421//",
            "-//w3c//dtd w3 html//",
            "-//w3o//dtd w3 html 3.0//",
            "-//webtechs//dtd mozilla html 2.0//",
            "-//webtechs//dtd mozilla html//",
          ],
          tn = [
            ...tt,
            "-//w3c//dtd html 4.01 frameset//",
            "-//w3c//dtd html 4.01 transitional//",
          ],
          tr = new Set([
            "-//w3o//dtd w3 html strict 3.0//en//",
            "-/w3c/dtd html 4.0 transitional/en",
            "html",
          ]),
          ti = [
            "-//w3c//dtd xhtml 1.0 frameset//",
            "-//w3c//dtd xhtml 1.0 transitional//",
          ],
          ts = [
            ...ti,
            "-//w3c//dtd html 4.01 frameset//",
            "-//w3c//dtd html 4.01 transitional//",
          ];
        function to(e, t) {
          return t.some((t) => e.startsWith(t));
        }
        let ta = {
            TEXT_HTML: "text/html",
            APPLICATION_XML: "application/xhtml+xml",
          },
          tl = new Map(
            [
              "attributeName",
              "attributeType",
              "baseFrequency",
              "baseProfile",
              "calcMode",
              "clipPathUnits",
              "diffuseConstant",
              "edgeMode",
              "filterUnits",
              "glyphRef",
              "gradientTransform",
              "gradientUnits",
              "kernelMatrix",
              "kernelUnitLength",
              "keyPoints",
              "keySplines",
              "keyTimes",
              "lengthAdjust",
              "limitingConeAngle",
              "markerHeight",
              "markerUnits",
              "markerWidth",
              "maskContentUnits",
              "maskUnits",
              "numOctaves",
              "pathLength",
              "patternContentUnits",
              "patternTransform",
              "patternUnits",
              "pointsAtX",
              "pointsAtY",
              "pointsAtZ",
              "preserveAlpha",
              "preserveAspectRatio",
              "primitiveUnits",
              "refX",
              "refY",
              "repeatCount",
              "repeatDur",
              "requiredExtensions",
              "requiredFeatures",
              "specularConstant",
              "specularExponent",
              "spreadMethod",
              "startOffset",
              "stdDeviation",
              "stitchTiles",
              "surfaceScale",
              "systemLanguage",
              "tableValues",
              "targetX",
              "targetY",
              "textLength",
              "viewBox",
              "viewTarget",
              "xChannelSelector",
              "yChannelSelector",
              "zoomAndPan",
            ].map((e) => [e.toLowerCase(), e]),
          ),
          tc = new Map([
            [
              "xlink:actuate",
              { prefix: "xlink", name: "actuate", namespace: d.XLINK },
            ],
            [
              "xlink:arcrole",
              { prefix: "xlink", name: "arcrole", namespace: d.XLINK },
            ],
            [
              "xlink:href",
              { prefix: "xlink", name: "href", namespace: d.XLINK },
            ],
            [
              "xlink:role",
              { prefix: "xlink", name: "role", namespace: d.XLINK },
            ],
            [
              "xlink:show",
              { prefix: "xlink", name: "show", namespace: d.XLINK },
            ],
            [
              "xlink:title",
              { prefix: "xlink", name: "title", namespace: d.XLINK },
            ],
            [
              "xlink:type",
              { prefix: "xlink", name: "type", namespace: d.XLINK },
            ],
            ["xml:lang", { prefix: "xml", name: "lang", namespace: d.XML }],
            ["xml:space", { prefix: "xml", name: "space", namespace: d.XML }],
            ["xmlns", { prefix: "", name: "xmlns", namespace: d.XMLNS }],
            [
              "xmlns:xlink",
              { prefix: "xmlns", name: "xlink", namespace: d.XMLNS },
            ],
          ]),
          tu = new Map(
            [
              "altGlyph",
              "altGlyphDef",
              "altGlyphItem",
              "animateColor",
              "animateMotion",
              "animateTransform",
              "clipPath",
              "feBlend",
              "feColorMatrix",
              "feComponentTransfer",
              "feComposite",
              "feConvolveMatrix",
              "feDiffuseLighting",
              "feDisplacementMap",
              "feDistantLight",
              "feFlood",
              "feFuncA",
              "feFuncB",
              "feFuncG",
              "feFuncR",
              "feGaussianBlur",
              "feImage",
              "feMerge",
              "feMergeNode",
              "feMorphology",
              "feOffset",
              "fePointLight",
              "feSpecularLighting",
              "feSpotLight",
              "feTile",
              "feTurbulence",
              "foreignObject",
              "glyphRef",
              "linearGradient",
              "radialGradient",
              "textPath",
            ].map((e) => [e.toLowerCase(), e]),
          ),
          td = new Set([
            m.B,
            m.BIG,
            m.BLOCKQUOTE,
            m.BODY,
            m.BR,
            m.CENTER,
            m.CODE,
            m.DD,
            m.DIV,
            m.DL,
            m.DT,
            m.EM,
            m.EMBED,
            m.H1,
            m.H2,
            m.H3,
            m.H4,
            m.H5,
            m.H6,
            m.HEAD,
            m.HR,
            m.I,
            m.IMG,
            m.LI,
            m.LISTING,
            m.MENU,
            m.META,
            m.NOBR,
            m.OL,
            m.P,
            m.PRE,
            m.RUBY,
            m.S,
            m.SMALL,
            m.SPAN,
            m.STRONG,
            m.STRIKE,
            m.SUB,
            m.SUP,
            m.TABLE,
            m.TT,
            m.U,
            m.UL,
            m.VAR,
          ]);
        function th(e) {
          for (let t = 0; t < e.attrs.length; t++)
            if ("definitionurl" === e.attrs[t].name) {
              e.attrs[t].name = "definitionURL";
              break;
            }
        }
        function tp(e) {
          for (let t = 0; t < e.attrs.length; t++) {
            let n = tl.get(e.attrs[t].name);
            null != n && (e.attrs[t].name = n);
          }
        }
        function tf(e) {
          for (let t = 0; t < e.attrs.length; t++) {
            let n = tc.get(e.attrs[t].name);
            n &&
              ((e.attrs[t].prefix = n.prefix),
              (e.attrs[t].name = n.name),
              (e.attrs[t].namespace = n.namespace));
          }
        }
        !(function (e) {
          (e[(e.INITIAL = 0)] = "INITIAL"),
            (e[(e.BEFORE_HTML = 1)] = "BEFORE_HTML"),
            (e[(e.BEFORE_HEAD = 2)] = "BEFORE_HEAD"),
            (e[(e.IN_HEAD = 3)] = "IN_HEAD"),
            (e[(e.IN_HEAD_NO_SCRIPT = 4)] = "IN_HEAD_NO_SCRIPT"),
            (e[(e.AFTER_HEAD = 5)] = "AFTER_HEAD"),
            (e[(e.IN_BODY = 6)] = "IN_BODY"),
            (e[(e.TEXT = 7)] = "TEXT"),
            (e[(e.IN_TABLE = 8)] = "IN_TABLE"),
            (e[(e.IN_TABLE_TEXT = 9)] = "IN_TABLE_TEXT"),
            (e[(e.IN_CAPTION = 10)] = "IN_CAPTION"),
            (e[(e.IN_COLUMN_GROUP = 11)] = "IN_COLUMN_GROUP"),
            (e[(e.IN_TABLE_BODY = 12)] = "IN_TABLE_BODY"),
            (e[(e.IN_ROW = 13)] = "IN_ROW"),
            (e[(e.IN_CELL = 14)] = "IN_CELL"),
            (e[(e.IN_SELECT = 15)] = "IN_SELECT"),
            (e[(e.IN_SELECT_IN_TABLE = 16)] = "IN_SELECT_IN_TABLE"),
            (e[(e.IN_TEMPLATE = 17)] = "IN_TEMPLATE"),
            (e[(e.AFTER_BODY = 18)] = "AFTER_BODY"),
            (e[(e.IN_FRAMESET = 19)] = "IN_FRAMESET"),
            (e[(e.AFTER_FRAMESET = 20)] = "AFTER_FRAMESET"),
            (e[(e.AFTER_AFTER_BODY = 21)] = "AFTER_AFTER_BODY"),
            (e[(e.AFTER_AFTER_FRAMESET = 22)] = "AFTER_AFTER_FRAMESET");
        })(v || (v = {}));
        let tm = {
            startLine: -1,
            startCol: -1,
            startOffset: -1,
            endLine: -1,
            endCol: -1,
            endOffset: -1,
          },
          tg = new Set([m.TABLE, m.TBODY, m.TFOOT, m.THEAD, m.TR]),
          ty = {
            scriptingEnabled: !0,
            sourceCodeLocationInfo: !1,
            treeAdapter: e7,
            onParseError: null,
          };
        class tv {
          constructor(e, t, n = null, r = null) {
            (this.fragmentContext = n),
              (this.scriptHandler = r),
              (this.currentToken = null),
              (this.stopped = !1),
              (this.insertionMode = v.INITIAL),
              (this.originalInsertionMode = v.INITIAL),
              (this.headElement = null),
              (this.formElement = null),
              (this.currentNotInHTML = !1),
              (this.tmplInsertionModeStack = []),
              (this.pendingCharacterTokens = []),
              (this.hasNonWhitespacePendingCharacterToken = !1),
              (this.framesetOk = !0),
              (this.skipNextNewLine = !1),
              (this.fosterParentingEnabled = !1),
              (this.options = { ...ty, ...e }),
              (this.treeAdapter = this.options.treeAdapter),
              (this.onParseError = this.options.onParseError),
              this.onParseError && (this.options.sourceCodeLocationInfo = !0),
              (this.document =
                null != t ? t : this.treeAdapter.createDocument()),
              (this.tokenizer = new eZ(this.options, this)),
              (this.activeFormattingElements = new e9(this.treeAdapter)),
              (this.fragmentContextID = n
                ? eF(this.treeAdapter.getTagName(n))
                : m.UNKNOWN),
              this._setContextModes(
                null != n ? n : this.document,
                this.fragmentContextID,
              ),
              (this.openElements = new e8(
                this.document,
                this.treeAdapter,
                this,
              ));
          }
          static parse(e, t) {
            let n = new this(t);
            return n.tokenizer.write(e, !0), n.document;
          }
          static getFragmentParser(e, t) {
            let n = { ...ty, ...t };
            null != e ||
              (e = n.treeAdapter.createElement(f.TEMPLATE, d.HTML, []));
            let r = n.treeAdapter.createElement("documentmock", d.HTML, []),
              i = new this(n, r, e);
            return (
              i.fragmentContextID === m.TEMPLATE &&
                i.tmplInsertionModeStack.unshift(v.IN_TEMPLATE),
              i._initTokenizerForFragmentParsing(),
              i._insertFakeRootElement(),
              i._resetInsertionMode(),
              i._findFormInFragmentContext(),
              i
            );
          }
          getFragment() {
            let e = this.treeAdapter.getFirstChild(this.document),
              t = this.treeAdapter.createDocumentFragment();
            return this._adoptNodes(e, t), t;
          }
          _err(e, t, n) {
            var r;
            if (!this.onParseError) return;
            let i = null != (r = e.location) ? r : tm,
              s = {
                code: t,
                startLine: i.startLine,
                startCol: i.startCol,
                startOffset: i.startOffset,
                endLine: n ? i.startLine : i.endLine,
                endCol: n ? i.startCol : i.endCol,
                endOffset: n ? i.startOffset : i.endOffset,
              };
            this.onParseError(s);
          }
          onItemPush(e, t, n) {
            var r, i;
            null == (i = (r = this.treeAdapter).onItemPush) || i.call(r, e),
              n &&
                this.openElements.stackTop > 0 &&
                this._setContextModes(e, t);
          }
          onItemPop(e, t) {
            var n, r;
            if (
              (this.options.sourceCodeLocationInfo &&
                this._setEndLocation(e, this.currentToken),
              null == (r = (n = this.treeAdapter).onItemPop) ||
                r.call(n, e, this.openElements.current),
              t)
            ) {
              let e, t;
              0 === this.openElements.stackTop && this.fragmentContext
                ? ((e = this.fragmentContext), (t = this.fragmentContextID))
                : ({ current: e, currentTagId: t } = this.openElements),
                this._setContextModes(e, t);
            }
          }
          _setContextModes(e, t) {
            let n =
              e === this.document ||
              (e && this.treeAdapter.getNamespaceURI(e) === d.HTML);
            (this.currentNotInHTML = !n),
              (this.tokenizer.inForeignNode =
                !n &&
                void 0 !== e &&
                void 0 !== t &&
                !this._isIntegrationPoint(t, e));
          }
          _switchToTextParsing(e, t) {
            this._insertElement(e, d.HTML),
              (this.tokenizer.state = t),
              (this.originalInsertionMode = this.insertionMode),
              (this.insertionMode = v.TEXT);
          }
          switchToPlaintextParsing() {
            (this.insertionMode = v.TEXT),
              (this.originalInsertionMode = v.IN_BODY),
              (this.tokenizer.state = eq.PLAINTEXT);
          }
          _getAdjustedCurrentElement() {
            return 0 === this.openElements.stackTop && this.fragmentContext
              ? this.fragmentContext
              : this.openElements.current;
          }
          _findFormInFragmentContext() {
            let e = this.fragmentContext;
            for (; e; ) {
              if (this.treeAdapter.getTagName(e) === f.FORM) {
                this.formElement = e;
                break;
              }
              e = this.treeAdapter.getParentNode(e);
            }
          }
          _initTokenizerForFragmentParsing() {
            if (
              this.fragmentContext &&
              this.treeAdapter.getNamespaceURI(this.fragmentContext) === d.HTML
            )
              switch (this.fragmentContextID) {
                case m.TITLE:
                case m.TEXTAREA:
                  this.tokenizer.state = eq.RCDATA;
                  break;
                case m.STYLE:
                case m.XMP:
                case m.IFRAME:
                case m.NOEMBED:
                case m.NOFRAMES:
                case m.NOSCRIPT:
                  this.tokenizer.state = eq.RAWTEXT;
                  break;
                case m.SCRIPT:
                  this.tokenizer.state = eq.SCRIPT_DATA;
                  break;
                case m.PLAINTEXT:
                  this.tokenizer.state = eq.PLAINTEXT;
              }
          }
          _setDocumentType(e) {
            let t = e.name || "",
              n = e.publicId || "",
              r = e.systemId || "";
            if (
              (this.treeAdapter.setDocumentType(this.document, t, n, r),
              e.location)
            ) {
              let t = this.treeAdapter
                .getChildNodes(this.document)
                .find((e) => this.treeAdapter.isDocumentTypeNode(e));
              t && this.treeAdapter.setNodeSourceCodeLocation(t, e.location);
            }
          }
          _attachElementToTree(e, t) {
            if (this.options.sourceCodeLocationInfo) {
              let n = t && { ...t, startTag: t };
              this.treeAdapter.setNodeSourceCodeLocation(e, n);
            }
            if (this._shouldFosterParentOnInsertion())
              this._fosterParentElement(e);
            else {
              let t = this.openElements.currentTmplContentOrNode;
              this.treeAdapter.appendChild(null != t ? t : this.document, e);
            }
          }
          _appendElement(e, t) {
            let n = this.treeAdapter.createElement(e.tagName, t, e.attrs);
            this._attachElementToTree(n, e.location);
          }
          _insertElement(e, t) {
            let n = this.treeAdapter.createElement(e.tagName, t, e.attrs);
            this._attachElementToTree(n, e.location),
              this.openElements.push(n, e.tagID);
          }
          _insertFakeElement(e, t) {
            let n = this.treeAdapter.createElement(e, d.HTML, []);
            this._attachElementToTree(n, null), this.openElements.push(n, t);
          }
          _insertTemplate(e) {
            let t = this.treeAdapter.createElement(e.tagName, d.HTML, e.attrs),
              n = this.treeAdapter.createDocumentFragment();
            this.treeAdapter.setTemplateContent(t, n),
              this._attachElementToTree(t, e.location),
              this.openElements.push(t, e.tagID),
              this.options.sourceCodeLocationInfo &&
                this.treeAdapter.setNodeSourceCodeLocation(n, null);
          }
          _insertFakeRootElement() {
            let e = this.treeAdapter.createElement(f.HTML, d.HTML, []);
            this.options.sourceCodeLocationInfo &&
              this.treeAdapter.setNodeSourceCodeLocation(e, null),
              this.treeAdapter.appendChild(this.openElements.current, e),
              this.openElements.push(e, m.HTML);
          }
          _appendCommentNode(e, t) {
            let n = this.treeAdapter.createCommentNode(e.data);
            this.treeAdapter.appendChild(t, n),
              this.options.sourceCodeLocationInfo &&
                this.treeAdapter.setNodeSourceCodeLocation(n, e.location);
          }
          _insertCharacters(e) {
            let t, n;
            if (
              (this._shouldFosterParentOnInsertion()
                ? (({ parent: t, beforeElement: n } =
                    this._findFosterParentingLocation()),
                  n
                    ? this.treeAdapter.insertTextBefore(t, e.chars, n)
                    : this.treeAdapter.insertText(t, e.chars))
                : ((t = this.openElements.currentTmplContentOrNode),
                  this.treeAdapter.insertText(t, e.chars)),
              !e.location)
            )
              return;
            let r = this.treeAdapter.getChildNodes(t),
              i = n ? r.lastIndexOf(n) : r.length,
              s = r[i - 1];
            if (this.treeAdapter.getNodeSourceCodeLocation(s)) {
              let { endLine: t, endCol: n, endOffset: r } = e.location;
              this.treeAdapter.updateNodeSourceCodeLocation(s, {
                endLine: t,
                endCol: n,
                endOffset: r,
              });
            } else
              this.options.sourceCodeLocationInfo &&
                this.treeAdapter.setNodeSourceCodeLocation(s, e.location);
          }
          _adoptNodes(e, t) {
            for (
              let n = this.treeAdapter.getFirstChild(e);
              n;
              n = this.treeAdapter.getFirstChild(e)
            )
              this.treeAdapter.detachNode(n),
                this.treeAdapter.appendChild(t, n);
          }
          _setEndLocation(e, t) {
            if (this.treeAdapter.getNodeSourceCodeLocation(e) && t.location) {
              let n = t.location,
                r = this.treeAdapter.getTagName(e),
                i =
                  t.type === s.END_TAG && r === t.tagName
                    ? {
                        endTag: { ...n },
                        endLine: n.endLine,
                        endCol: n.endCol,
                        endOffset: n.endOffset,
                      }
                    : {
                        endLine: n.startLine,
                        endCol: n.startCol,
                        endOffset: n.startOffset,
                      };
              this.treeAdapter.updateNodeSourceCodeLocation(e, i);
            }
          }
          shouldProcessStartTagTokenInForeignContent(e) {
            let t, n;
            return (
              !!this.currentNotInHTML &&
              (0 === this.openElements.stackTop && this.fragmentContext
                ? ((t = this.fragmentContext), (n = this.fragmentContextID))
                : ({ current: t, currentTagId: n } = this.openElements),
              (e.tagID !== m.SVG ||
                this.treeAdapter.getTagName(t) !== f.ANNOTATION_XML ||
                this.treeAdapter.getNamespaceURI(t) !== d.MATHML) &&
                (this.tokenizer.inForeignNode ||
                  ((e.tagID === m.MGLYPH || e.tagID === m.MALIGNMARK) &&
                    void 0 !== n &&
                    !this._isIntegrationPoint(n, t, d.HTML))))
            );
          }
          _processToken(e) {
            switch (e.type) {
              case s.CHARACTER:
                this.onCharacter(e);
                break;
              case s.NULL_CHARACTER:
                this.onNullCharacter(e);
                break;
              case s.COMMENT:
                this.onComment(e);
                break;
              case s.DOCTYPE:
                this.onDoctype(e);
                break;
              case s.START_TAG:
                this._processStartTag(e);
                break;
              case s.END_TAG:
                this.onEndTag(e);
                break;
              case s.EOF:
                this.onEof(e);
                break;
              case s.WHITESPACE_CHARACTER:
                this.onWhitespaceCharacter(e);
            }
          }
          _isIntegrationPoint(e, t, n) {
            let r = this.treeAdapter.getNamespaceURI(t),
              i = this.treeAdapter.getAttrList(t);
            return (
              ((!n || n === d.HTML) &&
                (function (e, t, n) {
                  if (t === d.MATHML && e === m.ANNOTATION_XML) {
                    for (let e = 0; e < n.length; e++)
                      if (n[e].name === h.ENCODING) {
                        let t = n[e].value.toLowerCase();
                        return t === ta.TEXT_HTML || t === ta.APPLICATION_XML;
                      }
                  }
                  return (
                    t === d.SVG &&
                    (e === m.FOREIGN_OBJECT || e === m.DESC || e === m.TITLE)
                  );
                })(e, r, i)) ||
              ((!n || n === d.MATHML) &&
                r === d.MATHML &&
                (e === m.MI ||
                  e === m.MO ||
                  e === m.MN ||
                  e === m.MS ||
                  e === m.MTEXT))
            );
          }
          _reconstructActiveFormattingElements() {
            let e = this.activeFormattingElements.entries.length;
            if (e) {
              let t = this.activeFormattingElements.entries.findIndex(
                  (e) =>
                    e.type === y.Marker ||
                    this.openElements.contains(e.element),
                ),
                n = -1 === t ? e - 1 : t - 1;
              for (let e = n; e >= 0; e--) {
                let t = this.activeFormattingElements.entries[e];
                this._insertElement(
                  t.token,
                  this.treeAdapter.getNamespaceURI(t.element),
                ),
                  (t.element = this.openElements.current);
              }
            }
          }
          _closeTableCell() {
            this.openElements.generateImpliedEndTags(),
              this.openElements.popUntilTableCellPopped(),
              this.activeFormattingElements.clearToLastMarker(),
              (this.insertionMode = v.IN_ROW);
          }
          _closePElement() {
            this.openElements.generateImpliedEndTagsWithExclusion(m.P),
              this.openElements.popUntilTagNamePopped(m.P);
          }
          _resetInsertionMode() {
            for (let e = this.openElements.stackTop; e >= 0; e--)
              switch (
                0 === e && this.fragmentContext
                  ? this.fragmentContextID
                  : this.openElements.tagIDs[e]
              ) {
                case m.TR:
                  this.insertionMode = v.IN_ROW;
                  return;
                case m.TBODY:
                case m.THEAD:
                case m.TFOOT:
                  this.insertionMode = v.IN_TABLE_BODY;
                  return;
                case m.CAPTION:
                  this.insertionMode = v.IN_CAPTION;
                  return;
                case m.COLGROUP:
                  this.insertionMode = v.IN_COLUMN_GROUP;
                  return;
                case m.TABLE:
                  this.insertionMode = v.IN_TABLE;
                  return;
                case m.BODY:
                  this.insertionMode = v.IN_BODY;
                  return;
                case m.FRAMESET:
                  this.insertionMode = v.IN_FRAMESET;
                  return;
                case m.SELECT:
                  return void this._resetInsertionModeForSelect(e);
                case m.TEMPLATE:
                  this.insertionMode = this.tmplInsertionModeStack[0];
                  return;
                case m.HTML:
                  this.insertionMode = this.headElement
                    ? v.AFTER_HEAD
                    : v.BEFORE_HEAD;
                  return;
                case m.TD:
                case m.TH:
                  if (e > 0) {
                    this.insertionMode = v.IN_CELL;
                    return;
                  }
                  break;
                case m.HEAD:
                  if (e > 0) {
                    this.insertionMode = v.IN_HEAD;
                    return;
                  }
              }
            this.insertionMode = v.IN_BODY;
          }
          _resetInsertionModeForSelect(e) {
            if (e > 0)
              for (let t = e - 1; t > 0; t--) {
                let e = this.openElements.tagIDs[t];
                if (e === m.TEMPLATE) break;
                if (e === m.TABLE) {
                  this.insertionMode = v.IN_SELECT_IN_TABLE;
                  return;
                }
              }
            this.insertionMode = v.IN_SELECT;
          }
          _isElementCausesFosterParenting(e) {
            return tg.has(e);
          }
          _shouldFosterParentOnInsertion() {
            return (
              this.fosterParentingEnabled &&
              void 0 !== this.openElements.currentTagId &&
              this._isElementCausesFosterParenting(
                this.openElements.currentTagId,
              )
            );
          }
          _findFosterParentingLocation() {
            for (let e = this.openElements.stackTop; e >= 0; e--) {
              let t = this.openElements.items[e];
              switch (this.openElements.tagIDs[e]) {
                case m.TEMPLATE:
                  if (this.treeAdapter.getNamespaceURI(t) === d.HTML)
                    return {
                      parent: this.treeAdapter.getTemplateContent(t),
                      beforeElement: null,
                    };
                  break;
                case m.TABLE: {
                  let n = this.treeAdapter.getParentNode(t);
                  if (n) return { parent: n, beforeElement: t };
                  return {
                    parent: this.openElements.items[e - 1],
                    beforeElement: null,
                  };
                }
              }
            }
            return { parent: this.openElements.items[0], beforeElement: null };
          }
          _fosterParentElement(e) {
            let t = this._findFosterParentingLocation();
            t.beforeElement
              ? this.treeAdapter.insertBefore(t.parent, e, t.beforeElement)
              : this.treeAdapter.appendChild(t.parent, e);
          }
          _isSpecialElement(e, t) {
            return ez[this.treeAdapter.getNamespaceURI(e)].has(t);
          }
          onCharacter(e) {
            if (((this.skipNextNewLine = !1), this.tokenizer.inForeignNode)) {
              var t, n;
              return void ((t = this),
              (n = e),
              t._insertCharacters(n),
              (t.framesetOk = !1));
            }
            switch (this.insertionMode) {
              case v.INITIAL:
                tw(this, e);
                break;
              case v.BEFORE_HTML:
                t_(this, e);
                break;
              case v.BEFORE_HEAD:
                tO(this, e);
                break;
              case v.IN_HEAD:
                tE(this, e);
                break;
              case v.IN_HEAD_NO_SCRIPT:
                tC(this, e);
                break;
              case v.AFTER_HEAD:
                tA(this, e);
                break;
              case v.IN_BODY:
              case v.IN_CAPTION:
              case v.IN_CELL:
              case v.IN_TEMPLATE:
                tD(this, e);
                break;
              case v.TEXT:
              case v.IN_SELECT:
              case v.IN_SELECT_IN_TABLE:
                this._insertCharacters(e);
                break;
              case v.IN_TABLE:
              case v.IN_TABLE_BODY:
              case v.IN_ROW:
                t$(this, e);
                break;
              case v.IN_TABLE_TEXT:
                tV(this, e);
                break;
              case v.IN_COLUMN_GROUP:
                tY(this, e);
                break;
              case v.AFTER_BODY:
                t4(this, e);
                break;
              case v.AFTER_AFTER_BODY:
                t8(this, e);
            }
          }
          onNullCharacter(e) {
            if (((this.skipNextNewLine = !1), this.tokenizer.inForeignNode)) {
              var t, n;
              return void ((t = this),
              ((n = e).chars = "�"),
              t._insertCharacters(n));
            }
            switch (this.insertionMode) {
              case v.INITIAL:
                tw(this, e);
                break;
              case v.BEFORE_HTML:
                t_(this, e);
                break;
              case v.BEFORE_HEAD:
                tO(this, e);
                break;
              case v.IN_HEAD:
                tE(this, e);
                break;
              case v.IN_HEAD_NO_SCRIPT:
                tC(this, e);
                break;
              case v.AFTER_HEAD:
                tA(this, e);
                break;
              case v.TEXT:
                this._insertCharacters(e);
                break;
              case v.IN_TABLE:
              case v.IN_TABLE_BODY:
              case v.IN_ROW:
                t$(this, e);
                break;
              case v.IN_COLUMN_GROUP:
                tY(this, e);
                break;
              case v.AFTER_BODY:
                t4(this, e);
                break;
              case v.AFTER_AFTER_BODY:
                t8(this, e);
            }
          }
          onComment(e) {
            var t, n, r, i;
            if (((this.skipNextNewLine = !1), this.currentNotInHTML))
              return void tx(this, e);
            switch (this.insertionMode) {
              case v.INITIAL:
              case v.BEFORE_HTML:
              case v.BEFORE_HEAD:
              case v.IN_HEAD:
              case v.IN_HEAD_NO_SCRIPT:
              case v.AFTER_HEAD:
              case v.IN_BODY:
              case v.IN_TABLE:
              case v.IN_CAPTION:
              case v.IN_COLUMN_GROUP:
              case v.IN_TABLE_BODY:
              case v.IN_ROW:
              case v.IN_CELL:
              case v.IN_SELECT:
              case v.IN_SELECT_IN_TABLE:
              case v.IN_TEMPLATE:
              case v.IN_FRAMESET:
              case v.AFTER_FRAMESET:
                tx(this, e);
                break;
              case v.IN_TABLE_TEXT:
                tW(this, e);
                break;
              case v.AFTER_BODY:
                (t = this),
                  (n = e),
                  t._appendCommentNode(n, t.openElements.items[0]);
                break;
              case v.AFTER_AFTER_BODY:
              case v.AFTER_AFTER_FRAMESET:
                (r = this), (i = e), r._appendCommentNode(i, r.document);
            }
          }
          onDoctype(e) {
            switch (((this.skipNextNewLine = !1), this.insertionMode)) {
              case v.INITIAL:
                !(function (e, t) {
                  e._setDocumentType(t);
                  let n = t.forceQuirks
                    ? p.QUIRKS
                    : (function (e) {
                        if (e.name !== te) return p.QUIRKS;
                        let { systemId: t } = e;
                        if (
                          t &&
                          "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd" ===
                            t.toLowerCase()
                        )
                          return p.QUIRKS;
                        let { publicId: n } = e;
                        if (null !== n) {
                          if (((n = n.toLowerCase()), tr.has(n)))
                            return p.QUIRKS;
                          let e = null === t ? tn : tt;
                          if (to(n, e)) return p.QUIRKS;
                          if (to(n, (e = null === t ? ti : ts)))
                            return p.LIMITED_QUIRKS;
                        }
                        return p.NO_QUIRKS;
                      })(t);
                  (t.name !== te ||
                    null !== t.publicId ||
                    (null !== t.systemId &&
                      "about:legacy-compat" !== t.systemId)) &&
                    e._err(t, i.nonConformingDoctype),
                    e.treeAdapter.setDocumentMode(e.document, n),
                    (e.insertionMode = v.BEFORE_HTML);
                })(this, e);
                break;
              case v.BEFORE_HEAD:
              case v.IN_HEAD:
              case v.IN_HEAD_NO_SCRIPT:
              case v.AFTER_HEAD:
                this._err(e, i.misplacedDoctype);
                break;
              case v.IN_TABLE_TEXT:
                tW(this, e);
            }
          }
          onStartTag(e) {
            (this.skipNextNewLine = !1),
              (this.currentToken = e),
              this._processStartTag(e),
              e.selfClosing &&
                !e.ackSelfClosing &&
                this._err(e, i.nonVoidHtmlElementStartTagWithTrailingSolidus);
          }
          _processStartTag(e) {
            this.shouldProcessStartTagTokenInForeignContent(e)
              ? (function (e, t) {
                  if (
                    (function (e) {
                      let t = e.tagID;
                      return (
                        (t === m.FONT &&
                          e.attrs.some(
                            ({ name: e }) =>
                              e === h.COLOR || e === h.SIZE || e === h.FACE,
                          )) ||
                        td.has(t)
                      );
                    })(t)
                  )
                    t6(e), e._startTagOutsideForeignContent(t);
                  else {
                    let n = e._getAdjustedCurrentElement(),
                      r = e.treeAdapter.getNamespaceURI(n);
                    if (r === d.MATHML) th(t);
                    else if (r === d.SVG) {
                      let e = tu.get(t.tagName);
                      null != e && ((t.tagName = e), (t.tagID = eF(t.tagName))),
                        tp(t);
                    }
                    tf(t),
                      t.selfClosing
                        ? e._appendElement(t, r)
                        : e._insertElement(t, r),
                      (t.ackSelfClosing = !0);
                  }
                })(this, e)
              : this._startTagOutsideForeignContent(e);
          }
          _startTagOutsideForeignContent(e) {
            switch (this.insertionMode) {
              case v.INITIAL:
                tw(this, e);
                break;
              case v.BEFORE_HTML:
                (t = this),
                  (n = e).tagID === m.HTML
                    ? (t._insertElement(n, d.HTML),
                      (t.insertionMode = v.BEFORE_HEAD))
                    : t_(t, n);
                break;
              case v.BEFORE_HEAD:
                var t,
                  n,
                  r,
                  s,
                  o,
                  a,
                  l = this,
                  c = e;
                switch (c.tagID) {
                  case m.HTML:
                    tj(l, c);
                    break;
                  case m.HEAD:
                    l._insertElement(c, d.HTML),
                      (l.headElement = l.openElements.current),
                      (l.insertionMode = v.IN_HEAD);
                    break;
                  default:
                    tO(l, c);
                }
                break;
              case v.IN_HEAD:
                tT(this, e);
                break;
              case v.IN_HEAD_NO_SCRIPT:
                var u = this,
                  h = e;
                switch (h.tagID) {
                  case m.HTML:
                    tj(u, h);
                    break;
                  case m.BASEFONT:
                  case m.BGSOUND:
                  case m.HEAD:
                  case m.LINK:
                  case m.META:
                  case m.NOFRAMES:
                  case m.STYLE:
                    tT(u, h);
                    break;
                  case m.NOSCRIPT:
                    u._err(h, i.nestedNoscriptInHead);
                    break;
                  default:
                    tC(u, h);
                }
                break;
              case v.AFTER_HEAD:
                var p = this,
                  f = e;
                switch (f.tagID) {
                  case m.HTML:
                    tj(p, f);
                    break;
                  case m.BODY:
                    p._insertElement(f, d.HTML),
                      (p.framesetOk = !1),
                      (p.insertionMode = v.IN_BODY);
                    break;
                  case m.FRAMESET:
                    p._insertElement(f, d.HTML),
                      (p.insertionMode = v.IN_FRAMESET);
                    break;
                  case m.BASE:
                  case m.BASEFONT:
                  case m.BGSOUND:
                  case m.LINK:
                  case m.META:
                  case m.NOFRAMES:
                  case m.SCRIPT:
                  case m.STYLE:
                  case m.TEMPLATE:
                  case m.TITLE:
                    p._err(f, i.abandonedHeadElementChild),
                      p.openElements.push(p.headElement, m.HEAD),
                      tT(p, f),
                      p.openElements.remove(p.headElement);
                    break;
                  case m.HEAD:
                    p._err(f, i.misplacedStartTagForHeadElement);
                    break;
                  default:
                    tA(p, f);
                }
                break;
              case v.IN_BODY:
                tj(this, e);
                break;
              case v.IN_TABLE:
                tq(this, e);
                break;
              case v.IN_TABLE_TEXT:
                tW(this, e);
                break;
              case v.IN_CAPTION:
                var g = this,
                  y = e;
                let b = y.tagID;
                tZ.has(b)
                  ? g.openElements.hasInTableScope(m.CAPTION) &&
                    (g.openElements.generateImpliedEndTags(),
                    g.openElements.popUntilTagNamePopped(m.CAPTION),
                    g.activeFormattingElements.clearToLastMarker(),
                    (g.insertionMode = v.IN_TABLE),
                    tq(g, y))
                  : tj(g, y);
                break;
              case v.IN_COLUMN_GROUP:
                tG(this, e);
                break;
              case v.IN_TABLE_BODY:
                tK(this, e);
                break;
              case v.IN_ROW:
                tJ(this, e);
                break;
              case v.IN_CELL:
                var x = this,
                  k = e;
                let w = k.tagID;
                tZ.has(w)
                  ? (x.openElements.hasInTableScope(m.TD) ||
                      x.openElements.hasInTableScope(m.TH)) &&
                    (x._closeTableCell(), tJ(x, k))
                  : tj(x, k);
                break;
              case v.IN_SELECT:
                t1(this, e);
                break;
              case v.IN_SELECT_IN_TABLE:
                var _ = this,
                  O = e;
                let T = O.tagID;
                T === m.CAPTION ||
                T === m.TABLE ||
                T === m.TBODY ||
                T === m.TFOOT ||
                T === m.THEAD ||
                T === m.TR ||
                T === m.TD ||
                T === m.TH
                  ? (_.openElements.popUntilTagNamePopped(m.SELECT),
                    _._resetInsertionMode(),
                    _._processStartTag(O))
                  : t1(_, O);
                break;
              case v.IN_TEMPLATE:
                var S = this,
                  E = e;
                switch (E.tagID) {
                  case m.BASE:
                  case m.BASEFONT:
                  case m.BGSOUND:
                  case m.LINK:
                  case m.META:
                  case m.NOFRAMES:
                  case m.SCRIPT:
                  case m.STYLE:
                  case m.TEMPLATE:
                  case m.TITLE:
                    tT(S, E);
                    break;
                  case m.CAPTION:
                  case m.COLGROUP:
                  case m.TBODY:
                  case m.TFOOT:
                  case m.THEAD:
                    (S.tmplInsertionModeStack[0] = v.IN_TABLE),
                      (S.insertionMode = v.IN_TABLE),
                      tq(S, E);
                    break;
                  case m.COL:
                    (S.tmplInsertionModeStack[0] = v.IN_COLUMN_GROUP),
                      (S.insertionMode = v.IN_COLUMN_GROUP),
                      tG(S, E);
                    break;
                  case m.TR:
                    (S.tmplInsertionModeStack[0] = v.IN_TABLE_BODY),
                      (S.insertionMode = v.IN_TABLE_BODY),
                      tK(S, E);
                    break;
                  case m.TD:
                  case m.TH:
                    (S.tmplInsertionModeStack[0] = v.IN_ROW),
                      (S.insertionMode = v.IN_ROW),
                      tJ(S, E);
                    break;
                  default:
                    (S.tmplInsertionModeStack[0] = v.IN_BODY),
                      (S.insertionMode = v.IN_BODY),
                      tj(S, E);
                }
                break;
              case v.AFTER_BODY:
                (r = this), (s = e).tagID === m.HTML ? tj(r, s) : t4(r, s);
                break;
              case v.IN_FRAMESET:
                var C = this,
                  A = e;
                switch (A.tagID) {
                  case m.HTML:
                    tj(C, A);
                    break;
                  case m.FRAMESET:
                    C._insertElement(A, d.HTML);
                    break;
                  case m.FRAME:
                    C._appendElement(A, d.HTML), (A.ackSelfClosing = !0);
                    break;
                  case m.NOFRAMES:
                    tT(C, A);
                }
                break;
              case v.AFTER_FRAMESET:
                var N = this,
                  I = e;
                switch (I.tagID) {
                  case m.HTML:
                    tj(N, I);
                    break;
                  case m.NOFRAMES:
                    tT(N, I);
                }
                break;
              case v.AFTER_AFTER_BODY:
                (o = this), (a = e).tagID === m.HTML ? tj(o, a) : t8(o, a);
                break;
              case v.AFTER_AFTER_FRAMESET:
                var D = this,
                  P = e;
                switch (P.tagID) {
                  case m.HTML:
                    tj(D, P);
                    break;
                  case m.NOFRAMES:
                    tT(D, P);
                }
            }
          }
          onEndTag(e) {
            (this.skipNextNewLine = !1),
              (this.currentToken = e),
              this.currentNotInHTML
                ? (function (e, t) {
                    if (t.tagID === m.P || t.tagID === m.BR) {
                      t6(e), e._endTagOutsideForeignContent(t);
                      return;
                    }
                    for (let n = e.openElements.stackTop; n > 0; n--) {
                      let r = e.openElements.items[n];
                      if (e.treeAdapter.getNamespaceURI(r) === d.HTML) {
                        e._endTagOutsideForeignContent(t);
                        break;
                      }
                      let i = e.treeAdapter.getTagName(r);
                      if (i.toLowerCase() === t.tagName) {
                        (t.tagName = i), e.openElements.shortenToLength(n);
                        break;
                      }
                    }
                  })(this, e)
                : this._endTagOutsideForeignContent(e);
          }
          _endTagOutsideForeignContent(e) {
            switch (this.insertionMode) {
              case v.INITIAL:
                tw(this, e);
                break;
              case v.BEFORE_HTML:
                var t,
                  n,
                  r,
                  s,
                  o,
                  a,
                  l = this,
                  c = e;
                let u = c.tagID;
                (u === m.HTML || u === m.HEAD || u === m.BODY || u === m.BR) &&
                  t_(l, c);
                break;
              case v.BEFORE_HEAD:
                var d = this,
                  h = e;
                let p = h.tagID;
                p === m.HEAD || p === m.BODY || p === m.HTML || p === m.BR
                  ? tO(d, h)
                  : d._err(h, i.endTagWithoutMatchingOpenElement);
                break;
              case v.IN_HEAD:
                var f = this,
                  g = e;
                switch (g.tagID) {
                  case m.HEAD:
                    f.openElements.pop(), (f.insertionMode = v.AFTER_HEAD);
                    break;
                  case m.BODY:
                  case m.BR:
                  case m.HTML:
                    tE(f, g);
                    break;
                  case m.TEMPLATE:
                    tS(f, g);
                    break;
                  default:
                    f._err(g, i.endTagWithoutMatchingOpenElement);
                }
                break;
              case v.IN_HEAD_NO_SCRIPT:
                var y = this,
                  b = e;
                switch (b.tagID) {
                  case m.NOSCRIPT:
                    y.openElements.pop(), (y.insertionMode = v.IN_HEAD);
                    break;
                  case m.BR:
                    tC(y, b);
                    break;
                  default:
                    y._err(b, i.endTagWithoutMatchingOpenElement);
                }
                break;
              case v.AFTER_HEAD:
                var x = this,
                  k = e;
                switch (k.tagID) {
                  case m.BODY:
                  case m.HTML:
                  case m.BR:
                    tA(x, k);
                    break;
                  case m.TEMPLATE:
                    tS(x, k);
                    break;
                  default:
                    x._err(k, i.endTagWithoutMatchingOpenElement);
                }
                break;
              case v.IN_BODY:
                tB(this, e);
                break;
              case v.TEXT:
                (t = this),
                  e.tagID === m.SCRIPT &&
                    (null == (n = t.scriptHandler) ||
                      n.call(t, t.openElements.current)),
                  t.openElements.pop(),
                  (t.insertionMode = t.originalInsertionMode);
                break;
              case v.IN_TABLE:
                tU(this, e);
                break;
              case v.IN_TABLE_TEXT:
                tW(this, e);
                break;
              case v.IN_CAPTION:
                var w = this,
                  _ = e;
                let O = _.tagID;
                switch (O) {
                  case m.CAPTION:
                  case m.TABLE:
                    w.openElements.hasInTableScope(m.CAPTION) &&
                      (w.openElements.generateImpliedEndTags(),
                      w.openElements.popUntilTagNamePopped(m.CAPTION),
                      w.activeFormattingElements.clearToLastMarker(),
                      (w.insertionMode = v.IN_TABLE),
                      O === m.TABLE && tU(w, _));
                    break;
                  case m.BODY:
                  case m.COL:
                  case m.COLGROUP:
                  case m.HTML:
                  case m.TBODY:
                  case m.TD:
                  case m.TFOOT:
                  case m.TH:
                  case m.THEAD:
                  case m.TR:
                    break;
                  default:
                    tB(w, _);
                }
                break;
              case v.IN_COLUMN_GROUP:
                var T = this,
                  S = e;
                switch (S.tagID) {
                  case m.COLGROUP:
                    T.openElements.currentTagId === m.COLGROUP &&
                      (T.openElements.pop(), (T.insertionMode = v.IN_TABLE));
                    break;
                  case m.TEMPLATE:
                    tS(T, S);
                    break;
                  case m.COL:
                    break;
                  default:
                    tY(T, S);
                }
                break;
              case v.IN_TABLE_BODY:
                tX(this, e);
                break;
              case v.IN_ROW:
                t0(this, e);
                break;
              case v.IN_CELL:
                var E = this,
                  C = e;
                let A = C.tagID;
                switch (A) {
                  case m.TD:
                  case m.TH:
                    E.openElements.hasInTableScope(A) &&
                      (E.openElements.generateImpliedEndTags(),
                      E.openElements.popUntilTagNamePopped(A),
                      E.activeFormattingElements.clearToLastMarker(),
                      (E.insertionMode = v.IN_ROW));
                    break;
                  case m.TABLE:
                  case m.TBODY:
                  case m.TFOOT:
                  case m.THEAD:
                  case m.TR:
                    E.openElements.hasInTableScope(A) &&
                      (E._closeTableCell(), t0(E, C));
                    break;
                  case m.BODY:
                  case m.CAPTION:
                  case m.COL:
                  case m.COLGROUP:
                  case m.HTML:
                    break;
                  default:
                    tB(E, C);
                }
                break;
              case v.IN_SELECT:
                t2(this, e);
                break;
              case v.IN_SELECT_IN_TABLE:
                var N = this,
                  I = e;
                let D = I.tagID;
                D === m.CAPTION ||
                D === m.TABLE ||
                D === m.TBODY ||
                D === m.TFOOT ||
                D === m.THEAD ||
                D === m.TR ||
                D === m.TD ||
                D === m.TH
                  ? N.openElements.hasInTableScope(D) &&
                    (N.openElements.popUntilTagNamePopped(m.SELECT),
                    N._resetInsertionMode(),
                    N.onEndTag(I))
                  : t2(N, I);
                break;
              case v.IN_TEMPLATE:
                (r = this), (s = e).tagID === m.TEMPLATE && tS(r, s);
                break;
              case v.AFTER_BODY:
                t3(this, e);
                break;
              case v.IN_FRAMESET:
                (o = this),
                  e.tagID === m.FRAMESET &&
                    !o.openElements.isRootHtmlElementCurrent() &&
                    (o.openElements.pop(),
                    o.fragmentContext ||
                      o.openElements.currentTagId === m.FRAMESET ||
                      (o.insertionMode = v.AFTER_FRAMESET));
                break;
              case v.AFTER_FRAMESET:
                (a = this),
                  e.tagID === m.HTML &&
                    (a.insertionMode = v.AFTER_AFTER_FRAMESET);
                break;
              case v.AFTER_AFTER_BODY:
                t8(this, e);
            }
          }
          onEof(e) {
            switch (this.insertionMode) {
              case v.INITIAL:
                tw(this, e);
                break;
              case v.BEFORE_HTML:
                t_(this, e);
                break;
              case v.BEFORE_HEAD:
                tO(this, e);
                break;
              case v.IN_HEAD:
                tE(this, e);
                break;
              case v.IN_HEAD_NO_SCRIPT:
                tC(this, e);
                break;
              case v.AFTER_HEAD:
                tA(this, e);
                break;
              case v.IN_BODY:
              case v.IN_TABLE:
              case v.IN_CAPTION:
              case v.IN_COLUMN_GROUP:
              case v.IN_TABLE_BODY:
              case v.IN_ROW:
              case v.IN_CELL:
              case v.IN_SELECT:
              case v.IN_SELECT_IN_TABLE:
                tz(this, e);
                break;
              case v.TEXT:
                var t, n;
                (t = this),
                  (n = e),
                  t._err(n, i.eofInElementThatCanContainOnlyText),
                  t.openElements.pop(),
                  (t.insertionMode = t.originalInsertionMode),
                  t.onEof(n);
                break;
              case v.IN_TABLE_TEXT:
                tW(this, e);
                break;
              case v.IN_TEMPLATE:
                t5(this, e);
                break;
              case v.AFTER_BODY:
              case v.IN_FRAMESET:
              case v.AFTER_FRAMESET:
              case v.AFTER_AFTER_BODY:
              case v.AFTER_AFTER_FRAMESET:
                tk(this, e);
            }
          }
          onWhitespaceCharacter(e) {
            if (
              this.skipNextNewLine &&
              ((this.skipNextNewLine = !1),
              e.chars.charCodeAt(0) === r.LINE_FEED)
            ) {
              if (1 === e.chars.length) return;
              e.chars = e.chars.substr(1);
            }
            if (this.tokenizer.inForeignNode)
              return void this._insertCharacters(e);
            switch (this.insertionMode) {
              case v.IN_HEAD:
              case v.IN_HEAD_NO_SCRIPT:
              case v.AFTER_HEAD:
              case v.TEXT:
              case v.IN_COLUMN_GROUP:
              case v.IN_SELECT:
              case v.IN_SELECT_IN_TABLE:
              case v.IN_FRAMESET:
              case v.AFTER_FRAMESET:
                this._insertCharacters(e);
                break;
              case v.IN_BODY:
              case v.IN_CAPTION:
              case v.IN_CELL:
              case v.IN_TEMPLATE:
              case v.AFTER_BODY:
              case v.AFTER_AFTER_BODY:
              case v.AFTER_AFTER_FRAMESET:
                tI(this, e);
                break;
              case v.IN_TABLE:
              case v.IN_TABLE_BODY:
              case v.IN_ROW:
                t$(this, e);
                break;
              case v.IN_TABLE_TEXT:
                tQ(this, e);
            }
          }
        }
        function tb(e, t) {
          for (let n = 0; n < 8; n++) {
            let n = (function (e, t) {
              let n =
                e.activeFormattingElements.getElementEntryInScopeWithTagName(
                  t.tagName,
                );
              return (
                n
                  ? e.openElements.contains(n.element)
                    ? e.openElements.hasInScope(t.tagID) || (n = null)
                    : (e.activeFormattingElements.removeEntry(n), (n = null))
                  : tF(e, t),
                n
              );
            })(e, t);
            if (!n) break;
            let r = (function (e, t) {
              let n = null,
                r = e.openElements.stackTop;
              for (; r >= 0; r--) {
                let i = e.openElements.items[r];
                if (i === t.element) break;
                e._isSpecialElement(i, e.openElements.tagIDs[r]) && (n = i);
              }
              return (
                n ||
                  (e.openElements.shortenToLength(Math.max(r, 0)),
                  e.activeFormattingElements.removeEntry(t)),
                n
              );
            })(e, n);
            if (!r) break;
            e.activeFormattingElements.bookmark = n;
            let i = (function (e, t, n) {
                let r = t,
                  i = e.openElements.getCommonAncestor(t);
                for (let s = 0, o = i; o !== n; s++, o = i) {
                  i = e.openElements.getCommonAncestor(o);
                  let n = e.activeFormattingElements.getElementEntry(o),
                    a = n && s >= 3;
                  !n || a
                    ? (a && e.activeFormattingElements.removeEntry(n),
                      e.openElements.remove(o))
                    : ((o = (function (e, t) {
                        let n = e.treeAdapter.getNamespaceURI(t.element),
                          r = e.treeAdapter.createElement(
                            t.token.tagName,
                            n,
                            t.token.attrs,
                          );
                        return (
                          e.openElements.replace(t.element, r),
                          (t.element = r),
                          r
                        );
                      })(e, n)),
                      r === t && (e.activeFormattingElements.bookmark = n),
                      e.treeAdapter.detachNode(r),
                      e.treeAdapter.appendChild(o, r),
                      (r = o));
                }
                return r;
              })(e, r, n.element),
              s = e.openElements.getCommonAncestor(n.element);
            e.treeAdapter.detachNode(i),
              s &&
                (function (e, t, n) {
                  let r = eF(e.treeAdapter.getTagName(t));
                  if (e._isElementCausesFosterParenting(r))
                    e._fosterParentElement(n);
                  else {
                    let i = e.treeAdapter.getNamespaceURI(t);
                    r === m.TEMPLATE &&
                      i === d.HTML &&
                      (t = e.treeAdapter.getTemplateContent(t)),
                      e.treeAdapter.appendChild(t, n);
                  }
                })(e, s, i);
            let o = e.treeAdapter.getNamespaceURI(n.element),
              { token: a } = n,
              l = e.treeAdapter.createElement(a.tagName, o, a.attrs);
            e._adoptNodes(r, l),
              e.treeAdapter.appendChild(r, l),
              e.activeFormattingElements.insertElementAfterBookmark(l, a),
              e.activeFormattingElements.removeEntry(n),
              e.openElements.remove(n.element),
              e.openElements.insertAfter(r, l, a.tagID);
          }
        }
        function tx(e, t) {
          e._appendCommentNode(t, e.openElements.currentTmplContentOrNode);
        }
        function tk(e, t) {
          if (((e.stopped = !0), t.location)) {
            let n = 2 * !e.fragmentContext;
            for (let r = e.openElements.stackTop; r >= n; r--)
              e._setEndLocation(e.openElements.items[r], t);
            if (!e.fragmentContext && e.openElements.stackTop >= 0) {
              let n = e.openElements.items[0],
                r = e.treeAdapter.getNodeSourceCodeLocation(n);
              if (
                r &&
                !r.endTag &&
                (e._setEndLocation(n, t), e.openElements.stackTop >= 1)
              ) {
                let n = e.openElements.items[1],
                  r = e.treeAdapter.getNodeSourceCodeLocation(n);
                r && !r.endTag && e._setEndLocation(n, t);
              }
            }
          }
        }
        function tw(e, t) {
          e._err(t, i.missingDoctype, !0),
            e.treeAdapter.setDocumentMode(e.document, p.QUIRKS),
            (e.insertionMode = v.BEFORE_HTML),
            e._processToken(t);
        }
        function t_(e, t) {
          e._insertFakeRootElement(),
            (e.insertionMode = v.BEFORE_HEAD),
            e._processToken(t);
        }
        function tO(e, t) {
          e._insertFakeElement(f.HEAD, m.HEAD),
            (e.headElement = e.openElements.current),
            (e.insertionMode = v.IN_HEAD),
            e._processToken(t);
        }
        function tT(e, t) {
          switch (t.tagID) {
            case m.HTML:
              tj(e, t);
              break;
            case m.BASE:
            case m.BASEFONT:
            case m.BGSOUND:
            case m.LINK:
            case m.META:
              e._appendElement(t, d.HTML), (t.ackSelfClosing = !0);
              break;
            case m.TITLE:
              e._switchToTextParsing(t, eq.RCDATA);
              break;
            case m.NOSCRIPT:
              e.options.scriptingEnabled
                ? e._switchToTextParsing(t, eq.RAWTEXT)
                : (e._insertElement(t, d.HTML),
                  (e.insertionMode = v.IN_HEAD_NO_SCRIPT));
              break;
            case m.NOFRAMES:
            case m.STYLE:
              e._switchToTextParsing(t, eq.RAWTEXT);
              break;
            case m.SCRIPT:
              e._switchToTextParsing(t, eq.SCRIPT_DATA);
              break;
            case m.TEMPLATE:
              e._insertTemplate(t),
                e.activeFormattingElements.insertMarker(),
                (e.framesetOk = !1),
                (e.insertionMode = v.IN_TEMPLATE),
                e.tmplInsertionModeStack.unshift(v.IN_TEMPLATE);
              break;
            case m.HEAD:
              e._err(t, i.misplacedStartTagForHeadElement);
              break;
            default:
              tE(e, t);
          }
        }
        function tS(e, t) {
          e.openElements.tmplCount > 0
            ? (e.openElements.generateImpliedEndTagsThoroughly(),
              e.openElements.currentTagId !== m.TEMPLATE &&
                e._err(t, i.closingOfElementWithOpenChildElements),
              e.openElements.popUntilTagNamePopped(m.TEMPLATE),
              e.activeFormattingElements.clearToLastMarker(),
              e.tmplInsertionModeStack.shift(),
              e._resetInsertionMode())
            : e._err(t, i.endTagWithoutMatchingOpenElement);
        }
        function tE(e, t) {
          e.openElements.pop(),
            (e.insertionMode = v.AFTER_HEAD),
            e._processToken(t);
        }
        function tC(e, t) {
          let n =
            t.type === s.EOF
              ? i.openElementsLeftAfterEof
              : i.disallowedContentInNoscriptInHead;
          e._err(t, n),
            e.openElements.pop(),
            (e.insertionMode = v.IN_HEAD),
            e._processToken(t);
        }
        function tA(e, t) {
          e._insertFakeElement(f.BODY, m.BODY),
            (e.insertionMode = v.IN_BODY),
            tN(e, t);
        }
        function tN(e, t) {
          switch (t.type) {
            case s.CHARACTER:
              tD(e, t);
              break;
            case s.WHITESPACE_CHARACTER:
              tI(e, t);
              break;
            case s.COMMENT:
              tx(e, t);
              break;
            case s.START_TAG:
              tj(e, t);
              break;
            case s.END_TAG:
              tB(e, t);
              break;
            case s.EOF:
              tz(e, t);
          }
        }
        function tI(e, t) {
          e._reconstructActiveFormattingElements(), e._insertCharacters(t);
        }
        function tD(e, t) {
          e._reconstructActiveFormattingElements(),
            e._insertCharacters(t),
            (e.framesetOk = !1);
        }
        function tP(e, t) {
          e._reconstructActiveFormattingElements(),
            e._appendElement(t, d.HTML),
            (e.framesetOk = !1),
            (t.ackSelfClosing = !0);
        }
        function tR(e) {
          let t = eD(e, h.TYPE);
          return null != t && "hidden" === t.toLowerCase();
        }
        function tM(e, t) {
          e._switchToTextParsing(t, eq.RAWTEXT);
        }
        function tL(e, t) {
          e._reconstructActiveFormattingElements(), e._insertElement(t, d.HTML);
        }
        function tj(e, t) {
          switch (t.tagID) {
            case m.I:
            case m.S:
            case m.B:
            case m.U:
            case m.EM:
            case m.TT:
            case m.BIG:
            case m.CODE:
            case m.FONT:
            case m.SMALL:
            case m.STRIKE:
            case m.STRONG:
              e._reconstructActiveFormattingElements(),
                e._insertElement(t, d.HTML),
                e.activeFormattingElements.pushElement(
                  e.openElements.current,
                  t,
                );
              break;
            case m.A:
              let n =
                e.activeFormattingElements.getElementEntryInScopeWithTagName(
                  f.A,
                );
              n &&
                (tb(e, t),
                e.openElements.remove(n.element),
                e.activeFormattingElements.removeEntry(n)),
                e._reconstructActiveFormattingElements(),
                e._insertElement(t, d.HTML),
                e.activeFormattingElements.pushElement(
                  e.openElements.current,
                  t,
                );
              break;
            case m.H1:
            case m.H2:
            case m.H3:
            case m.H4:
            case m.H5:
            case m.H6:
              e.openElements.hasInButtonScope(m.P) && e._closePElement(),
                void 0 !== e.openElements.currentTagId &&
                  e$.has(e.openElements.currentTagId) &&
                  e.openElements.pop(),
                e._insertElement(t, d.HTML);
              break;
            case m.P:
            case m.DL:
            case m.OL:
            case m.UL:
            case m.DIV:
            case m.DIR:
            case m.NAV:
            case m.MAIN:
            case m.MENU:
            case m.ASIDE:
            case m.CENTER:
            case m.FIGURE:
            case m.FOOTER:
            case m.HEADER:
            case m.HGROUP:
            case m.DIALOG:
            case m.DETAILS:
            case m.ADDRESS:
            case m.ARTICLE:
            case m.SEARCH:
            case m.SECTION:
            case m.SUMMARY:
            case m.FIELDSET:
            case m.BLOCKQUOTE:
            case m.FIGCAPTION:
              e.openElements.hasInButtonScope(m.P) && e._closePElement(),
                e._insertElement(t, d.HTML);
              break;
            case m.LI:
            case m.DD:
            case m.DT:
              e.framesetOk = !1;
              let r = t.tagID;
              for (let t = e.openElements.stackTop; t >= 0; t--) {
                let n = e.openElements.tagIDs[t];
                if (
                  (r === m.LI && n === m.LI) ||
                  ((r === m.DD || r === m.DT) && (n === m.DD || n === m.DT))
                ) {
                  e.openElements.generateImpliedEndTagsWithExclusion(n),
                    e.openElements.popUntilTagNamePopped(n);
                  break;
                }
                if (
                  n !== m.ADDRESS &&
                  n !== m.DIV &&
                  n !== m.P &&
                  e._isSpecialElement(e.openElements.items[t], n)
                )
                  break;
              }
              e.openElements.hasInButtonScope(m.P) && e._closePElement(),
                e._insertElement(t, d.HTML);
              break;
            case m.BR:
            case m.IMG:
            case m.WBR:
            case m.AREA:
            case m.EMBED:
            case m.KEYGEN:
              tP(e, t);
              break;
            case m.HR:
              e.openElements.hasInButtonScope(m.P) && e._closePElement(),
                e._appendElement(t, d.HTML),
                (e.framesetOk = !1),
                (t.ackSelfClosing = !0);
              break;
            case m.RB:
            case m.RTC:
              e.openElements.hasInScope(m.RUBY) &&
                e.openElements.generateImpliedEndTags(),
                e._insertElement(t, d.HTML);
              break;
            case m.RT:
            case m.RP:
              e.openElements.hasInScope(m.RUBY) &&
                e.openElements.generateImpliedEndTagsWithExclusion(m.RTC),
                e._insertElement(t, d.HTML);
              break;
            case m.PRE:
            case m.LISTING:
              e.openElements.hasInButtonScope(m.P) && e._closePElement(),
                e._insertElement(t, d.HTML),
                (e.skipNextNewLine = !0),
                (e.framesetOk = !1);
              break;
            case m.XMP:
              e.openElements.hasInButtonScope(m.P) && e._closePElement(),
                e._reconstructActiveFormattingElements(),
                (e.framesetOk = !1),
                e._switchToTextParsing(t, eq.RAWTEXT);
              break;
            case m.SVG:
              e._reconstructActiveFormattingElements(),
                tp(t),
                tf(t),
                t.selfClosing
                  ? e._appendElement(t, d.SVG)
                  : e._insertElement(t, d.SVG),
                (t.ackSelfClosing = !0);
              break;
            case m.HTML:
              0 === e.openElements.tmplCount &&
                e.treeAdapter.adoptAttributes(e.openElements.items[0], t.attrs);
              break;
            case m.BASE:
            case m.LINK:
            case m.META:
            case m.STYLE:
            case m.TITLE:
            case m.SCRIPT:
            case m.BGSOUND:
            case m.BASEFONT:
            case m.TEMPLATE:
              tT(e, t);
              break;
            case m.BODY:
              let i = e.openElements.tryPeekProperlyNestedBodyElement();
              i &&
                0 === e.openElements.tmplCount &&
                ((e.framesetOk = !1),
                e.treeAdapter.adoptAttributes(i, t.attrs));
              break;
            case m.FORM:
              let s = e.openElements.tmplCount > 0;
              (!e.formElement || s) &&
                (e.openElements.hasInButtonScope(m.P) && e._closePElement(),
                e._insertElement(t, d.HTML),
                s || (e.formElement = e.openElements.current));
              break;
            case m.NOBR:
              e._reconstructActiveFormattingElements(),
                e.openElements.hasInScope(m.NOBR) &&
                  (tb(e, t), e._reconstructActiveFormattingElements()),
                e._insertElement(t, d.HTML),
                e.activeFormattingElements.pushElement(
                  e.openElements.current,
                  t,
                );
              break;
            case m.MATH:
              e._reconstructActiveFormattingElements(),
                th(t),
                tf(t),
                t.selfClosing
                  ? e._appendElement(t, d.MATHML)
                  : e._insertElement(t, d.MATHML),
                (t.ackSelfClosing = !0);
              break;
            case m.TABLE:
              e.treeAdapter.getDocumentMode(e.document) !== p.QUIRKS &&
                e.openElements.hasInButtonScope(m.P) &&
                e._closePElement(),
                e._insertElement(t, d.HTML),
                (e.framesetOk = !1),
                (e.insertionMode = v.IN_TABLE);
              break;
            case m.INPUT:
              e._reconstructActiveFormattingElements(),
                e._appendElement(t, d.HTML),
                tR(t) || (e.framesetOk = !1),
                (t.ackSelfClosing = !0);
              break;
            case m.PARAM:
            case m.TRACK:
            case m.SOURCE:
              e._appendElement(t, d.HTML), (t.ackSelfClosing = !0);
              break;
            case m.IMAGE:
              (t.tagName = f.IMG), (t.tagID = m.IMG), tP(e, t);
              break;
            case m.BUTTON:
              e.openElements.hasInScope(m.BUTTON) &&
                (e.openElements.generateImpliedEndTags(),
                e.openElements.popUntilTagNamePopped(m.BUTTON)),
                e._reconstructActiveFormattingElements(),
                e._insertElement(t, d.HTML),
                (e.framesetOk = !1);
              break;
            case m.APPLET:
            case m.OBJECT:
            case m.MARQUEE:
              e._reconstructActiveFormattingElements(),
                e._insertElement(t, d.HTML),
                e.activeFormattingElements.insertMarker(),
                (e.framesetOk = !1);
              break;
            case m.IFRAME:
              (e.framesetOk = !1), e._switchToTextParsing(t, eq.RAWTEXT);
              break;
            case m.SELECT:
              e._reconstructActiveFormattingElements(),
                e._insertElement(t, d.HTML),
                (e.framesetOk = !1),
                (e.insertionMode =
                  e.insertionMode === v.IN_TABLE ||
                  e.insertionMode === v.IN_CAPTION ||
                  e.insertionMode === v.IN_TABLE_BODY ||
                  e.insertionMode === v.IN_ROW ||
                  e.insertionMode === v.IN_CELL
                    ? v.IN_SELECT_IN_TABLE
                    : v.IN_SELECT);
              break;
            case m.OPTION:
            case m.OPTGROUP:
              e.openElements.currentTagId === m.OPTION && e.openElements.pop(),
                e._reconstructActiveFormattingElements(),
                e._insertElement(t, d.HTML);
              break;
            case m.NOEMBED:
            case m.NOFRAMES:
              tM(e, t);
              break;
            case m.FRAMESET:
              let o = e.openElements.tryPeekProperlyNestedBodyElement();
              e.framesetOk &&
                o &&
                (e.treeAdapter.detachNode(o),
                e.openElements.popAllUpToHtmlElement(),
                e._insertElement(t, d.HTML),
                (e.insertionMode = v.IN_FRAMESET));
              break;
            case m.TEXTAREA:
              e._insertElement(t, d.HTML),
                (e.skipNextNewLine = !0),
                (e.tokenizer.state = eq.RCDATA),
                (e.originalInsertionMode = e.insertionMode),
                (e.framesetOk = !1),
                (e.insertionMode = v.TEXT);
              break;
            case m.NOSCRIPT:
              e.options.scriptingEnabled ? tM(e, t) : tL(e, t);
              break;
            case m.PLAINTEXT:
              e.openElements.hasInButtonScope(m.P) && e._closePElement(),
                e._insertElement(t, d.HTML),
                (e.tokenizer.state = eq.PLAINTEXT);
              break;
            case m.COL:
            case m.TH:
            case m.TD:
            case m.TR:
            case m.HEAD:
            case m.FRAME:
            case m.TBODY:
            case m.TFOOT:
            case m.THEAD:
            case m.CAPTION:
            case m.COLGROUP:
              break;
            default:
              tL(e, t);
          }
        }
        function tF(e, t) {
          let n = t.tagName,
            r = t.tagID;
          for (let t = e.openElements.stackTop; t > 0; t--) {
            let i = e.openElements.items[t],
              s = e.openElements.tagIDs[t];
            if (
              r === s &&
              (r !== m.UNKNOWN || e.treeAdapter.getTagName(i) === n)
            ) {
              e.openElements.generateImpliedEndTagsWithExclusion(r),
                e.openElements.stackTop >= t &&
                  e.openElements.shortenToLength(t);
              break;
            }
            if (e._isSpecialElement(i, s)) break;
          }
        }
        function tB(e, t) {
          switch (t.tagID) {
            case m.A:
            case m.B:
            case m.I:
            case m.S:
            case m.U:
            case m.EM:
            case m.TT:
            case m.BIG:
            case m.CODE:
            case m.FONT:
            case m.NOBR:
            case m.SMALL:
            case m.STRIKE:
            case m.STRONG:
              tb(e, t);
              break;
            case m.P:
              e.openElements.hasInButtonScope(m.P) ||
                e._insertFakeElement(f.P, m.P),
                e._closePElement();
              break;
            case m.DL:
            case m.UL:
            case m.OL:
            case m.DIR:
            case m.DIV:
            case m.NAV:
            case m.PRE:
            case m.MAIN:
            case m.MENU:
            case m.ASIDE:
            case m.BUTTON:
            case m.CENTER:
            case m.FIGURE:
            case m.FOOTER:
            case m.HEADER:
            case m.HGROUP:
            case m.DIALOG:
            case m.ADDRESS:
            case m.ARTICLE:
            case m.DETAILS:
            case m.SEARCH:
            case m.SECTION:
            case m.SUMMARY:
            case m.LISTING:
            case m.FIELDSET:
            case m.BLOCKQUOTE:
            case m.FIGCAPTION:
              let n = t.tagID;
              e.openElements.hasInScope(n) &&
                (e.openElements.generateImpliedEndTags(),
                e.openElements.popUntilTagNamePopped(n));
              break;
            case m.LI:
              e.openElements.hasInListItemScope(m.LI) &&
                (e.openElements.generateImpliedEndTagsWithExclusion(m.LI),
                e.openElements.popUntilTagNamePopped(m.LI));
              break;
            case m.DD:
            case m.DT:
              let r = t.tagID;
              e.openElements.hasInScope(r) &&
                (e.openElements.generateImpliedEndTagsWithExclusion(r),
                e.openElements.popUntilTagNamePopped(r));
              break;
            case m.H1:
            case m.H2:
            case m.H3:
            case m.H4:
            case m.H5:
            case m.H6:
              e.openElements.hasNumberedHeaderInScope() &&
                (e.openElements.generateImpliedEndTags(),
                e.openElements.popUntilNumberedHeaderPopped());
              break;
            case m.BR:
              e._reconstructActiveFormattingElements(),
                e._insertFakeElement(f.BR, m.BR),
                e.openElements.pop(),
                (e.framesetOk = !1);
              break;
            case m.BODY:
              if (
                e.openElements.hasInScope(m.BODY) &&
                ((e.insertionMode = v.AFTER_BODY),
                e.options.sourceCodeLocationInfo)
              ) {
                let n = e.openElements.tryPeekProperlyNestedBodyElement();
                n && e._setEndLocation(n, t);
              }
              break;
            case m.HTML:
              e.openElements.hasInScope(m.BODY) &&
                ((e.insertionMode = v.AFTER_BODY), t3(e, t));
              break;
            case m.FORM:
              let i = e.openElements.tmplCount > 0,
                { formElement: s } = e;
              i || (e.formElement = null),
                (s || i) &&
                  e.openElements.hasInScope(m.FORM) &&
                  (e.openElements.generateImpliedEndTags(),
                  i
                    ? e.openElements.popUntilTagNamePopped(m.FORM)
                    : s && e.openElements.remove(s));
              break;
            case m.APPLET:
            case m.OBJECT:
            case m.MARQUEE:
              let o = t.tagID;
              e.openElements.hasInScope(o) &&
                (e.openElements.generateImpliedEndTags(),
                e.openElements.popUntilTagNamePopped(o),
                e.activeFormattingElements.clearToLastMarker());
              break;
            case m.TEMPLATE:
              tS(e, t);
              break;
            default:
              tF(e, t);
          }
        }
        function tz(e, t) {
          e.tmplInsertionModeStack.length > 0 ? t5(e, t) : tk(e, t);
        }
        function t$(e, t) {
          if (
            void 0 !== e.openElements.currentTagId &&
            tg.has(e.openElements.currentTagId)
          )
            switch (
              ((e.pendingCharacterTokens.length = 0),
              (e.hasNonWhitespacePendingCharacterToken = !1),
              (e.originalInsertionMode = e.insertionMode),
              (e.insertionMode = v.IN_TABLE_TEXT),
              t.type)
            ) {
              case s.CHARACTER:
                tV(e, t);
                break;
              case s.WHITESPACE_CHARACTER:
                tQ(e, t);
            }
          else tH(e, t);
        }
        function tq(e, t) {
          switch (t.tagID) {
            case m.TD:
            case m.TH:
            case m.TR:
              e.openElements.clearBackToTableContext(),
                e._insertFakeElement(f.TBODY, m.TBODY),
                (e.insertionMode = v.IN_TABLE_BODY),
                tK(e, t);
              break;
            case m.STYLE:
            case m.SCRIPT:
            case m.TEMPLATE:
              tT(e, t);
              break;
            case m.COL:
              e.openElements.clearBackToTableContext(),
                e._insertFakeElement(f.COLGROUP, m.COLGROUP),
                (e.insertionMode = v.IN_COLUMN_GROUP),
                tG(e, t);
              break;
            case m.FORM:
              e.formElement ||
                0 !== e.openElements.tmplCount ||
                (e._insertElement(t, d.HTML),
                (e.formElement = e.openElements.current),
                e.openElements.pop());
              break;
            case m.TABLE:
              e.openElements.hasInTableScope(m.TABLE) &&
                (e.openElements.popUntilTagNamePopped(m.TABLE),
                e._resetInsertionMode(),
                e._processStartTag(t));
              break;
            case m.TBODY:
            case m.TFOOT:
            case m.THEAD:
              e.openElements.clearBackToTableContext(),
                e._insertElement(t, d.HTML),
                (e.insertionMode = v.IN_TABLE_BODY);
              break;
            case m.INPUT:
              tR(t) ? e._appendElement(t, d.HTML) : tH(e, t),
                (t.ackSelfClosing = !0);
              break;
            case m.CAPTION:
              e.openElements.clearBackToTableContext(),
                e.activeFormattingElements.insertMarker(),
                e._insertElement(t, d.HTML),
                (e.insertionMode = v.IN_CAPTION);
              break;
            case m.COLGROUP:
              e.openElements.clearBackToTableContext(),
                e._insertElement(t, d.HTML),
                (e.insertionMode = v.IN_COLUMN_GROUP);
              break;
            default:
              tH(e, t);
          }
        }
        function tU(e, t) {
          switch (t.tagID) {
            case m.TABLE:
              e.openElements.hasInTableScope(m.TABLE) &&
                (e.openElements.popUntilTagNamePopped(m.TABLE),
                e._resetInsertionMode());
              break;
            case m.TEMPLATE:
              tS(e, t);
              break;
            case m.BODY:
            case m.CAPTION:
            case m.COL:
            case m.COLGROUP:
            case m.HTML:
            case m.TBODY:
            case m.TD:
            case m.TFOOT:
            case m.TH:
            case m.THEAD:
            case m.TR:
              break;
            default:
              tH(e, t);
          }
        }
        function tH(e, t) {
          let n = e.fosterParentingEnabled;
          (e.fosterParentingEnabled = !0),
            tN(e, t),
            (e.fosterParentingEnabled = n);
        }
        function tQ(e, t) {
          e.pendingCharacterTokens.push(t);
        }
        function tV(e, t) {
          e.pendingCharacterTokens.push(t),
            (e.hasNonWhitespacePendingCharacterToken = !0);
        }
        function tW(e, t) {
          let n = 0;
          if (e.hasNonWhitespacePendingCharacterToken)
            for (; n < e.pendingCharacterTokens.length; n++)
              tH(e, e.pendingCharacterTokens[n]);
          else
            for (; n < e.pendingCharacterTokens.length; n++)
              e._insertCharacters(e.pendingCharacterTokens[n]);
          (e.insertionMode = e.originalInsertionMode), e._processToken(t);
        }
        let tZ = new Set([
          m.CAPTION,
          m.COL,
          m.COLGROUP,
          m.TBODY,
          m.TD,
          m.TFOOT,
          m.TH,
          m.THEAD,
          m.TR,
        ]);
        function tG(e, t) {
          switch (t.tagID) {
            case m.HTML:
              tj(e, t);
              break;
            case m.COL:
              e._appendElement(t, d.HTML), (t.ackSelfClosing = !0);
              break;
            case m.TEMPLATE:
              tT(e, t);
              break;
            default:
              tY(e, t);
          }
        }
        function tY(e, t) {
          e.openElements.currentTagId === m.COLGROUP &&
            (e.openElements.pop(),
            (e.insertionMode = v.IN_TABLE),
            e._processToken(t));
        }
        function tK(e, t) {
          switch (t.tagID) {
            case m.TR:
              e.openElements.clearBackToTableBodyContext(),
                e._insertElement(t, d.HTML),
                (e.insertionMode = v.IN_ROW);
              break;
            case m.TH:
            case m.TD:
              e.openElements.clearBackToTableBodyContext(),
                e._insertFakeElement(f.TR, m.TR),
                (e.insertionMode = v.IN_ROW),
                tJ(e, t);
              break;
            case m.CAPTION:
            case m.COL:
            case m.COLGROUP:
            case m.TBODY:
            case m.TFOOT:
            case m.THEAD:
              e.openElements.hasTableBodyContextInTableScope() &&
                (e.openElements.clearBackToTableBodyContext(),
                e.openElements.pop(),
                (e.insertionMode = v.IN_TABLE),
                tq(e, t));
              break;
            default:
              tq(e, t);
          }
        }
        function tX(e, t) {
          let n = t.tagID;
          switch (t.tagID) {
            case m.TBODY:
            case m.TFOOT:
            case m.THEAD:
              e.openElements.hasInTableScope(n) &&
                (e.openElements.clearBackToTableBodyContext(),
                e.openElements.pop(),
                (e.insertionMode = v.IN_TABLE));
              break;
            case m.TABLE:
              e.openElements.hasTableBodyContextInTableScope() &&
                (e.openElements.clearBackToTableBodyContext(),
                e.openElements.pop(),
                (e.insertionMode = v.IN_TABLE),
                tU(e, t));
              break;
            case m.BODY:
            case m.CAPTION:
            case m.COL:
            case m.COLGROUP:
            case m.HTML:
            case m.TD:
            case m.TH:
            case m.TR:
              break;
            default:
              tU(e, t);
          }
        }
        function tJ(e, t) {
          switch (t.tagID) {
            case m.TH:
            case m.TD:
              e.openElements.clearBackToTableRowContext(),
                e._insertElement(t, d.HTML),
                (e.insertionMode = v.IN_CELL),
                e.activeFormattingElements.insertMarker();
              break;
            case m.CAPTION:
            case m.COL:
            case m.COLGROUP:
            case m.TBODY:
            case m.TFOOT:
            case m.THEAD:
            case m.TR:
              e.openElements.hasInTableScope(m.TR) &&
                (e.openElements.clearBackToTableRowContext(),
                e.openElements.pop(),
                (e.insertionMode = v.IN_TABLE_BODY),
                tK(e, t));
              break;
            default:
              tq(e, t);
          }
        }
        function t0(e, t) {
          switch (t.tagID) {
            case m.TR:
              e.openElements.hasInTableScope(m.TR) &&
                (e.openElements.clearBackToTableRowContext(),
                e.openElements.pop(),
                (e.insertionMode = v.IN_TABLE_BODY));
              break;
            case m.TABLE:
              e.openElements.hasInTableScope(m.TR) &&
                (e.openElements.clearBackToTableRowContext(),
                e.openElements.pop(),
                (e.insertionMode = v.IN_TABLE_BODY),
                tX(e, t));
              break;
            case m.TBODY:
            case m.TFOOT:
            case m.THEAD:
              (e.openElements.hasInTableScope(t.tagID) ||
                e.openElements.hasInTableScope(m.TR)) &&
                (e.openElements.clearBackToTableRowContext(),
                e.openElements.pop(),
                (e.insertionMode = v.IN_TABLE_BODY),
                tX(e, t));
              break;
            case m.BODY:
            case m.CAPTION:
            case m.COL:
            case m.COLGROUP:
            case m.HTML:
            case m.TD:
            case m.TH:
              break;
            default:
              tU(e, t);
          }
        }
        function t1(e, t) {
          switch (t.tagID) {
            case m.HTML:
              tj(e, t);
              break;
            case m.OPTION:
              e.openElements.currentTagId === m.OPTION && e.openElements.pop(),
                e._insertElement(t, d.HTML);
              break;
            case m.OPTGROUP:
              e.openElements.currentTagId === m.OPTION && e.openElements.pop(),
                e.openElements.currentTagId === m.OPTGROUP &&
                  e.openElements.pop(),
                e._insertElement(t, d.HTML);
              break;
            case m.HR:
              e.openElements.currentTagId === m.OPTION && e.openElements.pop(),
                e.openElements.currentTagId === m.OPTGROUP &&
                  e.openElements.pop(),
                e._appendElement(t, d.HTML),
                (t.ackSelfClosing = !0);
              break;
            case m.INPUT:
            case m.KEYGEN:
            case m.TEXTAREA:
            case m.SELECT:
              e.openElements.hasInSelectScope(m.SELECT) &&
                (e.openElements.popUntilTagNamePopped(m.SELECT),
                e._resetInsertionMode(),
                t.tagID !== m.SELECT && e._processStartTag(t));
              break;
            case m.SCRIPT:
            case m.TEMPLATE:
              tT(e, t);
          }
        }
        function t2(e, t) {
          switch (t.tagID) {
            case m.OPTGROUP:
              e.openElements.stackTop > 0 &&
                e.openElements.currentTagId === m.OPTION &&
                e.openElements.tagIDs[e.openElements.stackTop - 1] ===
                  m.OPTGROUP &&
                e.openElements.pop(),
                e.openElements.currentTagId === m.OPTGROUP &&
                  e.openElements.pop();
              break;
            case m.OPTION:
              e.openElements.currentTagId === m.OPTION && e.openElements.pop();
              break;
            case m.SELECT:
              e.openElements.hasInSelectScope(m.SELECT) &&
                (e.openElements.popUntilTagNamePopped(m.SELECT),
                e._resetInsertionMode());
              break;
            case m.TEMPLATE:
              tS(e, t);
          }
        }
        function t5(e, t) {
          e.openElements.tmplCount > 0
            ? (e.openElements.popUntilTagNamePopped(m.TEMPLATE),
              e.activeFormattingElements.clearToLastMarker(),
              e.tmplInsertionModeStack.shift(),
              e._resetInsertionMode(),
              e.onEof(t))
            : tk(e, t);
        }
        function t3(e, t) {
          var n;
          if (t.tagID === m.HTML) {
            if (
              (e.fragmentContext || (e.insertionMode = v.AFTER_AFTER_BODY),
              e.options.sourceCodeLocationInfo &&
                e.openElements.tagIDs[0] === m.HTML)
            ) {
              e._setEndLocation(e.openElements.items[0], t);
              let r = e.openElements.items[1];
              !r ||
                (null == (n = e.treeAdapter.getNodeSourceCodeLocation(r))
                  ? void 0
                  : n.endTag) ||
                e._setEndLocation(r, t);
            }
          } else t4(e, t);
        }
        function t4(e, t) {
          (e.insertionMode = v.IN_BODY), tN(e, t);
        }
        function t8(e, t) {
          (e.insertionMode = v.IN_BODY), tN(e, t);
        }
        function t6(e) {
          for (
            ;
            e.treeAdapter.getNamespaceURI(e.openElements.current) !== d.HTML &&
            void 0 !== e.openElements.currentTagId &&
            !e._isIntegrationPoint(
              e.openElements.currentTagId,
              e.openElements.current,
            );

          )
            e.openElements.pop();
        }
        null == String.prototype.codePointAt || ((e, t) => e.codePointAt(t));
        let t9 = new Set([
          f.AREA,
          f.BASE,
          f.BASEFONT,
          f.BGSOUND,
          f.BR,
          f.COL,
          f.EMBED,
          f.FRAME,
          f.HR,
          f.IMG,
          f.INPUT,
          f.KEYGEN,
          f.LINK,
          f.META,
          f.PARAM,
          f.SOURCE,
          f.TRACK,
          f.WBR,
        ]);
        var t7 = n(4684),
          ne = n(44794);
        let nt =
            /<(\/?)(iframe|noembed|noframes|plaintext|script|style|textarea|title|xmp)(?=[\t\n\f\r />])/gi,
          nn = new Set([
            "mdxFlowExpression",
            "mdxJsxFlowElement",
            "mdxJsxTextElement",
            "mdxTextExpression",
            "mdxjsEsm",
          ]),
          nr = { sourceCodeLocationInfo: !0, scriptingEnabled: !1 };
        function ni(e, t) {
          let n = (function (e) {
              let t = "root" === e.type ? e.children[0] : e;
              return !!(
                t &&
                ("doctype" === t.type ||
                  ("element" === t.type && "html" === t.tagName.toLowerCase()))
              );
            })(e),
            r = ex("type", {
              handlers: {
                root: no,
                element: na,
                text: nl,
                comment: nu,
                doctype: nc,
                raw: nd,
              },
              unknown: nh,
            }),
            i = {
              parser: n ? new tv(nr) : tv.getFragmentParser(void 0, nr),
              handle(e) {
                r(e, i);
              },
              stitches: !1,
              options: t || {},
            };
          r(e, i), np(i, (0, t7.PW)());
          let s = (function (e, t) {
            let n = t || {};
            return L(
              {
                file: n.file || void 0,
                location: !1,
                schema: "svg" === n.space ? w.JW : w.qy,
                verbose: n.verbose || !1,
              },
              e,
            );
          })(n ? i.parser.document : i.parser.getFragment(), {
            file: i.options.file,
          });
          return (i.stitches &&
            (0, ne.YR)(s, "comment", function (e, t, n) {
              if (e.value.stitch && n && void 0 !== t)
                return (n.children[t] = e.value.stitch), t;
            }),
          "root" === s.type &&
            1 === s.children.length &&
            s.children[0].type === e.type)
            ? s.children[0]
            : s;
        }
        function ns(e, t) {
          let n = -1;
          if (e) for (; ++n < e.length; ) t.handle(e[n]);
        }
        function no(e, t) {
          ns(e.children, t);
        }
        function na(e, t) {
          (function (e, t) {
            let n = e.tagName.toLowerCase();
            if (t.parser.tokenizer.state === eq.PLAINTEXT) return;
            np(t, (0, t7.PW)(e));
            let r = t.parser.openElements.current,
              i = "namespaceURI" in r ? r.namespaceURI : P.html;
            i === P.html && "svg" === n && (i = P.svg);
            let o = ew(
                { ...e, children: [] },
                "svg" === { space: i === P.svg ? "svg" : "html" }.space
                  ? ep
                  : eh,
              ),
              a = {
                type: s.START_TAG,
                tagName: n,
                tagID: eF(n),
                selfClosing: !1,
                ackSelfClosing: !1,
                attrs: "attrs" in o ? o.attrs : [],
                location: nm(e),
              };
            (t.parser.currentToken = a),
              t.parser._processToken(t.parser.currentToken),
              (t.parser.tokenizer.lastStartTagName = n);
          })(e, t),
            ns(e.children, t),
            (function (e, t) {
              let n = e.tagName.toLowerCase();
              if (
                (!t.parser.tokenizer.inForeignNode && eT.includes(n)) ||
                t.parser.tokenizer.state === eq.PLAINTEXT
              )
                return;
              np(t, (0, t7.Y)(e));
              let r = {
                type: s.END_TAG,
                tagName: n,
                tagID: eF(n),
                selfClosing: !1,
                ackSelfClosing: !1,
                attrs: [],
                location: nm(e),
              };
              (t.parser.currentToken = r),
                t.parser._processToken(t.parser.currentToken),
                n === t.parser.tokenizer.lastStartTagName &&
                  (t.parser.tokenizer.state === eq.RCDATA ||
                    t.parser.tokenizer.state === eq.RAWTEXT ||
                    t.parser.tokenizer.state === eq.SCRIPT_DATA) &&
                  (t.parser.tokenizer.state = eq.DATA);
            })(e, t);
        }
        function nl(e, t) {
          t.parser.tokenizer.state > 4 && (t.parser.tokenizer.state = 0);
          let n = { type: s.CHARACTER, chars: e.value, location: nm(e) };
          np(t, (0, t7.PW)(e)),
            (t.parser.currentToken = n),
            t.parser._processToken(t.parser.currentToken);
        }
        function nc(e, t) {
          let n = {
            type: s.DOCTYPE,
            name: "html",
            forceQuirks: !1,
            publicId: "",
            systemId: "",
            location: nm(e),
          };
          np(t, (0, t7.PW)(e)),
            (t.parser.currentToken = n),
            t.parser._processToken(t.parser.currentToken);
        }
        function nu(e, t) {
          let n = e.value,
            r = { type: s.COMMENT, data: n, location: nm(e) };
          np(t, (0, t7.PW)(e)),
            (t.parser.currentToken = r),
            t.parser._processToken(t.parser.currentToken);
        }
        function nd(e, t) {
          if (
            ((t.parser.tokenizer.preprocessor.html = ""),
            (t.parser.tokenizer.preprocessor.pos = -1),
            (t.parser.tokenizer.preprocessor.lastGapPos = -2),
            (t.parser.tokenizer.preprocessor.gapStack = []),
            (t.parser.tokenizer.preprocessor.skipNextNewLine = !1),
            (t.parser.tokenizer.preprocessor.lastChunkWritten = !1),
            (t.parser.tokenizer.preprocessor.endOfChunkHit = !1),
            (t.parser.tokenizer.preprocessor.isEol = !1),
            nf(t, (0, t7.PW)(e)),
            t.parser.tokenizer.write(
              t.options.tagfilter ? e.value.replace(nt, "&lt;$1$2") : e.value,
              !1,
            ),
            t.parser.tokenizer._runParsingLoop(),
            72 === t.parser.tokenizer.state || 78 === t.parser.tokenizer.state)
          ) {
            t.parser.tokenizer.preprocessor.lastChunkWritten = !0;
            let e = t.parser.tokenizer._consume();
            t.parser.tokenizer._callState(e);
          }
        }
        function nh(e, t) {
          if (t.options.passThrough && t.options.passThrough.includes(e.type)) {
            var n;
            t.stitches = !0;
            let r =
              "children" in (n = e)
                ? (0, x.Ay)({ ...n, children: [] })
                : (0, x.Ay)(n);
            "children" in e &&
              "children" in r &&
              (r.children = ni(
                { type: "root", children: e.children },
                t.options,
              ).children),
              nu({ type: "comment", value: { stitch: r } }, t);
          } else {
            let t = "";
            throw (
              (nn.has(e.type) &&
                (t =
                  ". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax"),
              Error("Cannot compile `" + e.type + "` node" + t))
            );
          }
        }
        function np(e, t) {
          nf(e, t);
          let n = e.parser.tokenizer.currentCharacterToken;
          n &&
            n.location &&
            ((n.location.endLine = e.parser.tokenizer.preprocessor.line),
            (n.location.endCol = e.parser.tokenizer.preprocessor.col + 1),
            (n.location.endOffset = e.parser.tokenizer.preprocessor.offset + 1),
            (e.parser.currentToken = n),
            e.parser._processToken(e.parser.currentToken)),
            (e.parser.tokenizer.paused = !1),
            (e.parser.tokenizer.inLoop = !1),
            (e.parser.tokenizer.active = !1),
            (e.parser.tokenizer.returnState = eq.DATA),
            (e.parser.tokenizer.charRefCode = -1),
            (e.parser.tokenizer.consumedAfterSnapshot = -1),
            (e.parser.tokenizer.currentLocation = null),
            (e.parser.tokenizer.currentCharacterToken = null),
            (e.parser.tokenizer.currentToken = null),
            (e.parser.tokenizer.currentAttr = { name: "", value: "" });
        }
        function nf(e, t) {
          if (t && void 0 !== t.offset) {
            let n = {
              startLine: t.line,
              startCol: t.column,
              startOffset: t.offset,
              endLine: -1,
              endCol: -1,
              endOffset: -1,
            };
            (e.parser.tokenizer.preprocessor.lineStartPos = -t.column + 1),
              (e.parser.tokenizer.preprocessor.droppedBufferSize = t.offset),
              (e.parser.tokenizer.preprocessor.line = t.line),
              (e.parser.tokenizer.currentLocation = n);
          }
        }
        function nm(e) {
          let t = (0, t7.PW)(e) || {
              line: void 0,
              column: void 0,
              offset: void 0,
            },
            n = (0, t7.Y)(e) || {
              line: void 0,
              column: void 0,
              offset: void 0,
            };
          return {
            startLine: t.line,
            startCol: t.column,
            startOffset: t.offset,
            endLine: n.line,
            endCol: n.column,
            endOffset: n.offset,
          };
        }
        function ng(e) {
          return function (t, n) {
            return ni(t, { ...e, file: n });
          };
        }
      },
      96708: (e) => {
        function t(e) {
          var t = Error("Cannot find module '" + e + "'");
          throw ((t.code = "MODULE_NOT_FOUND"), t);
        }
        (t.keys = () => []), (t.resolve = t), (t.id = 96708), (e.exports = t);
      },
      97237: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          !(function (e, t) {
            for (var n in t)
              Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
          })(t, {
            isRequestAPICallableInsideAfter: function () {
              return l;
            },
            throwForSearchParamsAccessInUseCache: function () {
              return a;
            },
            throwWithStaticGenerationBailoutError: function () {
              return s;
            },
            throwWithStaticGenerationBailoutErrorWithDynamicError: function () {
              return o;
            },
          });
        let r = n(78575),
          i = n(3295);
        function s(e, t) {
          throw Object.defineProperty(
            new r.StaticGenBailoutError(
              `Route ${e} couldn't be rendered statically because it used ${t}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`,
            ),
            "__NEXT_ERROR_CODE",
            { value: "E576", enumerable: !1, configurable: !0 },
          );
        }
        function o(e, t) {
          throw Object.defineProperty(
            new r.StaticGenBailoutError(
              `Route ${e} with \`dynamic = "error"\` couldn't be rendered statically because it used ${t}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`,
            ),
            "__NEXT_ERROR_CODE",
            { value: "E543", enumerable: !1, configurable: !0 },
          );
        }
        function a(e) {
          throw Object.defineProperty(
            Error(
              `Route ${e} used "searchParams" inside "use cache". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "searchParams" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`,
            ),
            "__NEXT_ERROR_CODE",
            { value: "E634", enumerable: !1, configurable: !0 },
          );
        }
        function l() {
          let e = i.afterTaskAsyncStorage.getStore();
          return (null == e ? void 0 : e.rootTaskSpawnPhase) === "action";
        }
      },
      97579: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { m: () => p });
            var i = n(99439),
              s = n(14391),
              o = n(85488),
              a = n(83333),
              l = e([o, a]);
            [o, a] = l.then ? (await l)() : l;
            let c = null,
              u = null,
              d = null,
              h = null;
            if (a.MC) {
              let e = (e) => ({
                id: `mock-${e}`,
                doGenerate: async () => ({ text: `mock response from ${e}` }),
              });
              (c = e("chat")),
                (u = e("reasoning")),
                (d = e("title")),
                (h = e("artifact"));
            }
            let p = a.MC
              ? (0, o.customProvider)({
                  languageModels: {
                    "chat-model-small": c,
                    "chat-model-large": c,
                    "chat-model-reasoning": u,
                    "title-model": d,
                    "artifact-model": h,
                  },
                })
              : (0, o.customProvider)({
                  languageModels: {
                    "chat-model-small": (0, s.N)("gpt-4o-mini"),
                    "chat-model-large": (0, s.N)("gpt-4o"),
                    "chat-model-reasoning": (0, o.wrapLanguageModel)({
                      model: (0, i.P)("accounts/fireworks/models/deepseek-r1"),
                      middleware: (0, o.extractReasoningMiddleware)({
                        tagName: "think",
                      }),
                    }),
                    "title-model": (0, s.N)("gpt-4-turbo"),
                    "artifact-model": (0, s.N)("gpt-4o-mini"),
                  },
                  imageModels: {
                    "small-model": s.N.image("dall-e-2"),
                    "large-model": s.N.image("dall-e-3"),
                  },
                });
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      97594: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { z: () => c });
            var i = n(61268),
              s = n(6130),
              o = n(84205),
              a = n(28909),
              l = e([a]);
            a = (l.then ? (await l)() : l)[0];
            let c = (0, o.memo)(
              function ({ chatId: e, append: t }) {
                return (0, i.jsx)("div", {
                  "data-testid": "suggested-actions",
                  className: "grid sm:grid-cols-2 gap-2 w-full",
                  children: [
                    {
                      title: "What are the advantages",
                      label: "of using Next.js?",
                      action: "What are the advantages of using Next.js?",
                    },
                    {
                      title: "Write code to",
                      label: "demonstrate djikstra's algorithm",
                      action: "Write code to demonstrate djikstra's algorithm",
                    },
                    {
                      title: "Help me write an essay",
                      label: "about silicon valley",
                      action: "Help me write an essay about silicon valley",
                    },
                    {
                      title: "What is the weather",
                      label: "in San Francisco?",
                      action: "What is the weather in San Francisco?",
                    },
                  ].map((n, r) =>
                    (0, i.jsx)(
                      s.P.div,
                      {
                        initial: { opacity: 0, y: 20 },
                        animate: { opacity: 1, y: 0 },
                        exit: { opacity: 0, y: 20 },
                        transition: { delay: 0.05 * r },
                        className: r > 1 ? "hidden sm:block" : "block",
                        children: (0, i.jsxs)(a.$, {
                          variant: "ghost",
                          onClick: async () => {
                            window.history.replaceState({}, "", `/chat/${e}`),
                              t({ role: "user", content: n.action });
                          },
                          className:
                            "text-left border rounded-xl px-4 py-3.5 text-sm flex-1 gap-1 sm:flex-col w-full h-auto justify-start items-start",
                          children: [
                            (0, i.jsx)("span", {
                              className: "font-medium",
                              children: n.title,
                            }),
                            (0, i.jsx)("span", {
                              className: "text-muted-foreground",
                              children: n.label,
                            }),
                          ],
                        }),
                      },
                      `suggested-action-${n.title}-${r}`,
                    ),
                  ),
                });
              },
              () => !0,
            );
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      97927: (e, t, n) => {
        Promise.resolve().then(n.bind(n, 51433)),
          Promise.resolve().then(n.bind(n, 59107)),
          Promise.resolve().then(n.bind(n, 39862));
      },
      98699: (e, t, n) => {
        "use strict";
        n.d(t, {
          SidebarInset: () => i,
          SidebarProvider: () => s,
          SidebarTrigger: () => o,
        });
        var r = n(26394);
        (0, r.registerClientReference)(
          function () {
            throw Error(
              "Attempted to call Sidebar() from the server but Sidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
          "Sidebar",
        ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarContent() from the server but SidebarContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarContent",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarFooter() from the server but SidebarFooter is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarFooter",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarGroup() from the server but SidebarGroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarGroup",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarGroupAction() from the server but SidebarGroupAction is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarGroupAction",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarGroupContent() from the server but SidebarGroupContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarGroupContent",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarGroupLabel() from the server but SidebarGroupLabel is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarGroupLabel",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarHeader() from the server but SidebarHeader is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarHeader",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarInput() from the server but SidebarInput is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarInput",
          );
        let i = (0, r.registerClientReference)(
          function () {
            throw Error(
              "Attempted to call SidebarInset() from the server but SidebarInset is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
          "SidebarInset",
        );
        (0, r.registerClientReference)(
          function () {
            throw Error(
              "Attempted to call SidebarMenu() from the server but SidebarMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
          "SidebarMenu",
        ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarMenuAction() from the server but SidebarMenuAction is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarMenuAction",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarMenuBadge() from the server but SidebarMenuBadge is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarMenuBadge",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarMenuButton() from the server but SidebarMenuButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarMenuButton",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarMenuItem() from the server but SidebarMenuItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarMenuItem",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarMenuSkeleton() from the server but SidebarMenuSkeleton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarMenuSkeleton",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarMenuSub() from the server but SidebarMenuSub is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarMenuSub",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarMenuSubButton() from the server but SidebarMenuSubButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarMenuSubButton",
          ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarMenuSubItem() from the server but SidebarMenuSubItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarMenuSubItem",
          );
        let s = (0, r.registerClientReference)(
          function () {
            throw Error(
              "Attempted to call SidebarProvider() from the server but SidebarProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
          "SidebarProvider",
        );
        (0, r.registerClientReference)(
          function () {
            throw Error(
              "Attempted to call SidebarRail() from the server but SidebarRail is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
          "SidebarRail",
        ),
          (0, r.registerClientReference)(
            function () {
              throw Error(
                "Attempted to call SidebarSeparator() from the server but SidebarSeparator is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
              );
            },
            "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
            "SidebarSeparator",
          );
        let o = (0, r.registerClientReference)(
          function () {
            throw Error(
              "Attempted to call SidebarTrigger() from the server but SidebarTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
          "SidebarTrigger",
        );
        (0, r.registerClientReference)(
          function () {
            throw Error(
              "Attempted to call useSidebar() from the server but useSidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.",
            );
          },
          "E:\\downloads\\Hijraah\\apps\\web\\src\\components\\ui\\sidebar.tsx",
          "useSidebar",
        );
      },
      98849: (e, t) => {
        var n;
        !(function () {
          "use strict";
          var r = {}.hasOwnProperty;
          function i() {
            for (var e = "", t = 0; t < arguments.length; t++) {
              var n = arguments[t];
              n &&
                (e = s(
                  e,
                  (function (e) {
                    if ("string" == typeof e || "number" == typeof e) return e;
                    if ("object" != typeof e) return "";
                    if (Array.isArray(e)) return i.apply(null, e);
                    if (
                      e.toString !== Object.prototype.toString &&
                      !e.toString.toString().includes("[native code]")
                    )
                      return e.toString();
                    var t = "";
                    for (var n in e) r.call(e, n) && e[n] && (t = s(t, n));
                    return t;
                  })(n),
                ));
            }
            return e;
          }
          function s(e, t) {
            return t ? (e ? e + " " + t : e + t) : e;
          }
          e.exports
            ? ((i.default = i), (e.exports = i))
            : void 0 ===
                (n = function () {
                  return i;
                }.apply(t, [])) || (e.exports = n);
        })();
      },
      99282: (e, t) => {
        "use strict";
        function n(e, t) {
          var n = e.length;
          for (e.push(t); 0 < n; ) {
            var r = (n - 1) >>> 1,
              i = e[r];
            if (0 < s(i, t)) (e[r] = t), (e[n] = i), (n = r);
            else break;
          }
        }
        function r(e) {
          return 0 === e.length ? null : e[0];
        }
        function i(e) {
          if (0 === e.length) return null;
          var t = e[0],
            n = e.pop();
          if (n !== t) {
            e[0] = n;
            for (var r = 0, i = e.length, o = i >>> 1; r < o; ) {
              var a = 2 * (r + 1) - 1,
                l = e[a],
                c = a + 1,
                u = e[c];
              if (0 > s(l, n))
                c < i && 0 > s(u, l)
                  ? ((e[r] = u), (e[c] = n), (r = c))
                  : ((e[r] = l), (e[a] = n), (r = a));
              else if (c < i && 0 > s(u, n)) (e[r] = u), (e[c] = n), (r = c);
              else break;
            }
          }
          return t;
        }
        function s(e, t) {
          var n = e.sortIndex - t.sortIndex;
          return 0 !== n ? n : e.id - t.id;
        }
        if (
          ((t.unstable_now = void 0),
          "object" == typeof performance &&
            "function" == typeof performance.now)
        ) {
          var o,
            a = performance;
          t.unstable_now = function () {
            return a.now();
          };
        } else {
          var l = Date,
            c = l.now();
          t.unstable_now = function () {
            return l.now() - c;
          };
        }
        var u = [],
          d = [],
          h = 1,
          p = null,
          f = 3,
          m = !1,
          g = !1,
          y = !1,
          v = !1,
          b = "function" == typeof setTimeout ? setTimeout : null,
          x = "function" == typeof clearTimeout ? clearTimeout : null,
          k = "undefined" != typeof setImmediate ? setImmediate : null;
        function w(e) {
          for (var t = r(d); null !== t; ) {
            if (null === t.callback) i(d);
            else if (t.startTime <= e)
              i(d), (t.sortIndex = t.expirationTime), n(u, t);
            else break;
            t = r(d);
          }
        }
        function _(e) {
          if (((y = !1), w(e), !g))
            if (null !== r(u)) (g = !0), O || ((O = !0), o());
            else {
              var t = r(d);
              null !== t && D(_, t.startTime - e);
            }
        }
        var O = !1,
          T = -1,
          S = 5,
          E = -1;
        function C() {
          return !!v || !(t.unstable_now() - E < S);
        }
        function A() {
          if (((v = !1), O)) {
            var e = t.unstable_now();
            E = e;
            var n = !0;
            try {
              r: {
                (g = !1), y && ((y = !1), x(T), (T = -1)), (m = !0);
                var s = f;
                try {
                  i: {
                    for (
                      w(e), p = r(u);
                      null !== p && !(p.expirationTime > e && C());

                    ) {
                      var a = p.callback;
                      if ("function" == typeof a) {
                        (p.callback = null), (f = p.priorityLevel);
                        var l = a(p.expirationTime <= e);
                        if (((e = t.unstable_now()), "function" == typeof l)) {
                          (p.callback = l), w(e), (n = !0);
                          break i;
                        }
                        p === r(u) && i(u), w(e);
                      } else i(u);
                      p = r(u);
                    }
                    if (null !== p) n = !0;
                    else {
                      var c = r(d);
                      null !== c && D(_, c.startTime - e), (n = !1);
                    }
                  }
                  break r;
                } finally {
                  (p = null), (f = s), (m = !1);
                }
              }
            } finally {
              n ? o() : (O = !1);
            }
          }
        }
        if ("function" == typeof k)
          o = function () {
            k(A);
          };
        else if ("undefined" != typeof MessageChannel) {
          var N = new MessageChannel(),
            I = N.port2;
          (N.port1.onmessage = A),
            (o = function () {
              I.postMessage(null);
            });
        } else
          o = function () {
            b(A, 0);
          };
        function D(e, n) {
          T = b(function () {
            e(t.unstable_now());
          }, n);
        }
        (t.unstable_IdlePriority = 5),
          (t.unstable_ImmediatePriority = 1),
          (t.unstable_LowPriority = 4),
          (t.unstable_NormalPriority = 3),
          (t.unstable_Profiling = null),
          (t.unstable_UserBlockingPriority = 2),
          (t.unstable_cancelCallback = function (e) {
            e.callback = null;
          }),
          (t.unstable_forceFrameRate = function (e) {
            0 > e || 125 < e
              ? console.error(
                  "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported",
                )
              : (S = 0 < e ? Math.floor(1e3 / e) : 5);
          }),
          (t.unstable_getCurrentPriorityLevel = function () {
            return f;
          }),
          (t.unstable_next = function (e) {
            switch (f) {
              case 1:
              case 2:
              case 3:
                var t = 3;
                break;
              default:
                t = f;
            }
            var n = f;
            f = t;
            try {
              return e();
            } finally {
              f = n;
            }
          }),
          (t.unstable_requestPaint = function () {
            v = !0;
          }),
          (t.unstable_runWithPriority = function (e, t) {
            switch (e) {
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
                break;
              default:
                e = 3;
            }
            var n = f;
            f = e;
            try {
              return t();
            } finally {
              f = n;
            }
          }),
          (t.unstable_scheduleCallback = function (e, i, s) {
            var a = t.unstable_now();
            switch (
              ((s =
                "object" == typeof s &&
                null !== s &&
                "number" == typeof (s = s.delay) &&
                0 < s
                  ? a + s
                  : a),
              e)
            ) {
              case 1:
                var l = -1;
                break;
              case 2:
                l = 250;
                break;
              case 5:
                l = 0x3fffffff;
                break;
              case 4:
                l = 1e4;
                break;
              default:
                l = 5e3;
            }
            return (
              (l = s + l),
              (e = {
                id: h++,
                callback: i,
                priorityLevel: e,
                startTime: s,
                expirationTime: l,
                sortIndex: -1,
              }),
              s > a
                ? ((e.sortIndex = s),
                  n(d, e),
                  null === r(u) &&
                    e === r(d) &&
                    (y ? (x(T), (T = -1)) : (y = !0), D(_, s - a)))
                : ((e.sortIndex = l),
                  n(u, e),
                  g || m || ((g = !0), O || ((O = !0), o()))),
              e
            );
          }),
          (t.unstable_shouldYield = C),
          (t.unstable_wrapCallback = function (e) {
            var t = f;
            return function () {
              var n = f;
              f = t;
              try {
                return e.apply(this, arguments);
              } finally {
                f = n;
              }
            };
          });
      },
      99413: (e, t, n) => {
        "use strict";
        var r, i, s, o;
        let a;
        n.d(t, {
          bz: () => eI,
          YO: () => eD,
          zM: () => eN,
          gM: () => eM,
          k5: () => eF,
          eu: () => ej,
          ai: () => eA,
          Ik: () => eP,
          g1: () => eL,
          Yj: () => eC,
          KC: () => eR,
        }),
          (function (e) {
            (e.assertEqual = (e) => {}),
              (e.assertIs = function (e) {}),
              (e.assertNever = function (e) {
                throw Error();
              }),
              (e.arrayToEnum = (e) => {
                let t = {};
                for (let n of e) t[n] = n;
                return t;
              }),
              (e.getValidEnumValues = (t) => {
                let n = e
                    .objectKeys(t)
                    .filter((e) => "number" != typeof t[t[e]]),
                  r = {};
                for (let e of n) r[e] = t[e];
                return e.objectValues(r);
              }),
              (e.objectValues = (t) =>
                e.objectKeys(t).map(function (e) {
                  return t[e];
                })),
              (e.objectKeys =
                "function" == typeof Object.keys
                  ? (e) => Object.keys(e)
                  : (e) => {
                      let t = [];
                      for (let n in e)
                        Object.prototype.hasOwnProperty.call(e, n) && t.push(n);
                      return t;
                    }),
              (e.find = (e, t) => {
                for (let n of e) if (t(n)) return n;
              }),
              (e.isInteger =
                "function" == typeof Number.isInteger
                  ? (e) => Number.isInteger(e)
                  : (e) =>
                      "number" == typeof e &&
                      Number.isFinite(e) &&
                      Math.floor(e) === e),
              (e.joinValues = function (e, t = " | ") {
                return e
                  .map((e) => ("string" == typeof e ? `'${e}'` : e))
                  .join(t);
              }),
              (e.jsonStringifyReplacer = (e, t) =>
                "bigint" == typeof t ? t.toString() : t);
          })(r || (r = {})),
          ((i || (i = {})).mergeShapes = (e, t) => ({ ...e, ...t }));
        let l = r.arrayToEnum([
            "string",
            "nan",
            "number",
            "integer",
            "float",
            "boolean",
            "date",
            "bigint",
            "symbol",
            "function",
            "undefined",
            "null",
            "array",
            "object",
            "unknown",
            "promise",
            "void",
            "never",
            "map",
            "set",
          ]),
          c = (e) => {
            switch (typeof e) {
              case "undefined":
                return l.undefined;
              case "string":
                return l.string;
              case "number":
                return Number.isNaN(e) ? l.nan : l.number;
              case "boolean":
                return l.boolean;
              case "function":
                return l.function;
              case "bigint":
                return l.bigint;
              case "symbol":
                return l.symbol;
              case "object":
                if (Array.isArray(e)) return l.array;
                if (null === e) return l.null;
                if (
                  e.then &&
                  "function" == typeof e.then &&
                  e.catch &&
                  "function" == typeof e.catch
                )
                  return l.promise;
                if ("undefined" != typeof Map && e instanceof Map) return l.map;
                if ("undefined" != typeof Set && e instanceof Set) return l.set;
                if ("undefined" != typeof Date && e instanceof Date)
                  return l.date;
                return l.object;
              default:
                return l.unknown;
            }
          },
          u = r.arrayToEnum([
            "invalid_type",
            "invalid_literal",
            "custom",
            "invalid_union",
            "invalid_union_discriminator",
            "invalid_enum_value",
            "unrecognized_keys",
            "invalid_arguments",
            "invalid_return_type",
            "invalid_date",
            "invalid_string",
            "too_small",
            "too_big",
            "invalid_intersection_types",
            "not_multiple_of",
            "not_finite",
          ]);
        class d extends Error {
          get errors() {
            return this.issues;
          }
          constructor(e) {
            super(),
              (this.issues = []),
              (this.addIssue = (e) => {
                this.issues = [...this.issues, e];
              }),
              (this.addIssues = (e = []) => {
                this.issues = [...this.issues, ...e];
              });
            let t = new.target.prototype;
            Object.setPrototypeOf
              ? Object.setPrototypeOf(this, t)
              : (this.__proto__ = t),
              (this.name = "ZodError"),
              (this.issues = e);
          }
          format(e) {
            let t =
                e ||
                function (e) {
                  return e.message;
                },
              n = { _errors: [] },
              r = (e) => {
                for (let i of e.issues)
                  if ("invalid_union" === i.code) i.unionErrors.map(r);
                  else if ("invalid_return_type" === i.code)
                    r(i.returnTypeError);
                  else if ("invalid_arguments" === i.code) r(i.argumentsError);
                  else if (0 === i.path.length) n._errors.push(t(i));
                  else {
                    let e = n,
                      r = 0;
                    for (; r < i.path.length; ) {
                      let n = i.path[r];
                      r === i.path.length - 1
                        ? ((e[n] = e[n] || { _errors: [] }),
                          e[n]._errors.push(t(i)))
                        : (e[n] = e[n] || { _errors: [] }),
                        (e = e[n]),
                        r++;
                    }
                  }
              };
            return r(this), n;
          }
          static assert(e) {
            if (!(e instanceof d)) throw Error(`Not a ZodError: ${e}`);
          }
          toString() {
            return this.message;
          }
          get message() {
            return JSON.stringify(this.issues, r.jsonStringifyReplacer, 2);
          }
          get isEmpty() {
            return 0 === this.issues.length;
          }
          flatten(e = (e) => e.message) {
            let t = {},
              n = [];
            for (let r of this.issues)
              if (r.path.length > 0) {
                let n = r.path[0];
                (t[n] = t[n] || []), t[n].push(e(r));
              } else n.push(e(r));
            return { formErrors: n, fieldErrors: t };
          }
          get formErrors() {
            return this.flatten();
          }
        }
        d.create = (e) => new d(e);
        let h = (e, t) => {
          let n;
          switch (e.code) {
            case u.invalid_type:
              n =
                e.received === l.undefined
                  ? "Required"
                  : `Expected ${e.expected}, received ${e.received}`;
              break;
            case u.invalid_literal:
              n = `Invalid literal value, expected ${JSON.stringify(e.expected, r.jsonStringifyReplacer)}`;
              break;
            case u.unrecognized_keys:
              n = `Unrecognized key(s) in object: ${r.joinValues(e.keys, ", ")}`;
              break;
            case u.invalid_union:
              n = "Invalid input";
              break;
            case u.invalid_union_discriminator:
              n = `Invalid discriminator value. Expected ${r.joinValues(e.options)}`;
              break;
            case u.invalid_enum_value:
              n = `Invalid enum value. Expected ${r.joinValues(e.options)}, received '${e.received}'`;
              break;
            case u.invalid_arguments:
              n = "Invalid function arguments";
              break;
            case u.invalid_return_type:
              n = "Invalid function return type";
              break;
            case u.invalid_date:
              n = "Invalid date";
              break;
            case u.invalid_string:
              "object" == typeof e.validation
                ? "includes" in e.validation
                  ? ((n = `Invalid input: must include "${e.validation.includes}"`),
                    "number" == typeof e.validation.position &&
                      (n = `${n} at one or more positions greater than or equal to ${e.validation.position}`))
                  : "startsWith" in e.validation
                    ? (n = `Invalid input: must start with "${e.validation.startsWith}"`)
                    : "endsWith" in e.validation
                      ? (n = `Invalid input: must end with "${e.validation.endsWith}"`)
                      : r.assertNever(e.validation)
                : (n =
                    "regex" !== e.validation
                      ? `Invalid ${e.validation}`
                      : "Invalid");
              break;
            case u.too_small:
              n =
                "array" === e.type
                  ? `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "more than"} ${e.minimum} element(s)`
                  : "string" === e.type
                    ? `String must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "over"} ${e.minimum} character(s)`
                    : "number" === e.type || "bigint" === e.type
                      ? `Number must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${e.minimum}`
                      : "date" === e.type
                        ? `Date must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(e.minimum))}`
                        : "Invalid input";
              break;
            case u.too_big:
              n =
                "array" === e.type
                  ? `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "less than"} ${e.maximum} element(s)`
                  : "string" === e.type
                    ? `String must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "under"} ${e.maximum} character(s)`
                    : "number" === e.type
                      ? `Number must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}`
                      : "bigint" === e.type
                        ? `BigInt must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}`
                        : "date" === e.type
                          ? `Date must be ${e.exact ? "exactly" : e.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(e.maximum))}`
                          : "Invalid input";
              break;
            case u.custom:
              n = "Invalid input";
              break;
            case u.invalid_intersection_types:
              n = "Intersection results could not be merged";
              break;
            case u.not_multiple_of:
              n = `Number must be a multiple of ${e.multipleOf}`;
              break;
            case u.not_finite:
              n = "Number must be finite";
              break;
            default:
              (n = t.defaultError), r.assertNever(e);
          }
          return { message: n };
        };
        !(function (e) {
          (e.errToObj = (e) =>
            "string" == typeof e ? { message: e } : e || {}),
            (e.toString = (e) => ("string" == typeof e ? e : e?.message));
        })(s || (s = {}));
        let p = (e) => {
          let { data: t, path: n, errorMaps: r, issueData: i } = e,
            s = [...n, ...(i.path || [])],
            o = { ...i, path: s };
          if (void 0 !== i.message)
            return { ...i, path: s, message: i.message };
          let a = "";
          for (let e of r
            .filter((e) => !!e)
            .slice()
            .reverse())
            a = e(o, { data: t, defaultError: a }).message;
          return { ...i, path: s, message: a };
        };
        function f(e, t) {
          let n = p({
            issueData: t,
            data: e.data,
            path: e.path,
            errorMaps: [
              e.common.contextualErrorMap,
              e.schemaErrorMap,
              h,
              h == h ? void 0 : h,
            ].filter((e) => !!e),
          });
          e.common.issues.push(n);
        }
        class m {
          constructor() {
            this.value = "valid";
          }
          dirty() {
            "valid" === this.value && (this.value = "dirty");
          }
          abort() {
            "aborted" !== this.value && (this.value = "aborted");
          }
          static mergeArray(e, t) {
            let n = [];
            for (let r of t) {
              if ("aborted" === r.status) return g;
              "dirty" === r.status && e.dirty(), n.push(r.value);
            }
            return { status: e.value, value: n };
          }
          static async mergeObjectAsync(e, t) {
            let n = [];
            for (let e of t) {
              let t = await e.key,
                r = await e.value;
              n.push({ key: t, value: r });
            }
            return m.mergeObjectSync(e, n);
          }
          static mergeObjectSync(e, t) {
            let n = {};
            for (let r of t) {
              let { key: t, value: i } = r;
              if ("aborted" === t.status || "aborted" === i.status) return g;
              "dirty" === t.status && e.dirty(),
                "dirty" === i.status && e.dirty(),
                "__proto__" !== t.value &&
                  (void 0 !== i.value || r.alwaysSet) &&
                  (n[t.value] = i.value);
            }
            return { status: e.value, value: n };
          }
        }
        let g = Object.freeze({ status: "aborted" }),
          y = (e) => ({ status: "dirty", value: e }),
          v = (e) => ({ status: "valid", value: e }),
          b = (e) => "aborted" === e.status,
          x = (e) => "dirty" === e.status,
          k = (e) => "valid" === e.status,
          w = (e) => "undefined" != typeof Promise && e instanceof Promise;
        class _ {
          constructor(e, t, n, r) {
            (this._cachedPath = []),
              (this.parent = e),
              (this.data = t),
              (this._path = n),
              (this._key = r);
          }
          get path() {
            return (
              this._cachedPath.length ||
                (Array.isArray(this._key)
                  ? this._cachedPath.push(...this._path, ...this._key)
                  : this._cachedPath.push(...this._path, this._key)),
              this._cachedPath
            );
          }
        }
        let O = (e, t) => {
          if (k(t)) return { success: !0, data: t.value };
          if (!e.common.issues.length)
            throw Error("Validation failed but no issues detected.");
          return {
            success: !1,
            get error() {
              if (this._error) return this._error;
              let t = new d(e.common.issues);
              return (this._error = t), this._error;
            },
          };
        };
        function T(e) {
          if (!e) return {};
          let {
            errorMap: t,
            invalid_type_error: n,
            required_error: r,
            description: i,
          } = e;
          if (t && (n || r))
            throw Error(
              'Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.',
            );
          return t
            ? { errorMap: t, description: i }
            : {
                errorMap: (t, i) => {
                  let { message: s } = e;
                  return "invalid_enum_value" === t.code
                    ? { message: s ?? i.defaultError }
                    : void 0 === i.data
                      ? { message: s ?? r ?? i.defaultError }
                      : "invalid_type" !== t.code
                        ? { message: i.defaultError }
                        : { message: s ?? n ?? i.defaultError };
                },
                description: i,
              };
        }
        class S {
          get description() {
            return this._def.description;
          }
          _getType(e) {
            return c(e.data);
          }
          _getOrReturnCtx(e, t) {
            return (
              t || {
                common: e.parent.common,
                data: e.data,
                parsedType: c(e.data),
                schemaErrorMap: this._def.errorMap,
                path: e.path,
                parent: e.parent,
              }
            );
          }
          _processInputParams(e) {
            return {
              status: new m(),
              ctx: {
                common: e.parent.common,
                data: e.data,
                parsedType: c(e.data),
                schemaErrorMap: this._def.errorMap,
                path: e.path,
                parent: e.parent,
              },
            };
          }
          _parseSync(e) {
            let t = this._parse(e);
            if (w(t)) throw Error("Synchronous parse encountered promise.");
            return t;
          }
          _parseAsync(e) {
            return Promise.resolve(this._parse(e));
          }
          parse(e, t) {
            let n = this.safeParse(e, t);
            if (n.success) return n.data;
            throw n.error;
          }
          safeParse(e, t) {
            let n = {
                common: {
                  issues: [],
                  async: t?.async ?? !1,
                  contextualErrorMap: t?.errorMap,
                },
                path: t?.path || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data: e,
                parsedType: c(e),
              },
              r = this._parseSync({ data: e, path: n.path, parent: n });
            return O(n, r);
          }
          "~validate"(e) {
            let t = {
              common: { issues: [], async: !!this["~standard"].async },
              path: [],
              schemaErrorMap: this._def.errorMap,
              parent: null,
              data: e,
              parsedType: c(e),
            };
            if (!this["~standard"].async)
              try {
                let n = this._parseSync({ data: e, path: [], parent: t });
                return k(n) ? { value: n.value } : { issues: t.common.issues };
              } catch (e) {
                e?.message?.toLowerCase()?.includes("encountered") &&
                  (this["~standard"].async = !0),
                  (t.common = { issues: [], async: !0 });
              }
            return this._parseAsync({ data: e, path: [], parent: t }).then(
              (e) => (k(e) ? { value: e.value } : { issues: t.common.issues }),
            );
          }
          async parseAsync(e, t) {
            let n = await this.safeParseAsync(e, t);
            if (n.success) return n.data;
            throw n.error;
          }
          async safeParseAsync(e, t) {
            let n = {
                common: {
                  issues: [],
                  contextualErrorMap: t?.errorMap,
                  async: !0,
                },
                path: t?.path || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data: e,
                parsedType: c(e),
              },
              r = this._parse({ data: e, path: n.path, parent: n });
            return O(n, await (w(r) ? r : Promise.resolve(r)));
          }
          refine(e, t) {
            let n = (e) =>
              "string" == typeof t || void 0 === t
                ? { message: t }
                : "function" == typeof t
                  ? t(e)
                  : t;
            return this._refinement((t, r) => {
              let i = e(t),
                s = () => r.addIssue({ code: u.custom, ...n(t) });
              return "undefined" != typeof Promise && i instanceof Promise
                ? i.then((e) => !!e || (s(), !1))
                : !!i || (s(), !1);
            });
          }
          refinement(e, t) {
            return this._refinement(
              (n, r) =>
                !!e(n) ||
                (r.addIssue("function" == typeof t ? t(n, r) : t), !1),
            );
          }
          _refinement(e) {
            return new eb({
              schema: this,
              typeName: o.ZodEffects,
              effect: { type: "refinement", refinement: e },
            });
          }
          superRefine(e) {
            return this._refinement(e);
          }
          constructor(e) {
            (this.spa = this.safeParseAsync),
              (this._def = e),
              (this.parse = this.parse.bind(this)),
              (this.safeParse = this.safeParse.bind(this)),
              (this.parseAsync = this.parseAsync.bind(this)),
              (this.safeParseAsync = this.safeParseAsync.bind(this)),
              (this.spa = this.spa.bind(this)),
              (this.refine = this.refine.bind(this)),
              (this.refinement = this.refinement.bind(this)),
              (this.superRefine = this.superRefine.bind(this)),
              (this.optional = this.optional.bind(this)),
              (this.nullable = this.nullable.bind(this)),
              (this.nullish = this.nullish.bind(this)),
              (this.array = this.array.bind(this)),
              (this.promise = this.promise.bind(this)),
              (this.or = this.or.bind(this)),
              (this.and = this.and.bind(this)),
              (this.transform = this.transform.bind(this)),
              (this.brand = this.brand.bind(this)),
              (this.default = this.default.bind(this)),
              (this.catch = this.catch.bind(this)),
              (this.describe = this.describe.bind(this)),
              (this.pipe = this.pipe.bind(this)),
              (this.readonly = this.readonly.bind(this)),
              (this.isNullable = this.isNullable.bind(this)),
              (this.isOptional = this.isOptional.bind(this)),
              (this["~standard"] = {
                version: 1,
                vendor: "zod",
                validate: (e) => this["~validate"](e),
              });
          }
          optional() {
            return ex.create(this, this._def);
          }
          nullable() {
            return ek.create(this, this._def);
          }
          nullish() {
            return this.nullable().optional();
          }
          array() {
            return en.create(this);
          }
          promise() {
            return ev.create(this, this._def);
          }
          or(e) {
            return ei.create([this, e], this._def);
          }
          and(e) {
            return ea.create(this, e, this._def);
          }
          transform(e) {
            return new eb({
              ...T(this._def),
              schema: this,
              typeName: o.ZodEffects,
              effect: { type: "transform", transform: e },
            });
          }
          default(e) {
            return new ew({
              ...T(this._def),
              innerType: this,
              defaultValue: "function" == typeof e ? e : () => e,
              typeName: o.ZodDefault,
            });
          }
          brand() {
            return new eT({
              typeName: o.ZodBranded,
              type: this,
              ...T(this._def),
            });
          }
          catch(e) {
            return new e_({
              ...T(this._def),
              innerType: this,
              catchValue: "function" == typeof e ? e : () => e,
              typeName: o.ZodCatch,
            });
          }
          describe(e) {
            return new this.constructor({ ...this._def, description: e });
          }
          pipe(e) {
            return eS.create(this, e);
          }
          readonly() {
            return eE.create(this);
          }
          isOptional() {
            return this.safeParse(void 0).success;
          }
          isNullable() {
            return this.safeParse(null).success;
          }
        }
        let E = /^c[^\s-]{8,}$/i,
          C = /^[0-9a-z]+$/,
          A = /^[0-9A-HJKMNP-TV-Z]{26}$/i,
          N =
            /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,
          I = /^[a-z0-9_-]{21}$/i,
          D = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,
          P =
            /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,
          R =
            /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,
          M =
            /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
          L =
            /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
          j =
            /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,
          F =
            /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
          B =
            /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
          z =
            /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
          $ =
            "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",
          q = RegExp(`^${$}$`);
        function U(e) {
          let t = "[0-5]\\d";
          e.precision
            ? (t = `${t}\\.\\d{${e.precision}}`)
            : null == e.precision && (t = `${t}(\\.\\d+)?`);
          let n = e.precision ? "+" : "?";
          return `([01]\\d|2[0-3]):[0-5]\\d(:${t})${n}`;
        }
        class H extends S {
          _parse(e) {
            var t, n, i, s;
            let o;
            if (
              (this._def.coerce && (e.data = String(e.data)),
              this._getType(e) !== l.string)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.string,
                  received: t.parsedType,
                }),
                g
              );
            }
            let c = new m();
            for (let l of this._def.checks)
              if ("min" === l.kind)
                e.data.length < l.value &&
                  (f((o = this._getOrReturnCtx(e, o)), {
                    code: u.too_small,
                    minimum: l.value,
                    type: "string",
                    inclusive: !0,
                    exact: !1,
                    message: l.message,
                  }),
                  c.dirty());
              else if ("max" === l.kind)
                e.data.length > l.value &&
                  (f((o = this._getOrReturnCtx(e, o)), {
                    code: u.too_big,
                    maximum: l.value,
                    type: "string",
                    inclusive: !0,
                    exact: !1,
                    message: l.message,
                  }),
                  c.dirty());
              else if ("length" === l.kind) {
                let t = e.data.length > l.value,
                  n = e.data.length < l.value;
                (t || n) &&
                  ((o = this._getOrReturnCtx(e, o)),
                  t
                    ? f(o, {
                        code: u.too_big,
                        maximum: l.value,
                        type: "string",
                        inclusive: !0,
                        exact: !0,
                        message: l.message,
                      })
                    : n &&
                      f(o, {
                        code: u.too_small,
                        minimum: l.value,
                        type: "string",
                        inclusive: !0,
                        exact: !0,
                        message: l.message,
                      }),
                  c.dirty());
              } else if ("email" === l.kind)
                R.test(e.data) ||
                  (f((o = this._getOrReturnCtx(e, o)), {
                    validation: "email",
                    code: u.invalid_string,
                    message: l.message,
                  }),
                  c.dirty());
              else if ("emoji" === l.kind)
                a ||
                  (a = RegExp(
                    "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$",
                    "u",
                  )),
                  a.test(e.data) ||
                    (f((o = this._getOrReturnCtx(e, o)), {
                      validation: "emoji",
                      code: u.invalid_string,
                      message: l.message,
                    }),
                    c.dirty());
              else if ("uuid" === l.kind)
                N.test(e.data) ||
                  (f((o = this._getOrReturnCtx(e, o)), {
                    validation: "uuid",
                    code: u.invalid_string,
                    message: l.message,
                  }),
                  c.dirty());
              else if ("nanoid" === l.kind)
                I.test(e.data) ||
                  (f((o = this._getOrReturnCtx(e, o)), {
                    validation: "nanoid",
                    code: u.invalid_string,
                    message: l.message,
                  }),
                  c.dirty());
              else if ("cuid" === l.kind)
                E.test(e.data) ||
                  (f((o = this._getOrReturnCtx(e, o)), {
                    validation: "cuid",
                    code: u.invalid_string,
                    message: l.message,
                  }),
                  c.dirty());
              else if ("cuid2" === l.kind)
                C.test(e.data) ||
                  (f((o = this._getOrReturnCtx(e, o)), {
                    validation: "cuid2",
                    code: u.invalid_string,
                    message: l.message,
                  }),
                  c.dirty());
              else if ("ulid" === l.kind)
                A.test(e.data) ||
                  (f((o = this._getOrReturnCtx(e, o)), {
                    validation: "ulid",
                    code: u.invalid_string,
                    message: l.message,
                  }),
                  c.dirty());
              else if ("url" === l.kind)
                try {
                  new URL(e.data);
                } catch {
                  f((o = this._getOrReturnCtx(e, o)), {
                    validation: "url",
                    code: u.invalid_string,
                    message: l.message,
                  }),
                    c.dirty();
                }
              else
                "regex" === l.kind
                  ? ((l.regex.lastIndex = 0),
                    l.regex.test(e.data) ||
                      (f((o = this._getOrReturnCtx(e, o)), {
                        validation: "regex",
                        code: u.invalid_string,
                        message: l.message,
                      }),
                      c.dirty()))
                  : "trim" === l.kind
                    ? (e.data = e.data.trim())
                    : "includes" === l.kind
                      ? e.data.includes(l.value, l.position) ||
                        (f((o = this._getOrReturnCtx(e, o)), {
                          code: u.invalid_string,
                          validation: {
                            includes: l.value,
                            position: l.position,
                          },
                          message: l.message,
                        }),
                        c.dirty())
                      : "toLowerCase" === l.kind
                        ? (e.data = e.data.toLowerCase())
                        : "toUpperCase" === l.kind
                          ? (e.data = e.data.toUpperCase())
                          : "startsWith" === l.kind
                            ? e.data.startsWith(l.value) ||
                              (f((o = this._getOrReturnCtx(e, o)), {
                                code: u.invalid_string,
                                validation: { startsWith: l.value },
                                message: l.message,
                              }),
                              c.dirty())
                            : "endsWith" === l.kind
                              ? e.data.endsWith(l.value) ||
                                (f((o = this._getOrReturnCtx(e, o)), {
                                  code: u.invalid_string,
                                  validation: { endsWith: l.value },
                                  message: l.message,
                                }),
                                c.dirty())
                              : "datetime" === l.kind
                                ? (function (e) {
                                    let t = `${$}T${U(e)}`,
                                      n = [];
                                    return (
                                      n.push(e.local ? "Z?" : "Z"),
                                      e.offset &&
                                        n.push("([+-]\\d{2}:?\\d{2})"),
                                      (t = `${t}(${n.join("|")})`),
                                      RegExp(`^${t}$`)
                                    );
                                  })(l).test(e.data) ||
                                  (f((o = this._getOrReturnCtx(e, o)), {
                                    code: u.invalid_string,
                                    validation: "datetime",
                                    message: l.message,
                                  }),
                                  c.dirty())
                                : "date" === l.kind
                                  ? q.test(e.data) ||
                                    (f((o = this._getOrReturnCtx(e, o)), {
                                      code: u.invalid_string,
                                      validation: "date",
                                      message: l.message,
                                    }),
                                    c.dirty())
                                  : "time" === l.kind
                                    ? RegExp(`^${U(l)}$`).test(e.data) ||
                                      (f((o = this._getOrReturnCtx(e, o)), {
                                        code: u.invalid_string,
                                        validation: "time",
                                        message: l.message,
                                      }),
                                      c.dirty())
                                    : "duration" === l.kind
                                      ? P.test(e.data) ||
                                        (f((o = this._getOrReturnCtx(e, o)), {
                                          validation: "duration",
                                          code: u.invalid_string,
                                          message: l.message,
                                        }),
                                        c.dirty())
                                      : "ip" === l.kind
                                        ? ((t = e.data),
                                          !(
                                            (("v4" === (n = l.version) || !n) &&
                                              M.test(t)) ||
                                            (("v6" === n || !n) && j.test(t))
                                          ) &&
                                            1 &&
                                            (f(
                                              (o = this._getOrReturnCtx(e, o)),
                                              {
                                                validation: "ip",
                                                code: u.invalid_string,
                                                message: l.message,
                                              },
                                            ),
                                            c.dirty()))
                                        : "jwt" === l.kind
                                          ? !(function (e, t) {
                                              if (!D.test(e)) return !1;
                                              try {
                                                let [n] = e.split(".");
                                                if (!n) return !1;
                                                let r = n
                                                    .replace(/-/g, "+")
                                                    .replace(/_/g, "/")
                                                    .padEnd(
                                                      n.length +
                                                        ((4 - (n.length % 4)) %
                                                          4),
                                                      "=",
                                                    ),
                                                  i = JSON.parse(atob(r));
                                                if (
                                                  "object" != typeof i ||
                                                  null === i ||
                                                  ("typ" in i &&
                                                    i?.typ !== "JWT") ||
                                                  !i.alg ||
                                                  (t && i.alg !== t)
                                                )
                                                  return !1;
                                                return !0;
                                              } catch {
                                                return !1;
                                              }
                                            })(e.data, l.alg) &&
                                            (f(
                                              (o = this._getOrReturnCtx(e, o)),
                                              {
                                                validation: "jwt",
                                                code: u.invalid_string,
                                                message: l.message,
                                              },
                                            ),
                                            c.dirty())
                                          : "cidr" === l.kind
                                            ? ((i = e.data),
                                              !(
                                                (("v4" === (s = l.version) ||
                                                  !s) &&
                                                  L.test(i)) ||
                                                (("v6" === s || !s) &&
                                                  F.test(i))
                                              ) &&
                                                1 &&
                                                (f(
                                                  (o = this._getOrReturnCtx(
                                                    e,
                                                    o,
                                                  )),
                                                  {
                                                    validation: "cidr",
                                                    code: u.invalid_string,
                                                    message: l.message,
                                                  },
                                                ),
                                                c.dirty()))
                                            : "base64" === l.kind
                                              ? B.test(e.data) ||
                                                (f(
                                                  (o = this._getOrReturnCtx(
                                                    e,
                                                    o,
                                                  )),
                                                  {
                                                    validation: "base64",
                                                    code: u.invalid_string,
                                                    message: l.message,
                                                  },
                                                ),
                                                c.dirty())
                                              : "base64url" === l.kind
                                                ? z.test(e.data) ||
                                                  (f(
                                                    (o = this._getOrReturnCtx(
                                                      e,
                                                      o,
                                                    )),
                                                    {
                                                      validation: "base64url",
                                                      code: u.invalid_string,
                                                      message: l.message,
                                                    },
                                                  ),
                                                  c.dirty())
                                                : r.assertNever(l);
            return { status: c.value, value: e.data };
          }
          _regex(e, t, n) {
            return this.refinement((t) => e.test(t), {
              validation: t,
              code: u.invalid_string,
              ...s.errToObj(n),
            });
          }
          _addCheck(e) {
            return new H({ ...this._def, checks: [...this._def.checks, e] });
          }
          email(e) {
            return this._addCheck({ kind: "email", ...s.errToObj(e) });
          }
          url(e) {
            return this._addCheck({ kind: "url", ...s.errToObj(e) });
          }
          emoji(e) {
            return this._addCheck({ kind: "emoji", ...s.errToObj(e) });
          }
          uuid(e) {
            return this._addCheck({ kind: "uuid", ...s.errToObj(e) });
          }
          nanoid(e) {
            return this._addCheck({ kind: "nanoid", ...s.errToObj(e) });
          }
          cuid(e) {
            return this._addCheck({ kind: "cuid", ...s.errToObj(e) });
          }
          cuid2(e) {
            return this._addCheck({ kind: "cuid2", ...s.errToObj(e) });
          }
          ulid(e) {
            return this._addCheck({ kind: "ulid", ...s.errToObj(e) });
          }
          base64(e) {
            return this._addCheck({ kind: "base64", ...s.errToObj(e) });
          }
          base64url(e) {
            return this._addCheck({ kind: "base64url", ...s.errToObj(e) });
          }
          jwt(e) {
            return this._addCheck({ kind: "jwt", ...s.errToObj(e) });
          }
          ip(e) {
            return this._addCheck({ kind: "ip", ...s.errToObj(e) });
          }
          cidr(e) {
            return this._addCheck({ kind: "cidr", ...s.errToObj(e) });
          }
          datetime(e) {
            return "string" == typeof e
              ? this._addCheck({
                  kind: "datetime",
                  precision: null,
                  offset: !1,
                  local: !1,
                  message: e,
                })
              : this._addCheck({
                  kind: "datetime",
                  precision: void 0 === e?.precision ? null : e?.precision,
                  offset: e?.offset ?? !1,
                  local: e?.local ?? !1,
                  ...s.errToObj(e?.message),
                });
          }
          date(e) {
            return this._addCheck({ kind: "date", message: e });
          }
          time(e) {
            return "string" == typeof e
              ? this._addCheck({ kind: "time", precision: null, message: e })
              : this._addCheck({
                  kind: "time",
                  precision: void 0 === e?.precision ? null : e?.precision,
                  ...s.errToObj(e?.message),
                });
          }
          duration(e) {
            return this._addCheck({ kind: "duration", ...s.errToObj(e) });
          }
          regex(e, t) {
            return this._addCheck({
              kind: "regex",
              regex: e,
              ...s.errToObj(t),
            });
          }
          includes(e, t) {
            return this._addCheck({
              kind: "includes",
              value: e,
              position: t?.position,
              ...s.errToObj(t?.message),
            });
          }
          startsWith(e, t) {
            return this._addCheck({
              kind: "startsWith",
              value: e,
              ...s.errToObj(t),
            });
          }
          endsWith(e, t) {
            return this._addCheck({
              kind: "endsWith",
              value: e,
              ...s.errToObj(t),
            });
          }
          min(e, t) {
            return this._addCheck({ kind: "min", value: e, ...s.errToObj(t) });
          }
          max(e, t) {
            return this._addCheck({ kind: "max", value: e, ...s.errToObj(t) });
          }
          length(e, t) {
            return this._addCheck({
              kind: "length",
              value: e,
              ...s.errToObj(t),
            });
          }
          nonempty(e) {
            return this.min(1, s.errToObj(e));
          }
          trim() {
            return new H({
              ...this._def,
              checks: [...this._def.checks, { kind: "trim" }],
            });
          }
          toLowerCase() {
            return new H({
              ...this._def,
              checks: [...this._def.checks, { kind: "toLowerCase" }],
            });
          }
          toUpperCase() {
            return new H({
              ...this._def,
              checks: [...this._def.checks, { kind: "toUpperCase" }],
            });
          }
          get isDatetime() {
            return !!this._def.checks.find((e) => "datetime" === e.kind);
          }
          get isDate() {
            return !!this._def.checks.find((e) => "date" === e.kind);
          }
          get isTime() {
            return !!this._def.checks.find((e) => "time" === e.kind);
          }
          get isDuration() {
            return !!this._def.checks.find((e) => "duration" === e.kind);
          }
          get isEmail() {
            return !!this._def.checks.find((e) => "email" === e.kind);
          }
          get isURL() {
            return !!this._def.checks.find((e) => "url" === e.kind);
          }
          get isEmoji() {
            return !!this._def.checks.find((e) => "emoji" === e.kind);
          }
          get isUUID() {
            return !!this._def.checks.find((e) => "uuid" === e.kind);
          }
          get isNANOID() {
            return !!this._def.checks.find((e) => "nanoid" === e.kind);
          }
          get isCUID() {
            return !!this._def.checks.find((e) => "cuid" === e.kind);
          }
          get isCUID2() {
            return !!this._def.checks.find((e) => "cuid2" === e.kind);
          }
          get isULID() {
            return !!this._def.checks.find((e) => "ulid" === e.kind);
          }
          get isIP() {
            return !!this._def.checks.find((e) => "ip" === e.kind);
          }
          get isCIDR() {
            return !!this._def.checks.find((e) => "cidr" === e.kind);
          }
          get isBase64() {
            return !!this._def.checks.find((e) => "base64" === e.kind);
          }
          get isBase64url() {
            return !!this._def.checks.find((e) => "base64url" === e.kind);
          }
          get minLength() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxLength() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
        }
        H.create = (e) =>
          new H({
            checks: [],
            typeName: o.ZodString,
            coerce: e?.coerce ?? !1,
            ...T(e),
          });
        class Q extends S {
          constructor() {
            super(...arguments),
              (this.min = this.gte),
              (this.max = this.lte),
              (this.step = this.multipleOf);
          }
          _parse(e) {
            let t;
            if (
              (this._def.coerce && (e.data = Number(e.data)),
              this._getType(e) !== l.number)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.number,
                  received: t.parsedType,
                }),
                g
              );
            }
            let n = new m();
            for (let i of this._def.checks)
              "int" === i.kind
                ? r.isInteger(e.data) ||
                  (f((t = this._getOrReturnCtx(e, t)), {
                    code: u.invalid_type,
                    expected: "integer",
                    received: "float",
                    message: i.message,
                  }),
                  n.dirty())
                : "min" === i.kind
                  ? (i.inclusive ? e.data < i.value : e.data <= i.value) &&
                    (f((t = this._getOrReturnCtx(e, t)), {
                      code: u.too_small,
                      minimum: i.value,
                      type: "number",
                      inclusive: i.inclusive,
                      exact: !1,
                      message: i.message,
                    }),
                    n.dirty())
                  : "max" === i.kind
                    ? (i.inclusive ? e.data > i.value : e.data >= i.value) &&
                      (f((t = this._getOrReturnCtx(e, t)), {
                        code: u.too_big,
                        maximum: i.value,
                        type: "number",
                        inclusive: i.inclusive,
                        exact: !1,
                        message: i.message,
                      }),
                      n.dirty())
                    : "multipleOf" === i.kind
                      ? 0 !==
                          (function (e, t) {
                            let n = (e.toString().split(".")[1] || "").length,
                              r = (t.toString().split(".")[1] || "").length,
                              i = n > r ? n : r;
                            return (
                              (Number.parseInt(e.toFixed(i).replace(".", "")) %
                                Number.parseInt(
                                  t.toFixed(i).replace(".", ""),
                                )) /
                              10 ** i
                            );
                          })(e.data, i.value) &&
                        (f((t = this._getOrReturnCtx(e, t)), {
                          code: u.not_multiple_of,
                          multipleOf: i.value,
                          message: i.message,
                        }),
                        n.dirty())
                      : "finite" === i.kind
                        ? Number.isFinite(e.data) ||
                          (f((t = this._getOrReturnCtx(e, t)), {
                            code: u.not_finite,
                            message: i.message,
                          }),
                          n.dirty())
                        : r.assertNever(i);
            return { status: n.value, value: e.data };
          }
          gte(e, t) {
            return this.setLimit("min", e, !0, s.toString(t));
          }
          gt(e, t) {
            return this.setLimit("min", e, !1, s.toString(t));
          }
          lte(e, t) {
            return this.setLimit("max", e, !0, s.toString(t));
          }
          lt(e, t) {
            return this.setLimit("max", e, !1, s.toString(t));
          }
          setLimit(e, t, n, r) {
            return new Q({
              ...this._def,
              checks: [
                ...this._def.checks,
                { kind: e, value: t, inclusive: n, message: s.toString(r) },
              ],
            });
          }
          _addCheck(e) {
            return new Q({ ...this._def, checks: [...this._def.checks, e] });
          }
          int(e) {
            return this._addCheck({ kind: "int", message: s.toString(e) });
          }
          positive(e) {
            return this._addCheck({
              kind: "min",
              value: 0,
              inclusive: !1,
              message: s.toString(e),
            });
          }
          negative(e) {
            return this._addCheck({
              kind: "max",
              value: 0,
              inclusive: !1,
              message: s.toString(e),
            });
          }
          nonpositive(e) {
            return this._addCheck({
              kind: "max",
              value: 0,
              inclusive: !0,
              message: s.toString(e),
            });
          }
          nonnegative(e) {
            return this._addCheck({
              kind: "min",
              value: 0,
              inclusive: !0,
              message: s.toString(e),
            });
          }
          multipleOf(e, t) {
            return this._addCheck({
              kind: "multipleOf",
              value: e,
              message: s.toString(t),
            });
          }
          finite(e) {
            return this._addCheck({ kind: "finite", message: s.toString(e) });
          }
          safe(e) {
            return this._addCheck({
              kind: "min",
              inclusive: !0,
              value: Number.MIN_SAFE_INTEGER,
              message: s.toString(e),
            })._addCheck({
              kind: "max",
              inclusive: !0,
              value: Number.MAX_SAFE_INTEGER,
              message: s.toString(e),
            });
          }
          get minValue() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxValue() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
          get isInt() {
            return !!this._def.checks.find(
              (e) =>
                "int" === e.kind ||
                ("multipleOf" === e.kind && r.isInteger(e.value)),
            );
          }
          get isFinite() {
            let e = null,
              t = null;
            for (let n of this._def.checks)
              if (
                "finite" === n.kind ||
                "int" === n.kind ||
                "multipleOf" === n.kind
              )
                return !0;
              else
                "min" === n.kind
                  ? (null === t || n.value > t) && (t = n.value)
                  : "max" === n.kind &&
                    (null === e || n.value < e) &&
                    (e = n.value);
            return Number.isFinite(t) && Number.isFinite(e);
          }
        }
        Q.create = (e) =>
          new Q({
            checks: [],
            typeName: o.ZodNumber,
            coerce: e?.coerce || !1,
            ...T(e),
          });
        class V extends S {
          constructor() {
            super(...arguments), (this.min = this.gte), (this.max = this.lte);
          }
          _parse(e) {
            let t;
            if (this._def.coerce)
              try {
                e.data = BigInt(e.data);
              } catch {
                return this._getInvalidInput(e);
              }
            if (this._getType(e) !== l.bigint) return this._getInvalidInput(e);
            let n = new m();
            for (let i of this._def.checks)
              "min" === i.kind
                ? (i.inclusive ? e.data < i.value : e.data <= i.value) &&
                  (f((t = this._getOrReturnCtx(e, t)), {
                    code: u.too_small,
                    type: "bigint",
                    minimum: i.value,
                    inclusive: i.inclusive,
                    message: i.message,
                  }),
                  n.dirty())
                : "max" === i.kind
                  ? (i.inclusive ? e.data > i.value : e.data >= i.value) &&
                    (f((t = this._getOrReturnCtx(e, t)), {
                      code: u.too_big,
                      type: "bigint",
                      maximum: i.value,
                      inclusive: i.inclusive,
                      message: i.message,
                    }),
                    n.dirty())
                  : "multipleOf" === i.kind
                    ? e.data % i.value !== BigInt(0) &&
                      (f((t = this._getOrReturnCtx(e, t)), {
                        code: u.not_multiple_of,
                        multipleOf: i.value,
                        message: i.message,
                      }),
                      n.dirty())
                    : r.assertNever(i);
            return { status: n.value, value: e.data };
          }
          _getInvalidInput(e) {
            let t = this._getOrReturnCtx(e);
            return (
              f(t, {
                code: u.invalid_type,
                expected: l.bigint,
                received: t.parsedType,
              }),
              g
            );
          }
          gte(e, t) {
            return this.setLimit("min", e, !0, s.toString(t));
          }
          gt(e, t) {
            return this.setLimit("min", e, !1, s.toString(t));
          }
          lte(e, t) {
            return this.setLimit("max", e, !0, s.toString(t));
          }
          lt(e, t) {
            return this.setLimit("max", e, !1, s.toString(t));
          }
          setLimit(e, t, n, r) {
            return new V({
              ...this._def,
              checks: [
                ...this._def.checks,
                { kind: e, value: t, inclusive: n, message: s.toString(r) },
              ],
            });
          }
          _addCheck(e) {
            return new V({ ...this._def, checks: [...this._def.checks, e] });
          }
          positive(e) {
            return this._addCheck({
              kind: "min",
              value: BigInt(0),
              inclusive: !1,
              message: s.toString(e),
            });
          }
          negative(e) {
            return this._addCheck({
              kind: "max",
              value: BigInt(0),
              inclusive: !1,
              message: s.toString(e),
            });
          }
          nonpositive(e) {
            return this._addCheck({
              kind: "max",
              value: BigInt(0),
              inclusive: !0,
              message: s.toString(e),
            });
          }
          nonnegative(e) {
            return this._addCheck({
              kind: "min",
              value: BigInt(0),
              inclusive: !0,
              message: s.toString(e),
            });
          }
          multipleOf(e, t) {
            return this._addCheck({
              kind: "multipleOf",
              value: e,
              message: s.toString(t),
            });
          }
          get minValue() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return e;
          }
          get maxValue() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return e;
          }
        }
        V.create = (e) =>
          new V({
            checks: [],
            typeName: o.ZodBigInt,
            coerce: e?.coerce ?? !1,
            ...T(e),
          });
        class W extends S {
          _parse(e) {
            if (
              (this._def.coerce && (e.data = !!e.data),
              this._getType(e) !== l.boolean)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.boolean,
                  received: t.parsedType,
                }),
                g
              );
            }
            return v(e.data);
          }
        }
        W.create = (e) =>
          new W({ typeName: o.ZodBoolean, coerce: e?.coerce || !1, ...T(e) });
        class Z extends S {
          _parse(e) {
            let t;
            if (
              (this._def.coerce && (e.data = new Date(e.data)),
              this._getType(e) !== l.date)
            ) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.date,
                  received: t.parsedType,
                }),
                g
              );
            }
            if (Number.isNaN(e.data.getTime()))
              return f(this._getOrReturnCtx(e), { code: u.invalid_date }), g;
            let n = new m();
            for (let i of this._def.checks)
              "min" === i.kind
                ? e.data.getTime() < i.value &&
                  (f((t = this._getOrReturnCtx(e, t)), {
                    code: u.too_small,
                    message: i.message,
                    inclusive: !0,
                    exact: !1,
                    minimum: i.value,
                    type: "date",
                  }),
                  n.dirty())
                : "max" === i.kind
                  ? e.data.getTime() > i.value &&
                    (f((t = this._getOrReturnCtx(e, t)), {
                      code: u.too_big,
                      message: i.message,
                      inclusive: !0,
                      exact: !1,
                      maximum: i.value,
                      type: "date",
                    }),
                    n.dirty())
                  : r.assertNever(i);
            return { status: n.value, value: new Date(e.data.getTime()) };
          }
          _addCheck(e) {
            return new Z({ ...this._def, checks: [...this._def.checks, e] });
          }
          min(e, t) {
            return this._addCheck({
              kind: "min",
              value: e.getTime(),
              message: s.toString(t),
            });
          }
          max(e, t) {
            return this._addCheck({
              kind: "max",
              value: e.getTime(),
              message: s.toString(t),
            });
          }
          get minDate() {
            let e = null;
            for (let t of this._def.checks)
              "min" === t.kind && (null === e || t.value > e) && (e = t.value);
            return null != e ? new Date(e) : null;
          }
          get maxDate() {
            let e = null;
            for (let t of this._def.checks)
              "max" === t.kind && (null === e || t.value < e) && (e = t.value);
            return null != e ? new Date(e) : null;
          }
        }
        Z.create = (e) =>
          new Z({
            checks: [],
            coerce: e?.coerce || !1,
            typeName: o.ZodDate,
            ...T(e),
          });
        class G extends S {
          _parse(e) {
            if (this._getType(e) !== l.symbol) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.symbol,
                  received: t.parsedType,
                }),
                g
              );
            }
            return v(e.data);
          }
        }
        G.create = (e) => new G({ typeName: o.ZodSymbol, ...T(e) });
        class Y extends S {
          _parse(e) {
            if (this._getType(e) !== l.undefined) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.undefined,
                  received: t.parsedType,
                }),
                g
              );
            }
            return v(e.data);
          }
        }
        Y.create = (e) => new Y({ typeName: o.ZodUndefined, ...T(e) });
        class K extends S {
          _parse(e) {
            if (this._getType(e) !== l.null) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.null,
                  received: t.parsedType,
                }),
                g
              );
            }
            return v(e.data);
          }
        }
        K.create = (e) => new K({ typeName: o.ZodNull, ...T(e) });
        class X extends S {
          constructor() {
            super(...arguments), (this._any = !0);
          }
          _parse(e) {
            return v(e.data);
          }
        }
        X.create = (e) => new X({ typeName: o.ZodAny, ...T(e) });
        class J extends S {
          constructor() {
            super(...arguments), (this._unknown = !0);
          }
          _parse(e) {
            return v(e.data);
          }
        }
        J.create = (e) => new J({ typeName: o.ZodUnknown, ...T(e) });
        class ee extends S {
          _parse(e) {
            let t = this._getOrReturnCtx(e);
            return (
              f(t, {
                code: u.invalid_type,
                expected: l.never,
                received: t.parsedType,
              }),
              g
            );
          }
        }
        ee.create = (e) => new ee({ typeName: o.ZodNever, ...T(e) });
        class et extends S {
          _parse(e) {
            if (this._getType(e) !== l.undefined) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.void,
                  received: t.parsedType,
                }),
                g
              );
            }
            return v(e.data);
          }
        }
        et.create = (e) => new et({ typeName: o.ZodVoid, ...T(e) });
        class en extends S {
          _parse(e) {
            let { ctx: t, status: n } = this._processInputParams(e),
              r = this._def;
            if (t.parsedType !== l.array)
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.array,
                  received: t.parsedType,
                }),
                g
              );
            if (null !== r.exactLength) {
              let e = t.data.length > r.exactLength.value,
                i = t.data.length < r.exactLength.value;
              (e || i) &&
                (f(t, {
                  code: e ? u.too_big : u.too_small,
                  minimum: i ? r.exactLength.value : void 0,
                  maximum: e ? r.exactLength.value : void 0,
                  type: "array",
                  inclusive: !0,
                  exact: !0,
                  message: r.exactLength.message,
                }),
                n.dirty());
            }
            if (
              (null !== r.minLength &&
                t.data.length < r.minLength.value &&
                (f(t, {
                  code: u.too_small,
                  minimum: r.minLength.value,
                  type: "array",
                  inclusive: !0,
                  exact: !1,
                  message: r.minLength.message,
                }),
                n.dirty()),
              null !== r.maxLength &&
                t.data.length > r.maxLength.value &&
                (f(t, {
                  code: u.too_big,
                  maximum: r.maxLength.value,
                  type: "array",
                  inclusive: !0,
                  exact: !1,
                  message: r.maxLength.message,
                }),
                n.dirty()),
              t.common.async)
            )
              return Promise.all(
                [...t.data].map((e, n) =>
                  r.type._parseAsync(new _(t, e, t.path, n)),
                ),
              ).then((e) => m.mergeArray(n, e));
            let i = [...t.data].map((e, n) =>
              r.type._parseSync(new _(t, e, t.path, n)),
            );
            return m.mergeArray(n, i);
          }
          get element() {
            return this._def.type;
          }
          min(e, t) {
            return new en({
              ...this._def,
              minLength: { value: e, message: s.toString(t) },
            });
          }
          max(e, t) {
            return new en({
              ...this._def,
              maxLength: { value: e, message: s.toString(t) },
            });
          }
          length(e, t) {
            return new en({
              ...this._def,
              exactLength: { value: e, message: s.toString(t) },
            });
          }
          nonempty(e) {
            return this.min(1, e);
          }
        }
        en.create = (e, t) =>
          new en({
            type: e,
            minLength: null,
            maxLength: null,
            exactLength: null,
            typeName: o.ZodArray,
            ...T(t),
          });
        class er extends S {
          constructor() {
            super(...arguments),
              (this._cached = null),
              (this.nonstrict = this.passthrough),
              (this.augment = this.extend);
          }
          _getCached() {
            if (null !== this._cached) return this._cached;
            let e = this._def.shape(),
              t = r.objectKeys(e);
            return (this._cached = { shape: e, keys: t }), this._cached;
          }
          _parse(e) {
            if (this._getType(e) !== l.object) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.object,
                  received: t.parsedType,
                }),
                g
              );
            }
            let { status: t, ctx: n } = this._processInputParams(e),
              { shape: r, keys: i } = this._getCached(),
              s = [];
            if (
              !(
                this._def.catchall instanceof ee &&
                "strip" === this._def.unknownKeys
              )
            )
              for (let e in n.data) i.includes(e) || s.push(e);
            let o = [];
            for (let e of i) {
              let t = r[e],
                i = n.data[e];
              o.push({
                key: { status: "valid", value: e },
                value: t._parse(new _(n, i, n.path, e)),
                alwaysSet: e in n.data,
              });
            }
            if (this._def.catchall instanceof ee) {
              let e = this._def.unknownKeys;
              if ("passthrough" === e)
                for (let e of s)
                  o.push({
                    key: { status: "valid", value: e },
                    value: { status: "valid", value: n.data[e] },
                  });
              else if ("strict" === e)
                s.length > 0 &&
                  (f(n, { code: u.unrecognized_keys, keys: s }), t.dirty());
              else if ("strip" === e);
              else
                throw Error(
                  "Internal ZodObject error: invalid unknownKeys value.",
                );
            } else {
              let e = this._def.catchall;
              for (let t of s) {
                let r = n.data[t];
                o.push({
                  key: { status: "valid", value: t },
                  value: e._parse(new _(n, r, n.path, t)),
                  alwaysSet: t in n.data,
                });
              }
            }
            return n.common.async
              ? Promise.resolve()
                  .then(async () => {
                    let e = [];
                    for (let t of o) {
                      let n = await t.key,
                        r = await t.value;
                      e.push({ key: n, value: r, alwaysSet: t.alwaysSet });
                    }
                    return e;
                  })
                  .then((e) => m.mergeObjectSync(t, e))
              : m.mergeObjectSync(t, o);
          }
          get shape() {
            return this._def.shape();
          }
          strict(e) {
            return (
              s.errToObj,
              new er({
                ...this._def,
                unknownKeys: "strict",
                ...(void 0 !== e
                  ? {
                      errorMap: (t, n) => {
                        let r =
                          this._def.errorMap?.(t, n).message ?? n.defaultError;
                        return "unrecognized_keys" === t.code
                          ? { message: s.errToObj(e).message ?? r }
                          : { message: r };
                      },
                    }
                  : {}),
              })
            );
          }
          strip() {
            return new er({ ...this._def, unknownKeys: "strip" });
          }
          passthrough() {
            return new er({ ...this._def, unknownKeys: "passthrough" });
          }
          extend(e) {
            return new er({
              ...this._def,
              shape: () => ({ ...this._def.shape(), ...e }),
            });
          }
          merge(e) {
            return new er({
              unknownKeys: e._def.unknownKeys,
              catchall: e._def.catchall,
              shape: () => ({ ...this._def.shape(), ...e._def.shape() }),
              typeName: o.ZodObject,
            });
          }
          setKey(e, t) {
            return this.augment({ [e]: t });
          }
          catchall(e) {
            return new er({ ...this._def, catchall: e });
          }
          pick(e) {
            let t = {};
            for (let n of r.objectKeys(e))
              e[n] && this.shape[n] && (t[n] = this.shape[n]);
            return new er({ ...this._def, shape: () => t });
          }
          omit(e) {
            let t = {};
            for (let n of r.objectKeys(this.shape))
              e[n] || (t[n] = this.shape[n]);
            return new er({ ...this._def, shape: () => t });
          }
          deepPartial() {
            return (function e(t) {
              if (t instanceof er) {
                let n = {};
                for (let r in t.shape) {
                  let i = t.shape[r];
                  n[r] = ex.create(e(i));
                }
                return new er({ ...t._def, shape: () => n });
              }
              if (t instanceof en)
                return new en({ ...t._def, type: e(t.element) });
              if (t instanceof ex) return ex.create(e(t.unwrap()));
              if (t instanceof ek) return ek.create(e(t.unwrap()));
              if (t instanceof el) return el.create(t.items.map((t) => e(t)));
              else return t;
            })(this);
          }
          partial(e) {
            let t = {};
            for (let n of r.objectKeys(this.shape)) {
              let r = this.shape[n];
              e && !e[n] ? (t[n] = r) : (t[n] = r.optional());
            }
            return new er({ ...this._def, shape: () => t });
          }
          required(e) {
            let t = {};
            for (let n of r.objectKeys(this.shape))
              if (e && !e[n]) t[n] = this.shape[n];
              else {
                let e = this.shape[n];
                for (; e instanceof ex; ) e = e._def.innerType;
                t[n] = e;
              }
            return new er({ ...this._def, shape: () => t });
          }
          keyof() {
            return em(r.objectKeys(this.shape));
          }
        }
        (er.create = (e, t) =>
          new er({
            shape: () => e,
            unknownKeys: "strip",
            catchall: ee.create(),
            typeName: o.ZodObject,
            ...T(t),
          })),
          (er.strictCreate = (e, t) =>
            new er({
              shape: () => e,
              unknownKeys: "strict",
              catchall: ee.create(),
              typeName: o.ZodObject,
              ...T(t),
            })),
          (er.lazycreate = (e, t) =>
            new er({
              shape: e,
              unknownKeys: "strip",
              catchall: ee.create(),
              typeName: o.ZodObject,
              ...T(t),
            }));
        class ei extends S {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = this._def.options;
            if (t.common.async)
              return Promise.all(
                n.map(async (e) => {
                  let n = {
                    ...t,
                    common: { ...t.common, issues: [] },
                    parent: null,
                  };
                  return {
                    result: await e._parseAsync({
                      data: t.data,
                      path: t.path,
                      parent: n,
                    }),
                    ctx: n,
                  };
                }),
              ).then(function (e) {
                for (let t of e)
                  if ("valid" === t.result.status) return t.result;
                for (let n of e)
                  if ("dirty" === n.result.status)
                    return (
                      t.common.issues.push(...n.ctx.common.issues), n.result
                    );
                let n = e.map((e) => new d(e.ctx.common.issues));
                return f(t, { code: u.invalid_union, unionErrors: n }), g;
              });
            {
              let e,
                r = [];
              for (let i of n) {
                let n = {
                    ...t,
                    common: { ...t.common, issues: [] },
                    parent: null,
                  },
                  s = i._parseSync({ data: t.data, path: t.path, parent: n });
                if ("valid" === s.status) return s;
                "dirty" !== s.status || e || (e = { result: s, ctx: n }),
                  n.common.issues.length && r.push(n.common.issues);
              }
              if (e)
                return t.common.issues.push(...e.ctx.common.issues), e.result;
              let i = r.map((e) => new d(e));
              return f(t, { code: u.invalid_union, unionErrors: i }), g;
            }
          }
          get options() {
            return this._def.options;
          }
        }
        ei.create = (e, t) =>
          new ei({ options: e, typeName: o.ZodUnion, ...T(t) });
        let es = (e) => {
          if (e instanceof ep) return es(e.schema);
          if (e instanceof eb) return es(e.innerType());
          if (e instanceof ef) return [e.value];
          if (e instanceof eg) return e.options;
          if (e instanceof ey) return r.objectValues(e.enum);
          else if (e instanceof ew) return es(e._def.innerType);
          else if (e instanceof Y) return [void 0];
          else if (e instanceof K) return [null];
          else if (e instanceof ex) return [void 0, ...es(e.unwrap())];
          else if (e instanceof ek) return [null, ...es(e.unwrap())];
          else if (e instanceof eT) return es(e.unwrap());
          else if (e instanceof eE) return es(e.unwrap());
          else if (e instanceof e_) return es(e._def.innerType);
          else return [];
        };
        class eo extends S {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            if (t.parsedType !== l.object)
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.object,
                  received: t.parsedType,
                }),
                g
              );
            let n = this.discriminator,
              r = t.data[n],
              i = this.optionsMap.get(r);
            return i
              ? t.common.async
                ? i._parseAsync({ data: t.data, path: t.path, parent: t })
                : i._parseSync({ data: t.data, path: t.path, parent: t })
              : (f(t, {
                  code: u.invalid_union_discriminator,
                  options: Array.from(this.optionsMap.keys()),
                  path: [n],
                }),
                g);
          }
          get discriminator() {
            return this._def.discriminator;
          }
          get options() {
            return this._def.options;
          }
          get optionsMap() {
            return this._def.optionsMap;
          }
          static create(e, t, n) {
            let r = new Map();
            for (let n of t) {
              let t = es(n.shape[e]);
              if (!t.length)
                throw Error(
                  `A discriminator value for key \`${e}\` could not be extracted from all schema options`,
                );
              for (let i of t) {
                if (r.has(i))
                  throw Error(
                    `Discriminator property ${String(e)} has duplicate value ${String(i)}`,
                  );
                r.set(i, n);
              }
            }
            return new eo({
              typeName: o.ZodDiscriminatedUnion,
              discriminator: e,
              options: t,
              optionsMap: r,
              ...T(n),
            });
          }
        }
        class ea extends S {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e),
              i = (e, i) => {
                if (b(e) || b(i)) return g;
                let s = (function e(t, n) {
                  let i = c(t),
                    s = c(n);
                  if (t === n) return { valid: !0, data: t };
                  if (i === l.object && s === l.object) {
                    let i = r.objectKeys(n),
                      s = r.objectKeys(t).filter((e) => -1 !== i.indexOf(e)),
                      o = { ...t, ...n };
                    for (let r of s) {
                      let i = e(t[r], n[r]);
                      if (!i.valid) return { valid: !1 };
                      o[r] = i.data;
                    }
                    return { valid: !0, data: o };
                  }
                  if (i === l.array && s === l.array) {
                    if (t.length !== n.length) return { valid: !1 };
                    let r = [];
                    for (let i = 0; i < t.length; i++) {
                      let s = e(t[i], n[i]);
                      if (!s.valid) return { valid: !1 };
                      r.push(s.data);
                    }
                    return { valid: !0, data: r };
                  }
                  if (i === l.date && s === l.date && +t == +n)
                    return { valid: !0, data: t };
                  return { valid: !1 };
                })(e.value, i.value);
                return s.valid
                  ? ((x(e) || x(i)) && t.dirty(),
                    { status: t.value, value: s.data })
                  : (f(n, { code: u.invalid_intersection_types }), g);
              };
            return n.common.async
              ? Promise.all([
                  this._def.left._parseAsync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                  this._def.right._parseAsync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                ]).then(([e, t]) => i(e, t))
              : i(
                  this._def.left._parseSync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                  this._def.right._parseSync({
                    data: n.data,
                    path: n.path,
                    parent: n,
                  }),
                );
          }
        }
        ea.create = (e, t, n) =>
          new ea({ left: e, right: t, typeName: o.ZodIntersection, ...T(n) });
        class el extends S {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== l.array)
              return (
                f(n, {
                  code: u.invalid_type,
                  expected: l.array,
                  received: n.parsedType,
                }),
                g
              );
            if (n.data.length < this._def.items.length)
              return (
                f(n, {
                  code: u.too_small,
                  minimum: this._def.items.length,
                  inclusive: !0,
                  exact: !1,
                  type: "array",
                }),
                g
              );
            !this._def.rest &&
              n.data.length > this._def.items.length &&
              (f(n, {
                code: u.too_big,
                maximum: this._def.items.length,
                inclusive: !0,
                exact: !1,
                type: "array",
              }),
              t.dirty());
            let r = [...n.data]
              .map((e, t) => {
                let r = this._def.items[t] || this._def.rest;
                return r ? r._parse(new _(n, e, n.path, t)) : null;
              })
              .filter((e) => !!e);
            return n.common.async
              ? Promise.all(r).then((e) => m.mergeArray(t, e))
              : m.mergeArray(t, r);
          }
          get items() {
            return this._def.items;
          }
          rest(e) {
            return new el({ ...this._def, rest: e });
          }
        }
        el.create = (e, t) => {
          if (!Array.isArray(e))
            throw Error(
              "You must pass an array of schemas to z.tuple([ ... ])",
            );
          return new el({
            items: e,
            typeName: o.ZodTuple,
            rest: null,
            ...T(t),
          });
        };
        class ec extends S {
          get keySchema() {
            return this._def.keyType;
          }
          get valueSchema() {
            return this._def.valueType;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== l.object)
              return (
                f(n, {
                  code: u.invalid_type,
                  expected: l.object,
                  received: n.parsedType,
                }),
                g
              );
            let r = [],
              i = this._def.keyType,
              s = this._def.valueType;
            for (let e in n.data)
              r.push({
                key: i._parse(new _(n, e, n.path, e)),
                value: s._parse(new _(n, n.data[e], n.path, e)),
                alwaysSet: e in n.data,
              });
            return n.common.async
              ? m.mergeObjectAsync(t, r)
              : m.mergeObjectSync(t, r);
          }
          get element() {
            return this._def.valueType;
          }
          static create(e, t, n) {
            return new ec(
              t instanceof S
                ? { keyType: e, valueType: t, typeName: o.ZodRecord, ...T(n) }
                : {
                    keyType: H.create(),
                    valueType: e,
                    typeName: o.ZodRecord,
                    ...T(t),
                  },
            );
          }
        }
        class eu extends S {
          get keySchema() {
            return this._def.keyType;
          }
          get valueSchema() {
            return this._def.valueType;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== l.map)
              return (
                f(n, {
                  code: u.invalid_type,
                  expected: l.map,
                  received: n.parsedType,
                }),
                g
              );
            let r = this._def.keyType,
              i = this._def.valueType,
              s = [...n.data.entries()].map(([e, t], s) => ({
                key: r._parse(new _(n, e, n.path, [s, "key"])),
                value: i._parse(new _(n, t, n.path, [s, "value"])),
              }));
            if (n.common.async) {
              let e = new Map();
              return Promise.resolve().then(async () => {
                for (let n of s) {
                  let r = await n.key,
                    i = await n.value;
                  if ("aborted" === r.status || "aborted" === i.status)
                    return g;
                  ("dirty" === r.status || "dirty" === i.status) && t.dirty(),
                    e.set(r.value, i.value);
                }
                return { status: t.value, value: e };
              });
            }
            {
              let e = new Map();
              for (let n of s) {
                let r = n.key,
                  i = n.value;
                if ("aborted" === r.status || "aborted" === i.status) return g;
                ("dirty" === r.status || "dirty" === i.status) && t.dirty(),
                  e.set(r.value, i.value);
              }
              return { status: t.value, value: e };
            }
          }
        }
        eu.create = (e, t, n) =>
          new eu({ valueType: t, keyType: e, typeName: o.ZodMap, ...T(n) });
        class ed extends S {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.parsedType !== l.set)
              return (
                f(n, {
                  code: u.invalid_type,
                  expected: l.set,
                  received: n.parsedType,
                }),
                g
              );
            let r = this._def;
            null !== r.minSize &&
              n.data.size < r.minSize.value &&
              (f(n, {
                code: u.too_small,
                minimum: r.minSize.value,
                type: "set",
                inclusive: !0,
                exact: !1,
                message: r.minSize.message,
              }),
              t.dirty()),
              null !== r.maxSize &&
                n.data.size > r.maxSize.value &&
                (f(n, {
                  code: u.too_big,
                  maximum: r.maxSize.value,
                  type: "set",
                  inclusive: !0,
                  exact: !1,
                  message: r.maxSize.message,
                }),
                t.dirty());
            let i = this._def.valueType;
            function s(e) {
              let n = new Set();
              for (let r of e) {
                if ("aborted" === r.status) return g;
                "dirty" === r.status && t.dirty(), n.add(r.value);
              }
              return { status: t.value, value: n };
            }
            let o = [...n.data.values()].map((e, t) =>
              i._parse(new _(n, e, n.path, t)),
            );
            return n.common.async ? Promise.all(o).then((e) => s(e)) : s(o);
          }
          min(e, t) {
            return new ed({
              ...this._def,
              minSize: { value: e, message: s.toString(t) },
            });
          }
          max(e, t) {
            return new ed({
              ...this._def,
              maxSize: { value: e, message: s.toString(t) },
            });
          }
          size(e, t) {
            return this.min(e, t).max(e, t);
          }
          nonempty(e) {
            return this.min(1, e);
          }
        }
        ed.create = (e, t) =>
          new ed({
            valueType: e,
            minSize: null,
            maxSize: null,
            typeName: o.ZodSet,
            ...T(t),
          });
        class eh extends S {
          constructor() {
            super(...arguments), (this.validate = this.implement);
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            if (t.parsedType !== l.function)
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.function,
                  received: t.parsedType,
                }),
                g
              );
            function n(e, n) {
              return p({
                data: e,
                path: t.path,
                errorMaps: [
                  t.common.contextualErrorMap,
                  t.schemaErrorMap,
                  h,
                  h,
                ].filter((e) => !!e),
                issueData: { code: u.invalid_arguments, argumentsError: n },
              });
            }
            function r(e, n) {
              return p({
                data: e,
                path: t.path,
                errorMaps: [
                  t.common.contextualErrorMap,
                  t.schemaErrorMap,
                  h,
                  h,
                ].filter((e) => !!e),
                issueData: { code: u.invalid_return_type, returnTypeError: n },
              });
            }
            let i = { errorMap: t.common.contextualErrorMap },
              s = t.data;
            if (this._def.returns instanceof ev) {
              let e = this;
              return v(async function (...t) {
                let o = new d([]),
                  a = await e._def.args.parseAsync(t, i).catch((e) => {
                    throw (o.addIssue(n(t, e)), o);
                  }),
                  l = await Reflect.apply(s, this, a);
                return await e._def.returns._def.type
                  .parseAsync(l, i)
                  .catch((e) => {
                    throw (o.addIssue(r(l, e)), o);
                  });
              });
            }
            {
              let e = this;
              return v(function (...t) {
                let o = e._def.args.safeParse(t, i);
                if (!o.success) throw new d([n(t, o.error)]);
                let a = Reflect.apply(s, this, o.data),
                  l = e._def.returns.safeParse(a, i);
                if (!l.success) throw new d([r(a, l.error)]);
                return l.data;
              });
            }
          }
          parameters() {
            return this._def.args;
          }
          returnType() {
            return this._def.returns;
          }
          args(...e) {
            return new eh({
              ...this._def,
              args: el.create(e).rest(J.create()),
            });
          }
          returns(e) {
            return new eh({ ...this._def, returns: e });
          }
          implement(e) {
            return this.parse(e);
          }
          strictImplement(e) {
            return this.parse(e);
          }
          static create(e, t, n) {
            return new eh({
              args: e || el.create([]).rest(J.create()),
              returns: t || J.create(),
              typeName: o.ZodFunction,
              ...T(n),
            });
          }
        }
        class ep extends S {
          get schema() {
            return this._def.getter();
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            return this._def
              .getter()
              ._parse({ data: t.data, path: t.path, parent: t });
          }
        }
        ep.create = (e, t) =>
          new ep({ getter: e, typeName: o.ZodLazy, ...T(t) });
        class ef extends S {
          _parse(e) {
            if (e.data !== this._def.value) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  received: t.data,
                  code: u.invalid_literal,
                  expected: this._def.value,
                }),
                g
              );
            }
            return { status: "valid", value: e.data };
          }
          get value() {
            return this._def.value;
          }
        }
        function em(e, t) {
          return new eg({ values: e, typeName: o.ZodEnum, ...T(t) });
        }
        ef.create = (e, t) =>
          new ef({ value: e, typeName: o.ZodLiteral, ...T(t) });
        class eg extends S {
          _parse(e) {
            if ("string" != typeof e.data) {
              let t = this._getOrReturnCtx(e),
                n = this._def.values;
              return (
                f(t, {
                  expected: r.joinValues(n),
                  received: t.parsedType,
                  code: u.invalid_type,
                }),
                g
              );
            }
            if (
              (this._cache || (this._cache = new Set(this._def.values)),
              !this._cache.has(e.data))
            ) {
              let t = this._getOrReturnCtx(e),
                n = this._def.values;
              return (
                f(t, {
                  received: t.data,
                  code: u.invalid_enum_value,
                  options: n,
                }),
                g
              );
            }
            return v(e.data);
          }
          get options() {
            return this._def.values;
          }
          get enum() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          get Values() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          get Enum() {
            let e = {};
            for (let t of this._def.values) e[t] = t;
            return e;
          }
          extract(e, t = this._def) {
            return eg.create(e, { ...this._def, ...t });
          }
          exclude(e, t = this._def) {
            return eg.create(
              this.options.filter((t) => !e.includes(t)),
              { ...this._def, ...t },
            );
          }
        }
        eg.create = em;
        class ey extends S {
          _parse(e) {
            let t = r.getValidEnumValues(this._def.values),
              n = this._getOrReturnCtx(e);
            if (n.parsedType !== l.string && n.parsedType !== l.number) {
              let e = r.objectValues(t);
              return (
                f(n, {
                  expected: r.joinValues(e),
                  received: n.parsedType,
                  code: u.invalid_type,
                }),
                g
              );
            }
            if (
              (this._cache ||
                (this._cache = new Set(r.getValidEnumValues(this._def.values))),
              !this._cache.has(e.data))
            ) {
              let e = r.objectValues(t);
              return (
                f(n, {
                  received: n.data,
                  code: u.invalid_enum_value,
                  options: e,
                }),
                g
              );
            }
            return v(e.data);
          }
          get enum() {
            return this._def.values;
          }
        }
        ey.create = (e, t) =>
          new ey({ values: e, typeName: o.ZodNativeEnum, ...T(t) });
        class ev extends S {
          unwrap() {
            return this._def.type;
          }
          _parse(e) {
            let { ctx: t } = this._processInputParams(e);
            return t.parsedType !== l.promise && !1 === t.common.async
              ? (f(t, {
                  code: u.invalid_type,
                  expected: l.promise,
                  received: t.parsedType,
                }),
                g)
              : v(
                  (t.parsedType === l.promise
                    ? t.data
                    : Promise.resolve(t.data)
                  ).then((e) =>
                    this._def.type.parseAsync(e, {
                      path: t.path,
                      errorMap: t.common.contextualErrorMap,
                    }),
                  ),
                );
          }
        }
        ev.create = (e, t) =>
          new ev({ type: e, typeName: o.ZodPromise, ...T(t) });
        class eb extends S {
          innerType() {
            return this._def.schema;
          }
          sourceType() {
            return this._def.schema._def.typeName === o.ZodEffects
              ? this._def.schema.sourceType()
              : this._def.schema;
          }
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e),
              i = this._def.effect || null,
              s = {
                addIssue: (e) => {
                  f(n, e), e.fatal ? t.abort() : t.dirty();
                },
                get path() {
                  return n.path;
                },
              };
            if (((s.addIssue = s.addIssue.bind(s)), "preprocess" === i.type)) {
              let e = i.transform(n.data, s);
              if (n.common.async)
                return Promise.resolve(e).then(async (e) => {
                  if ("aborted" === t.value) return g;
                  let r = await this._def.schema._parseAsync({
                    data: e,
                    path: n.path,
                    parent: n,
                  });
                  return "aborted" === r.status
                    ? g
                    : "dirty" === r.status || "dirty" === t.value
                      ? y(r.value)
                      : r;
                });
              {
                if ("aborted" === t.value) return g;
                let r = this._def.schema._parseSync({
                  data: e,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === r.status
                  ? g
                  : "dirty" === r.status || "dirty" === t.value
                    ? y(r.value)
                    : r;
              }
            }
            if ("refinement" === i.type) {
              let e = (e) => {
                let t = i.refinement(e, s);
                if (n.common.async) return Promise.resolve(t);
                if (t instanceof Promise)
                  throw Error(
                    "Async refinement encountered during synchronous parse operation. Use .parseAsync instead.",
                  );
                return e;
              };
              if (!1 !== n.common.async)
                return this._def.schema
                  ._parseAsync({ data: n.data, path: n.path, parent: n })
                  .then((n) =>
                    "aborted" === n.status
                      ? g
                      : ("dirty" === n.status && t.dirty(),
                        e(n.value).then(() => ({
                          status: t.value,
                          value: n.value,
                        }))),
                  );
              {
                let r = this._def.schema._parseSync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === r.status
                  ? g
                  : ("dirty" === r.status && t.dirty(),
                    e(r.value),
                    { status: t.value, value: r.value });
              }
            }
            if ("transform" === i.type)
              if (!1 !== n.common.async)
                return this._def.schema
                  ._parseAsync({ data: n.data, path: n.path, parent: n })
                  .then((e) =>
                    k(e)
                      ? Promise.resolve(i.transform(e.value, s)).then((e) => ({
                          status: t.value,
                          value: e,
                        }))
                      : g,
                  );
              else {
                let e = this._def.schema._parseSync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                if (!k(e)) return g;
                let r = i.transform(e.value, s);
                if (r instanceof Promise)
                  throw Error(
                    "Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.",
                  );
                return { status: t.value, value: r };
              }
            r.assertNever(i);
          }
        }
        (eb.create = (e, t, n) =>
          new eb({ schema: e, typeName: o.ZodEffects, effect: t, ...T(n) })),
          (eb.createWithPreprocess = (e, t, n) =>
            new eb({
              schema: t,
              effect: { type: "preprocess", transform: e },
              typeName: o.ZodEffects,
              ...T(n),
            }));
        class ex extends S {
          _parse(e) {
            return this._getType(e) === l.undefined
              ? v(void 0)
              : this._def.innerType._parse(e);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        ex.create = (e, t) =>
          new ex({ innerType: e, typeName: o.ZodOptional, ...T(t) });
        class ek extends S {
          _parse(e) {
            return this._getType(e) === l.null
              ? v(null)
              : this._def.innerType._parse(e);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        ek.create = (e, t) =>
          new ek({ innerType: e, typeName: o.ZodNullable, ...T(t) });
        class ew extends S {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = t.data;
            return (
              t.parsedType === l.undefined && (n = this._def.defaultValue()),
              this._def.innerType._parse({ data: n, path: t.path, parent: t })
            );
          }
          removeDefault() {
            return this._def.innerType;
          }
        }
        ew.create = (e, t) =>
          new ew({
            innerType: e,
            typeName: o.ZodDefault,
            defaultValue:
              "function" == typeof t.default ? t.default : () => t.default,
            ...T(t),
          });
        class e_ extends S {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = { ...t, common: { ...t.common, issues: [] } },
              r = this._def.innerType._parse({
                data: n.data,
                path: n.path,
                parent: { ...n },
              });
            return w(r)
              ? r.then((e) => ({
                  status: "valid",
                  value:
                    "valid" === e.status
                      ? e.value
                      : this._def.catchValue({
                          get error() {
                            return new d(n.common.issues);
                          },
                          input: n.data,
                        }),
                }))
              : {
                  status: "valid",
                  value:
                    "valid" === r.status
                      ? r.value
                      : this._def.catchValue({
                          get error() {
                            return new d(n.common.issues);
                          },
                          input: n.data,
                        }),
                };
          }
          removeCatch() {
            return this._def.innerType;
          }
        }
        e_.create = (e, t) =>
          new e_({
            innerType: e,
            typeName: o.ZodCatch,
            catchValue: "function" == typeof t.catch ? t.catch : () => t.catch,
            ...T(t),
          });
        class eO extends S {
          _parse(e) {
            if (this._getType(e) !== l.nan) {
              let t = this._getOrReturnCtx(e);
              return (
                f(t, {
                  code: u.invalid_type,
                  expected: l.nan,
                  received: t.parsedType,
                }),
                g
              );
            }
            return { status: "valid", value: e.data };
          }
        }
        (eO.create = (e) => new eO({ typeName: o.ZodNaN, ...T(e) })),
          Symbol("zod_brand");
        class eT extends S {
          _parse(e) {
            let { ctx: t } = this._processInputParams(e),
              n = t.data;
            return this._def.type._parse({ data: n, path: t.path, parent: t });
          }
          unwrap() {
            return this._def.type;
          }
        }
        class eS extends S {
          _parse(e) {
            let { status: t, ctx: n } = this._processInputParams(e);
            if (n.common.async)
              return (async () => {
                let e = await this._def.in._parseAsync({
                  data: n.data,
                  path: n.path,
                  parent: n,
                });
                return "aborted" === e.status
                  ? g
                  : "dirty" === e.status
                    ? (t.dirty(), y(e.value))
                    : this._def.out._parseAsync({
                        data: e.value,
                        path: n.path,
                        parent: n,
                      });
              })();
            {
              let e = this._def.in._parseSync({
                data: n.data,
                path: n.path,
                parent: n,
              });
              return "aborted" === e.status
                ? g
                : "dirty" === e.status
                  ? (t.dirty(), { status: "dirty", value: e.value })
                  : this._def.out._parseSync({
                      data: e.value,
                      path: n.path,
                      parent: n,
                    });
            }
          }
          static create(e, t) {
            return new eS({ in: e, out: t, typeName: o.ZodPipeline });
          }
        }
        class eE extends S {
          _parse(e) {
            let t = this._def.innerType._parse(e),
              n = (e) => (k(e) && (e.value = Object.freeze(e.value)), e);
            return w(t) ? t.then((e) => n(e)) : n(t);
          }
          unwrap() {
            return this._def.innerType;
          }
        }
        (eE.create = (e, t) =>
          new eE({ innerType: e, typeName: o.ZodReadonly, ...T(t) })),
          er.lazycreate,
          (function (e) {
            (e.ZodString = "ZodString"),
              (e.ZodNumber = "ZodNumber"),
              (e.ZodNaN = "ZodNaN"),
              (e.ZodBigInt = "ZodBigInt"),
              (e.ZodBoolean = "ZodBoolean"),
              (e.ZodDate = "ZodDate"),
              (e.ZodSymbol = "ZodSymbol"),
              (e.ZodUndefined = "ZodUndefined"),
              (e.ZodNull = "ZodNull"),
              (e.ZodAny = "ZodAny"),
              (e.ZodUnknown = "ZodUnknown"),
              (e.ZodNever = "ZodNever"),
              (e.ZodVoid = "ZodVoid"),
              (e.ZodArray = "ZodArray"),
              (e.ZodObject = "ZodObject"),
              (e.ZodUnion = "ZodUnion"),
              (e.ZodDiscriminatedUnion = "ZodDiscriminatedUnion"),
              (e.ZodIntersection = "ZodIntersection"),
              (e.ZodTuple = "ZodTuple"),
              (e.ZodRecord = "ZodRecord"),
              (e.ZodMap = "ZodMap"),
              (e.ZodSet = "ZodSet"),
              (e.ZodFunction = "ZodFunction"),
              (e.ZodLazy = "ZodLazy"),
              (e.ZodLiteral = "ZodLiteral"),
              (e.ZodEnum = "ZodEnum"),
              (e.ZodEffects = "ZodEffects"),
              (e.ZodNativeEnum = "ZodNativeEnum"),
              (e.ZodOptional = "ZodOptional"),
              (e.ZodNullable = "ZodNullable"),
              (e.ZodDefault = "ZodDefault"),
              (e.ZodCatch = "ZodCatch"),
              (e.ZodPromise = "ZodPromise"),
              (e.ZodBranded = "ZodBranded"),
              (e.ZodPipeline = "ZodPipeline"),
              (e.ZodReadonly = "ZodReadonly");
          })(o || (o = {}));
        let eC = H.create,
          eA = Q.create;
        eO.create, V.create;
        let eN = W.create;
        Z.create, G.create, Y.create, K.create;
        let eI = X.create;
        J.create, ee.create, et.create;
        let eD = en.create,
          eP = er.create;
        er.strictCreate;
        let eR = ei.create,
          eM = eo.create;
        ea.create, el.create;
        let eL = ec.create;
        eu.create, ed.create, eh.create, ep.create;
        let ej = ef.create,
          eF = eg.create;
        ey.create,
          ev.create,
          eb.create,
          ex.create,
          ek.create,
          eb.createWithPreprocess,
          eS.create;
      },
      99427: (e, t, n) => {
        "use strict";
        n.d(t, { p: () => s });
        var r = n(92858),
          i = n(43758);
        class s extends i.pe {
          static [r.i] = "PgIntColumnBaseBuilder";
          generatedAlwaysAsIdentity(e) {
            if (e) {
              let { name: t, ...n } = e;
              this.config.generatedIdentity = {
                type: "always",
                sequenceName: t,
                sequenceOptions: n,
              };
            } else this.config.generatedIdentity = { type: "always" };
            return (
              (this.config.hasDefault = !0), (this.config.notNull = !0), this
            );
          }
          generatedByDefaultAsIdentity(e) {
            if (e) {
              let { name: t, ...n } = e;
              this.config.generatedIdentity = {
                type: "byDefault",
                sequenceName: t,
                sequenceOptions: n,
              };
            } else this.config.generatedIdentity = { type: "byDefault" };
            return (
              (this.config.hasDefault = !0), (this.config.notNull = !0), this
            );
          }
        }
      },
      99428: (e, t, n) => {
        "use strict";
        n.a(e, async (e, r) => {
          try {
            n.d(t, { y: () => d });
            var i = n(61268),
              s = n(96106),
              o = n(5109),
              a = n(84205),
              l = n(75302),
              c = n(15942);
            n(11743);
            var u = e([c]);
            c = (u.then ? (await u)() : u)[0];
            let d = (0, a.memo)(
              ({
                content: e,
                saveContent: t,
                status: n,
                isCurrentVersion: r,
              }) => {
                let { theme: u } = (0, s.D)(),
                  d = (0, a.useMemo)(() => {
                    if (!e) return Array(50).fill(Array(26).fill(""));
                    let t = (0, o.parse)(e, { skipEmptyLines: !0 }).data.map(
                      (e) => {
                        let t = [...e];
                        for (; t.length < 26; ) t.push("");
                        return t;
                      },
                    );
                    for (; t.length < 50; ) t.push(Array(26).fill(""));
                    return t;
                  }, [e]),
                  h = (0, a.useMemo)(() => {
                    let e = Array.from({ length: 26 }, (e, t) => ({
                      key: t.toString(),
                      name: String.fromCharCode(65 + t),
                      renderEditCell: l.jE,
                      width: 120,
                      cellClass: (0, c.cn)(
                        "border-t dark:bg-zinc-950 dark:text-zinc-50",
                        { "border-l": 0 !== t },
                      ),
                      headerCellClass: (0, c.cn)(
                        "border-t dark:bg-zinc-900 dark:text-zinc-50",
                        { "border-l": 0 !== t },
                      ),
                    }));
                    return [
                      {
                        key: "rowNumber",
                        name: "",
                        frozen: !0,
                        width: 50,
                        renderCell: ({ rowIdx: e }) => e + 1,
                        cellClass:
                          "border-t border-r dark:bg-zinc-950 dark:text-zinc-50",
                        headerCellClass:
                          "border-t border-r dark:bg-zinc-900 dark:text-zinc-50",
                      },
                      ...e,
                    ];
                  }, []),
                  p = (0, a.useMemo)(
                    () =>
                      d.map((e, t) => {
                        let n = { id: t, rowNumber: t + 1 };
                        return (
                          h.slice(1).forEach((t, r) => {
                            n[t.key] = e[r] || "";
                          }),
                          n
                        );
                      }),
                    [d, h],
                  ),
                  [f, m] = (0, a.useState)(p);
                (0, a.useEffect)(() => {
                  m(p);
                }, [p]);
                let g = (e) => (0, o.unparse)(e);
                return (0, i.jsx)(l.Ay, {
                  className: "dark" === u ? "rdg-dark" : "rdg-light",
                  columns: h,
                  rows: f,
                  enableVirtualization: !0,
                  onRowsChange: (e) => {
                    m(e);
                    let n = e.map((e) => h.slice(1).map((t) => e[t.key] || "")),
                      r = g(n);
                    t(r, !0);
                  },
                  onCellClick: (e) => {
                    "rowNumber" !== e.column.key && e.selectCell(!0);
                  },
                  style: { height: "100%" },
                  defaultColumnOptions: { resizable: !0, sortable: !0 },
                });
              },
              function (e, t) {
                return (
                  e.currentVersionIndex === t.currentVersionIndex &&
                  e.isCurrentVersion === t.isCurrentVersion &&
                  ("streaming" !== e.status || "streaming" !== t.status) &&
                  e.content === t.content &&
                  e.saveContent === t.saveContent
                );
              },
            );
            r();
          } catch (e) {
            r(e);
          }
        });
      },
      99439: (e, t, n) => {
        "use strict";
        n.d(t, { P: () => O });
        var r = n(85743),
          i = n(62428),
          s = n(99413);
        function o(e) {
          var t, n;
          return null !=
            (n =
              null == (t = null == e ? void 0 : e.providerMetadata)
                ? void 0
                : t.openaiCompatible)
            ? n
            : {};
        }
        function a({ id: e, model: t, created: n }) {
          return {
            id: null != e ? e : void 0,
            modelId: null != t ? t : void 0,
            timestamp: null != n ? new Date(1e3 * n) : void 0,
          };
        }
        function l(e) {
          switch (e) {
            case "stop":
              return "stop";
            case "length":
              return "length";
            case "content_filter":
              return "content-filter";
            case "function_call":
            case "tool_calls":
              return "tool-calls";
            default:
              return "unknown";
          }
        }
        var c = {
            errorSchema: s.Ik({
              error: s.Ik({
                message: s.Yj(),
                type: s.Yj().nullish(),
                param: s.bz().nullish(),
                code: s.KC([s.Yj(), s.ai()]).nullish(),
              }),
            }),
            errorToMessage: (e) => e.error.message,
          },
          u = class {
            constructor(e, t, n) {
              var r, s;
              (this.specificationVersion = "v1"),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
              let o = null != (r = n.errorStructure) ? r : c;
              (this.chunkSchema = p(o.errorSchema)),
                (this.failedResponseHandler = (0, i.sl)(o)),
                (this.supportsStructuredOutputs =
                  null != (s = n.supportsStructuredOutputs) && s);
            }
            get defaultObjectGenerationMode() {
              return this.config.defaultObjectGenerationMode;
            }
            get provider() {
              return this.config.provider;
            }
            get providerOptionsName() {
              return this.config.provider.split(".")[0].trim();
            }
            getArgs({
              mode: e,
              prompt: t,
              maxTokens: n,
              temperature: s,
              topP: a,
              topK: l,
              frequencyPenalty: c,
              presencePenalty: u,
              providerMetadata: d,
              stopSequences: h,
              responseFormat: p,
              seed: f,
            }) {
              var m, g, y, v, b;
              let x = e.type,
                k = [];
              null != l &&
                k.push({ type: "unsupported-setting", setting: "topK" }),
                (null == p ? void 0 : p.type) !== "json" ||
                  null == p.schema ||
                  this.supportsStructuredOutputs ||
                  k.push({
                    type: "unsupported-setting",
                    setting: "responseFormat",
                    details:
                      "JSON response format schema is only supported with structuredOutputs",
                  });
              let w = {
                model: this.modelId,
                user: this.settings.user,
                max_tokens: n,
                temperature: s,
                top_p: a,
                frequency_penalty: c,
                presence_penalty: u,
                response_format:
                  (null == p ? void 0 : p.type) === "json"
                    ? !0 === this.supportsStructuredOutputs && null != p.schema
                      ? {
                          type: "json_schema",
                          json_schema: {
                            schema: p.schema,
                            name: null != (m = p.name) ? m : "response",
                            description: p.description,
                          },
                        }
                      : { type: "json_object" }
                    : void 0,
                stop: h,
                seed: f,
                ...(null == d ? void 0 : d[this.providerOptionsName]),
                reasoning_effort:
                  null !=
                  (v =
                    null ==
                    (g = null == d ? void 0 : d[this.providerOptionsName])
                      ? void 0
                      : g.reasoningEffort)
                    ? v
                    : null == (y = null == d ? void 0 : d["openai-compatible"])
                      ? void 0
                      : y.reasoningEffort,
                messages: (function (e) {
                  let t = [];
                  for (let { role: n, content: s, ...a } of e) {
                    let e = o({ ...a });
                    switch (n) {
                      case "system":
                        t.push({ role: "system", content: s, ...e });
                        break;
                      case "user":
                        if (1 === s.length && "text" === s[0].type) {
                          t.push({
                            role: "user",
                            content: s[0].text,
                            ...o(s[0]),
                          });
                          break;
                        }
                        t.push({
                          role: "user",
                          content: s.map((e) => {
                            var t;
                            let n = o(e);
                            switch (e.type) {
                              case "text":
                                return { type: "text", text: e.text, ...n };
                              case "image":
                                return {
                                  type: "image_url",
                                  image_url: {
                                    url:
                                      e.image instanceof URL
                                        ? e.image.toString()
                                        : `data:${null != (t = e.mimeType) ? t : "image/jpeg"};base64,${(0, i.n_)(e.image)}`,
                                  },
                                  ...n,
                                };
                              case "file":
                                throw new r.b8({
                                  functionality:
                                    "File content parts in user messages",
                                });
                            }
                          }),
                          ...e,
                        });
                        break;
                      case "assistant": {
                        let n = "",
                          r = [];
                        for (let e of s) {
                          let t = o(e);
                          switch (e.type) {
                            case "text":
                              n += e.text;
                              break;
                            case "tool-call":
                              r.push({
                                id: e.toolCallId,
                                type: "function",
                                function: {
                                  name: e.toolName,
                                  arguments: JSON.stringify(e.args),
                                },
                                ...t,
                              });
                          }
                        }
                        t.push({
                          role: "assistant",
                          content: n,
                          tool_calls: r.length > 0 ? r : void 0,
                          ...e,
                        });
                        break;
                      }
                      case "tool":
                        for (let e of s) {
                          let n = o(e);
                          t.push({
                            role: "tool",
                            tool_call_id: e.toolCallId,
                            content: JSON.stringify(e.result),
                            ...n,
                          });
                        }
                        break;
                      default:
                        throw Error(`Unsupported role: ${n}`);
                    }
                  }
                  return t;
                })(t),
              };
              switch (x) {
                case "regular": {
                  let {
                    tools: t,
                    tool_choice: n,
                    toolWarnings: i,
                  } = (function ({ mode: e, structuredOutputs: t }) {
                    var n;
                    let i = (null == (n = e.tools) ? void 0 : n.length)
                        ? e.tools
                        : void 0,
                      s = [];
                    if (null == i)
                      return {
                        tools: void 0,
                        tool_choice: void 0,
                        toolWarnings: s,
                      };
                    let o = e.toolChoice,
                      a = [];
                    for (let e of i)
                      "provider-defined" === e.type
                        ? s.push({ type: "unsupported-tool", tool: e })
                        : a.push({
                            type: "function",
                            function: {
                              name: e.name,
                              description: e.description,
                              parameters: e.parameters,
                            },
                          });
                    if (null == o)
                      return { tools: a, tool_choice: void 0, toolWarnings: s };
                    let l = o.type;
                    switch (l) {
                      case "auto":
                      case "none":
                      case "required":
                        return { tools: a, tool_choice: l, toolWarnings: s };
                      case "tool":
                        return {
                          tools: a,
                          tool_choice: {
                            type: "function",
                            function: { name: o.toolName },
                          },
                          toolWarnings: s,
                        };
                      default:
                        throw new r.b8({
                          functionality: `Unsupported tool choice type: ${l}`,
                        });
                    }
                  })({
                    mode: e,
                    structuredOutputs: this.supportsStructuredOutputs,
                  });
                  return {
                    args: { ...w, tools: t, tool_choice: n },
                    warnings: [...k, ...i],
                  };
                }
                case "object-json":
                  return {
                    args: {
                      ...w,
                      response_format:
                        !0 === this.supportsStructuredOutputs &&
                        null != e.schema
                          ? {
                              type: "json_schema",
                              json_schema: {
                                schema: e.schema,
                                name: null != (b = e.name) ? b : "response",
                                description: e.description,
                              },
                            }
                          : { type: "json_object" },
                    },
                    warnings: k,
                  };
                case "object-tool":
                  return {
                    args: {
                      ...w,
                      tool_choice: {
                        type: "function",
                        function: { name: e.tool.name },
                      },
                      tools: [
                        {
                          type: "function",
                          function: {
                            name: e.tool.name,
                            description: e.tool.description,
                            parameters: e.tool.parameters,
                          },
                        },
                      ],
                    },
                    warnings: k,
                  };
                default:
                  throw Error(`Unsupported type: ${x}`);
              }
            }
            async doGenerate(e) {
              var t, n, r, s, o, c, u, d, p, f, m;
              let { args: g, warnings: y } = this.getArgs({ ...e }),
                v = JSON.stringify(g),
                {
                  responseHeaders: b,
                  value: x,
                  rawValue: k,
                } = await (0, i.GU)({
                  url: this.config.url({
                    path: "/chat/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, i.m2)(this.config.headers(), e.headers),
                  body: g,
                  failedResponseHandler: this.failedResponseHandler,
                  successfulResponseHandler: (0, i.cV)(h),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { messages: w, ..._ } = g,
                O = x.choices[0],
                T = {
                  [this.providerOptionsName]: {},
                  ...(null ==
                  (n =
                    null == (t = this.config.metadataExtractor)
                      ? void 0
                      : t.extractMetadata)
                    ? void 0
                    : n.call(t, { parsedBody: k })),
                },
                S =
                  null == (r = x.usage) ? void 0 : r.completion_tokens_details,
                E = null == (s = x.usage) ? void 0 : s.prompt_tokens_details;
              return (
                (null == S ? void 0 : S.reasoning_tokens) != null &&
                  (T[this.providerOptionsName].reasoningTokens =
                    null == S ? void 0 : S.reasoning_tokens),
                (null == S ? void 0 : S.accepted_prediction_tokens) != null &&
                  (T[this.providerOptionsName].acceptedPredictionTokens =
                    null == S ? void 0 : S.accepted_prediction_tokens),
                (null == S ? void 0 : S.rejected_prediction_tokens) != null &&
                  (T[this.providerOptionsName].rejectedPredictionTokens =
                    null == S ? void 0 : S.rejected_prediction_tokens),
                (null == E ? void 0 : E.cached_tokens) != null &&
                  (T[this.providerOptionsName].cachedPromptTokens =
                    null == E ? void 0 : E.cached_tokens),
                {
                  text: null != (o = O.message.content) ? o : void 0,
                  reasoning:
                    null != (c = O.message.reasoning_content) ? c : void 0,
                  toolCalls:
                    null == (u = O.message.tool_calls)
                      ? void 0
                      : u.map((e) => {
                          var t;
                          return {
                            toolCallType: "function",
                            toolCallId: null != (t = e.id) ? t : (0, i.$C)(),
                            toolName: e.function.name,
                            args: e.function.arguments,
                          };
                        }),
                  finishReason: l(O.finish_reason),
                  usage: {
                    promptTokens:
                      null !=
                      (p = null == (d = x.usage) ? void 0 : d.prompt_tokens)
                        ? p
                        : NaN,
                    completionTokens:
                      null !=
                      (m = null == (f = x.usage) ? void 0 : f.completion_tokens)
                        ? m
                        : NaN,
                  },
                  providerMetadata: T,
                  rawCall: { rawPrompt: w, rawSettings: _ },
                  rawResponse: { headers: b, body: k },
                  response: a(x),
                  warnings: y,
                  request: { body: v },
                }
              );
            }
            async doStream(e) {
              var t;
              if (this.settings.simulateStreaming) {
                let t = await this.doGenerate(e);
                return {
                  stream: new ReadableStream({
                    start(e) {
                      if (
                        (e.enqueue({
                          type: "response-metadata",
                          ...t.response,
                        }),
                        t.reasoning)
                      )
                        if (Array.isArray(t.reasoning))
                          for (let n of t.reasoning)
                            "text" === n.type &&
                              e.enqueue({
                                type: "reasoning",
                                textDelta: n.text,
                              });
                        else
                          e.enqueue({
                            type: "reasoning",
                            textDelta: t.reasoning,
                          });
                      if (
                        (t.text &&
                          e.enqueue({ type: "text-delta", textDelta: t.text }),
                        t.toolCalls)
                      )
                        for (let n of t.toolCalls)
                          e.enqueue({ type: "tool-call", ...n });
                      e.enqueue({
                        type: "finish",
                        finishReason: t.finishReason,
                        usage: t.usage,
                        logprobs: t.logprobs,
                        providerMetadata: t.providerMetadata,
                      }),
                        e.close();
                    },
                  }),
                  rawCall: t.rawCall,
                  rawResponse: t.rawResponse,
                  warnings: t.warnings,
                };
              }
              let { args: n, warnings: s } = this.getArgs({ ...e }),
                o = {
                  ...n,
                  stream: !0,
                  stream_options: this.config.includeUsage
                    ? { include_usage: !0 }
                    : void 0,
                },
                c =
                  null == (t = this.config.metadataExtractor)
                    ? void 0
                    : t.createStreamExtractor(),
                { responseHeaders: u, value: d } = await (0, i.GU)({
                  url: this.config.url({
                    path: "/chat/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, i.m2)(this.config.headers(), e.headers),
                  body: o,
                  failedResponseHandler: this.failedResponseHandler,
                  successfulResponseHandler: (0, i.Ds)(this.chunkSchema),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { messages: h, ...p } = n,
                f = [],
                m = "unknown",
                g = {
                  completionTokens: void 0,
                  completionTokensDetails: {
                    reasoningTokens: void 0,
                    acceptedPredictionTokens: void 0,
                    rejectedPredictionTokens: void 0,
                  },
                  promptTokens: void 0,
                  promptTokensDetails: { cachedTokens: void 0 },
                },
                y = !0,
                v = this.providerOptionsName;
              return {
                stream: d.pipeThrough(
                  new TransformStream({
                    transform(e, t) {
                      var n, s, o, u, d, h, p, v, b, x, k, w;
                      if (!e.success) {
                        (m = "error"),
                          t.enqueue({ type: "error", error: e.error });
                        return;
                      }
                      let _ = e.value;
                      if (
                        (null == c || c.processChunk(e.rawValue), "error" in _)
                      ) {
                        (m = "error"),
                          t.enqueue({ type: "error", error: _.error.message });
                        return;
                      }
                      if (
                        (y &&
                          ((y = !1),
                          t.enqueue({ type: "response-metadata", ...a(_) })),
                        null != _.usage)
                      ) {
                        let {
                          prompt_tokens: e,
                          completion_tokens: t,
                          prompt_tokens_details: n,
                          completion_tokens_details: r,
                        } = _.usage;
                        (g.promptTokens = null != e ? e : void 0),
                          (g.completionTokens = null != t ? t : void 0),
                          (null == r ? void 0 : r.reasoning_tokens) != null &&
                            (g.completionTokensDetails.reasoningTokens =
                              null == r ? void 0 : r.reasoning_tokens),
                          (null == r ? void 0 : r.accepted_prediction_tokens) !=
                            null &&
                            (g.completionTokensDetails.acceptedPredictionTokens =
                              null == r
                                ? void 0
                                : r.accepted_prediction_tokens),
                          (null == r ? void 0 : r.rejected_prediction_tokens) !=
                            null &&
                            (g.completionTokensDetails.rejectedPredictionTokens =
                              null == r
                                ? void 0
                                : r.rejected_prediction_tokens),
                          (null == n ? void 0 : n.cached_tokens) != null &&
                            (g.promptTokensDetails.cachedTokens =
                              null == n ? void 0 : n.cached_tokens);
                      }
                      let O = _.choices[0];
                      if (
                        ((null == O ? void 0 : O.finish_reason) != null &&
                          (m = l(O.finish_reason)),
                        (null == O ? void 0 : O.delta) == null)
                      )
                        return;
                      let T = O.delta;
                      if (
                        (null != T.reasoning_content &&
                          t.enqueue({
                            type: "reasoning",
                            textDelta: T.reasoning_content,
                          }),
                        null != T.content &&
                          t.enqueue({
                            type: "text-delta",
                            textDelta: T.content,
                          }),
                        null != T.tool_calls)
                      )
                        for (let e of T.tool_calls) {
                          let a = e.index;
                          if (null == f[a]) {
                            if ("function" !== e.type)
                              throw new r.xn({
                                data: e,
                                message: "Expected 'function' type.",
                              });
                            if (null == e.id)
                              throw new r.xn({
                                data: e,
                                message: "Expected 'id' to be a string.",
                              });
                            if (
                              (null == (n = e.function) ? void 0 : n.name) ==
                              null
                            )
                              throw new r.xn({
                                data: e,
                                message:
                                  "Expected 'function.name' to be a string.",
                              });
                            f[a] = {
                              id: e.id,
                              type: "function",
                              function: {
                                name: e.function.name,
                                arguments:
                                  null != (s = e.function.arguments) ? s : "",
                              },
                              hasFinished: !1,
                            };
                            let l = f[a];
                            (null == (o = l.function) ? void 0 : o.name) !=
                              null &&
                              (null == (u = l.function)
                                ? void 0
                                : u.arguments) != null &&
                              (l.function.arguments.length > 0 &&
                                t.enqueue({
                                  type: "tool-call-delta",
                                  toolCallType: "function",
                                  toolCallId: l.id,
                                  toolName: l.function.name,
                                  argsTextDelta: l.function.arguments,
                                }),
                              (0, i.v0)(l.function.arguments) &&
                                (t.enqueue({
                                  type: "tool-call",
                                  toolCallType: "function",
                                  toolCallId:
                                    null != (d = l.id) ? d : (0, i.$C)(),
                                  toolName: l.function.name,
                                  args: l.function.arguments,
                                }),
                                (l.hasFinished = !0)));
                            continue;
                          }
                          let l = f[a];
                          !l.hasFinished &&
                            ((null == (h = e.function)
                              ? void 0
                              : h.arguments) != null &&
                              (l.function.arguments +=
                                null !=
                                (v =
                                  null == (p = e.function)
                                    ? void 0
                                    : p.arguments)
                                  ? v
                                  : ""),
                            t.enqueue({
                              type: "tool-call-delta",
                              toolCallType: "function",
                              toolCallId: l.id,
                              toolName: l.function.name,
                              argsTextDelta:
                                null != (b = e.function.arguments) ? b : "",
                            }),
                            (null == (x = l.function) ? void 0 : x.name) !=
                              null &&
                              (null == (k = l.function)
                                ? void 0
                                : k.arguments) != null &&
                              (0, i.v0)(l.function.arguments) &&
                              (t.enqueue({
                                type: "tool-call",
                                toolCallType: "function",
                                toolCallId:
                                  null != (w = l.id) ? w : (0, i.$C)(),
                                toolName: l.function.name,
                                args: l.function.arguments,
                              }),
                              (l.hasFinished = !0)));
                        }
                    },
                    flush(e) {
                      var t, n;
                      let r = {
                        [v]: {},
                        ...(null == c ? void 0 : c.buildMetadata()),
                      };
                      null != g.completionTokensDetails.reasoningTokens &&
                        (r[v].reasoningTokens =
                          g.completionTokensDetails.reasoningTokens),
                        null !=
                          g.completionTokensDetails.acceptedPredictionTokens &&
                          (r[v].acceptedPredictionTokens =
                            g.completionTokensDetails.acceptedPredictionTokens),
                        null !=
                          g.completionTokensDetails.rejectedPredictionTokens &&
                          (r[v].rejectedPredictionTokens =
                            g.completionTokensDetails.rejectedPredictionTokens),
                        null != g.promptTokensDetails.cachedTokens &&
                          (r[v].cachedPromptTokens =
                            g.promptTokensDetails.cachedTokens),
                        e.enqueue({
                          type: "finish",
                          finishReason: m,
                          usage: {
                            promptTokens:
                              null != (t = g.promptTokens) ? t : NaN,
                            completionTokens:
                              null != (n = g.completionTokens) ? n : NaN,
                          },
                          providerMetadata: r,
                        });
                    },
                  }),
                ),
                rawCall: { rawPrompt: h, rawSettings: p },
                rawResponse: { headers: u },
                warnings: s,
                request: { body: JSON.stringify(o) },
              };
            }
          },
          d = s
            .Ik({
              prompt_tokens: s.ai().nullish(),
              completion_tokens: s.ai().nullish(),
              prompt_tokens_details: s
                .Ik({ cached_tokens: s.ai().nullish() })
                .nullish(),
              completion_tokens_details: s
                .Ik({
                  reasoning_tokens: s.ai().nullish(),
                  accepted_prediction_tokens: s.ai().nullish(),
                  rejected_prediction_tokens: s.ai().nullish(),
                })
                .nullish(),
            })
            .nullish(),
          h = s.Ik({
            id: s.Yj().nullish(),
            created: s.ai().nullish(),
            model: s.Yj().nullish(),
            choices: s.YO(
              s.Ik({
                message: s.Ik({
                  role: s.eu("assistant").nullish(),
                  content: s.Yj().nullish(),
                  reasoning_content: s.Yj().nullish(),
                  tool_calls: s
                    .YO(
                      s.Ik({
                        id: s.Yj().nullish(),
                        type: s.eu("function"),
                        function: s.Ik({ name: s.Yj(), arguments: s.Yj() }),
                      }),
                    )
                    .nullish(),
                }),
                finish_reason: s.Yj().nullish(),
              }),
            ),
            usage: d,
          }),
          p = (e) =>
            s.KC([
              s.Ik({
                id: s.Yj().nullish(),
                created: s.ai().nullish(),
                model: s.Yj().nullish(),
                choices: s.YO(
                  s.Ik({
                    delta: s
                      .Ik({
                        role: s.k5(["assistant"]).nullish(),
                        content: s.Yj().nullish(),
                        reasoning_content: s.Yj().nullish(),
                        tool_calls: s
                          .YO(
                            s.Ik({
                              index: s.ai(),
                              id: s.Yj().nullish(),
                              type: s.eu("function").nullish(),
                              function: s.Ik({
                                name: s.Yj().nullish(),
                                arguments: s.Yj().nullish(),
                              }),
                            }),
                          )
                          .nullish(),
                      })
                      .nullish(),
                    finish_reason: s.Yj().nullish(),
                  }),
                ),
                usage: d,
              }),
              e,
            ]),
          f = class {
            constructor(e, t, n) {
              var r;
              (this.specificationVersion = "v1"),
                (this.defaultObjectGenerationMode = void 0),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
              let s = null != (r = n.errorStructure) ? r : c;
              (this.chunkSchema = g(s.errorSchema)),
                (this.failedResponseHandler = (0, i.sl)(s));
            }
            get provider() {
              return this.config.provider;
            }
            get providerOptionsName() {
              return this.config.provider.split(".")[0].trim();
            }
            getArgs({
              mode: e,
              inputFormat: t,
              prompt: n,
              maxTokens: i,
              temperature: s,
              topP: o,
              topK: a,
              frequencyPenalty: l,
              presencePenalty: c,
              stopSequences: u,
              responseFormat: d,
              seed: h,
              providerMetadata: p,
            }) {
              var f;
              let m = e.type,
                g = [];
              null != a &&
                g.push({ type: "unsupported-setting", setting: "topK" }),
                null != d &&
                  "text" !== d.type &&
                  g.push({
                    type: "unsupported-setting",
                    setting: "responseFormat",
                    details: "JSON response format is not supported.",
                  });
              let { prompt: y, stopSequences: v } = (function ({
                  prompt: e,
                  inputFormat: t,
                  user: n = "user",
                  assistant: i = "assistant",
                }) {
                  if (
                    "prompt" === t &&
                    1 === e.length &&
                    "user" === e[0].role &&
                    1 === e[0].content.length &&
                    "text" === e[0].content[0].type
                  )
                    return { prompt: e[0].content[0].text };
                  let s = "";
                  for (let { role: t, content: o } of ("system" === e[0].role &&
                    ((s += `${e[0].content}

`),
                    (e = e.slice(1))),
                  e))
                    switch (t) {
                      case "system":
                        throw new r.M3({
                          message:
                            "Unexpected system message in prompt: ${content}",
                          prompt: e,
                        });
                      case "user": {
                        let e = o
                          .map((e) => {
                            switch (e.type) {
                              case "text":
                                return e.text;
                              case "image":
                                throw new r.b8({ functionality: "images" });
                            }
                          })
                          .join("");
                        s += `${n}:
${e}

`;
                        break;
                      }
                      case "assistant": {
                        let e = o
                          .map((e) => {
                            switch (e.type) {
                              case "text":
                                return e.text;
                              case "tool-call":
                                throw new r.b8({
                                  functionality: "tool-call messages",
                                });
                            }
                          })
                          .join("");
                        s += `${i}:
${e}

`;
                        break;
                      }
                      case "tool":
                        throw new r.b8({ functionality: "tool messages" });
                      default:
                        throw Error(`Unsupported role: ${t}`);
                    }
                  return {
                    prompt: (s += `${i}:
`),
                    stopSequences: [
                      `
${n}:`,
                    ],
                  };
                })({ prompt: n, inputFormat: t }),
                b = [...(null != v ? v : []), ...(null != u ? u : [])],
                x = {
                  model: this.modelId,
                  echo: this.settings.echo,
                  logit_bias: this.settings.logitBias,
                  suffix: this.settings.suffix,
                  user: this.settings.user,
                  max_tokens: i,
                  temperature: s,
                  top_p: o,
                  frequency_penalty: l,
                  presence_penalty: c,
                  seed: h,
                  ...(null == p ? void 0 : p[this.providerOptionsName]),
                  prompt: y,
                  stop: b.length > 0 ? b : void 0,
                };
              switch (m) {
                case "regular":
                  if (null == (f = e.tools) ? void 0 : f.length)
                    throw new r.b8({ functionality: "tools" });
                  if (e.toolChoice)
                    throw new r.b8({ functionality: "toolChoice" });
                  return { args: x, warnings: g };
                case "object-json":
                  throw new r.b8({ functionality: "object-json mode" });
                case "object-tool":
                  throw new r.b8({ functionality: "object-tool mode" });
                default:
                  throw Error(`Unsupported type: ${m}`);
              }
            }
            async doGenerate(e) {
              var t, n, r, s;
              let { args: o, warnings: c } = this.getArgs(e),
                {
                  responseHeaders: u,
                  value: d,
                  rawValue: h,
                } = await (0, i.GU)({
                  url: this.config.url({
                    path: "/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, i.m2)(this.config.headers(), e.headers),
                  body: o,
                  failedResponseHandler: this.failedResponseHandler,
                  successfulResponseHandler: (0, i.cV)(m),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { prompt: p, ...f } = o,
                g = d.choices[0];
              return {
                text: g.text,
                usage: {
                  promptTokens:
                    null !=
                    (n = null == (t = d.usage) ? void 0 : t.prompt_tokens)
                      ? n
                      : NaN,
                  completionTokens:
                    null !=
                    (s = null == (r = d.usage) ? void 0 : r.completion_tokens)
                      ? s
                      : NaN,
                },
                finishReason: l(g.finish_reason),
                rawCall: { rawPrompt: p, rawSettings: f },
                rawResponse: { headers: u, body: h },
                response: a(d),
                warnings: c,
                request: { body: JSON.stringify(o) },
              };
            }
            async doStream(e) {
              let { args: t, warnings: n } = this.getArgs(e),
                r = {
                  ...t,
                  stream: !0,
                  stream_options: this.config.includeUsage
                    ? { include_usage: !0 }
                    : void 0,
                },
                { responseHeaders: s, value: o } = await (0, i.GU)({
                  url: this.config.url({
                    path: "/completions",
                    modelId: this.modelId,
                  }),
                  headers: (0, i.m2)(this.config.headers(), e.headers),
                  body: r,
                  failedResponseHandler: this.failedResponseHandler,
                  successfulResponseHandler: (0, i.Ds)(this.chunkSchema),
                  abortSignal: e.abortSignal,
                  fetch: this.config.fetch,
                }),
                { prompt: c, ...u } = t,
                d = "unknown",
                h = { promptTokens: Number.NaN, completionTokens: Number.NaN },
                p = !0;
              return {
                stream: o.pipeThrough(
                  new TransformStream({
                    transform(e, t) {
                      if (!e.success) {
                        (d = "error"),
                          t.enqueue({ type: "error", error: e.error });
                        return;
                      }
                      let n = e.value;
                      if ("error" in n) {
                        (d = "error"),
                          t.enqueue({ type: "error", error: n.error });
                        return;
                      }
                      p &&
                        ((p = !1),
                        t.enqueue({ type: "response-metadata", ...a(n) })),
                        null != n.usage &&
                          (h = {
                            promptTokens: n.usage.prompt_tokens,
                            completionTokens: n.usage.completion_tokens,
                          });
                      let r = n.choices[0];
                      (null == r ? void 0 : r.finish_reason) != null &&
                        (d = l(r.finish_reason)),
                        (null == r ? void 0 : r.text) != null &&
                          t.enqueue({ type: "text-delta", textDelta: r.text });
                    },
                    flush(e) {
                      e.enqueue({ type: "finish", finishReason: d, usage: h });
                    },
                  }),
                ),
                rawCall: { rawPrompt: c, rawSettings: u },
                rawResponse: { headers: s },
                warnings: n,
                request: { body: JSON.stringify(r) },
              };
            }
          },
          m = s.Ik({
            id: s.Yj().nullish(),
            created: s.ai().nullish(),
            model: s.Yj().nullish(),
            choices: s.YO(s.Ik({ text: s.Yj(), finish_reason: s.Yj() })),
            usage: s
              .Ik({ prompt_tokens: s.ai(), completion_tokens: s.ai() })
              .nullish(),
          }),
          g = (e) =>
            s.KC([
              s.Ik({
                id: s.Yj().nullish(),
                created: s.ai().nullish(),
                model: s.Yj().nullish(),
                choices: s.YO(
                  s.Ik({
                    text: s.Yj(),
                    finish_reason: s.Yj().nullish(),
                    index: s.ai(),
                  }),
                ),
                usage: s
                  .Ik({ prompt_tokens: s.ai(), completion_tokens: s.ai() })
                  .nullish(),
              }),
              e,
            ]),
          y = class {
            constructor(e, t, n) {
              (this.specificationVersion = "v1"),
                (this.modelId = e),
                (this.settings = t),
                (this.config = n);
            }
            get provider() {
              return this.config.provider;
            }
            get maxEmbeddingsPerCall() {
              var e;
              return null != (e = this.config.maxEmbeddingsPerCall) ? e : 2048;
            }
            get supportsParallelCalls() {
              var e;
              return null == (e = this.config.supportsParallelCalls) || e;
            }
            async doEmbed({ values: e, headers: t, abortSignal: n }) {
              var s;
              if (e.length > this.maxEmbeddingsPerCall)
                throw new r.Ch({
                  provider: this.provider,
                  modelId: this.modelId,
                  maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
                  values: e,
                });
              let { responseHeaders: o, value: a } = await (0, i.GU)({
                url: this.config.url({
                  path: "/embeddings",
                  modelId: this.modelId,
                }),
                headers: (0, i.m2)(this.config.headers(), t),
                body: {
                  model: this.modelId,
                  input: e,
                  encoding_format: "float",
                  dimensions: this.settings.dimensions,
                  user: this.settings.user,
                },
                failedResponseHandler: (0, i.sl)(
                  null != (s = this.config.errorStructure) ? s : c,
                ),
                successfulResponseHandler: (0, i.cV)(v),
                abortSignal: n,
                fetch: this.config.fetch,
              });
              return {
                embeddings: a.data.map((e) => e.embedding),
                usage: a.usage ? { tokens: a.usage.prompt_tokens } : void 0,
                rawResponse: { headers: o },
              };
            }
          },
          v = s.Ik({
            data: s.YO(s.Ik({ embedding: s.YO(s.ai()) })),
            usage: s.Ik({ prompt_tokens: s.ai() }).nullish(),
          }),
          b = s.Ik({ data: s.YO(s.Ik({ b64_json: s.Yj() })) }),
          x = {
            "accounts/fireworks/models/flux-1-dev-fp8": {
              urlFormat: "workflows",
            },
            "accounts/fireworks/models/flux-1-schnell-fp8": {
              urlFormat: "workflows",
            },
            "accounts/fireworks/models/playground-v2-5-1024px-aesthetic": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
            "accounts/fireworks/models/japanese-stable-diffusion-xl": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
            "accounts/fireworks/models/playground-v2-1024px-aesthetic": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
            "accounts/fireworks/models/stable-diffusion-xl-1024-v1-0": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
            "accounts/fireworks/models/SSD-1B": {
              urlFormat: "image_generation",
              supportsSize: !0,
            },
          },
          k = class {
            constructor(e, t, n) {
              (this.modelId = e),
                (this.settings = t),
                (this.config = n),
                (this.specificationVersion = "v1");
            }
            get provider() {
              return this.config.provider;
            }
            get maxImagesPerCall() {
              var e;
              return null != (e = this.settings.maxImagesPerCall) ? e : 1;
            }
            async doGenerate({
              prompt: e,
              n: t,
              size: n,
              aspectRatio: r,
              seed: s,
              providerOptions: o,
              headers: a,
              abortSignal: l,
            }) {
              var c, u, d, h, p, f, m;
              let g = [],
                y = x[this.modelId];
              (null == y ? void 0 : y.supportsSize) ||
                null == n ||
                g.push({
                  type: "unsupported-setting",
                  setting: "size",
                  details:
                    "This model does not support the `size` option. Use `aspectRatio` instead.",
                }),
                (null == y ? void 0 : y.supportsSize) &&
                  null != r &&
                  g.push({
                    type: "unsupported-setting",
                    setting: "aspectRatio",
                    details:
                      "This model does not support the `aspectRatio` option.",
                  });
              let v = null == n ? void 0 : n.split("x"),
                b =
                  null !=
                  (d =
                    null ==
                    (u =
                      null == (c = this.config._internal)
                        ? void 0
                        : c.currentDate)
                      ? void 0
                      : u.call(c))
                    ? d
                    : new Date(),
                { value: k, responseHeaders: w } = await (0, i.GU)({
                  url:
                    ((p = this.config.baseURL),
                    (null == (m = x[(f = this.modelId)])
                      ? void 0
                      : m.urlFormat) === "image_generation"
                      ? `${p}/image_generation/${f}`
                      : `${p}/workflows/${f}/text_to_image`),
                  headers: (0, i.m2)(this.config.headers(), a),
                  body: {
                    prompt: e,
                    aspect_ratio: r,
                    seed: s,
                    samples: t,
                    ...(v && { width: v[0], height: v[1] }),
                    ...(null != (h = o.fireworks) ? h : {}),
                  },
                  failedResponseHandler: (0, i.zt)(),
                  successfulResponseHandler: (0, i.HD)(),
                  abortSignal: l,
                  fetch: this.config.fetch,
                });
              return {
                images: [k],
                warnings: g,
                response: { timestamp: b, modelId: this.modelId, headers: w },
              };
            }
          },
          w = {
            errorSchema: s.Ik({ error: s.Yj() }),
            errorToMessage: (e) => e.error,
          },
          _ = "https://api.fireworks.ai/inference/v1",
          O = (function (e = {}) {
            var t;
            let n = (0, i.ae)(null != (t = e.baseURL) ? t : _),
              r = () => ({
                Authorization: `Bearer ${(0, i.WL)({ apiKey: e.apiKey, environmentVariableName: "FIREWORKS_API_KEY", description: "Fireworks API key" })}`,
                ...e.headers,
              }),
              s = (t) => ({
                provider: `fireworks.${t}`,
                url: ({ path: e }) => `${n}${e}`,
                headers: r,
                fetch: e.fetch,
              }),
              o = (e, t = {}) =>
                new u(e, t, {
                  ...s("chat"),
                  errorStructure: w,
                  defaultObjectGenerationMode: "json",
                }),
              a = (e, t = {}) =>
                new k(e, t, { ...s("image"), baseURL: null != n ? n : _ }),
              l = (e, t) => o(e, t);
            return (
              (l.completionModel = (e, t = {}) =>
                new f(e, t, { ...s("completion"), errorStructure: w })),
              (l.chatModel = o),
              (l.languageModel = o),
              (l.textEmbeddingModel = (e, t = {}) =>
                new y(e, t, { ...s("embedding"), errorStructure: w })),
              (l.image = a),
              (l.imageModel = a),
              l
            );
          })();
      },
      99703: function (e) {
        e.exports = (function () {
          "use strict";
          function e(e) {
            for (var t = 1; t < arguments.length; t++) {
              var n = arguments[t];
              for (var r in n) e[r] = n[r];
            }
            return e;
          }
          return (function t(n, r) {
            function i(t, i, s) {
              if ("undefined" != typeof document) {
                "number" == typeof (s = e({}, r, s)).expires &&
                  (s.expires = new Date(Date.now() + 864e5 * s.expires)),
                  s.expires && (s.expires = s.expires.toUTCString()),
                  (t = encodeURIComponent(t)
                    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
                    .replace(/[()]/g, escape));
                var o = "";
                for (var a in s)
                  s[a] &&
                    ((o += "; " + a),
                    !0 !== s[a] && (o += "=" + s[a].split(";")[0]));
                return (document.cookie = t + "=" + n.write(i, t) + o);
              }
            }
            return Object.create(
              {
                set: i,
                get: function (e) {
                  if (
                    "undefined" != typeof document &&
                    (!arguments.length || e)
                  ) {
                    for (
                      var t = document.cookie
                          ? document.cookie.split("; ")
                          : [],
                        r = {},
                        i = 0;
                      i < t.length;
                      i++
                    ) {
                      var s = t[i].split("="),
                        o = s.slice(1).join("=");
                      try {
                        var a = decodeURIComponent(s[0]);
                        if (((r[a] = n.read(o, a)), e === a)) break;
                      } catch (e) {}
                    }
                    return e ? r[e] : r;
                  }
                },
                remove: function (t, n) {
                  i(t, "", e({}, n, { expires: -1 }));
                },
                withAttributes: function (n) {
                  return t(this.converter, e({}, this.attributes, n));
                },
                withConverter: function (n) {
                  return t(e({}, this.converter, n), this.attributes);
                },
              },
              {
                attributes: { value: Object.freeze(r) },
                converter: { value: Object.freeze(n) },
              },
            );
          })(
            {
              read: function (e) {
                return (
                  '"' === e[0] && (e = e.slice(1, -1)),
                  e.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
                );
              },
              write: function (e) {
                return encodeURIComponent(e).replace(
                  /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
                  decodeURIComponent,
                );
              },
            },
            { path: "/" },
          );
        })();
      },
      99966: (e, t, n) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          !(function (e, t) {
            for (var n in t)
              Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
          })(t, {
            default: function () {
              return v;
            },
            handleClientScriptLoad: function () {
              return m;
            },
            initScriptLoader: function () {
              return g;
            },
          });
        let r = n(17380),
          i = n(88835),
          s = n(61268),
          o = r._(n(90304)),
          a = i._(n(84205)),
          l = n(3954),
          c = n(86327),
          u = n(1523),
          d = new Map(),
          h = new Set(),
          p = (e) => {
            if (o.default.preinit)
              return void e.forEach((e) => {
                o.default.preinit(e, { as: "style" });
              });
          },
          f = (e) => {
            let {
                src: t,
                id: n,
                onLoad: r = () => {},
                onReady: i = null,
                dangerouslySetInnerHTML: s,
                children: o = "",
                strategy: a = "afterInteractive",
                onError: l,
                stylesheets: u,
              } = e,
              f = n || t;
            if (f && h.has(f)) return;
            if (d.has(t)) {
              h.add(f), d.get(t).then(r, l);
              return;
            }
            let m = () => {
                i && i(), h.add(f);
              },
              g = document.createElement("script"),
              y = new Promise((e, t) => {
                g.addEventListener("load", function (t) {
                  e(), r && r.call(this, t), m();
                }),
                  g.addEventListener("error", function (e) {
                    t(e);
                  });
              }).catch(function (e) {
                l && l(e);
              });
            s
              ? ((g.innerHTML = s.__html || ""), m())
              : o
                ? ((g.textContent =
                    "string" == typeof o
                      ? o
                      : Array.isArray(o)
                        ? o.join("")
                        : ""),
                  m())
                : t && ((g.src = t), d.set(t, y)),
              (0, c.setAttributesFromProps)(g, e),
              "worker" === a && g.setAttribute("type", "text/partytown"),
              g.setAttribute("data-nscript", a),
              u && p(u),
              document.body.appendChild(g);
          };
        function m(e) {
          let { strategy: t = "afterInteractive" } = e;
          "lazyOnload" === t
            ? window.addEventListener("load", () => {
                (0, u.requestIdleCallback)(() => f(e));
              })
            : f(e);
        }
        function g(e) {
          e.forEach(m),
            [
              ...document.querySelectorAll(
                '[data-nscript="beforeInteractive"]',
              ),
              ...document.querySelectorAll('[data-nscript="beforePageRender"]'),
            ].forEach((e) => {
              let t = e.id || e.getAttribute("src");
              h.add(t);
            });
        }
        function y(e) {
          let {
              id: t,
              src: n = "",
              onLoad: r = () => {},
              onReady: i = null,
              strategy: c = "afterInteractive",
              onError: d,
              stylesheets: p,
              ...m
            } = e,
            {
              updateScripts: g,
              scripts: y,
              getIsSsr: v,
              appDir: b,
              nonce: x,
            } = (0, a.useContext)(l.HeadManagerContext),
            k = (0, a.useRef)(!1);
          (0, a.useEffect)(() => {
            let e = t || n;
            k.current || (i && e && h.has(e) && i(), (k.current = !0));
          }, [i, t, n]);
          let w = (0, a.useRef)(!1);
          if (
            ((0, a.useEffect)(() => {
              if (!w.current) {
                if ("afterInteractive" === c) f(e);
                else
                  "lazyOnload" === c &&
                    ("complete" === document.readyState
                      ? (0, u.requestIdleCallback)(() => f(e))
                      : window.addEventListener("load", () => {
                          (0, u.requestIdleCallback)(() => f(e));
                        }));
                w.current = !0;
              }
            }, [e, c]),
            ("beforeInteractive" === c || "worker" === c) &&
              (g
                ? ((y[c] = (y[c] || []).concat([
                    { id: t, src: n, onLoad: r, onReady: i, onError: d, ...m },
                  ])),
                  g(y))
                : v && v()
                  ? h.add(t || n)
                  : v && !v() && f(e)),
            b)
          ) {
            if (
              (p &&
                p.forEach((e) => {
                  o.default.preinit(e, { as: "style" });
                }),
              "beforeInteractive" === c)
            )
              if (!n)
                return (
                  m.dangerouslySetInnerHTML &&
                    ((m.children = m.dangerouslySetInnerHTML.__html),
                    delete m.dangerouslySetInnerHTML),
                  (0, s.jsx)("script", {
                    nonce: x,
                    dangerouslySetInnerHTML: {
                      __html:
                        "(self.__next_s=self.__next_s||[]).push(" +
                        JSON.stringify([0, { ...m, id: t }]) +
                        ")",
                    },
                  })
                );
              else
                return (
                  o.default.preload(
                    n,
                    m.integrity
                      ? {
                          as: "script",
                          integrity: m.integrity,
                          nonce: x,
                          crossOrigin: m.crossOrigin,
                        }
                      : { as: "script", nonce: x, crossOrigin: m.crossOrigin },
                  ),
                  (0, s.jsx)("script", {
                    nonce: x,
                    dangerouslySetInnerHTML: {
                      __html:
                        "(self.__next_s=self.__next_s||[]).push(" +
                        JSON.stringify([n, { ...m, id: t }]) +
                        ")",
                    },
                  })
                );
            "afterInteractive" === c &&
              n &&
              o.default.preload(
                n,
                m.integrity
                  ? {
                      as: "script",
                      integrity: m.integrity,
                      nonce: x,
                      crossOrigin: m.crossOrigin,
                    }
                  : { as: "script", nonce: x, crossOrigin: m.crossOrigin },
              );
          }
          return null;
        }
        Object.defineProperty(y, "__nextScript", { value: !0 });
        let v = y;
        ("function" == typeof t.default ||
          ("object" == typeof t.default && null !== t.default)) &&
          void 0 === t.default.__esModule &&
          (Object.defineProperty(t.default, "__esModule", { value: !0 }),
          Object.assign(t.default, t),
          (e.exports = t.default));
      },
    });
  var t = require("../../../webpack-runtime.js");
  t.C(e);
  var n = (e) => t((t.s = e)),
    r = t.X(
      0,
      [
        827, 6518, 2033, 4027, 2872, 7713, 5149, 8859, 1655, 8029, 5728, 9729,
        3390, 4990, 7719, 6188, 7911, 7401, 5124, 7272, 3042, 385, 7393, 4486,
        8119, 7333, 5058, 131, 8342, 2028, 1578, 7826, 3749, 4170, 4307, 9437,
        8264, 27, 4232,
      ],
      () => n(13764),
    );
  module.exports = r;
})();
//# sourceMappingURL=page.js.map
