{"version":3,"file":"3751.js","mappings":"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","sources":["webpack://@hijraah/web/../../node_modules/.pnpm/@opentelemetry+instrumentat_04f370d515cee0be955272f826166073/node_modules/@opentelemetry/instrumentation/build/esm/platform/node/ sync","webpack://@hijraah/web/./src/_infrastructure/repositories/chat-repository.ts","webpack://@hijraah/web/./src/lib/supabase/client.ts","webpack://@hijraah/web/../../node_modules/lodash/lodash.js","webpack://@hijraah/web/./src/lib/utils/case-converter.ts","webpack://@hijraah/web/./src/lib/supabase/server.ts","webpack://@hijraah/web/ignored|E:\\downloads\\Hijraah\\node_modules\\.pnpm\\ws@8.18.2_bufferutil@4.0.9\\node_modules\\ws\\lib|utf-8-validate","webpack://@hijraah/web/./src/_core/chat/entities/chat.ts","webpack://@hijraah/web/./src/types/domain-mappings.ts","webpack://@hijraah/web/./src/_infrastructure/repositories/base-repository.ts","webpack://@hijraah/web/../../node_modules/.pnpm/require-in-the-middle@7.5.2/node_modules/require-in-the-middle/ sync","webpack://@hijraah/web/../../node_modules/.pnpm/@supabase+realtime-js@2.11.10_bufferutil@4.0.9/node_modules/@supabase/realtime-js/dist/main/ sync"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 8963;\nmodule.exports = webpackEmptyContext;","/**\r\n * This file is a stub that re-exports the ChatRepository from its proper location.\r\n * This ensures backward compatibility with components that import it from this location.\r\n */\r\n\r\nimport { Chat } from \"@/_core/chat/entities/chat\";\r\nimport { SupabaseClient } from \"@supabase/supabase-js\";\r\nimport { Database } from \"@/types/database.types\";\r\nimport { BaseRepository, RepositoryOptions } from \"./base-repository\";\r\nimport { toSnakeCase } from \"@/lib/utils/case-converter\";\r\nimport { createSupabaseServiceClient } from \"@/lib/supabase/client\";\r\nimport {\r\n  DomainMapper,\r\n  DBChatSessionRow,\r\n  DBChatMessageRow,\r\n  ChatSessionDomain,\r\n  ChatMessageDomain,\r\n} from \"@/types/domain-mappings\";\r\n\r\n// Use Supabase generated types for DB operations\r\nexport type DBChatSessionInsert =\r\n  Database[\"public\"][\"Tables\"][\"chat_sessions\"][\"Insert\"];\r\nexport type DBChatMessageInsert =\r\n  Database[\"public\"][\"Tables\"][\"chat_messages\"][\"Insert\"];\r\nexport type DBChatAttachmentRow =\r\n  Database[\"public\"][\"Tables\"][\"chat_attachments\"][\"Row\"];\r\n\r\n/**\r\n * ChatRepository provides data access operations for chats\r\n */\r\nexport class ChatRepository extends BaseRepository<\r\n  DBChatSessionRow,\r\n  string,\r\n  \"chat_sessions\"\r\n> {\r\n  constructor(options: RepositoryOptions = {}) {\r\n    super(\"chat_sessions\", options);\r\n  }\r\n\r\n  /**\r\n   * Get a single chat by its ID, and return a domain entity\r\n   * This overrides the base method to return a Chat entity\r\n   */\r\n  async getChatById(id: string): Promise<Chat | null> {\r\n    const record = await super.getById(id);\r\n    if (!record) return null;\r\n    return this.toChatEntity(record);\r\n  }\r\n\r\n  /**\r\n   * Base repository compatibility - returns raw database record\r\n   */\r\n  async getById(id: string): Promise<DBChatSessionRow | null> {\r\n    return await super.getById(id);\r\n  }\r\n\r\n  /**\r\n   * Get all chats for a user\r\n   */\r\n  async getByUserId(\r\n    userId: string,\r\n    options?: {\r\n      limit?: number;\r\n      offset?: number;\r\n      orderBy?: string;\r\n      case_id?: string;\r\n      withMessages?: boolean;\r\n    }\r\n  ): Promise<DBChatSessionRow[]> {\r\n    const client = await this.getClient();\r\n\r\n    let query = client.from(\"chat_sessions\").select(\"*\").eq(\"user_id\", userId);\r\n\r\n    // Filter by case if specified\r\n    if (options?.case_id) {\r\n      query = query.eq(\"case_id\", options.case_id);\r\n    }\r\n\r\n    // Apply ordering with field name mapping\r\n    if (options?.orderBy) {\r\n      const [field, direction] = options.orderBy.split(\":\");\r\n\r\n      // Map camelCase field names to snake_case database column names\r\n      const fieldMapping: Record<string, string> = {\r\n        createdAt: \"created_at\",\r\n        updatedAt: \"updated_at\",\r\n        lastMessageAt: \"last_message_at\",\r\n        userId: \"user_id\",\r\n        caseId: \"case_id\",\r\n        systemPrompt: \"system_prompt\",\r\n        agentConfig: \"agent_config\",\r\n      };\r\n\r\n      const dbField = fieldMapping[field] || field;\r\n      query = query.order(dbField, { ascending: direction !== \"desc\" });\r\n    } else {\r\n      query = query.order(\"last_message_at\", { ascending: false });\r\n    }\r\n\r\n    // Apply pagination\r\n    if (options?.limit) {\r\n      query = query.limit(options.limit);\r\n    }\r\n\r\n    if (options?.offset) {\r\n      query = query.range(\r\n        options.offset,\r\n        options.offset + (options.limit || 10) - 1\r\n      );\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      console.error(\"Error fetching chats by user ID:\", error);\r\n      throw new Error(`Failed to fetch chats: ${error.message}`);\r\n    }\r\n\r\n    return data || [];\r\n  }\r\n\r\n  /**\r\n   * Get messages for a chat session\r\n   */\r\n  async getMessages(chatId: string): Promise<DBChatMessageRow[]> {\r\n    const client = await this.getClient();\r\n\r\n    const { data: messages, error } = await client\r\n      .from(\"chat_messages\")\r\n      .select(\"*\")\r\n      .eq(\"session_id\", chatId)\r\n      .order(\"created_at\", { ascending: true });\r\n\r\n    if (error) {\r\n      console.error(\"Error fetching chat messages:\", error);\r\n      throw new Error(`Failed to fetch chat messages: ${error.message}`);\r\n    }\r\n\r\n    return messages || [];\r\n  }\r\n\r\n  /**\r\n   * Get chat with messages and attachments\r\n   */\r\n  async getWithDetails(chatId: string): Promise<{\r\n    chat: DBChatSessionRow;\r\n    messages: DBChatMessageRow[];\r\n    attachments: DBChatAttachmentRow[];\r\n  } | null> {\r\n    const client = await this.getClient();\r\n\r\n    // Fetch chat\r\n    const { data: chat, error: chatError } = await client\r\n      .from(\"chat_sessions\")\r\n      .select(\"*\")\r\n      .eq(\"id\", chatId)\r\n      .single();\r\n\r\n    if (chatError || !chat) {\r\n      if (chatError && chatError.code === \"PGRST116\") return null; // Record not found\r\n      console.error(\"Error fetching chat:\", chatError);\r\n      return null;\r\n    }\r\n\r\n    // Fetch messages\r\n    const { data: messages, error: messagesError } = await client\r\n      .from(\"chat_messages\")\r\n      .select(\"*\")\r\n      .eq(\"session_id\", chatId)\r\n      .order(\"created_at\", { ascending: true });\r\n\r\n    if (messagesError) {\r\n      console.error(\"Error fetching chat messages:\", messagesError);\r\n      throw new Error(\r\n        `Failed to fetch chat messages: ${messagesError.message}`\r\n      );\r\n    }\r\n\r\n    // Get message IDs to fetch attachments\r\n    const messageIds = (messages || []).map((m) => m.id);\r\n\r\n    // Fetch attachments if there are messages\r\n    let attachments: DBChatAttachmentRow[] = [];\r\n    if (messageIds.length > 0) {\r\n      const { data: attachmentData, error: attachmentsError } = await client\r\n        .from(\"chat_attachments\")\r\n        .select(\"*\")\r\n        .in(\"message_id\", messageIds);\r\n\r\n      if (attachmentsError) {\r\n        console.error(\"Error fetching chat attachments:\", attachmentsError);\r\n        throw new Error(\r\n          `Failed to fetch chat attachments: ${attachmentsError.message}`\r\n        );\r\n      }\r\n\r\n      attachments = attachmentData || [];\r\n    }\r\n\r\n    return {\r\n      chat,\r\n      messages: messages || [],\r\n      attachments,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add a new message to a chat\r\n   */\r\n  async addMessage(\r\n    chatId: string,\r\n    messageData: Omit<DBChatMessageInsert, \"session_id\">\r\n  ): Promise<DBChatMessageRow> {\r\n    const client = await this.getClient();\r\n\r\n    // Prepare the message data\r\n    const payload: DBChatMessageInsert = {\r\n      ...messageData,\r\n      session_id: chatId,\r\n      created_at: messageData.created_at || new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    const { data, error } = await client\r\n      .from(\"chat_messages\")\r\n      .insert(payload)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Error adding chat message:\", error);\r\n      throw new Error(`Failed to add chat message: ${error.message}`);\r\n    }\r\n\r\n    // Update the chat's last_message_at timestamp\r\n    await client\r\n      .from(\"chat_sessions\")\r\n      .update({ last_message_at: new Date().toISOString() })\r\n      .eq(\"id\", chatId);\r\n\r\n    return data;\r\n  }\r\n\r\n  async deleteChat(id: string): Promise<{ success: boolean }> {\r\n    const client = await this.getClient();\r\n\r\n    const { error: messageError } = await client\r\n      .from(\"chat_messages\")\r\n      .delete()\r\n      .eq(\"session_id\", id);\r\n    if (messageError) {\r\n      console.error(\"Error deleting chat messages:\", messageError);\r\n      throw messageError;\r\n    }\r\n\r\n    const { error: sessionError } = await client\r\n      .from(\"chat_sessions\")\r\n      .delete()\r\n      .eq(\"id\", id);\r\n    if (sessionError) {\r\n      console.error(\"Error deleting chat session:\", sessionError);\r\n      throw sessionError;\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  async getMessageCountForUser(userId: string, hours: number): Promise<number> {\r\n    const client = await this.getClient();\r\n    const since = new Date(Date.now() - hours * 60 * 60 * 1000).toISOString();\r\n    const { count, error } = await client\r\n      .from(\"chat_messages\")\r\n      .select(\"*\", { count: \"exact\", head: true })\r\n      .eq(\"user_id\", userId)\r\n      .gte(\"created_at\", since);\r\n\r\n    if (error) {\r\n      console.error(\"Error getting message count for user:\", error);\r\n      throw error;\r\n    }\r\n    return count || 0;\r\n  }\r\n\r\n  async storeStreamId(chatId: string, streamId: string): Promise<void> {\r\n    const client = await this.getClient();\r\n    const { data, error } = await client\r\n      .from(\"chat_sessions\")\r\n      .select(\"context\")\r\n      .eq(\"id\", chatId)\r\n      .single();\r\n\r\n    if (error || !data) {\r\n      console.error(`Chat not found for storing stream ID: ${chatId}`, error);\r\n      return;\r\n    }\r\n\r\n    const context =\r\n      typeof data.context === \"object\" && data.context !== null\r\n        ? (data.context as Record<string, any>)\r\n        : {};\r\n    const streamIds = Array.isArray(context.streamIds) ? context.streamIds : [];\r\n    if (!streamIds.includes(streamId)) {\r\n      streamIds.push(streamId);\r\n    }\r\n    context.streamIds = streamIds;\r\n\r\n    const { error: updateError } = await client\r\n      .from(\"chat_sessions\")\r\n      .update({ context: context as any })\r\n      .eq(\"id\", chatId);\r\n\r\n    if (updateError) {\r\n      console.error(`Error storing stream ID for chat ${chatId}:`, updateError);\r\n    }\r\n  }\r\n\r\n  async getStreamIdsForChat(chatId: string): Promise<string[]> {\r\n    const client = await this.getClient();\r\n    const { data, error } = await client\r\n      .from(\"chat_sessions\")\r\n      .select(\"context\")\r\n      .eq(\"id\", chatId)\r\n      .single();\r\n\r\n    if (error || !data) {\r\n      console.error(`Chat not found for getting stream IDs: ${chatId}`, error);\r\n      return [];\r\n    }\r\n    const context =\r\n      typeof data.context === \"object\" && data.context !== null\r\n        ? (data.context as Record<string, any>)\r\n        : {};\r\n    return context?.streamIds || [];\r\n  }\r\n\r\n  async deleteStreamIdsForChat(chatId: string): Promise<void> {\r\n    const client = await this.getClient();\r\n    const { data, error } = await client\r\n      .from(\"chat_sessions\")\r\n      .select(\"context\")\r\n      .eq(\"id\", chatId)\r\n      .single();\r\n\r\n    if (error || !data) {\r\n      console.error(`Chat not found for deleting stream IDs: ${chatId}`, error);\r\n      return;\r\n    }\r\n\r\n    const context =\r\n      typeof data.context === \"object\" && data.context !== null\r\n        ? (data.context as Record<string, any>)\r\n        : {};\r\n    if (context.streamIds) {\r\n      delete context.streamIds;\r\n      const { error: updateError } = await client\r\n        .from(\"chat_sessions\")\r\n        .update({ context: context as any })\r\n        .eq(\"id\", chatId);\r\n\r\n      if (updateError) {\r\n        console.error(\r\n          `Error deleting stream IDs for chat ${chatId}:`,\r\n          updateError\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert database record to domain entity\r\n   */\r\n  toDomainEntity(record: DBChatSessionRow): DBChatSessionRow {\r\n    // For compatibility with the BaseRepository's typing\r\n    return record;\r\n  }\r\n\r\n  /**\r\n   * Get domain entity from database record (chat model)\r\n   */\r\n  toChatEntity(record: DBChatSessionRow): Chat {\r\n    return Chat.fromDatabase(record);\r\n  }\r\n\r\n  /**\r\n   * Convert database record to domain mapping format\r\n   */\r\n  toChatSessionDomain(record: DBChatSessionRow): ChatSessionDomain {\r\n    return DomainMapper.toChatSessionDomain(record);\r\n  }\r\n\r\n  /**\r\n   * Prepare domain entity for database storage\r\n   */\r\n  fromDomainEntity(entity: Chat): Partial<DBChatSessionRow> {\r\n    const entityObject = entity.toObject();\r\n    const snakeCaseObject = toSnakeCase(\r\n      entityObject\r\n    ) as Partial<DBChatSessionRow>;\r\n    return snakeCaseObject;\r\n  }\r\n\r\n  /**\r\n   * Prepare chat session domain entity for database storage\r\n   */\r\n  fromChatSessionDomain(domain: ChatSessionDomain): Partial<DBChatSessionRow> {\r\n    return DomainMapper.fromChatSessionDomain(domain);\r\n  }\r\n\r\n  /**\r\n   * Map domain entity to database record (alias for fromDomainEntity)\r\n   */\r\n  fromDomainEntityToDbRecord(entity: Chat): Partial<DBChatSessionRow> {\r\n    return this.fromDomainEntity(entity);\r\n  }\r\n\r\n  /**\r\n   * Map database record to domain entity\r\n   */\r\n  mapRecordToDomain(record: DBChatSessionRow): Chat {\r\n    return this.toChatEntity(record);\r\n  }\r\n}\r\n","import {\n  createBrowserClient as _createBrowserClient,\n  createServerClient as _createServerClient,\n} from \"@supabase/ssr\";\nimport {\n  createClient as createSupabaseClient,\n  SupabaseClient,\n  type SupabaseClient as CoreSupabaseClient,\n} from \"@supabase/supabase-js\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport { useMemo } from \"react\";\n\nimport type { Database } from \"@/types/database.types\";\n\nimport type { ReadonlyRequestCookies } from \"next/dist/server/web/spec-extension/adapters/request-cookies\";\n\n// Get fetch from ponyfill to avoid undici issues like 'Failed to execute 'fetch' on 'Window': Invalid name'\n// See: https://github.com/vercel/next.js/issues/54827\nconst { fetch: ponyfetch } = fetchPonyfill();\n\n// Environment variables for Supabase\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n// Type alias for clarity\nexport type TypedSupabaseClient = SupabaseClient<Database>;\nexport type TypedSSRSupabaseClient = CoreSupabaseClient<Database>;\n\n// --------------------------------------\n// Shared header builders\n// --------------------------------------\n\n/**\n * Default headers that must accompany every request made via a browser or server client\n * which authenticates with the anonymous public key.  This prevents 401 responses from\n * PostgREST that indicate the `apikey` header is missing.\n */\nconst anonymousHeaders: Record<string, string> | undefined = supabaseAnonKey\n  ? { apikey: supabaseAnonKey }\n  : undefined;\n\n/**\n * Default headers for the service-role client.  These include the service key as both the\n * `apikey` header and (where relevant) the `Authorization` header is still injected by the\n * libraryʼs internal `fetchWithAuth` helper.\n */\nconst serviceHeaders: Record<string, string> | undefined = serviceRoleKey\n  ? { apikey: serviceRoleKey }\n  : undefined;\n\n// Helper function to check essential env vars\nfunction checkPublicEnvVars() {\n  if (process.env.NODE_ENV === \"development\") {\n    console.debug(\n      \"[Supabase Env] NEXT_PUBLIC_SUPABASE_URL present?\",\n      !!supabaseUrl\n    );\n    console.debug(\n      \"[Supabase Env] NEXT_PUBLIC_SUPABASE_ANON_KEY present?\",\n      !!supabaseAnonKey\n    );\n    console.debug(\n      \"[Supabase Env] SUPABASE_SERVICE_ROLE_KEY present?\",\n      !!serviceRoleKey\n    );\n  }\n  if (!supabaseUrl || !supabaseAnonKey) {\n    console.error(\n      \"Missing environment variables NEXT_PUBLIC_SUPABASE_URL or NEXT_PUBLIC_SUPABASE_ANON_KEY\"\n    );\n    throw new Error(\"Supabase URL or Anon Key is missing.\");\n  }\n}\n\n// --------------------------------------\n// Patch global `fetch` on the **server** to use `ponyfetch`.\n// This avoids the infamous Undici \"Socket closed unexpectedly\" bug on\n// Windows/Node 18-20 without relying on fragile Undici internals.\n// The patch is idempotent and NO-OPs in the browser.\n\nif (typeof window === \"undefined\") {\n  const g = globalThis as any;\n  if (!g.__USING_PONYFETCH__) {\n    g.fetch = ponyfetch as unknown as typeof fetch;\n    g.__USING_PONYFETCH__ = true;\n    console.info(\"[Supabase] Server fetch patched to use ponyfetch ✅\");\n  }\n}\n\n// --- Browser Client (Singleton with Hook) ---\nlet browserClientInstance: TypedSSRSupabaseClient | undefined;\n\nfunction getSupabaseBrowserClient(): TypedSSRSupabaseClient {\n  checkPublicEnvVars();\n  if (browserClientInstance) {\n    return browserClientInstance;\n  }\n\n  // In the browser we rely on the native `fetch` implementation to ensure that\n  // request headers (apikey/Authorization) are preserved. Injecting a ponyfill\n  // here has proven to strip custom headers in certain edge-cases, leading to\n  // 401 \"No API key found\" responses. Therefore we only attach the required\n  // headers and leave `fetch` undefined so @supabase/ssr uses the global one.\n\n  browserClientInstance = _createBrowserClient<Database>(\n    supabaseUrl!,\n    supabaseAnonKey!,\n    {\n      global: {\n        headers: anonymousHeaders,\n      },\n    }\n  );\n\n  if (typeof window !== \"undefined\") {\n    console.debug(\"[Supabase] anon key present?\", !!supabaseAnonKey);\n  }\n\n  return browserClientInstance;\n}\n\n/**\n * Hook to get a Supabase client instance suitable for Browser/Client Components.\n * Uses a singleton pattern to ensure only one client instance is created.\n * Leverages @supabase/ssr for proper session handling with Next.js App Router.\n * @returns Memoized Supabase client instance for browser usage.\n */\nexport function useSupabaseBrowser(): TypedSSRSupabaseClient {\n  return useMemo(getSupabaseBrowserClient, []);\n}\n\n// This is the primary export for creating a browser client directly\nexport function createClient(): TypedSSRSupabaseClient {\n  checkPublicEnvVars();\n  return _createBrowserClient<Database>(supabaseUrl!, supabaseAnonKey!, {\n    global: {\n      headers: anonymousHeaders,\n    },\n  });\n}\n\n// --- Server Client (For Server Components, Route Handlers, Server Actions) ---\n\n/**\n * Creates a Supabase client suitable for use in Server Components, Server Actions,\n * and Route Handlers that require access to cookies.\n * @param cookieStore A ReadonlyRequestCookies instance (e.g., from `next/headers`).\n * @returns Supabase client instance for server-side usage with cookie handling.\n */\nexport function createSupabaseServerClient(\n  cookieStore: ReadonlyRequestCookies\n): TypedSSRSupabaseClient {\n  checkPublicEnvVars();\n  return _createServerClient<Database>(supabaseUrl!, supabaseAnonKey!, {\n    cookies: {\n      get(name: string) {\n        return cookieStore.get(name)?.value;\n      },\n      set(name: string, value: string, options) {\n        try {\n          cookieStore.set(name, value, options);\n        } catch (error) {\n          console.warn(`Failed to set cookie '${name}':`, error);\n        }\n      },\n      remove(name: string, options) {\n        try {\n          cookieStore.set(name, \"\", options);\n        } catch (error) {\n          console.warn(`Failed to remove cookie '${name}':`, error);\n        }\n      },\n    },\n    global: {\n      fetch: ponyfetch,\n      headers: anonymousHeaders,\n    },\n  });\n}\n\n// --- Service Role Client (Admin Operations) ---\n\n/**\n * Creates a Supabase client with the service role key for admin operations.\n * WARNING: This client bypasses RLS. Use only in trusted server-side environments\n * with proper authorization checks. NEVER expose the service role key to the browser.\n * @returns Supabase client instance with service_role privileges.\n */\nexport function createSupabaseServiceClient(): TypedSupabaseClient {\n  if (!supabaseUrl || !serviceRoleKey) {\n    console.error(\"Supabase URL or Service Role Key is missing\");\n    throw new Error(\"Supabase service client configuration is incomplete.\");\n  }\n\n  return createSupabaseClient<Database>(supabaseUrl, serviceRoleKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false,\n    },\n    global: {\n      fetch: ponyfetch,\n      headers: serviceHeaders,\n    },\n  });\n}\n\n// --- Client with Custom Auth Token ---\n\n/**\n * Creates a Supabase client authenticated with a custom JWT token.\n * Useful for scenarios like testing or specific server-to-server interactions.\n * @param authToken JWT token for authentication.\n * @returns Authenticated Supabase client instance.\n */\nexport function createClientWithAuth(authToken: string): TypedSupabaseClient {\n  checkPublicEnvVars();\n  return createSupabaseClient<Database>(supabaseUrl!, supabaseAnonKey!, {\n    auth: {\n      persistSession: false,\n      autoRefreshToken: false,\n      detectSessionInUrl: false,\n    },\n    global: {\n      fetch: ponyfetch,\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        ...(anonymousHeaders ?? {}),\n      },\n    },\n  });\n}\n\n// ======================================\n// EDGE RUNTIME CLIENT\n// ======================================\n\n/**\n * Creates a Supabase client suitable for Edge Runtime environments (e.g., Edge Functions, Middleware).\n * Reads cookies from the Request headers. Requires manual handling for setting/removing cookies\n * via Response headers in the calling Edge function.\n * @param request The Request object from the Edge Function context.\n */\nexport const createEdgeClient = (request: Request): TypedSSRSupabaseClient => {\n  checkPublicEnvVars();\n  const cookieHeader = request.headers.get(\"cookie\") ?? \"\";\n\n  return _createServerClient<Database>(supabaseUrl!, supabaseAnonKey!, {\n    cookies: {\n      get(name: string) {\n        const match = cookieHeader.match(new RegExp(`(^|;)\\s*${name}=([^;]+)`));\n        return match?.[2];\n      },\n      set(name: string, value: string, options) {\n        console.warn(\n          `Attempted to set cookie '${name}' in createEdgeClient. This must be handled by the caller via Response headers.`\n        );\n      },\n      remove(name: string, options) {\n        console.warn(\n          `Attempted to remove cookie '${name}' in createEdgeClient. This must be handled by the caller via Response headers.`\n        );\n      },\n    },\n    global: {\n      fetch: ponyfetch,\n      headers: anonymousHeaders,\n    },\n  });\n};\n\n// --- Remove Deprecated Compatibility Exports ---\n\n/**\n * @deprecated Use `useSupabaseBrowser` in Client Components or `createSupabaseServerClient` in Server Components/Actions/Routes.\n */\nexport const getSupabaseClient = getSupabaseBrowserClient;\n\n/**\n * @deprecated Use `createSupabaseServiceClient` for elevated privilege operations.\n */\nexport const createServiceClient = createSupabaseServiceClient;\n\n/**\n * @deprecated Prefer specific client creation (`useSupabaseBrowser`, `createSupabaseServerClient`, `createSupabaseServiceClient`). Avoid direct default export usage.\n */\nexport const supabase = getSupabaseBrowserClient();\n","export * from \"E:\\\\downloads\\\\Hijraah\\\\node_modules\\\\lodash\\\\lodash.js\"","import { snakeCase, camelCase } from \"lodash\";\r\n\r\n/**\r\n * Converts an object's keys from camelCase to snake_case recursively\r\n * @param obj The object to convert\r\n * @returns The converted object with snake_case keys\r\n */\r\nexport function toSnakeCase<T>(obj: any): T {\r\n  if (Array.isArray(obj)) {\r\n    return obj.map((v) => toSnakeCase(v)) as any;\r\n  }\r\n  if (obj instanceof Date) {\r\n    return obj as any;\r\n  }\r\n  if (typeof obj === \"object\" && obj !== null) {\r\n    const result = Object.keys(obj).reduce(\r\n      (result, key) => ({\r\n        ...result,\r\n        [snakeCase(key)]: toSnakeCase(obj[key]),\r\n      }),\r\n      {} as T\r\n    );\r\n    return result;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Converts an object's keys from snake_case to camelCase recursively\r\n * @param obj The object to convert\r\n * @returns The converted object with camelCase keys\r\n */\r\nexport function toCamelCase<T>(obj: any): T {\r\n  if (Array.isArray(obj)) {\r\n    return obj.map((v) => toCamelCase(v)) as any;\r\n  }\r\n  if (obj instanceof Date) {\r\n    return obj as any;\r\n  }\r\n  if (typeof obj === \"object\" && obj !== null) {\r\n    const result = Object.keys(obj).reduce(\r\n      (result, key) => ({\r\n        ...result,\r\n        [camelCase(key)]: toCamelCase(obj[key]),\r\n      }),\r\n      {} as T\r\n    );\r\n    return result;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Type-safe conversion utilities for database <-> domain entity mapping\r\n */\r\nexport const CaseConverter = {\r\n  toSnakeCase,\r\n  toCamelCase,\r\n} as const;\r\n","/**\r\n * @deprecated This module is deprecated. Please import from '@/_infrastructure/supabase/server' instead.\r\n */\r\n\r\nimport \"server-only\"; // Ensure this module only runs on the server\r\n\r\nimport { cookies } from \"next/headers\";\r\n\r\nimport {\r\n  createSupabaseServerClient as _createServerClient, // Renamed import\r\n  createSupabaseServiceClient, // Direct import\r\n  type TypedSSRSupabaseClient, // Import the type\r\n  type TypedSupabaseClient, // Import the base client type if needed elsewhere\r\n} from \"./client\";\r\n\r\nimport type { ReadonlyRequestCookies } from \"next/dist/server/web/spec-extension/adapters/request-cookies\"; // Import the specific type\r\n\r\n/**\r\n * Get a Supabase client for server-side operations (Server Components, Route Handlers, Server Actions)\r\n * This client uses cookies for authentication.\r\n * @returns Supabase client instance for server-side usage.\r\n */\r\nexport async function getSupabaseServerClient(): Promise<TypedSSRSupabaseClient> {\r\n  const cookieStore = await cookies();\r\n  return _createServerClient(cookieStore);\r\n}\r\n\r\n/**\r\n * Alias for getSupabaseServerClient for convenience.\r\n * @returns Supabase client instance for server-side usage.\r\n */\r\nexport const createClient = getSupabaseServerClient;\r\n\r\n// Export the specific client creation functions as well\r\nexport {\r\n  _createServerClient as createServerSupabaseClient, // Keep original export name if needed elsewhere\r\n  createSupabaseServiceClient, // Export service client\r\n};\r\n\r\n// Optional: Export the type if needed by consumers\r\nexport type { TypedSSRSupabaseClient };\r\n","/* (ignored) */","/**\r\n * Chat domain entity\r\n *\r\n * This entity represents a chat between a user and the AI assistant.\r\n */\r\n\r\nimport {\r\n  DBChatAttachmentRow,\r\n  DBChatMessageRow,\r\n  DBChatSessionRow,\r\n} from \"@/_infrastructure/repositories/chat-repository\";\r\n\r\nexport enum ChatModelType {\r\n  GPT_3_5 = \"gpt-3.5-turbo\",\r\n  GPT_4 = \"gpt-4\",\r\n  GPT_4_VISION = \"gpt-4-vision-preview\",\r\n  CLAUDE_3_SONNET = \"claude-3-sonnet\",\r\n  CLAUDE_3_OPUS = \"claude-3-opus\",\r\n  CLAUDE_3_HAIKU = \"claude-3-haiku\",\r\n}\r\n\r\nexport type ChatVisibility = \"private\" | \"public\" | \"team\";\r\n\r\nexport class ChatMessage {\r\n  id: string;\r\n  chatId: string;\r\n  role: \"user\" | \"assistant\" | \"system\";\r\n  content: string;\r\n  attachments: ChatAttachment[];\r\n  metadata: Record<string, any>;\r\n  createdAt: Date;\r\n\r\n  constructor(data: {\r\n    id: string;\r\n    chatId: string;\r\n    role: \"user\" | \"assistant\" | \"system\";\r\n    content: string;\r\n    attachments?: ChatAttachment[];\r\n    metadata?: Record<string, any>;\r\n    createdAt?: Date;\r\n  }) {\r\n    this.id = data.id;\r\n    this.chatId = data.chatId;\r\n    this.role = data.role;\r\n    this.content = data.content;\r\n    this.attachments = data.attachments || [];\r\n    this.metadata = data.metadata || {};\r\n    this.createdAt = data.createdAt || new Date();\r\n  }\r\n\r\n  static fromDatabase(\r\n    record: DBChatMessageRow,\r\n    attachments: ChatAttachment[] = []\r\n  ): ChatMessage {\r\n    return new ChatMessage({\r\n      id: record.id,\r\n      chatId: record.session_id,\r\n      role: record.role as \"user\" | \"assistant\" | \"system\",\r\n      content: record.content || \"\",\r\n      attachments: attachments.filter((a) => a.messageId === record.id),\r\n      metadata:\r\n        typeof record.metadata === \"object\" && record.metadata\r\n          ? (record.metadata as Record<string, any>)\r\n          : {},\r\n      createdAt: new Date(record.created_at),\r\n    });\r\n  }\r\n}\r\n\r\nexport class ChatAttachment {\r\n  id: string;\r\n  messageId: string;\r\n  type: \"image\" | \"document\" | \"link\";\r\n  fileId: string | null; // Reference to a document in the document system\r\n  url: string | null;\r\n  name: string;\r\n  contentType: string | null;\r\n  size: number | null;\r\n  metadata: Record<string, any>;\r\n  createdAt: Date;\r\n\r\n  constructor(data: {\r\n    id: string;\r\n    messageId: string;\r\n    type: \"image\" | \"document\" | \"link\";\r\n    fileId?: string | null;\r\n    url?: string | null;\r\n    name: string;\r\n    contentType?: string | null;\r\n    size?: number | null;\r\n    metadata?: Record<string, any>;\r\n    createdAt?: Date;\r\n  }) {\r\n    this.id = data.id;\r\n    this.messageId = data.messageId;\r\n    this.type = data.type;\r\n    this.fileId = data.fileId || null;\r\n    this.url = data.url || null;\r\n    this.name = data.name;\r\n    this.contentType = data.contentType || null;\r\n    this.size = data.size || null;\r\n    this.metadata = data.metadata || {};\r\n    this.createdAt = data.createdAt || new Date();\r\n  }\r\n\r\n  static fromDatabase(record: DBChatAttachmentRow): ChatAttachment {\r\n    return new ChatAttachment({\r\n      id: record.id,\r\n      messageId: record.message_id,\r\n      type: record.type as \"image\" | \"document\" | \"link\",\r\n      fileId: record.file_id,\r\n      url: record.url,\r\n      name: record.name,\r\n      contentType: record.content_type,\r\n      size: record.size,\r\n      metadata:\r\n        typeof record.metadata === \"object\" && record.metadata\r\n          ? (record.metadata as Record<string, any>)\r\n          : {},\r\n      createdAt: new Date(record.created_at),\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Chat entity representing conversations with the AI assistant\r\n */\r\nexport class Chat {\r\n  id: string;\r\n  userId: string;\r\n  title: string;\r\n  description: string | null;\r\n  modelType: ChatModelType;\r\n  visibility: ChatVisibility;\r\n  systemPrompt: string | null;\r\n  messages: ChatMessage[];\r\n  case_id: string | null; // Optional association with a case\r\n  metadata: Record<string, any>;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n\r\n  constructor(data: {\r\n    id: string;\r\n    userId: string;\r\n    title: string;\r\n    description?: string | null;\r\n    modelType?: ChatModelType;\r\n    visibility?: ChatVisibility;\r\n    systemPrompt?: string | null;\r\n    messages?: ChatMessage[];\r\n    case_id?: string | null;\r\n    rawMetadata?: Record<string, any> | null;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n  }) {\r\n    this.id = data.id;\r\n    this.userId = data.userId;\r\n    this.title = data.title;\r\n    this.description = data.description || null;\r\n    this.modelType = data.modelType || ChatModelType.GPT_4;\r\n    this.visibility = data.visibility || \"private\";\r\n    this.systemPrompt = data.systemPrompt || null;\r\n    this.messages = data.messages || [];\r\n    this.case_id = data.case_id || null;\r\n    this.metadata = data.rawMetadata || {};\r\n    this.createdAt = data.createdAt || new Date();\r\n    this.updatedAt = data.updatedAt || new Date();\r\n  }\r\n\r\n  /**\r\n   * Add a new message to the chat\r\n   */\r\n  addMessage(message: Omit<ChatMessage, \"chatId\">): Chat {\r\n    const newMessage: ChatMessage = {\r\n      ...message,\r\n      chatId: this.id,\r\n    };\r\n\r\n    this.messages.push(newMessage);\r\n    this.updatedAt = new Date();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the latest message in the chat\r\n   */\r\n  getLatestMessage(): ChatMessage | null {\r\n    if (this.messages.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Sort messages by creation date (newest first)\r\n    const sortedMessages = [...this.messages].sort(\r\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\r\n    );\r\n\r\n    return sortedMessages[0];\r\n  }\r\n\r\n  /**\r\n   * Associate this chat with a case\r\n   */\r\n  assignToCase(case_id: string): Chat {\r\n    this.case_id = case_id;\r\n    this.updatedAt = new Date();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update chat metadata\r\n   */\r\n  updateMetadata(metadata: Record<string, any>): Chat {\r\n    this.metadata = {\r\n      ...this.metadata,\r\n      ...metadata,\r\n    };\r\n    this.updatedAt = new Date();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update chat title and description\r\n   */\r\n  updateDetails(data: {\r\n    title?: string;\r\n    description?: string | null;\r\n    modelType?: ChatModelType;\r\n    visibility?: ChatVisibility;\r\n    systemPrompt?: string | null;\r\n  }): Chat {\r\n    if (data.title !== undefined) this.title = data.title;\r\n    if (data.description !== undefined) this.description = data.description;\r\n    if (data.modelType !== undefined) this.modelType = data.modelType;\r\n    if (data.visibility !== undefined) this.visibility = data.visibility;\r\n    if (data.systemPrompt !== undefined) this.systemPrompt = data.systemPrompt;\r\n\r\n    this.updatedAt = new Date();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Convert the chat to a plain object\r\n   */\r\n  toObject(): Record<string, any> {\r\n    return {\r\n      id: this.id,\r\n      userId: this.userId,\r\n      title: this.title,\r\n      description: this.description,\r\n      modelType: this.modelType,\r\n      visibility: this.visibility,\r\n      systemPrompt: this.systemPrompt,\r\n      messages: this.messages,\r\n      case_id: this.case_id,\r\n      metadata: this.metadata,\r\n      createdAt: this.createdAt,\r\n      updatedAt: this.updatedAt,\r\n    };\r\n  }\r\n\r\n  static fromDatabase(\r\n    record: DBChatSessionRow,\r\n    messages: DBChatMessageRow[] = [],\r\n    attachments: DBChatAttachmentRow[] = []\r\n  ): Chat {\r\n    const metadata =\r\n      typeof record.metadata === \"object\" &&\r\n      record.metadata !== null &&\r\n      !Array.isArray(record.metadata)\r\n        ? (record.metadata as Record<string, any>)\r\n        : {};\r\n\r\n    const chatAttachments = attachments.map(ChatAttachment.fromDatabase);\r\n\r\n    return new Chat({\r\n      id: record.id,\r\n      userId: record.user_id,\r\n      title: record.title || \"Untitled Chat\",\r\n      description: (metadata?.description as string) || null,\r\n      modelType: (record.model as ChatModelType) || ChatModelType.GPT_4,\r\n      visibility: (record.visibility as ChatVisibility) || \"private\",\r\n      systemPrompt: record.system_prompt || null,\r\n      messages: messages.map((m) =>\r\n        ChatMessage.fromDatabase(m, chatAttachments)\r\n      ),\r\n      case_id: record.case_id || null,\r\n      rawMetadata: metadata,\r\n      createdAt: record.created_at ? new Date(record.created_at) : new Date(),\r\n      updatedAt: record.updated_at ? new Date(record.updated_at) : new Date(),\r\n    });\r\n  }\r\n}\r\n","/**\r\n * Domain Type Mappings\r\n *\r\n * This file provides type-safe mappings between Supabase database types (snake_case)\r\n * and our domain entities (camelCase). It serves as the central place for all\r\n * database-to-domain type conversions.\r\n */\r\n\r\nimport { Database, Tables } from \"./database.types\";\r\nimport { toCamelCase, toSnakeCase } from \"@/lib/utils/case-converter\";\r\n\r\n// Database table types\r\nexport type DBChatSessionRow = Tables<\"chat_sessions\">;\r\nexport type DBChatMessageRow = Tables<\"chat_messages\">;\r\nexport type DBDocumentRow = Tables<\"documents\">;\r\nexport type DBCaseRow = Tables<\"cases\">;\r\nexport type DBUserProfileRow = Tables<\"profiles\">;\r\nexport type DBResearchSessionRow = Tables<\"research_sessions\">;\r\n\r\n// Domain entity interfaces that match our business logic\r\nexport interface ChatSessionDomain {\r\n  id: string;\r\n  userId: string;\r\n  title: string | null;\r\n  systemPrompt: string | null;\r\n  context: string | null;\r\n  model: string | null;\r\n  prompt: string | null;\r\n  agentConfig: any | null;\r\n  caseId: string | null;\r\n  lastMessageAt: string | null;\r\n  metadata: any | null;\r\n  visibility: string;\r\n  createdAt: string | null;\r\n  updatedAt: string | null;\r\n}\r\n\r\nexport interface ChatMessageDomain {\r\n  id: string;\r\n  sessionId: string;\r\n  userId: string | null;\r\n  role: string;\r\n  content: string;\r\n  sources: any | null;\r\n  toolCalls: any | null;\r\n  tokens: number | null;\r\n  metadata: any | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface DocumentDomain {\r\n  id: string;\r\n  userId: string | null;\r\n  title: string;\r\n  filename: string;\r\n  filePath: string;\r\n  fileType: string | null;\r\n  fileSize: number | null;\r\n  content: string | null;\r\n  text: string;\r\n  status: string;\r\n  classification: any | null;\r\n  metadata: any | null;\r\n  createdAt: string | null;\r\n  updatedAt: string | null;\r\n}\r\n\r\nexport interface CaseDomain {\r\n  id: string;\r\n  userId: string;\r\n  title: string;\r\n  description: string | null;\r\n  status: Database[\"public\"][\"Enums\"][\"case_status\"];\r\n  metadata: any | null;\r\n  createdAt: string | null;\r\n  updatedAt: string | null;\r\n}\r\n\r\nexport interface UserProfileDomain {\r\n  id: string;\r\n  firstName: string | null;\r\n  lastName: string | null;\r\n  avatarUrl: string | null;\r\n  bio: string | null;\r\n  countryOfCitizenship: string | null;\r\n  countryOfInterest: string | null;\r\n  countryOfResidence: string | null;\r\n  immigrationGoals: string | null;\r\n  language: string | null;\r\n  timezone: string | null;\r\n  visaType: string | null;\r\n  role: Database[\"public\"][\"Enums\"][\"user_role\"] | null;\r\n  isAdmin: boolean | null;\r\n  createdAt: string | null;\r\n  updatedAt: string | null;\r\n}\r\n\r\n/**\r\n * Type-safe mapping functions\r\n */\r\nexport class DomainMapper {\r\n  /**\r\n   * Maps a database chat session row to domain entity\r\n   */\r\n  static toChatSessionDomain(dbRow: DBChatSessionRow): ChatSessionDomain {\r\n    return {\r\n      id: dbRow.id,\r\n      userId: dbRow.user_id,\r\n      title: dbRow.title,\r\n      systemPrompt: dbRow.system_prompt,\r\n      context: dbRow.context,\r\n      model: dbRow.model,\r\n      prompt: dbRow.prompt,\r\n      agentConfig: dbRow.agent_config,\r\n      caseId: dbRow.case_id,\r\n      lastMessageAt: dbRow.last_message_at,\r\n      metadata: dbRow.metadata,\r\n      visibility: dbRow.visibility,\r\n      createdAt: dbRow.created_at,\r\n      updatedAt: dbRow.updated_at,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a domain chat session entity to database row\r\n   */\r\n  static fromChatSessionDomain(\r\n    domain: ChatSessionDomain\r\n  ): Partial<DBChatSessionRow> {\r\n    return {\r\n      id: domain.id,\r\n      user_id: domain.userId,\r\n      title: domain.title,\r\n      system_prompt: domain.systemPrompt,\r\n      context: domain.context,\r\n      model: domain.model,\r\n      prompt: domain.prompt,\r\n      agent_config: domain.agentConfig,\r\n      case_id: domain.caseId,\r\n      last_message_at: domain.lastMessageAt,\r\n      metadata: domain.metadata,\r\n      visibility: domain.visibility,\r\n      created_at: domain.createdAt,\r\n      updated_at: domain.updatedAt,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a database chat message row to domain entity\r\n   */\r\n  static toChatMessageDomain(dbRow: DBChatMessageRow): ChatMessageDomain {\r\n    return {\r\n      id: dbRow.id,\r\n      sessionId: dbRow.session_id,\r\n      userId: dbRow.user_id,\r\n      role: dbRow.role,\r\n      content: dbRow.content,\r\n      sources: dbRow.sources,\r\n      toolCalls: dbRow.tool_calls,\r\n      tokens: dbRow.tokens,\r\n      metadata: dbRow.metadata,\r\n      createdAt: dbRow.created_at,\r\n      updatedAt: dbRow.updated_at,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a domain chat message entity to database row\r\n   */\r\n  static fromChatMessageDomain(\r\n    domain: ChatMessageDomain\r\n  ): Partial<DBChatMessageRow> {\r\n    return {\r\n      id: domain.id,\r\n      session_id: domain.sessionId,\r\n      user_id: domain.userId,\r\n      role: domain.role,\r\n      content: domain.content,\r\n      sources: domain.sources,\r\n      tool_calls: domain.toolCalls,\r\n      tokens: domain.tokens,\r\n      metadata: domain.metadata,\r\n      created_at: domain.createdAt,\r\n      updated_at: domain.updatedAt,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a database document row to domain entity\r\n   */\r\n  static toDocumentDomain(dbRow: DBDocumentRow): DocumentDomain {\r\n    return {\r\n      id: dbRow.id,\r\n      userId: dbRow.user_id,\r\n      title: dbRow.title,\r\n      filename: dbRow.filename,\r\n      filePath: dbRow.file_path,\r\n      fileType: dbRow.file_type,\r\n      fileSize: dbRow.file_size,\r\n      content: dbRow.content,\r\n      text: dbRow.text,\r\n      status: dbRow.status,\r\n      classification: dbRow.classification,\r\n      metadata: dbRow.metadata,\r\n      createdAt: dbRow.created_at,\r\n      updatedAt: dbRow.updated_at,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a domain document entity to database row\r\n   */\r\n  static fromDocumentDomain(domain: DocumentDomain): Partial<DBDocumentRow> {\r\n    return {\r\n      id: domain.id,\r\n      user_id: domain.userId,\r\n      title: domain.title,\r\n      filename: domain.filename,\r\n      file_path: domain.filePath,\r\n      file_type: domain.fileType,\r\n      file_size: domain.fileSize,\r\n      content: domain.content,\r\n      text: domain.text,\r\n      status: domain.status,\r\n      classification: domain.classification,\r\n      metadata: domain.metadata,\r\n      created_at: domain.createdAt,\r\n      updated_at: domain.updatedAt,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a database case row to domain entity\r\n   */\r\n  static toCaseDomain(dbRow: DBCaseRow): CaseDomain {\r\n    return {\r\n      id: dbRow.id,\r\n      userId: dbRow.user_id,\r\n      title: dbRow.title,\r\n      description: dbRow.description,\r\n      status: dbRow.status,\r\n      metadata: dbRow.metadata,\r\n      createdAt: dbRow.created_at,\r\n      updatedAt: dbRow.updated_at,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a domain case entity to database row\r\n   */\r\n  static fromCaseDomain(domain: CaseDomain): Partial<DBCaseRow> {\r\n    return {\r\n      id: domain.id,\r\n      user_id: domain.userId,\r\n      title: domain.title,\r\n      description: domain.description,\r\n      status: domain.status,\r\n      metadata: domain.metadata,\r\n      created_at: domain.createdAt,\r\n      updated_at: domain.updatedAt,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a database user profile row to domain entity\r\n   */\r\n  static toUserProfileDomain(dbRow: DBUserProfileRow): UserProfileDomain {\r\n    return {\r\n      id: dbRow.id,\r\n      firstName: dbRow.first_name,\r\n      lastName: dbRow.last_name,\r\n      avatarUrl: dbRow.avatar_url,\r\n      bio: dbRow.bio,\r\n      countryOfCitizenship: dbRow.country_of_citizenship,\r\n      countryOfInterest: dbRow.country_of_interest,\r\n      countryOfResidence: dbRow.country_of_residence,\r\n      immigrationGoals: dbRow.immigration_goals,\r\n      language: dbRow.language,\r\n      timezone: dbRow.timezone,\r\n      visaType: dbRow.visa_type,\r\n      role: dbRow.role,\r\n      isAdmin: dbRow.is_admin,\r\n      createdAt: dbRow.created_at,\r\n      updatedAt: dbRow.updated_at,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps a domain user profile entity to database row\r\n   */\r\n  static fromUserProfileDomain(\r\n    domain: UserProfileDomain\r\n  ): Partial<DBUserProfileRow> {\r\n    return {\r\n      id: domain.id,\r\n      first_name: domain.firstName,\r\n      last_name: domain.lastName,\r\n      avatar_url: domain.avatarUrl,\r\n      bio: domain.bio,\r\n      country_of_citizenship: domain.countryOfCitizenship,\r\n      country_of_interest: domain.countryOfInterest,\r\n      country_of_residence: domain.countryOfResidence,\r\n      immigration_goals: domain.immigrationGoals,\r\n      language: domain.language,\r\n      timezone: domain.timezone,\r\n      visa_type: domain.visaType,\r\n      role: domain.role,\r\n      is_admin: domain.isAdmin,\r\n      created_at: domain.createdAt,\r\n      updated_at: domain.updatedAt,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generic mapping function using case converter\r\n   * Use when specific mapping isn't available\r\n   */\r\n  static genericToDomain<T>(dbRow: any): T {\r\n    return toCamelCase<T>(dbRow);\r\n  }\r\n\r\n  /**\r\n   * Generic mapping function using case converter\r\n   * Use when specific mapping isn't available\r\n   */\r\n  static genericFromDomain<T>(domain: any): T {\r\n    return toSnakeCase<T>(domain);\r\n  }\r\n}\r\n","import { SupabaseClient } from \"@supabase/supabase-js\";\r\n\r\nimport { createSupabaseServiceClient } from \"@/lib/supabase/server\";\r\nimport { Database } from \"@/types/database.types\";\r\nimport { DomainMapper } from \"@/types/domain-mappings\";\r\n\r\nexport type RepositoryOptions = {\r\n  useServiceRole?: boolean;\r\n};\r\n\r\n/**\r\n * Base Repository interface for data access operations\r\n * T represents the entity type\r\n * K represents the primary key type (usually string or number)\r\n */\r\nexport interface IRepository<T, K = string> {\r\n  /**\r\n   * Retrieve all records of this entity\r\n   */\r\n  getAll(options?: { limit?: number; offset?: number }): Promise<T[]>;\r\n\r\n  /**\r\n   * Retrieve a single record by its ID\r\n   */\r\n  getById(id: K): Promise<T | null>;\r\n\r\n  /**\r\n   * Create a new record\r\n   */\r\n  create(data: Partial<T>): Promise<T>;\r\n\r\n  /**\r\n   * Update an existing record\r\n   */\r\n  update(id: K, data: Partial<T>): Promise<T>;\r\n\r\n  /**\r\n   * Delete a record by its ID\r\n   */\r\n  delete(id: K): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Base Repository implementation using Supabase\r\n */\r\nexport abstract class BaseRepository<\r\n  T,\r\n  K = string,\r\n  TableName extends\r\n    keyof Database[\"public\"][\"Tables\"] = keyof Database[\"public\"][\"Tables\"],\r\n> implements IRepository<T, K>\r\n{\r\n  protected tableName: TableName;\r\n  private static clientInstance: SupabaseClient<Database> | null = null;\r\n\r\n  constructor(tableName: TableName, options: RepositoryOptions = {}) {\r\n    this.tableName = tableName;\r\n  }\r\n\r\n  protected async getClient(): Promise<SupabaseClient<Database>> {\r\n    if (BaseRepository.clientInstance === null) {\r\n      BaseRepository.clientInstance = createSupabaseServiceClient();\r\n    }\r\n    return BaseRepository.clientInstance;\r\n  }\r\n\r\n  /**\r\n   * Retrieve all records of this entity\r\n   */\r\n  async getAll(\r\n    options: { limit?: number; offset?: number } = {}\r\n  ): Promise<T[]> {\r\n    const client = await this.getClient();\r\n    const { data, error } = await client\r\n      .from(this.tableName)\r\n      .select(\"*\")\r\n      .range(\r\n        options.offset || 0,\r\n        (options.offset || 0) + (options.limit || 100) - 1\r\n      );\r\n\r\n    if (error) throw error;\r\n    return data as T[];\r\n  }\r\n\r\n  /**\r\n   * Retrieve a single record by its ID\r\n   */\r\n  async getById(id: K): Promise<T | null> {\r\n    const client = await this.getClient();\r\n    const { data, error } = await client\r\n      .from(this.tableName)\r\n      .select(\"*\")\r\n      .eq(\"id\", id as any)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === \"PGRST116\") return null; // Record not found\r\n      throw error;\r\n    }\r\n    return data as T;\r\n  }\r\n\r\n  /**\r\n   * Create a new record\r\n   */\r\n  async create(data: Partial<T>): Promise<T> {\r\n    const client = await this.getClient();\r\n\r\n    // Log the data being sent to help debug the createdAt issue\r\n    console.log(\r\n      `[BaseRepository.create] Inserting into ${this.tableName}:`,\r\n      JSON.stringify(data, null, 2)\r\n    );\r\n\r\n    const { data: createdData, error } = await client\r\n      .from(this.tableName)\r\n      .insert(data as any)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(`[BaseRepository.create] Error:`, error);\r\n      throw error;\r\n    }\r\n    return createdData as T;\r\n  }\r\n\r\n  /**\r\n   * Update an existing record\r\n   */\r\n  async update(id: K, data: Partial<T>): Promise<T> {\r\n    const client = await this.getClient();\r\n    const { data: updatedData, error } = await client\r\n      .from(this.tableName)\r\n      .update(data as any)\r\n      .eq(\"id\", id as any)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return updatedData as T;\r\n  }\r\n\r\n  /**\r\n   * Delete a record by its ID\r\n   */\r\n  async delete(id: K): Promise<boolean> {\r\n    const client = await this.getClient();\r\n    const { error } = await client\r\n      .from(this.tableName)\r\n      .delete()\r\n      .eq(\"id\", id as any);\r\n\r\n    if (error) throw error;\r\n    return true;\r\n  }\r\n\r\n  // Abstract method to be implemented by subclasses\r\n  abstract toDomainEntity(record: T): T;\r\n  // Optional: abstract fromDomainEntity(entity: T): T;\r\n}\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 96708;\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 97108;\nmodule.exports = webpackEmptyContext;"],"names":["ChatRepository","BaseRepository","constructor","options","getChatById","id","record","getById","toChatEntity","getByUserId","userId","query","client","getClient","from","select","eq","case_id","orderBy","field","direction","split","order","dbField","createdAt","updatedAt","lastMessageAt","caseId","systemPrompt","agentConfig","ascending","limit","offset","range","data","error","console","message","getMessages","chatId","messages","getWithDetails","chat","chatError","single","code","messagesError","messageIds","map","m","attachments","length","attachmentData","attachmentsError","in","addMessage","messageData","payload","session_id","created_at","Date","toISOString","updated_at","insert","update","last_message_at","deleteChat","messageError","delete","sessionError","success","getMessageCountForUser","hours","since","now","count","head","gte","storeStreamId","streamId","context","streamIds","Array","isArray","includes","push","updateError","getStreamIdsForChat","deleteStreamIdsForChat","toDomainEntity","Chat","fromDatabase","toChatSessionDomain","DomainMapper","fromDomainEntity","entity","entityObject","toObject","toSnakeCase","fromChatSessionDomain","domain","fromDomainEntityToDbRecord","mapRecordToDomain","browserClientInstance","fetch","ponyfetch","fetchPonyfill","supabaseUrl","process","supabaseAnonKey","serviceRoleKey","env","SUPABASE_SERVICE_ROLE_KEY","anonymousHeaders","apikey","undefined","serviceHeaders","checkPublicEnvVars","g","globalThis","__USING_PONYFETCH__","getSupabaseBrowserClient","_createBrowserClient","global","headers","createClient","createSupabaseServerClient","cookieStore","_createServerClient","cookies","get","name","value","set","warn","remove","createSupabaseServiceClient","Error","createSupabaseClient","auth","autoRefreshToken","persistSession","createEdgeClient","request","cookieHeader","match","createServiceClient","supabase","toCamelCase","obj","v","Object","keys","reduce","result","key","camelCase","snakeCase","getSupabaseServerClient","ChatModelType","ChatMessage","role","content","metadata","filter","a","messageId","ChatAttachment","type","fileId","url","contentType","size","message_id","file_id","content_type","title","description","modelType","visibility","rawMetadata","newMessage","getLatestMessage","sort","b","getTime","assignToCase","updateMetadata","updateDetails","chatAttachments","user_id","model","system_prompt","dbRow","prompt","agent_config","toChatMessageDomain","sessionId","sources","toolCalls","tool_calls","tokens","fromChatMessageDomain","toDocumentDomain","filename","filePath","file_path","fileType","file_type","fileSize","file_size","text","status","classification","fromDocumentDomain","toCaseDomain","fromCaseDomain","toUserProfileDomain","firstName","first_name","lastName","last_name","avatarUrl","avatar_url","bio","countryOfCitizenship","country_of_citizenship","countryOfInterest","country_of_interest","countryOfResidence","country_of_residence","immigrationGoals","immigration_goals","language","timezone","visaType","visa_type","isAdmin","is_admin","fromUserProfileDomain","genericToDomain","genericFromDomain","clientInstance","tableName","getAll","create","createdData","updatedData"],"sourceRoot":""}