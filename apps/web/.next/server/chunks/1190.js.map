{"version":3,"file":"1190.js","mappings":"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","sources":["webpack://@hijraah/web/./src/lib/auth/guest.ts","webpack://@hijraah/web/./src/lib/auth-config.ts","webpack://@hijraah/web/./src/lib/auth/errors.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { cookies } from \"next/headers\";\r\nimport { AuthError } from \"./errors\";\r\nimport { ExtendedUser } from \"@/types/auth\";\r\nimport { aiChatbotUser } from \"@hijraah/database/schema\";\r\nimport { eq } from \"drizzle-orm\";\r\nimport { drizzle } from \"drizzle-orm/postgres-js\";\r\nimport { Client } from \"pg\";\r\nimport type { Database } from \"@/types/database.types\";\r\n\r\n// Context7 - Provider Isolation: Guest user patterns\r\nexport const GUEST_EMAIL_PATTERN = /^guest_[a-f0-9]{16}@guest\\.local$/;\r\nexport const GUEST_USER_PREFIX = \"guest_\";\r\nexport const GUEST_DOMAIN = \"guest.local\";\r\n\r\n// Guest user type definition with Context7 observability\r\nexport interface GuestUser {\r\n  id: string;\r\n  email: string;\r\n  type: \"guest\";\r\n  isTemporary: boolean;\r\n  createdAt: Date;\r\n  expiresAt?: Date;\r\n  metadata?: {\r\n    sessionId?: string;\r\n    userAgent?: string;\r\n    ipAddress?: string;\r\n  };\r\n}\r\n\r\n// Extended user type with guest support for Supabase Auth\r\nexport type UserWithGuest = ExtendedUser & {\r\n  userType?: \"guest\" | \"regular\";\r\n  isGuest?: boolean;\r\n  guestSessionId?: string;\r\n};\r\n\r\n/**\r\n * Check if an email matches the guest pattern\r\n * Context7 - Data validation\r\n */\r\nexport function isGuestEmail(email: string): boolean {\r\n  return GUEST_EMAIL_PATTERN.test(email);\r\n}\r\n\r\n/**\r\n * Check if a user is a guest user\r\n * Context7 - Type safety and validation\r\n */\r\nexport function isGuestUser(user: ExtendedUser | null): boolean {\r\n  if (!user?.email) return false;\r\n  return isGuestEmail(user.email);\r\n}\r\n\r\n/**\r\n * Generate a unique guest email\r\n * Context7 - Predictable and traceable ID generation\r\n */\r\nexport function generateGuestEmail(): string {\r\n  const timestamp = Date.now().toString(16);\r\n  const random = Math.random().toString(16).substring(2, 10);\r\n  return `${GUEST_USER_PREFIX}${timestamp}${random}@${GUEST_DOMAIN}`;\r\n}\r\n\r\n/**\r\n * Create a guest user in the ai-chatbot compatibility table\r\n * Context7 - Data-as-Code: Consistent database operations\r\n * @server-only\r\n */\r\nexport async function createGuestUser(): Promise<{\r\n  id: string;\r\n  email: string;\r\n}> {\r\n  try {\r\n    // Generate guest credentials\r\n    const guestEmail = generateGuestEmail();\r\n\r\n    // Get database connection\r\n    const connectionString = process.env.DATABASE_URL;\r\n    if (!connectionString) {\r\n      throw new AuthError(\"Database connection not configured\");\r\n    }\r\n\r\n    const client = postgres.default(connectionString);\r\n    const db = drizzle(client);\r\n\r\n    // Insert into ai-chatbot User table for compatibility\r\n    const [guestUser] = await db\r\n      .insert(aiChatbotUser)\r\n      .values({\r\n        email: guestEmail,\r\n        password: null, // Guest users don't have passwords\r\n      })\r\n      .returning({ id: aiChatbotUser.id, email: aiChatbotUser.email });\r\n\r\n    await client.end();\r\n\r\n    if (!guestUser) {\r\n      throw new AuthError(\"Failed to create guest user\");\r\n    }\r\n\r\n    // Context7 - Observability: Log guest user creation\r\n    console.log(\"Guest user created:\", guestUser.id, guestUser.email);\r\n\r\n    return {\r\n      id: guestUser.id,\r\n      email: guestUser.email,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to create guest user:\", error);\r\n    throw new AuthError(\"Failed to create guest user\");\r\n  }\r\n}\r\n\r\n/**\r\n * Get guest user by email from ai-chatbot table\r\n * Context7 - Data-as-Code: Consistent data access patterns\r\n * @server-only\r\n */\r\nexport async function getGuestUser(email: string): Promise<{\r\n  id: string;\r\n  email: string;\r\n  password: string | null;\r\n} | null> {\r\n  try {\r\n    const connectionString = process.env.DATABASE_URL;\r\n    if (!connectionString) {\r\n      throw new AuthError(\"Database connection not configured\");\r\n    }\r\n\r\n    const client = postgres(connectionString);\r\n    const db = drizzle(client);\r\n\r\n    const [user] = await db\r\n      .select({\r\n        id: aiChatbotUser.id,\r\n        email: aiChatbotUser.email,\r\n        password: aiChatbotUser.password,\r\n      })\r\n      .from(aiChatbotUser)\r\n      .where(eq(aiChatbotUser.email, email))\r\n      .limit(1);\r\n\r\n    await client.end();\r\n\r\n    return user || null;\r\n  } catch (error) {\r\n    console.error(\"Failed to get guest user:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Create a Supabase client for guest operations\r\n * Context7 - Provider Isolation: Dedicated client for guest operations\r\n */\r\nfunction createGuestSupabaseClient() {\r\n  return createClient<Database>(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      auth: {\r\n        persistSession: false, // Guests don't persist sessions in Supabase\r\n        autoRefreshToken: false,\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Create a server Supabase client for guest operations\r\n * Context7 - Provider Isolation: Server-side client configuration\r\n */\r\nfunction createGuestServerClient(cookieStore?: any) {\r\n  return createServerClient<Database>(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: cookieStore\r\n        ? {\r\n            get(name: string) {\r\n              return cookieStore.get(name)?.value;\r\n            },\r\n            set(name: string, value: string, options: any) {\r\n              cookieStore.set(name, value, options);\r\n            },\r\n            remove(name: string, options: any) {\r\n              cookieStore.set(name, \"\", { ...options, maxAge: 0 });\r\n            },\r\n          }\r\n        : undefined,\r\n      auth: {\r\n        persistSession: false,\r\n        autoRefreshToken: false,\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Create a guest session using Supabase Auth custom JWT\r\n * Context7 - Resumability: Stateless guest sessions\r\n */\r\nexport async function createGuestSession(metadata?: {\r\n  userAgent?: string;\r\n  ipAddress?: string;\r\n}): Promise<UserWithGuest> {\r\n  try {\r\n    // Create guest user in the database first\r\n    const guestUser = await createGuestUser();\r\n\r\n    // Generate a custom session ID for tracking\r\n    const sessionId = `guest_session_${Date.now()}_${Math.random().toString(36).substring(7)}`;\r\n\r\n    // Create extended user object for guest\r\n    const extendedGuestUser: UserWithGuest = {\r\n      id: guestUser.id,\r\n      email: guestUser.email,\r\n      fullName: \"Guest User\",\r\n      avatarUrl: \"\",\r\n      role: \"client\",\r\n      userType: \"guest\",\r\n      isGuest: true,\r\n      guestSessionId: sessionId,\r\n      user_metadata: {\r\n        full_name: \"Guest User\",\r\n        role: \"client\",\r\n        is_guest: true,\r\n        session_id: sessionId,\r\n        ...metadata,\r\n      },\r\n      app_metadata: {\r\n        provider: \"guest\",\r\n        providers: [\"guest\"],\r\n      },\r\n      aud: \"authenticated\",\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Context7 - Observability: Log guest session creation\r\n    console.log(`Guest session created: ${sessionId} for user ${guestUser.id}`);\r\n\r\n    return extendedGuestUser;\r\n  } catch (error) {\r\n    console.error(\"Failed to create guest session:\", error);\r\n    throw new AuthError(\"Failed to create guest session\");\r\n  }\r\n}\r\n\r\n/**\r\n * Store guest session in cookies (server-side)\r\n * Context7 - Provider Isolation: Secure cookie management\r\n */\r\nexport function setGuestSessionCookies(\r\n  guestUser: UserWithGuest,\r\n  cookieStore: any,\r\n  maxAge: number = 24 * 60 * 60 // 24 hours\r\n): void {\r\n  try {\r\n    const cookieOptions = {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n      sameSite: \"lax\" as const,\r\n      maxAge,\r\n      path: \"/\",\r\n    };\r\n\r\n    // Set guest session data\r\n    cookieStore.set(\"guest_user_id\", guestUser.id, cookieOptions);\r\n    cookieStore.set(\r\n      \"guest_session_id\",\r\n      guestUser.guestSessionId || \"\",\r\n      cookieOptions\r\n    );\r\n    cookieStore.set(\"is_guest_user\", \"true\", {\r\n      ...cookieOptions,\r\n      httpOnly: false, // Allow client-side access\r\n    });\r\n\r\n    // Store minimal guest data for client access\r\n    const clientGuestData = {\r\n      id: guestUser.id,\r\n      email: guestUser.email,\r\n      fullName: guestUser.fullName,\r\n      isGuest: true,\r\n      sessionId: guestUser.guestSessionId,\r\n    };\r\n\r\n    cookieStore.set(\"guest_data\", JSON.stringify(clientGuestData), {\r\n      ...cookieOptions,\r\n      httpOnly: false, // Allow client-side access\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Failed to set guest session cookies:\", error);\r\n  }\r\n}\r\n\r\n/**\r\n * Get guest session from cookies (server-side)\r\n * Context7 - Resumability: Retrieve stateless sessions\r\n */\r\nexport function getGuestSessionFromCookies(\r\n  cookieStore: any\r\n): UserWithGuest | null {\r\n  try {\r\n    const isGuest = cookieStore.get(\"is_guest_user\")?.value === \"true\";\r\n    const guestUserId = cookieStore.get(\"guest_user_id\")?.value;\r\n    const guestSessionId = cookieStore.get(\"guest_session_id\")?.value;\r\n    const guestDataStr = cookieStore.get(\"guest_data\")?.value;\r\n\r\n    if (!isGuest || !guestUserId || !guestDataStr) {\r\n      return null;\r\n    }\r\n\r\n    const guestData = JSON.parse(guestDataStr);\r\n\r\n    const guestUser: UserWithGuest = {\r\n      id: guestUserId,\r\n      email: guestData.email,\r\n      fullName: guestData.fullName || \"Guest User\",\r\n      avatarUrl: \"\",\r\n      role: \"client\",\r\n      userType: \"guest\",\r\n      isGuest: true,\r\n      guestSessionId: guestSessionId,\r\n      user_metadata: {\r\n        full_name: guestData.fullName || \"Guest User\",\r\n        role: \"client\",\r\n        is_guest: true,\r\n        session_id: guestSessionId,\r\n      },\r\n      app_metadata: {\r\n        provider: \"guest\",\r\n        providers: [\"guest\"],\r\n      },\r\n      aud: \"authenticated\",\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    return guestUser;\r\n  } catch (error) {\r\n    console.error(\"Failed to get guest session from cookies:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Clear guest session cookies\r\n * Context7 - Data lifecycle management\r\n */\r\nexport function clearGuestSessionCookies(cookieStore: any): void {\r\n  try {\r\n    const cookieOptions = {\r\n      path: \"/\",\r\n      maxAge: 0,\r\n    };\r\n\r\n    cookieStore.set(\"guest_user_id\", \"\", cookieOptions);\r\n    cookieStore.set(\"guest_session_id\", \"\", cookieOptions);\r\n    cookieStore.set(\"is_guest_user\", \"\", cookieOptions);\r\n    cookieStore.set(\"guest_data\", \"\", cookieOptions);\r\n  } catch (error) {\r\n    console.error(\"Failed to clear guest session cookies:\", error);\r\n  }\r\n}\r\n\r\n/**\r\n * Convert guest user to regular user using Supabase Auth\r\n * Context7 - Data transformation with observability\r\n */\r\nexport async function convertGuestToRegular(\r\n  guestUserId: string,\r\n  email: string,\r\n  password: string,\r\n  fullName?: string\r\n): Promise<UserWithGuest> {\r\n  try {\r\n    const supabase = createGuestSupabaseClient();\r\n\r\n    // Sign up the user with Supabase Auth\r\n    const { data, error } = await supabase.auth.signUp({\r\n      email,\r\n      password,\r\n      options: {\r\n        data: {\r\n          full_name: fullName || \"User\",\r\n          converted_from_guest: true,\r\n          original_guest_id: guestUserId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (error) {\r\n      throw new AuthError(\r\n        `Failed to convert guest to regular user: ${error.message}`\r\n      );\r\n    }\r\n\r\n    if (!data.user) {\r\n      throw new AuthError(\"No user data returned after conversion\");\r\n    }\r\n\r\n    // Create extended user\r\n    const extendedUser: UserWithGuest = {\r\n      ...data.user,\r\n      fullName: fullName || data.user.user_metadata?.full_name || \"User\",\r\n      avatarUrl: data.user.user_metadata?.avatar_url || \"\",\r\n      role: data.user.user_metadata?.role || \"client\",\r\n      userType: \"regular\",\r\n      isGuest: false,\r\n    };\r\n\r\n    // Context7 - Observability: Log conversion\r\n    console.log(\r\n      `Guest user ${guestUserId} converted to regular user ${data.user.id}`\r\n    );\r\n\r\n    return extendedUser;\r\n  } catch (error) {\r\n    console.error(\"Failed to convert guest to regular user:\", error);\r\n    throw error instanceof AuthError\r\n      ? error\r\n      : new AuthError(\"Conversion failed\");\r\n  }\r\n}\r\n\r\n/**\r\n * Server-side function to check authentication with guest support\r\n * Context7 - Unified authentication flow\r\n * @server-only\r\n */\r\nexport async function checkAuthWithGuest(request?: any): Promise<{\r\n  user: UserWithGuest | null;\r\n  session: any | null;\r\n  isAuthenticated: boolean;\r\n  isGuest: boolean;\r\n}> {\r\n  try {\r\n    const cookieStore = request\r\n      ? {\r\n          get: (name: string) => request.cookies.get(name),\r\n          set: () => {}, // No-op for read operations\r\n        }\r\n      : cookies();\r\n\r\n    // First check for guest session\r\n    const guestUser = getGuestSessionFromCookies(cookieStore);\r\n    if (guestUser) {\r\n      return {\r\n        user: guestUser,\r\n        session: null, // Guests don't have Supabase sessions\r\n        isAuthenticated: true,\r\n        isGuest: true,\r\n      };\r\n    }\r\n\r\n    // Then try regular Supabase authentication\r\n    const supabase = createGuestServerClient(cookieStore);\r\n    const {\r\n      data: { user },\r\n      error,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (!error && user) {\r\n      // Regular authenticated user\r\n      const extendedUser: UserWithGuest = {\r\n        ...user,\r\n        fullName:\r\n          user.user_metadata?.full_name || user.email?.split(\"@\")[0] || \"User\",\r\n        avatarUrl: user.user_metadata?.avatar_url || \"\",\r\n        role: user.user_metadata?.role || \"client\",\r\n        userType: \"regular\",\r\n        isGuest: false,\r\n      };\r\n\r\n      const {\r\n        data: { session },\r\n      } = await supabase.auth.getSession();\r\n\r\n      return {\r\n        user: extendedUser,\r\n        session,\r\n        isAuthenticated: true,\r\n        isGuest: false,\r\n      };\r\n    }\r\n\r\n    // No authentication found\r\n    return {\r\n      user: null,\r\n      session: null,\r\n      isAuthenticated: false,\r\n      isGuest: false,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Authentication check failed:\", error);\r\n    return {\r\n      user: null,\r\n      session: null,\r\n      isAuthenticated: false,\r\n      isGuest: false,\r\n    };\r\n  }\r\n}\r\n\r\n// Context7 - Modular exports for clean dependency management\r\nexport const supabaseGuestAuth = {\r\n  isGuestEmail,\r\n  isGuestUser,\r\n  generateGuestEmail,\r\n  createGuestUser,\r\n  getGuestUser,\r\n  createGuestSession,\r\n  setGuestSessionCookies,\r\n  getGuestSessionFromCookies,\r\n  clearGuestSessionCookies,\r\n  convertGuestToRegular,\r\n  checkAuthWithGuest,\r\n  createGuestSupabaseClient,\r\n  createGuestServerClient,\r\n  GUEST_EMAIL_PATTERN,\r\n  GUEST_USER_PREFIX,\r\n  GUEST_DOMAIN,\r\n};\r\n","import { createServerClient } from \"@supabase/ssr\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { cookies } from \"next/headers\";\r\nimport type { Database } from \"@/types/database.types\";\r\nimport { ExtendedUser } from \"@/types/auth\";\r\nimport {\r\n  UserWithGuest,\r\n  isGuestEmail,\r\n  getGuestSessionFromCookies,\r\n} from \"./auth/guest\";\r\n\r\n// Context7 - Provider Isolation: Supabase Auth configuration\r\nexport interface AuthConfig {\r\n  supabaseUrl: string;\r\n  supabaseAnonKey: string;\r\n  supabaseServiceKey?: string;\r\n  redirectUrl?: string;\r\n  guestSessionEnabled: boolean;\r\n  sessionTimeout: number;\r\n}\r\n\r\n// Context7 - Data-as-Code: Configuration with environment variables\r\nexport const authConfig: AuthConfig = {\r\n  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n  supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n  redirectUrl: process.env.NEXT_PUBLIC_SITE_URL || \"http://localhost:3000\",\r\n  guestSessionEnabled: process.env.NEXT_PUBLIC_GUEST_AUTH_ENABLED === \"true\",\r\n  sessionTimeout: parseInt(process.env.SESSION_TIMEOUT || \"3600\", 10), // 1 hour default\r\n};\r\n\r\n// Context7 - Provider Isolation: Supabase client factory\r\nexport function createSupabaseClient() {\r\n  return createClient<Database>(\r\n    authConfig.supabaseUrl,\r\n    authConfig.supabaseAnonKey,\r\n    {\r\n      auth: {\r\n        persistSession: true,\r\n        autoRefreshToken: true,\r\n        detectSessionInUrl: true,\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\n// Context7 - Provider Isolation: Server-side Supabase client factory\r\nexport function createSupabaseServerClient(cookieStore?: any) {\r\n  return createServerClient<Database>(\r\n    authConfig.supabaseUrl,\r\n    authConfig.supabaseAnonKey,\r\n    {\r\n      cookies: cookieStore\r\n        ? {\r\n            get(name: string) {\r\n              return cookieStore.get(name)?.value;\r\n            },\r\n            set(name: string, value: string, options: any) {\r\n              cookieStore.set(name, value, options);\r\n            },\r\n            remove(name: string, options: any) {\r\n              cookieStore.set(name, \"\", { ...options, maxAge: 0 });\r\n            },\r\n          }\r\n        : {\r\n            get(name: string) {\r\n              return cookies().get(name)?.value;\r\n            },\r\n            set(name: string, value: string, options: any) {\r\n              cookies().set(name, value, options);\r\n            },\r\n            remove(name: string, options: any) {\r\n              cookies().set(name, \"\", { ...options, maxAge: 0 });\r\n            },\r\n          },\r\n      auth: {\r\n        persistSession: true,\r\n        autoRefreshToken: true,\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\n// Context7 - Provider Isolation: Admin client for server operations\r\nexport function createSupabaseServiceClient() {\r\n  if (!authConfig.supabaseServiceKey) {\r\n    throw new Error(\"Supabase service key not configured\");\r\n  }\r\n\r\n  return createClient<Database>(\r\n    authConfig.supabaseUrl,\r\n    authConfig.supabaseServiceKey,\r\n    {\r\n      auth: {\r\n        persistSession: false,\r\n        autoRefreshToken: false,\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\n// Role-based permissions for Context7 compliance\r\nexport type UserRole = \"client\" | \"admin\" | \"moderator\";\r\n\r\n// Context7 - Data-as-Code: Permission matrix\r\nexport const permissions = {\r\n  client: [\r\n    \"chat:create\",\r\n    \"chat:read\",\r\n    \"chat:update:own\",\r\n    \"chat:delete:own\",\r\n    \"artifacts:create\",\r\n    \"artifacts:read\",\r\n    \"artifacts:update:own\",\r\n    \"artifacts:delete:own\",\r\n    \"profile:read:own\",\r\n    \"profile:update:own\",\r\n  ],\r\n  guest: [\r\n    \"chat:create\",\r\n    \"chat:read:own\",\r\n    \"artifacts:create\",\r\n    \"artifacts:read:own\",\r\n    \"session:temporary\",\r\n  ],\r\n  moderator: [\r\n    \"chat:read:all\",\r\n    \"chat:moderate\",\r\n    \"artifacts:read:all\",\r\n    \"artifacts:moderate\",\r\n    \"users:read\",\r\n    \"reports:create\",\r\n    \"reports:read\",\r\n  ],\r\n  admin: [\r\n    \"chat:read:all\",\r\n    \"chat:update:all\",\r\n    \"chat:delete:all\",\r\n    \"artifacts:read:all\",\r\n    \"artifacts:update:all\",\r\n    \"artifacts:delete:all\",\r\n    \"users:read:all\",\r\n    \"users:update:all\",\r\n    \"users:delete:all\",\r\n    \"system:admin\",\r\n    \"reports:read:all\",\r\n    \"reports:resolve\",\r\n  ],\r\n} as const;\r\n\r\n/**\r\n * Check if user has specific permission\r\n * Context7 - Observability: Permission checking with logging\r\n */\r\nexport function hasPermission(\r\n  user: ExtendedUser | UserWithGuest | null,\r\n  permission: string\r\n): boolean {\r\n  if (!user) return false;\r\n\r\n  // Handle guest users\r\n  if (\"isGuest\" in user && user.isGuest) {\r\n    return permissions.guest.includes(permission as any);\r\n  }\r\n\r\n  const userRole = user.role as UserRole;\r\n  if (!userRole || !permissions[userRole]) {\r\n    console.warn(\"Unknown user role:\", userRole);\r\n    return false;\r\n  }\r\n\r\n  return permissions[userRole].includes(permission as any);\r\n}\r\n\r\n/**\r\n * Get user permissions list\r\n * Context7 - Data-as-Code: Predictable permission resolution\r\n */\r\nexport function getUserPermissions(\r\n  user: ExtendedUser | UserWithGuest | null\r\n): string[] {\r\n  if (!user) return [];\r\n\r\n  // Handle guest users\r\n  if (\"isGuest\" in user && user.isGuest) {\r\n    return [...permissions.guest];\r\n  }\r\n\r\n  const userRole = user.role as UserRole;\r\n  if (!userRole || !permissions[userRole]) {\r\n    return [];\r\n  }\r\n\r\n  return [...permissions[userRole]];\r\n}\r\n\r\n/**\r\n * Enhanced authentication check with guest support\r\n * Context7 - Unified authentication flow with observability\r\n */\r\nexport async function getAuthenticatedUser(request?: any): Promise<{\r\n  user: UserWithGuest | null;\r\n  session: any | null;\r\n  isAuthenticated: boolean;\r\n  isGuest: boolean;\r\n  permissions: string[];\r\n}> {\r\n  try {\r\n    const cookieStore = request\r\n      ? {\r\n          get: (name: string) => request.cookies.get(name),\r\n          set: () => {}, // No-op for read operations\r\n        }\r\n      : cookies();\r\n\r\n    // Context7 - Provider Isolation: Check guest session first if enabled\r\n    if (authConfig.guestSessionEnabled) {\r\n      const guestUser = getGuestSessionFromCookies(cookieStore);\r\n      if (guestUser) {\r\n        return {\r\n          user: guestUser,\r\n          session: null, // Guests don't have Supabase sessions\r\n          isAuthenticated: true,\r\n          isGuest: true,\r\n          permissions: getUserPermissions(guestUser),\r\n        };\r\n      }\r\n    }\r\n\r\n    // Check regular Supabase authentication\r\n    const supabase = createSupabaseServerClient(cookieStore);\r\n    const {\r\n      data: { user },\r\n      error,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (!error && user) {\r\n      // Convert Supabase user to ExtendedUser\r\n      const extendedUser: UserWithGuest = {\r\n        ...user,\r\n        fullName:\r\n          user.user_metadata?.full_name || user.email?.split(\"@\")[0] || \"User\",\r\n        avatarUrl: user.user_metadata?.avatar_url || \"\",\r\n        role: user.user_metadata?.role || \"client\",\r\n        userType: \"regular\",\r\n        isGuest: false,\r\n      };\r\n\r\n      const {\r\n        data: { session },\r\n      } = await supabase.auth.getSession();\r\n\r\n      return {\r\n        user: extendedUser,\r\n        session,\r\n        isAuthenticated: true,\r\n        isGuest: false,\r\n        permissions: getUserPermissions(extendedUser),\r\n      };\r\n    }\r\n\r\n    // No authentication found\r\n    return {\r\n      user: null,\r\n      session: null,\r\n      isAuthenticated: false,\r\n      isGuest: false,\r\n      permissions: [],\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Authentication check failed:\", error);\r\n    return {\r\n      user: null,\r\n      session: null,\r\n      isAuthenticated: false,\r\n      isGuest: false,\r\n      permissions: [],\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Require authentication middleware\r\n * Context7 - Modularity: Reusable auth guard\r\n */\r\nexport function requireAuth(requiredPermission?: string) {\r\n  return async (request?: any) => {\r\n    const auth = await getAuthenticatedUser(request);\r\n\r\n    if (!auth.isAuthenticated) {\r\n      throw new Error(\"Authentication required\");\r\n    }\r\n\r\n    if (requiredPermission && !hasPermission(auth.user, requiredPermission)) {\r\n      throw new Error(`Permission required: ${requiredPermission}`);\r\n    }\r\n\r\n    return auth;\r\n  };\r\n}\r\n\r\n/**\r\n * Convert ExtendedUser to UserWithGuest\r\n * Context7 - Data transformation utility\r\n */\r\nexport function extendUserWithGuest(user: ExtendedUser): UserWithGuest {\r\n  return {\r\n    ...user,\r\n    userType: isGuestEmail(user.email || \"\") ? \"guest\" : \"regular\",\r\n    isGuest: isGuestEmail(user.email || \"\"),\r\n  };\r\n}\r\n\r\n// Context7 - Modular exports for clean dependency management\r\nexport const supabaseAuth = {\r\n  config: authConfig,\r\n  createClient: createSupabaseClient,\r\n  createServerClient: createSupabaseServerClient,\r\n  createServiceClient: createSupabaseServiceClient,\r\n  getAuthenticatedUser,\r\n  requireAuth,\r\n  hasPermission,\r\n  getUserPermissions,\r\n  extendUserWithGuest,\r\n  permissions,\r\n};\r\n\r\n// Export for backward compatibility\r\nexport default supabaseAuth;\r\n","import { AuthError as SupabaseAuthError } from '@supabase/supabase-js';\r\n\r\n/**\r\n * Base class for all authentication errors\r\n */\r\nexport class AuthError extends Error {\r\n  public code: string;\r\n  public status?: number;\r\n  public originalError?: Error;\r\n\r\n  constructor(message: string, code: string, originalError?: Error, status?: number) {\r\n    super(message);\r\n    this.name = 'AuthError';\r\n    this.code = code;\r\n    this.status = status;\r\n    this.originalError = originalError;\r\n  }\r\n\r\n  /**\r\n   * Create a JSON representation of the error\r\n   */\r\n  toJSON() {\r\n    return {\r\n      name: this.name,\r\n      message: this.message,\r\n      code: this.code,\r\n      status: this.status\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create error response for API routes\r\n   */\r\n  toResponse() {\r\n    return new Response(\r\n      JSON.stringify({\r\n        error: {\r\n          message: this.message,\r\n          code: this.code\r\n        }\r\n      }),\r\n      {\r\n        status: this.status || 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown when user is not authenticated\r\n */\r\nexport class UnauthorizedError extends AuthError {\r\n  constructor(message = 'Authentication required', originalError?: Error) {\r\n    super(message, 'auth/unauthorized', originalError, 401);\r\n    this.name = 'UnauthorizedError';\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown when user doesn't have sufficient permissions\r\n */\r\nexport class ForbiddenError extends AuthError {\r\n  constructor(message = 'Insufficient permissions', originalError?: Error) {\r\n    super(message, 'auth/forbidden', originalError, 403);\r\n    this.name = 'ForbiddenError';\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown when there's an issue with session management\r\n */\r\nexport class SessionError extends AuthError {\r\n  constructor(message = 'Session error', originalError?: Error) {\r\n    super(message, 'auth/session-error', originalError, 400);\r\n    this.name = 'SessionError';\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown when credentials are invalid\r\n */\r\nexport class InvalidCredentialsError extends AuthError {\r\n  constructor(message = 'Invalid credentials', originalError?: Error) {\r\n    super(message, 'auth/invalid-credentials', originalError, 401);\r\n    this.name = 'InvalidCredentialsError';\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown for user-related operations failures\r\n */\r\nexport class UserOperationError extends AuthError {\r\n  constructor(message = 'User operation failed', originalError?: Error) {\r\n    super(message, 'auth/user-operation-failed', originalError, 400);\r\n    this.name = 'UserOperationError';\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown for configuration issues\r\n */\r\nexport class ConfigurationError extends AuthError {\r\n  constructor(message = 'Authentication configuration error', originalError?: Error) {\r\n    super(message, 'auth/configuration-error', originalError, 500);\r\n    this.name = 'ConfigurationError';\r\n  }\r\n}\r\n\r\n// Interface for any error with status code\r\ninterface ErrorWithStatus extends Error {\r\n  status?: number;\r\n  code?: string | number;\r\n}\r\n\r\n/**\r\n * Converts Supabase errors to our custom error types\r\n */\r\nexport function handleSupabaseError(error: Error | SupabaseAuthError | ErrorWithStatus | null | undefined): AuthError {\r\n  if (!error) {\r\n    return new AuthError('Unknown error', 'auth/unknown');\r\n  }\r\n\r\n  // Errors with status property\r\n  const errorWithStatus = error as ErrorWithStatus;\r\n  if (errorWithStatus.status) {\r\n    switch (errorWithStatus.status) {\r\n      case 401:\r\n        return new UnauthorizedError(error.message, error);\r\n      case 403:\r\n        return new ForbiddenError(error.message, error);\r\n      case 400:\r\n        if (error.message.includes('credentials')) {\r\n          return new InvalidCredentialsError(error.message, error);\r\n        }\r\n        if (error.message.includes('session')) {\r\n          return new SessionError(error.message, error);\r\n        }\r\n        return new UserOperationError(error.message, error);\r\n      default:\r\n        return new AuthError(\r\n          error.message, \r\n          `auth/error-${errorWithStatus.status || 'unknown'}`, \r\n          error, \r\n          errorWithStatus.status\r\n        );\r\n    }\r\n  }\r\n\r\n  // Generic errors\r\n  return new AuthError(error.message || 'Unknown error', 'auth/unknown-error', error);\r\n}\r\n\r\n/**\r\n * Helper to safely handle auth operations with consistent error handling\r\n */\r\nexport async function safeAuthOperation<T>(\r\n  operation: () => Promise<T>,\r\n  errorMessage = 'Authentication operation failed'\r\n): Promise<T> {\r\n  try {\r\n    return await operation();\r\n  } catch (error) {\r\n    throw handleSupabaseError(error as Error);\r\n  }\r\n}\r\n\r\n/**\r\n * Middleware for handling auth errors in API routes\r\n */\r\nexport function createAuthErrorHandler() {\r\n  return (error: unknown) => {\r\n    if (error instanceof AuthError) {\r\n      return error.toResponse();\r\n    }\r\n    \r\n    const authError = handleSupabaseError(error as Error);\r\n    return authError.toResponse();\r\n  };\r\n} "],"names":["GUEST_EMAIL_PATTERN","isGuestEmail","email","test","createGuestUser","guestEmail","generateGuestEmail","timestamp","Date","now","toString","random","Math","substring","GUEST_USER_PREFIX","GUEST_DOMAIN","connectionString","process","env","DATABASE_URL","AuthError","client","postgres","default","db","drizzle","guestUser","insert","aiChatbotUser","values","password","returning","id","end","error","console","createGuestSession","metadata","sessionId","fullName","avatarUrl","role","userType","isGuest","guestSessionId","user_metadata","full_name","is_guest","session_id","app_metadata","provider","providers","aud","created_at","toISOString","updated_at","setGuestSessionCookies","cookieStore","maxAge","cookieOptions","httpOnly","secure","sameSite","path","set","clientGuestData","JSON","stringify","getGuestSessionFromCookies","get","value","guestUserId","guestDataStr","guestData","parse","clearGuestSessionCookies","convertGuestToRegular","supabase","createClient","createGuestSupabaseClient","auth","persistSession","autoRefreshToken","data","signUp","options","converted_from_guest","original_guest_id","message","user","extendedUser","avatar_url","authConfig","supabaseUrl","supabaseAnonKey","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","redirectUrl","NEXT_PUBLIC_SITE_URL","guestSessionEnabled","NEXT_PUBLIC_GUEST_AUTH_ENABLED","sessionTimeout","parseInt","SESSION_TIMEOUT","createSupabaseServerClient","createServerClient","cookies","name","remove","createSupabaseServiceClient","Error","permissions","guest","moderator","admin","getUserPermissions","userRole","getAuthenticatedUser","request","session","isAuthenticated","getUser","split","getSession","constructor","code","originalError","status","toJSON","toResponse","Response","headers","UnauthorizedError","ForbiddenError","SessionError","InvalidCredentialsError","UserOperationError","ConfigurationError","handleSupabaseError","errorWithStatus","includes"],"sourceRoot":""}