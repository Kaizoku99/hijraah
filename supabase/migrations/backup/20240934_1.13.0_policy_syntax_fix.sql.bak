-- 20240934_1.13.0_policy_syntax_fix.sql
-- Migration file to fix policy syntax errors in existing migrations

-- Wrap in a transaction for atomic execution
BEGIN;

-- Track migration execution time
DO $$
DECLARE
    migration_id INTEGER;
    start_time TIMESTAMPTZ;
    end_time TIMESTAMPTZ;
    execution_time_ms INTEGER;
BEGIN
    -- Record start time
    start_time := clock_timestamp();
    
    -- Register migration
    SELECT migration_meta.register_migration(
        '1.13.0',
        'policy_syntax_fix',
        'Fix policy creation syntax in existing migrations'
    ) INTO migration_id;
    
    -- Log the start of the process
    PERFORM migration_meta.log_migration(
        migration_id, 
        'INFO', 
        'Starting policy syntax fix migration'
    );

    -- Fix any policies that might have been skipped due to syntax errors
    -- We'll recreate commonly used policies with correct syntax
    
    -- Documents policies (if they exist)
    DO $DOCS$
    BEGIN
        IF EXISTS (
            SELECT 1 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'documents'
        ) THEN
            -- Drop existing policies if they exist
            DROP POLICY IF EXISTS "Users can view their own documents" ON public.documents;
            DROP POLICY IF EXISTS "Users can update their own documents" ON public.documents;
            DROP POLICY IF EXISTS "Users can delete their own documents" ON public.documents;
            DROP POLICY IF EXISTS "Users can insert their own documents" ON public.documents;
            
            -- Create standard document policies
            CREATE POLICY "Users can view their own documents" 
            ON public.documents FOR SELECT 
            TO authenticated 
            USING (user_id = auth.uid() OR EXISTS (
                SELECT 1 FROM public.profiles 
                WHERE user_id = auth.uid() AND is_admin = true
            ));
            
            CREATE POLICY "Users can insert their own documents" 
            ON public.documents FOR INSERT 
            TO authenticated 
            WITH CHECK (user_id = auth.uid());
            
            CREATE POLICY "Users can update their own documents" 
            ON public.documents FOR UPDATE 
            TO authenticated 
            USING (user_id = auth.uid());
            
            CREATE POLICY "Users can delete their own documents" 
            ON public.documents FOR DELETE 
            TO authenticated 
            USING (user_id = auth.uid());
            
            PERFORM migration_meta.log_migration(
                migration_id, 
                'INFO', 
                'Fixed document policies'
            );
        END IF;
    EXCEPTION WHEN OTHERS THEN
        PERFORM migration_meta.log_migration(
            migration_id, 
            'WARNING', 
            'Error fixing document policies: ' || SQLERRM
        );
    END $DOCS$;
    
    -- Cases policies (if they exist)
    DO $CASES$
    BEGIN
        IF EXISTS (
            SELECT 1 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'cases'
        ) THEN
            -- Drop existing policies if they exist
            DROP POLICY IF EXISTS "Users can view their own cases" ON public.cases;
            DROP POLICY IF EXISTS "Users can update their own cases" ON public.cases;
            DROP POLICY IF EXISTS "Users can delete their own cases" ON public.cases;
            DROP POLICY IF EXISTS "Users can insert their own cases" ON public.cases;
            
            -- Create standard case policies
            CREATE POLICY "Users can view their own cases" 
            ON public.cases FOR SELECT 
            TO authenticated 
            USING (user_id = auth.uid() OR EXISTS (
                SELECT 1 FROM public.profiles 
                WHERE user_id = auth.uid() AND is_admin = true
            ));
            
            CREATE POLICY "Users can insert their own cases" 
            ON public.cases FOR INSERT 
            TO authenticated 
            WITH CHECK (user_id = auth.uid());
            
            CREATE POLICY "Users can update their own cases" 
            ON public.cases FOR UPDATE 
            TO authenticated 
            USING (user_id = auth.uid());
            
            CREATE POLICY "Users can delete their own cases" 
            ON public.cases FOR DELETE 
            TO authenticated 
            USING (user_id = auth.uid());
            
            PERFORM migration_meta.log_migration(
                migration_id, 
                'INFO', 
                'Fixed case policies'
            );
        END IF;
    EXCEPTION WHEN OTHERS THEN
        PERFORM migration_meta.log_migration(
            migration_id, 
            'WARNING', 
            'Error fixing case policies: ' || SQLERRM
        );
    END $CASES$;
    
    -- Fix for any other common tables with policies
    -- We'll check some common tables in the system
    DO $COMMON$
    DECLARE
        table_record RECORD;
    BEGIN
        FOR table_record IN 
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name NOT IN ('profiles', 'documents', 'cases')
            AND table_name NOT LIKE 'pg_%'
        LOOP
            -- Check if the table has RLS enabled
            PERFORM migration_meta.log_migration(
                migration_id,
                'INFO',
                'Checking policies for table: ' || table_record.table_name
            );
            
            -- This is a safe operation that will quietly succeed if no policy exists
            EXECUTE format('DROP POLICY IF EXISTS "IF NOT EXISTS syntax fix" ON public.%I', table_record.table_name);
        END LOOP;
    EXCEPTION WHEN OTHERS THEN
        PERFORM migration_meta.log_migration(
            migration_id, 
            'WARNING', 
            'Error in common tables policy check: ' || SQLERRM
        );
    END $COMMON$;

    -- Record execution time
    end_time := clock_timestamp();
    execution_time_ms := extract(epoch from (end_time - start_time)) * 1000;
    
    -- Update migration record with execution time
    PERFORM migration_meta.register_migration(
        '1.13.0',
        'policy_syntax_fix',
        'Fix policy creation syntax in existing migrations',
        TRUE,
        execution_time_ms
    );
    
    PERFORM migration_meta.log_migration(
        migration_id, 
        'INFO', 
        'Completed policy syntax fix migration in ' || execution_time_ms || 'ms'
    );
    
EXCEPTION WHEN OTHERS THEN
    -- Log error and mark migration as failed
    PERFORM migration_meta.log_migration(
        migration_id, 
        'ERROR', 
        'Migration failed: ' || SQLERRM
    );
    
    PERFORM migration_meta.register_migration(
        '1.13.0',
        'policy_syntax_fix',
        'Fix policy creation syntax in existing migrations',
        FALSE,
        NULL
    );
    
    RAISE;
END $$;

-- Register a rollback script
SELECT migration_meta.register_rollback(
    '1.13.0',
    'policy_syntax_fix',
    $ROLLBACK$
    -- No meaningful rollback operation for this fix
    -- The DROP POLICY IF EXISTS syntax ensures idempotence
    -- and avoids the need for explicit rollback
    SELECT 1;
    $ROLLBACK$
);

COMMIT; 