{"version":3,"file":"6034.js","mappings":"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","sources":["webpack://@hijraah/web/../../supabase/schema.ts","webpack://@hijraah/web/../../supabase/queries.ts","webpack://@hijraah/web/./src/lib/utils.ts","webpack://@hijraah/web/../../supabase/utils.ts"],"sourcesContent":["import {\r\n  pgTable,\r\n  varchar,\r\n  timestamp,\r\n  json,\r\n  uuid,\r\n  text,\r\n  primaryKey,\r\n  foreignKey,\r\n  boolean,\r\n  integer,\r\n  pgEnum,\r\n} from \"drizzle-orm/pg-core\";\r\nimport { z } from \"zod\";\r\nimport type { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\r\n\r\n// =========================================\r\n// ENUMS\r\n// =========================================\r\nexport const userRoleEnum = pgEnum(\"user_role\", [\"user\", \"admin\", \"client\"]);\r\nexport const caseStatusEnum = pgEnum(\"case_status\", [\r\n  \"draft\",\r\n  \"submitted\",\r\n  \"in_review\",\r\n  \"approved\",\r\n  \"rejected\",\r\n  \"completed\",\r\n]);\r\n\r\n// =========================================\r\n// Database Schema (Drizzle ORM)\r\n// =========================================\r\n\r\nexport const profiles = pgTable(\"profiles\", {\r\n  id: uuid(\"id\").primaryKey(), // This references auth.users(id)\r\n  firstName: text(\"first_name\"),\r\n  lastName: text(\"last_name\"),\r\n  avatarUrl: text(\"avatar_url\"),\r\n  bio: text(\"bio\"),\r\n  timezone: text(\"timezone\"),\r\n  language: text(\"language\").default(\"en\"),\r\n  countryOfResidence: text(\"country_of_residence\"),\r\n  countryOfInterest: text(\"country_of_interest\"),\r\n  countryOfCitizenship: text(\"country_of_citizenship\"),\r\n  isAdmin: boolean(\"is_admin\").default(false),\r\n  visaType: text(\"visa_type\"),\r\n  immigrationGoals: text(\"immigration_goals\"),\r\n  role: userRoleEnum(\"role\").default(\"client\"),\r\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\r\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\r\n});\r\n\r\nexport type Profile = InferSelectModel<typeof profiles>;\r\nexport type InsertProfile = InferInsertModel<typeof profiles>;\r\n\r\nexport const cases = pgTable(\"cases\", {\r\n  id: uuid(\"id\").primaryKey().defaultRandom(),\r\n  userId: uuid(\"user_id\")\r\n    .notNull()\r\n    .references(() => profiles.id, { onDelete: \"cascade\" }),\r\n  title: text(\"title\").notNull(),\r\n  description: text(\"description\"),\r\n  status: caseStatusEnum(\"status\").notNull().default(\"draft\"),\r\n  metadata: json(\"metadata\").default(\"{}\"),\r\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\r\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\r\n});\r\n\r\nexport type Case = InferSelectModel<typeof cases>;\r\nexport type InsertCase = InferInsertModel<typeof cases>;\r\n\r\nexport const chatSessions = pgTable(\"chat_sessions\", {\r\n  id: uuid(\"id\").primaryKey().defaultRandom(),\r\n  userId: uuid(\"user_id\")\r\n    .notNull()\r\n    .references(() => profiles.id, { onDelete: \"cascade\" }),\r\n  title: text(\"title\"),\r\n  context: text(\"context\"),\r\n  prompt: text(\"prompt\"),\r\n  model: text(\"model\"),\r\n  systemPrompt: text(\"system_prompt\"),\r\n  agentConfig: json(\"agent_config\").default(\"{}\"),\r\n  caseId: uuid(\"case_id\").references(() => cases.id, { onDelete: \"set null\" }),\r\n  lastMessageAt: timestamp(\"last_message_at\", {\r\n    withTimezone: true,\r\n  }).defaultNow(),\r\n  metadata: json(\"metadata\").default(\"{}\"),\r\n  visibility: varchar(\"visibility\", { enum: [\"private\", \"public\", \"team\"] })\r\n    .notNull()\r\n    .default(\"private\"),\r\n  createdAt: timestamp(\"created_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n});\r\n\r\nexport type ChatSession = InferSelectModel<typeof chatSessions>;\r\nexport type InsertChatSession = InferInsertModel<typeof chatSessions>;\r\n\r\nexport const chatMessages = pgTable(\"chat_messages\", {\r\n  id: uuid(\"id\").primaryKey().defaultRandom(),\r\n  sessionId: uuid(\"session_id\")\r\n    .notNull()\r\n    .references(() => chatSessions.id, { onDelete: \"cascade\" }),\r\n  userId: uuid(\"user_id\").references(() => profiles.id, {\r\n    onDelete: \"set null\",\r\n  }),\r\n  role: varchar(\"role\", {\r\n    enum: [\"user\", \"assistant\", \"system\", \"tool\", \"function\"],\r\n  }).notNull(),\r\n  content: text(\"content\").notNull(),\r\n  sources: json(\"sources\"),\r\n  toolCalls: json(\"tool_calls\"),\r\n  metadata: json(\"metadata\").default(\"{}\"),\r\n  tokens: integer(\"tokens\"),\r\n  createdAt: timestamp(\"created_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n});\r\n\r\nexport type ChatMessage = InferSelectModel<typeof chatMessages>;\r\nexport type InsertChatMessage = InferInsertModel<typeof chatMessages>;\r\n\r\nexport const chatMessageVotes = pgTable(\r\n  \"chat_message_votes\",\r\n  {\r\n    messageId: uuid(\"message_id\")\r\n      .notNull()\r\n      .references(() => chatMessages.id, { onDelete: \"cascade\" }),\r\n    userId: uuid(\"user_id\")\r\n      .notNull()\r\n      .references(() => profiles.id, { onDelete: \"cascade\" }),\r\n    isUpvoted: boolean(\"is_upvoted\").notNull().default(true),\r\n    createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\r\n  },\r\n  (table) => {\r\n    return {\r\n      pk: primaryKey({ columns: [table.messageId, table.userId] }),\r\n    };\r\n  }\r\n);\r\n\r\nexport type ChatMessageVote = InferSelectModel<typeof chatMessageVotes>;\r\nexport type InsertChatMessageVote = InferInsertModel<typeof chatMessageVotes>;\r\n\r\nexport const artifacts = pgTable(\"artifacts\", {\r\n  id: uuid(\"id\").primaryKey().defaultRandom(),\r\n  userId: uuid(\"user_id\").references(() => profiles.id, {\r\n    onDelete: \"cascade\",\r\n  }),\r\n  title: text(\"title\").notNull(),\r\n  kind: text(\"kind\").notNull(),\r\n  content: text(\"content\").notNull(),\r\n  createdAt: timestamp(\"created_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n});\r\n\r\nexport type Artifact = InferSelectModel<typeof artifacts>;\r\nexport type InsertArtifact = InferInsertModel<typeof artifacts>;\r\n\r\nexport const suggestions = pgTable(\"suggestions\", {\r\n  id: uuid(\"id\").primaryKey().defaultRandom(),\r\n  userId: uuid(\"user_id\").references(() => profiles.id, {\r\n    onDelete: \"cascade\",\r\n  }),\r\n  documentId: uuid(\"document_id\")\r\n    .notNull()\r\n    .references(() => artifacts.id, { onDelete: \"cascade\" }),\r\n  title: text(\"title\"),\r\n  fromText: text(\"from_text\"),\r\n  toText: text(\"to_text\"),\r\n  createdAt: timestamp(\"created_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n});\r\n\r\nexport type Suggestion = InferSelectModel<typeof suggestions>;\r\nexport type InsertSuggestion = InferInsertModel<typeof suggestions>;\r\n\r\nexport const streams = pgTable(\"streams\", {\r\n  id: uuid(\"id\").primaryKey().defaultRandom(),\r\n  chatId: uuid(\"chat_id\").references(() => chatSessions.id, {\r\n    onDelete: \"cascade\",\r\n  }),\r\n  createdAt: timestamp(\"created_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n});\r\n\r\nexport type Stream = InferSelectModel<typeof streams>;\r\nexport type InsertStream = InferInsertModel<typeof streams>;\r\n\r\nexport const chatAttachments = pgTable(\"chat_attachments\", {\r\n  id: uuid(\"id\").primaryKey().defaultRandom(),\r\n  chatId: uuid(\"chat_id\")\r\n    .notNull()\r\n    .references(() => chatSessions.id, { onDelete: \"cascade\" }),\r\n  messageId: uuid(\"message_id\")\r\n    .notNull()\r\n    .references(() => chatMessages.id, { onDelete: \"cascade\" }),\r\n  userId: uuid(\"user_id\")\r\n    .notNull()\r\n    .references(() => profiles.id, { onDelete: \"cascade\" }),\r\n  fileName: text(\"file_name\").notNull(),\r\n  fileType: text(\"file_type\").notNull(),\r\n  fileSize: integer(\"file_size\").notNull(),\r\n  filePath: text(\"file_path\").notNull(),\r\n  createdAt: timestamp(\"created_at\", { withTimezone: true })\r\n    .notNull()\r\n    .defaultNow(),\r\n});\r\n\r\nexport type ChatAttachment = InferSelectModel<typeof chatAttachments>;\r\nexport type InsertChatAttachment = InferInsertModel<typeof chatAttachments>;\r\n\r\n// Legacy Tables\r\nexport const legacyChats = pgTable(\"legacy_chats\", {\r\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\r\n  createdAt: timestamp(\"created_at\").notNull(),\r\n  userId: uuid(\"user_id\")\r\n    .notNull()\r\n    .references(() => profiles.id, { onDelete: \"cascade\" }),\r\n  title: text(\"title\").notNull(),\r\n  visibility: varchar(\"visibility\").default(\"private\").notNull(),\r\n});\r\n\r\nexport const legacyMessages = pgTable(\"legacy_messages\", {\r\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\r\n  chatId: uuid(\"chat_id\")\r\n    .notNull()\r\n    .references(() => legacyChats.id, { onDelete: \"cascade\" }),\r\n  role: varchar(\"role\").notNull(),\r\n  parts: json(\"parts\").notNull(),\r\n  attachments: json(\"attachments\").notNull(),\r\n  createdAt: timestamp(\"created_at\").notNull(),\r\n});\r\n\r\nexport const legacyMessagesV2 = pgTable(\"legacy_messages_v2\", {\r\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\r\n  chatId: uuid(\"chat_id\")\r\n    .notNull()\r\n    .references(() => legacyChats.id, { onDelete: \"cascade\" }),\r\n  role: varchar(\"role\").notNull(),\r\n  parts: json(\"parts\").notNull(),\r\n  attachments: json(\"attachments\").notNull(),\r\n  createdAt: timestamp(\"created_at\").notNull(),\r\n});\r\n\r\nexport const legacyVotes = pgTable(\r\n  \"legacy_votes\",\r\n  {\r\n    chatId: uuid(\"chat_id\")\r\n      .notNull()\r\n      .references(() => legacyChats.id, { onDelete: \"cascade\" }),\r\n    messageId: uuid(\"message_id\")\r\n      .notNull()\r\n      .references(() => legacyMessages.id, { onDelete: \"cascade\" }),\r\n    isUpvoted: boolean(\"is_upvoted\").notNull(),\r\n  },\r\n  (table) => ({\r\n    pk: primaryKey({ columns: [table.chatId, table.messageId] }),\r\n  })\r\n);\r\n\r\nexport const legacyVotesV2 = pgTable(\r\n  \"legacy_votes_v2\",\r\n  {\r\n    chatId: uuid(\"chat_id\")\r\n      .notNull()\r\n      .references(() => legacyChats.id, { onDelete: \"cascade\" }),\r\n    messageId: uuid(\"message_id\")\r\n      .notNull()\r\n      .references(() => legacyMessagesV2.id, { onDelete: \"cascade\" }),\r\n    isUpvoted: boolean(\"is_upvoted\").notNull(),\r\n  },\r\n  (table) => ({\r\n    pk: primaryKey({ columns: [table.chatId, table.messageId] }),\r\n  })\r\n);\r\n\r\n// =========================================\r\n// API Validation Schema (Zod)\r\n// =========================================\r\n\r\nexport const textPartSchema = z.object({\r\n  text: z.string().min(1).max(2000),\r\n  type: z.enum([\"text\"]),\r\n});\r\n\r\nexport const chatMessageSchema = z.object({\r\n  id: z.string().uuid(),\r\n  createdAt: z.coerce.date(),\r\n  role: z.enum([\"user\", \"assistant\", \"system\", \"tool\", \"function\"]),\r\n  content: z.string().min(1).max(2000),\r\n  parts: z.array(textPartSchema),\r\n  experimental_attachments: z\r\n    .array(\r\n      z.object({\r\n        url: z.string().url(),\r\n        name: z.string().min(1).max(2000),\r\n        contentType: z.enum([\"image/png\", \"image/jpg\", \"image/jpeg\"]),\r\n      })\r\n    )\r\n    .optional(),\r\n});\r\n\r\nexport const chatRequestBodySchema = z\r\n  .object({\r\n    id: z.string().uuid(),\r\n    messages: z.array(chatMessageSchema).min(1),\r\n    selectedChatModel: z.enum([\r\n      \"gpt-3.5-turbo\",\r\n      \"gpt-4\",\r\n      \"gpt-4-vision-preview\",\r\n      \"gpt-4o\",\r\n      \"claude-3-sonnet\",\r\n      \"claude-3-opus\",\r\n      \"claude-3-haiku\",\r\n    ]),\r\n    visibility: z.enum([\"public\", \"private\", \"team\"]).default(\"private\"),\r\n  })\r\n  .extend({\r\n    description: z.string().optional(),\r\n    caseId: z.string().uuid().optional(),\r\n    countryCode: z.string().optional(),\r\n  });\r\n\r\nexport const postRequestBodySchema = chatRequestBodySchema;\r\nexport type PostRequestBody = ChatRequestBody;\r\n\r\nexport type ChatMessageSchema = z.infer<typeof chatMessageSchema>;\r\nexport type ChatRequestBody = z.infer<typeof chatRequestBodySchema>;\r\n\r\n// (Legacy alias exports removed – migrate to `profiles`, `artifacts`, `suggestions`)\r\n","import \"server-only\";\r\n\r\nimport {\r\n  and,\r\n  asc,\r\n  count,\r\n  desc,\r\n  eq,\r\n  gt,\r\n  gte,\r\n  inArray,\r\n  lt,\r\n  type SQL,\r\n} from \"drizzle-orm\";\r\nimport { drizzle } from \"drizzle-orm/postgres-js\";\r\nimport postgres from \"postgres\";\r\n\r\nimport type { ArtifactType } from \"@/types/artifact\";\r\nimport type { VisibilityType } from \"@/components/ui/visibility-selector\";\r\nimport { generateUUID } from \"@/lib/utils\";\r\n\r\nimport {\r\n  profiles,\r\n  type Profile,\r\n  artifacts,\r\n  type Suggestion,\r\n  suggestions,\r\n  chatSessions,\r\n  chatMessages,\r\n  chatMessageVotes,\r\n  type ChatSession,\r\n  type ChatMessage,\r\n  type InsertChatMessageVote,\r\n} from \"./schema\";\r\nimport { generateHashedPassword } from \"./utils\";\r\n\r\n// Optionally, if not using email/pass login, you can\r\n// use the Drizzle adapter for Auth.js / NextAuth\r\n// https://authjs.dev/reference/adapter/drizzle\r\n\r\n// biome-ignore lint: Forbidden non-null assertion.\r\nconst client = postgres(process.env.POSTGRES_URL!);\r\nconst db = drizzle(client);\r\n\r\n// Helper function to map ArtifactType to the database 'kind' enum\r\nfunction mapArtifactTypeToDbKind(\r\n  artifactType: ArtifactType\r\n): \"text\" | \"code\" | \"image\" | \"sheet\" {\r\n  switch (artifactType) {\r\n    case \"document\":\r\n      return \"text\";\r\n    case \"spreadsheet\":\r\n      return \"sheet\";\r\n    case \"code\":\r\n      return \"code\";\r\n    case \"image\":\r\n      return \"image\";\r\n    case \"mindmap\":\r\n      // This will cause a type error if 'mindmap' is not supported by the DB enum.\r\n      // Or handle error/default: throw new Error(`Unsupported artifact type for DB: ${artifactType}`);\r\n      return \"text\"; // Or a sensible default, or extend DB enum\r\n    default:\r\n      // Ensure exhaustive check, or throw error for unhandled types\r\n      throw new Error(`Unhandled artifact type: ${artifactType}`);\r\n  }\r\n}\r\n\r\nexport async function getUser(email: string): Promise<Array<Profile>> {\r\n  try {\r\n    return await db.select().from(profiles).where(eq(profiles.email, email));\r\n  } catch (error) {\r\n    console.error(\"Failed to get user from database\");\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function createUser(email: string, password: string) {\r\n  const hashedPassword = generateHashedPassword(password);\r\n\r\n  try {\r\n    return await db\r\n      .insert(profiles)\r\n      .values({ email, password: hashedPassword });\r\n  } catch (error) {\r\n    console.error(\"Failed to create user in database\");\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function createGuestUser() {\r\n  const email = `guest-${Date.now()}`;\r\n  const password = generateHashedPassword(generateUUID());\r\n\r\n  try {\r\n    return await db.insert(profiles).values({ email, password }).returning({\r\n      id: profiles.id,\r\n      email: profiles.email,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Failed to create guest user in database\");\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function saveChatSession({\r\n  id,\r\n  userId,\r\n  title,\r\n  visibility,\r\n  caseId,\r\n  model,\r\n  systemPrompt,\r\n}: Partial<ChatSession> & { userId: string; title: string }) {\r\n  try {\r\n    return await db.insert(chatSessions).values({\r\n      id: id || generateUUID(),\r\n      userId,\r\n      title,\r\n      visibility: visibility || \"private\",\r\n      caseId,\r\n      model,\r\n      systemPrompt,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Failed to save chat session in database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteChatSessionById({ id }: { id: string }) {\r\n  try {\r\n    await db.delete(chatMessages).where(eq(chatMessages.sessionId, id));\r\n\r\n    const [deletedSession] = await db\r\n      .delete(chatSessions)\r\n      .where(eq(chatSessions.id, id))\r\n      .returning();\r\n    return deletedSession;\r\n  } catch (error) {\r\n    console.error(\"Failed to delete chat session by id from database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getChatSessionsByUserId({\r\n  userId,\r\n  limit,\r\n  startingAfter,\r\n  endingBefore,\r\n}: {\r\n  userId: string;\r\n  limit: number;\r\n  startingAfter: string | null;\r\n  endingBefore: string | null;\r\n}) {\r\n  try {\r\n    const extendedLimit = limit + 1;\r\n\r\n    const query = (whereCondition?: SQL<any>) =>\r\n      db\r\n        .select()\r\n        .from(chatSessions)\r\n        .where(\r\n          whereCondition\r\n            ? and(whereCondition, eq(chatSessions.userId, userId))\r\n            : eq(chatSessions.userId, userId)\r\n        )\r\n        .orderBy(desc(chatSessions.createdAt))\r\n        .limit(extendedLimit);\r\n\r\n    let filteredSessions: Array<ChatSession> = [];\r\n\r\n    if (startingAfter) {\r\n      const [selectedSession] = await db\r\n        .select({ createdAt: chatSessions.createdAt })\r\n        .from(chatSessions)\r\n        .where(eq(chatSessions.id, startingAfter))\r\n        .limit(1);\r\n\r\n      if (!selectedSession) {\r\n        throw new Error(`Chat session with id ${startingAfter} not found`);\r\n      }\r\n      filteredSessions = await query(\r\n        gt(chatSessions.createdAt, selectedSession.createdAt!)\r\n      );\r\n    } else if (endingBefore) {\r\n      const [selectedSession] = await db\r\n        .select({ createdAt: chatSessions.createdAt })\r\n        .from(chatSessions)\r\n        .where(eq(chatSessions.id, endingBefore))\r\n        .limit(1);\r\n\r\n      if (!selectedSession) {\r\n        throw new Error(`Chat session with id ${endingBefore} not found`);\r\n      }\r\n      filteredSessions = await query(\r\n        lt(chatSessions.createdAt, selectedSession.createdAt!)\r\n      );\r\n    } else {\r\n      filteredSessions = await query();\r\n    }\r\n\r\n    const hasMore = filteredSessions.length > limit;\r\n\r\n    return {\r\n      sessions: hasMore ? filteredSessions.slice(0, limit) : filteredSessions,\r\n      hasMore,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to get chat sessions by user from database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getChatSessionById({ id }: { id: string }) {\r\n  try {\r\n    const [selectedSession] = await db\r\n      .select()\r\n      .from(chatSessions)\r\n      .where(eq(chatSessions.id, id));\r\n    return selectedSession;\r\n  } catch (error) {\r\n    console.error(\"Failed to get chat session by id from database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function saveChatMessages({\r\n  messagesToSave,\r\n}: {\r\n  messagesToSave: Array<Omit<ChatMessage, \"id\" | \"createdAt\" | \"updatedAt\">>;\r\n}) {\r\n  try {\r\n    if (messagesToSave.length === 0) return [];\r\n    return await db\r\n      .insert(chatMessages)\r\n      .values(messagesToSave.map((m) => ({ ...m, id: generateUUID() })))\r\n      .returning();\r\n  } catch (error) {\r\n    console.error(\"Failed to save chat messages in database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getChatMessagesBySessionId({\r\n  sessionId,\r\n}: {\r\n  sessionId: string;\r\n}) {\r\n  try {\r\n    return await db\r\n      .select()\r\n      .from(chatMessages)\r\n      .where(eq(chatMessages.sessionId, sessionId))\r\n      .orderBy(asc(chatMessages.createdAt));\r\n  } catch (error) {\r\n    console.error(\r\n      \"Failed to get chat messages by session id from database\",\r\n      error\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function voteMessage({\r\n  messageId,\r\n  userId,\r\n  isUpvoted,\r\n}: {\r\n  messageId: string;\r\n  userId: string;\r\n  isUpvoted: boolean;\r\n}) {\r\n  try {\r\n    const voteData: InsertChatMessageVote = {\r\n      messageId,\r\n      userId,\r\n      isUpvoted,\r\n    };\r\n\r\n    return await db\r\n      .insert(chatMessageVotes)\r\n      .values(voteData)\r\n      .onConflictDoUpdate({\r\n        target: [chatMessageVotes.messageId, chatMessageVotes.userId],\r\n        set: { isUpvoted: isUpvoted },\r\n      })\r\n      .returning();\r\n  } catch (error) {\r\n    console.error(\"Failed to vote on message in database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getVotesForMessagesInSession({\r\n  sessionId,\r\n}: {\r\n  sessionId: string;\r\n}) {\r\n  try {\r\n    return await db\r\n      .select({\r\n        messageId: chatMessageVotes.messageId,\r\n        userId: chatMessageVotes.userId,\r\n        isUpvoted: chatMessageVotes.isUpvoted,\r\n        createdAt: chatMessageVotes.createdAt,\r\n      })\r\n      .from(chatMessageVotes)\r\n      .innerJoin(chatMessages, eq(chatMessageVotes.messageId, chatMessages.id))\r\n      .where(eq(chatMessages.sessionId, sessionId));\r\n  } catch (error) {\r\n    console.error(\r\n      \"Failed to get votes for messages in session from database\",\r\n      error\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function saveDocument({\r\n  id,\r\n  title,\r\n  kind,\r\n  content,\r\n  userId,\r\n}: {\r\n  id: string;\r\n  title: string;\r\n  kind: ArtifactType;\r\n  content: string;\r\n  userId: string;\r\n}) {\r\n  try {\r\n    const dbKind = mapArtifactTypeToDbKind(kind);\r\n    return await db.insert(artifacts).values({\r\n      id,\r\n      title,\r\n      kind: dbKind,\r\n      content,\r\n      userId,\r\n      createdAt: new Date(),\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Failed to save document in database\");\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getDocumentsById({ id }: { id: string }) {\r\n  try {\r\n    const documents = await db\r\n      .selectDistinctOn([artifacts.id], {\r\n        id: artifacts.id,\r\n        title: artifacts.title,\r\n        kind: artifacts.kind,\r\n        userId: artifacts.userId,\r\n        createdAt: artifacts.createdAt,\r\n      })\r\n      .from(artifacts)\r\n      .where(eq(artifacts.id, id))\r\n      .orderBy(artifacts.id, desc(artifacts.createdAt));\r\n\r\n    return documents;\r\n  } catch (error) {\r\n    console.error(\"Failed to get documents by id from database\");\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getDocumentById({ id }: { id: string }) {\r\n  try {\r\n    const [selectedDocument] = await db\r\n      .select()\r\n      .from(artifacts)\r\n      .where(eq(artifacts.id, id))\r\n      .orderBy(desc(artifacts.createdAt));\r\n\r\n    return selectedDocument;\r\n  } catch (error) {\r\n    console.error(\"Failed to get document by id from database\");\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteDocumentsByIdAfterTimestamp({\r\n  id,\r\n  timestamp,\r\n}: {\r\n  id: string;\r\n  timestamp: Date;\r\n}) {\r\n  try {\r\n    return await db\r\n      .delete(artifacts)\r\n      .where(and(eq(artifacts.id, id), lt(artifacts.createdAt, timestamp)));\r\n  } catch (error) {\r\n    console.error(\r\n      \"Failed to delete documents by id after timestamp from database\"\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function saveSuggestions({\r\n  suggestions: suggestionsToSave,\r\n}: {\r\n  suggestions: Array<Suggestion>;\r\n}) {\r\n  try {\r\n    return await db.insert(suggestions).values(suggestionsToSave);\r\n  } catch (error) {\r\n    console.error(\"Failed to save suggestions in database\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getSuggestionsByDocumentId({\r\n  documentId,\r\n}: {\r\n  documentId: string;\r\n}) {\r\n  try {\r\n    const suggestions = await db\r\n      .select()\r\n      .from(suggestions)\r\n      .where(eq(suggestions.documentId, documentId))\r\n      .orderBy(desc(suggestions.createdAt));\r\n\r\n    return suggestions;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Failed to get suggestions by document id from database\",\r\n      error\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getMessageById({ id }: { id: string }) {\r\n  try {\r\n    const [messageData] = await db\r\n      .select()\r\n      .from(chatMessages)\r\n      .where(eq(chatMessages.id, id));\r\n    return messageData;\r\n  } catch (error) {\r\n    console.error(\"Failed to get message by id from database\");\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteMessagesByChatIdAfterTimestamp({\r\n  chatId,\r\n  timestamp,\r\n}: {\r\n  chatId: string;\r\n  timestamp: Date;\r\n}) {\r\n  try {\r\n    const messagesToDelete = await db\r\n      .select({ id: chatMessages.id })\r\n      .from(chatMessages)\r\n      .where(\r\n        and(\r\n          eq(chatMessages.sessionId, chatId),\r\n          lt(chatMessages.createdAt, timestamp)\r\n        )\r\n      );\r\n\r\n    if (messagesToDelete.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const messageIds = messagesToDelete.map((msg) => msg.id);\r\n\r\n    return await db\r\n      .delete(chatMessages)\r\n      .where(inArray(chatMessages.id, messageIds))\r\n      .returning();\r\n  } catch (error) {\r\n    console.error(\r\n      \"Failed to delete messages by chat id after timestamp from database\",\r\n      error\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateChatVisiblityById({\r\n  chatId,\r\n  visibility,\r\n}: {\r\n  chatId: string;\r\n  visibility: \"private\" | \"public\";\r\n}) {\r\n  try {\r\n    return await db\r\n      .update(chatSessions)\r\n      .set({ visibility })\r\n      .where(eq(chatSessions.id, chatId));\r\n  } catch (error) {\r\n    console.error(\"Failed to update chat visibility by id from database\");\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getMessageCountByUserId({\r\n  id,\r\n  differenceInHours,\r\n}: {\r\n  id: string;\r\n  differenceInHours: number;\r\n}) {\r\n  try {\r\n    const date = new Date();\r\n    date.setHours(date.getHours() - differenceInHours);\r\n\r\n    const result = await db\r\n      .select({ value: count() })\r\n      .from(chatMessages)\r\n      .where(\r\n        and(eq(chatMessages.userId, id), gte(chatMessages.createdAt, date))\r\n      );\r\n\r\n    return result[0].value;\r\n  } catch (error) {\r\n    console.error(\"Failed to get message count by user id from database\");\r\n    throw error;\r\n  }\r\n}\r\n","/**\r\n * Utility functions for the application\r\n */\r\n\r\nimport { generateId as generateIdFromAI } from \"ai\"; // Renaming import to avoid conflict\r\nimport { genSaltSync, hashSync } from \"bcrypt-ts\";\r\nimport { type ClassValue, clsx } from \"clsx\";\r\nimport { customAlphabet } from \"nanoid\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\n/**\r\n * Utility function to merge Tailwind CSS classes with clsx conditionals\r\n * @param inputs - Class values to merge\r\n * @returns Merged class string\r\n */\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Generates a unique ID of a specified length\r\n * @param length - Length of the ID to generate (default is 16)\r\n * @returns Generated ID\r\n */\r\nexport function generateId(length: number = 16) {\r\n  return customAlphabet(\r\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\r\n    length\r\n  )();\r\n}\r\n\r\n/**\r\n * Generates a UUID\r\n * @returns Generated UUID\r\n */\r\nexport function generateUUID(): string {\r\n  if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\r\n    return crypto.randomUUID();\r\n  }\r\n  // Fallback for environments where crypto.randomUUID is not available (e.g., older Node.js versions in certain contexts)\r\n  // This is a simple v4 UUID implementation, not cryptographically secure for all uses but sufficient for unique IDs.\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n    const r = (Math.random() * 16) | 0;\r\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n/**\r\n * Formats a date into a readable string\r\n * @param date - The date to format\r\n * @returns Formatted date string\r\n */\r\nexport function formatDate(date: Date): string {\r\n  return new Intl.DateTimeFormat(\"en-US\", {\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n    year: \"numeric\",\r\n  }).format(date);\r\n}\r\n\r\n/**\r\n * Truncates a string to a specified length\r\n * @param str - The string to truncate\r\n * @param length - Max length\r\n * @returns Truncated string with ellipsis if needed\r\n */\r\nexport function truncate(str: string, length: number): string {\r\n  if (!str || str.length <= length) return str;\r\n  return `${str.slice(0, length)}...`;\r\n}\r\n\r\n// Function to convert bytes to a readable format (KB, MB, GB)\r\nexport function bytesToSize(bytes: number): string {\r\n  if (bytes === 0) return \"0 Bytes\";\r\n  const k = 1024;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\r\n}\r\n\r\n/**\r\n * Application specific error structure for fetcher\r\n */\r\ninterface ApplicationError extends Error {\r\n  info: string;\r\n  status: number;\r\n}\r\n\r\n/**\r\n * Fetches data from a URL and handles errors.\r\n * @param url - The URL to fetch.\r\n * @returns The JSON response.\r\n * @throws ApplicationError if the fetch fails.\r\n */\r\nexport const fetcher = async (url: string) => {\r\n  const res = await fetch(url);\r\n\r\n  if (!res.ok) {\r\n    const error = new Error(\r\n      \"An error occurred while fetching the data.\"\r\n    ) as ApplicationError;\r\n    // Attempt to parse error info, but don't fail if it's not JSON\r\n    try {\r\n      error.info = await res.json();\r\n    } catch (e) {\r\n      error.info = res.statusText; // Fallback to status text\r\n    }\r\n    error.status = res.status;\r\n    throw error;\r\n  }\r\n  return res.json();\r\n};\r\n\r\n/**\r\n * Retrieves an item from localStorage.\r\n * @param key - The key of the item to retrieve.\r\n * @returns The parsed JSON object or an empty array if not found or in a non-browser environment.\r\n */\r\nexport function getLocalStorage(key: string): any[] | Record<string, any> {\r\n  if (typeof window !== \"undefined\" && window.localStorage) {\r\n    const item = localStorage.getItem(key);\r\n    try {\r\n      return item ? JSON.parse(item) : []; // Default to empty array if null, or parse\r\n    } catch (error) {\r\n      console.error(\r\n        `Error parsing localStorage item with key \"${key}\":`,\r\n        error\r\n      );\r\n      return []; // Return empty array on parsing error\r\n    }\r\n  }\r\n  return []; // Return empty array if not in browser or localStorage not available\r\n}\r\n\r\n/**\r\n * Sanitizes text by removing specific placeholder strings.\r\n * Currently removes \"<has_function_call>\".\r\n * @param text - The input string to sanitize.\r\n * @returns The sanitized string.\r\n */\r\nexport function sanitizeText(text: string): string {\r\n  if (typeof text !== \"string\") return \"\";\r\n  return text.replace(/<has_function_call>/g, \"\");\r\n}\r\n\r\n/**\r\n * Sanitizes UI messages by cleaning their content.\r\n * Used to process messages before displaying them in the UI.\r\n * @param messages - Array of UI/Chat messages to sanitize\r\n * @returns The sanitized messages array\r\n */\r\nexport function sanitizeUIMessages<T extends { content: string }>(\r\n  messages: T[]\r\n): T[] {\r\n  return messages.map((message) => ({\r\n    ...message,\r\n    content: sanitizeText(message.content),\r\n  }));\r\n}\r\n\r\nexport function generateHashedPassword(password: string): string {\r\n  const salt = genSaltSync(10);\r\n  const hash = hashSync(password, salt);\r\n\r\n  return hash;\r\n}\r\n\r\nexport function generateDummyPassword(): string {\r\n  const password = generateIdFromAI(12); // Using the renamed import\r\n  const hashedPassword = generateHashedPassword(password);\r\n\r\n  return hashedPassword;\r\n}\r\n","import { generateId } from \"ai\";\r\nimport { genSaltSync, hashSync } from \"bcrypt-ts\";\r\n\r\nimport type { Document } from \"./schema\";\r\nimport type { CoreAssistantMessage, CoreToolMessage, UIMessage } from \"ai\";\r\n\r\nexport function generateHashedPassword(password: string) {\r\n  const salt = genSaltSync(10);\r\n  const hash = hashSync(password, salt);\r\n\r\n  return hash;\r\n}\r\n\r\nexport function generateDummyPassword() {\r\n  const password = generateId(12);\r\n  const hashedPassword = generateHashedPassword(password);\r\n\r\n  return hashedPassword;\r\n}\r\n\r\nexport function getMostRecentUserMessage(messages: Array<UIMessage>) {\r\n  const userMessages = messages.filter((message) => message.role === \"user\");\r\n  return userMessages.at(-1);\r\n}\r\n\r\nexport function getDocumentTimestampByIndex(\r\n  documents: Array<Document>,\r\n  index: number\r\n) {\r\n  if (!documents) return new Date();\r\n  if (index > documents.length) return new Date();\r\n\r\n  return documents[index].createdAt;\r\n}\r\n\r\nexport function getTrailingMessageId({\r\n  messages,\r\n}: {\r\n  messages: Array<ResponseMessage>;\r\n}): string | null {\r\n  const trailingMessage = messages.at(-1);\r\n\r\n  if (!trailingMessage) return null;\r\n\r\n  return trailingMessage.id;\r\n}\r\n\r\n// Add back ResponseMessage types required by getTrailingMessageId\r\ntype ResponseMessageWithoutId = CoreToolMessage | CoreAssistantMessage;\r\ntype ResponseMessage = ResponseMessageWithoutId & { id: string };\r\n"],"names":["userRoleEnum","pgEnum","pgTable","id","uuid","primaryKey","firstName","text","lastName","avatarUrl","bio","timezone","language","default","countryOfResidence","countryOfInterest","countryOfCitizenship","isAdmin","boolean","visaType","immigrationGoals","role","createdAt","timestamp","withTimezone","defaultNow","updatedAt","cases","defaultRandom","userId","notNull","references","profiles","onDelete","title","description","status","caseStatusEnum","metadata","json","context","prompt","model","systemPrompt","agentConfig","caseId","lastMessageAt","visibility","varchar","enum","sessionId","chatSessions","content","sources","toolCalls","tokens","integer","messageId","chatMessages","isUpvoted","pk","columns","table","artifacts","kind","documentId","fromText","toText","chatId","fileName","fileType","fileSize","filePath","legacyChats","legacyMessages","parts","attachments","legacyMessagesV2","textPartSchema","z","min","max","type","chatMessageSchema","date","experimental_attachments","url","name","contentType","optional","messages","selectedChatModel","extend","countryCode","client","postgres","process","env","POSTGRES_URL","db","drizzle","getChatSessionById","selectedSession","select","from","where","eq","error","console","voteMessage","insert","chatMessageVotes","values","onConflictDoUpdate","target","set","returning","getVotesForMessagesInSession","innerJoin","saveDocument","dbKind","mapArtifactTypeToDbKind","artifactType","Date","getDocumentsById","documents","selectDistinctOn","orderBy","desc","deleteDocumentsByIdAfterTimestamp","delete","and","lt","getSuggestionsByDocumentId","suggestions","getMessageById","messageData","cn","inputs","twMerge","clsx","generateUUID","crypto","randomUUID","replace","c","r","random","v","toString","generateDummyPassword","password","generateIdFromAI","salt","genSaltSync","hashSync"],"sourceRoot":""}