type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  phone: String
  countryOfResidence: String
  createdAt: DateTime!
  updatedAt: DateTime!
  lastLogin: DateTime
  status: UserStatus!
  emailVerified: Boolean!
  profile: JSON
  cases: [ImmigrationCase!]
  documents: [Document!]
  chatSessions: [ChatSession!]
}

type ImmigrationCase {
  id: ID!
  user: User!
  caseType: String!
  destinationCountry: String!
  currentStage: String!
  status: CaseStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  targetDate: Date
  requirements: JSON
  notes: String
  documents: [Document!]
  tasks: [Task!]
}

type Document {
  id: ID!
  case: ImmigrationCase
  user: User!
  name: String!
  type: String!
  status: DocumentStatus!
  storagePath: String!
  uploadedAt: DateTime!
  expiresAt: Date
  metadata: JSON
  version: Int!
}

type ChatSession {
  id: ID!
  user: User!
  case: ImmigrationCase
  startedAt: DateTime!
  endedAt: DateTime
  context: JSON
  metadata: JSON
  messages: [ChatMessage!]!
}

type ChatMessage {
  id: ID!
  session: ChatSession!
  role: ChatRole!
  content: String!
  timestamp: DateTime!
  metadata: JSON
}

type Task {
  id: ID!
  case: ImmigrationCase!
  title: String!
  description: String
  dueDate: Date
  status: TaskStatus!
  priority: Int!
  createdAt: DateTime!
  completedAt: DateTime
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CaseStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum DocumentStatus {
  ACTIVE
  EXPIRED
  REJECTED
  PENDING_REVIEW
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ChatRole {
  USER
  ASSISTANT
  SYSTEM
}

scalar DateTime
scalar Date
scalar JSON

type Query {
  me: User
  user(id: ID!): User
  case(id: ID!): ImmigrationCase
  cases(
    status: CaseStatus
    limit: Int = 10
    offset: Int = 0
  ): [ImmigrationCase!]!
  documents(
    caseId: ID
    type: String
    limit: Int = 10
    offset: Int = 0
  ): [Document!]!
  chatSessions(
    caseId: ID
    limit: Int = 10
    offset: Int = 0
  ): [ChatSession!]!
  chatMessages(
    sessionId: ID!
    limit: Int = 50
    offset: Int = 0
  ): [ChatMessage!]!
  tasks(
    caseId: ID!
    status: TaskStatus
    limit: Int = 10
    offset: Int = 0
  ): [Task!]!
}

type Mutation {
  createCase(input: CreateCaseInput!): ImmigrationCase!
  updateCase(id: ID!, input: UpdateCaseInput!): ImmigrationCase!
  deleteCase(id: ID!): Boolean!
  
  uploadDocument(input: UploadDocumentInput!): Document!
  updateDocument(id: ID!, input: UpdateDocumentInput!): Document!
  deleteDocument(id: ID!): Boolean!
  
  createChatSession(input: CreateChatSessionInput!): ChatSession!
  endChatSession(id: ID!): ChatSession!
  sendChatMessage(input: SendChatMessageInput!): ChatMessage!
  
  createTask(input: CreateTaskInput!): Task!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): Boolean!
  
  updateProfile(input: UpdateProfileInput!): User!
}

input CreateCaseInput {
  caseType: String!
  destinationCountry: String!
  targetDate: Date
  requirements: JSON
  notes: String
}

input UpdateCaseInput {
  caseType: String
  destinationCountry: String
  currentStage: String
  status: CaseStatus
  targetDate: Date
  requirements: JSON
  notes: String
}

input UploadDocumentInput {
  caseId: ID
  name: String!
  type: String!
  file: Upload!
  metadata: JSON
}

input UpdateDocumentInput {
  name: String
  type: String
  status: DocumentStatus
  expiresAt: Date
  metadata: JSON
}

input CreateChatSessionInput {
  caseId: ID
  context: JSON
}

input SendChatMessageInput {
  sessionId: ID!
  content: String!
  metadata: JSON
}

input CreateTaskInput {
  caseId: ID!
  title: String!
  description: String
  dueDate: Date
  priority: Int
}

input UpdateTaskInput {
  title: String
  description: String
  dueDate: Date
  status: TaskStatus
  priority: Int
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  phone: String
  countryOfResidence: String
  profile: JSON
}

scalar Upload 