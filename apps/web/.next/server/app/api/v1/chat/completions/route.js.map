{"version":3,"file":"../app/api/v1/chat/completions/route.js","mappings":"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","sources":["webpack://@hijraah/web/external commonjs \"next/dist/server/app-render/after-task-async-storage.external.js\"","webpack://@hijraah/web/external commonjs2 \"module\"","webpack://@hijraah/web/external commonjs \"next/dist/compiled/next-server/app-page.runtime.prod.js\"","webpack://@hijraah/web/external commonjs2 \"punycode\"","webpack://@hijraah/web/external commonjs \"next/dist/server/app-render/action-async-storage.external.js\"","webpack://@hijraah/web/external commonjs2 \"process\"","webpack://@hijraah/web/external commonjs2 \"os\"","webpack://@hijraah/web/external commonjs2 \"stream\"","webpack://@hijraah/web/external commonjs2 \"util\"","webpack://@hijraah/web/external commonjs2 \"fs\"","webpack://@hijraah/web/external commonjs \"next/dist/server/app-render/work-async-storage.external.js\"","webpack://@hijraah/web/external node-commonjs \"node:child_process\"","webpack://@hijraah/web/external commonjs2 \"path\"","webpack://@hijraah/web/external commonjs2 \"tls\"","webpack://@hijraah/web/external commonjs2 \"diagnostics_channel\"","webpack://@hijraah/web/external node-commonjs \"node:http\"","webpack://@hijraah/web/external node-commonjs \"node:stream/web\"","webpack://@hijraah/web/external node-commonjs \"node:zlib\"","webpack://@hijraah/web/external node-commonjs \"node:tls\"","webpack://@hijraah/web/external node-commonjs \"node:https\"","webpack://@hijraah/web/external commonjs \"next/dist/compiled/next-server/app-route.runtime.prod.js\"","webpack://@hijraah/web/external node-commonjs \"node:os\"","webpack://@hijraah/web/external node-commonjs \"node:diagnostics_channel\"","webpack://@hijraah/web/external commonjs2 \"crypto\"","webpack://@hijraah/web/external commonjs2 \"https\"","webpack://@hijraah/web/external node-commonjs \"node:stream\"","webpack://@hijraah/web/external node-commonjs \"node:util\"","webpack://@hijraah/web/../../packages/database/src/client.ts","webpack://@hijraah/web/external commonjs \"next/dist/server/app-render/work-unit-async-storage.external.js\"","webpack://@hijraah/web/external node-commonjs \"node:fs\"","webpack://@hijraah/web/external commonjs2 \"worker_threads\"","webpack://@hijraah/web/external commonjs2 \"zlib\"","webpack://@hijraah/web/external commonjs2 \"perf_hooks\"","webpack://@hijraah/web/external node-commonjs \"node:worker_threads\"","webpack://@hijraah/web/external node-commonjs \"node:path\"","webpack://@hijraah/web/external node-commonjs \"node:net\"","webpack://@hijraah/web/external node-commonjs \"node:crypto\"","webpack://@hijraah/web/external commonjs2 \"buffer\"","webpack://@hijraah/web/external commonjs2 \"url\"","webpack://@hijraah/web/external commonjs2 \"child_process\"","webpack://@hijraah/web/external node-commonjs \"node:readline\"","webpack://@hijraah/web/external commonjs2 \"http\"","webpack://@hijraah/web/external commonjs2 \"tty\"","webpack://@hijraah/web/external commonjs2 \"async_hooks\"","webpack://@hijraah/web/external node-commonjs \"node:inspector\"","webpack://@hijraah/web/external commonjs2 \"net\"","webpack://@hijraah/web/external commonjs2 \"events\"","webpack://@hijraah/web/./src/lib/ai/model-multiplexer.ts","webpack://@hijraah/web/./src/lib/ai/enhanced-hybrid-retriever.ts","webpack://@hijraah/web/src/app/api/v1/chat/completions/route.ts","webpack://@hijraah/web/sentry-wrapper-module","webpack://@hijraah/web/?62d3"],"sourcesContent":["module.exports = require(\"next/dist/server/app-render/after-task-async-storage.external.js\");","module.exports = require(\"module\");","module.exports = require(\"next/dist/compiled/next-server/app-page.runtime.prod.js\");","module.exports = require(\"punycode\");","module.exports = require(\"next/dist/server/app-render/action-async-storage.external.js\");","module.exports = require(\"process\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","module.exports = require(\"next/dist/server/app-render/work-async-storage.external.js\");","module.exports = require(\"node:child_process\");","module.exports = require(\"path\");","module.exports = require(\"tls\");","module.exports = require(\"diagnostics_channel\");","module.exports = require(\"node:http\");","module.exports = require(\"node:stream/web\");","module.exports = require(\"node:zlib\");","module.exports = require(\"node:tls\");","module.exports = require(\"node:https\");","module.exports = require(\"next/dist/compiled/next-server/app-route.runtime.prod.js\");","module.exports = require(\"node:os\");","module.exports = require(\"node:diagnostics_channel\");","module.exports = require(\"crypto\");","module.exports = require(\"https\");","module.exports = require(\"node:stream\");","module.exports = require(\"node:util\");","import { drizzle } from \"drizzle-orm/postgres-js\";\r\nimport postgres from \"postgres\";\r\nimport * as schema from \"./schema\";\r\n\r\n// Environment variable setup\r\nconst connectionString = process.env.DATABASE_URL;\r\n\r\nif (!connectionString) {\r\n  throw new Error(\"DATABASE_URL environment variable is required\");\r\n}\r\n\r\n// Create the connection\r\nconst client = postgres(connectionString, {\r\n  max: 10,\r\n  idle_timeout: 20,\r\n  connect_timeout: 10,\r\n});\r\n\r\n// Create the Drizzle database instance\r\nexport const db = drizzle(client, {\r\n  schema,\r\n  logger: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// Export types for use in applications\r\nexport type Database = typeof db;\r\n\r\n// Export the client for manual queries if needed\r\nexport { client as pgClient };\r\n\r\n// Export all schemas\r\nexport * from \"./schema\";\r\n","module.exports = require(\"next/dist/server/app-render/work-unit-async-storage.external.js\");","module.exports = require(\"node:fs\");","module.exports = require(\"worker_threads\");","module.exports = require(\"zlib\");","module.exports = require(\"perf_hooks\");","module.exports = require(\"node:worker_threads\");","module.exports = require(\"node:path\");","module.exports = require(\"node:net\");","module.exports = require(\"node:crypto\");","module.exports = require(\"buffer\");","module.exports = require(\"url\");","module.exports = require(\"child_process\");","module.exports = require(\"node:readline\");","module.exports = require(\"http\");","module.exports = require(\"tty\");","module.exports = require(\"async_hooks\");","module.exports = require(\"node:inspector\");","module.exports = require(\"net\");","module.exports = require(\"events\");","import OpenAI from \"openai\";\r\nimport { Redis } from \"@upstash/redis\";\r\n\r\ninterface ModelConfig {\r\n  client: OpenAI;\r\n  priority: number;\r\n  name: string;\r\n  rateLimit: {\r\n    requests: number;\r\n    window: number; // in seconds\r\n  };\r\n}\r\n\r\ninterface CompletionRequest {\r\n  model: string;\r\n  messages: Array<{\r\n    role: \"user\" | \"assistant\" | \"system\";\r\n    content: string;\r\n  }>;\r\n  max_tokens?: number;\r\n  temperature?: number;\r\n  stream?: boolean;\r\n}\r\n\r\nexport class ModelMultiplexer {\r\n  private primaryModels: ModelConfig[] = [];\r\n  private fallbackModels: ModelConfig[] = [];\r\n  private redis: Redis;\r\n\r\n  constructor() {\r\n    this.redis = new Redis({\r\n      url: process.env.UPSTASH_REDIS_URL!,\r\n      token: process.env.UPSTASH_REDIS_TOKEN!,\r\n    });\r\n\r\n    this.initializeModels();\r\n  }\r\n\r\n  private initializeModels() {\r\n    // Primary models (high quality, immigration expertise)\r\n    if (process.env.ANTHROPIC_API_KEY) {\r\n      this.primaryModels.push({\r\n        client: new OpenAI({\r\n          apiKey: process.env.ANTHROPIC_API_KEY,\r\n          baseURL: \"https://api.anthropic.com/v1/\",\r\n        }),\r\n        priority: 5,\r\n        name: \"claude-3-5-sonnet-20241022\",\r\n        rateLimit: { requests: 40, window: 60 },\r\n      });\r\n    }\r\n\r\n    if (process.env.OPENAI_API_KEY) {\r\n      this.primaryModels.push({\r\n        client: new OpenAI({\r\n          apiKey: process.env.OPENAI_API_KEY,\r\n          baseURL: \"https://api.openai.com/v1\",\r\n        }),\r\n        priority: 4,\r\n        name: \"gpt-4o\",\r\n        rateLimit: { requests: 100, window: 60 },\r\n      });\r\n    }\r\n\r\n    if (process.env.GEMINI_API_KEY) {\r\n      this.primaryModels.push({\r\n        client: new OpenAI({\r\n          apiKey: process.env.GEMINI_API_KEY,\r\n          baseURL: \"https://generativelanguage.googleapis.com/v1beta/\",\r\n        }),\r\n        priority: 3,\r\n        name: \"gemini-1.5-pro\",\r\n        rateLimit: { requests: 60, window: 60 },\r\n      });\r\n    }\r\n\r\n    // Fallback models (cost-effective, high availability)\r\n    if (process.env.OPENAI_API_KEY) {\r\n      this.fallbackModels.push({\r\n        client: new OpenAI({\r\n          apiKey: process.env.OPENAI_API_KEY,\r\n          baseURL: \"https://api.openai.com/v1\",\r\n        }),\r\n        priority: 5,\r\n        name: \"gpt-4o-mini\",\r\n        rateLimit: { requests: 200, window: 60 },\r\n      });\r\n    }\r\n\r\n    if (process.env.GEMINI_API_KEY) {\r\n      this.fallbackModels.push({\r\n        client: new OpenAI({\r\n          apiKey: process.env.GEMINI_API_KEY,\r\n          baseURL: \"https://generativelanguage.googleapis.com/v1beta/\",\r\n        }),\r\n        priority: 4,\r\n        name: \"gemini-1.5-flash\",\r\n        rateLimit: { requests: 100, window: 60 },\r\n      });\r\n    }\r\n\r\n    if (process.env.ANTHROPIC_API_KEY) {\r\n      this.fallbackModels.push({\r\n        client: new OpenAI({\r\n          apiKey: process.env.ANTHROPIC_API_KEY,\r\n          baseURL: \"https://api.anthropic.com/v1/\",\r\n        }),\r\n        priority: 3,\r\n        name: \"claude-3-haiku-20240307\",\r\n        rateLimit: { requests: 60, window: 60 },\r\n      });\r\n    }\r\n\r\n    // Sort by priority (highest first)\r\n    this.primaryModels.sort((a, b) => b.priority - a.priority);\r\n    this.fallbackModels.sort((a, b) => b.priority - a.priority);\r\n  }\r\n\r\n  private async checkRateLimit(modelName: string): Promise<boolean> {\r\n    try {\r\n      const key = `rate_limit:${modelName}`;\r\n      const current = await this.redis.get(key);\r\n\r\n      if (current === null) {\r\n        await this.redis.setex(key, 60, 1);\r\n        return true;\r\n      }\r\n\r\n      const model = [...this.primaryModels, ...this.fallbackModels].find(\r\n        (m) => m.name === modelName\r\n      );\r\n\r\n      if (!model) return false;\r\n\r\n      if (Number(current) >= model.rateLimit.requests) {\r\n        return false;\r\n      }\r\n\r\n      await this.redis.incr(key);\r\n      return true;\r\n    } catch (error) {\r\n      console.warn(\"Rate limit check failed, allowing request:\", error);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private async tryModelCompletion(\r\n    model: ModelConfig,\r\n    request: CompletionRequest\r\n  ): Promise<any> {\r\n    try {\r\n      // Check rate limit\r\n      const withinLimit = await this.checkRateLimit(model.name);\r\n      if (!withinLimit) {\r\n        throw new Error(`Rate limit exceeded for ${model.name}`);\r\n      }\r\n\r\n      // Map model names to provider-specific names\r\n      const providerModel = this.mapModelName(request.model, model.name);\r\n\r\n      const completion = await model.client.chat.completions.create({\r\n        model: providerModel,\r\n        messages: request.messages,\r\n        max_tokens: request.max_tokens,\r\n        temperature: request.temperature,\r\n        stream: request.stream,\r\n      });\r\n\r\n      return {\r\n        ...completion,\r\n        model: model.name, // Return our standard model name\r\n        hijraah_provider: this.getProviderName(model.name),\r\n      };\r\n    } catch (error) {\r\n      console.error(`Model ${model.name} failed:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private mapModelName(requestedModel: string, providerModel: string): string {\r\n    // Map generic model names to provider-specific names\r\n    const modelMap: Record<string, Record<string, string>> = {\r\n      \"gpt-4o\": {\r\n        \"gpt-4o\": \"gpt-4o\",\r\n        \"gpt-4o-mini\": \"gpt-4o-mini\",\r\n      },\r\n      \"claude-3-5-sonnet\": {\r\n        \"claude-3-5-sonnet-20241022\": \"claude-3-5-sonnet-20241022\",\r\n        \"claude-3-haiku-20240307\": \"claude-3-haiku-20240307\",\r\n      },\r\n      \"gemini-pro\": {\r\n        \"gemini-1.5-pro\": \"gemini-1.5-pro-latest\",\r\n        \"gemini-1.5-flash\": \"gemini-1.5-flash-latest\",\r\n      },\r\n    };\r\n\r\n    // If direct mapping exists, use it\r\n    if (modelMap[requestedModel]?.[providerModel]) {\r\n      return modelMap[requestedModel][providerModel];\r\n    }\r\n\r\n    // Otherwise return the provider model as-is\r\n    return providerModel;\r\n  }\r\n\r\n  private getProviderName(modelName: string): string {\r\n    if (modelName.includes(\"gpt\")) return \"openai\";\r\n    if (modelName.includes(\"claude\")) return \"anthropic\";\r\n    if (modelName.includes(\"gemini\")) return \"google\";\r\n    return \"unknown\";\r\n  }\r\n\r\n  async createChatCompletion(request: CompletionRequest): Promise<any> {\r\n    const allModels = [...this.primaryModels, ...this.fallbackModels];\r\n    const errors: Error[] = [];\r\n\r\n    // Try primary models first\r\n    for (const model of this.primaryModels) {\r\n      try {\r\n        const result = await this.tryModelCompletion(model, request);\r\n        console.log(`✅ Success with primary model: ${model.name}`);\r\n        return result;\r\n      } catch (error) {\r\n        console.warn(`❌ Primary model ${model.name} failed:`, error);\r\n        errors.push(error as Error);\r\n      }\r\n    }\r\n\r\n    console.log(\"🔄 All primary models failed, trying fallbacks...\");\r\n\r\n    // Try fallback models\r\n    for (const model of this.fallbackModels) {\r\n      try {\r\n        const result = await this.tryModelCompletion(model, request);\r\n        console.log(`✅ Success with fallback model: ${model.name}`);\r\n        return result;\r\n      } catch (error) {\r\n        console.warn(`❌ Fallback model ${model.name} failed:`, error);\r\n        errors.push(error as Error);\r\n      }\r\n    }\r\n\r\n    // All models failed\r\n    const errorMessage = `All models failed: ${errors.map((e) => e.message).join(\", \")}`;\r\n    console.error(\"💥 Complete failure:\", errorMessage);\r\n\r\n    throw new Error(errorMessage);\r\n  }\r\n\r\n  async getModelStatus(): Promise<{\r\n    primary: Array<{ name: string; available: boolean; priority: number }>;\r\n    fallback: Array<{ name: string; available: boolean; priority: number }>;\r\n  }> {\r\n    const checkModelAvailability = async (model: ModelConfig) => {\r\n      const available = await this.checkRateLimit(model.name);\r\n      return {\r\n        name: model.name,\r\n        available,\r\n        priority: model.priority,\r\n      };\r\n    };\r\n\r\n    const [primaryStatus, fallbackStatus] = await Promise.all([\r\n      Promise.all(this.primaryModels.map(checkModelAvailability)),\r\n      Promise.all(this.fallbackModels.map(checkModelAvailability)),\r\n    ]);\r\n\r\n    return {\r\n      primary: primaryStatus,\r\n      fallback: fallbackStatus,\r\n    };\r\n  }\r\n}\r\n\r\nexport default ModelMultiplexer;\r\n","// Enhanced Hybrid Retriever stub\r\n// TODO: Implement actual hybrid retrieval after migration\r\n\r\nexport interface RetrievalResult {\r\n  content: string;\r\n  score: number;\r\n  metadata: Record<string, any>;\r\n}\r\n\r\nexport interface RetrievalOptions {\r\n  query: string;\r\n  topK?: number;\r\n  threshold?: number;\r\n}\r\n\r\nexport class EnhancedHybridRetriever {\r\n  constructor(config?: any) {\r\n    console.log(\"EnhancedHybridRetriever stub initialized\");\r\n  }\r\n\r\n  async retrieve(options: RetrievalOptions): Promise<RetrievalResult[]> {\r\n    console.log(`Enhanced retrieval called for query: ${options.query}`);\r\n\r\n    // Return stub results\r\n    return [\r\n      {\r\n        content: `Stubbed retrieval result for: ${options.query} - Enhanced retrieval temporarily disabled during migration`,\r\n        score: 0.9,\r\n        metadata: {\r\n          source: \"stub\",\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default EnhancedHybridRetriever;\r\n","import { NextRequest, NextResponse } from \"next/server\";\r\nimport { auth } from \"@/lib/auth\";\r\nimport { ModelMultiplexer } from \"@/lib/ai/model-multiplexer\";\r\nimport { EnhancedHybridRetriever } from \"@/lib/ai/enhanced-hybrid-retriever\";\r\nimport { db } from \"@hijraah/database/client\";\r\nimport {\r\n  chatSessions,\r\n  chatMessages,\r\n  webIndexes,\r\n} from \"@hijraah/database/schema\";\r\nimport { eq, and } from \"drizzle-orm\";\r\nimport { z } from \"zod\";\r\n\r\n// OpenAI-compatible request schema\r\nconst chatCompletionSchema = z.object({\r\n  model: z.string().default(\"gpt-4o\"),\r\n  messages: z.array(\r\n    z.object({\r\n      role: z.enum([\"user\", \"assistant\", \"system\"]),\r\n      content: z.string(),\r\n    })\r\n  ),\r\n  max_tokens: z.number().optional(),\r\n  temperature: z.number().min(0).max(2).default(0.7),\r\n  stream: z.boolean().default(false),\r\n  // Custom Hijraah parameters\r\n  web_index_id: z.string().optional(),\r\n  use_rag: z.boolean().default(true),\r\n  chat_session_id: z.string().optional(),\r\n});\r\n\r\n// Initialize services\r\nconst modelMultiplexer = new ModelMultiplexer();\r\nconst hybridRetriever = new EnhancedHybridRetriever();\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: { message: \"Unauthorized\", type: \"authentication_error\" } },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const validatedData = chatCompletionSchema.parse(body);\r\n\r\n    // Get user's last message for RAG\r\n    const userMessage = validatedData.messages\r\n      .filter((m) => m.role === \"user\")\r\n      .pop();\r\n\r\n    if (!userMessage) {\r\n      return NextResponse.json(\r\n        {\r\n          error: {\r\n            message: \"No user message found\",\r\n            type: \"invalid_request_error\",\r\n          },\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    let contextMessages = validatedData.messages;\r\n    let sources: any[] = [];\r\n\r\n    // Perform RAG retrieval if enabled and web_index_id provided\r\n    if (validatedData.use_rag && validatedData.web_index_id) {\r\n      // Verify user has access to the web index\r\n      const [webIndex] = await db\r\n        .select()\r\n        .from(webIndexes)\r\n        .where(\r\n          and(\r\n            eq(webIndexes.id, validatedData.web_index_id),\r\n            eq(webIndexes.userId, session.user.id)\r\n          )\r\n        )\r\n        .limit(1);\r\n\r\n      if (webIndex) {\r\n        try {\r\n          const retrievalResult = await hybridRetriever.retrieve(\r\n            userMessage.content,\r\n            {\r\n              limit: 5,\r\n              webIndexId: validatedData.web_index_id,\r\n            }\r\n          );\r\n\r\n          sources = retrievalResult.documents;\r\n\r\n          // Add context to messages if sources found\r\n          if (sources.length > 0) {\r\n            const contextContent = sources\r\n              .map((doc, index) => `[Source ${index + 1}]: ${doc.content}`)\r\n              .join(\"\\n\\n\");\r\n\r\n            const systemMessage = {\r\n              role: \"system\" as const,\r\n              content: `You are an AI assistant for Hijraah Immigration Platform. Use the following context to answer the user's question. If the context doesn't contain relevant information, say so clearly.\r\n\r\nContext:\r\n${contextContent}\r\n\r\nInstructions:\r\n- Provide accurate, helpful answers based on the context\r\n- Cite sources when referencing specific information\r\n- If information is not in the context, acknowledge this limitation\r\n- Focus on immigration-related guidance when appropriate`,\r\n            };\r\n\r\n            contextMessages = [systemMessage, ...validatedData.messages];\r\n          }\r\n        } catch (ragError) {\r\n          console.warn(\r\n            \"RAG retrieval failed, continuing without context:\",\r\n            ragError\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Generate response using model multiplexer\r\n    const completion = await modelMultiplexer.createChatCompletion({\r\n      model: validatedData.model,\r\n      messages: contextMessages,\r\n      max_tokens: validatedData.max_tokens,\r\n      temperature: validatedData.temperature,\r\n      stream: validatedData.stream,\r\n    });\r\n\r\n    // Store chat session and messages if chat_session_id provided\r\n    if (validatedData.chat_session_id) {\r\n      try {\r\n        // Verify chat session belongs to user\r\n        const [chatSession] = await db\r\n          .select()\r\n          .from(chatSessions)\r\n          .where(\r\n            and(\r\n              eq(chatSessions.id, validatedData.chat_session_id),\r\n              eq(chatSessions.userId, session.user.id)\r\n            )\r\n          )\r\n          .limit(1);\r\n\r\n        if (chatSession) {\r\n          // Store user message\r\n          await db.insert(chatMessages).values({\r\n            chatId: validatedData.chat_session_id,\r\n            role: \"user\",\r\n            content: userMessage.content,\r\n            metadata: {\r\n              webIndexId: validatedData.web_index_id,\r\n              sourcesCount: sources.length,\r\n            },\r\n          });\r\n\r\n          // Store assistant response\r\n          const assistantContent = validatedData.stream\r\n            ? \"[Streaming response]\"\r\n            : completion.choices[0]?.message?.content || \"\";\r\n\r\n          await db.insert(chatMessages).values({\r\n            chatId: validatedData.chat_session_id,\r\n            role: \"assistant\",\r\n            content: assistantContent,\r\n            metadata: {\r\n              model: completion.model,\r\n              usage: completion.usage,\r\n              sources: sources.map((s) => ({\r\n                id: s.id,\r\n                title: s.title,\r\n                url: s.source,\r\n              })),\r\n            },\r\n          });\r\n        }\r\n      } catch (dbError) {\r\n        console.error(\"Failed to store chat messages:\", dbError);\r\n        // Continue without failing the request\r\n      }\r\n    }\r\n\r\n    // Handle streaming response\r\n    if (validatedData.stream) {\r\n      return new Response(completion.stream, {\r\n        headers: {\r\n          \"Content-Type\": \"text/event-stream\",\r\n          \"Cache-Control\": \"no-cache\",\r\n          Connection: \"keep-alive\",\r\n        },\r\n      });\r\n    }\r\n\r\n    // Add sources to response metadata for non-streaming\r\n    const response = {\r\n      ...completion,\r\n      hijraah_metadata: {\r\n        sources: sources.map((s) => ({\r\n          id: s.id,\r\n          title: s.title,\r\n          url: s.source,\r\n          relevance: s.similarity,\r\n        })),\r\n        web_index_id: validatedData.web_index_id,\r\n        rag_enabled: validatedData.use_rag,\r\n      },\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error(\"Error in chat completions:\", error);\r\n\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        {\r\n          error: {\r\n            message: \"Invalid request parameters\",\r\n            type: \"invalid_request_error\",\r\n            details: error.errors,\r\n          },\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: {\r\n          message: \"Internal server error\",\r\n          type: \"api_error\",\r\n        },\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// GET endpoint for API documentation\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    name: \"Hijraah Chat Completions API\",\r\n    description: \"OpenAI-compatible chat completions with RAG capabilities\",\r\n    version: \"1.0.0\",\r\n    endpoints: {\r\n      \"POST /api/v1/chat/completions\": {\r\n        description: \"Create a chat completion with optional RAG retrieval\",\r\n        parameters: {\r\n          model: \"AI model to use (default: gpt-4o)\",\r\n          messages: \"Array of chat messages\",\r\n          web_index_id: \"Optional web index ID for RAG retrieval\",\r\n          use_rag: \"Enable/disable RAG retrieval (default: true)\",\r\n          chat_session_id: \"Optional chat session ID for message storage\",\r\n          temperature: \"Sampling temperature (0-2, default: 0.7)\",\r\n          max_tokens: \"Maximum tokens in response\",\r\n          stream: \"Enable streaming response (default: false)\",\r\n        },\r\n      },\r\n    },\r\n    authentication: \"Bearer token required\",\r\n  });\r\n}\r\n","import * as origModule from 'next/dist/server/app-render/work-unit-async-storage.external.js';\nimport * as serverComponentModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport {} from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nimport * as Sentry from '@sentry/nextjs';\n\n// @ts-expect-error Because we cannot be sure if the RequestAsyncStorage module exists (it is not part of the Next.js public\n// API) we use a shim if it doesn't exist. The logic for this is in the wrapping loader.\n\nconst asyncStorageModule = { ...origModule } ;\n\nconst requestAsyncStorage =\n  'workUnitAsyncStorage' in asyncStorageModule\n    ? asyncStorageModule.workUnitAsyncStorage\n    : 'requestAsyncStorage' in asyncStorageModule\n      ? asyncStorageModule.requestAsyncStorage\n      : undefined;\n\nfunction wrapHandler(handler, method) {\n  // Running the instrumentation code during the build phase will mark any function as \"dynamic\" because we're accessing\n  // the Request object. We do not want to turn handlers dynamic so we skip instrumentation in the build phase.\n  if (process.env.NEXT_PHASE === 'phase-production-build') {\n    return handler;\n  }\n\n  if (typeof handler !== 'function') {\n    return handler;\n  }\n\n  return new Proxy(handler, {\n    apply: (originalFunction, thisArg, args) => {\n      let headers = undefined;\n\n      // We try-catch here just in case the API around `requestAsyncStorage` changes unexpectedly since it is not public API\n      try {\n        const requestAsyncStore = requestAsyncStorage?.getStore() ;\n        headers = requestAsyncStore?.headers;\n      } catch (e) {\n        /** empty */\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return Sentry.wrapRouteHandlerWithSentry(originalFunction , {\n        method,\n        parameterizedRoute: '/api/v1/chat/completions',\n        headers,\n      }).apply(thisArg, args);\n    },\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst GET = wrapHandler(serverComponentModule.GET , 'GET');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst POST = wrapHandler(serverComponentModule.POST , 'POST');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst PUT = wrapHandler(serverComponentModule.PUT , 'PUT');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst PATCH = wrapHandler(serverComponentModule.PATCH , 'PATCH');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst DELETE = wrapHandler(serverComponentModule.DELETE , 'DELETE');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst HEAD = wrapHandler(serverComponentModule.HEAD , 'HEAD');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst OPTIONS = wrapHandler(serverComponentModule.OPTIONS , 'OPTIONS');\n\nexport { DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT };\n","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"E:\\\\downloads\\\\Hijraah\\\\apps\\\\web\\\\src\\\\app\\\\api\\\\v1\\\\chat\\\\completions\\\\route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/v1/chat/completions/route\",\n        pathname: \"/api/v1/chat/completions\",\n        filename: \"route\",\n        bundlePath: \"app/api/v1/chat/completions/route\"\n    },\n    resolvedPagePath: \"E:\\\\downloads\\\\Hijraah\\\\apps\\\\web\\\\src\\\\app\\\\api\\\\v1\\\\chat\\\\completions\\\\route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map"],"names":["connectionString","process","env","DATABASE_URL","client","postgres","max","idle_timeout","connect_timeout","db","drizzle","schema","logger","ModelMultiplexer","constructor","primaryModels","fallbackModels","redis","Redis","url","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_TOKEN","initializeModels","ANTHROPIC_API_KEY","push","OpenAI","apiKey","baseURL","priority","name","rateLimit","requests","window","OPENAI_API_KEY","GEMINI_API_KEY","sort","a","b","checkRateLimit","modelName","key","current","get","setex","model","find","m","Number","incr","error","console","warn","tryModelCompletion","request","withinLimit","providerModel","mapModelName","chat","completions","create","messages","max_tokens","temperature","stream","completion","hijraah_provider","getProviderName","requestedModel","modelMap","includes","createChatCompletion","errors","result","errorMessage","map","e","message","join","getModelStatus","checkModelAvailability","available","primaryStatus","fallbackStatus","Promise","all","primary","fallback","EnhancedHybridRetriever","config","retrieve","options","content","query","score","metadata","source","timestamp","Date","toISOString","chatCompletionSchema","z","default","role","optional","min","web_index_id","use_rag","chat_session_id","modelMultiplexer","hybridRetriever","POST","session","auth","user","id","NextResponse","json","type","status","body","validatedData","parse","userMessage","filter","pop","contextMessages","sources","webIndex","select","from","webIndexes","where","and","eq","userId","limit","webIndexId","documents","length","contextContent","doc","index","ragError","chatSession","chatSessions","insert","chatMessages","values","chatId","sourcesCount","assistantContent","choices","usage","s","title","dbError","Response","Connection","response","relevance","similarity","rag_enabled","details","GET","description","version","endpoints","parameters","authentication","serverComponentModule.GET","serverComponentModule.PUT","serverComponentModule.PATCH","serverComponentModule.DELETE","serverComponentModule.HEAD","serverComponentModule.OPTIONS"],"sourceRoot":""}