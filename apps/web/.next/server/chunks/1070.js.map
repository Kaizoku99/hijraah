{"version":3,"file":"1070.js","mappings":"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AEA,eACA,oBACA,iBACA,kBAEA,2BACA,QACA,sBAgIA,GACA,YACA,gBAEA,4BAIA,OAHA,wBACA,iBACA,wBACA,QACA,EAzIA,aACA,CAEA,aACA,0BACA,cACA,iCACA,oBACA,sDACA,EACA,CAEA,6BACA,cACA,CAEA,SACA,iEACA,CAEA,SAGA,OAFA,uBACA,wBACA,KAGA,iBAGA,OAFA,cACA,kBACA,KAGA,iBAGA,OAFA,cACA,kBACA,KAGA,kBAYA,QAHA,CARA,uBACA,uBACA,IACA,KAGA,kBAEA,sBACA,uBAGA,CACA,6BACA,UACA,+BACA,OAAqB,QAErB,QACA,0BACA,kBACA,SAAwB,UAAoB,EAC5C,qBAEA,oCAAiE,SAAY,EAC7E,oCACA,CAAW,EAEX,OADA,eACA,CACA,CAAS,CACT,YACA,QACA,CAAmB,SAEnB,EAAO,CAEP,CAEA,WAGA,OAFA,uBACA,0CACA,KAGA,SACA,mDACA,CAEA,WAGA,OAFA,iBACA,cACA,KAGA,MAEA,OADA,cACA,KAGA,SAEA,OADA,oBACA,KAGA,eACA,+DACA,CAEA,UAEA,OADA,cACA,KAGA,OAEA,OADA,cACA,gCACA,CAEA,QAEA,OADA,cACA,iCACA,CAEA,UAEA,OADA,cACA,mCACA,CACA,CCjKO,sBACP,eACA,iBACA,gCACA,qBACA,CACA,CAEO,OACP,WAMA,kBACA,SAAU,UAAa,KACvB,gBACA,wCACA,CACA,OACA,QACA,iBACA,CAAK,WAAoB,CAAI,SAG7B,OADA,6BACA,CACA,EAjBA,SAmBA,cACA,eAEA,OADA,6BACA,CACA,EAtBA,QAwBA,gBACA,0CAAkE,EAAM,EAExE,OADA,6BACA,CACA,EA3BA,aA8BA,cACA,oBACA,iCACA,CACA,6BACA,MACA,GAGA,OADA,6BACA,CACA,CAvCA,CC4BA,SAAkB,OAAS,IAAc,QAAU,IAAc,UAAY,KAEtE,kBACP,eACA,QACA,eACA,CACA,CAEO,kBACP,mBACA,QACA,aACA,YACA,YACA,CACA,CAEO,kBACP,iBACA,QACA,aACA,WACA,CAEA,eACA,uBAAiD,oBAAyB,6BAC1E,gBACA,gBACA,gCACA,CACA,CAEO,oBACP,+BACA,gBACA,eACA,8BACA,0BAEA,YACA,MAAY,EAAM,8DAGlB,iBACA,eACA,yBACA,8CAkGA,YACA,iBACA,QACA,yBACA,EAtGA,SACA,QAEA,iBAEA,CAEA,QA5FO,CACP,QACA,MACA,UACA,iBACA,CAAG,CACH,QACA,KACA,wBACA,kBACA,WACA,CAAG,CACH,MACA,OACA,gBACA,+BACA,sBACA,CAAG,CACH,SACA,MACA,QACA,4BACA,gBACA,CAAG,CACH,MACA,QACA,sBACA,6DACA,oBACA,CAAG,CACH,OACA,MACA,QACA,kDACA,sCACA,CACA,GA0DO,wBACP,EAD0E,EAC1E,QAAkB,mBAAsB,IACxC,6BACA,YAGA,QACA,CAEA,sBACA,OACA,gCACA,aAAqB,EAAK,WAC1B,uBACA,kBAAiC,EAAK,qCACtC,UAEA,CAEA,oBAEA,OADA,cACA,iCACA,CAEA,sBACA,gBACA,aACA,wBACA,eACA,SACA,CAEA,sBACA,0BACA,0CACA,yBACA,CAEA,SAAS,EAAM,eAKf,QAHA,CADA,sCACA,kBACA,OAGA,mCACA,OAEA,CADA,mBAEuB,EAAK,WAC5B,uBACA,YACA,4DACG,SACH,CAEA,sBACA,SACA,YACA,cACA,yBACA,CAAG,CACH,MAAQ,GACR,GAAM,EACN,UADY,EAEZ,MAAS,EAET,EAHmB,KAGnB,GAFe,EAEf,QACA,0CACA,oDACA,4BAIA,kBACA,6DACA,2BACA,iCACA,CACA,CAAC,kFAED,aACA,MAAQ,EAAM,0EACd,CAEO,oBACA,YAUA,cACP,aAAuC,EACvC,OACA,4BAAiC,kBACjC,wBAA6B,aAC7B,CACA,EAEA,cACA,qCACA,oEACA,iBACA,sCACA,6EAEA,GACG,CAAI,UAAW,gBAAmB,CACrC,CAEA,cAAiC,kBAAa,GAAU,EACxD,4CACA,CAEO,kBACP,uDACA,EAEO,gBACP,OACA,sBACA,uBACA,2BACA,kBACA,sBACA,yBACA,CAEA,EAEA,QACA,OAQO,sBACP,yBACA,SAEA,aACA,SAAc,EAEd,WAEA,aAA0C,aAE1C,0BACA,EAAa,iCAAuF,EAEpG,EAAW,YACX,eAEA,SADA,0BAEA,MAAc,EAAM,8DAGpB,gBACA,OACA,IA5BA,CA4BA,4BA3BA,kBACA,iBA0BA,GACA,CAAG,YAAsB,CACzB,EAEA,GACA,IACA,UACA,OACA,UACA,MACA,EA4CO,MACP,WACA,YAAkB,WAAc,IAChC,wCACA,QACA,EAEO,MACP,yBACA,YAAkB,WAAc,IAChC,wCACA,QACA,EAEO,yBAEA,+CACA,uEACA,yBAEP,cACA,uBACA,kEACA,iBACA,iBACA,qDAAyE,cAAmC,IAAK,EACjH,CACA,CACA,CAEA,UAAmB,QACnB,SAAkB,WAClB,UAAqB,MAEd,OAAgB,MACvB,cAEA,UAAoB,QACpB,SAAmB,WACnB,UAAsB,MAEf,OAAiB,MACxB,cAEA,UAAmB,QACnB,SAAkB,WAClB,UAAqB,MAEd,OAAgB,MACvB,wEC9We,uBACf,cACA,QACA,8BACA,OAAe,uBAA6B,CAC5C,OAAe,uBAA6B,CAC5C,SAAiB,uBAA6B,CAC9C,SAAiB,uBAA6B,CAC9C,WAAmB,uBACnB,CAAK,CACL,CAEA,6BACA,YACA,CACA,CCfA,MAEA,WAFe,EAEf,EACA,CAHoB,GAGpB,YACA,IAEA,OACA,aACA,iBACA,CAAK,CACL,WACA,mBACA,cACA,KACA,iBACA,CAAK,CACL,sBACA,WACA,aASA,OAPA,cACA,IACA,MAEA,cAGA,CACA,CACA,CACA,EC7BA,sBADA,KAaA,iBAAwB,SA6Df,EA7DoB,OA8D7B,EADc,CACd,IACA,EACA,EA1EA,0CACA,sBAMA,OALA,UACA,QACA,OACA,IAEA,CACA,CAAC,GAAI,EAEwB,CAC7B,OACA,IACA,QACA,QACA,IAEA,OACA,2BAGA,OAFA,MACA,gCACA,EACA,CAAG,CACH,QACA,MACA,yBACA,QACA,IAEA,YACA,SACA,uBAGA,MACA,yBACA,SACA,IAEA,MACA,MACA,uBACA,QACA,IAEA,QACA,0CACA,eACA,IAEA,SACA,2BACA,0BAGA,OAFA,OACA,sBAzDA,KA0DA,CACA,CACA,CAAC,EAID,eACA,qBACA,SACA,WAEA,kCACA,UACA,CACA,CC3DA,OAsCA,eAtCe,CAsCf,CAAwC,QAtCf,CAsCmB,8BAA8C,EAAI,EAC9F,IACA,MACA,MACA,OACA,OACA,OACA,WACA,UACA,YACA,WACA,WACA,cACA,eACA,aACA,UACA,uBACA,CAAI,EAEJ,EAAe,IACf,KADoB,EAEpB,GAAoB,sBACpB,wBACA,wBACA,KAoLA,WACA,GAAY,EAAM,mCAClB,WACA,EAvLA,mBAEA,OACA,EACA,MAAmB,EACnB,IADyB,KACzB,SACA,gBACA,KACA,KACA,sCACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,QACA,QACA,MACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QAEA,IACA,eACA,YACA,WACA,KACA,IACA,CAAK,CACL,aACA,WACA,UACA,OACA,QACA,IACA,EAIA,OAFA,4BAEA,GAEA,oBACA,MACA,IACA,WACA,mCACA,IAAc,QAAU,CAClB,SACN,MACA,MACA,CAIA,OAHA,iBACA,iBACA,iBACA,CACA,CAEA,uBAA0B,WAAa,MACvC,IACA,EAAsB,KAAC,6CACvB,WACA,kBACA,iBACA,CAAM,SACN,IACA,CACA,CAEA,eACA,MACA,YAA2B,EAAM,sCAEjC,gBAGA,IAOA,OANA,UACA,GACA,UACA,iBAEA,SAoDA,GACA,SACA,KAEA,EAAmB,EAAS,+BAE5B,6BAAqC,EAAW,UAEhD,mEACA,WACA,2BACA,sCACA,6BACA,uCACA,sDACA,uBACA,eACA,QAAU,mCAEV,4CACA,EAxEA,GACA,YAYA,OA+BA,EA9BA,8BACA,MAAY,EAAM,+EAElB,wBACQ,KAAC,2BAAgC,GAAC,SAC1C,gBACA,0BACA,UACA,WACA,MACA,8BAoBA,EAnBA,EAoBA,eACA,sDACA,GACA,MACA,EAvBA,EAzBA,KACA,kBACA,aACA,YACA,+CACA,CAAM,SAGN,OAFA,qBACA,MACA,EACA,CACA,CAiBA,eACA,sBACA,uEACA,SAwvBA,QACA,OAAW,KAAC,QAzvBZ,KAyvBY,MAAyB,GAAC,QACtC,EA1vBA,sBACA,CACA,CAEA,eACA,sBAqtBA,wBACA,MACA,EAmBA,OAjBI,KAAC,UAAoB,GAAC,SAAoB,GAAC,wBAE/C,kBACA,YACA,OAAe,GAAC,gBAEhB,OACA,0BACA,oBACA,KAEA,EAAa,GAAC,KACP,kBAAmB,GAAC,QAC3B,CAAK,EAED,GAAC,OAEM,GAAC,KACZ,EA1uBA,8DACA,WACA,oBACA,GACA,CACA,CAgCA,uBAEA,CADA,2CACA,oBACA,OACA,iCACA,GACA,CAEA,eACA,oBAGA,OAFA,8BACA,WACA,CACA,CAOA,oBAIA,GAHA,OAGA,CAFA,sDAEA,aACA,YAEA,uBACA,GAAa,SAAW,EACxB,SACA,WAAkB,MAAQ,uBAC1B,4CACA,CAAY,uBACZ,kBACA,GACA,mBACA,EACA,IAEK,EACL,uBACA,iBACA,iBACA,gBACA,CAGA,cACA,SACA,CAEA,eACA,SACA,YAEA,CADA,cACA,IAUA,IANA,KACA,uBACA,aACA,EACA,uCAEA,aAEA,IADA,uBACA,UACA,cACA,OACA,KACA,CAEA,KACA,SAyIA,UACA,CACA,OA6BA,YACA,IACA,EACA,EACA,EAHA,IAKA,iDACA,YAAoB,8BAAoC,IACxD,0BACA,mBACA,KAEA,SACA,KACA,cACA,mBACA,kBACA,0BACA,oBACA,sCACA,oCAEA,SACA,mBACA,EACA,iCACA,0CAGA,cACA,2CACA,kCACA,EA5DA,QA+aA,YACA,uCACA,EAhbA,OAgWA,YACA,MACA,OAEA,QACA,kBACA,EACA,yBACA,gCAEA,EAzWA,OA4DA,YACA,+CAA6D,GAAC,GAC9D,OACA,sBACA,kBACA,UAEA,EAlEA,OAoEA,YAMA,GALA,yCACA,WACA,MAAiB,EACjB,IADuB,IACvB,GAEA,IACA,KACA,qDAEA,KA0OA,IA1OA,GA0OA,EA1OA,EA0OA,EA1OA,EA4OA,0DACA,0DACA,wCACA,yCACA,0DA/OA,gBAFA,CAsPA,UAAsB,EAAK;AAC3B;AACA;AACA,mBAA6B,UAAc,CAC3C,yBACA,wDACA,+CACA,EACA,kBA9PA,QAKA,GACA,sBACA,OAGA,wBACA,yBACA,UAEA,CAEA,4DACA,+DAEA,IAGA,aACA,+BAIA,cAHA,GACA,KACA,yBAEA,GACA,KACA,MACA,EA3GA,OA6GA,YACA,KAEA,qBAA+B,IAAO,IAGtC,GAFA,sCACA,6CACA,YACA,iCACA,UACA,KACA,OAKA,CAFA,mBAEA,yCAGA,kBACA,UAEA,cACA,wBACA,QAGA,eAVA,GAAqB,EAAM,2EAW3B,EAvIA,UACA,OAwIA,WACA,aACA,EAzIA,QAgJA,YACA,wBAEA,YAAoB,IAAY,IAChC,oEAEA,4CACA,oEACA,EAvJA,OAyJA,gBAUA,CATA,aACA,aACA,WAAgC,GAChC,GADsC,IACtC,MACA,2BAGA,wBACA,GAGA,+BAEA,YAAoB,IAAY,KAEhC,IADA,IACA,aACA,wBACA,sBACA,qBACA,0BACA,mBACA,wCACA,yBACA,YACA,QACA,SACA,MACA,EACA,KACA,CAGA,GADA,yBACA,gBACA,sCACA,EA3LA,UACA,QA+QA,WAGA,GAFA,yBACA,uBACA,gBACA,sCACA,EAnRA,OAqRA,YACA,wBACA,0BACA,EAvRA,OAqUA,gBAUA,GATA,6CACA,MAAkB,EAAM,eACxB,gBACA,eACA,oCAKA,EAJA,GAIA,EAJA,EAKA,sBACA,YACA,OANA,KACA,EA5UA,WACA,OA4WA,WACA,wBACA,aACA,EA9WA,OAgXA,WACA,OAAiB,UAAe,EAChC,eACA,aACA,QAAqB,KAAC,mBACtB,CAAO,CACP,aACA,KACA,QAAqB,KAAC,UAAmB,GAAC,UAC1C,OACA,CAAO,CACP,SACA,QAAqB,KAAC,WACtB,IACA,CACA,CAAK,EACL,cACA,EAhYA,OAwaA,YACA,EACA,SACA,kBAEA,EA5aA,OAiYA,WACA,OAAiB,UAAe,EAChC,OAAe,WACf,CAAK,EACL,cACA,EArYA,OAiaA,WACA,kBACA,OACA,EAnaA,OA6aA,WAEA,EA9aA,OAibA,WACA,GAAY,EAAM,qCAClB,EAlbA,QAqbA,WACA,GAAY,EAAM,yCAClB,EAtbA,OAoYA,WACA,OAAiB,QAAa,EAC9B,eACA,OAAe,WAAiB,CAEhC,aACA,QAAqB,KAAC,mBACtB,CAAO,CACP,aACA,KACA,QAAqB,KAAC,UAAmB,GAAC,UAC1C,OACA,CAAO,CACP,SACA,QAAqB,KAAC,WACtB,IACA,CACA,CAAK,EACL,cACA,EAkCA,YACA,oDACA,CAzbA,EACA,EACA,EAtKA,mBACA,CAAQ,SACR,4CACA,KACA,CACA,mBACA,IACA,OACA,CACA,CAEA,oBAKA,GAJA,MACA,KACA,kBAEA,GAKA,GAFA,UAEA,SACA,mBAIA,GAFA,wBAEA,OACA,wBAEA,SACA,qBACA,YACA,YAEA,iBACA,CAEA,cACA,qBAA0D,aAAW,SACrE,CAEA,cACA,IACA,KACA,gBACA,sCACA,IACA,UACA,gBACA,4CACA,MAomBA,GAA4B,KAAC,uBAC7B,8BACA,OACA,WACA,sBACA,CAAO,CACP,eACA,iCAAkD,GAAC,UAAa,CDz5BhD,ECy5BiD,IACjE,YA3mBA,KACA,CAAM,SACN,KACA,CACA,CAEA,eACA,yCAIA,IADA,MACA,UACA,eACA,CAEA,eACA,4BACA,aACA,sBACA,CAEA,iBACA,aACA,kBAEA,wBACA,aAEA,0DACA,OAAe,+DAAkF,CACjG,OAAe,kCAAgD,CAC/D,YAAoB,sCAAoD,CACxE,MAAc,gCAA8C,CAC5D,OAAe,wDACf,CAAK,EACL,WACA,CAEA,cACA,WACA,oBACA,kCAEA,wBADA,uEACA,CAEA,CAEA,cACA,MACA,wBACA,GAAY,EAAM,sCAElB,mBACA,IACA,4BACA,+BACA,6BAAiD,KAAC,YAElD,qBACA,CAEA,qBAcA,GAbA,kBACA,IACA,QACA,mBACA,4BACA,+BACA,WACA,WACA,WAEA,uBACA,OAEA,GACA,WAEA,wBAAiD,EAAM,qCACvD,EAAiB,aAAW,OAC5B,sBACA,oDACA,KAAwB,EAAM,oCAC9B,CAwJA,cACA,wCACA,+BAkDA,yCACA,CACA,SACA,SACA,UACA,UACA,OA8DA,YACA,2BAAoC,GAAC,wBAGrC,GAAY,EAAM,sFAClB,YACA,EAnEA,MAuQA,cACA,8CACA,EAxQA,IACA,IACA,CAGA,oBACA,iBACA,GACM,KAAC,sBAEP,CAEA,qBAC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CACH,CC1CA,kBACA,aAAe,GACf,QAAU,GACV,MAAQ,GACR,OAAS,GACT,KAAO,GACP,OAAS,GACT,KAAO,GACP,UAAY,GACZ,SAAW,GACX,SAAW,GACX,QACA,MACA,UACA,mBACA,yBACA,CACA,CAAC,EAED,OAAe,GAEf,KAFuB,IAEvB,QACA,eA4XA,SAwFA,EAvFA,eACA,SAEA,kBACA,kCACA,KAAU,eAAiB,SAoG3B,GACA,0BACA,OAAa,KAAO,uBAEpB,QAEA,qBADA,iDACA,yBAEA,4CAEA,OACA,KACA,wCACA,wCACA,YACA,oBACA,YACA,oBACA,4BACK,CACL,8BACA,CACA,EA1H2B,GAC3B,qDAA6E,EAC7E,2DACA,iCACA,qEAyHA,IACA,OAAW,UAAW,YAClB,SACJ,kEACA,CACA,GA5HA,8BACA,8CACA,oHACA,gDAEA,8FACA,GACA,OACA,OACA,kBACA,mBACA,gBACA,iBACA,WACA,cACA,WACA,SACA,eACA,yBACA,yBACA,EAEA,OACA,6DACA,0EACA,iDACA,sEACA,OACA,sDACA,4BACA,YACA,yBACA,uCACA,2BAIA,OAHA,uCACA,GACA,EACA,CACA,CAAO,CACP,GACA,CACA,YACA,4CACA,gBACA,8DAA+F,EAC1F,CACL,iBAAmC,CACnC,8BAaA,OACA,iGACA,mFACA,QAEA,2DACA,EAnBA,OACA,oBACA,oBACA,kBACA,0BACA,gBACA,UAwBA,CACA,WAFA,EAvBA,cAAsD,iBAAsB,EAyB5E,UACA,QACA,kEACA,yBACK,CACL,OACA,8DACA,uBACK,CACL,KACA,sDACA,mBAEA,EArCA,aAAwB,CACxB,QAAwB,0BAA8B,CACtD,GAAO,EAAc,SAErB,EAlcA,CAgcqB,CAhcrB,GACA,kBFhDe,cACf,cACA,oDACA,KAEA,EACA,EACA,KAEA,WACA,KACA,WAAiB,SAAU,SAAW,QAAW,CACjD,MACA,eACA,kBACA,kBACA,YACA,gBACA,sBACA,CAAK,CACL,yBACA,IAEA,OACA,sBACA,+BACA,qCAAoD,EAAa,SACjE,CAAK,CACL,eACA,CAAG,EAEH,QACA,UAaA,OAXA,gBACA,KACA,qDACA,KAGA,kBACA,qDACA,KAGA,EAEA,uBAAoD,EAAI,GAAY,EAAI,EACxE,WAuNA,GACA,4EAEA,MACA,+CAEA,cAEA,eACA,+CACA,YACA,EAlOA,GAEA,GACA,0BAEA,UAAyB,iBACzB,WACA,gBACA,6BAEA,OACA,YACA,uBACA,EAEA,kBACA,KACA,IACA,mBACA,aAAe,kBAEf,CAEA,cACA,WACA,kBACA,wBAGA,wBACA,MACA,yCAEA,qBACA,2BAAkC,GAAO,+CAGzC,MAEA,iBACA,0BAAiC,GAAO,UACxC,mBACA,CAAQ,yCAA0C,EAAc,KAChE,WAEA,GACA,oGACA,EAMA,OAJA,YAUA,gBAqCA,SApCA,aAoCA,EAnCA,eAmCA,EAnCA,EAmCA,EAnCA,kBAmCA,EAnCA,EAmCA,EAnCA,YAsCA,gBACA,MACA,IADe,EACf,EACA,wBACA,8DACA,gDACA,oCACA,SAEA,KAEA,QACA,EAEA,iBAWA,CAVA,kBACA,WACA,mBACA,qDACA,sCACA,0BACA,4BACA,8BACA,GAEA,oBACA,IAEA,CAAK,CACL,OAAe,CAAY,CAC3B,CADe,CACf,KAAe,CAAY,CAC3B,CADe,CACf,OAAc,CAtCd,IAuCA,2BAtCA,kDAuCA,qBACA,CAAK,CACL,MACA,GADc,CACd,IACA,uBACA,KAAc,GAAM,uBAEpB,KACA,iBACA,UACA,CAAO,CACP,CAAK,CACL,MACA,GADc,CACd,IACA,uBAEA,SADA,KACA,CACA,eACA,2BACA,KACA,CACA,iBACA,WACA,KACA,CAAO,CACP,CAAK,CACL,MACA,GADc,CACd,IACA,uBAEA,SADA,KACA,CACA,eACA,uBACA,IAEA,YAEA,QAAc,GAAM,sBAEpB,KACA,iBACA,WACA,MACA,aACO,CACP,CAAK,CACL,OAAe,CAAY,CAC3B,CADe,CACf,KAAe,CACf,CAAG,CADY,CACZ,OAnFH,oCAmFG,EAAiB,YAtHZ,oBACR,sBACA,WAeA,sBACA,UACA,gBACA,uEACA,UACA,IAlBA,GAhBA,aAKA,YACA,2EACA,GANA,sBAEA,QAAa,iBAeb,gBACA,6CACA,WACA,cACA,4EACA,iBACA,uBACA,oFACA,CASA,CAEA,kBACA,gCAAwD,EAAI,YAC5D,CACA,EE1FqD,IAAa,KAAY,EAE9E,KAEA,EAAkB,IAClB,EAAqB,GADE,CAEvB,EAAmB,GADO,CAE1B,EAAiB,GADO,CAExB,EAAgB,GADM,CAEtB,EAAe,GADM,CAErB,EAAe,GADK,CAEpB,EAAe,GADK,CAEpB,KADoB,SACD,oDAEnB,4BAAwD,GAAU,YAAoB,oBAAwB,GAE9G,IAsQA,mBACA,EACA,SAA0B,EAAM,oCAEhC,SACA,eAEA,SACA,mBAEA,UACA,eACA,UACA,GAlQA,OAfA,iBACA,iBAAuB,oBAA2B,CAClD,YAAiB,GAAW,aAC5B,YACA,KAAS,GACT,IAAS,EACT,GADc,UACG,GACjB,UACA,UACA,SACA,QACA,QACA,KACA,CAAG,EAEH,EAEA,cAkBA,OAjBA,gBAEA,2CACA,YAA6B,EAAS,QACtC,GACK,GAEL,iBACA,QACA,QACA,OAsBA,oBAAmD,EAOnD,OANA,kDACA,IAAwB,EAAK,WAC7B,WACA,KACA,0CACO,CAEP,EA7BA,SACA,MA+NA,uBACA,iBAGA,IAAe,EAAS,eAAwB,EAAS,iCAFzD,wBAGA,EAnOA,OACA,KA4BA,oBAA+C,EAc/C,OAbA,kDACA,IAAwB,EAAK,SACrB,UAAW,kBACnB,KACA,kBAEA,eACA,IACA,CAAS,CACT,CAAO,IACP,KACA,0CACO,CAEP,CA1CA,CAAK,EAEL,EAEA,gBACA,WAAiB,EAAS,IAC1B,CAEA,EAH0B,OAG1B,UAMA,OALA,wBACA,IAAc,EAAK,SACnB,6BAEA,IAAgB,EAAO,KADvB,IAAgB,EAAU,iDAG1B,CA4BA,CAEA,wBACA,UAAuB,cAEvB,oBACA,KACA,MACA,kBACA,kBACA,eACA,UACA,kDAA0D,EAAW,KACrE,qBACA,qDAAsF,CAAY,EAAZ,CACtF,CAAS,CACT,CAAO,CACP,cACA,4DACA,CACA,EAAK,EAEL,6BAA6D,CAG7D,GAFA,OAEA,CACA,uBACA,wBAEA,OADA,yBACA,CAAe,yBACf,CAEA,MAAuB,kBACvB,uCACK,iBACL,wBAEA,OADA,yBACA,CAAa,0BAEb,mBACA,gBAGA,gDACA,uBAIA,OADA,YACA,aACA,uCACO,EAEP,CAEA,sBACA,kCAAyC,EAAS,IAAK,KAAc,GAGrE,mBACA,MAAkB,IAClB,KADuB,KACvB,CACA,UACA,0BACA,OAAwB,oBACxB,UACA,wBACA,CAAO,EAEP,OACA,wBACA,qBACA,OACA,sBAEA,QAQA,YACA,YACA,UACA,oBACA,GANA,OALA,eACA,gBACA,IACA,EAEA,CAOA,CAEA,sBACA,cACA,MAAoB,IACpB,IACA,CAFyB,CAGzB,OAEA,IAEA,OADA,sDAA0E,UAyD1E,YACA,IACA,OACA,wBACA,qBACA,MACA,CA/D0E,CAAW,YACrF,oBACA,OACA,gCACA,CACA,CAAM,SACN,OACA,CAEA,wBACA,IAGA,EACA,EAJA,IAuCA,YACA,qBACA,YACA,UACA,oBACA,EA3CA,aA8BA,uBACA,wBACA,4BAEA,kCACA,4BACA,EAnCA,6CAIA,uBAAqC,KAAW,EAChD,IAMA,GALA,4BACA,WACA,4DACA,CAAS,EAET,EACA,OACA,CAAQ,SAKR,MAJA,SACA,gBAA+B,KAAW,EAC1C,aAEA,aAA2B,GAAa,sBACxC,CAQA,OANA,GACA,GACA,+BAA8C,YAAqB,GACnE,iBAGA,CAgBA,CASA,CAEA,gBAOA,OANA,kBACA,UACA,UACA,MACA,oBACA,qBACA,CACA,CAEA,cACA,WAAe,EAAS,OACxB,CAwBA,gBACA,oBACA,OACA,MACA,CAEA,cACA,2BACA,QACA,SACY,GAAU,uBACtB,qBAAgC,YAEhC,aACA,eACA,SAAuB,EAAM,4DAC7B,IAEA,CAAK,CACL,CAEA,0BAAuB,QAAiB,EAAI,MAK5C,SAJA,IAGA,QAEA,gBACA,oDACA,qCACA,iBAAsC,UAAY,KAClD,iBAA4C,UAAY,OAExD,4BACA,CAEA,mBACA,oCACA,CAEA,oBAEA,IADA,2CACA,UACA,iBAA6B,EAAM,sCACnC,GACA,CAEA,gBAGA,OAFA,OACA,aACA,CACA,CAEA,cACA,MACA,CAEA,cACA,gBACA,cAEA,uCACA,KAEA,2BACA,gBACA,aACA,oBAEA,cACA,CAEA,EACA,OACA,MACA,CAEA,gBACA,OACA,gBACA,yCACA,2BACA,wBACA,CACA,CAkFA,eACA,gDACA,CAEA,cACA,+BACA,0JCjeSC,uBAAuB,mBAAvBA,GALAV,YAAY,mBAAZA,EAAAA,YAAY,EAEZ3B,SAAS,mBAATA,EAAAA,SAAS,EADTL,QAAQ,mBAARA,EAAAA,QAAQ,EAFEoB,iBAAiB,mBAAjBA,EAAAA,iBAAiB,EAA3BC,QAAQ,mBAARA,EAAAA,QAAQ,EAIRN,YAAY,mBAAZA,EAAAA,YAAY,EACZR,gBAAgB,mBAAhBA,EAAAA,gBAAgB,YALmB,WACf,WACJ,WACC,WACG,WACI,MAhCjC,OAAMoC,UAAqCrC,MACzCsC,aAAc,CACZ,KAAK,CACH,0JAEJ,CACF,CAEA,MAAMF,UAAgCG,gBAEpCC,QAAS,CACP,MAAM,IAAIH,CACZ,CAEAI,QAAS,CACP,MAAM,IAAIJ,CACZ,CAEAK,KAAM,CACJ,MAAM,IAAIL,CACZ,CAEAM,MAAO,CACL,MAAM,IAAIN,CACZ,CACF","sources":["webpack://@hijraah/web/../../../src/client/components/not-found.ts","webpack://@hijraah/web/../../../src/client/components/forbidden.ts","webpack://@hijraah/web/../../../src/client/components/unstable-rethrow.server.ts","webpack://@hijraah/web/../../node_modules/.pnpm/next@15.3.0-canary.31_@babe_be67f368de2727c847f3a61f5e6cf4fa/node_modules/next/dist/api/navigation.react-server.js","webpack://@hijraah/web/../../../src/client/components/unstable-rethrow.ts","webpack://@hijraah/web/../../../src/client/components/unauthorized.ts","webpack://@hijraah/web/../../../src/client/components/redirect.ts","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/query.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/errors.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/types.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/result.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/queue.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/bytes.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/connection.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/subscribe.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/large.js","webpack://@hijraah/web/../../node_modules/.pnpm/postgres@3.4.7/node_modules/postgres/src/index.js","webpack://@hijraah/web/../../../src/client/components/navigation.react-server.ts"],"sourcesContent":["import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n/**\n * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\n * within a route segment as well as inject a tag.\n *\n * `notFound()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a `<meta name=\"robots\" content=\"noindex\" />` meta tag and set the status code to 404.\n * - In a Route Handler or Server Action, it will serve a 404 to the caller.\n *\n * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};404`\n\nexport function notFound(): never {\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n\n  throw error\n}\n","import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `forbidden` docs\n/**\n * @experimental\n * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)\n * within a route segment as well as inject a tag.\n *\n * `forbidden()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};403`\n\nexport function forbidden(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`forbidden()\\` is experimental and only allowed to be enabled when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n","import { isHangingPromiseRejectionError } from '../../server/dynamic-rendering-utils'\nimport { isPostpone } from '../../server/lib/router-utils/is-postpone'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNextRouterError } from './is-next-router-error'\nimport { isDynamicPostpone } from '../../server/app-render/dynamic-rendering'\nimport { isDynamicServerError } from './hooks-server-context'\n\nexport function unstable_rethrow(error: unknown): void {\n  if (\n    isNextRouterError(error) ||\n    isBailoutToCSRError(error) ||\n    isDynamicServerError(error) ||\n    isDynamicPostpone(error) ||\n    isPostpone(error) ||\n    isHangingPromiseRejectionError(error)\n  ) {\n    throw error\n  }\n\n  if (error instanceof Error && 'cause' in error) {\n    unstable_rethrow(error.cause)\n  }\n}\n","export * from '../client/components/navigation.react-server';\n\n//# sourceMappingURL=navigation.react-server.js.map","/**\n * This function should be used to rethrow internal Next.js errors so that they can be handled by the framework.\n * When wrapping an API that uses errors to interrupt control flow, you should use this function before you do any error handling.\n * This function will rethrow the error if it is a Next.js error so it can be handled, otherwise it will do nothing.\n *\n * Read more: [Next.js Docs: `unstable_rethrow`](https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow)\n */\nexport const unstable_rethrow =\n  typeof window === 'undefined'\n    ? (\n        require('./unstable-rethrow.server') as typeof import('./unstable-rethrow.server')\n      ).unstable_rethrow\n    : (\n        require('./unstable-rethrow.browser') as typeof import('./unstable-rethrow.browser')\n      ).unstable_rethrow\n","import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `unauthorized` docs\n/**\n * @experimental\n * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)\n * within a route segment as well as inject a tag.\n *\n * `unauthorized()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n *\n * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};401`\n\nexport function unauthorized(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`unauthorized()\\` is experimental and only allowed to be used when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n","import { RedirectStatusCode } from './redirect-status-code'\nimport {\n  RedirectType,\n  type RedirectError,\n  isRedirectError,\n  REDIRECT_ERROR_CODE,\n} from './redirect-error'\n\nconst actionAsyncStorage =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/action-async-storage.external') as typeof import('../../server/app-render/action-async-storage.external')\n      ).actionAsyncStorage\n    : undefined\n\nexport function getRedirectError(\n  url: string,\n  type: RedirectType,\n  statusCode: RedirectStatusCode = RedirectStatusCode.TemporaryRedirect\n): RedirectError {\n  const error = new Error(REDIRECT_ERROR_CODE) as RedirectError\n  error.digest = `${REDIRECT_ERROR_CODE};${type};${url};${statusCode};`\n  return error\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 307/303 to the caller.\n * - In a Server Action, type defaults to 'push' and 'replace' elsewhere.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function redirect(\n  /** The URL to redirect to */\n  url: string,\n  type?: RedirectType\n): never {\n  type ??= actionAsyncStorage?.getStore()?.isAction\n    ? RedirectType.push\n    : RedirectType.replace\n\n  throw getRedirectError(url, type, RedirectStatusCode.TemporaryRedirect)\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 308/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function permanentRedirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  throw getRedirectError(url, type, RedirectStatusCode.PermanentRedirect)\n}\n\n/**\n * Returns the encoded URL from the error if it's a RedirectError, null\n * otherwise. Note that this does not validate the URL returned.\n *\n * @param error the error that may be a redirect error\n * @return the url if the error was a redirect error\n */\nexport function getURLFromRedirectError(error: RedirectError): string\nexport function getURLFromRedirectError(error: unknown): string | null {\n  if (!isRedirectError(error)) return null\n\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';')\n}\n\nexport function getRedirectTypeFromError(error: RedirectError): RedirectType {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return error.digest.split(';', 2)[1] as RedirectType\n}\n\nexport function getRedirectStatusCodeFromError(error: RedirectError): number {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return Number(error.digest.split(';').at(-2))\n}\n","const originCache = new Map()\n    , originStackCache = new Map()\n    , originError = Symbol('OriginError')\n\nexport const CLOSE = {}\nexport class Query extends Promise {\n  constructor(strings, args, handler, canceller, options = {}) {\n    let resolve\n      , reject\n\n    super((a, b) => {\n      resolve = a\n      reject = b\n    })\n\n    this.tagged = Array.isArray(strings.raw)\n    this.strings = strings\n    this.args = args\n    this.handler = handler\n    this.canceller = canceller\n    this.options = options\n\n    this.state = null\n    this.statement = null\n\n    this.resolve = x => (this.active = false, resolve(x))\n    this.reject = x => (this.active = false, reject(x))\n\n    this.active = false\n    this.cancelled = null\n    this.executed = false\n    this.signature = ''\n\n    this[originError] = this.handler.debug\n      ? new Error()\n      : this.tagged && cachedError(this.strings)\n  }\n\n  get origin() {\n    return (this.handler.debug\n      ? this[originError].stack\n      : this.tagged && originStackCache.has(this.strings)\n        ? originStackCache.get(this.strings)\n        : originStackCache.set(this.strings, this[originError].stack).get(this.strings)\n    ) || ''\n  }\n\n  static get [Symbol.species]() {\n    return Promise\n  }\n\n  cancel() {\n    return this.canceller && (this.canceller(this), this.canceller = null)\n  }\n\n  simple() {\n    this.options.simple = true\n    this.options.prepare = false\n    return this\n  }\n\n  async readable() {\n    this.simple()\n    this.streaming = true\n    return this\n  }\n\n  async writable() {\n    this.simple()\n    this.streaming = true\n    return this\n  }\n\n  cursor(rows = 1, fn) {\n    this.options.simple = false\n    if (typeof rows === 'function') {\n      fn = rows\n      rows = 1\n    }\n\n    this.cursorRows = rows\n\n    if (typeof fn === 'function')\n      return (this.cursorFn = fn, this)\n\n    let prev\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => {\n          if (this.executed && !this.active)\n            return { done: true }\n\n          prev && prev()\n          const promise = new Promise((resolve, reject) => {\n            this.cursorFn = value => {\n              resolve({ value, done: false })\n              return new Promise(r => prev = r)\n            }\n            this.resolve = () => (this.active = false, resolve({ done: true }))\n            this.reject = x => (this.active = false, reject(x))\n          })\n          this.execute()\n          return promise\n        },\n        return() {\n          prev && prev(CLOSE)\n          return { done: true }\n        }\n      })\n    }\n  }\n\n  describe() {\n    this.options.simple = false\n    this.onlyDescribe = this.options.prepare = true\n    return this\n  }\n\n  stream() {\n    throw new Error('.stream has been renamed to .forEach')\n  }\n\n  forEach(fn) {\n    this.forEachFn = fn\n    this.handle()\n    return this\n  }\n\n  raw() {\n    this.isRaw = true\n    return this\n  }\n\n  values() {\n    this.isRaw = 'values'\n    return this\n  }\n\n  async handle() {\n    !this.executed && (this.executed = true) && await 1 && this.handler(this)\n  }\n\n  execute() {\n    this.handle()\n    return this\n  }\n\n  then() {\n    this.handle()\n    return super.then.apply(this, arguments)\n  }\n\n  catch() {\n    this.handle()\n    return super.catch.apply(this, arguments)\n  }\n\n  finally() {\n    this.handle()\n    return super.finally.apply(this, arguments)\n  }\n}\n\nfunction cachedError(xs) {\n  if (originCache.has(xs))\n    return originCache.get(xs)\n\n  const x = Error.stackTraceLimit\n  Error.stackTraceLimit = 4\n  originCache.set(xs, new Error())\n  Error.stackTraceLimit = x\n  return originCache.get(xs)\n}\n","export class PostgresError extends Error {\n  constructor(x) {\n    super(x.message)\n    this.name = this.constructor.name\n    Object.assign(this, x)\n  }\n}\n\nexport const Errors = {\n  connection,\n  postgres,\n  generic,\n  notSupported\n}\n\nfunction connection(x, options, socket) {\n  const { host, port } = socket || options\n  const error = Object.assign(\n    new Error(('write ' + x + ' ' + (options.path || (host + ':' + port)))),\n    {\n      code: x,\n      errno: x,\n      address: options.path || host\n    }, options.path ? {} : { port: port }\n  )\n  Error.captureStackTrace(error, connection)\n  return error\n}\n\nfunction postgres(x) {\n  const error = new PostgresError(x)\n  Error.captureStackTrace(error, postgres)\n  return error\n}\n\nfunction generic(code, message) {\n  const error = Object.assign(new Error(code + ': ' + message), { code })\n  Error.captureStackTrace(error, generic)\n  return error\n}\n\n/* c8 ignore next 10 */\nfunction notSupported(x) {\n  const error = Object.assign(\n    new Error(x + ' (B) is not supported'),\n    {\n      code: 'MESSAGE_NOT_SUPPORTED',\n      name: x\n    }\n  )\n  Error.captureStackTrace(error, notSupported)\n  return error\n}\n","import { Query } from './query.js'\nimport { Errors } from './errors.js'\n\nexport const types = {\n  string: {\n    to: 25,\n    from: null,             // defaults to string\n    serialize: x => '' + x\n  },\n  number: {\n    to: 0,\n    from: [21, 23, 26, 700, 701],\n    serialize: x => '' + x,\n    parse: x => +x\n  },\n  json: {\n    to: 114,\n    from: [114, 3802],\n    serialize: x => JSON.stringify(x),\n    parse: x => JSON.parse(x)\n  },\n  boolean: {\n    to: 16,\n    from: 16,\n    serialize: x => x === true ? 't' : 'f',\n    parse: x => x === 't'\n  },\n  date: {\n    to: 1184,\n    from: [1082, 1114, 1184],\n    serialize: x => (x instanceof Date ? x : new Date(x)).toISOString(),\n    parse: x => new Date(x)\n  },\n  bytea: {\n    to: 17,\n    from: 17,\n    serialize: x => '\\\\x' + Buffer.from(x).toString('hex'),\n    parse: x => Buffer.from(x.slice(2), 'hex')\n  }\n}\n\nclass NotTagged { then() { notTagged() } catch() { notTagged() } finally() { notTagged() }}\n\nexport class Identifier extends NotTagged {\n  constructor(value) {\n    super()\n    this.value = escapeIdentifier(value)\n  }\n}\n\nexport class Parameter extends NotTagged {\n  constructor(value, type, array) {\n    super()\n    this.value = value\n    this.type = type\n    this.array = array\n  }\n}\n\nexport class Builder extends NotTagged {\n  constructor(first, rest) {\n    super()\n    this.first = first\n    this.rest = rest\n  }\n\n  build(before, parameters, types, options) {\n    const keyword = builders.map(([x, fn]) => ({ fn, i: before.search(x) })).sort((a, b) => a.i - b.i).pop()\n    return keyword.i === -1\n      ? escapeIdentifiers(this.first, options)\n      : keyword.fn(this.first, this.rest, parameters, types, options)\n  }\n}\n\nexport function handleValue(x, parameters, types, options) {\n  let value = x instanceof Parameter ? x.value : x\n  if (value === undefined) {\n    x instanceof Parameter\n      ? x.value = options.transform.undefined\n      : value = x = options.transform.undefined\n\n    if (value === undefined)\n      throw Errors.generic('UNDEFINED_VALUE', 'Undefined values are not allowed')\n  }\n\n  return '$' + (types.push(\n    x instanceof Parameter\n      ? (parameters.push(x.value), x.array\n        ? x.array[x.type || inferType(x.value)] || x.type || firstIsString(x.value)\n        : x.type\n      )\n      : (parameters.push(x), inferType(x))\n  ))\n}\n\nconst defaultHandlers = typeHandlers(types)\n\nexport function stringify(q, string, value, parameters, types, options) { // eslint-disable-line\n  for (let i = 1; i < q.strings.length; i++) {\n    string += (stringifyValue(string, value, parameters, types, options)) + q.strings[i]\n    value = q.args[i]\n  }\n\n  return string\n}\n\nfunction stringifyValue(string, value, parameters, types, o) {\n  return (\n    value instanceof Builder ? value.build(string, parameters, types, o) :\n    value instanceof Query ? fragment(value, parameters, types, o) :\n    value instanceof Identifier ? value.value :\n    value && value[0] instanceof Query ? value.reduce((acc, x) => acc + ' ' + fragment(x, parameters, types, o), '') :\n    handleValue(value, parameters, types, o)\n  )\n}\n\nfunction fragment(q, parameters, types, options) {\n  q.fragment = true\n  return stringify(q, q.strings[0], q.args[0], parameters, types, options)\n}\n\nfunction valuesBuilder(first, parameters, types, columns, options) {\n  return first.map(row =>\n    '(' + columns.map(column =>\n      stringifyValue('values', row[column], parameters, types, options)\n    ).join(',') + ')'\n  ).join(',')\n}\n\nfunction values(first, rest, parameters, types, options) {\n  const multi = Array.isArray(first[0])\n  const columns = rest.length ? rest.flat() : Object.keys(multi ? first[0] : first)\n  return valuesBuilder(multi ? first : [first], parameters, types, columns, options)\n}\n\nfunction select(first, rest, parameters, types, options) {\n  typeof first === 'string' && (first = [first].concat(rest))\n  if (Array.isArray(first))\n    return escapeIdentifiers(first, options)\n\n  let value\n  const columns = rest.length ? rest.flat() : Object.keys(first)\n  return columns.map(x => {\n    value = first[x]\n    return (\n      value instanceof Query ? fragment(value, parameters, types, options) :\n      value instanceof Identifier ? value.value :\n      handleValue(value, parameters, types, options)\n    ) + ' as ' + escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x)\n  }).join(',')\n}\n\nconst builders = Object.entries({\n  values,\n  in: (...xs) => {\n    const x = values(...xs)\n    return x === '()' ? '(null)' : x\n  },\n  select,\n  as: select,\n  returning: select,\n  '\\\\(': select,\n\n  update(first, rest, parameters, types, options) {\n    return (rest.length ? rest.flat() : Object.keys(first)).map(x =>\n      escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x) +\n      '=' + stringifyValue('values', first[x], parameters, types, options)\n    )\n  },\n\n  insert(first, rest, parameters, types, options) {\n    const columns = rest.length ? rest.flat() : Object.keys(Array.isArray(first) ? first[0] : first)\n    return '(' + escapeIdentifiers(columns, options) + ')values' +\n    valuesBuilder(Array.isArray(first) ? first : [first], parameters, types, columns, options)\n  }\n}).map(([x, fn]) => ([new RegExp('((?:^|[\\\\s(])' + x + '(?:$|[\\\\s(]))(?![\\\\s\\\\S]*\\\\1)', 'i'), fn]))\n\nfunction notTagged() {\n  throw Errors.generic('NOT_TAGGED_CALL', 'Query not called as a tagged template literal')\n}\n\nexport const serializers = defaultHandlers.serializers\nexport const parsers = defaultHandlers.parsers\n\nexport const END = {}\n\nfunction firstIsString(x) {\n  if (Array.isArray(x))\n    return firstIsString(x[0])\n  return typeof x === 'string' ? 1009 : 0\n}\n\nexport const mergeUserTypes = function(types) {\n  const user = typeHandlers(types || {})\n  return {\n    serializers: Object.assign({}, serializers, user.serializers),\n    parsers: Object.assign({}, parsers, user.parsers)\n  }\n}\n\nfunction typeHandlers(types) {\n  return Object.keys(types).reduce((acc, k) => {\n    types[k].from && [].concat(types[k].from).forEach(x => acc.parsers[x] = types[k].parse)\n    if (types[k].serialize) {\n      acc.serializers[types[k].to] = types[k].serialize\n      types[k].from && [].concat(types[k].from).forEach(x => acc.serializers[x] = types[k].serialize)\n    }\n    return acc\n  }, { parsers: {}, serializers: {} })\n}\n\nfunction escapeIdentifiers(xs, { transform: { column } }) {\n  return xs.map(x => escapeIdentifier(column.to ? column.to(x) : x)).join(',')\n}\n\nexport const escapeIdentifier = function escape(str) {\n  return '\"' + str.replace(/\"/g, '\"\"').replace(/\\./g, '\".\"') + '\"'\n}\n\nexport const inferType = function inferType(x) {\n  return (\n    x instanceof Parameter ? x.type :\n    x instanceof Date ? 1184 :\n    x instanceof Uint8Array ? 17 :\n    (x === true || x === false) ? 16 :\n    typeof x === 'bigint' ? 20 :\n    Array.isArray(x) ? inferType(x[0]) :\n    0\n  )\n}\n\nconst escapeBackslash = /\\\\/g\nconst escapeQuote = /\"/g\n\nfunction arrayEscape(x) {\n  return x\n    .replace(escapeBackslash, '\\\\\\\\')\n    .replace(escapeQuote, '\\\\\"')\n}\n\nexport const arraySerializer = function arraySerializer(xs, serializer, options, typarray) {\n  if (Array.isArray(xs) === false)\n    return xs\n\n  if (!xs.length)\n    return '{}'\n\n  const first = xs[0]\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n\n  if (Array.isArray(first) && !first.type)\n    return '{' + xs.map(x => arraySerializer(x, serializer, options, typarray)).join(delimiter) + '}'\n\n  return '{' + xs.map(x => {\n    if (x === undefined) {\n      x = options.transform.undefined\n      if (x === undefined)\n        throw Errors.generic('UNDEFINED_VALUE', 'Undefined values are not allowed')\n    }\n\n    return x === null\n      ? 'null'\n      : '\"' + arrayEscape(serializer ? serializer(x.type ? x.value : x) : '' + x) + '\"'\n  }).join(delimiter) + '}'\n}\n\nconst arrayParserState = {\n  i: 0,\n  char: null,\n  str: '',\n  quoted: false,\n  last: 0\n}\n\nexport const arrayParser = function arrayParser(x, parser, typarray) {\n  arrayParserState.i = arrayParserState.last = 0\n  return arrayParserLoop(arrayParserState, x, parser, typarray)\n}\n\nfunction arrayParserLoop(s, x, parser, typarray) {\n  const xs = []\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n  for (; s.i < x.length; s.i++) {\n    s.char = x[s.i]\n    if (s.quoted) {\n      if (s.char === '\\\\') {\n        s.str += x[++s.i]\n      } else if (s.char === '\"') {\n        xs.push(parser ? parser(s.str) : s.str)\n        s.str = ''\n        s.quoted = x[s.i + 1] === '\"'\n        s.last = s.i + 2\n      } else {\n        s.str += s.char\n      }\n    } else if (s.char === '\"') {\n      s.quoted = true\n    } else if (s.char === '{') {\n      s.last = ++s.i\n      xs.push(arrayParserLoop(s, x, parser, typarray))\n    } else if (s.char === '}') {\n      s.quoted = false\n      s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n      break\n    } else if (s.char === delimiter && s.p !== '}' && s.p !== '\"') {\n      xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n    }\n    s.p = s.char\n  }\n  s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1))\n  return xs\n}\n\nexport const toCamel = x => {\n  let str = x[0]\n  for (let i = 1; i < x.length; i++)\n    str += x[i] === '_' ? x[++i].toUpperCase() : x[i]\n  return str\n}\n\nexport const toPascal = x => {\n  let str = x[0].toUpperCase()\n  for (let i = 1; i < x.length; i++)\n    str += x[i] === '_' ? x[++i].toUpperCase() : x[i]\n  return str\n}\n\nexport const toKebab = x => x.replace(/_/g, '-')\n\nexport const fromCamel = x => x.replace(/([A-Z])/g, '_$1').toLowerCase()\nexport const fromPascal = x => (x.slice(0, 1) + x.slice(1).replace(/([A-Z])/g, '_$1')).toLowerCase()\nexport const fromKebab = x => x.replace(/-/g, '_')\n\nfunction createJsonTransform(fn) {\n  return function jsonTransform(x, column) {\n    return typeof x === 'object' && x !== null && (column.type === 114 || column.type === 3802)\n      ? Array.isArray(x)\n        ? x.map(x => jsonTransform(x, column))\n        : Object.entries(x).reduce((acc, [k, v]) => Object.assign(acc, { [fn(k)]: jsonTransform(v, column) }), {})\n      : x\n  }\n}\n\ntoCamel.column = { from: toCamel }\ntoCamel.value = { from: createJsonTransform(toCamel) }\nfromCamel.column = { to: fromCamel }\n\nexport const camel = { ...toCamel }\ncamel.column.to = fromCamel\n\ntoPascal.column = { from: toPascal }\ntoPascal.value = { from: createJsonTransform(toPascal) }\nfromPascal.column = { to: fromPascal }\n\nexport const pascal = { ...toPascal }\npascal.column.to = fromPascal\n\ntoKebab.column = { from: toKebab }\ntoKebab.value = { from: createJsonTransform(toKebab) }\nfromKebab.column = { to: fromKebab }\n\nexport const kebab = { ...toKebab }\nkebab.column.to = fromKebab\n","export default class Result extends Array {\n  constructor() {\n    super()\n    Object.defineProperties(this, {\n      count: { value: null, writable: true },\n      state: { value: null, writable: true },\n      command: { value: null, writable: true },\n      columns: { value: null, writable: true },\n      statement: { value: null, writable: true }\n    })\n  }\n\n  static get [Symbol.species]() {\n    return Array\n  }\n}\n","export default Queue\n\nfunction Queue(initial = []) {\n  let xs = initial.slice()\n  let index = 0\n\n  return {\n    get length() {\n      return xs.length - index\n    },\n    remove: (x) => {\n      const index = xs.indexOf(x)\n      return index === -1\n        ? null\n        : (xs.splice(index, 1), x)\n    },\n    push: (x) => (xs.push(x), x),\n    shift: () => {\n      const out = xs[index++]\n\n      if (index === xs.length) {\n        index = 0\n        xs = []\n      } else {\n        xs[index - 1] = undefined\n      }\n\n      return out\n    }\n  }\n}\n","const size = 256\nlet buffer = Buffer.allocUnsafe(size)\n\nconst messages = 'BCcDdEFfHPpQSX'.split('').reduce((acc, x) => {\n  const v = x.charCodeAt(0)\n  acc[x] = () => {\n    buffer[0] = v\n    b.i = 5\n    return b\n  }\n  return acc\n}, {})\n\nconst b = Object.assign(reset, messages, {\n  N: String.fromCharCode(0),\n  i: 0,\n  inc(x) {\n    b.i += x\n    return b\n  },\n  str(x) {\n    const length = Buffer.byteLength(x)\n    fit(length)\n    b.i += buffer.write(x, b.i, length, 'utf8')\n    return b\n  },\n  i16(x) {\n    fit(2)\n    buffer.writeUInt16BE(x, b.i)\n    b.i += 2\n    return b\n  },\n  i32(x, i) {\n    if (i || i === 0) {\n      buffer.writeUInt32BE(x, i)\n      return b\n    }\n    fit(4)\n    buffer.writeUInt32BE(x, b.i)\n    b.i += 4\n    return b\n  },\n  z(x) {\n    fit(x)\n    buffer.fill(0, b.i, b.i + x)\n    b.i += x\n    return b\n  },\n  raw(x) {\n    buffer = Buffer.concat([buffer.subarray(0, b.i), x])\n    b.i = buffer.length\n    return b\n  },\n  end(at = 1) {\n    buffer.writeUInt32BE(b.i - at, at)\n    const out = buffer.subarray(0, b.i)\n    b.i = 0\n    buffer = Buffer.allocUnsafe(size)\n    return out\n  }\n})\n\nexport default b\n\nfunction fit(x) {\n  if (buffer.length - b.i < x) {\n    const prev = buffer\n        , length = prev.length\n\n    buffer = Buffer.allocUnsafe(length + (length >> 1) + x)\n    prev.copy(buffer)\n  }\n}\n\nfunction reset() {\n  b.i = 0\n  return b\n}\n","import net from 'net'\nimport tls from 'tls'\nimport crypto from 'crypto'\nimport Stream from 'stream'\nimport { performance } from 'perf_hooks'\n\nimport { stringify, handleValue, arrayParser, arraySerializer } from './types.js'\nimport { Errors } from './errors.js'\nimport Result from './result.js'\nimport Queue from './queue.js'\nimport { Query, CLOSE } from './query.js'\nimport b from './bytes.js'\n\nexport default Connection\n\nlet uid = 1\n\nconst Sync = b().S().end()\n    , Flush = b().H().end()\n    , SSLRequest = b().i32(8).i32(80877103).end(8)\n    , ExecuteUnnamed = Buffer.concat([b().E().str(b.N).i32(0).end(), Sync])\n    , DescribeUnnamed = b().D().str('S').str(b.N).end()\n    , noop = () => { /* noop */ }\n\nconst retryRoutines = new Set([\n  'FetchPreparedStatement',\n  'RevalidateCachedQuery',\n  'transformAssignedExpr'\n])\n\nconst errorFields = {\n  83  : 'severity_local',    // S\n  86  : 'severity',          // V\n  67  : 'code',              // C\n  77  : 'message',           // M\n  68  : 'detail',            // D\n  72  : 'hint',              // H\n  80  : 'position',          // P\n  112 : 'internal_position', // p\n  113 : 'internal_query',    // q\n  87  : 'where',             // W\n  115 : 'schema_name',       // s\n  116 : 'table_name',        // t\n  99  : 'column_name',       // c\n  100 : 'data type_name',    // d\n  110 : 'constraint_name',   // n\n  70  : 'file',              // F\n  76  : 'line',              // L\n  82  : 'routine'            // R\n}\n\nfunction Connection(options, queues = {}, { onopen = noop, onend = noop, onclose = noop } = {}) {\n  const {\n    ssl,\n    max,\n    user,\n    host,\n    port,\n    database,\n    parsers,\n    transform,\n    onnotice,\n    onnotify,\n    onparameter,\n    max_pipeline,\n    keep_alive,\n    backoff,\n    target_session_attrs\n  } = options\n\n  const sent = Queue()\n      , id = uid++\n      , backend = { pid: null, secret: null }\n      , idleTimer = timer(end, options.idle_timeout)\n      , lifeTimer = timer(end, options.max_lifetime)\n      , connectTimer = timer(connectTimedOut, options.connect_timeout)\n\n  let socket = null\n    , cancelMessage\n    , result = new Result()\n    , incoming = Buffer.alloc(0)\n    , needsTypes = options.fetch_types\n    , backendParameters = {}\n    , statements = {}\n    , statementId = Math.random().toString(36).slice(2)\n    , statementCount = 1\n    , closedDate = 0\n    , remaining = 0\n    , hostIndex = 0\n    , retries = 0\n    , length = 0\n    , delay = 0\n    , rows = 0\n    , serverSignature = null\n    , nextWriteTimer = null\n    , terminated = false\n    , incomings = null\n    , results = null\n    , initial = null\n    , ending = null\n    , stream = null\n    , chunk = null\n    , ended = null\n    , nonce = null\n    , query = null\n    , final = null\n\n  const connection = {\n    queue: queues.closed,\n    idleTimer,\n    connect(query) {\n      initial = query\n      reconnect()\n    },\n    terminate,\n    execute,\n    cancel,\n    end,\n    count: 0,\n    id\n  }\n\n  queues.closed && queues.closed.push(connection)\n\n  return connection\n\n  async function createSocket() {\n    let x\n    try {\n      x = options.socket\n        ? (await Promise.resolve(options.socket(options)))\n        : new net.Socket()\n    } catch (e) {\n      error(e)\n      return\n    }\n    x.on('error', error)\n    x.on('close', closed)\n    x.on('drain', drain)\n    return x\n  }\n\n  async function cancel({ pid, secret }, resolve, reject) {\n    try {\n      cancelMessage = b().i32(16).i32(80877102).i32(pid).i32(secret).end(16)\n      await connect()\n      socket.once('error', reject)\n      socket.once('close', resolve)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  function execute(q) {\n    if (terminated)\n      return queryError(q, Errors.connection('CONNECTION_DESTROYED', options))\n\n    if (q.cancelled)\n      return\n\n    try {\n      q.state = backend\n      query\n        ? sent.push(q)\n        : (query = q, query.active = true)\n\n      build(q)\n      return write(toBuffer(q))\n        && !q.describeFirst\n        && !q.cursorFn\n        && sent.length < max_pipeline\n        && (!q.options.onexecute || q.options.onexecute(connection))\n    } catch (error) {\n      sent.length === 0 && write(Sync)\n      errored(error)\n      return true\n    }\n  }\n\n  function toBuffer(q) {\n    if (q.parameters.length >= 65534)\n      throw Errors.generic('MAX_PARAMETERS_EXCEEDED', 'Max number of parameters (65534) exceeded')\n\n    return q.options.simple\n      ? b().Q().str(q.statement.string + b.N).end()\n      : q.describeFirst\n        ? Buffer.concat([describe(q), Flush])\n        : q.prepare\n          ? q.prepared\n            ? prepared(q)\n            : Buffer.concat([describe(q), prepared(q)])\n          : unnamed(q)\n  }\n\n  function describe(q) {\n    return Buffer.concat([\n      Parse(q.statement.string, q.parameters, q.statement.types, q.statement.name),\n      Describe('S', q.statement.name)\n    ])\n  }\n\n  function prepared(q) {\n    return Buffer.concat([\n      Bind(q.parameters, q.statement.types, q.statement.name, q.cursorName),\n      q.cursorFn\n        ? Execute('', q.cursorRows)\n        : ExecuteUnnamed\n    ])\n  }\n\n  function unnamed(q) {\n    return Buffer.concat([\n      Parse(q.statement.string, q.parameters, q.statement.types),\n      DescribeUnnamed,\n      prepared(q)\n    ])\n  }\n\n  function build(q) {\n    const parameters = []\n        , types = []\n\n    const string = stringify(q, q.strings[0], q.args[0], parameters, types, options)\n\n    !q.tagged && q.args.forEach(x => handleValue(x, parameters, types, options))\n\n    q.prepare = options.prepare && ('prepare' in q.options ? q.options.prepare : true)\n    q.string = string\n    q.signature = q.prepare && types + string\n    q.onlyDescribe && (delete statements[q.signature])\n    q.parameters = q.parameters || parameters\n    q.prepared = q.prepare && q.signature in statements\n    q.describeFirst = q.onlyDescribe || (parameters.length && !q.prepared)\n    q.statement = q.prepared\n      ? statements[q.signature]\n      : { string, types, name: q.prepare ? statementId + statementCount++ : '' }\n\n    typeof options.debug === 'function' && options.debug(id, string, parameters, types)\n  }\n\n  function write(x, fn) {\n    chunk = chunk ? Buffer.concat([chunk, x]) : Buffer.from(x)\n    if (fn || chunk.length >= 1024)\n      return nextWrite(fn)\n    nextWriteTimer === null && (nextWriteTimer = setImmediate(nextWrite))\n    return true\n  }\n\n  function nextWrite(fn) {\n    const x = socket.write(chunk, fn)\n    nextWriteTimer !== null && clearImmediate(nextWriteTimer)\n    chunk = nextWriteTimer = null\n    return x\n  }\n\n  function connectTimedOut() {\n    errored(Errors.connection('CONNECT_TIMEOUT', options, socket))\n    socket.destroy()\n  }\n\n  async function secure() {\n    write(SSLRequest)\n    const canSSL = await new Promise(r => socket.once('data', x => r(x[0] === 83))) // S\n\n    if (!canSSL && ssl === 'prefer')\n      return connected()\n\n    socket.removeAllListeners()\n    socket = tls.connect({\n      socket,\n      servername: net.isIP(socket.host) ? undefined : socket.host,\n      ...(ssl === 'require' || ssl === 'allow' || ssl === 'prefer'\n        ? { rejectUnauthorized: false }\n        : ssl === 'verify-full'\n          ? {}\n          : typeof ssl === 'object'\n            ? ssl\n            : {}\n      )\n    })\n    socket.on('secureConnect', connected)\n    socket.on('error', error)\n    socket.on('close', closed)\n    socket.on('drain', drain)\n  }\n\n  /* c8 ignore next 3 */\n  function drain() {\n    !query && onopen(connection)\n  }\n\n  function data(x) {\n    if (incomings) {\n      incomings.push(x)\n      remaining -= x.length\n      if (remaining > 0)\n        return\n    }\n\n    incoming = incomings\n      ? Buffer.concat(incomings, length - remaining)\n      : incoming.length === 0\n        ? x\n        : Buffer.concat([incoming, x], incoming.length + x.length)\n\n    while (incoming.length > 4) {\n      length = incoming.readUInt32BE(1)\n      if (length >= incoming.length) {\n        remaining = length - incoming.length\n        incomings = [incoming]\n        break\n      }\n\n      try {\n        handle(incoming.subarray(0, length + 1))\n      } catch (e) {\n        query && (query.cursorFn || query.describeFirst) && write(Sync)\n        errored(e)\n      }\n      incoming = incoming.subarray(length + 1)\n      remaining = 0\n      incomings = null\n    }\n  }\n\n  async function connect() {\n    terminated = false\n    backendParameters = {}\n    socket || (socket = await createSocket())\n\n    if (!socket)\n      return\n\n    connectTimer.start()\n\n    if (options.socket)\n      return ssl ? secure() : connected()\n\n    socket.on('connect', ssl ? secure : connected)\n\n    if (options.path)\n      return socket.connect(options.path)\n\n    socket.ssl = ssl\n    socket.connect(port[hostIndex], host[hostIndex])\n    socket.host = host[hostIndex]\n    socket.port = port[hostIndex]\n\n    hostIndex = (hostIndex + 1) % port.length\n  }\n\n  function reconnect() {\n    setTimeout(connect, closedDate ? closedDate + delay - performance.now() : 0)\n  }\n\n  function connected() {\n    try {\n      statements = {}\n      needsTypes = options.fetch_types\n      statementId = Math.random().toString(36).slice(2)\n      statementCount = 1\n      lifeTimer.start()\n      socket.on('data', data)\n      keep_alive && socket.setKeepAlive && socket.setKeepAlive(true, 1000 * keep_alive)\n      const s = StartupMessage()\n      write(s)\n    } catch (err) {\n      error(err)\n    }\n  }\n\n  function error(err) {\n    if (connection.queue === queues.connecting && options.host[retries + 1])\n      return\n\n    errored(err)\n    while (sent.length)\n      queryError(sent.shift(), err)\n  }\n\n  function errored(err) {\n    stream && (stream.destroy(err), stream = null)\n    query && queryError(query, err)\n    initial && (queryError(initial, err), initial = null)\n  }\n\n  function queryError(query, err) {\n    if (query.reserve)\n      return query.reject(err)\n\n    if (!err || typeof err !== 'object')\n      err = new Error(err)\n\n    'query' in err || 'parameters' in err || Object.defineProperties(err, {\n      stack: { value: err.stack + query.origin.replace(/.*\\n/, '\\n'), enumerable: options.debug },\n      query: { value: query.string, enumerable: options.debug },\n      parameters: { value: query.parameters, enumerable: options.debug },\n      args: { value: query.args, enumerable: options.debug },\n      types: { value: query.statement && query.statement.types, enumerable: options.debug }\n    })\n    query.reject(err)\n  }\n\n  function end() {\n    return ending || (\n      !connection.reserved && onend(connection),\n      !connection.reserved && !initial && !query && sent.length === 0\n        ? (terminate(), new Promise(r => socket && socket.readyState !== 'closed' ? socket.once('close', r) : r()))\n        : ending = new Promise(r => ended = r)\n    )\n  }\n\n  function terminate() {\n    terminated = true\n    if (stream || query || initial || sent.length)\n      error(Errors.connection('CONNECTION_DESTROYED', options))\n\n    clearImmediate(nextWriteTimer)\n    if (socket) {\n      socket.removeListener('data', data)\n      socket.removeListener('connect', connected)\n      socket.readyState === 'open' && socket.end(b().X().end())\n    }\n    ended && (ended(), ending = ended = null)\n  }\n\n  async function closed(hadError) {\n    incoming = Buffer.alloc(0)\n    remaining = 0\n    incomings = null\n    clearImmediate(nextWriteTimer)\n    socket.removeListener('data', data)\n    socket.removeListener('connect', connected)\n    idleTimer.cancel()\n    lifeTimer.cancel()\n    connectTimer.cancel()\n\n    socket.removeAllListeners()\n    socket = null\n\n    if (initial)\n      return reconnect()\n\n    !hadError && (query || sent.length) && error(Errors.connection('CONNECTION_CLOSED', options, socket))\n    closedDate = performance.now()\n    hadError && options.shared.retries++\n    delay = (typeof backoff === 'function' ? backoff(options.shared.retries) : backoff) * 1000\n    onclose(connection, Errors.connection('CONNECTION_CLOSED', options, socket))\n  }\n\n  /* Handlers */\n  function handle(xs, x = xs[0]) {\n    (\n      x === 68 ? DataRow :                   // D\n      x === 100 ? CopyData :                 // d\n      x === 65 ? NotificationResponse :      // A\n      x === 83 ? ParameterStatus :           // S\n      x === 90 ? ReadyForQuery :             // Z\n      x === 67 ? CommandComplete :           // C\n      x === 50 ? BindComplete :              // 2\n      x === 49 ? ParseComplete :             // 1\n      x === 116 ? ParameterDescription :     // t\n      x === 84 ? RowDescription :            // T\n      x === 82 ? Authentication :            // R\n      x === 110 ? NoData :                   // n\n      x === 75 ? BackendKeyData :            // K\n      x === 69 ? ErrorResponse :             // E\n      x === 115 ? PortalSuspended :          // s\n      x === 51 ? CloseComplete :             // 3\n      x === 71 ? CopyInResponse :            // G\n      x === 78 ? NoticeResponse :            // N\n      x === 72 ? CopyOutResponse :           // H\n      x === 99 ? CopyDone :                  // c\n      x === 73 ? EmptyQueryResponse :        // I\n      x === 86 ? FunctionCallResponse :      // V\n      x === 118 ? NegotiateProtocolVersion : // v\n      x === 87 ? CopyBothResponse :          // W\n      /* c8 ignore next */\n      UnknownMessage\n    )(xs)\n  }\n\n  function DataRow(x) {\n    let index = 7\n    let length\n    let column\n    let value\n\n    const row = query.isRaw ? new Array(query.statement.columns.length) : {}\n    for (let i = 0; i < query.statement.columns.length; i++) {\n      column = query.statement.columns[i]\n      length = x.readInt32BE(index)\n      index += 4\n\n      value = length === -1\n        ? null\n        : query.isRaw === true\n          ? x.subarray(index, index += length)\n          : column.parser === undefined\n            ? x.toString('utf8', index, index += length)\n            : column.parser.array === true\n              ? column.parser(x.toString('utf8', index + 1, index += length))\n              : column.parser(x.toString('utf8', index, index += length))\n\n      query.isRaw\n        ? (row[i] = query.isRaw === true\n          ? value\n          : transform.value.from ? transform.value.from(value, column) : value)\n        : (row[column.name] = transform.value.from ? transform.value.from(value, column) : value)\n    }\n\n    query.forEachFn\n      ? query.forEachFn(transform.row.from ? transform.row.from(row) : row, result)\n      : (result[rows++] = transform.row.from ? transform.row.from(row) : row)\n  }\n\n  function ParameterStatus(x) {\n    const [k, v] = x.toString('utf8', 5, x.length - 1).split(b.N)\n    backendParameters[k] = v\n    if (options.parameters[k] !== v) {\n      options.parameters[k] = v\n      onparameter && onparameter(k, v)\n    }\n  }\n\n  function ReadyForQuery(x) {\n    query && query.options.simple && query.resolve(results || result)\n    query = results = null\n    result = new Result()\n    connectTimer.cancel()\n\n    if (initial) {\n      if (target_session_attrs) {\n        if (!backendParameters.in_hot_standby || !backendParameters.default_transaction_read_only)\n          return fetchState()\n        else if (tryNext(target_session_attrs, backendParameters))\n          return terminate()\n      }\n\n      if (needsTypes) {\n        initial.reserve && (initial = null)\n        return fetchArrayTypes()\n      }\n\n      initial && !initial.reserve && execute(initial)\n      options.shared.retries = retries = 0\n      initial = null\n      return\n    }\n\n    while (sent.length && (query = sent.shift()) && (query.active = true, query.cancelled))\n      Connection(options).cancel(query.state, query.cancelled.resolve, query.cancelled.reject)\n\n    if (query)\n      return // Consider opening if able and sent.length < 50\n\n    connection.reserved\n      ? !connection.reserved.release && x[5] === 73 // I\n        ? ending\n          ? terminate()\n          : (connection.reserved = null, onopen(connection))\n        : connection.reserved()\n      : ending\n        ? terminate()\n        : onopen(connection)\n  }\n\n  function CommandComplete(x) {\n    rows = 0\n\n    for (let i = x.length - 1; i > 0; i--) {\n      if (x[i] === 32 && x[i + 1] < 58 && result.count === null)\n        result.count = +x.toString('utf8', i + 1, x.length - 1)\n      if (x[i - 1] >= 65) {\n        result.command = x.toString('utf8', 5, i)\n        result.state = backend\n        break\n      }\n    }\n\n    final && (final(), final = null)\n\n    if (result.command === 'BEGIN' && max !== 1 && !connection.reserved)\n      return errored(Errors.generic('UNSAFE_TRANSACTION', 'Only use sql.begin, sql.reserved or max: 1'))\n\n    if (query.options.simple)\n      return BindComplete()\n\n    if (query.cursorFn) {\n      result.count && query.cursorFn(result)\n      write(Sync)\n    }\n\n    query.resolve(result)\n  }\n\n  function ParseComplete() {\n    query.parsing = false\n  }\n\n  function BindComplete() {\n    !result.statement && (result.statement = query.statement)\n    result.columns = query.statement.columns\n  }\n\n  function ParameterDescription(x) {\n    const length = x.readUInt16BE(5)\n\n    for (let i = 0; i < length; ++i)\n      !query.statement.types[i] && (query.statement.types[i] = x.readUInt32BE(7 + i * 4))\n\n    query.prepare && (statements[query.signature] = query.statement)\n    query.describeFirst && !query.onlyDescribe && (write(prepared(query)), query.describeFirst = false)\n  }\n\n  function RowDescription(x) {\n    if (result.command) {\n      results = results || [result]\n      results.push(result = new Result())\n      result.count = null\n      query.statement.columns = null\n    }\n\n    const length = x.readUInt16BE(5)\n    let index = 7\n    let start\n\n    query.statement.columns = Array(length)\n\n    for (let i = 0; i < length; ++i) {\n      start = index\n      while (x[index++] !== 0);\n      const table = x.readUInt32BE(index)\n      const number = x.readUInt16BE(index + 4)\n      const type = x.readUInt32BE(index + 6)\n      query.statement.columns[i] = {\n        name: transform.column.from\n          ? transform.column.from(x.toString('utf8', start, index - 1))\n          : x.toString('utf8', start, index - 1),\n        parser: parsers[type],\n        table,\n        number,\n        type\n      }\n      index += 18\n    }\n\n    result.statement = query.statement\n    if (query.onlyDescribe)\n      return (query.resolve(query.statement), write(Sync))\n  }\n\n  async function Authentication(x, type = x.readUInt32BE(5)) {\n    (\n      type === 3 ? AuthenticationCleartextPassword :\n      type === 5 ? AuthenticationMD5Password :\n      type === 10 ? SASL :\n      type === 11 ? SASLContinue :\n      type === 12 ? SASLFinal :\n      type !== 0 ? UnknownAuth :\n      noop\n    )(x, type)\n  }\n\n  /* c8 ignore next 5 */\n  async function AuthenticationCleartextPassword() {\n    const payload = await Pass()\n    write(\n      b().p().str(payload).z(1).end()\n    )\n  }\n\n  async function AuthenticationMD5Password(x) {\n    const payload = 'md5' + (\n      await md5(\n        Buffer.concat([\n          Buffer.from(await md5((await Pass()) + user)),\n          x.subarray(9)\n        ])\n      )\n    )\n    write(\n      b().p().str(payload).z(1).end()\n    )\n  }\n\n  async function SASL() {\n    nonce = (await crypto.randomBytes(18)).toString('base64')\n    b().p().str('SCRAM-SHA-256' + b.N)\n    const i = b.i\n    write(b.inc(4).str('n,,n=*,r=' + nonce).i32(b.i - i - 4, i).end())\n  }\n\n  async function SASLContinue(x) {\n    const res = x.toString('utf8', 9).split(',').reduce((acc, x) => (acc[x[0]] = x.slice(2), acc), {})\n\n    const saltedPassword = await crypto.pbkdf2Sync(\n      await Pass(),\n      Buffer.from(res.s, 'base64'),\n      parseInt(res.i), 32,\n      'sha256'\n    )\n\n    const clientKey = await hmac(saltedPassword, 'Client Key')\n\n    const auth = 'n=*,r=' + nonce + ','\n               + 'r=' + res.r + ',s=' + res.s + ',i=' + res.i\n               + ',c=biws,r=' + res.r\n\n    serverSignature = (await hmac(await hmac(saltedPassword, 'Server Key'), auth)).toString('base64')\n\n    const payload = 'c=biws,r=' + res.r + ',p=' + xor(\n      clientKey, Buffer.from(await hmac(await sha256(clientKey), auth))\n    ).toString('base64')\n\n    write(\n      b().p().str(payload).end()\n    )\n  }\n\n  function SASLFinal(x) {\n    if (x.toString('utf8', 9).split(b.N, 1)[0].slice(2) === serverSignature)\n      return\n    /* c8 ignore next 5 */\n    errored(Errors.generic('SASL_SIGNATURE_MISMATCH', 'The server did not return the correct signature'))\n    socket.destroy()\n  }\n\n  function Pass() {\n    return Promise.resolve(typeof options.pass === 'function'\n      ? options.pass()\n      : options.pass\n    )\n  }\n\n  function NoData() {\n    result.statement = query.statement\n    result.statement.columns = []\n    if (query.onlyDescribe)\n      return (query.resolve(query.statement), write(Sync))\n  }\n\n  function BackendKeyData(x) {\n    backend.pid = x.readUInt32BE(5)\n    backend.secret = x.readUInt32BE(9)\n  }\n\n  async function fetchArrayTypes() {\n    needsTypes = false\n    const types = await new Query([`\n      select b.oid, b.typarray\n      from pg_catalog.pg_type a\n      left join pg_catalog.pg_type b on b.oid = a.typelem\n      where a.typcategory = 'A'\n      group by b.oid, b.typarray\n      order by b.oid\n    `], [], execute)\n    types.forEach(({ oid, typarray }) => addArrayType(oid, typarray))\n  }\n\n  function addArrayType(oid, typarray) {\n    if (!!options.parsers[typarray] && !!options.serializers[typarray]) return\n    const parser = options.parsers[oid]\n    options.shared.typeArrayMap[oid] = typarray\n    options.parsers[typarray] = (xs) => arrayParser(xs, parser, typarray)\n    options.parsers[typarray].array = true\n    options.serializers[typarray] = (xs) => arraySerializer(xs, options.serializers[oid], options, typarray)\n  }\n\n  function tryNext(x, xs) {\n    return (\n      (x === 'read-write' && xs.default_transaction_read_only === 'on') ||\n      (x === 'read-only' && xs.default_transaction_read_only === 'off') ||\n      (x === 'primary' && xs.in_hot_standby === 'on') ||\n      (x === 'standby' && xs.in_hot_standby === 'off') ||\n      (x === 'prefer-standby' && xs.in_hot_standby === 'off' && options.host[retries])\n    )\n  }\n\n  function fetchState() {\n    const query = new Query([`\n      show transaction_read_only;\n      select pg_catalog.pg_is_in_recovery()\n    `], [], execute, null, { simple: true })\n    query.resolve = ([[a], [b]]) => {\n      backendParameters.default_transaction_read_only = a.transaction_read_only\n      backendParameters.in_hot_standby = b.pg_is_in_recovery ? 'on' : 'off'\n    }\n    query.execute()\n  }\n\n  function ErrorResponse(x) {\n    query && (query.cursorFn || query.describeFirst) && write(Sync)\n    const error = Errors.postgres(parseError(x))\n    query && query.retried\n      ? errored(query.retried)\n      : query && query.prepared && retryRoutines.has(error.routine)\n        ? retry(query, error)\n        : errored(error)\n  }\n\n  function retry(q, error) {\n    delete statements[q.signature]\n    q.retried = error\n    execute(q)\n  }\n\n  function NotificationResponse(x) {\n    if (!onnotify)\n      return\n\n    let index = 9\n    while (x[index++] !== 0);\n    onnotify(\n      x.toString('utf8', 9, index - 1),\n      x.toString('utf8', index, x.length - 1)\n    )\n  }\n\n  async function PortalSuspended() {\n    try {\n      const x = await Promise.resolve(query.cursorFn(result))\n      rows = 0\n      x === CLOSE\n        ? write(Close(query.portal))\n        : (result = new Result(), write(Execute('', query.cursorRows)))\n    } catch (err) {\n      write(Sync)\n      query.reject(err)\n    }\n  }\n\n  function CloseComplete() {\n    result.count && query.cursorFn(result)\n    query.resolve(result)\n  }\n\n  function CopyInResponse() {\n    stream = new Stream.Writable({\n      autoDestroy: true,\n      write(chunk, encoding, callback) {\n        socket.write(b().d().raw(chunk).end(), callback)\n      },\n      destroy(error, callback) {\n        callback(error)\n        socket.write(b().f().str(error + b.N).end())\n        stream = null\n      },\n      final(callback) {\n        socket.write(b().c().end())\n        final = callback\n      }\n    })\n    query.resolve(stream)\n  }\n\n  function CopyOutResponse() {\n    stream = new Stream.Readable({\n      read() { socket.resume() }\n    })\n    query.resolve(stream)\n  }\n\n  /* c8 ignore next 3 */\n  function CopyBothResponse() {\n    stream = new Stream.Duplex({\n      autoDestroy: true,\n      read() { socket.resume() },\n      /* c8 ignore next 11 */\n      write(chunk, encoding, callback) {\n        socket.write(b().d().raw(chunk).end(), callback)\n      },\n      destroy(error, callback) {\n        callback(error)\n        socket.write(b().f().str(error + b.N).end())\n        stream = null\n      },\n      final(callback) {\n        socket.write(b().c().end())\n        final = callback\n      }\n    })\n    query.resolve(stream)\n  }\n\n  function CopyData(x) {\n    stream && (stream.push(x.subarray(5)) || socket.pause())\n  }\n\n  function CopyDone() {\n    stream && stream.push(null)\n    stream = null\n  }\n\n  function NoticeResponse(x) {\n    onnotice\n      ? onnotice(parseError(x))\n      : console.log(parseError(x)) // eslint-disable-line\n\n  }\n\n  /* c8 ignore next 3 */\n  function EmptyQueryResponse() {\n    /* noop */\n  }\n\n  /* c8 ignore next 3 */\n  function FunctionCallResponse() {\n    errored(Errors.notSupported('FunctionCallResponse'))\n  }\n\n  /* c8 ignore next 3 */\n  function NegotiateProtocolVersion() {\n    errored(Errors.notSupported('NegotiateProtocolVersion'))\n  }\n\n  /* c8 ignore next 3 */\n  function UnknownMessage(x) {\n    console.error('Postgres.js : Unknown Message:', x[0]) // eslint-disable-line\n  }\n\n  /* c8 ignore next 3 */\n  function UnknownAuth(x, type) {\n    console.error('Postgres.js : Unknown Auth:', type) // eslint-disable-line\n  }\n\n  /* Messages */\n  function Bind(parameters, types, statement = '', portal = '') {\n    let prev\n      , type\n\n    b().B().str(portal + b.N).str(statement + b.N).i16(0).i16(parameters.length)\n\n    parameters.forEach((x, i) => {\n      if (x === null)\n        return b.i32(0xFFFFFFFF)\n\n      type = types[i]\n      parameters[i] = x = type in options.serializers\n        ? options.serializers[type](x)\n        : '' + x\n\n      prev = b.i\n      b.inc(4).str(x).i32(b.i - prev - 4, prev)\n    })\n\n    b.i16(0)\n\n    return b.end()\n  }\n\n  function Parse(str, parameters, types, name = '') {\n    b().P().str(name + b.N).str(str + b.N).i16(parameters.length)\n    parameters.forEach((x, i) => b.i32(types[i] || 0))\n    return b.end()\n  }\n\n  function Describe(x, name = '') {\n    return b().D().str(x).str(name + b.N).end()\n  }\n\n  function Execute(portal = '', rows = 0) {\n    return Buffer.concat([\n      b().E().str(portal + b.N).i32(rows).end(),\n      Flush\n    ])\n  }\n\n  function Close(portal = '') {\n    return Buffer.concat([\n      b().C().str('P').str(portal + b.N).end(),\n      b().S().end()\n    ])\n  }\n\n  function StartupMessage() {\n    return cancelMessage || b().inc(4).i16(3).z(2).str(\n      Object.entries(Object.assign({\n        user,\n        database,\n        client_encoding: 'UTF8'\n      },\n        options.connection\n      )).filter(([, v]) => v).map(([k, v]) => k + b.N + v).join(b.N)\n    ).z(2).end(0)\n  }\n\n}\n\nfunction parseError(x) {\n  const error = {}\n  let start = 5\n  for (let i = 5; i < x.length - 1; i++) {\n    if (x[i] === 0) {\n      error[errorFields[x[start]]] = x.toString('utf8', start + 1, i)\n      start = i + 1\n    }\n  }\n  return error\n}\n\nfunction md5(x) {\n  return crypto.createHash('md5').update(x).digest('hex')\n}\n\nfunction hmac(key, x) {\n  return crypto.createHmac('sha256', key).update(x).digest()\n}\n\nfunction sha256(x) {\n  return crypto.createHash('sha256').update(x).digest()\n}\n\nfunction xor(a, b) {\n  const length = Math.max(a.length, b.length)\n  const buffer = Buffer.allocUnsafe(length)\n  for (let i = 0; i < length; i++)\n    buffer[i] = a[i] ^ b[i]\n  return buffer\n}\n\nfunction timer(fn, seconds) {\n  seconds = typeof seconds === 'function' ? seconds() : seconds\n  if (!seconds)\n    return { cancel: noop, start: noop }\n\n  let timer\n  return {\n    cancel() {\n      timer && (clearTimeout(timer), timer = null)\n    },\n    start() {\n      timer && clearTimeout(timer)\n      timer = setTimeout(done, seconds * 1000, arguments)\n    }\n  }\n\n  function done(args) {\n    fn.apply(null, args)\n    timer = null\n  }\n}\n","const noop = () => { /* noop */ }\n\nexport default function Subscribe(postgres, options) {\n  const subscribers = new Map()\n      , slot = 'postgresjs_' + Math.random().toString(36).slice(2)\n      , state = {}\n\n  let connection\n    , stream\n    , ended = false\n\n  const sql = subscribe.sql = postgres({\n    ...options,\n    transform: { column: {}, value: {}, row: {} },\n    max: 1,\n    fetch_types: false,\n    idle_timeout: null,\n    max_lifetime: null,\n    connection: {\n      ...options.connection,\n      replication: 'database'\n    },\n    onclose: async function() {\n      if (ended)\n        return\n      stream = null\n      state.pid = state.secret = undefined\n      connected(await init(sql, slot, options.publications))\n      subscribers.forEach(event => event.forEach(({ onsubscribe }) => onsubscribe()))\n    },\n    no_subscribe: true\n  })\n\n  const end = sql.end\n      , close = sql.close\n\n  sql.end = async() => {\n    ended = true\n    stream && (await new Promise(r => (stream.once('close', r), stream.end())))\n    return end()\n  }\n\n  sql.close = async() => {\n    stream && (await new Promise(r => (stream.once('close', r), stream.end())))\n    return close()\n  }\n\n  return subscribe\n\n  async function subscribe(event, fn, onsubscribe = noop, onerror = noop) {\n    event = parseEvent(event)\n\n    if (!connection)\n      connection = init(sql, slot, options.publications)\n\n    const subscriber = { fn, onsubscribe }\n    const fns = subscribers.has(event)\n      ? subscribers.get(event).add(subscriber)\n      : subscribers.set(event, new Set([subscriber])).get(event)\n\n    const unsubscribe = () => {\n      fns.delete(subscriber)\n      fns.size === 0 && subscribers.delete(event)\n    }\n\n    return connection.then(x => {\n      connected(x)\n      onsubscribe()\n      stream && stream.on('error', onerror)\n      return { unsubscribe, state, sql }\n    })\n  }\n\n  function connected(x) {\n    stream = x.stream\n    state.pid = x.state.pid\n    state.secret = x.state.secret\n  }\n\n  async function init(sql, slot, publications) {\n    if (!publications)\n      throw new Error('Missing publication names')\n\n    const xs = await sql.unsafe(\n      `CREATE_REPLICATION_SLOT ${ slot } TEMPORARY LOGICAL pgoutput NOEXPORT_SNAPSHOT`\n    )\n\n    const [x] = xs\n\n    const stream = await sql.unsafe(\n      `START_REPLICATION SLOT ${ slot } LOGICAL ${\n        x.consistent_point\n      } (proto_version '1', publication_names '${ publications }')`\n    ).writable()\n\n    const state = {\n      lsn: Buffer.concat(x.consistent_point.split('/').map(x => Buffer.from(('00000000' + x).slice(-8), 'hex')))\n    }\n\n    stream.on('data', data)\n    stream.on('error', error)\n    stream.on('close', sql.close)\n\n    return { stream, state: xs.state }\n\n    function error(e) {\n      console.error('Unexpected error during logical streaming - reconnecting', e) // eslint-disable-line\n    }\n\n    function data(x) {\n      if (x[0] === 0x77) {\n        parse(x.subarray(25), state, sql.options.parsers, handle, options.transform)\n      } else if (x[0] === 0x6b && x[17]) {\n        state.lsn = x.subarray(1, 9)\n        pong()\n      }\n    }\n\n    function handle(a, b) {\n      const path = b.relation.schema + '.' + b.relation.table\n      call('*', a, b)\n      call('*:' + path, a, b)\n      b.relation.keys.length && call('*:' + path + '=' + b.relation.keys.map(x => a[x.name]), a, b)\n      call(b.command, a, b)\n      call(b.command + ':' + path, a, b)\n      b.relation.keys.length && call(b.command + ':' + path + '=' + b.relation.keys.map(x => a[x.name]), a, b)\n    }\n\n    function pong() {\n      const x = Buffer.alloc(34)\n      x[0] = 'r'.charCodeAt(0)\n      x.fill(state.lsn, 1)\n      x.writeBigInt64BE(BigInt(Date.now() - Date.UTC(2000, 0, 1)) * BigInt(1000), 25)\n      stream.write(x)\n    }\n  }\n\n  function call(x, a, b) {\n    subscribers.has(x) && subscribers.get(x).forEach(({ fn }) => fn(a, b, x))\n  }\n}\n\nfunction Time(x) {\n  return new Date(Date.UTC(2000, 0, 1) + Number(x / BigInt(1000)))\n}\n\nfunction parse(x, state, parsers, handle, transform) {\n  const char = (acc, [k, v]) => (acc[k.charCodeAt(0)] = v, acc)\n\n  Object.entries({\n    R: x => {  // Relation\n      let i = 1\n      const r = state[x.readUInt32BE(i)] = {\n        schema: x.toString('utf8', i += 4, i = x.indexOf(0, i)) || 'pg_catalog',\n        table: x.toString('utf8', i + 1, i = x.indexOf(0, i + 1)),\n        columns: Array(x.readUInt16BE(i += 2)),\n        keys: []\n      }\n      i += 2\n\n      let columnIndex = 0\n        , column\n\n      while (i < x.length) {\n        column = r.columns[columnIndex++] = {\n          key: x[i++],\n          name: transform.column.from\n            ? transform.column.from(x.toString('utf8', i, i = x.indexOf(0, i)))\n            : x.toString('utf8', i, i = x.indexOf(0, i)),\n          type: x.readUInt32BE(i += 1),\n          parser: parsers[x.readUInt32BE(i)],\n          atttypmod: x.readUInt32BE(i += 4)\n        }\n\n        column.key && r.keys.push(column)\n        i += 4\n      }\n    },\n    Y: () => { /* noop */ }, // Type\n    O: () => { /* noop */ }, // Origin\n    B: x => { // Begin\n      state.date = Time(x.readBigInt64BE(9))\n      state.lsn = x.subarray(1, 9)\n    },\n    I: x => { // Insert\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      const { row } = tuples(x, relation.columns, i += 7, transform)\n\n      handle(row, {\n        command: 'insert',\n        relation\n      })\n    },\n    D: x => { // Delete\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      i += 4\n      const key = x[i] === 75\n      handle(key || x[i] === 79\n        ? tuples(x, relation.columns, i += 3, transform).row\n        : null\n      , {\n        command: 'delete',\n        relation,\n        key\n      })\n    },\n    U: x => { // Update\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      i += 4\n      const key = x[i] === 75\n      const xs = key || x[i] === 79\n        ? tuples(x, relation.columns, i += 3, transform)\n        : null\n\n      xs && (i = xs.i)\n\n      const { row } = tuples(x, relation.columns, i + 3, transform)\n\n      handle(row, {\n        command: 'update',\n        relation,\n        key,\n        old: xs && xs.row\n      })\n    },\n    T: () => { /* noop */ }, // Truncate,\n    C: () => { /* noop */ }  // Commit\n  }).reduce(char, {})[x[0]](x)\n}\n\nfunction tuples(x, columns, xi, transform) {\n  let type\n    , column\n    , value\n\n  const row = transform.raw ? new Array(columns.length) : {}\n  for (let i = 0; i < columns.length; i++) {\n    type = x[xi++]\n    column = columns[i]\n    value = type === 110 // n\n      ? null\n      : type === 117 // u\n        ? undefined\n        : column.parser === undefined\n          ? x.toString('utf8', xi + 4, xi += 4 + x.readUInt32BE(xi))\n          : column.parser.array === true\n            ? column.parser(x.toString('utf8', xi + 5, xi += 4 + x.readUInt32BE(xi)))\n            : column.parser(x.toString('utf8', xi + 4, xi += 4 + x.readUInt32BE(xi)))\n\n    transform.raw\n      ? (row[i] = transform.raw === true\n        ? value\n        : transform.value.from ? transform.value.from(value, column) : value)\n      : (row[column.name] = transform.value.from\n        ? transform.value.from(value, column)\n        : value\n      )\n  }\n\n  return { i: xi, row: transform.row.from ? transform.row.from(row) : row }\n}\n\nfunction parseEvent(x) {\n  const xs = x.match(/^(\\*|insert|update|delete)?:?([^.]+?\\.?[^=]+)?=?(.+)?/i) || []\n\n  if (!xs)\n    throw new Error('Malformed subscribe pattern: ' + x)\n\n  const [, command, path, key] = xs\n\n  return (command || '*')\n       + (path ? ':' + (path.indexOf('.') === -1 ? 'public.' + path : path) : '')\n       + (key ? '=' + key : '')\n}\n","import Stream from 'stream'\n\nexport default function largeObject(sql, oid, mode = 0x00020000 | 0x00040000) {\n  return new Promise(async(resolve, reject) => {\n    await sql.begin(async sql => {\n      let finish\n      !oid && ([{ oid }] = await sql`select lo_creat(-1) as oid`)\n      const [{ fd }] = await sql`select lo_open(${ oid }, ${ mode }) as fd`\n\n      const lo = {\n        writable,\n        readable,\n        close     : () => sql`select lo_close(${ fd })`.then(finish),\n        tell      : () => sql`select lo_tell64(${ fd })`,\n        read      : (x) => sql`select loread(${ fd }, ${ x }) as data`,\n        write     : (x) => sql`select lowrite(${ fd }, ${ x })`,\n        truncate  : (x) => sql`select lo_truncate64(${ fd }, ${ x })`,\n        seek      : (x, whence = 0) => sql`select lo_lseek64(${ fd }, ${ x }, ${ whence })`,\n        size      : () => sql`\n          select\n            lo_lseek64(${ fd }, location, 0) as position,\n            seek.size\n          from (\n            select\n              lo_lseek64($1, 0, 2) as size,\n              tell.location\n            from (select lo_tell64($1) as location) tell\n          ) seek\n        `\n      }\n\n      resolve(lo)\n\n      return new Promise(async r => finish = r)\n\n      async function readable({\n        highWaterMark = 2048 * 8,\n        start = 0,\n        end = Infinity\n      } = {}) {\n        let max = end - start\n        start && await lo.seek(start)\n        return new Stream.Readable({\n          highWaterMark,\n          async read(size) {\n            const l = size > max ? size - max : size\n            max -= size\n            const [{ data }] = await lo.read(l)\n            this.push(data)\n            if (data.length < size)\n              this.push(null)\n          }\n        })\n      }\n\n      async function writable({\n        highWaterMark = 2048 * 8,\n        start = 0\n      } = {}) {\n        start && await lo.seek(start)\n        return new Stream.Writable({\n          highWaterMark,\n          write(chunk, encoding, callback) {\n            lo.write(chunk).then(() => callback(), callback)\n          }\n        })\n      }\n    }).catch(reject)\n  })\n}\n","import os from 'os'\nimport fs from 'fs'\n\nimport {\n  mergeUserTypes,\n  inferType,\n  Parameter,\n  Identifier,\n  Builder,\n  toPascal,\n  pascal,\n  toCamel,\n  camel,\n  toKebab,\n  kebab,\n  fromPascal,\n  fromCamel,\n  fromKebab\n} from './types.js'\n\nimport Connection from './connection.js'\nimport { Query, CLOSE } from './query.js'\nimport Queue from './queue.js'\nimport { Errors, PostgresError } from './errors.js'\nimport Subscribe from './subscribe.js'\nimport largeObject from './large.js'\n\nObject.assign(Postgres, {\n  PostgresError,\n  toPascal,\n  pascal,\n  toCamel,\n  camel,\n  toKebab,\n  kebab,\n  fromPascal,\n  fromCamel,\n  fromKebab,\n  BigInt: {\n    to: 20,\n    from: [20],\n    parse: x => BigInt(x), // eslint-disable-line\n    serialize: x => x.toString()\n  }\n})\n\nexport default Postgres\n\nfunction Postgres(a, b) {\n  const options = parseOptions(a, b)\n      , subscribe = options.no_subscribe || Subscribe(Postgres, { ...options })\n\n  let ending = false\n\n  const queries = Queue()\n      , connecting = Queue()\n      , reserved = Queue()\n      , closed = Queue()\n      , ended = Queue()\n      , open = Queue()\n      , busy = Queue()\n      , full = Queue()\n      , queues = { connecting, reserved, closed, ended, open, busy, full }\n\n  const connections = [...Array(options.max)].map(() => Connection(options, queues, { onopen, onend, onclose }))\n\n  const sql = Sql(handler)\n\n  Object.assign(sql, {\n    get parameters() { return options.parameters },\n    largeObject: largeObject.bind(null, sql),\n    subscribe,\n    CLOSE,\n    END: CLOSE,\n    PostgresError,\n    options,\n    reserve,\n    listen,\n    begin,\n    close,\n    end\n  })\n\n  return sql\n\n  function Sql(handler) {\n    handler.debug = options.debug\n\n    Object.entries(options.types).reduce((acc, [name, type]) => {\n      acc[name] = (x) => new Parameter(x, type.to)\n      return acc\n    }, typed)\n\n    Object.assign(sql, {\n      types: typed,\n      typed,\n      unsafe,\n      notify,\n      array,\n      json,\n      file\n    })\n\n    return sql\n\n    function typed(value, type) {\n      return new Parameter(value, type)\n    }\n\n    function sql(strings, ...args) {\n      const query = strings && Array.isArray(strings.raw)\n        ? new Query(strings, args, handler, cancel)\n        : typeof strings === 'string' && !args.length\n          ? new Identifier(options.transform.column.to ? options.transform.column.to(strings) : strings)\n          : new Builder(strings, args)\n      return query\n    }\n\n    function unsafe(string, args = [], options = {}) {\n      arguments.length === 2 && !Array.isArray(args) && (options = args, args = [])\n      const query = new Query([string], args, handler, cancel, {\n        prepare: false,\n        ...options,\n        simple: 'simple' in options ? options.simple : args.length === 0\n      })\n      return query\n    }\n\n    function file(path, args = [], options = {}) {\n      arguments.length === 2 && !Array.isArray(args) && (options = args, args = [])\n      const query = new Query([], args, (query) => {\n        fs.readFile(path, 'utf8', (err, string) => {\n          if (err)\n            return query.reject(err)\n\n          query.strings = [string]\n          handler(query)\n        })\n      }, cancel, {\n        ...options,\n        simple: 'simple' in options ? options.simple : args.length === 0\n      })\n      return query\n    }\n  }\n\n  async function listen(name, fn, onlisten) {\n    const listener = { fn, onlisten }\n\n    const sql = listen.sql || (listen.sql = Postgres({\n      ...options,\n      max: 1,\n      idle_timeout: null,\n      max_lifetime: null,\n      fetch_types: false,\n      onclose() {\n        Object.entries(listen.channels).forEach(([name, { listeners }]) => {\n          delete listen.channels[name]\n          Promise.all(listeners.map(l => listen(name, l.fn, l.onlisten).catch(() => { /* noop */ })))\n        })\n      },\n      onnotify(c, x) {\n        c in listen.channels && listen.channels[c].listeners.forEach(l => l.fn(x))\n      }\n    }))\n\n    const channels = listen.channels || (listen.channels = {})\n        , exists = name in channels\n\n    if (exists) {\n      channels[name].listeners.push(listener)\n      const result = await channels[name].result\n      listener.onlisten && listener.onlisten()\n      return { state: result.state, unlisten }\n    }\n\n    channels[name] = { result: sql`listen ${\n      sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')\n    }`, listeners: [listener] }\n    const result = await channels[name].result\n    listener.onlisten && listener.onlisten()\n    return { state: result.state, unlisten }\n\n    async function unlisten() {\n      if (name in channels === false)\n        return\n\n      channels[name].listeners = channels[name].listeners.filter(x => x !== listener)\n      if (channels[name].listeners.length)\n        return\n\n      delete channels[name]\n      return sql`unlisten ${\n        sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')\n      }`\n    }\n  }\n\n  async function notify(channel, payload) {\n    return await sql`select pg_notify(${ channel }, ${ '' + payload })`\n  }\n\n  async function reserve() {\n    const queue = Queue()\n    const c = open.length\n      ? open.shift()\n      : await new Promise((resolve, reject) => {\n        const query = { reserve: resolve, reject }\n        queries.push(query)\n        closed.length && connect(closed.shift(), query)\n      })\n\n    move(c, reserved)\n    c.reserved = () => queue.length\n      ? c.execute(queue.shift())\n      : move(c, reserved)\n    c.reserved.release = true\n\n    const sql = Sql(handler)\n    sql.release = () => {\n      c.reserved = null\n      onopen(c)\n    }\n\n    return sql\n\n    function handler(q) {\n      c.queue === full\n        ? queue.push(q)\n        : c.execute(q) || move(c, full)\n    }\n  }\n\n  async function begin(options, fn) {\n    !fn && (fn = options, options = '')\n    const queries = Queue()\n    let savepoints = 0\n      , connection\n      , prepare = null\n\n    try {\n      await sql.unsafe('begin ' + options.replace(/[^a-z ]/ig, ''), [], { onexecute }).execute()\n      return await Promise.race([\n        scope(connection, fn),\n        new Promise((_, reject) => connection.onclose = reject)\n      ])\n    } catch (error) {\n      throw error\n    }\n\n    async function scope(c, fn, name) {\n      const sql = Sql(handler)\n      sql.savepoint = savepoint\n      sql.prepare = x => prepare = x.replace(/[^a-z0-9$-_. ]/gi)\n      let uncaughtError\n        , result\n\n      name && await sql`savepoint ${ sql(name) }`\n      try {\n        result = await new Promise((resolve, reject) => {\n          const x = fn(sql)\n          Promise.resolve(Array.isArray(x) ? Promise.all(x) : x).then(resolve, reject)\n        })\n\n        if (uncaughtError)\n          throw uncaughtError\n      } catch (e) {\n        await (name\n          ? sql`rollback to ${ sql(name) }`\n          : sql`rollback`\n        )\n        throw e instanceof PostgresError && e.code === '25P02' && uncaughtError || e\n      }\n\n      if (!name) {\n        prepare\n          ? await sql`prepare transaction '${ sql.unsafe(prepare) }'`\n          : await sql`commit`\n      }\n\n      return result\n\n      function savepoint(name, fn) {\n        if (name && Array.isArray(name.raw))\n          return savepoint(sql => sql.apply(sql, arguments))\n\n        arguments.length === 1 && (fn = name, name = null)\n        return scope(c, fn, 's' + savepoints++ + (name ? '_' + name : ''))\n      }\n\n      function handler(q) {\n        q.catch(e => uncaughtError || (uncaughtError = e))\n        c.queue === full\n          ? queries.push(q)\n          : c.execute(q) || move(c, full)\n      }\n    }\n\n    function onexecute(c) {\n      connection = c\n      move(c, reserved)\n      c.reserved = () => queries.length\n        ? c.execute(queries.shift())\n        : move(c, reserved)\n    }\n  }\n\n  function move(c, queue) {\n    c.queue.remove(c)\n    queue.push(c)\n    c.queue = queue\n    queue === open\n      ? c.idleTimer.start()\n      : c.idleTimer.cancel()\n    return c\n  }\n\n  function json(x) {\n    return new Parameter(x, 3802)\n  }\n\n  function array(x, type) {\n    if (!Array.isArray(x))\n      return array(Array.from(arguments))\n\n    return new Parameter(x, type || (x.length ? inferType(x) || 25 : 0), options.shared.typeArrayMap)\n  }\n\n  function handler(query) {\n    if (ending)\n      return query.reject(Errors.connection('CONNECTION_ENDED', options, options))\n\n    if (open.length)\n      return go(open.shift(), query)\n\n    if (closed.length)\n      return connect(closed.shift(), query)\n\n    busy.length\n      ? go(busy.shift(), query)\n      : queries.push(query)\n  }\n\n  function go(c, query) {\n    return c.execute(query)\n      ? move(c, busy)\n      : move(c, full)\n  }\n\n  function cancel(query) {\n    return new Promise((resolve, reject) => {\n      query.state\n        ? query.active\n          ? Connection(options).cancel(query.state, resolve, reject)\n          : query.cancelled = { resolve, reject }\n        : (\n          queries.remove(query),\n          query.cancelled = true,\n          query.reject(Errors.generic('57014', 'canceling statement due to user request')),\n          resolve()\n        )\n    })\n  }\n\n  async function end({ timeout = null } = {}) {\n    if (ending)\n      return ending\n\n    await 1\n    let timer\n    return ending = Promise.race([\n      new Promise(r => timeout !== null && (timer = setTimeout(destroy, timeout * 1000, r))),\n      Promise.all(connections.map(c => c.end()).concat(\n        listen.sql ? listen.sql.end({ timeout: 0 }) : [],\n        subscribe.sql ? subscribe.sql.end({ timeout: 0 }) : []\n      ))\n    ]).then(() => clearTimeout(timer))\n  }\n\n  async function close() {\n    await Promise.all(connections.map(c => c.end()))\n  }\n\n  async function destroy(resolve) {\n    await Promise.all(connections.map(c => c.terminate()))\n    while (queries.length)\n      queries.shift().reject(Errors.connection('CONNECTION_DESTROYED', options))\n    resolve()\n  }\n\n  function connect(c, query) {\n    move(c, connecting)\n    c.connect(query)\n    return c\n  }\n\n  function onend(c) {\n    move(c, ended)\n  }\n\n  function onopen(c) {\n    if (queries.length === 0)\n      return move(c, open)\n\n    let max = Math.ceil(queries.length / (connecting.length + 1))\n      , ready = true\n\n    while (ready && queries.length && max-- > 0) {\n      const query = queries.shift()\n      if (query.reserve)\n        return query.reserve(c)\n\n      ready = c.execute(query)\n    }\n\n    ready\n      ? move(c, busy)\n      : move(c, full)\n  }\n\n  function onclose(c, e) {\n    move(c, closed)\n    c.reserved = null\n    c.onclose && (c.onclose(e), c.onclose = null)\n    options.onclose && options.onclose(c.id)\n    queries.length && connect(c, queries.shift())\n  }\n}\n\nfunction parseOptions(a, b) {\n  if (a && a.shared)\n    return a\n\n  const env = process.env // eslint-disable-line\n      , o = (!a || typeof a === 'string' ? b : a) || {}\n      , { url, multihost } = parseUrl(a)\n      , query = [...url.searchParams].reduce((a, [b, c]) => (a[b] = c, a), {})\n      , host = o.hostname || o.host || multihost || url.hostname || env.PGHOST || 'localhost'\n      , port = o.port || url.port || env.PGPORT || 5432\n      , user = o.user || o.username || url.username || env.PGUSERNAME || env.PGUSER || osUsername()\n\n  o.no_prepare && (o.prepare = false)\n  query.sslmode && (query.ssl = query.sslmode, delete query.sslmode)\n  'timeout' in o && (console.log('The timeout option is deprecated, use idle_timeout instead'), o.idle_timeout = o.timeout) // eslint-disable-line\n  query.sslrootcert === 'system' && (query.ssl = 'verify-full')\n\n  const ints = ['idle_timeout', 'connect_timeout', 'max_lifetime', 'max_pipeline', 'backoff', 'keep_alive']\n  const defaults = {\n    max             : 10,\n    ssl             : false,\n    idle_timeout    : null,\n    connect_timeout : 30,\n    max_lifetime    : max_lifetime,\n    max_pipeline    : 100,\n    backoff         : backoff,\n    keep_alive      : 60,\n    prepare         : true,\n    debug           : false,\n    fetch_types     : true,\n    publications    : 'alltables',\n    target_session_attrs: null\n  }\n\n  return {\n    host            : Array.isArray(host) ? host : host.split(',').map(x => x.split(':')[0]),\n    port            : Array.isArray(port) ? port : host.split(',').map(x => parseInt(x.split(':')[1] || port)),\n    path            : o.path || host.indexOf('/') > -1 && host + '/.s.PGSQL.' + port,\n    database        : o.database || o.db || (url.pathname || '').slice(1) || env.PGDATABASE || user,\n    user            : user,\n    pass            : o.pass || o.password || url.password || env.PGPASSWORD || '',\n    ...Object.entries(defaults).reduce(\n      (acc, [k, d]) => {\n        const value = k in o ? o[k] : k in query\n          ? (query[k] === 'disable' || query[k] === 'false' ? false : query[k])\n          : env['PG' + k.toUpperCase()] || d\n        acc[k] = typeof value === 'string' && ints.includes(k)\n          ? +value\n          : value\n        return acc\n      },\n      {}\n    ),\n    connection      : {\n      application_name: env.PGAPPNAME || 'postgres.js',\n      ...o.connection,\n      ...Object.entries(query).reduce((acc, [k, v]) => (k in defaults || (acc[k] = v), acc), {})\n    },\n    types           : o.types || {},\n    target_session_attrs: tsa(o, url, env),\n    onnotice        : o.onnotice,\n    onnotify        : o.onnotify,\n    onclose         : o.onclose,\n    onparameter     : o.onparameter,\n    socket          : o.socket,\n    transform       : parseTransform(o.transform || { undefined: undefined }),\n    parameters      : {},\n    shared          : { retries: 0, typeArrayMap: {} },\n    ...mergeUserTypes(o.types)\n  }\n}\n\nfunction tsa(o, url, env) {\n  const x = o.target_session_attrs || url.searchParams.get('target_session_attrs') || env.PGTARGETSESSIONATTRS\n  if (!x || ['read-write', 'read-only', 'primary', 'standby', 'prefer-standby'].includes(x))\n    return x\n\n  throw new Error('target_session_attrs ' + x + ' is not supported')\n}\n\nfunction backoff(retries) {\n  return (0.5 + Math.random() / 2) * Math.min(3 ** retries / 100, 20)\n}\n\nfunction max_lifetime() {\n  return 60 * (30 + Math.random() * 30)\n}\n\nfunction parseTransform(x) {\n  return {\n    undefined: x.undefined,\n    column: {\n      from: typeof x.column === 'function' ? x.column : x.column && x.column.from,\n      to: x.column && x.column.to\n    },\n    value: {\n      from: typeof x.value === 'function' ? x.value : x.value && x.value.from,\n      to: x.value && x.value.to\n    },\n    row: {\n      from: typeof x.row === 'function' ? x.row : x.row && x.row.from,\n      to: x.row && x.row.to\n    }\n  }\n}\n\nfunction parseUrl(url) {\n  if (!url || typeof url !== 'string')\n    return { url: { searchParams: new Map() } }\n\n  let host = url\n  host = host.slice(host.indexOf('://') + 3).split(/[?/]/)[0]\n  host = decodeURIComponent(host.slice(host.indexOf('@') + 1))\n\n  const urlObj = new URL(url.replace(host, host.split(',')[0]))\n\n  return {\n    url: {\n      username: decodeURIComponent(urlObj.username),\n      password: decodeURIComponent(urlObj.password),\n      host: urlObj.host,\n      hostname: urlObj.hostname,\n      port: urlObj.port,\n      pathname: urlObj.pathname,\n      searchParams: urlObj.searchParams\n    },\n    multihost: host.indexOf(',') > -1 && host\n  }\n}\n\nfunction osUsername() {\n  try {\n    return os.userInfo().username // eslint-disable-line\n  } catch (_) {\n    return process.env.USERNAME || process.env.USER || process.env.LOGNAME  // eslint-disable-line\n  }\n}\n","/** @internal */\nclass ReadonlyURLSearchParamsError extends Error {\n  constructor() {\n    super(\n      'Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams'\n    )\n  }\n}\n\nclass ReadonlyURLSearchParams extends URLSearchParams {\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  append() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  delete() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  set() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  sort() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n}\n\nexport { redirect, permanentRedirect } from './redirect'\nexport { RedirectType } from './redirect-error'\nexport { notFound } from './not-found'\nexport { forbidden } from './forbidden'\nexport { unauthorized } from './unauthorized'\nexport { unstable_rethrow } from './unstable-rethrow'\nexport { ReadonlyURLSearchParams }\n"],"names":["notFound","DIGEST","HTTP_ERROR_FALLBACK_ERROR_CODE","error","digest","forbidden","Error","unstable_rethrow","isNextRouterError","isBailoutToCSRError","isDynamicServerError","isDynamicPostpone","isPostpone","isHangingPromiseRejectionError","require","unauthorized","getRedirectError","getRedirectStatusCodeFromError","getRedirectTypeFromError","getURLFromRedirectError","permanentRedirect","redirect","actionAsyncStorage","undefined","url","type","statusCode","RedirectStatusCode","TemporaryRedirect","REDIRECT_ERROR_CODE","getStore","isAction","RedirectType","push","replace","PermanentRedirect","isRedirectError","split","slice","join","Number","at","ReadonlyURLSearchParams","ReadonlyURLSearchParamsError","constructor","URLSearchParams","append","delete","set","sort"],"sourceRoot":""}