-- Migration to fix fine_tuning_jobs policy that references non-existent user_id column
-- in the profiles table

BEGIN;

-- Register migration
DO $$
DECLARE
    migration_id INTEGER;
BEGIN
    -- Register migration
    SELECT migration_meta.register_migration(
        '1.15.0',
        'fix_fine_tuning_policy',
        'Fix policies that incorrectly reference user_id instead of id in profiles table'
    ) INTO migration_id;
    
    -- Log the start of the process
    PERFORM migration_meta.log_migration(
        migration_id, 
        'INFO', 
        'Starting migration 1.15.0_fix_fine_tuning_policy'
    );

    -- Fix policy issue in fine_tuning_jobs
    DO $POLICY$
    BEGIN
        -- Drop the problematic policy if it exists
        DROP POLICY IF EXISTS "Fine-tuning jobs viewable by admins" ON public.fine_tuning_jobs;
        
        IF EXISTS (
            SELECT 1 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'fine_tuning_jobs'
        ) THEN
            -- Create policy using the correct column reference (id instead of user_id)
            CREATE POLICY "Fine-tuning jobs viewable by admins" 
            ON public.fine_tuning_jobs FOR SELECT 
            TO authenticated 
            USING (
                EXISTS (
                    SELECT 1 FROM public.profiles 
                    WHERE id = auth.uid() AND is_admin = true
                )
            );
            
            PERFORM migration_meta.log_migration(
                migration_id, 
                'INFO', 
                'Fixed Fine-tuning jobs policy to use id instead of user_id'
            );
        ELSE
            PERFORM migration_meta.log_migration(
                migration_id, 
                'WARNING', 
                'Table fine_tuning_jobs not found, skipping policy fix'
            );
        END IF;
    EXCEPTION WHEN OTHERS THEN
        PERFORM migration_meta.log_migration(
            migration_id, 
            'ERROR', 
            'Error fixing fine_tuning_jobs policy: ' || SQLERRM
        );
    END $POLICY$;

    -- Fix policy issue in ai_feedback
    DO $AI_FEEDBACK$
    BEGIN
        -- Fix AI feedback policy if it exists
        DROP POLICY IF EXISTS "AI feedback viewable by admins" ON public.ai_feedback;
        
        IF EXISTS (
            SELECT 1 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'ai_feedback'
        ) THEN
            -- Recreate with correct column reference
            CREATE POLICY "AI feedback viewable by admins" 
            ON public.ai_feedback FOR SELECT 
            TO authenticated 
            USING (
                EXISTS (
                    SELECT 1 FROM public.profiles 
                    WHERE id = auth.uid() AND is_admin = true
                )
            );
            
            PERFORM migration_meta.log_migration(
                migration_id, 
                'INFO', 
                'Fixed AI feedback policy to use id instead of user_id'
            );
        END IF;
    EXCEPTION WHEN OTHERS THEN
        PERFORM migration_meta.log_migration(
            migration_id, 
            'WARNING', 
            'Error fixing AI feedback policy: ' || SQLERRM
        );
    END $AI_FEEDBACK$;

    -- Fix policy issues in other tables from migration 20240925_1.8.0_additional_features.sql
    DO $OTHER_POLICIES$
    BEGIN
        -- Check and fix policies in llm_models table
        IF EXISTS (
            SELECT 1 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'llm_models'
        ) THEN
            DROP POLICY IF EXISTS "LLM models viewable by admins" ON public.llm_models;
            
            CREATE POLICY "LLM models viewable by admins" 
            ON public.llm_models FOR SELECT 
            TO authenticated 
            USING (
                EXISTS (
                    SELECT 1 FROM public.profiles 
                    WHERE id = auth.uid() AND is_admin = true
                )
            );
            
            PERFORM migration_meta.log_migration(
                migration_id, 
                'INFO', 
                'Fixed LLM models policy'
            );
        END IF;
        
        -- Check and fix policies in api_keys table
        IF EXISTS (
            SELECT 1 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'api_keys'
        ) THEN
            DROP POLICY IF EXISTS "API keys viewable by admins" ON public.api_keys;
            
            CREATE POLICY "API keys viewable by admins" 
            ON public.api_keys FOR SELECT 
            TO authenticated 
            USING (
                EXISTS (
                    SELECT 1 FROM public.profiles 
                    WHERE id = auth.uid() AND is_admin = true
                )
            );
            
            PERFORM migration_meta.log_migration(
                migration_id, 
                'INFO', 
                'Fixed API keys policy'
            );
        END IF;
        
        -- Check and fix policies in system_settings table
        IF EXISTS (
            SELECT 1 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'system_settings'
        ) THEN
            DROP POLICY IF EXISTS "System settings viewable by admins" ON public.system_settings;
            
            CREATE POLICY "System settings viewable by admins" 
            ON public.system_settings FOR SELECT 
            TO authenticated 
            USING (
                EXISTS (
                    SELECT 1 FROM public.profiles 
                    WHERE id = auth.uid() AND is_admin = true
                )
            );
            
            PERFORM migration_meta.log_migration(
                migration_id, 
                'INFO', 
                'Fixed System settings policy'
            );
        END IF;
        
        -- Check and fix any other known policies from 20240934_1.13.0_policy_syntax_fix.sql
        -- that might have the same issue
        
    EXCEPTION WHEN OTHERS THEN
        PERFORM migration_meta.log_migration(
            migration_id, 
            'WARNING', 
            'Error fixing other policies: ' || SQLERRM
        );
    END $OTHER_POLICIES$;

    -- Create a helper function to identify admin users correctly
    CREATE OR REPLACE FUNCTION public.is_admin_user()
    RETURNS BOOLEAN AS $$
    DECLARE
        is_admin_result BOOLEAN;
    BEGIN
        -- Check if the current user has admin privileges
        SELECT is_admin INTO is_admin_result
        FROM public.profiles
        WHERE id = auth.uid();
        
        -- Return false if no profile found or not admin
        RETURN COALESCE(is_admin_result, false);
    END;
    $$ LANGUAGE plpgsql SECURITY DEFINER;

    COMMENT ON FUNCTION public.is_admin_user() IS 'Checks if the current user has admin privileges by using the correct id column';

    PERFORM migration_meta.log_migration(
        migration_id, 
        'INFO', 
        'Created helper function is_admin_user() that correctly references the id column'
    );

    -- Log completion
    PERFORM migration_meta.log_migration(
        migration_id, 
        'INFO', 
        'Completed migration 1.15.0_fix_fine_tuning_policy'
    );
END $$;

COMMIT; 