{"version":3,"file":"4763.js","mappings":"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","sources":["webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/constructNow.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/compareAsc.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInCalendarMonths.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfDay.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfMonth.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isLastDayOfMonth.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInMonths.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/getRoundingMethod.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInMilliseconds.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/differenceInSeconds.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatDistance.js","webpack://@hijraah/web/../../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/formatDistanceToNow.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const diff = +toDate(dateLeft) - +toDate(dateRight);\n\n  if (diff < 0) return -1;\n  else if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarMonths} function options.\n */\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n\n  return yearsDiff * 12 + monthsDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfDay} function options.\n */\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMonth} function options.\n */\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { endOfDay } from \"./endOfDay.js\";\nimport { endOfMonth } from \"./endOfMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  return +endOfDay(_date, options) === +endOfMonth(_date, options);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.js\";\n\n/**\n * The {@link differenceInMonths} function options.\n */\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(laterDate, earlierDate, options) {\n  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareAsc(workingLaterDate, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarMonths(workingLaterDate, earlierDate_),\n  );\n\n  if (difference < 1) return 0;\n\n  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)\n    workingLaterDate.setDate(30);\n\n  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);\n\n  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;\n\n  if (\n    isLastDayOfMonth(laterDate_) &&\n    difference === 1 &&\n    compareAsc(laterDate_, earlierDate_) === 1\n  ) {\n    isLastMonthNotFull = false;\n  }\n\n  const result = sign * (difference - +isLastMonthNotFull);\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(laterDate, earlierDate, options) {\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { minutesInDay, minutesInMonth } from \"./constants.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistance(laterDate, earlierDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(laterDate, earlierDate);\n\n  if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\n  );\n\n  const seconds = differenceInSeconds(earlierDate_, laterDate_);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(earlierDate_) -\n      getTimezoneOffsetInMilliseconds(laterDate_)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(earlierDate_, laterDate_);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","import { constructNow } from \"./constructNow.js\";\n\nimport { formatDistance } from \"./formatDistance.js\";\n\n/**\n * The {@link formatDistanceToNow} function options.\n */\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @param date - The given date\n * @param options - The object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistanceToNow(date, options) {\n  return formatDistance(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNow;\n"],"names":["compareAsc","dateLeft","dateRight","diff","toDate","formatDistanceToNow","date","options","formatDistance","earlierDate","months","defaultOptions","getDefaultOptions","locale","defaultLocale","comparison","laterDate","localizeOptions","Object","assign","addSuffix","laterDate_","earlierDate_","normalizeDates","in","seconds","differenceInSeconds","getRoundingMethod","method","roundingMethod","result","round","Math","trunc","number","minutes","getTimezoneOffsetInMilliseconds","offsetInSeconds","includeSeconds","minutesInDay","hours","minutesInAlmostTwoDays","minutesInMonth","days","differenceInMonths","workingLaterDate","difference","abs","differenceInCalendarMonths","yearsDiff","monthsDiff","getFullYear","getMonth","getDate","setDate","setMonth","sign","isLastMonthNotFull","isLastDayOfMonth","_date","endOfDay","setHours","endOfMonth","month","setFullYear","nearestMonth","monthsSinceStartOfYear","years","constructFrom","constructNow","Date","now"],"sourceRoot":""}